'use strict';
const _library = Object.create(null);
const dart = Object.create(_library);
dart.library = _library;
var _debugger = Object.create(dart.library);
var _foreign_helper = Object.create(dart.library);
var _interceptors = Object.create(dart.library);
var _internal = Object.create(dart.library);
var _isolate_helper = Object.create(dart.library);
var _js_helper = Object.create(dart.library);
var _js_primitives = Object.create(dart.library);
var _metadata = Object.create(dart.library);
var _native_typed_data = Object.create(dart.library);
var async = Object.create(dart.library);
var collection = Object.create(dart.library);
var convert = Object.create(dart.library);
var developer = Object.create(dart.library);
var io = Object.create(dart.library);
var isolate$ = Object.create(dart.library);
var js = Object.create(dart.library);
var js_util = Object.create(dart.library);
var math = Object.create(dart.library);
var typed_data = Object.create(dart.library);
var core = Object.create(dart.library);
var dartx = Object.create(dart.library);
const _privateNames = Symbol("_privateNames");
dart.privateName = function(library, name) {
  let names = library[_privateNames];
  if (names == null) names = library[_privateNames] = new Map();
  let symbol = names.get(name);
  if (symbol == null) names.set(name, symbol = Symbol(name));
  return symbol;
};
var $hashCode = dartx.hashCode = Symbol("dartx.hashCode");
var $isNotEmpty = dartx.isNotEmpty = Symbol("dartx.isNotEmpty");
var $where = dartx.where = Symbol("dartx.where");
var $join = dartx.join = Symbol("dartx.join");
var $length = dartx.length = Symbol("dartx.length");
var $_equals = dartx._equals = Symbol("dartx._equals");
var $toString = dartx.toString = Symbol("dartx.toString");
var $noSuchMethod = dartx.noSuchMethod = Symbol("dartx.noSuchMethod");
var $cast = dartx.cast = Symbol("dartx.cast");
var $addAll = dartx.addAll = Symbol("dartx.addAll");
var $_set = dartx._set = Symbol("dartx._set");
var $_get = dartx._get = Symbol("dartx._get");
var $clear = dartx.clear = Symbol("dartx.clear");
var $contains = dartx.contains = Symbol("dartx.contains");
var $indexOf = dartx.indexOf = Symbol("dartx.indexOf");
var $add = dartx.add = Symbol("dartx.add");
var $isEmpty = dartx.isEmpty = Symbol("dartx.isEmpty");
var $map = dartx.map = Symbol("dartx.map");
var $toList = dartx.toList = Symbol("dartx.toList");
var $sublist = dartx.sublist = Symbol("dartx.sublist");
var $substring = dartx.substring = Symbol("dartx.substring");
var $split = dartx.split = Symbol("dartx.split");
var $trim = dartx.trim = Symbol("dartx.trim");
var $runtimeType = dartx.runtimeType = Symbol("dartx.runtimeType");
var $containsKey = dartx.containsKey = Symbol("dartx.containsKey");
var $any = dartx.any = Symbol("dartx.any");
var $keys = dartx.keys = Symbol("dartx.keys");
var $remove = dartx.remove = Symbol("dartx.remove");
var $values = dartx.values = Symbol("dartx.values");
var $entries = dartx.entries = Symbol("dartx.entries");
var $dartStack = dartx.dartStack = Symbol("dartx.dartStack");
var $truncate = dartx.truncate = Symbol("dartx.truncate");
var $toInt = dartx.toInt = Symbol("dartx.toInt");
var $skip = dartx.skip = Symbol("dartx.skip");
var $take = dartx.take = Symbol("dartx.take");
var $asMap = dartx.asMap = Symbol("dartx.asMap");
var $forEach = dartx.forEach = Symbol("dartx.forEach");
var $elementAt = dartx.elementAt = Symbol("dartx.elementAt");
var $last = dartx.last = Symbol("dartx.last");
var $firstWhere = dartx.firstWhere = Symbol("dartx.firstWhere");
var $replaceFirst = dartx.replaceFirst = Symbol("dartx.replaceFirst");
var $startsWith = dartx.startsWith = Symbol("dartx.startsWith");
var $compareTo = dartx.compareTo = Symbol("dartx.compareTo");
var $sort = dartx.sort = Symbol("dartx.sort");
var $putIfAbsent = dartx.putIfAbsent = Symbol("dartx.putIfAbsent");
var $round = dartx.round = Symbol("dartx.round");
var $bitAnd = dartx['&'] = Symbol("dartx.&");
var $bitOr = dartx['|'] = Symbol("dartx.|");
var $bitXor = dartx['^'] = Symbol("dartx.^");
var $stackTrace = dartx.stackTrace = Symbol("dartx.stackTrace");
var $invalidValue = dartx.invalidValue = Symbol("dartx.invalidValue");
var $name = dartx.name = Symbol("dartx.name");
var $message = dartx.message = Symbol("dartx.message");
var $checkMutable = dartx.checkMutable = Symbol("dartx.checkMutable");
var $checkGrowable = dartx.checkGrowable = Symbol("dartx.checkGrowable");
var $removeAt = dartx.removeAt = Symbol("dartx.removeAt");
var $insert = dartx.insert = Symbol("dartx.insert");
var $setRange = dartx.setRange = Symbol("dartx.setRange");
var $insertAll = dartx.insertAll = Symbol("dartx.insertAll");
var $setAll = dartx.setAll = Symbol("dartx.setAll");
var $removeLast = dartx.removeLast = Symbol("dartx.removeLast");
var $removeWhere = dartx.removeWhere = Symbol("dartx.removeWhere");
var $retainWhere = dartx.retainWhere = Symbol("dartx.retainWhere");
var $expand = dartx.expand = Symbol("dartx.expand");
var $takeWhile = dartx.takeWhile = Symbol("dartx.takeWhile");
var $skipWhile = dartx.skipWhile = Symbol("dartx.skipWhile");
var $reduce = dartx.reduce = Symbol("dartx.reduce");
var $fold = dartx.fold = Symbol("dartx.fold");
var $lastWhere = dartx.lastWhere = Symbol("dartx.lastWhere");
var $singleWhere = dartx.singleWhere = Symbol("dartx.singleWhere");
var $getRange = dartx.getRange = Symbol("dartx.getRange");
var $first = dartx.first = Symbol("dartx.first");
var $single = dartx.single = Symbol("dartx.single");
var $removeRange = dartx.removeRange = Symbol("dartx.removeRange");
var $fillRange = dartx.fillRange = Symbol("dartx.fillRange");
var $replaceRange = dartx.replaceRange = Symbol("dartx.replaceRange");
var $every = dartx.every = Symbol("dartx.every");
var $reversed = dartx.reversed = Symbol("dartx.reversed");
var $shuffle = dartx.shuffle = Symbol("dartx.shuffle");
var $lastIndexOf = dartx.lastIndexOf = Symbol("dartx.lastIndexOf");
var $toSet = dartx.toSet = Symbol("dartx.toSet");
var $iterator = dartx.iterator = Symbol("dartx.iterator");
var $followedBy = dartx.followedBy = Symbol("dartx.followedBy");
var $whereType = dartx.whereType = Symbol("dartx.whereType");
var $plus = dartx['+'] = Symbol("dartx.+");
var $indexWhere = dartx.indexWhere = Symbol("dartx.indexWhere");
var $lastIndexWhere = dartx.lastIndexWhere = Symbol("dartx.lastIndexWhere");
var $isNegative = dartx.isNegative = Symbol("dartx.isNegative");
var $isNaN = dartx.isNaN = Symbol("dartx.isNaN");
var $isInfinite = dartx.isInfinite = Symbol("dartx.isInfinite");
var $isFinite = dartx.isFinite = Symbol("dartx.isFinite");
var $remainder = dartx.remainder = Symbol("dartx.remainder");
var $abs = dartx.abs = Symbol("dartx.abs");
var $sign = dartx.sign = Symbol("dartx.sign");
var $truncateToDouble = dartx.truncateToDouble = Symbol("dartx.truncateToDouble");
var $ceilToDouble = dartx.ceilToDouble = Symbol("dartx.ceilToDouble");
var $ceil = dartx.ceil = Symbol("dartx.ceil");
var $floorToDouble = dartx.floorToDouble = Symbol("dartx.floorToDouble");
var $floor = dartx.floor = Symbol("dartx.floor");
var $roundToDouble = dartx.roundToDouble = Symbol("dartx.roundToDouble");
var $clamp = dartx.clamp = Symbol("dartx.clamp");
var $toDouble = dartx.toDouble = Symbol("dartx.toDouble");
var $toStringAsFixed = dartx.toStringAsFixed = Symbol("dartx.toStringAsFixed");
var $toStringAsExponential = dartx.toStringAsExponential = Symbol("dartx.toStringAsExponential");
var $toStringAsPrecision = dartx.toStringAsPrecision = Symbol("dartx.toStringAsPrecision");
var $codeUnitAt = dartx.codeUnitAt = Symbol("dartx.codeUnitAt");
var $toRadixString = dartx.toRadixString = Symbol("dartx.toRadixString");
var $times = dartx['*'] = Symbol("dartx.*");
var $_negate = dartx._negate = Symbol("dartx._negate");
var $minus = dartx['-'] = Symbol("dartx.-");
var $divide = dartx['/'] = Symbol("dartx./");
var $modulo = dartx['%'] = Symbol("dartx.%");
var $floorDivide = dartx['~/'] = Symbol("dartx.~/");
var $leftShift = dartx['<<'] = Symbol("dartx.<<");
var $rightShift = dartx['>>'] = Symbol("dartx.>>");
var $lessThan = dartx['<'] = Symbol("dartx.<");
var $greaterThan = dartx['>'] = Symbol("dartx.>");
var $lessOrEquals = dartx['<='] = Symbol("dartx.<=");
var $greaterOrEquals = dartx['>='] = Symbol("dartx.>=");
var $isEven = dartx.isEven = Symbol("dartx.isEven");
var $isOdd = dartx.isOdd = Symbol("dartx.isOdd");
var $toUnsigned = dartx.toUnsigned = Symbol("dartx.toUnsigned");
var $toSigned = dartx.toSigned = Symbol("dartx.toSigned");
var $bitLength = dartx.bitLength = Symbol("dartx.bitLength");
var $modPow = dartx.modPow = Symbol("dartx.modPow");
var $modInverse = dartx.modInverse = Symbol("dartx.modInverse");
var $gcd = dartx.gcd = Symbol("dartx.gcd");
var $bitNot = dartx['~'] = Symbol("dartx.~");
var $allMatches = dartx.allMatches = Symbol("dartx.allMatches");
var $matchAsPrefix = dartx.matchAsPrefix = Symbol("dartx.matchAsPrefix");
var $endsWith = dartx.endsWith = Symbol("dartx.endsWith");
var $replaceAll = dartx.replaceAll = Symbol("dartx.replaceAll");
var $splitMapJoin = dartx.splitMapJoin = Symbol("dartx.splitMapJoin");
var $replaceAllMapped = dartx.replaceAllMapped = Symbol("dartx.replaceAllMapped");
var $replaceFirstMapped = dartx.replaceFirstMapped = Symbol("dartx.replaceFirstMapped");
var $toLowerCase = dartx.toLowerCase = Symbol("dartx.toLowerCase");
var $toUpperCase = dartx.toUpperCase = Symbol("dartx.toUpperCase");
var $trimLeft = dartx.trimLeft = Symbol("dartx.trimLeft");
var $trimRight = dartx.trimRight = Symbol("dartx.trimRight");
var $padLeft = dartx.padLeft = Symbol("dartx.padLeft");
var $padRight = dartx.padRight = Symbol("dartx.padRight");
var $codeUnits = dartx.codeUnits = Symbol("dartx.codeUnits");
var $runes = dartx.runes = Symbol("dartx.runes");
var $buffer = dartx.buffer = Symbol("dartx.buffer");
var $offsetInBytes = dartx.offsetInBytes = Symbol("dartx.offsetInBytes");
var $containsValue = dartx.containsValue = Symbol("dartx.containsValue");
var $update = dartx.update = Symbol("dartx.update");
var $updateAll = dartx.updateAll = Symbol("dartx.updateAll");
var $addEntries = dartx.addEntries = Symbol("dartx.addEntries");
var $lengthInBytes = dartx.lengthInBytes = Symbol("dartx.lengthInBytes");
var $asUint8List = dartx.asUint8List = Symbol("dartx.asUint8List");
var $asInt8List = dartx.asInt8List = Symbol("dartx.asInt8List");
var $asUint8ClampedList = dartx.asUint8ClampedList = Symbol("dartx.asUint8ClampedList");
var $asUint16List = dartx.asUint16List = Symbol("dartx.asUint16List");
var $asInt16List = dartx.asInt16List = Symbol("dartx.asInt16List");
var $asUint32List = dartx.asUint32List = Symbol("dartx.asUint32List");
var $asInt32List = dartx.asInt32List = Symbol("dartx.asInt32List");
var $asUint64List = dartx.asUint64List = Symbol("dartx.asUint64List");
var $asInt64List = dartx.asInt64List = Symbol("dartx.asInt64List");
var $asInt32x4List = dartx.asInt32x4List = Symbol("dartx.asInt32x4List");
var $asFloat32List = dartx.asFloat32List = Symbol("dartx.asFloat32List");
var $asFloat64List = dartx.asFloat64List = Symbol("dartx.asFloat64List");
var $asFloat32x4List = dartx.asFloat32x4List = Symbol("dartx.asFloat32x4List");
var $asFloat64x2List = dartx.asFloat64x2List = Symbol("dartx.asFloat64x2List");
var $asByteData = dartx.asByteData = Symbol("dartx.asByteData");
var $elementSizeInBytes = dartx.elementSizeInBytes = Symbol("dartx.elementSizeInBytes");
var $getFloat32 = dartx.getFloat32 = Symbol("dartx.getFloat32");
var $getFloat64 = dartx.getFloat64 = Symbol("dartx.getFloat64");
var $getInt16 = dartx.getInt16 = Symbol("dartx.getInt16");
var $getInt32 = dartx.getInt32 = Symbol("dartx.getInt32");
var $getInt64 = dartx.getInt64 = Symbol("dartx.getInt64");
var $getInt8 = dartx.getInt8 = Symbol("dartx.getInt8");
var $getUint16 = dartx.getUint16 = Symbol("dartx.getUint16");
var $getUint32 = dartx.getUint32 = Symbol("dartx.getUint32");
var $getUint64 = dartx.getUint64 = Symbol("dartx.getUint64");
var $getUint8 = dartx.getUint8 = Symbol("dartx.getUint8");
var $setFloat32 = dartx.setFloat32 = Symbol("dartx.setFloat32");
var $setFloat64 = dartx.setFloat64 = Symbol("dartx.setFloat64");
var $setInt16 = dartx.setInt16 = Symbol("dartx.setInt16");
var $setInt32 = dartx.setInt32 = Symbol("dartx.setInt32");
var $setInt64 = dartx.setInt64 = Symbol("dartx.setInt64");
var $setInt8 = dartx.setInt8 = Symbol("dartx.setInt8");
var $setUint16 = dartx.setUint16 = Symbol("dartx.setUint16");
var $setUint32 = dartx.setUint32 = Symbol("dartx.setUint32");
var $setUint64 = dartx.setUint64 = Symbol("dartx.setUint64");
var $setUint8 = dartx.setUint8 = Symbol("dartx.setUint8");
var $left = dartx.left = Symbol("dartx.left");
var $width = dartx.width = Symbol("dartx.width");
var $top = dartx.top = Symbol("dartx.top");
var $height = dartx.height = Symbol("dartx.height");
var $right = dartx.right = Symbol("dartx.right");
var $bottom = dartx.bottom = Symbol("dartx.bottom");
var $intersection = dartx.intersection = Symbol("dartx.intersection");
var $intersects = dartx.intersects = Symbol("dartx.intersects");
var $boundingBox = dartx.boundingBox = Symbol("dartx.boundingBox");
var $containsRectangle = dartx.containsRectangle = Symbol("dartx.containsRectangle");
var $containsPoint = dartx.containsPoint = Symbol("dartx.containsPoint");
var $topLeft = dartx.topLeft = Symbol("dartx.topLeft");
var $topRight = dartx.topRight = Symbol("dartx.topRight");
var $bottomRight = dartx.bottomRight = Symbol("dartx.bottomRight");
var $bottomLeft = dartx.bottomLeft = Symbol("dartx.bottomLeft");
var $delete = dartx.delete = Symbol("dartx.delete");
var $next = dartx.next = Symbol("dartx.next");
var $direction = dartx.direction = Symbol("dartx.direction");
var $key = dartx.key = Symbol("dartx.key");
var $primaryKey = dartx.primaryKey = Symbol("dartx.primaryKey");
var $source = dartx.source = Symbol("dartx.source");
var $advance = dartx.advance = Symbol("dartx.advance");
var $continuePrimaryKey = dartx.continuePrimaryKey = Symbol("dartx.continuePrimaryKey");
var $value = dartx.value = Symbol("dartx.value");
var $createObjectStore = dartx.createObjectStore = Symbol("dartx.createObjectStore");
var $transaction = dartx.transaction = Symbol("dartx.transaction");
var $transactionStore = dartx.transactionStore = Symbol("dartx.transactionStore");
var $transactionList = dartx.transactionList = Symbol("dartx.transactionList");
var $transactionStores = dartx.transactionStores = Symbol("dartx.transactionStores");
var $objectStoreNames = dartx.objectStoreNames = Symbol("dartx.objectStoreNames");
var $version = dartx.version = Symbol("dartx.version");
var $close = dartx.close = Symbol("dartx.close");
var $deleteObjectStore = dartx.deleteObjectStore = Symbol("dartx.deleteObjectStore");
var $onAbort = dartx.onAbort = Symbol("dartx.onAbort");
var $onClose = dartx.onClose = Symbol("dartx.onClose");
var $onError = dartx.onError = Symbol("dartx.onError");
var $onVersionChange = dartx.onVersionChange = Symbol("dartx.onVersionChange");
var $on = dartx.on = Symbol("dartx.on");
var $addEventListener = dartx.addEventListener = Symbol("dartx.addEventListener");
var $removeEventListener = dartx.removeEventListener = Symbol("dartx.removeEventListener");
var $dispatchEvent = dartx.dispatchEvent = Symbol("dartx.dispatchEvent");
var $onUpgradeNeeded = dartx.onUpgradeNeeded = Symbol("dartx.onUpgradeNeeded");
var $onBlocked = dartx.onBlocked = Symbol("dartx.onBlocked");
var $open = dartx.open = Symbol("dartx.open");
var $onSuccess = dartx.onSuccess = Symbol("dartx.onSuccess");
var $deleteDatabase = dartx.deleteDatabase = Symbol("dartx.deleteDatabase");
var $supportsDatabaseNames = dartx.supportsDatabaseNames = Symbol("dartx.supportsDatabaseNames");
var $cmp = dartx.cmp = Symbol("dartx.cmp");
var $count = dartx.count = Symbol("dartx.count");
var $get = dartx.get = Symbol("dartx.get");
var $getKey = dartx.getKey = Symbol("dartx.getKey");
var $openCursor = dartx.openCursor = Symbol("dartx.openCursor");
var $openKeyCursor = dartx.openKeyCursor = Symbol("dartx.openKeyCursor");
var $keyPath = dartx.keyPath = Symbol("dartx.keyPath");
var $multiEntry = dartx.multiEntry = Symbol("dartx.multiEntry");
var $objectStore = dartx.objectStore = Symbol("dartx.objectStore");
var $unique = dartx.unique = Symbol("dartx.unique");
var $getAll = dartx.getAll = Symbol("dartx.getAll");
var $getAllKeys = dartx.getAllKeys = Symbol("dartx.getAllKeys");
var $lower = dartx.lower = Symbol("dartx.lower");
var $lowerOpen = dartx.lowerOpen = Symbol("dartx.lowerOpen");
var $upper = dartx.upper = Symbol("dartx.upper");
var $upperOpen = dartx.upperOpen = Symbol("dartx.upperOpen");
var $includes = dartx.includes = Symbol("dartx.includes");
var $put = dartx.put = Symbol("dartx.put");
var $getObject = dartx.getObject = Symbol("dartx.getObject");
var $createIndex = dartx.createIndex = Symbol("dartx.createIndex");
var $autoIncrement = dartx.autoIncrement = Symbol("dartx.autoIncrement");
var $indexNames = dartx.indexNames = Symbol("dartx.indexNames");
var $deleteIndex = dartx.deleteIndex = Symbol("dartx.deleteIndex");
var $index = dartx.index = Symbol("dartx.index");
var $result = dartx.result = Symbol("dartx.result");
var $type = dartx.type = Symbol("dartx.type");
var $observe = dartx.observe = Symbol("dartx.observe");
var $unobserve = dartx.unobserve = Symbol("dartx.unobserve");
var $database = dartx.database = Symbol("dartx.database");
var $records = dartx.records = Symbol("dartx.records");
var $error = dartx.error = Symbol("dartx.error");
var $readyState = dartx.readyState = Symbol("dartx.readyState");
var $onComplete = dartx.onComplete = Symbol("dartx.onComplete");
var $completed = dartx.completed = Symbol("dartx.completed");
var $db = dartx.db = Symbol("dartx.db");
var $mode = dartx.mode = Symbol("dartx.mode");
var $abort = dartx.abort = Symbol("dartx.abort");
var $dataLoss = dartx.dataLoss = Symbol("dartx.dataLoss");
var $dataLossMessage = dartx.dataLossMessage = Symbol("dartx.dataLossMessage");
var $newVersion = dartx.newVersion = Symbol("dartx.newVersion");
var $oldVersion = dartx.oldVersion = Symbol("dartx.oldVersion");
var $target = dartx.target = Symbol("dartx.target");
var $currentTarget = dartx.currentTarget = Symbol("dartx.currentTarget");
var $matches = dartx.matches = Symbol("dartx.matches");
var $parent = dartx.parent = Symbol("dartx.parent");
var $matchingTarget = dartx.matchingTarget = Symbol("dartx.matchingTarget");
var $path = dartx.path = Symbol("dartx.path");
var $bubbles = dartx.bubbles = Symbol("dartx.bubbles");
var $cancelable = dartx.cancelable = Symbol("dartx.cancelable");
var $composed = dartx.composed = Symbol("dartx.composed");
var $defaultPrevented = dartx.defaultPrevented = Symbol("dartx.defaultPrevented");
var $eventPhase = dartx.eventPhase = Symbol("dartx.eventPhase");
var $isTrusted = dartx.isTrusted = Symbol("dartx.isTrusted");
var $timeStamp = dartx.timeStamp = Symbol("dartx.timeStamp");
var $composedPath = dartx.composedPath = Symbol("dartx.composedPath");
var $preventDefault = dartx.preventDefault = Symbol("dartx.preventDefault");
var $stopImmediatePropagation = dartx.stopImmediatePropagation = Symbol("dartx.stopImmediatePropagation");
var $stopPropagation = dartx.stopPropagation = Symbol("dartx.stopPropagation");
var $nonce = dartx.nonce = Symbol("dartx.nonce");
var $createFragment = dartx.createFragment = Symbol("dartx.createFragment");
var $nodes = dartx.nodes = Symbol("dartx.nodes");
var $attributes = dartx.attributes = Symbol("dartx.attributes");
var $getAttribute = dartx.getAttribute = Symbol("dartx.getAttribute");
var $getAttributeNS = dartx.getAttributeNS = Symbol("dartx.getAttributeNS");
var $hasAttribute = dartx.hasAttribute = Symbol("dartx.hasAttribute");
var $hasAttributeNS = dartx.hasAttributeNS = Symbol("dartx.hasAttributeNS");
var $removeAttribute = dartx.removeAttribute = Symbol("dartx.removeAttribute");
var $removeAttributeNS = dartx.removeAttributeNS = Symbol("dartx.removeAttributeNS");
var $setAttribute = dartx.setAttribute = Symbol("dartx.setAttribute");
var $setAttributeNS = dartx.setAttributeNS = Symbol("dartx.setAttributeNS");
var $children = dartx.children = Symbol("dartx.children");
var $querySelectorAll = dartx.querySelectorAll = Symbol("dartx.querySelectorAll");
var $setApplyScroll = dartx.setApplyScroll = Symbol("dartx.setApplyScroll");
var $setDistributeScroll = dartx.setDistributeScroll = Symbol("dartx.setDistributeScroll");
var $classes = dartx.classes = Symbol("dartx.classes");
var $dataset = dartx.dataset = Symbol("dartx.dataset");
var $getNamespacedAttributes = dartx.getNamespacedAttributes = Symbol("dartx.getNamespacedAttributes");
var $getComputedStyle = dartx.getComputedStyle = Symbol("dartx.getComputedStyle");
var $client = dartx.client = Symbol("dartx.client");
var $offsetLeft = dartx.offsetLeft = Symbol("dartx.offsetLeft");
var $offsetTop = dartx.offsetTop = Symbol("dartx.offsetTop");
var $offsetWidth = dartx.offsetWidth = Symbol("dartx.offsetWidth");
var $offsetHeight = dartx.offsetHeight = Symbol("dartx.offsetHeight");
var $offset = dartx.offset = Symbol("dartx.offset");
var $append = dartx.append = Symbol("dartx.append");
var $appendText = dartx.appendText = Symbol("dartx.appendText");
var $insertAdjacentHtml = dartx.insertAdjacentHtml = Symbol("dartx.insertAdjacentHtml");
var $appendHtml = dartx.appendHtml = Symbol("dartx.appendHtml");
var $enteredView = dartx.enteredView = Symbol("dartx.enteredView");
var $attached = dartx.attached = Symbol("dartx.attached");
var $leftView = dartx.leftView = Symbol("dartx.leftView");
var $detached = dartx.detached = Symbol("dartx.detached");
var $getClientRects = dartx.getClientRects = Symbol("dartx.getClientRects");
var $animate = dartx.animate = Symbol("dartx.animate");
var $attributeChanged = dartx.attributeChanged = Symbol("dartx.attributeChanged");
var $localName = dartx.localName = Symbol("dartx.localName");
var $namespaceUri = dartx.namespaceUri = Symbol("dartx.namespaceUri");
var $scrollIntoView = dartx.scrollIntoView = Symbol("dartx.scrollIntoView");
var $insertAdjacentText = dartx.insertAdjacentText = Symbol("dartx.insertAdjacentText");
var $insertAdjacentElement = dartx.insertAdjacentElement = Symbol("dartx.insertAdjacentElement");
var $nextNode = dartx.nextNode = Symbol("dartx.nextNode");
var $matchesWithAncestors = dartx.matchesWithAncestors = Symbol("dartx.matchesWithAncestors");
var $createShadowRoot = dartx.createShadowRoot = Symbol("dartx.createShadowRoot");
var $shadowRoot = dartx.shadowRoot = Symbol("dartx.shadowRoot");
var $contentEdge = dartx.contentEdge = Symbol("dartx.contentEdge");
var $paddingEdge = dartx.paddingEdge = Symbol("dartx.paddingEdge");
var $borderEdge = dartx.borderEdge = Symbol("dartx.borderEdge");
var $marginEdge = dartx.marginEdge = Symbol("dartx.marginEdge");
var $offsetTo = dartx.offsetTo = Symbol("dartx.offsetTo");
var $documentOffset = dartx.documentOffset = Symbol("dartx.documentOffset");
var $createHtmlDocument = dartx.createHtmlDocument = Symbol("dartx.createHtmlDocument");
var $createElement = dartx.createElement = Symbol("dartx.createElement");
var $baseUri = dartx.baseUri = Symbol("dartx.baseUri");
var $head = dartx.head = Symbol("dartx.head");
var $setInnerHtml = dartx.setInnerHtml = Symbol("dartx.setInnerHtml");
var $innerHtml = dartx.innerHtml = Symbol("dartx.innerHtml");
var $text = dartx.text = Symbol("dartx.text");
var $innerText = dartx.innerText = Symbol("dartx.innerText");
var $offsetParent = dartx.offsetParent = Symbol("dartx.offsetParent");
var $scrollHeight = dartx.scrollHeight = Symbol("dartx.scrollHeight");
var $scrollLeft = dartx.scrollLeft = Symbol("dartx.scrollLeft");
var $scrollTop = dartx.scrollTop = Symbol("dartx.scrollTop");
var $scrollWidth = dartx.scrollWidth = Symbol("dartx.scrollWidth");
var $contentEditable = dartx.contentEditable = Symbol("dartx.contentEditable");
var $dir = dartx.dir = Symbol("dartx.dir");
var $draggable = dartx.draggable = Symbol("dartx.draggable");
var $hidden = dartx.hidden = Symbol("dartx.hidden");
var $inert = dartx.inert = Symbol("dartx.inert");
var $inputMode = dartx.inputMode = Symbol("dartx.inputMode");
var $isContentEditable = dartx.isContentEditable = Symbol("dartx.isContentEditable");
var $lang = dartx.lang = Symbol("dartx.lang");
var $spellcheck = dartx.spellcheck = Symbol("dartx.spellcheck");
var $style = dartx.style = Symbol("dartx.style");
var $tabIndex = dartx.tabIndex = Symbol("dartx.tabIndex");
var $title = dartx.title = Symbol("dartx.title");
var $translate = dartx.translate = Symbol("dartx.translate");
var $blur = dartx.blur = Symbol("dartx.blur");
var $click = dartx.click = Symbol("dartx.click");
var $focus = dartx.focus = Symbol("dartx.focus");
var $accessibleNode = dartx.accessibleNode = Symbol("dartx.accessibleNode");
var $assignedSlot = dartx.assignedSlot = Symbol("dartx.assignedSlot");
var $className = dartx.className = Symbol("dartx.className");
var $clientHeight = dartx.clientHeight = Symbol("dartx.clientHeight");
var $clientLeft = dartx.clientLeft = Symbol("dartx.clientLeft");
var $clientTop = dartx.clientTop = Symbol("dartx.clientTop");
var $clientWidth = dartx.clientWidth = Symbol("dartx.clientWidth");
var $computedName = dartx.computedName = Symbol("dartx.computedName");
var $computedRole = dartx.computedRole = Symbol("dartx.computedRole");
var $id = dartx.id = Symbol("dartx.id");
var $outerHtml = dartx.outerHtml = Symbol("dartx.outerHtml");
var $slot = dartx.slot = Symbol("dartx.slot");
var $styleMap = dartx.styleMap = Symbol("dartx.styleMap");
var $tagName = dartx.tagName = Symbol("dartx.tagName");
var $attachShadow = dartx.attachShadow = Symbol("dartx.attachShadow");
var $closest = dartx.closest = Symbol("dartx.closest");
var $getAnimations = dartx.getAnimations = Symbol("dartx.getAnimations");
var $getAttributeNames = dartx.getAttributeNames = Symbol("dartx.getAttributeNames");
var $getBoundingClientRect = dartx.getBoundingClientRect = Symbol("dartx.getBoundingClientRect");
var $getDestinationInsertionPoints = dartx.getDestinationInsertionPoints = Symbol("dartx.getDestinationInsertionPoints");
var $getElementsByClassName = dartx.getElementsByClassName = Symbol("dartx.getElementsByClassName");
var $hasPointerCapture = dartx.hasPointerCapture = Symbol("dartx.hasPointerCapture");
var $releasePointerCapture = dartx.releasePointerCapture = Symbol("dartx.releasePointerCapture");
var $requestPointerLock = dartx.requestPointerLock = Symbol("dartx.requestPointerLock");
var $scroll = dartx.scroll = Symbol("dartx.scroll");
var $scrollBy = dartx.scrollBy = Symbol("dartx.scrollBy");
var $scrollTo = dartx.scrollTo = Symbol("dartx.scrollTo");
var $setPointerCapture = dartx.setPointerCapture = Symbol("dartx.setPointerCapture");
var $requestFullscreen = dartx.requestFullscreen = Symbol("dartx.requestFullscreen");
var $after = dartx.after = Symbol("dartx.after");
var $before = dartx.before = Symbol("dartx.before");
var $nextElementSibling = dartx.nextElementSibling = Symbol("dartx.nextElementSibling");
var $previousElementSibling = dartx.previousElementSibling = Symbol("dartx.previousElementSibling");
var $querySelector = dartx.querySelector = Symbol("dartx.querySelector");
var $onBeforeCopy = dartx.onBeforeCopy = Symbol("dartx.onBeforeCopy");
var $onBeforeCut = dartx.onBeforeCut = Symbol("dartx.onBeforeCut");
var $onBeforePaste = dartx.onBeforePaste = Symbol("dartx.onBeforePaste");
var $onBlur = dartx.onBlur = Symbol("dartx.onBlur");
var $onCanPlay = dartx.onCanPlay = Symbol("dartx.onCanPlay");
var $onCanPlayThrough = dartx.onCanPlayThrough = Symbol("dartx.onCanPlayThrough");
var $onChange = dartx.onChange = Symbol("dartx.onChange");
var $onClick = dartx.onClick = Symbol("dartx.onClick");
var $onContextMenu = dartx.onContextMenu = Symbol("dartx.onContextMenu");
var $onCopy = dartx.onCopy = Symbol("dartx.onCopy");
var $onCut = dartx.onCut = Symbol("dartx.onCut");
var $onDoubleClick = dartx.onDoubleClick = Symbol("dartx.onDoubleClick");
var $onDrag = dartx.onDrag = Symbol("dartx.onDrag");
var $onDragEnd = dartx.onDragEnd = Symbol("dartx.onDragEnd");
var $onDragEnter = dartx.onDragEnter = Symbol("dartx.onDragEnter");
var $onDragLeave = dartx.onDragLeave = Symbol("dartx.onDragLeave");
var $onDragOver = dartx.onDragOver = Symbol("dartx.onDragOver");
var $onDragStart = dartx.onDragStart = Symbol("dartx.onDragStart");
var $onDrop = dartx.onDrop = Symbol("dartx.onDrop");
var $onDurationChange = dartx.onDurationChange = Symbol("dartx.onDurationChange");
var $onEmptied = dartx.onEmptied = Symbol("dartx.onEmptied");
var $onEnded = dartx.onEnded = Symbol("dartx.onEnded");
var $onFocus = dartx.onFocus = Symbol("dartx.onFocus");
var $onInput = dartx.onInput = Symbol("dartx.onInput");
var $onInvalid = dartx.onInvalid = Symbol("dartx.onInvalid");
var $onKeyDown = dartx.onKeyDown = Symbol("dartx.onKeyDown");
var $onKeyPress = dartx.onKeyPress = Symbol("dartx.onKeyPress");
var $onKeyUp = dartx.onKeyUp = Symbol("dartx.onKeyUp");
var $onLoad = dartx.onLoad = Symbol("dartx.onLoad");
var $onLoadedData = dartx.onLoadedData = Symbol("dartx.onLoadedData");
var $onLoadedMetadata = dartx.onLoadedMetadata = Symbol("dartx.onLoadedMetadata");
var $onMouseDown = dartx.onMouseDown = Symbol("dartx.onMouseDown");
var $onMouseEnter = dartx.onMouseEnter = Symbol("dartx.onMouseEnter");
var $onMouseLeave = dartx.onMouseLeave = Symbol("dartx.onMouseLeave");
var $onMouseMove = dartx.onMouseMove = Symbol("dartx.onMouseMove");
var $onMouseOut = dartx.onMouseOut = Symbol("dartx.onMouseOut");
var $onMouseOver = dartx.onMouseOver = Symbol("dartx.onMouseOver");
var $onMouseUp = dartx.onMouseUp = Symbol("dartx.onMouseUp");
var $onMouseWheel = dartx.onMouseWheel = Symbol("dartx.onMouseWheel");
var $onPaste = dartx.onPaste = Symbol("dartx.onPaste");
var $onPause = dartx.onPause = Symbol("dartx.onPause");
var $onPlay = dartx.onPlay = Symbol("dartx.onPlay");
var $onPlaying = dartx.onPlaying = Symbol("dartx.onPlaying");
var $onRateChange = dartx.onRateChange = Symbol("dartx.onRateChange");
var $onReset = dartx.onReset = Symbol("dartx.onReset");
var $onResize = dartx.onResize = Symbol("dartx.onResize");
var $onScroll = dartx.onScroll = Symbol("dartx.onScroll");
var $onSearch = dartx.onSearch = Symbol("dartx.onSearch");
var $onSeeked = dartx.onSeeked = Symbol("dartx.onSeeked");
var $onSeeking = dartx.onSeeking = Symbol("dartx.onSeeking");
var $onSelect = dartx.onSelect = Symbol("dartx.onSelect");
var $onSelectStart = dartx.onSelectStart = Symbol("dartx.onSelectStart");
var $onStalled = dartx.onStalled = Symbol("dartx.onStalled");
var $onSubmit = dartx.onSubmit = Symbol("dartx.onSubmit");
var $onSuspend = dartx.onSuspend = Symbol("dartx.onSuspend");
var $onTimeUpdate = dartx.onTimeUpdate = Symbol("dartx.onTimeUpdate");
var $onTouchCancel = dartx.onTouchCancel = Symbol("dartx.onTouchCancel");
var $onTouchEnd = dartx.onTouchEnd = Symbol("dartx.onTouchEnd");
var $onTouchEnter = dartx.onTouchEnter = Symbol("dartx.onTouchEnter");
var $onTouchLeave = dartx.onTouchLeave = Symbol("dartx.onTouchLeave");
var $onTouchMove = dartx.onTouchMove = Symbol("dartx.onTouchMove");
var $onTouchStart = dartx.onTouchStart = Symbol("dartx.onTouchStart");
var $onTransitionEnd = dartx.onTransitionEnd = Symbol("dartx.onTransitionEnd");
var $onVolumeChange = dartx.onVolumeChange = Symbol("dartx.onVolumeChange");
var $onWaiting = dartx.onWaiting = Symbol("dartx.onWaiting");
var $onFullscreenChange = dartx.onFullscreenChange = Symbol("dartx.onFullscreenChange");
var $onFullscreenError = dartx.onFullscreenError = Symbol("dartx.onFullscreenError");
var $onWheel = dartx.onWheel = Symbol("dartx.onWheel");
var $replaceWith = dartx.replaceWith = Symbol("dartx.replaceWith");
var $insertAllBefore = dartx.insertAllBefore = Symbol("dartx.insertAllBefore");
var $childNodes = dartx.childNodes = Symbol("dartx.childNodes");
var $firstChild = dartx.firstChild = Symbol("dartx.firstChild");
var $isConnected = dartx.isConnected = Symbol("dartx.isConnected");
var $lastChild = dartx.lastChild = Symbol("dartx.lastChild");
var $nodeName = dartx.nodeName = Symbol("dartx.nodeName");
var $nodeType = dartx.nodeType = Symbol("dartx.nodeType");
var $nodeValue = dartx.nodeValue = Symbol("dartx.nodeValue");
var $ownerDocument = dartx.ownerDocument = Symbol("dartx.ownerDocument");
var $parentNode = dartx.parentNode = Symbol("dartx.parentNode");
var $previousNode = dartx.previousNode = Symbol("dartx.previousNode");
var $clone = dartx.clone = Symbol("dartx.clone");
var $getRootNode = dartx.getRootNode = Symbol("dartx.getRootNode");
var $hasChildNodes = dartx.hasChildNodes = Symbol("dartx.hasChildNodes");
var $insertBefore = dartx.insertBefore = Symbol("dartx.insertBefore");
var $respondWith = dartx.respondWith = Symbol("dartx.respondWith");
var $waitUntil = dartx.waitUntil = Symbol("dartx.waitUntil");
var $quaternion = dartx.quaternion = Symbol("dartx.quaternion");
var $populateMatrix = dartx.populateMatrix = Symbol("dartx.populateMatrix");
var $activated = dartx.activated = Symbol("dartx.activated");
var $hasReading = dartx.hasReading = Symbol("dartx.hasReading");
var $timestamp = dartx.timestamp = Symbol("dartx.timestamp");
var $start = dartx.start = Symbol("dartx.start");
var $stop = dartx.stop = Symbol("dartx.stop");
var $x = dartx.x = Symbol("dartx.x");
var $y = dartx.y = Symbol("dartx.y");
var $z = dartx.z = Symbol("dartx.z");
var $activeDescendant = dartx.activeDescendant = Symbol("dartx.activeDescendant");
var $atomic = dartx.atomic = Symbol("dartx.atomic");
var $autocomplete = dartx.autocomplete = Symbol("dartx.autocomplete");
var $busy = dartx.busy = Symbol("dartx.busy");
var $checked = dartx.checked = Symbol("dartx.checked");
var $colCount = dartx.colCount = Symbol("dartx.colCount");
var $colIndex = dartx.colIndex = Symbol("dartx.colIndex");
var $colSpan = dartx.colSpan = Symbol("dartx.colSpan");
var $controls = dartx.controls = Symbol("dartx.controls");
var $current = dartx.current = Symbol("dartx.current");
var $describedBy = dartx.describedBy = Symbol("dartx.describedBy");
var $details = dartx.details = Symbol("dartx.details");
var $disabled = dartx.disabled = Symbol("dartx.disabled");
var $errorMessage = dartx.errorMessage = Symbol("dartx.errorMessage");
var $expanded = dartx.expanded = Symbol("dartx.expanded");
var $flowTo = dartx.flowTo = Symbol("dartx.flowTo");
var $hasPopUp = dartx.hasPopUp = Symbol("dartx.hasPopUp");
var $invalid = dartx.invalid = Symbol("dartx.invalid");
var $keyShortcuts = dartx.keyShortcuts = Symbol("dartx.keyShortcuts");
var $label = dartx.label = Symbol("dartx.label");
var $labeledBy = dartx.labeledBy = Symbol("dartx.labeledBy");
var $level = dartx.level = Symbol("dartx.level");
var $live = dartx.live = Symbol("dartx.live");
var $modal = dartx.modal = Symbol("dartx.modal");
var $multiline = dartx.multiline = Symbol("dartx.multiline");
var $multiselectable = dartx.multiselectable = Symbol("dartx.multiselectable");
var $orientation = dartx.orientation = Symbol("dartx.orientation");
var $owns = dartx.owns = Symbol("dartx.owns");
var $placeholder = dartx.placeholder = Symbol("dartx.placeholder");
var $posInSet = dartx.posInSet = Symbol("dartx.posInSet");
var $pressed = dartx.pressed = Symbol("dartx.pressed");
var $readOnly = dartx.readOnly = Symbol("dartx.readOnly");
var $relevant = dartx.relevant = Symbol("dartx.relevant");
var $required = dartx.required = Symbol("dartx.required");
var $role = dartx.role = Symbol("dartx.role");
var $roleDescription = dartx.roleDescription = Symbol("dartx.roleDescription");
var $rowCount = dartx.rowCount = Symbol("dartx.rowCount");
var $rowIndex = dartx.rowIndex = Symbol("dartx.rowIndex");
var $rowSpan = dartx.rowSpan = Symbol("dartx.rowSpan");
var $selected = dartx.selected = Symbol("dartx.selected");
var $setSize = dartx.setSize = Symbol("dartx.setSize");
var $valueMax = dartx.valueMax = Symbol("dartx.valueMax");
var $valueMin = dartx.valueMin = Symbol("dartx.valueMin");
var $valueNow = dartx.valueNow = Symbol("dartx.valueNow");
var $valueText = dartx.valueText = Symbol("dartx.valueText");
var $appendChild = dartx.appendChild = Symbol("dartx.appendChild");
var $onAccessibleClick = dartx.onAccessibleClick = Symbol("dartx.onAccessibleClick");
var $onAccessibleContextMenu = dartx.onAccessibleContextMenu = Symbol("dartx.onAccessibleContextMenu");
var $onAccessibleDecrement = dartx.onAccessibleDecrement = Symbol("dartx.onAccessibleDecrement");
var $onAccessibleFocus = dartx.onAccessibleFocus = Symbol("dartx.onAccessibleFocus");
var $onAccessibleIncrement = dartx.onAccessibleIncrement = Symbol("dartx.onAccessibleIncrement");
var $onAccessibleScrollIntoView = dartx.onAccessibleScrollIntoView = Symbol("dartx.onAccessibleScrollIntoView");
var $item = dartx.item = Symbol("dartx.item");
var $illuminance = dartx.illuminance = Symbol("dartx.illuminance");
var $download = dartx.download = Symbol("dartx.download");
var $hreflang = dartx.hreflang = Symbol("dartx.hreflang");
var $referrerPolicy = dartx.referrerPolicy = Symbol("dartx.referrerPolicy");
var $rel = dartx.rel = Symbol("dartx.rel");
var $hash = dartx.hash = Symbol("dartx.hash");
var $host = dartx.host = Symbol("dartx.host");
var $hostname = dartx.hostname = Symbol("dartx.hostname");
var $href = dartx.href = Symbol("dartx.href");
var $origin = dartx.origin = Symbol("dartx.origin");
var $password = dartx.password = Symbol("dartx.password");
var $pathname = dartx.pathname = Symbol("dartx.pathname");
var $port = dartx.port = Symbol("dartx.port");
var $protocol = dartx.protocol = Symbol("dartx.protocol");
var $search = dartx.search = Symbol("dartx.search");
var $username = dartx.username = Symbol("dartx.username");
var $currentTime = dartx.currentTime = Symbol("dartx.currentTime");
var $effect = dartx.effect = Symbol("dartx.effect");
var $finished = dartx.finished = Symbol("dartx.finished");
var $playState = dartx.playState = Symbol("dartx.playState");
var $playbackRate = dartx.playbackRate = Symbol("dartx.playbackRate");
var $ready = dartx.ready = Symbol("dartx.ready");
var $startTime = dartx.startTime = Symbol("dartx.startTime");
var $timeline = dartx.timeline = Symbol("dartx.timeline");
var $cancel = dartx.cancel = Symbol("dartx.cancel");
var $finish = dartx.finish = Symbol("dartx.finish");
var $pause = dartx.pause = Symbol("dartx.pause");
var $play = dartx.play = Symbol("dartx.play");
var $reverse = dartx.reverse = Symbol("dartx.reverse");
var $onCancel = dartx.onCancel = Symbol("dartx.onCancel");
var $onFinish = dartx.onFinish = Symbol("dartx.onFinish");
var $timing = dartx.timing = Symbol("dartx.timing");
var $getComputedTiming = dartx.getComputedTiming = Symbol("dartx.getComputedTiming");
var $delay = dartx.delay = Symbol("dartx.delay");
var $duration = dartx.duration = Symbol("dartx.duration");
var $easing = dartx.easing = Symbol("dartx.easing");
var $endDelay = dartx.endDelay = Symbol("dartx.endDelay");
var $fill = dartx.fill = Symbol("dartx.fill");
var $iterationStart = dartx.iterationStart = Symbol("dartx.iterationStart");
var $iterations = dartx.iterations = Symbol("dartx.iterations");
var $animationName = dartx.animationName = Symbol("dartx.animationName");
var $elapsedTime = dartx.elapsedTime = Symbol("dartx.elapsedTime");
var $timelineTime = dartx.timelineTime = Symbol("dartx.timelineTime");
var $registerAnimator = dartx.registerAnimator = Symbol("dartx.registerAnimator");
var $status = dartx.status = Symbol("dartx.status");
var $swapCache = dartx.swapCache = Symbol("dartx.swapCache");
var $onCached = dartx.onCached = Symbol("dartx.onCached");
var $onChecking = dartx.onChecking = Symbol("dartx.onChecking");
var $onDownloading = dartx.onDownloading = Symbol("dartx.onDownloading");
var $onNoUpdate = dartx.onNoUpdate = Symbol("dartx.onNoUpdate");
var $onObsolete = dartx.onObsolete = Symbol("dartx.onObsolete");
var $onProgress = dartx.onProgress = Symbol("dartx.onProgress");
var $onUpdateReady = dartx.onUpdateReady = Symbol("dartx.onUpdateReady");
var $reason = dartx.reason = Symbol("dartx.reason");
var $url = dartx.url = Symbol("dartx.url");
var $alt = dartx.alt = Symbol("dartx.alt");
var $coords = dartx.coords = Symbol("dartx.coords");
var $shape = dartx.shape = Symbol("dartx.shape");
var $audioTracks = dartx.audioTracks = Symbol("dartx.audioTracks");
var $autoplay = dartx.autoplay = Symbol("dartx.autoplay");
var $buffered = dartx.buffered = Symbol("dartx.buffered");
var $controlsList = dartx.controlsList = Symbol("dartx.controlsList");
var $crossOrigin = dartx.crossOrigin = Symbol("dartx.crossOrigin");
var $currentSrc = dartx.currentSrc = Symbol("dartx.currentSrc");
var $defaultMuted = dartx.defaultMuted = Symbol("dartx.defaultMuted");
var $defaultPlaybackRate = dartx.defaultPlaybackRate = Symbol("dartx.defaultPlaybackRate");
var $disableRemotePlayback = dartx.disableRemotePlayback = Symbol("dartx.disableRemotePlayback");
var $ended = dartx.ended = Symbol("dartx.ended");
var $loop = dartx.loop = Symbol("dartx.loop");
var $mediaKeys = dartx.mediaKeys = Symbol("dartx.mediaKeys");
var $muted = dartx.muted = Symbol("dartx.muted");
var $networkState = dartx.networkState = Symbol("dartx.networkState");
var $paused = dartx.paused = Symbol("dartx.paused");
var $played = dartx.played = Symbol("dartx.played");
var $preload = dartx.preload = Symbol("dartx.preload");
var $remote = dartx.remote = Symbol("dartx.remote");
var $seekable = dartx.seekable = Symbol("dartx.seekable");
var $seeking = dartx.seeking = Symbol("dartx.seeking");
var $sinkId = dartx.sinkId = Symbol("dartx.sinkId");
var $src = dartx.src = Symbol("dartx.src");
var $srcObject = dartx.srcObject = Symbol("dartx.srcObject");
var $textTracks = dartx.textTracks = Symbol("dartx.textTracks");
var $videoTracks = dartx.videoTracks = Symbol("dartx.videoTracks");
var $volume = dartx.volume = Symbol("dartx.volume");
var $audioDecodedByteCount = dartx.audioDecodedByteCount = Symbol("dartx.audioDecodedByteCount");
var $videoDecodedByteCount = dartx.videoDecodedByteCount = Symbol("dartx.videoDecodedByteCount");
var $addTextTrack = dartx.addTextTrack = Symbol("dartx.addTextTrack");
var $canPlayType = dartx.canPlayType = Symbol("dartx.canPlayType");
var $captureStream = dartx.captureStream = Symbol("dartx.captureStream");
var $load = dartx.load = Symbol("dartx.load");
var $setMediaKeys = dartx.setMediaKeys = Symbol("dartx.setMediaKeys");
var $setSinkId = dartx.setSinkId = Symbol("dartx.setSinkId");
var $authenticatorData = dartx.authenticatorData = Symbol("dartx.authenticatorData");
var $signature = dartx.signature = Symbol("dartx.signature");
var $clientDataJson = dartx.clientDataJson = Symbol("dartx.clientDataJson");
var $attestationObject = dartx.attestationObject = Symbol("dartx.attestationObject");
var $state = dartx.state = Symbol("dartx.state");
var $fetches = dartx.fetches = Symbol("dartx.fetches");
var $request = dartx.request = Symbol("dartx.request");
var $fetch = dartx.fetch = Symbol("dartx.fetch");
var $getIds = dartx.getIds = Symbol("dartx.getIds");
var $downloadTotal = dartx.downloadTotal = Symbol("dartx.downloadTotal");
var $downloaded = dartx.downloaded = Symbol("dartx.downloaded");
var $totalDownloadSize = dartx.totalDownloadSize = Symbol("dartx.totalDownloadSize");
var $uploadTotal = dartx.uploadTotal = Symbol("dartx.uploadTotal");
var $uploaded = dartx.uploaded = Symbol("dartx.uploaded");
var $response = dartx.response = Symbol("dartx.response");
var $updateUI = dartx.updateUI = Symbol("dartx.updateUI");
var $visible = dartx.visible = Symbol("dartx.visible");
var $detect = dartx.detect = Symbol("dartx.detect");
var $charging = dartx.charging = Symbol("dartx.charging");
var $chargingTime = dartx.chargingTime = Symbol("dartx.chargingTime");
var $dischargingTime = dartx.dischargingTime = Symbol("dartx.dischargingTime");
var $platforms = dartx.platforms = Symbol("dartx.platforms");
var $userChoice = dartx.userChoice = Symbol("dartx.userChoice");
var $prompt = dartx.prompt = Symbol("dartx.prompt");
var $returnValue = dartx.returnValue = Symbol("dartx.returnValue");
var $size = dartx.size = Symbol("dartx.size");
var $slice = dartx.slice = Symbol("dartx.slice");
var $data = dartx.data = Symbol("dartx.data");
var $timecode = dartx.timecode = Symbol("dartx.timecode");
var $characteristic = dartx.characteristic = Symbol("dartx.characteristic");
var $uuid = dartx.uuid = Symbol("dartx.uuid");
var $readValue = dartx.readValue = Symbol("dartx.readValue");
var $writeValue = dartx.writeValue = Symbol("dartx.writeValue");
var $bodyUsed = dartx.bodyUsed = Symbol("dartx.bodyUsed");
var $arrayBuffer = dartx.arrayBuffer = Symbol("dartx.arrayBuffer");
var $blob = dartx.blob = Symbol("dartx.blob");
var $formData = dartx.formData = Symbol("dartx.formData");
var $json = dartx.json = Symbol("dartx.json");
var $onHashChange = dartx.onHashChange = Symbol("dartx.onHashChange");
var $onMessage = dartx.onMessage = Symbol("dartx.onMessage");
var $onOffline = dartx.onOffline = Symbol("dartx.onOffline");
var $onOnline = dartx.onOnline = Symbol("dartx.onOnline");
var $onPopState = dartx.onPopState = Symbol("dartx.onPopState");
var $onStorage = dartx.onStorage = Symbol("dartx.onStorage");
var $onUnload = dartx.onUnload = Symbol("dartx.onUnload");
var $postMessage = dartx.postMessage = Symbol("dartx.postMessage");
var $budgetAt = dartx.budgetAt = Symbol("dartx.budgetAt");
var $time = dartx.time = Symbol("dartx.time");
var $autofocus = dartx.autofocus = Symbol("dartx.autofocus");
var $form = dartx.form = Symbol("dartx.form");
var $formAction = dartx.formAction = Symbol("dartx.formAction");
var $formEnctype = dartx.formEnctype = Symbol("dartx.formEnctype");
var $formMethod = dartx.formMethod = Symbol("dartx.formMethod");
var $formNoValidate = dartx.formNoValidate = Symbol("dartx.formNoValidate");
var $formTarget = dartx.formTarget = Symbol("dartx.formTarget");
var $labels = dartx.labels = Symbol("dartx.labels");
var $validationMessage = dartx.validationMessage = Symbol("dartx.validationMessage");
var $validity = dartx.validity = Symbol("dartx.validity");
var $willValidate = dartx.willValidate = Symbol("dartx.willValidate");
var $checkValidity = dartx.checkValidity = Symbol("dartx.checkValidity");
var $reportValidity = dartx.reportValidity = Symbol("dartx.reportValidity");
var $setCustomValidity = dartx.setCustomValidity = Symbol("dartx.setCustomValidity");
var $wholeText = dartx.wholeText = Symbol("dartx.wholeText");
var $splitText = dartx.splitText = Symbol("dartx.splitText");
var $appendData = dartx.appendData = Symbol("dartx.appendData");
var $deleteData = dartx.deleteData = Symbol("dartx.deleteData");
var $insertData = dartx.insertData = Symbol("dartx.insertData");
var $replaceData = dartx.replaceData = Symbol("dartx.replaceData");
var $substringData = dartx.substringData = Symbol("dartx.substringData");
var $has = dartx.has = Symbol("dartx.has");
var $match = dartx.match = Symbol("dartx.match");
var $methodData = dartx.methodData = Symbol("dartx.methodData");
var $modifiers = dartx.modifiers = Symbol("dartx.modifiers");
var $paymentRequestOrigin = dartx.paymentRequestOrigin = Symbol("dartx.paymentRequestOrigin");
var $topLevelOrigin = dartx.topLevelOrigin = Symbol("dartx.topLevelOrigin");
var $canvas = dartx.canvas = Symbol("dartx.canvas");
var $requestFrame = dartx.requestFrame = Symbol("dartx.requestFrame");
var $contentHint = dartx.contentHint = Symbol("dartx.contentHint");
var $enabled = dartx.enabled = Symbol("dartx.enabled");
var $kind = dartx.kind = Symbol("dartx.kind");
var $applyConstraints = dartx.applyConstraints = Symbol("dartx.applyConstraints");
var $getCapabilities = dartx.getCapabilities = Symbol("dartx.getCapabilities");
var $getConstraints = dartx.getConstraints = Symbol("dartx.getConstraints");
var $getSettings = dartx.getSettings = Symbol("dartx.getSettings");
var $onMute = dartx.onMute = Symbol("dartx.onMute");
var $onUnmute = dartx.onUnmute = Symbol("dartx.onUnmute");
var $getContext = dartx.getContext = Symbol("dartx.getContext");
var $transferControlToOffscreen = dartx.transferControlToOffscreen = Symbol("dartx.transferControlToOffscreen");
var $onWebGlContextLost = dartx.onWebGlContextLost = Symbol("dartx.onWebGlContextLost");
var $onWebGlContextRestored = dartx.onWebGlContextRestored = Symbol("dartx.onWebGlContextRestored");
var $context2D = dartx.context2D = Symbol("dartx.context2D");
var $getContext3d = dartx.getContext3d = Symbol("dartx.getContext3d");
var $toDataUrl = dartx.toDataUrl = Symbol("dartx.toDataUrl");
var $toBlob = dartx.toBlob = Symbol("dartx.toBlob");
var $addColorStop = dartx.addColorStop = Symbol("dartx.addColorStop");
var $setTransform = dartx.setTransform = Symbol("dartx.setTransform");
var $currentTransform = dartx.currentTransform = Symbol("dartx.currentTransform");
var $fillStyle = dartx.fillStyle = Symbol("dartx.fillStyle");
var $filter = dartx.filter = Symbol("dartx.filter");
var $font = dartx.font = Symbol("dartx.font");
var $globalAlpha = dartx.globalAlpha = Symbol("dartx.globalAlpha");
var $globalCompositeOperation = dartx.globalCompositeOperation = Symbol("dartx.globalCompositeOperation");
var $imageSmoothingEnabled = dartx.imageSmoothingEnabled = Symbol("dartx.imageSmoothingEnabled");
var $imageSmoothingQuality = dartx.imageSmoothingQuality = Symbol("dartx.imageSmoothingQuality");
var $lineCap = dartx.lineCap = Symbol("dartx.lineCap");
var $lineJoin = dartx.lineJoin = Symbol("dartx.lineJoin");
var $lineWidth = dartx.lineWidth = Symbol("dartx.lineWidth");
var $miterLimit = dartx.miterLimit = Symbol("dartx.miterLimit");
var $shadowBlur = dartx.shadowBlur = Symbol("dartx.shadowBlur");
var $shadowColor = dartx.shadowColor = Symbol("dartx.shadowColor");
var $shadowOffsetX = dartx.shadowOffsetX = Symbol("dartx.shadowOffsetX");
var $shadowOffsetY = dartx.shadowOffsetY = Symbol("dartx.shadowOffsetY");
var $strokeStyle = dartx.strokeStyle = Symbol("dartx.strokeStyle");
var $textAlign = dartx.textAlign = Symbol("dartx.textAlign");
var $textBaseline = dartx.textBaseline = Symbol("dartx.textBaseline");
var $addHitRegion = dartx.addHitRegion = Symbol("dartx.addHitRegion");
var $beginPath = dartx.beginPath = Symbol("dartx.beginPath");
var $clearHitRegions = dartx.clearHitRegions = Symbol("dartx.clearHitRegions");
var $clearRect = dartx.clearRect = Symbol("dartx.clearRect");
var $clip = dartx.clip = Symbol("dartx.clip");
var $createImageData = dartx.createImageData = Symbol("dartx.createImageData");
var $createLinearGradient = dartx.createLinearGradient = Symbol("dartx.createLinearGradient");
var $createPattern = dartx.createPattern = Symbol("dartx.createPattern");
var $createRadialGradient = dartx.createRadialGradient = Symbol("dartx.createRadialGradient");
var $drawFocusIfNeeded = dartx.drawFocusIfNeeded = Symbol("dartx.drawFocusIfNeeded");
var $fillRect = dartx.fillRect = Symbol("dartx.fillRect");
var $getContextAttributes = dartx.getContextAttributes = Symbol("dartx.getContextAttributes");
var $getImageData = dartx.getImageData = Symbol("dartx.getImageData");
var $isContextLost = dartx.isContextLost = Symbol("dartx.isContextLost");
var $isPointInPath = dartx.isPointInPath = Symbol("dartx.isPointInPath");
var $isPointInStroke = dartx.isPointInStroke = Symbol("dartx.isPointInStroke");
var $measureText = dartx.measureText = Symbol("dartx.measureText");
var $putImageData = dartx.putImageData = Symbol("dartx.putImageData");
var $removeHitRegion = dartx.removeHitRegion = Symbol("dartx.removeHitRegion");
var $resetTransform = dartx.resetTransform = Symbol("dartx.resetTransform");
var $restore = dartx.restore = Symbol("dartx.restore");
var $rotate = dartx.rotate = Symbol("dartx.rotate");
var $save = dartx.save = Symbol("dartx.save");
var $scale = dartx.scale = Symbol("dartx.scale");
var $scrollPathIntoView = dartx.scrollPathIntoView = Symbol("dartx.scrollPathIntoView");
var $stroke = dartx.stroke = Symbol("dartx.stroke");
var $strokeRect = dartx.strokeRect = Symbol("dartx.strokeRect");
var $strokeText = dartx.strokeText = Symbol("dartx.strokeText");
var $transform = dartx.transform = Symbol("dartx.transform");
var $arcTo = dartx.arcTo = Symbol("dartx.arcTo");
var $bezierCurveTo = dartx.bezierCurveTo = Symbol("dartx.bezierCurveTo");
var $closePath = dartx.closePath = Symbol("dartx.closePath");
var $ellipse = dartx.ellipse = Symbol("dartx.ellipse");
var $lineTo = dartx.lineTo = Symbol("dartx.lineTo");
var $moveTo = dartx.moveTo = Symbol("dartx.moveTo");
var $quadraticCurveTo = dartx.quadraticCurveTo = Symbol("dartx.quadraticCurveTo");
var $rect = dartx.rect = Symbol("dartx.rect");
var $createImageDataFromImageData = dartx.createImageDataFromImageData = Symbol("dartx.createImageDataFromImageData");
var $setFillColorRgb = dartx.setFillColorRgb = Symbol("dartx.setFillColorRgb");
var $setFillColorHsl = dartx.setFillColorHsl = Symbol("dartx.setFillColorHsl");
var $setStrokeColorRgb = dartx.setStrokeColorRgb = Symbol("dartx.setStrokeColorRgb");
var $setStrokeColorHsl = dartx.setStrokeColorHsl = Symbol("dartx.setStrokeColorHsl");
var $arc = dartx.arc = Symbol("dartx.arc");
var $createPatternFromImage = dartx.createPatternFromImage = Symbol("dartx.createPatternFromImage");
var $drawImageScaled = dartx.drawImageScaled = Symbol("dartx.drawImageScaled");
var $drawImageScaledFromSource = dartx.drawImageScaledFromSource = Symbol("dartx.drawImageScaledFromSource");
var $drawImageToRect = dartx.drawImageToRect = Symbol("dartx.drawImageToRect");
var $drawImage = dartx.drawImage = Symbol("dartx.drawImage");
var $lineDashOffset = dartx.lineDashOffset = Symbol("dartx.lineDashOffset");
var $getLineDash = dartx.getLineDash = Symbol("dartx.getLineDash");
var $setLineDash = dartx.setLineDash = Symbol("dartx.setLineDash");
var $fillText = dartx.fillText = Symbol("dartx.fillText");
var $backingStorePixelRatio = dartx.backingStorePixelRatio = Symbol("dartx.backingStorePixelRatio");
var $frameType = dartx.frameType = Symbol("dartx.frameType");
var $claim = dartx.claim = Symbol("dartx.claim");
var $matchAll = dartx.matchAll = Symbol("dartx.matchAll");
var $openWindow = dartx.openWindow = Symbol("dartx.openWindow");
var $clipboardData = dartx.clipboardData = Symbol("dartx.clipboardData");
var $code = dartx.code = Symbol("dartx.code");
var $wasClean = dartx.wasClean = Symbol("dartx.wasClean");
var $detail = dartx.detail = Symbol("dartx.detail");
var $sourceCapabilities = dartx.sourceCapabilities = Symbol("dartx.sourceCapabilities");
var $view = dartx.view = Symbol("dartx.view");
var $select = dartx.select = Symbol("dartx.select");
var $getDistributedNodes = dartx.getDistributedNodes = Symbol("dartx.getDistributedNodes");
var $set = dartx.set = Symbol("dartx.set");
var $accuracy = dartx.accuracy = Symbol("dartx.accuracy");
var $altitude = dartx.altitude = Symbol("dartx.altitude");
var $altitudeAccuracy = dartx.altitudeAccuracy = Symbol("dartx.altitudeAccuracy");
var $heading = dartx.heading = Symbol("dartx.heading");
var $latitude = dartx.latitude = Symbol("dartx.latitude");
var $longitude = dartx.longitude = Symbol("dartx.longitude");
var $speed = dartx.speed = Symbol("dartx.speed");
var $iconUrl = dartx.iconUrl = Symbol("dartx.iconUrl");
var $create = dartx.create = Symbol("dartx.create");
var $preventSilentAccess = dartx.preventSilentAccess = Symbol("dartx.preventSilentAccess");
var $requireUserMediation = dartx.requireUserMediation = Symbol("dartx.requireUserMediation");
var $store = dartx.store = Symbol("dartx.store");
var $getRandomValues = dartx.getRandomValues = Symbol("dartx.getRandomValues");
var $subtle = dartx.subtle = Symbol("dartx.subtle");
var $algorithm = dartx.algorithm = Symbol("dartx.algorithm");
var $extractable = dartx.extractable = Symbol("dartx.extractable");
var $usages = dartx.usages = Symbol("dartx.usages");
var $encoding = dartx.encoding = Symbol("dartx.encoding");
var $cssText = dartx.cssText = Symbol("dartx.cssText");
var $parentRule = dartx.parentRule = Symbol("dartx.parentRule");
var $parentStyleSheet = dartx.parentStyleSheet = Symbol("dartx.parentStyleSheet");
var $conditionText = dartx.conditionText = Symbol("dartx.conditionText");
var $cssRules = dartx.cssRules = Symbol("dartx.cssRules");
var $deleteRule = dartx.deleteRule = Symbol("dartx.deleteRule");
var $insertRule = dartx.insertRule = Symbol("dartx.insertRule");
var $intrinsicHeight = dartx.intrinsicHeight = Symbol("dartx.intrinsicHeight");
var $intrinsicRatio = dartx.intrinsicRatio = Symbol("dartx.intrinsicRatio");
var $intrinsicWidth = dartx.intrinsicWidth = Symbol("dartx.intrinsicWidth");
var $media = dartx.media = Symbol("dartx.media");
var $styleSheet = dartx.styleSheet = Symbol("dartx.styleSheet");
var $keyText = dartx.keyText = Symbol("dartx.keyText");
var $appendRule = dartx.appendRule = Symbol("dartx.appendRule");
var $findRule = dartx.findRule = Symbol("dartx.findRule");
var $matrix = dartx.matrix = Symbol("dartx.matrix");
var $is2D = dartx.is2D = Symbol("dartx.is2D");
var $prefix = dartx.prefix = Symbol("dartx.prefix");
var $div = dartx.div = Symbol("dartx.div");
var $mul = dartx.mul = Symbol("dartx.mul");
var $sub = dartx.sub = Symbol("dartx.sub");
var $to = dartx.to = Symbol("dartx.to");
var $selectorText = dartx.selectorText = Symbol("dartx.selectorText");
var $angle = dartx.angle = Symbol("dartx.angle");
var $ax = dartx.ax = Symbol("dartx.ax");
var $ay = dartx.ay = Symbol("dartx.ay");
var $getPropertyValue = dartx.getPropertyValue = Symbol("dartx.getPropertyValue");
var $supportsProperty = dartx.supportsProperty = Symbol("dartx.supportsProperty");
var $setProperty = dartx.setProperty = Symbol("dartx.setProperty");
var $cssFloat = dartx.cssFloat = Symbol("dartx.cssFloat");
var $getPropertyPriority = dartx.getPropertyPriority = Symbol("dartx.getPropertyPriority");
var $removeProperty = dartx.removeProperty = Symbol("dartx.removeProperty");
var $background = dartx.background = Symbol("dartx.background");
var $backgroundAttachment = dartx.backgroundAttachment = Symbol("dartx.backgroundAttachment");
var $backgroundColor = dartx.backgroundColor = Symbol("dartx.backgroundColor");
var $backgroundImage = dartx.backgroundImage = Symbol("dartx.backgroundImage");
var $backgroundPosition = dartx.backgroundPosition = Symbol("dartx.backgroundPosition");
var $backgroundRepeat = dartx.backgroundRepeat = Symbol("dartx.backgroundRepeat");
var $border = dartx.border = Symbol("dartx.border");
var $borderBottom = dartx.borderBottom = Symbol("dartx.borderBottom");
var $borderBottomColor = dartx.borderBottomColor = Symbol("dartx.borderBottomColor");
var $borderBottomStyle = dartx.borderBottomStyle = Symbol("dartx.borderBottomStyle");
var $borderBottomWidth = dartx.borderBottomWidth = Symbol("dartx.borderBottomWidth");
var $borderCollapse = dartx.borderCollapse = Symbol("dartx.borderCollapse");
var $borderColor = dartx.borderColor = Symbol("dartx.borderColor");
var $borderLeft = dartx.borderLeft = Symbol("dartx.borderLeft");
var $borderLeftColor = dartx.borderLeftColor = Symbol("dartx.borderLeftColor");
var $borderLeftStyle = dartx.borderLeftStyle = Symbol("dartx.borderLeftStyle");
var $borderLeftWidth = dartx.borderLeftWidth = Symbol("dartx.borderLeftWidth");
var $borderRight = dartx.borderRight = Symbol("dartx.borderRight");
var $borderRightColor = dartx.borderRightColor = Symbol("dartx.borderRightColor");
var $borderRightStyle = dartx.borderRightStyle = Symbol("dartx.borderRightStyle");
var $borderRightWidth = dartx.borderRightWidth = Symbol("dartx.borderRightWidth");
var $borderSpacing = dartx.borderSpacing = Symbol("dartx.borderSpacing");
var $borderStyle = dartx.borderStyle = Symbol("dartx.borderStyle");
var $borderTop = dartx.borderTop = Symbol("dartx.borderTop");
var $borderTopColor = dartx.borderTopColor = Symbol("dartx.borderTopColor");
var $borderTopStyle = dartx.borderTopStyle = Symbol("dartx.borderTopStyle");
var $borderTopWidth = dartx.borderTopWidth = Symbol("dartx.borderTopWidth");
var $borderWidth = dartx.borderWidth = Symbol("dartx.borderWidth");
var $captionSide = dartx.captionSide = Symbol("dartx.captionSide");
var $color = dartx.color = Symbol("dartx.color");
var $content = dartx.content = Symbol("dartx.content");
var $cursor = dartx.cursor = Symbol("dartx.cursor");
var $display = dartx.display = Symbol("dartx.display");
var $emptyCells = dartx.emptyCells = Symbol("dartx.emptyCells");
var $fontFamily = dartx.fontFamily = Symbol("dartx.fontFamily");
var $fontSize = dartx.fontSize = Symbol("dartx.fontSize");
var $fontStyle = dartx.fontStyle = Symbol("dartx.fontStyle");
var $fontVariant = dartx.fontVariant = Symbol("dartx.fontVariant");
var $fontWeight = dartx.fontWeight = Symbol("dartx.fontWeight");
var $letterSpacing = dartx.letterSpacing = Symbol("dartx.letterSpacing");
var $lineHeight = dartx.lineHeight = Symbol("dartx.lineHeight");
var $listStyle = dartx.listStyle = Symbol("dartx.listStyle");
var $listStyleImage = dartx.listStyleImage = Symbol("dartx.listStyleImage");
var $listStylePosition = dartx.listStylePosition = Symbol("dartx.listStylePosition");
var $listStyleType = dartx.listStyleType = Symbol("dartx.listStyleType");
var $margin = dartx.margin = Symbol("dartx.margin");
var $marginBottom = dartx.marginBottom = Symbol("dartx.marginBottom");
var $marginLeft = dartx.marginLeft = Symbol("dartx.marginLeft");
var $marginRight = dartx.marginRight = Symbol("dartx.marginRight");
var $marginTop = dartx.marginTop = Symbol("dartx.marginTop");
var $maxHeight = dartx.maxHeight = Symbol("dartx.maxHeight");
var $maxWidth = dartx.maxWidth = Symbol("dartx.maxWidth");
var $minHeight = dartx.minHeight = Symbol("dartx.minHeight");
var $minWidth = dartx.minWidth = Symbol("dartx.minWidth");
var $outline = dartx.outline = Symbol("dartx.outline");
var $outlineColor = dartx.outlineColor = Symbol("dartx.outlineColor");
var $outlineStyle = dartx.outlineStyle = Symbol("dartx.outlineStyle");
var $outlineWidth = dartx.outlineWidth = Symbol("dartx.outlineWidth");
var $overflow = dartx.overflow = Symbol("dartx.overflow");
var $padding = dartx.padding = Symbol("dartx.padding");
var $paddingBottom = dartx.paddingBottom = Symbol("dartx.paddingBottom");
var $paddingLeft = dartx.paddingLeft = Symbol("dartx.paddingLeft");
var $paddingRight = dartx.paddingRight = Symbol("dartx.paddingRight");
var $paddingTop = dartx.paddingTop = Symbol("dartx.paddingTop");
var $pageBreakAfter = dartx.pageBreakAfter = Symbol("dartx.pageBreakAfter");
var $pageBreakBefore = dartx.pageBreakBefore = Symbol("dartx.pageBreakBefore");
var $pageBreakInside = dartx.pageBreakInside = Symbol("dartx.pageBreakInside");
var $position = dartx.position = Symbol("dartx.position");
var $quotes = dartx.quotes = Symbol("dartx.quotes");
var $tableLayout = dartx.tableLayout = Symbol("dartx.tableLayout");
var $textDecoration = dartx.textDecoration = Symbol("dartx.textDecoration");
var $textIndent = dartx.textIndent = Symbol("dartx.textIndent");
var $textTransform = dartx.textTransform = Symbol("dartx.textTransform");
var $unicodeBidi = dartx.unicodeBidi = Symbol("dartx.unicodeBidi");
var $verticalAlign = dartx.verticalAlign = Symbol("dartx.verticalAlign");
var $visibility = dartx.visibility = Symbol("dartx.visibility");
var $whiteSpace = dartx.whiteSpace = Symbol("dartx.whiteSpace");
var $wordSpacing = dartx.wordSpacing = Symbol("dartx.wordSpacing");
var $zIndex = dartx.zIndex = Symbol("dartx.zIndex");
var $alignContent = dartx.alignContent = Symbol("dartx.alignContent");
var $alignItems = dartx.alignItems = Symbol("dartx.alignItems");
var $alignSelf = dartx.alignSelf = Symbol("dartx.alignSelf");
var $animation = dartx.animation = Symbol("dartx.animation");
var $animationDelay = dartx.animationDelay = Symbol("dartx.animationDelay");
var $animationDirection = dartx.animationDirection = Symbol("dartx.animationDirection");
var $animationDuration = dartx.animationDuration = Symbol("dartx.animationDuration");
var $animationFillMode = dartx.animationFillMode = Symbol("dartx.animationFillMode");
var $animationIterationCount = dartx.animationIterationCount = Symbol("dartx.animationIterationCount");
var $animationPlayState = dartx.animationPlayState = Symbol("dartx.animationPlayState");
var $animationTimingFunction = dartx.animationTimingFunction = Symbol("dartx.animationTimingFunction");
var $appRegion = dartx.appRegion = Symbol("dartx.appRegion");
var $appearance = dartx.appearance = Symbol("dartx.appearance");
var $aspectRatio = dartx.aspectRatio = Symbol("dartx.aspectRatio");
var $backfaceVisibility = dartx.backfaceVisibility = Symbol("dartx.backfaceVisibility");
var $backgroundBlendMode = dartx.backgroundBlendMode = Symbol("dartx.backgroundBlendMode");
var $backgroundClip = dartx.backgroundClip = Symbol("dartx.backgroundClip");
var $backgroundComposite = dartx.backgroundComposite = Symbol("dartx.backgroundComposite");
var $backgroundOrigin = dartx.backgroundOrigin = Symbol("dartx.backgroundOrigin");
var $backgroundPositionX = dartx.backgroundPositionX = Symbol("dartx.backgroundPositionX");
var $backgroundPositionY = dartx.backgroundPositionY = Symbol("dartx.backgroundPositionY");
var $backgroundRepeatX = dartx.backgroundRepeatX = Symbol("dartx.backgroundRepeatX");
var $backgroundRepeatY = dartx.backgroundRepeatY = Symbol("dartx.backgroundRepeatY");
var $backgroundSize = dartx.backgroundSize = Symbol("dartx.backgroundSize");
var $borderAfter = dartx.borderAfter = Symbol("dartx.borderAfter");
var $borderAfterColor = dartx.borderAfterColor = Symbol("dartx.borderAfterColor");
var $borderAfterStyle = dartx.borderAfterStyle = Symbol("dartx.borderAfterStyle");
var $borderAfterWidth = dartx.borderAfterWidth = Symbol("dartx.borderAfterWidth");
var $borderBefore = dartx.borderBefore = Symbol("dartx.borderBefore");
var $borderBeforeColor = dartx.borderBeforeColor = Symbol("dartx.borderBeforeColor");
var $borderBeforeStyle = dartx.borderBeforeStyle = Symbol("dartx.borderBeforeStyle");
var $borderBeforeWidth = dartx.borderBeforeWidth = Symbol("dartx.borderBeforeWidth");
var $borderBottomLeftRadius = dartx.borderBottomLeftRadius = Symbol("dartx.borderBottomLeftRadius");
var $borderBottomRightRadius = dartx.borderBottomRightRadius = Symbol("dartx.borderBottomRightRadius");
var $borderEnd = dartx.borderEnd = Symbol("dartx.borderEnd");
var $borderEndColor = dartx.borderEndColor = Symbol("dartx.borderEndColor");
var $borderEndStyle = dartx.borderEndStyle = Symbol("dartx.borderEndStyle");
var $borderEndWidth = dartx.borderEndWidth = Symbol("dartx.borderEndWidth");
var $borderFit = dartx.borderFit = Symbol("dartx.borderFit");
var $borderHorizontalSpacing = dartx.borderHorizontalSpacing = Symbol("dartx.borderHorizontalSpacing");
var $borderImage = dartx.borderImage = Symbol("dartx.borderImage");
var $borderImageOutset = dartx.borderImageOutset = Symbol("dartx.borderImageOutset");
var $borderImageRepeat = dartx.borderImageRepeat = Symbol("dartx.borderImageRepeat");
var $borderImageSlice = dartx.borderImageSlice = Symbol("dartx.borderImageSlice");
var $borderImageSource = dartx.borderImageSource = Symbol("dartx.borderImageSource");
var $borderImageWidth = dartx.borderImageWidth = Symbol("dartx.borderImageWidth");
var $borderRadius = dartx.borderRadius = Symbol("dartx.borderRadius");
var $borderStart = dartx.borderStart = Symbol("dartx.borderStart");
var $borderStartColor = dartx.borderStartColor = Symbol("dartx.borderStartColor");
var $borderStartStyle = dartx.borderStartStyle = Symbol("dartx.borderStartStyle");
var $borderStartWidth = dartx.borderStartWidth = Symbol("dartx.borderStartWidth");
var $borderTopLeftRadius = dartx.borderTopLeftRadius = Symbol("dartx.borderTopLeftRadius");
var $borderTopRightRadius = dartx.borderTopRightRadius = Symbol("dartx.borderTopRightRadius");
var $borderVerticalSpacing = dartx.borderVerticalSpacing = Symbol("dartx.borderVerticalSpacing");
var $boxAlign = dartx.boxAlign = Symbol("dartx.boxAlign");
var $boxDecorationBreak = dartx.boxDecorationBreak = Symbol("dartx.boxDecorationBreak");
var $boxDirection = dartx.boxDirection = Symbol("dartx.boxDirection");
var $boxFlex = dartx.boxFlex = Symbol("dartx.boxFlex");
var $boxFlexGroup = dartx.boxFlexGroup = Symbol("dartx.boxFlexGroup");
var $boxLines = dartx.boxLines = Symbol("dartx.boxLines");
var $boxOrdinalGroup = dartx.boxOrdinalGroup = Symbol("dartx.boxOrdinalGroup");
var $boxOrient = dartx.boxOrient = Symbol("dartx.boxOrient");
var $boxPack = dartx.boxPack = Symbol("dartx.boxPack");
var $boxReflect = dartx.boxReflect = Symbol("dartx.boxReflect");
var $boxShadow = dartx.boxShadow = Symbol("dartx.boxShadow");
var $boxSizing = dartx.boxSizing = Symbol("dartx.boxSizing");
var $clipPath = dartx.clipPath = Symbol("dartx.clipPath");
var $columnBreakAfter = dartx.columnBreakAfter = Symbol("dartx.columnBreakAfter");
var $columnBreakBefore = dartx.columnBreakBefore = Symbol("dartx.columnBreakBefore");
var $columnBreakInside = dartx.columnBreakInside = Symbol("dartx.columnBreakInside");
var $columnCount = dartx.columnCount = Symbol("dartx.columnCount");
var $columnFill = dartx.columnFill = Symbol("dartx.columnFill");
var $columnGap = dartx.columnGap = Symbol("dartx.columnGap");
var $columnRule = dartx.columnRule = Symbol("dartx.columnRule");
var $columnRuleColor = dartx.columnRuleColor = Symbol("dartx.columnRuleColor");
var $columnRuleStyle = dartx.columnRuleStyle = Symbol("dartx.columnRuleStyle");
var $columnRuleWidth = dartx.columnRuleWidth = Symbol("dartx.columnRuleWidth");
var $columnSpan = dartx.columnSpan = Symbol("dartx.columnSpan");
var $columnWidth = dartx.columnWidth = Symbol("dartx.columnWidth");
var $columns = dartx.columns = Symbol("dartx.columns");
var $counterIncrement = dartx.counterIncrement = Symbol("dartx.counterIncrement");
var $counterReset = dartx.counterReset = Symbol("dartx.counterReset");
var $flex = dartx.flex = Symbol("dartx.flex");
var $flexBasis = dartx.flexBasis = Symbol("dartx.flexBasis");
var $flexDirection = dartx.flexDirection = Symbol("dartx.flexDirection");
var $flexFlow = dartx.flexFlow = Symbol("dartx.flexFlow");
var $flexGrow = dartx.flexGrow = Symbol("dartx.flexGrow");
var $flexShrink = dartx.flexShrink = Symbol("dartx.flexShrink");
var $flexWrap = dartx.flexWrap = Symbol("dartx.flexWrap");
var $float = dartx.float = Symbol("dartx.float");
var $fontFeatureSettings = dartx.fontFeatureSettings = Symbol("dartx.fontFeatureSettings");
var $fontKerning = dartx.fontKerning = Symbol("dartx.fontKerning");
var $fontSizeDelta = dartx.fontSizeDelta = Symbol("dartx.fontSizeDelta");
var $fontSmoothing = dartx.fontSmoothing = Symbol("dartx.fontSmoothing");
var $fontStretch = dartx.fontStretch = Symbol("dartx.fontStretch");
var $fontVariantLigatures = dartx.fontVariantLigatures = Symbol("dartx.fontVariantLigatures");
var $grid = dartx.grid = Symbol("dartx.grid");
var $gridArea = dartx.gridArea = Symbol("dartx.gridArea");
var $gridAutoColumns = dartx.gridAutoColumns = Symbol("dartx.gridAutoColumns");
var $gridAutoFlow = dartx.gridAutoFlow = Symbol("dartx.gridAutoFlow");
var $gridAutoRows = dartx.gridAutoRows = Symbol("dartx.gridAutoRows");
var $gridColumn = dartx.gridColumn = Symbol("dartx.gridColumn");
var $gridColumnEnd = dartx.gridColumnEnd = Symbol("dartx.gridColumnEnd");
var $gridColumnStart = dartx.gridColumnStart = Symbol("dartx.gridColumnStart");
var $gridRow = dartx.gridRow = Symbol("dartx.gridRow");
var $gridRowEnd = dartx.gridRowEnd = Symbol("dartx.gridRowEnd");
var $gridRowStart = dartx.gridRowStart = Symbol("dartx.gridRowStart");
var $gridTemplate = dartx.gridTemplate = Symbol("dartx.gridTemplate");
var $gridTemplateAreas = dartx.gridTemplateAreas = Symbol("dartx.gridTemplateAreas");
var $gridTemplateColumns = dartx.gridTemplateColumns = Symbol("dartx.gridTemplateColumns");
var $gridTemplateRows = dartx.gridTemplateRows = Symbol("dartx.gridTemplateRows");
var $highlight = dartx.highlight = Symbol("dartx.highlight");
var $hyphenateCharacter = dartx.hyphenateCharacter = Symbol("dartx.hyphenateCharacter");
var $imageRendering = dartx.imageRendering = Symbol("dartx.imageRendering");
var $isolation = dartx.isolation = Symbol("dartx.isolation");
var $justifyContent = dartx.justifyContent = Symbol("dartx.justifyContent");
var $justifySelf = dartx.justifySelf = Symbol("dartx.justifySelf");
var $lineBoxContain = dartx.lineBoxContain = Symbol("dartx.lineBoxContain");
var $lineBreak = dartx.lineBreak = Symbol("dartx.lineBreak");
var $lineClamp = dartx.lineClamp = Symbol("dartx.lineClamp");
var $locale = dartx.locale = Symbol("dartx.locale");
var $logicalHeight = dartx.logicalHeight = Symbol("dartx.logicalHeight");
var $logicalWidth = dartx.logicalWidth = Symbol("dartx.logicalWidth");
var $marginAfter = dartx.marginAfter = Symbol("dartx.marginAfter");
var $marginAfterCollapse = dartx.marginAfterCollapse = Symbol("dartx.marginAfterCollapse");
var $marginBefore = dartx.marginBefore = Symbol("dartx.marginBefore");
var $marginBeforeCollapse = dartx.marginBeforeCollapse = Symbol("dartx.marginBeforeCollapse");
var $marginBottomCollapse = dartx.marginBottomCollapse = Symbol("dartx.marginBottomCollapse");
var $marginCollapse = dartx.marginCollapse = Symbol("dartx.marginCollapse");
var $marginEnd = dartx.marginEnd = Symbol("dartx.marginEnd");
var $marginStart = dartx.marginStart = Symbol("dartx.marginStart");
var $marginTopCollapse = dartx.marginTopCollapse = Symbol("dartx.marginTopCollapse");
var $mask = dartx.mask = Symbol("dartx.mask");
var $maskBoxImage = dartx.maskBoxImage = Symbol("dartx.maskBoxImage");
var $maskBoxImageOutset = dartx.maskBoxImageOutset = Symbol("dartx.maskBoxImageOutset");
var $maskBoxImageRepeat = dartx.maskBoxImageRepeat = Symbol("dartx.maskBoxImageRepeat");
var $maskBoxImageSlice = dartx.maskBoxImageSlice = Symbol("dartx.maskBoxImageSlice");
var $maskBoxImageSource = dartx.maskBoxImageSource = Symbol("dartx.maskBoxImageSource");
var $maskBoxImageWidth = dartx.maskBoxImageWidth = Symbol("dartx.maskBoxImageWidth");
var $maskClip = dartx.maskClip = Symbol("dartx.maskClip");
var $maskComposite = dartx.maskComposite = Symbol("dartx.maskComposite");
var $maskImage = dartx.maskImage = Symbol("dartx.maskImage");
var $maskOrigin = dartx.maskOrigin = Symbol("dartx.maskOrigin");
var $maskPosition = dartx.maskPosition = Symbol("dartx.maskPosition");
var $maskPositionX = dartx.maskPositionX = Symbol("dartx.maskPositionX");
var $maskPositionY = dartx.maskPositionY = Symbol("dartx.maskPositionY");
var $maskRepeat = dartx.maskRepeat = Symbol("dartx.maskRepeat");
var $maskRepeatX = dartx.maskRepeatX = Symbol("dartx.maskRepeatX");
var $maskRepeatY = dartx.maskRepeatY = Symbol("dartx.maskRepeatY");
var $maskSize = dartx.maskSize = Symbol("dartx.maskSize");
var $maskSourceType = dartx.maskSourceType = Symbol("dartx.maskSourceType");
var $maxLogicalHeight = dartx.maxLogicalHeight = Symbol("dartx.maxLogicalHeight");
var $maxLogicalWidth = dartx.maxLogicalWidth = Symbol("dartx.maxLogicalWidth");
var $maxZoom = dartx.maxZoom = Symbol("dartx.maxZoom");
var $minLogicalHeight = dartx.minLogicalHeight = Symbol("dartx.minLogicalHeight");
var $minLogicalWidth = dartx.minLogicalWidth = Symbol("dartx.minLogicalWidth");
var $minZoom = dartx.minZoom = Symbol("dartx.minZoom");
var $mixBlendMode = dartx.mixBlendMode = Symbol("dartx.mixBlendMode");
var $objectFit = dartx.objectFit = Symbol("dartx.objectFit");
var $objectPosition = dartx.objectPosition = Symbol("dartx.objectPosition");
var $opacity = dartx.opacity = Symbol("dartx.opacity");
var $order = dartx.order = Symbol("dartx.order");
var $orphans = dartx.orphans = Symbol("dartx.orphans");
var $outlineOffset = dartx.outlineOffset = Symbol("dartx.outlineOffset");
var $overflowWrap = dartx.overflowWrap = Symbol("dartx.overflowWrap");
var $overflowX = dartx.overflowX = Symbol("dartx.overflowX");
var $overflowY = dartx.overflowY = Symbol("dartx.overflowY");
var $paddingAfter = dartx.paddingAfter = Symbol("dartx.paddingAfter");
var $paddingBefore = dartx.paddingBefore = Symbol("dartx.paddingBefore");
var $paddingEnd = dartx.paddingEnd = Symbol("dartx.paddingEnd");
var $paddingStart = dartx.paddingStart = Symbol("dartx.paddingStart");
var $page = dartx.page = Symbol("dartx.page");
var $perspective = dartx.perspective = Symbol("dartx.perspective");
var $perspectiveOrigin = dartx.perspectiveOrigin = Symbol("dartx.perspectiveOrigin");
var $perspectiveOriginX = dartx.perspectiveOriginX = Symbol("dartx.perspectiveOriginX");
var $perspectiveOriginY = dartx.perspectiveOriginY = Symbol("dartx.perspectiveOriginY");
var $pointerEvents = dartx.pointerEvents = Symbol("dartx.pointerEvents");
var $printColorAdjust = dartx.printColorAdjust = Symbol("dartx.printColorAdjust");
var $resize = dartx.resize = Symbol("dartx.resize");
var $rtlOrdering = dartx.rtlOrdering = Symbol("dartx.rtlOrdering");
var $rubyPosition = dartx.rubyPosition = Symbol("dartx.rubyPosition");
var $scrollBehavior = dartx.scrollBehavior = Symbol("dartx.scrollBehavior");
var $shapeImageThreshold = dartx.shapeImageThreshold = Symbol("dartx.shapeImageThreshold");
var $shapeMargin = dartx.shapeMargin = Symbol("dartx.shapeMargin");
var $shapeOutside = dartx.shapeOutside = Symbol("dartx.shapeOutside");
var $speak = dartx.speak = Symbol("dartx.speak");
var $tabSize = dartx.tabSize = Symbol("dartx.tabSize");
var $tapHighlightColor = dartx.tapHighlightColor = Symbol("dartx.tapHighlightColor");
var $textAlignLast = dartx.textAlignLast = Symbol("dartx.textAlignLast");
var $textCombine = dartx.textCombine = Symbol("dartx.textCombine");
var $textDecorationColor = dartx.textDecorationColor = Symbol("dartx.textDecorationColor");
var $textDecorationLine = dartx.textDecorationLine = Symbol("dartx.textDecorationLine");
var $textDecorationStyle = dartx.textDecorationStyle = Symbol("dartx.textDecorationStyle");
var $textDecorationsInEffect = dartx.textDecorationsInEffect = Symbol("dartx.textDecorationsInEffect");
var $textEmphasis = dartx.textEmphasis = Symbol("dartx.textEmphasis");
var $textEmphasisColor = dartx.textEmphasisColor = Symbol("dartx.textEmphasisColor");
var $textEmphasisPosition = dartx.textEmphasisPosition = Symbol("dartx.textEmphasisPosition");
var $textEmphasisStyle = dartx.textEmphasisStyle = Symbol("dartx.textEmphasisStyle");
var $textFillColor = dartx.textFillColor = Symbol("dartx.textFillColor");
var $textJustify = dartx.textJustify = Symbol("dartx.textJustify");
var $textLineThroughColor = dartx.textLineThroughColor = Symbol("dartx.textLineThroughColor");
var $textLineThroughMode = dartx.textLineThroughMode = Symbol("dartx.textLineThroughMode");
var $textLineThroughStyle = dartx.textLineThroughStyle = Symbol("dartx.textLineThroughStyle");
var $textLineThroughWidth = dartx.textLineThroughWidth = Symbol("dartx.textLineThroughWidth");
var $textOrientation = dartx.textOrientation = Symbol("dartx.textOrientation");
var $textOverflow = dartx.textOverflow = Symbol("dartx.textOverflow");
var $textOverlineColor = dartx.textOverlineColor = Symbol("dartx.textOverlineColor");
var $textOverlineMode = dartx.textOverlineMode = Symbol("dartx.textOverlineMode");
var $textOverlineStyle = dartx.textOverlineStyle = Symbol("dartx.textOverlineStyle");
var $textOverlineWidth = dartx.textOverlineWidth = Symbol("dartx.textOverlineWidth");
var $textRendering = dartx.textRendering = Symbol("dartx.textRendering");
var $textSecurity = dartx.textSecurity = Symbol("dartx.textSecurity");
var $textShadow = dartx.textShadow = Symbol("dartx.textShadow");
var $textStroke = dartx.textStroke = Symbol("dartx.textStroke");
var $textStrokeColor = dartx.textStrokeColor = Symbol("dartx.textStrokeColor");
var $textStrokeWidth = dartx.textStrokeWidth = Symbol("dartx.textStrokeWidth");
var $textUnderlineColor = dartx.textUnderlineColor = Symbol("dartx.textUnderlineColor");
var $textUnderlineMode = dartx.textUnderlineMode = Symbol("dartx.textUnderlineMode");
var $textUnderlinePosition = dartx.textUnderlinePosition = Symbol("dartx.textUnderlinePosition");
var $textUnderlineStyle = dartx.textUnderlineStyle = Symbol("dartx.textUnderlineStyle");
var $textUnderlineWidth = dartx.textUnderlineWidth = Symbol("dartx.textUnderlineWidth");
var $touchAction = dartx.touchAction = Symbol("dartx.touchAction");
var $touchActionDelay = dartx.touchActionDelay = Symbol("dartx.touchActionDelay");
var $transformOrigin = dartx.transformOrigin = Symbol("dartx.transformOrigin");
var $transformOriginX = dartx.transformOriginX = Symbol("dartx.transformOriginX");
var $transformOriginY = dartx.transformOriginY = Symbol("dartx.transformOriginY");
var $transformOriginZ = dartx.transformOriginZ = Symbol("dartx.transformOriginZ");
var $transformStyle = dartx.transformStyle = Symbol("dartx.transformStyle");
var $transition = dartx.transition = Symbol("dartx.transition");
var $transitionDelay = dartx.transitionDelay = Symbol("dartx.transitionDelay");
var $transitionDuration = dartx.transitionDuration = Symbol("dartx.transitionDuration");
var $transitionProperty = dartx.transitionProperty = Symbol("dartx.transitionProperty");
var $transitionTimingFunction = dartx.transitionTimingFunction = Symbol("dartx.transitionTimingFunction");
var $unicodeRange = dartx.unicodeRange = Symbol("dartx.unicodeRange");
var $userDrag = dartx.userDrag = Symbol("dartx.userDrag");
var $userModify = dartx.userModify = Symbol("dartx.userModify");
var $userSelect = dartx.userSelect = Symbol("dartx.userSelect");
var $userZoom = dartx.userZoom = Symbol("dartx.userZoom");
var $widows = dartx.widows = Symbol("dartx.widows");
var $willChange = dartx.willChange = Symbol("dartx.willChange");
var $wordBreak = dartx.wordBreak = Symbol("dartx.wordBreak");
var $wordWrap = dartx.wordWrap = Symbol("dartx.wordWrap");
var $wrapFlow = dartx.wrapFlow = Symbol("dartx.wrapFlow");
var $wrapThrough = dartx.wrapThrough = Symbol("dartx.wrapThrough");
var $writingMode = dartx.writingMode = Symbol("dartx.writingMode");
var $zoom = dartx.zoom = Symbol("dartx.zoom");
var $ownerRule = dartx.ownerRule = Symbol("dartx.ownerRule");
var $rules = dartx.rules = Symbol("dartx.rules");
var $addRule = dartx.addRule = Symbol("dartx.addRule");
var $removeRule = dartx.removeRule = Symbol("dartx.removeRule");
var $ownerNode = dartx.ownerNode = Symbol("dartx.ownerNode");
var $componentAtIndex = dartx.componentAtIndex = Symbol("dartx.componentAtIndex");
var $toMatrix = dartx.toMatrix = Symbol("dartx.toMatrix");
var $unit = dartx.unit = Symbol("dartx.unit");
var $fragmentAtIndex = dartx.fragmentAtIndex = Symbol("dartx.fragmentAtIndex");
var $fallback = dartx.fallback = Symbol("dartx.fallback");
var $variable = dartx.variable = Symbol("dartx.variable");
var $define = dartx.define = Symbol("dartx.define");
var $whenDefined = dartx.whenDefined = Symbol("dartx.whenDefined");
var $options = dartx.options = Symbol("dartx.options");
var $dropEffect = dartx.dropEffect = Symbol("dartx.dropEffect");
var $effectAllowed = dartx.effectAllowed = Symbol("dartx.effectAllowed");
var $files = dartx.files = Symbol("dartx.files");
var $items = dartx.items = Symbol("dartx.items");
var $types = dartx.types = Symbol("dartx.types");
var $clearData = dartx.clearData = Symbol("dartx.clearData");
var $getData = dartx.getData = Symbol("dartx.getData");
var $setData = dartx.setData = Symbol("dartx.setData");
var $setDragImage = dartx.setDragImage = Symbol("dartx.setDragImage");
var $getAsEntry = dartx.getAsEntry = Symbol("dartx.getAsEntry");
var $getAsFile = dartx.getAsFile = Symbol("dartx.getAsFile");
var $addData = dartx.addData = Symbol("dartx.addData");
var $addFile = dartx.addFile = Symbol("dartx.addFile");
var $requestFileSystemSync = dartx.requestFileSystemSync = Symbol("dartx.requestFileSystemSync");
var $resolveLocalFileSystemSyncUrl = dartx.resolveLocalFileSystemSyncUrl = Symbol("dartx.resolveLocalFileSystemSyncUrl");
var $addressSpace = dartx.addressSpace = Symbol("dartx.addressSpace");
var $caches = dartx.caches = Symbol("dartx.caches");
var $crypto = dartx.crypto = Symbol("dartx.crypto");
var $indexedDB = dartx.indexedDB = Symbol("dartx.indexedDB");
var $isSecureContext = dartx.isSecureContext = Symbol("dartx.isSecureContext");
var $location = dartx.location = Symbol("dartx.location");
var $navigator = dartx.navigator = Symbol("dartx.navigator");
var $performance = dartx.performance = Symbol("dartx.performance");
var $self = dartx.self = Symbol("dartx.self");
var $importScripts = dartx.importScripts = Symbol("dartx.importScripts");
var $atob = dartx.atob = Symbol("dartx.atob");
var $btoa = dartx.btoa = Symbol("dartx.btoa");
var $queryUsageAndQuota = dartx.queryUsageAndQuota = Symbol("dartx.queryUsageAndQuota");
var $requestQuota = dartx.requestQuota = Symbol("dartx.requestQuota");
var $lineNumber = dartx.lineNumber = Symbol("dartx.lineNumber");
var $sourceFile = dartx.sourceFile = Symbol("dartx.sourceFile");
var $cornerPoints = dartx.cornerPoints = Symbol("dartx.cornerPoints");
var $rawValue = dartx.rawValue = Symbol("dartx.rawValue");
var $landmarks = dartx.landmarks = Symbol("dartx.landmarks");
var $acceleration = dartx.acceleration = Symbol("dartx.acceleration");
var $accelerationIncludingGravity = dartx.accelerationIncludingGravity = Symbol("dartx.accelerationIncludingGravity");
var $interval = dartx.interval = Symbol("dartx.interval");
var $rotationRate = dartx.rotationRate = Symbol("dartx.rotationRate");
var $absolute = dartx.absolute = Symbol("dartx.absolute");
var $alpha = dartx.alpha = Symbol("dartx.alpha");
var $beta = dartx.beta = Symbol("dartx.beta");
var $gamma = dartx.gamma = Symbol("dartx.gamma");
var $show = dartx.show = Symbol("dartx.show");
var $showModal = dartx.showModal = Symbol("dartx.showModal");
var $createDirectory = dartx.createDirectory = Symbol("dartx.createDirectory");
var $createReader = dartx.createReader = Symbol("dartx.createReader");
var $getDirectory = dartx.getDirectory = Symbol("dartx.getDirectory");
var $createFile = dartx.createFile = Symbol("dartx.createFile");
var $getFile = dartx.getFile = Symbol("dartx.getFile");
var $removeRecursively = dartx.removeRecursively = Symbol("dartx.removeRecursively");
var $filesystem = dartx.filesystem = Symbol("dartx.filesystem");
var $fullPath = dartx.fullPath = Symbol("dartx.fullPath");
var $isDirectory = dartx.isDirectory = Symbol("dartx.isDirectory");
var $isFile = dartx.isFile = Symbol("dartx.isFile");
var $copyTo = dartx.copyTo = Symbol("dartx.copyTo");
var $getMetadata = dartx.getMetadata = Symbol("dartx.getMetadata");
var $getParent = dartx.getParent = Symbol("dartx.getParent");
var $toUrl = dartx.toUrl = Symbol("dartx.toUrl");
var $readEntries = dartx.readEntries = Symbol("dartx.readEntries");
var $contentType = dartx.contentType = Symbol("dartx.contentType");
var $cookie = dartx.cookie = Symbol("dartx.cookie");
var $currentScript = dartx.currentScript = Symbol("dartx.currentScript");
var $window = dartx.window = Symbol("dartx.window");
var $documentElement = dartx.documentElement = Symbol("dartx.documentElement");
var $domain = dartx.domain = Symbol("dartx.domain");
var $fullscreenEnabled = dartx.fullscreenEnabled = Symbol("dartx.fullscreenEnabled");
var $implementation = dartx.implementation = Symbol("dartx.implementation");
var $rootElement = dartx.rootElement = Symbol("dartx.rootElement");
var $rootScroller = dartx.rootScroller = Symbol("dartx.rootScroller");
var $scrollingElement = dartx.scrollingElement = Symbol("dartx.scrollingElement");
var $suborigin = dartx.suborigin = Symbol("dartx.suborigin");
var $adoptNode = dartx.adoptNode = Symbol("dartx.adoptNode");
var $createDocumentFragment = dartx.createDocumentFragment = Symbol("dartx.createDocumentFragment");
var $createRange = dartx.createRange = Symbol("dartx.createRange");
var $execCommand = dartx.execCommand = Symbol("dartx.execCommand");
var $exitFullscreen = dartx.exitFullscreen = Symbol("dartx.exitFullscreen");
var $exitPointerLock = dartx.exitPointerLock = Symbol("dartx.exitPointerLock");
var $getElementsByName = dartx.getElementsByName = Symbol("dartx.getElementsByName");
var $getElementsByTagName = dartx.getElementsByTagName = Symbol("dartx.getElementsByTagName");
var $importNode = dartx.importNode = Symbol("dartx.importNode");
var $queryCommandEnabled = dartx.queryCommandEnabled = Symbol("dartx.queryCommandEnabled");
var $queryCommandIndeterm = dartx.queryCommandIndeterm = Symbol("dartx.queryCommandIndeterm");
var $queryCommandState = dartx.queryCommandState = Symbol("dartx.queryCommandState");
var $queryCommandSupported = dartx.queryCommandSupported = Symbol("dartx.queryCommandSupported");
var $queryCommandValue = dartx.queryCommandValue = Symbol("dartx.queryCommandValue");
var $registerElement2 = dartx.registerElement2 = Symbol("dartx.registerElement2");
var $getElementById = dartx.getElementById = Symbol("dartx.getElementById");
var $activeElement = dartx.activeElement = Symbol("dartx.activeElement");
var $fullscreenElement = dartx.fullscreenElement = Symbol("dartx.fullscreenElement");
var $pointerLockElement = dartx.pointerLockElement = Symbol("dartx.pointerLockElement");
var $elementsFromPoint = dartx.elementsFromPoint = Symbol("dartx.elementsFromPoint");
var $fonts = dartx.fonts = Symbol("dartx.fonts");
var $onPointerLockChange = dartx.onPointerLockChange = Symbol("dartx.onPointerLockChange");
var $onPointerLockError = dartx.onPointerLockError = Symbol("dartx.onPointerLockError");
var $onReadyStateChange = dartx.onReadyStateChange = Symbol("dartx.onReadyStateChange");
var $onSecurityPolicyViolation = dartx.onSecurityPolicyViolation = Symbol("dartx.onSecurityPolicyViolation");
var $onSelectionChange = dartx.onSelectionChange = Symbol("dartx.onSelectionChange");
var $supportsRegisterElement = dartx.supportsRegisterElement = Symbol("dartx.supportsRegisterElement");
var $supportsRegister = dartx.supportsRegister = Symbol("dartx.supportsRegister");
var $registerElement = dartx.registerElement = Symbol("dartx.registerElement");
var $createElementNS = dartx.createElementNS = Symbol("dartx.createElementNS");
var $visibilityState = dartx.visibilityState = Symbol("dartx.visibilityState");
var $styleSheets = dartx.styleSheets = Symbol("dartx.styleSheets");
var $elementFromPoint = dartx.elementFromPoint = Symbol("dartx.elementFromPoint");
var $getSelection = dartx.getSelection = Symbol("dartx.getSelection");
var $createDocument = dartx.createDocument = Symbol("dartx.createDocument");
var $createDocumentType = dartx.createDocumentType = Symbol("dartx.createDocumentType");
var $hasFeature = dartx.hasFeature = Symbol("dartx.hasFeature");
var $a = dartx.a = Symbol("dartx.a");
var $b = dartx.b = Symbol("dartx.b");
var $c = dartx.c = Symbol("dartx.c");
var $d = dartx.d = Symbol("dartx.d");
var $e = dartx.e = Symbol("dartx.e");
var $f = dartx.f = Symbol("dartx.f");
var $m11 = dartx.m11 = Symbol("dartx.m11");
var $m12 = dartx.m12 = Symbol("dartx.m12");
var $m13 = dartx.m13 = Symbol("dartx.m13");
var $m14 = dartx.m14 = Symbol("dartx.m14");
var $m21 = dartx.m21 = Symbol("dartx.m21");
var $m22 = dartx.m22 = Symbol("dartx.m22");
var $m23 = dartx.m23 = Symbol("dartx.m23");
var $m24 = dartx.m24 = Symbol("dartx.m24");
var $m31 = dartx.m31 = Symbol("dartx.m31");
var $m32 = dartx.m32 = Symbol("dartx.m32");
var $m33 = dartx.m33 = Symbol("dartx.m33");
var $m34 = dartx.m34 = Symbol("dartx.m34");
var $m41 = dartx.m41 = Symbol("dartx.m41");
var $m42 = dartx.m42 = Symbol("dartx.m42");
var $m43 = dartx.m43 = Symbol("dartx.m43");
var $m44 = dartx.m44 = Symbol("dartx.m44");
var $invertSelf = dartx.invertSelf = Symbol("dartx.invertSelf");
var $multiplySelf = dartx.multiplySelf = Symbol("dartx.multiplySelf");
var $preMultiplySelf = dartx.preMultiplySelf = Symbol("dartx.preMultiplySelf");
var $rotateAxisAngleSelf = dartx.rotateAxisAngleSelf = Symbol("dartx.rotateAxisAngleSelf");
var $rotateFromVectorSelf = dartx.rotateFromVectorSelf = Symbol("dartx.rotateFromVectorSelf");
var $rotateSelf = dartx.rotateSelf = Symbol("dartx.rotateSelf");
var $scale3dSelf = dartx.scale3dSelf = Symbol("dartx.scale3dSelf");
var $scaleSelf = dartx.scaleSelf = Symbol("dartx.scaleSelf");
var $setMatrixValue = dartx.setMatrixValue = Symbol("dartx.setMatrixValue");
var $skewXSelf = dartx.skewXSelf = Symbol("dartx.skewXSelf");
var $skewYSelf = dartx.skewYSelf = Symbol("dartx.skewYSelf");
var $translateSelf = dartx.translateSelf = Symbol("dartx.translateSelf");
var $isIdentity = dartx.isIdentity = Symbol("dartx.isIdentity");
var $flipX = dartx.flipX = Symbol("dartx.flipX");
var $flipY = dartx.flipY = Symbol("dartx.flipY");
var $inverse = dartx.inverse = Symbol("dartx.inverse");
var $multiply = dartx.multiply = Symbol("dartx.multiply");
var $rotateAxisAngle = dartx.rotateAxisAngle = Symbol("dartx.rotateAxisAngle");
var $rotateFromVector = dartx.rotateFromVector = Symbol("dartx.rotateFromVector");
var $scale3d = dartx.scale3d = Symbol("dartx.scale3d");
var $skewX = dartx.skewX = Symbol("dartx.skewX");
var $skewY = dartx.skewY = Symbol("dartx.skewY");
var $toFloat32Array = dartx.toFloat32Array = Symbol("dartx.toFloat32Array");
var $toFloat64Array = dartx.toFloat64Array = Symbol("dartx.toFloat64Array");
var $transformPoint = dartx.transformPoint = Symbol("dartx.transformPoint");
var $parseFromString = dartx.parseFromString = Symbol("dartx.parseFromString");
var $w = dartx.w = Symbol("dartx.w");
var $matrixTransform = dartx.matrixTransform = Symbol("dartx.matrixTransform");
var $p1 = dartx.p1 = Symbol("dartx.p1");
var $p2 = dartx.p2 = Symbol("dartx.p2");
var $p3 = dartx.p3 = Symbol("dartx.p3");
var $p4 = dartx.p4 = Symbol("dartx.p4");
var $getBounds = dartx.getBounds = Symbol("dartx.getBounds");
var $replace = dartx.replace = Symbol("dartx.replace");
var $supports = dartx.supports = Symbol("dartx.supports");
var $toggle = dartx.toggle = Symbol("dartx.toggle");
var $colno = dartx.colno = Symbol("dartx.colno");
var $filename = dartx.filename = Symbol("dartx.filename");
var $lineno = dartx.lineno = Symbol("dartx.lineno");
var $withCredentials = dartx.withCredentials = Symbol("dartx.withCredentials");
var $onOpen = dartx.onOpen = Symbol("dartx.onOpen");
var $lastEventId = dartx.lastEventId = Symbol("dartx.lastEventId");
var $ports = dartx.ports = Symbol("dartx.ports");
var $AddSearchProvider = dartx.AddSearchProvider = Symbol("dartx.AddSearchProvider");
var $IsSearchProviderInstalled = dartx.IsSearchProviderInstalled = Symbol("dartx.IsSearchProviderInstalled");
var $provider = dartx.provider = Symbol("dartx.provider");
var $clientId = dartx.clientId = Symbol("dartx.clientId");
var $isReload = dartx.isReload = Symbol("dartx.isReload");
var $preloadResponse = dartx.preloadResponse = Symbol("dartx.preloadResponse");
var $elements = dartx.elements = Symbol("dartx.elements");
var $lastModified = dartx.lastModified = Symbol("dartx.lastModified");
var $lastModifiedDate = dartx.lastModifiedDate = Symbol("dartx.lastModifiedDate");
var $relativePath = dartx.relativePath = Symbol("dartx.relativePath");
var $createWriter = dartx.createWriter = Symbol("dartx.createWriter");
var $file = dartx.file = Symbol("dartx.file");
var $readAsArrayBuffer = dartx.readAsArrayBuffer = Symbol("dartx.readAsArrayBuffer");
var $readAsDataUrl = dartx.readAsDataUrl = Symbol("dartx.readAsDataUrl");
var $readAsText = dartx.readAsText = Symbol("dartx.readAsText");
var $onLoadEnd = dartx.onLoadEnd = Symbol("dartx.onLoadEnd");
var $onLoadStart = dartx.onLoadStart = Symbol("dartx.onLoadStart");
var $root = dartx.root = Symbol("dartx.root");
var $seek = dartx.seek = Symbol("dartx.seek");
var $write = dartx.write = Symbol("dartx.write");
var $onWrite = dartx.onWrite = Symbol("dartx.onWrite");
var $onWriteEnd = dartx.onWriteEnd = Symbol("dartx.onWriteEnd");
var $onWriteStart = dartx.onWriteStart = Symbol("dartx.onWriteStart");
var $relatedTarget = dartx.relatedTarget = Symbol("dartx.relatedTarget");
var $family = dartx.family = Symbol("dartx.family");
var $featureSettings = dartx.featureSettings = Symbol("dartx.featureSettings");
var $loaded = dartx.loaded = Symbol("dartx.loaded");
var $stretch = dartx.stretch = Symbol("dartx.stretch");
var $variant = dartx.variant = Symbol("dartx.variant");
var $weight = dartx.weight = Symbol("dartx.weight");
var $check = dartx.check = Symbol("dartx.check");
var $onLoading = dartx.onLoading = Symbol("dartx.onLoading");
var $onLoadingDone = dartx.onLoadingDone = Symbol("dartx.onLoadingDone");
var $onLoadingError = dartx.onLoadingError = Symbol("dartx.onLoadingError");
var $fontfaces = dartx.fontfaces = Symbol("dartx.fontfaces");
var $appendBlob = dartx.appendBlob = Symbol("dartx.appendBlob");
var $acceptCharset = dartx.acceptCharset = Symbol("dartx.acceptCharset");
var $action = dartx.action = Symbol("dartx.action");
var $enctype = dartx.enctype = Symbol("dartx.enctype");
var $method = dartx.method = Symbol("dartx.method");
var $noValidate = dartx.noValidate = Symbol("dartx.noValidate");
var $requestAutocomplete = dartx.requestAutocomplete = Symbol("dartx.requestAutocomplete");
var $reset = dartx.reset = Symbol("dartx.reset");
var $submit = dartx.submit = Symbol("dartx.submit");
var $axes = dartx.axes = Symbol("dartx.axes");
var $buttons = dartx.buttons = Symbol("dartx.buttons");
var $connected = dartx.connected = Symbol("dartx.connected");
var $displayId = dartx.displayId = Symbol("dartx.displayId");
var $hand = dartx.hand = Symbol("dartx.hand");
var $mapping = dartx.mapping = Symbol("dartx.mapping");
var $pose = dartx.pose = Symbol("dartx.pose");
var $touched = dartx.touched = Symbol("dartx.touched");
var $gamepad = dartx.gamepad = Symbol("dartx.gamepad");
var $angularAcceleration = dartx.angularAcceleration = Symbol("dartx.angularAcceleration");
var $angularVelocity = dartx.angularVelocity = Symbol("dartx.angularVelocity");
var $hasOrientation = dartx.hasOrientation = Symbol("dartx.hasOrientation");
var $hasPosition = dartx.hasPosition = Symbol("dartx.hasPosition");
var $linearAcceleration = dartx.linearAcceleration = Symbol("dartx.linearAcceleration");
var $linearVelocity = dartx.linearVelocity = Symbol("dartx.linearVelocity");
var $getCurrentPosition = dartx.getCurrentPosition = Symbol("dartx.getCurrentPosition");
var $watchPosition = dartx.watchPosition = Symbol("dartx.watchPosition");
var $newUrl = dartx.newUrl = Symbol("dartx.newUrl");
var $oldUrl = dartx.oldUrl = Symbol("dartx.oldUrl");
var $scrollRestoration = dartx.scrollRestoration = Symbol("dartx.scrollRestoration");
var $back = dartx.back = Symbol("dartx.back");
var $forward = dartx.forward = Symbol("dartx.forward");
var $go = dartx.go = Symbol("dartx.go");
var $pushState = dartx.pushState = Symbol("dartx.pushState");
var $replaceState = dartx.replaceState = Symbol("dartx.replaceState");
var $namedItem = dartx.namedItem = Symbol("dartx.namedItem");
var $body = dartx.body = Symbol("dartx.body");
var $caretRangeFromPoint = dartx.caretRangeFromPoint = Symbol("dartx.caretRangeFromPoint");
var $preferredStylesheetSet = dartx.preferredStylesheetSet = Symbol("dartx.preferredStylesheetSet");
var $referrer = dartx.referrer = Symbol("dartx.referrer");
var $selectedStylesheetSet = dartx.selectedStylesheetSet = Symbol("dartx.selectedStylesheetSet");
var $register = dartx.register = Symbol("dartx.register");
var $onVisibilityChange = dartx.onVisibilityChange = Symbol("dartx.onVisibilityChange");
var $createElementUpgrader = dartx.createElementUpgrader = Symbol("dartx.createElementUpgrader");
var $responseHeaders = dartx.responseHeaders = Symbol("dartx.responseHeaders");
var $responseText = dartx.responseText = Symbol("dartx.responseText");
var $responseType = dartx.responseType = Symbol("dartx.responseType");
var $responseUrl = dartx.responseUrl = Symbol("dartx.responseUrl");
var $responseXml = dartx.responseXml = Symbol("dartx.responseXml");
var $statusText = dartx.statusText = Symbol("dartx.statusText");
var $timeout = dartx.timeout = Symbol("dartx.timeout");
var $upload = dartx.upload = Symbol("dartx.upload");
var $getAllResponseHeaders = dartx.getAllResponseHeaders = Symbol("dartx.getAllResponseHeaders");
var $getResponseHeader = dartx.getResponseHeader = Symbol("dartx.getResponseHeader");
var $overrideMimeType = dartx.overrideMimeType = Symbol("dartx.overrideMimeType");
var $send = dartx.send = Symbol("dartx.send");
var $setRequestHeader = dartx.setRequestHeader = Symbol("dartx.setRequestHeader");
var $onTimeout = dartx.onTimeout = Symbol("dartx.onTimeout");
var $allow = dartx.allow = Symbol("dartx.allow");
var $allowFullscreen = dartx.allowFullscreen = Symbol("dartx.allowFullscreen");
var $allowPaymentRequest = dartx.allowPaymentRequest = Symbol("dartx.allowPaymentRequest");
var $contentWindow = dartx.contentWindow = Symbol("dartx.contentWindow");
var $csp = dartx.csp = Symbol("dartx.csp");
var $sandbox = dartx.sandbox = Symbol("dartx.sandbox");
var $srcdoc = dartx.srcdoc = Symbol("dartx.srcdoc");
var $didTimeout = dartx.didTimeout = Symbol("dartx.didTimeout");
var $timeRemaining = dartx.timeRemaining = Symbol("dartx.timeRemaining");
var $transferFromImageBitmap = dartx.transferFromImageBitmap = Symbol("dartx.transferFromImageBitmap");
var $track = dartx.track = Symbol("dartx.track");
var $getPhotoCapabilities = dartx.getPhotoCapabilities = Symbol("dartx.getPhotoCapabilities");
var $getPhotoSettings = dartx.getPhotoSettings = Symbol("dartx.getPhotoSettings");
var $grabFrame = dartx.grabFrame = Symbol("dartx.grabFrame");
var $setOptions = dartx.setOptions = Symbol("dartx.setOptions");
var $takePhoto = dartx.takePhoto = Symbol("dartx.takePhoto");
var $async = dartx.async = Symbol("dartx.async");
var $complete = dartx.complete = Symbol("dartx.complete");
var $isMap = dartx.isMap = Symbol("dartx.isMap");
var $naturalHeight = dartx.naturalHeight = Symbol("dartx.naturalHeight");
var $naturalWidth = dartx.naturalWidth = Symbol("dartx.naturalWidth");
var $sizes = dartx.sizes = Symbol("dartx.sizes");
var $srcset = dartx.srcset = Symbol("dartx.srcset");
var $useMap = dartx.useMap = Symbol("dartx.useMap");
var $decode = dartx.decode = Symbol("dartx.decode");
var $firesTouchEvents = dartx.firesTouchEvents = Symbol("dartx.firesTouchEvents");
var $accept = dartx.accept = Symbol("dartx.accept");
var $autocapitalize = dartx.autocapitalize = Symbol("dartx.autocapitalize");
var $capture = dartx.capture = Symbol("dartx.capture");
var $defaultChecked = dartx.defaultChecked = Symbol("dartx.defaultChecked");
var $defaultValue = dartx.defaultValue = Symbol("dartx.defaultValue");
var $dirName = dartx.dirName = Symbol("dartx.dirName");
var $incremental = dartx.incremental = Symbol("dartx.incremental");
var $indeterminate = dartx.indeterminate = Symbol("dartx.indeterminate");
var $list = dartx.list = Symbol("dartx.list");
var $max = dartx.max = Symbol("dartx.max");
var $maxLength = dartx.maxLength = Symbol("dartx.maxLength");
var $min = dartx.min = Symbol("dartx.min");
var $minLength = dartx.minLength = Symbol("dartx.minLength");
var $multiple = dartx.multiple = Symbol("dartx.multiple");
var $pattern = dartx.pattern = Symbol("dartx.pattern");
var $selectionDirection = dartx.selectionDirection = Symbol("dartx.selectionDirection");
var $selectionEnd = dartx.selectionEnd = Symbol("dartx.selectionEnd");
var $selectionStart = dartx.selectionStart = Symbol("dartx.selectionStart");
var $step = dartx.step = Symbol("dartx.step");
var $valueAsDate = dartx.valueAsDate = Symbol("dartx.valueAsDate");
var $valueAsNumber = dartx.valueAsNumber = Symbol("dartx.valueAsNumber");
var $directory = dartx.directory = Symbol("dartx.directory");
var $setRangeText = dartx.setRangeText = Symbol("dartx.setRangeText");
var $setSelectionRange = dartx.setSelectionRange = Symbol("dartx.setSelectionRange");
var $stepDown = dartx.stepDown = Symbol("dartx.stepDown");
var $stepUp = dartx.stepUp = Symbol("dartx.stepUp");
var $registerForeignFetch = dartx.registerForeignFetch = Symbol("dartx.registerForeignFetch");
var $rootMargin = dartx.rootMargin = Symbol("dartx.rootMargin");
var $thresholds = dartx.thresholds = Symbol("dartx.thresholds");
var $disconnect = dartx.disconnect = Symbol("dartx.disconnect");
var $takeRecords = dartx.takeRecords = Symbol("dartx.takeRecords");
var $boundingClientRect = dartx.boundingClientRect = Symbol("dartx.boundingClientRect");
var $intersectionRatio = dartx.intersectionRatio = Symbol("dartx.intersectionRatio");
var $intersectionRect = dartx.intersectionRect = Symbol("dartx.intersectionRect");
var $isIntersecting = dartx.isIntersecting = Symbol("dartx.isIntersecting");
var $rootBounds = dartx.rootBounds = Symbol("dartx.rootBounds");
var $keyCode = dartx.keyCode = Symbol("dartx.keyCode");
var $charCode = dartx.charCode = Symbol("dartx.charCode");
var $which = dartx.which = Symbol("dartx.which");
var $altKey = dartx.altKey = Symbol("dartx.altKey");
var $ctrlKey = dartx.ctrlKey = Symbol("dartx.ctrlKey");
var $isComposing = dartx.isComposing = Symbol("dartx.isComposing");
var $metaKey = dartx.metaKey = Symbol("dartx.metaKey");
var $repeat = dartx.repeat = Symbol("dartx.repeat");
var $shiftKey = dartx.shiftKey = Symbol("dartx.shiftKey");
var $getModifierState = dartx.getModifierState = Symbol("dartx.getModifierState");
var $control = dartx.control = Symbol("dartx.control");
var $htmlFor = dartx.htmlFor = Symbol("dartx.htmlFor");
var $as = dartx.as = Symbol("dartx.as");
var $import = dartx.import = Symbol("dartx.import");
var $integrity = dartx.integrity = Symbol("dartx.integrity");
var $relList = dartx.relList = Symbol("dartx.relList");
var $scope = dartx.scope = Symbol("dartx.scope");
var $sheet = dartx.sheet = Symbol("dartx.sheet");
var $supportsImport = dartx.supportsImport = Symbol("dartx.supportsImport");
var $ancestorOrigins = dartx.ancestorOrigins = Symbol("dartx.ancestorOrigins");
var $trustedHref = dartx.trustedHref = Symbol("dartx.trustedHref");
var $assign = dartx.assign = Symbol("dartx.assign");
var $reload = dartx.reload = Symbol("dartx.reload");
var $areas = dartx.areas = Symbol("dartx.areas");
var $decodingInfo = dartx.decodingInfo = Symbol("dartx.decodingInfo");
var $encodingInfo = dartx.encodingInfo = Symbol("dartx.encodingInfo");
var $powerEfficient = dartx.powerEfficient = Symbol("dartx.powerEfficient");
var $smooth = dartx.smooth = Symbol("dartx.smooth");
var $supported = dartx.supported = Symbol("dartx.supported");
var $deviceId = dartx.deviceId = Symbol("dartx.deviceId");
var $groupId = dartx.groupId = Symbol("dartx.groupId");
var $enumerateDevices = dartx.enumerateDevices = Symbol("dartx.enumerateDevices");
var $getSupportedConstraints = dartx.getSupportedConstraints = Symbol("dartx.getSupportedConstraints");
var $getUserMedia = dartx.getUserMedia = Symbol("dartx.getUserMedia");
var $initData = dartx.initData = Symbol("dartx.initData");
var $initDataType = dartx.initDataType = Symbol("dartx.initDataType");
var $messageType = dartx.messageType = Symbol("dartx.messageType");
var $closed = dartx.closed = Symbol("dartx.closed");
var $expiration = dartx.expiration = Symbol("dartx.expiration");
var $keyStatuses = dartx.keyStatuses = Symbol("dartx.keyStatuses");
var $sessionId = dartx.sessionId = Symbol("dartx.sessionId");
var $generateRequest = dartx.generateRequest = Symbol("dartx.generateRequest");
var $keySystem = dartx.keySystem = Symbol("dartx.keySystem");
var $createMediaKeys = dartx.createMediaKeys = Symbol("dartx.createMediaKeys");
var $getConfiguration = dartx.getConfiguration = Symbol("dartx.getConfiguration");
var $getStatusForPolicy = dartx.getStatusForPolicy = Symbol("dartx.getStatusForPolicy");
var $setServerCertificate = dartx.setServerCertificate = Symbol("dartx.setServerCertificate");
var $minHdcpVersion = dartx.minHdcpVersion = Symbol("dartx.minHdcpVersion");
var $mediaText = dartx.mediaText = Symbol("dartx.mediaText");
var $appendMedium = dartx.appendMedium = Symbol("dartx.appendMedium");
var $deleteMedium = dartx.deleteMedium = Symbol("dartx.deleteMedium");
var $album = dartx.album = Symbol("dartx.album");
var $artist = dartx.artist = Symbol("dartx.artist");
var $artwork = dartx.artwork = Symbol("dartx.artwork");
var $addListener = dartx.addListener = Symbol("dartx.addListener");
var $removeListener = dartx.removeListener = Symbol("dartx.removeListener");
var $audioBitsPerSecond = dartx.audioBitsPerSecond = Symbol("dartx.audioBitsPerSecond");
var $mimeType = dartx.mimeType = Symbol("dartx.mimeType");
var $stream = dartx.stream = Symbol("dartx.stream");
var $videoBitsPerSecond = dartx.videoBitsPerSecond = Symbol("dartx.videoBitsPerSecond");
var $requestData = dartx.requestData = Symbol("dartx.requestData");
var $resume = dartx.resume = Symbol("dartx.resume");
var $metadata = dartx.metadata = Symbol("dartx.metadata");
var $playbackState = dartx.playbackState = Symbol("dartx.playbackState");
var $setActionHandler = dartx.setActionHandler = Symbol("dartx.setActionHandler");
var $activeSourceBuffers = dartx.activeSourceBuffers = Symbol("dartx.activeSourceBuffers");
var $sourceBuffers = dartx.sourceBuffers = Symbol("dartx.sourceBuffers");
var $addSourceBuffer = dartx.addSourceBuffer = Symbol("dartx.addSourceBuffer");
var $clearLiveSeekableRange = dartx.clearLiveSeekableRange = Symbol("dartx.clearLiveSeekableRange");
var $endOfStream = dartx.endOfStream = Symbol("dartx.endOfStream");
var $removeSourceBuffer = dartx.removeSourceBuffer = Symbol("dartx.removeSourceBuffer");
var $setLiveSeekableRange = dartx.setLiveSeekableRange = Symbol("dartx.setLiveSeekableRange");
var $active = dartx.active = Symbol("dartx.active");
var $addTrack = dartx.addTrack = Symbol("dartx.addTrack");
var $getAudioTracks = dartx.getAudioTracks = Symbol("dartx.getAudioTracks");
var $getTrackById = dartx.getTrackById = Symbol("dartx.getTrackById");
var $getTracks = dartx.getTracks = Symbol("dartx.getTracks");
var $getVideoTracks = dartx.getVideoTracks = Symbol("dartx.getVideoTracks");
var $removeTrack = dartx.removeTrack = Symbol("dartx.removeTrack");
var $onAddTrack = dartx.onAddTrack = Symbol("dartx.onAddTrack");
var $onRemoveTrack = dartx.onRemoveTrack = Symbol("dartx.onRemoveTrack");
var $jsHeapSizeLimit = dartx.jsHeapSizeLimit = Symbol("dartx.jsHeapSizeLimit");
var $totalJSHeapSize = dartx.totalJSHeapSize = Symbol("dartx.totalJSHeapSize");
var $usedJSHeapSize = dartx.usedJSHeapSize = Symbol("dartx.usedJSHeapSize");
var $port1 = dartx.port1 = Symbol("dartx.port1");
var $port2 = dartx.port2 = Symbol("dartx.port2");
var $httpEquiv = dartx.httpEquiv = Symbol("dartx.httpEquiv");
var $modificationTime = dartx.modificationTime = Symbol("dartx.modificationTime");
var $high = dartx.high = Symbol("dartx.high");
var $low = dartx.low = Symbol("dartx.low");
var $optimum = dartx.optimum = Symbol("dartx.optimum");
var $inputs = dartx.inputs = Symbol("dartx.inputs");
var $outputs = dartx.outputs = Symbol("dartx.outputs");
var $sysexEnabled = dartx.sysexEnabled = Symbol("dartx.sysexEnabled");
var $onMidiMessage = dartx.onMidiMessage = Symbol("dartx.onMidiMessage");
var $connection = dartx.connection = Symbol("dartx.connection");
var $manufacturer = dartx.manufacturer = Symbol("dartx.manufacturer");
var $description = dartx.description = Symbol("dartx.description");
var $enabledPlugin = dartx.enabledPlugin = Symbol("dartx.enabledPlugin");
var $suffixes = dartx.suffixes = Symbol("dartx.suffixes");
var $cite = dartx.cite = Symbol("dartx.cite");
var $dateTime = dartx.dateTime = Symbol("dartx.dateTime");
var $button = dartx.button = Symbol("dartx.button");
var $fromElement = dartx.fromElement = Symbol("dartx.fromElement");
var $region = dartx.region = Symbol("dartx.region");
var $toElement = dartx.toElement = Symbol("dartx.toElement");
var $movement = dartx.movement = Symbol("dartx.movement");
var $screen = dartx.screen = Symbol("dartx.screen");
var $layer = dartx.layer = Symbol("dartx.layer");
var $dataTransfer = dartx.dataTransfer = Symbol("dartx.dataTransfer");
var $attrChange = dartx.attrChange = Symbol("dartx.attrChange");
var $attrName = dartx.attrName = Symbol("dartx.attrName");
var $newValue = dartx.newValue = Symbol("dartx.newValue");
var $prevValue = dartx.prevValue = Symbol("dartx.prevValue");
var $relatedNode = dartx.relatedNode = Symbol("dartx.relatedNode");
var $initMutationEvent = dartx.initMutationEvent = Symbol("dartx.initMutationEvent");
var $addedNodes = dartx.addedNodes = Symbol("dartx.addedNodes");
var $attributeName = dartx.attributeName = Symbol("dartx.attributeName");
var $attributeNamespace = dartx.attributeNamespace = Symbol("dartx.attributeNamespace");
var $nextSibling = dartx.nextSibling = Symbol("dartx.nextSibling");
var $oldValue = dartx.oldValue = Symbol("dartx.oldValue");
var $previousSibling = dartx.previousSibling = Symbol("dartx.previousSibling");
var $removedNodes = dartx.removedNodes = Symbol("dartx.removedNodes");
var $disable = dartx.disable = Symbol("dartx.disable");
var $enable = dartx.enable = Symbol("dartx.enable");
var $getState = dartx.getState = Symbol("dartx.getState");
var $getGamepads = dartx.getGamepads = Symbol("dartx.getGamepads");
var $language = dartx.language = Symbol("dartx.language");
var $budget = dartx.budget = Symbol("dartx.budget");
var $clipboard = dartx.clipboard = Symbol("dartx.clipboard");
var $credentials = dartx.credentials = Symbol("dartx.credentials");
var $deviceMemory = dartx.deviceMemory = Symbol("dartx.deviceMemory");
var $doNotTrack = dartx.doNotTrack = Symbol("dartx.doNotTrack");
var $geolocation = dartx.geolocation = Symbol("dartx.geolocation");
var $maxTouchPoints = dartx.maxTouchPoints = Symbol("dartx.maxTouchPoints");
var $mediaCapabilities = dartx.mediaCapabilities = Symbol("dartx.mediaCapabilities");
var $mediaDevices = dartx.mediaDevices = Symbol("dartx.mediaDevices");
var $mediaSession = dartx.mediaSession = Symbol("dartx.mediaSession");
var $mimeTypes = dartx.mimeTypes = Symbol("dartx.mimeTypes");
var $nfc = dartx.nfc = Symbol("dartx.nfc");
var $permissions = dartx.permissions = Symbol("dartx.permissions");
var $presentation = dartx.presentation = Symbol("dartx.presentation");
var $productSub = dartx.productSub = Symbol("dartx.productSub");
var $serviceWorker = dartx.serviceWorker = Symbol("dartx.serviceWorker");
var $storage = dartx.storage = Symbol("dartx.storage");
var $vendor = dartx.vendor = Symbol("dartx.vendor");
var $vendorSub = dartx.vendorSub = Symbol("dartx.vendorSub");
var $vr = dartx.vr = Symbol("dartx.vr");
var $persistentStorage = dartx.persistentStorage = Symbol("dartx.persistentStorage");
var $temporaryStorage = dartx.temporaryStorage = Symbol("dartx.temporaryStorage");
var $cancelKeyboardLock = dartx.cancelKeyboardLock = Symbol("dartx.cancelKeyboardLock");
var $getBattery = dartx.getBattery = Symbol("dartx.getBattery");
var $getInstalledRelatedApps = dartx.getInstalledRelatedApps = Symbol("dartx.getInstalledRelatedApps");
var $getVRDisplays = dartx.getVRDisplays = Symbol("dartx.getVRDisplays");
var $registerProtocolHandler = dartx.registerProtocolHandler = Symbol("dartx.registerProtocolHandler");
var $requestKeyboardLock = dartx.requestKeyboardLock = Symbol("dartx.requestKeyboardLock");
var $requestMidiAccess = dartx.requestMidiAccess = Symbol("dartx.requestMidiAccess");
var $requestMediaKeySystemAccess = dartx.requestMediaKeySystemAccess = Symbol("dartx.requestMediaKeySystemAccess");
var $sendBeacon = dartx.sendBeacon = Symbol("dartx.sendBeacon");
var $share = dartx.share = Symbol("dartx.share");
var $webdriver = dartx.webdriver = Symbol("dartx.webdriver");
var $cookieEnabled = dartx.cookieEnabled = Symbol("dartx.cookieEnabled");
var $appCodeName = dartx.appCodeName = Symbol("dartx.appCodeName");
var $appName = dartx.appName = Symbol("dartx.appName");
var $appVersion = dartx.appVersion = Symbol("dartx.appVersion");
var $dartEnabled = dartx.dartEnabled = Symbol("dartx.dartEnabled");
var $platform = dartx.platform = Symbol("dartx.platform");
var $product = dartx.product = Symbol("dartx.product");
var $userAgent = dartx.userAgent = Symbol("dartx.userAgent");
var $languages = dartx.languages = Symbol("dartx.languages");
var $onLine = dartx.onLine = Symbol("dartx.onLine");
var $hardwareConcurrency = dartx.hardwareConcurrency = Symbol("dartx.hardwareConcurrency");
var $constraintName = dartx.constraintName = Symbol("dartx.constraintName");
var $downlink = dartx.downlink = Symbol("dartx.downlink");
var $downlinkMax = dartx.downlinkMax = Symbol("dartx.downlinkMax");
var $effectiveType = dartx.effectiveType = Symbol("dartx.effectiveType");
var $rtt = dartx.rtt = Symbol("dartx.rtt");
var $pointerBeforeReferenceNode = dartx.pointerBeforeReferenceNode = Symbol("dartx.pointerBeforeReferenceNode");
var $referenceNode = dartx.referenceNode = Symbol("dartx.referenceNode");
var $whatToShow = dartx.whatToShow = Symbol("dartx.whatToShow");
var $detach = dartx.detach = Symbol("dartx.detach");
var $actions = dartx.actions = Symbol("dartx.actions");
var $badge = dartx.badge = Symbol("dartx.badge");
var $icon = dartx.icon = Symbol("dartx.icon");
var $image = dartx.image = Symbol("dartx.image");
var $renotify = dartx.renotify = Symbol("dartx.renotify");
var $requireInteraction = dartx.requireInteraction = Symbol("dartx.requireInteraction");
var $silent = dartx.silent = Symbol("dartx.silent");
var $tag = dartx.tag = Symbol("dartx.tag");
var $vibrate = dartx.vibrate = Symbol("dartx.vibrate");
var $onShow = dartx.onShow = Symbol("dartx.onShow");
var $notification = dartx.notification = Symbol("dartx.notification");
var $reply = dartx.reply = Symbol("dartx.reply");
var $convertToBlob = dartx.convertToBlob = Symbol("dartx.convertToBlob");
var $transferToImageBitmap = dartx.transferToImageBitmap = Symbol("dartx.transferToImageBitmap");
var $commit = dartx.commit = Symbol("dartx.commit");
var $defaultSelected = dartx.defaultSelected = Symbol("dartx.defaultSelected");
var $constraint = dartx.constraint = Symbol("dartx.constraint");
var $persisted = dartx.persisted = Symbol("dartx.persisted");
var $devicePixelRatio = dartx.devicePixelRatio = Symbol("dartx.devicePixelRatio");
var $registerPaint = dartx.registerPaint = Symbol("dartx.registerPaint");
var $additionalData = dartx.additionalData = Symbol("dartx.additionalData");
var $idName = dartx.idName = Symbol("dartx.idName");
var $passwordName = dartx.passwordName = Symbol("dartx.passwordName");
var $addPath = dartx.addPath = Symbol("dartx.addPath");
var $addressLine = dartx.addressLine = Symbol("dartx.addressLine");
var $city = dartx.city = Symbol("dartx.city");
var $country = dartx.country = Symbol("dartx.country");
var $dependentLocality = dartx.dependentLocality = Symbol("dartx.dependentLocality");
var $languageCode = dartx.languageCode = Symbol("dartx.languageCode");
var $organization = dartx.organization = Symbol("dartx.organization");
var $phone = dartx.phone = Symbol("dartx.phone");
var $postalCode = dartx.postalCode = Symbol("dartx.postalCode");
var $recipient = dartx.recipient = Symbol("dartx.recipient");
var $sortingCode = dartx.sortingCode = Symbol("dartx.sortingCode");
var $instruments = dartx.instruments = Symbol("dartx.instruments");
var $userHint = dartx.userHint = Symbol("dartx.userHint");
var $shippingAddress = dartx.shippingAddress = Symbol("dartx.shippingAddress");
var $shippingOption = dartx.shippingOption = Symbol("dartx.shippingOption");
var $shippingType = dartx.shippingType = Symbol("dartx.shippingType");
var $canMakePayment = dartx.canMakePayment = Symbol("dartx.canMakePayment");
var $instrumentKey = dartx.instrumentKey = Symbol("dartx.instrumentKey");
var $paymentRequestId = dartx.paymentRequestId = Symbol("dartx.paymentRequestId");
var $total = dartx.total = Symbol("dartx.total");
var $updateWith = dartx.updateWith = Symbol("dartx.updateWith");
var $methodName = dartx.methodName = Symbol("dartx.methodName");
var $payerEmail = dartx.payerEmail = Symbol("dartx.payerEmail");
var $payerName = dartx.payerName = Symbol("dartx.payerName");
var $payerPhone = dartx.payerPhone = Symbol("dartx.payerPhone");
var $requestId = dartx.requestId = Symbol("dartx.requestId");
var $memory = dartx.memory = Symbol("dartx.memory");
var $navigation = dartx.navigation = Symbol("dartx.navigation");
var $timeOrigin = dartx.timeOrigin = Symbol("dartx.timeOrigin");
var $clearMarks = dartx.clearMarks = Symbol("dartx.clearMarks");
var $clearMeasures = dartx.clearMeasures = Symbol("dartx.clearMeasures");
var $clearResourceTimings = dartx.clearResourceTimings = Symbol("dartx.clearResourceTimings");
var $getEntries = dartx.getEntries = Symbol("dartx.getEntries");
var $getEntriesByName = dartx.getEntriesByName = Symbol("dartx.getEntriesByName");
var $getEntriesByType = dartx.getEntriesByType = Symbol("dartx.getEntriesByType");
var $mark = dartx.mark = Symbol("dartx.mark");
var $measure = dartx.measure = Symbol("dartx.measure");
var $now = dartx.now = Symbol("dartx.now");
var $setResourceTimingBufferSize = dartx.setResourceTimingBufferSize = Symbol("dartx.setResourceTimingBufferSize");
var $entryType = dartx.entryType = Symbol("dartx.entryType");
var $attribution = dartx.attribution = Symbol("dartx.attribution");
var $redirectCount = dartx.redirectCount = Symbol("dartx.redirectCount");
var $domComplete = dartx.domComplete = Symbol("dartx.domComplete");
var $domContentLoadedEventEnd = dartx.domContentLoadedEventEnd = Symbol("dartx.domContentLoadedEventEnd");
var $domContentLoadedEventStart = dartx.domContentLoadedEventStart = Symbol("dartx.domContentLoadedEventStart");
var $domInteractive = dartx.domInteractive = Symbol("dartx.domInteractive");
var $loadEventEnd = dartx.loadEventEnd = Symbol("dartx.loadEventEnd");
var $loadEventStart = dartx.loadEventStart = Symbol("dartx.loadEventStart");
var $unloadEventEnd = dartx.unloadEventEnd = Symbol("dartx.unloadEventEnd");
var $unloadEventStart = dartx.unloadEventStart = Symbol("dartx.unloadEventStart");
var $connectEnd = dartx.connectEnd = Symbol("dartx.connectEnd");
var $connectStart = dartx.connectStart = Symbol("dartx.connectStart");
var $decodedBodySize = dartx.decodedBodySize = Symbol("dartx.decodedBodySize");
var $domainLookupEnd = dartx.domainLookupEnd = Symbol("dartx.domainLookupEnd");
var $domainLookupStart = dartx.domainLookupStart = Symbol("dartx.domainLookupStart");
var $encodedBodySize = dartx.encodedBodySize = Symbol("dartx.encodedBodySize");
var $fetchStart = dartx.fetchStart = Symbol("dartx.fetchStart");
var $initiatorType = dartx.initiatorType = Symbol("dartx.initiatorType");
var $nextHopProtocol = dartx.nextHopProtocol = Symbol("dartx.nextHopProtocol");
var $redirectEnd = dartx.redirectEnd = Symbol("dartx.redirectEnd");
var $redirectStart = dartx.redirectStart = Symbol("dartx.redirectStart");
var $requestStart = dartx.requestStart = Symbol("dartx.requestStart");
var $responseEnd = dartx.responseEnd = Symbol("dartx.responseEnd");
var $responseStart = dartx.responseStart = Symbol("dartx.responseStart");
var $secureConnectionStart = dartx.secureConnectionStart = Symbol("dartx.secureConnectionStart");
var $serverTiming = dartx.serverTiming = Symbol("dartx.serverTiming");
var $transferSize = dartx.transferSize = Symbol("dartx.transferSize");
var $workerStart = dartx.workerStart = Symbol("dartx.workerStart");
var $domLoading = dartx.domLoading = Symbol("dartx.domLoading");
var $navigationStart = dartx.navigationStart = Symbol("dartx.navigationStart");
var $query = dartx.query = Symbol("dartx.query");
var $requestAll = dartx.requestAll = Symbol("dartx.requestAll");
var $revoke = dartx.revoke = Symbol("dartx.revoke");
var $fillLightMode = dartx.fillLightMode = Symbol("dartx.fillLightMode");
var $imageHeight = dartx.imageHeight = Symbol("dartx.imageHeight");
var $imageWidth = dartx.imageWidth = Symbol("dartx.imageWidth");
var $redEyeReduction = dartx.redEyeReduction = Symbol("dartx.redEyeReduction");
var $refresh = dartx.refresh = Symbol("dartx.refresh");
var $isPrimary = dartx.isPrimary = Symbol("dartx.isPrimary");
var $pointerId = dartx.pointerId = Symbol("dartx.pointerId");
var $pointerType = dartx.pointerType = Symbol("dartx.pointerType");
var $pressure = dartx.pressure = Symbol("dartx.pressure");
var $tangentialPressure = dartx.tangentialPressure = Symbol("dartx.tangentialPressure");
var $tiltX = dartx.tiltX = Symbol("dartx.tiltX");
var $tiltY = dartx.tiltY = Symbol("dartx.tiltY");
var $twist = dartx.twist = Symbol("dartx.twist");
var $getCoalescedEvents = dartx.getCoalescedEvents = Symbol("dartx.getCoalescedEvents");
var $defaultRequest = dartx.defaultRequest = Symbol("dartx.defaultRequest");
var $receiver = dartx.receiver = Symbol("dartx.receiver");
var $binaryType = dartx.binaryType = Symbol("dartx.binaryType");
var $terminate = dartx.terminate = Symbol("dartx.terminate");
var $connections = dartx.connections = Symbol("dartx.connections");
var $connectionList = dartx.connectionList = Symbol("dartx.connectionList");
var $getAvailability = dartx.getAvailability = Symbol("dartx.getAvailability");
var $reconnect = dartx.reconnect = Symbol("dartx.reconnect");
var $lengthComputable = dartx.lengthComputable = Symbol("dartx.lengthComputable");
var $promise = dartx.promise = Symbol("dartx.promise");
var $rawId = dartx.rawId = Symbol("dartx.rawId");
var $getSubscription = dartx.getSubscription = Symbol("dartx.getSubscription");
var $permissionState = dartx.permissionState = Symbol("dartx.permissionState");
var $subscribe = dartx.subscribe = Symbol("dartx.subscribe");
var $endpoint = dartx.endpoint = Symbol("dartx.endpoint");
var $expirationTime = dartx.expirationTime = Symbol("dartx.expirationTime");
var $unsubscribe = dartx.unsubscribe = Symbol("dartx.unsubscribe");
var $applicationServerKey = dartx.applicationServerKey = Symbol("dartx.applicationServerKey");
var $userVisibleOnly = dartx.userVisibleOnly = Symbol("dartx.userVisibleOnly");
var $collapsed = dartx.collapsed = Symbol("dartx.collapsed");
var $commonAncestorContainer = dartx.commonAncestorContainer = Symbol("dartx.commonAncestorContainer");
var $endContainer = dartx.endContainer = Symbol("dartx.endContainer");
var $endOffset = dartx.endOffset = Symbol("dartx.endOffset");
var $startContainer = dartx.startContainer = Symbol("dartx.startContainer");
var $startOffset = dartx.startOffset = Symbol("dartx.startOffset");
var $cloneContents = dartx.cloneContents = Symbol("dartx.cloneContents");
var $cloneRange = dartx.cloneRange = Symbol("dartx.cloneRange");
var $collapse = dartx.collapse = Symbol("dartx.collapse");
var $compareBoundaryPoints = dartx.compareBoundaryPoints = Symbol("dartx.compareBoundaryPoints");
var $comparePoint = dartx.comparePoint = Symbol("dartx.comparePoint");
var $createContextualFragment = dartx.createContextualFragment = Symbol("dartx.createContextualFragment");
var $deleteContents = dartx.deleteContents = Symbol("dartx.deleteContents");
var $extractContents = dartx.extractContents = Symbol("dartx.extractContents");
var $insertNode = dartx.insertNode = Symbol("dartx.insertNode");
var $isPointInRange = dartx.isPointInRange = Symbol("dartx.isPointInRange");
var $selectNode = dartx.selectNode = Symbol("dartx.selectNode");
var $selectNodeContents = dartx.selectNodeContents = Symbol("dartx.selectNodeContents");
var $setEnd = dartx.setEnd = Symbol("dartx.setEnd");
var $setEndAfter = dartx.setEndAfter = Symbol("dartx.setEndAfter");
var $setEndBefore = dartx.setEndBefore = Symbol("dartx.setEndBefore");
var $setStart = dartx.setStart = Symbol("dartx.setStart");
var $setStartAfter = dartx.setStartAfter = Symbol("dartx.setStartAfter");
var $setStartBefore = dartx.setStartBefore = Symbol("dartx.setStartBefore");
var $surroundContents = dartx.surroundContents = Symbol("dartx.surroundContents");
var $cancelWatchAvailability = dartx.cancelWatchAvailability = Symbol("dartx.cancelWatchAvailability");
var $watchAvailability = dartx.watchAvailability = Symbol("dartx.watchAvailability");
var $contentRect = dartx.contentRect = Symbol("dartx.contentRect");
var $expires = dartx.expires = Symbol("dartx.expires");
var $getFingerprints = dartx.getFingerprints = Symbol("dartx.getFingerprints");
var $bufferedAmount = dartx.bufferedAmount = Symbol("dartx.bufferedAmount");
var $bufferedAmountLowThreshold = dartx.bufferedAmountLowThreshold = Symbol("dartx.bufferedAmountLowThreshold");
var $maxRetransmitTime = dartx.maxRetransmitTime = Symbol("dartx.maxRetransmitTime");
var $maxRetransmits = dartx.maxRetransmits = Symbol("dartx.maxRetransmits");
var $negotiated = dartx.negotiated = Symbol("dartx.negotiated");
var $ordered = dartx.ordered = Symbol("dartx.ordered");
var $reliable = dartx.reliable = Symbol("dartx.reliable");
var $sendBlob = dartx.sendBlob = Symbol("dartx.sendBlob");
var $sendByteBuffer = dartx.sendByteBuffer = Symbol("dartx.sendByteBuffer");
var $sendString = dartx.sendString = Symbol("dartx.sendString");
var $sendTypedData = dartx.sendTypedData = Symbol("dartx.sendTypedData");
var $channel = dartx.channel = Symbol("dartx.channel");
var $canInsertDtmf = dartx.canInsertDtmf = Symbol("dartx.canInsertDtmf");
var $interToneGap = dartx.interToneGap = Symbol("dartx.interToneGap");
var $toneBuffer = dartx.toneBuffer = Symbol("dartx.toneBuffer");
var $insertDtmf = dartx.insertDtmf = Symbol("dartx.insertDtmf");
var $onToneChange = dartx.onToneChange = Symbol("dartx.onToneChange");
var $tone = dartx.tone = Symbol("dartx.tone");
var $candidate = dartx.candidate = Symbol("dartx.candidate");
var $sdpMLineIndex = dartx.sdpMLineIndex = Symbol("dartx.sdpMLineIndex");
var $sdpMid = dartx.sdpMid = Symbol("dartx.sdpMid");
var $names = dartx.names = Symbol("dartx.names");
var $stat = dartx.stat = Symbol("dartx.stat");
var $getLegacyStats = dartx.getLegacyStats = Symbol("dartx.getLegacyStats");
var $iceConnectionState = dartx.iceConnectionState = Symbol("dartx.iceConnectionState");
var $iceGatheringState = dartx.iceGatheringState = Symbol("dartx.iceGatheringState");
var $localDescription = dartx.localDescription = Symbol("dartx.localDescription");
var $remoteDescription = dartx.remoteDescription = Symbol("dartx.remoteDescription");
var $signalingState = dartx.signalingState = Symbol("dartx.signalingState");
var $addIceCandidate = dartx.addIceCandidate = Symbol("dartx.addIceCandidate");
var $addStream = dartx.addStream = Symbol("dartx.addStream");
var $createAnswer = dartx.createAnswer = Symbol("dartx.createAnswer");
var $createDtmfSender = dartx.createDtmfSender = Symbol("dartx.createDtmfSender");
var $createDataChannel = dartx.createDataChannel = Symbol("dartx.createDataChannel");
var $createOffer = dartx.createOffer = Symbol("dartx.createOffer");
var $getLocalStreams = dartx.getLocalStreams = Symbol("dartx.getLocalStreams");
var $getReceivers = dartx.getReceivers = Symbol("dartx.getReceivers");
var $getRemoteStreams = dartx.getRemoteStreams = Symbol("dartx.getRemoteStreams");
var $getSenders = dartx.getSenders = Symbol("dartx.getSenders");
var $getStats = dartx.getStats = Symbol("dartx.getStats");
var $removeStream = dartx.removeStream = Symbol("dartx.removeStream");
var $setConfiguration = dartx.setConfiguration = Symbol("dartx.setConfiguration");
var $setLocalDescription = dartx.setLocalDescription = Symbol("dartx.setLocalDescription");
var $setRemoteDescription = dartx.setRemoteDescription = Symbol("dartx.setRemoteDescription");
var $onAddStream = dartx.onAddStream = Symbol("dartx.onAddStream");
var $onDataChannel = dartx.onDataChannel = Symbol("dartx.onDataChannel");
var $onIceCandidate = dartx.onIceCandidate = Symbol("dartx.onIceCandidate");
var $onIceConnectionStateChange = dartx.onIceConnectionStateChange = Symbol("dartx.onIceConnectionStateChange");
var $onNegotiationNeeded = dartx.onNegotiationNeeded = Symbol("dartx.onNegotiationNeeded");
var $onRemoveStream = dartx.onRemoveStream = Symbol("dartx.onRemoveStream");
var $onSignalingStateChange = dartx.onSignalingStateChange = Symbol("dartx.onSignalingStateChange");
var $onTrack = dartx.onTrack = Symbol("dartx.onTrack");
var $getContributingSources = dartx.getContributingSources = Symbol("dartx.getContributingSources");
var $sdp = dartx.sdp = Symbol("dartx.sdp");
var $streams = dartx.streams = Symbol("dartx.streams");
var $available = dartx.available = Symbol("dartx.available");
var $colorDepth = dartx.colorDepth = Symbol("dartx.colorDepth");
var $keepAwake = dartx.keepAwake = Symbol("dartx.keepAwake");
var $pixelDepth = dartx.pixelDepth = Symbol("dartx.pixelDepth");
var $lock = dartx.lock = Symbol("dartx.lock");
var $unlock = dartx.unlock = Symbol("dartx.unlock");
var $charset = dartx.charset = Symbol("dartx.charset");
var $defer = dartx.defer = Symbol("dartx.defer");
var $noModule = dartx.noModule = Symbol("dartx.noModule");
var $deltaGranularity = dartx.deltaGranularity = Symbol("dartx.deltaGranularity");
var $deltaX = dartx.deltaX = Symbol("dartx.deltaX");
var $deltaY = dartx.deltaY = Symbol("dartx.deltaY");
var $fromUserInput = dartx.fromUserInput = Symbol("dartx.fromUserInput");
var $inInertialPhase = dartx.inInertialPhase = Symbol("dartx.inInertialPhase");
var $isBeginning = dartx.isBeginning = Symbol("dartx.isBeginning");
var $isDirectManipulation = dartx.isDirectManipulation = Symbol("dartx.isDirectManipulation");
var $isEnding = dartx.isEnding = Symbol("dartx.isEnding");
var $positionX = dartx.positionX = Symbol("dartx.positionX");
var $positionY = dartx.positionY = Symbol("dartx.positionY");
var $velocityX = dartx.velocityX = Symbol("dartx.velocityX");
var $velocityY = dartx.velocityY = Symbol("dartx.velocityY");
var $consumeDelta = dartx.consumeDelta = Symbol("dartx.consumeDelta");
var $distributeToScrollChainDescendant = dartx.distributeToScrollChainDescendant = Symbol("dartx.distributeToScrollChainDescendant");
var $scrollSource = dartx.scrollSource = Symbol("dartx.scrollSource");
var $timeRange = dartx.timeRange = Symbol("dartx.timeRange");
var $blockedUri = dartx.blockedUri = Symbol("dartx.blockedUri");
var $columnNumber = dartx.columnNumber = Symbol("dartx.columnNumber");
var $disposition = dartx.disposition = Symbol("dartx.disposition");
var $documentUri = dartx.documentUri = Symbol("dartx.documentUri");
var $effectiveDirective = dartx.effectiveDirective = Symbol("dartx.effectiveDirective");
var $originalPolicy = dartx.originalPolicy = Symbol("dartx.originalPolicy");
var $sample = dartx.sample = Symbol("dartx.sample");
var $statusCode = dartx.statusCode = Symbol("dartx.statusCode");
var $violatedDirective = dartx.violatedDirective = Symbol("dartx.violatedDirective");
var $selectedIndex = dartx.selectedIndex = Symbol("dartx.selectedIndex");
var $selectedOptions = dartx.selectedOptions = Symbol("dartx.selectedOptions");
var $anchorNode = dartx.anchorNode = Symbol("dartx.anchorNode");
var $anchorOffset = dartx.anchorOffset = Symbol("dartx.anchorOffset");
var $baseNode = dartx.baseNode = Symbol("dartx.baseNode");
var $baseOffset = dartx.baseOffset = Symbol("dartx.baseOffset");
var $extentNode = dartx.extentNode = Symbol("dartx.extentNode");
var $extentOffset = dartx.extentOffset = Symbol("dartx.extentOffset");
var $focusNode = dartx.focusNode = Symbol("dartx.focusNode");
var $focusOffset = dartx.focusOffset = Symbol("dartx.focusOffset");
var $isCollapsed = dartx.isCollapsed = Symbol("dartx.isCollapsed");
var $rangeCount = dartx.rangeCount = Symbol("dartx.rangeCount");
var $addRange = dartx.addRange = Symbol("dartx.addRange");
var $collapseToEnd = dartx.collapseToEnd = Symbol("dartx.collapseToEnd");
var $collapseToStart = dartx.collapseToStart = Symbol("dartx.collapseToStart");
var $containsNode = dartx.containsNode = Symbol("dartx.containsNode");
var $deleteFromDocument = dartx.deleteFromDocument = Symbol("dartx.deleteFromDocument");
var $empty = dartx.empty = Symbol("dartx.empty");
var $extend = dartx.extend = Symbol("dartx.extend");
var $getRangeAt = dartx.getRangeAt = Symbol("dartx.getRangeAt");
var $modify = dartx.modify = Symbol("dartx.modify");
var $removeAllRanges = dartx.removeAllRanges = Symbol("dartx.removeAllRanges");
var $selectAllChildren = dartx.selectAllChildren = Symbol("dartx.selectAllChildren");
var $setBaseAndExtent = dartx.setBaseAndExtent = Symbol("dartx.setBaseAndExtent");
var $setPosition = dartx.setPosition = Symbol("dartx.setPosition");
var $scriptUrl = dartx.scriptUrl = Symbol("dartx.scriptUrl");
var $controller = dartx.controller = Symbol("dartx.controller");
var $getRegistration = dartx.getRegistration = Symbol("dartx.getRegistration");
var $getRegistrations = dartx.getRegistrations = Symbol("dartx.getRegistrations");
var $clients = dartx.clients = Symbol("dartx.clients");
var $registration = dartx.registration = Symbol("dartx.registration");
var $skipWaiting = dartx.skipWaiting = Symbol("dartx.skipWaiting");
var $onActivate = dartx.onActivate = Symbol("dartx.onActivate");
var $onFetch = dartx.onFetch = Symbol("dartx.onFetch");
var $onForeignfetch = dartx.onForeignfetch = Symbol("dartx.onForeignfetch");
var $onInstall = dartx.onInstall = Symbol("dartx.onInstall");
var $backgroundFetch = dartx.backgroundFetch = Symbol("dartx.backgroundFetch");
var $installing = dartx.installing = Symbol("dartx.installing");
var $navigationPreload = dartx.navigationPreload = Symbol("dartx.navigationPreload");
var $paymentManager = dartx.paymentManager = Symbol("dartx.paymentManager");
var $pushManager = dartx.pushManager = Symbol("dartx.pushManager");
var $sync = dartx.sync = Symbol("dartx.sync");
var $waiting = dartx.waiting = Symbol("dartx.waiting");
var $getNotifications = dartx.getNotifications = Symbol("dartx.getNotifications");
var $showNotification = dartx.showNotification = Symbol("dartx.showNotification");
var $unregister = dartx.unregister = Symbol("dartx.unregister");
var $delegatesFocus = dartx.delegatesFocus = Symbol("dartx.delegatesFocus");
var $olderShadowRoot = dartx.olderShadowRoot = Symbol("dartx.olderShadowRoot");
var $console = dartx.console = Symbol("dartx.console");
var $resetStyleInheritance = dartx.resetStyleInheritance = Symbol("dartx.resetStyleInheritance");
var $applyAuthorStyles = dartx.applyAuthorStyles = Symbol("dartx.applyAuthorStyles");
var $byteLength = dartx.byteLength = Symbol("dartx.byteLength");
var $onConnect = dartx.onConnect = Symbol("dartx.onConnect");
var $assignedNodes = dartx.assignedNodes = Symbol("dartx.assignedNodes");
var $appendWindowEnd = dartx.appendWindowEnd = Symbol("dartx.appendWindowEnd");
var $appendWindowStart = dartx.appendWindowStart = Symbol("dartx.appendWindowStart");
var $timestampOffset = dartx.timestampOffset = Symbol("dartx.timestampOffset");
var $trackDefaults = dartx.trackDefaults = Symbol("dartx.trackDefaults");
var $updating = dartx.updating = Symbol("dartx.updating");
var $appendBuffer = dartx.appendBuffer = Symbol("dartx.appendBuffer");
var $appendTypedData = dartx.appendTypedData = Symbol("dartx.appendTypedData");
var $addFromString = dartx.addFromString = Symbol("dartx.addFromString");
var $addFromUri = dartx.addFromUri = Symbol("dartx.addFromUri");
var $audioTrack = dartx.audioTrack = Symbol("dartx.audioTrack");
var $continuous = dartx.continuous = Symbol("dartx.continuous");
var $grammars = dartx.grammars = Symbol("dartx.grammars");
var $interimResults = dartx.interimResults = Symbol("dartx.interimResults");
var $maxAlternatives = dartx.maxAlternatives = Symbol("dartx.maxAlternatives");
var $onAudioEnd = dartx.onAudioEnd = Symbol("dartx.onAudioEnd");
var $onAudioStart = dartx.onAudioStart = Symbol("dartx.onAudioStart");
var $onEnd = dartx.onEnd = Symbol("dartx.onEnd");
var $onNoMatch = dartx.onNoMatch = Symbol("dartx.onNoMatch");
var $onResult = dartx.onResult = Symbol("dartx.onResult");
var $onSoundEnd = dartx.onSoundEnd = Symbol("dartx.onSoundEnd");
var $onSoundStart = dartx.onSoundStart = Symbol("dartx.onSoundStart");
var $onSpeechEnd = dartx.onSpeechEnd = Symbol("dartx.onSpeechEnd");
var $onSpeechStart = dartx.onSpeechStart = Symbol("dartx.onSpeechStart");
var $onStart = dartx.onStart = Symbol("dartx.onStart");
var $confidence = dartx.confidence = Symbol("dartx.confidence");
var $transcript = dartx.transcript = Symbol("dartx.transcript");
var $emma = dartx.emma = Symbol("dartx.emma");
var $interpretation = dartx.interpretation = Symbol("dartx.interpretation");
var $resultIndex = dartx.resultIndex = Symbol("dartx.resultIndex");
var $results = dartx.results = Symbol("dartx.results");
var $isFinal = dartx.isFinal = Symbol("dartx.isFinal");
var $getVoices = dartx.getVoices = Symbol("dartx.getVoices");
var $pending = dartx.pending = Symbol("dartx.pending");
var $speaking = dartx.speaking = Symbol("dartx.speaking");
var $charIndex = dartx.charIndex = Symbol("dartx.charIndex");
var $utterance = dartx.utterance = Symbol("dartx.utterance");
var $pitch = dartx.pitch = Symbol("dartx.pitch");
var $rate = dartx.rate = Symbol("dartx.rate");
var $voice = dartx.voice = Symbol("dartx.voice");
var $onBoundary = dartx.onBoundary = Symbol("dartx.onBoundary");
var $onMark = dartx.onMark = Symbol("dartx.onMark");
var $onResume = dartx.onResume = Symbol("dartx.onResume");
var $localService = dartx.localService = Symbol("dartx.localService");
var $voiceUri = dartx.voiceUri = Symbol("dartx.voiceUri");
var $storageArea = dartx.storageArea = Symbol("dartx.storageArea");
var $estimate = dartx.estimate = Symbol("dartx.estimate");
var $persist = dartx.persist = Symbol("dartx.persist");
var $matchMedium = dartx.matchMedium = Symbol("dartx.matchMedium");
var $getProperties = dartx.getProperties = Symbol("dartx.getProperties");
var $lastChance = dartx.lastChance = Symbol("dartx.lastChance");
var $getTags = dartx.getTags = Symbol("dartx.getTags");
var $cellIndex = dartx.cellIndex = Symbol("dartx.cellIndex");
var $headers = dartx.headers = Symbol("dartx.headers");
var $span = dartx.span = Symbol("dartx.span");
var $tBodies = dartx.tBodies = Symbol("dartx.tBodies");
var $rows = dartx.rows = Symbol("dartx.rows");
var $insertRow = dartx.insertRow = Symbol("dartx.insertRow");
var $addRow = dartx.addRow = Symbol("dartx.addRow");
var $createCaption = dartx.createCaption = Symbol("dartx.createCaption");
var $createTBody = dartx.createTBody = Symbol("dartx.createTBody");
var $createTFoot = dartx.createTFoot = Symbol("dartx.createTFoot");
var $createTHead = dartx.createTHead = Symbol("dartx.createTHead");
var $caption = dartx.caption = Symbol("dartx.caption");
var $tFoot = dartx.tFoot = Symbol("dartx.tFoot");
var $tHead = dartx.tHead = Symbol("dartx.tHead");
var $deleteCaption = dartx.deleteCaption = Symbol("dartx.deleteCaption");
var $deleteRow = dartx.deleteRow = Symbol("dartx.deleteRow");
var $deleteTFoot = dartx.deleteTFoot = Symbol("dartx.deleteTFoot");
var $deleteTHead = dartx.deleteTHead = Symbol("dartx.deleteTHead");
var $cells = dartx.cells = Symbol("dartx.cells");
var $insertCell = dartx.insertCell = Symbol("dartx.insertCell");
var $addCell = dartx.addCell = Symbol("dartx.addCell");
var $sectionRowIndex = dartx.sectionRowIndex = Symbol("dartx.sectionRowIndex");
var $deleteCell = dartx.deleteCell = Symbol("dartx.deleteCell");
var $containerId = dartx.containerId = Symbol("dartx.containerId");
var $containerName = dartx.containerName = Symbol("dartx.containerName");
var $containerSrc = dartx.containerSrc = Symbol("dartx.containerSrc");
var $containerType = dartx.containerType = Symbol("dartx.containerType");
var $cols = dartx.cols = Symbol("dartx.cols");
var $textLength = dartx.textLength = Symbol("dartx.textLength");
var $wrap = dartx.wrap = Symbol("dartx.wrap");
var $actualBoundingBoxAscent = dartx.actualBoundingBoxAscent = Symbol("dartx.actualBoundingBoxAscent");
var $actualBoundingBoxDescent = dartx.actualBoundingBoxDescent = Symbol("dartx.actualBoundingBoxDescent");
var $actualBoundingBoxLeft = dartx.actualBoundingBoxLeft = Symbol("dartx.actualBoundingBoxLeft");
var $actualBoundingBoxRight = dartx.actualBoundingBoxRight = Symbol("dartx.actualBoundingBoxRight");
var $alphabeticBaseline = dartx.alphabeticBaseline = Symbol("dartx.alphabeticBaseline");
var $emHeightAscent = dartx.emHeightAscent = Symbol("dartx.emHeightAscent");
var $emHeightDescent = dartx.emHeightDescent = Symbol("dartx.emHeightDescent");
var $fontBoundingBoxAscent = dartx.fontBoundingBoxAscent = Symbol("dartx.fontBoundingBoxAscent");
var $fontBoundingBoxDescent = dartx.fontBoundingBoxDescent = Symbol("dartx.fontBoundingBoxDescent");
var $hangingBaseline = dartx.hangingBaseline = Symbol("dartx.hangingBaseline");
var $ideographicBaseline = dartx.ideographicBaseline = Symbol("dartx.ideographicBaseline");
var $activeCues = dartx.activeCues = Symbol("dartx.activeCues");
var $cues = dartx.cues = Symbol("dartx.cues");
var $addCue = dartx.addCue = Symbol("dartx.addCue");
var $removeCue = dartx.removeCue = Symbol("dartx.removeCue");
var $onCueChange = dartx.onCueChange = Symbol("dartx.onCueChange");
var $endTime = dartx.endTime = Symbol("dartx.endTime");
var $pauseOnExit = dartx.pauseOnExit = Symbol("dartx.pauseOnExit");
var $onEnter = dartx.onEnter = Symbol("dartx.onEnter");
var $onExit = dartx.onExit = Symbol("dartx.onExit");
var $getCueById = dartx.getCueById = Symbol("dartx.getCueById");
var $end = dartx.end = Symbol("dartx.end");
var $force = dartx.force = Symbol("dartx.force");
var $identifier = dartx.identifier = Symbol("dartx.identifier");
var $rotationAngle = dartx.rotationAngle = Symbol("dartx.rotationAngle");
var $radiusX = dartx.radiusX = Symbol("dartx.radiusX");
var $radiusY = dartx.radiusY = Symbol("dartx.radiusY");
var $changedTouches = dartx.changedTouches = Symbol("dartx.changedTouches");
var $targetTouches = dartx.targetTouches = Symbol("dartx.targetTouches");
var $touches = dartx.touches = Symbol("dartx.touches");
var $byteStreamTrackID = dartx.byteStreamTrackID = Symbol("dartx.byteStreamTrackID");
var $kinds = dartx.kinds = Symbol("dartx.kinds");
var $srclang = dartx.srclang = Symbol("dartx.srclang");
var $propertyName = dartx.propertyName = Symbol("dartx.propertyName");
var $pseudoElement = dartx.pseudoElement = Symbol("dartx.pseudoElement");
var $currentNode = dartx.currentNode = Symbol("dartx.currentNode");
var $notifyLockAcquired = dartx.notifyLockAcquired = Symbol("dartx.notifyLockAcquired");
var $notifyLockReleased = dartx.notifyLockReleased = Symbol("dartx.notifyLockReleased");
var $pull = dartx.pull = Symbol("dartx.pull");
var $searchParams = dartx.searchParams = Symbol("dartx.searchParams");
var $getDevices = dartx.getDevices = Symbol("dartx.getDevices");
var $getTransformTo = dartx.getTransformTo = Symbol("dartx.getTransformTo");
var $deviceName = dartx.deviceName = Symbol("dartx.deviceName");
var $isExternal = dartx.isExternal = Symbol("dartx.isExternal");
var $requestSession = dartx.requestSession = Symbol("dartx.requestSession");
var $supportsSession = dartx.supportsSession = Symbol("dartx.supportsSession");
var $device = dartx.device = Symbol("dartx.device");
var $capabilities = dartx.capabilities = Symbol("dartx.capabilities");
var $depthFar = dartx.depthFar = Symbol("dartx.depthFar");
var $depthNear = dartx.depthNear = Symbol("dartx.depthNear");
var $displayName = dartx.displayName = Symbol("dartx.displayName");
var $isPresenting = dartx.isPresenting = Symbol("dartx.isPresenting");
var $stageParameters = dartx.stageParameters = Symbol("dartx.stageParameters");
var $cancelAnimationFrame = dartx.cancelAnimationFrame = Symbol("dartx.cancelAnimationFrame");
var $exitPresent = dartx.exitPresent = Symbol("dartx.exitPresent");
var $getEyeParameters = dartx.getEyeParameters = Symbol("dartx.getEyeParameters");
var $getFrameData = dartx.getFrameData = Symbol("dartx.getFrameData");
var $getLayers = dartx.getLayers = Symbol("dartx.getLayers");
var $requestAnimationFrame = dartx.requestAnimationFrame = Symbol("dartx.requestAnimationFrame");
var $requestPresent = dartx.requestPresent = Symbol("dartx.requestPresent");
var $submitFrame = dartx.submitFrame = Symbol("dartx.submitFrame");
var $canPresent = dartx.canPresent = Symbol("dartx.canPresent");
var $hasExternalDisplay = dartx.hasExternalDisplay = Symbol("dartx.hasExternalDisplay");
var $maxLayers = dartx.maxLayers = Symbol("dartx.maxLayers");
var $renderHeight = dartx.renderHeight = Symbol("dartx.renderHeight");
var $renderWidth = dartx.renderWidth = Symbol("dartx.renderWidth");
var $leftProjectionMatrix = dartx.leftProjectionMatrix = Symbol("dartx.leftProjectionMatrix");
var $leftViewMatrix = dartx.leftViewMatrix = Symbol("dartx.leftViewMatrix");
var $rightProjectionMatrix = dartx.rightProjectionMatrix = Symbol("dartx.rightProjectionMatrix");
var $rightViewMatrix = dartx.rightViewMatrix = Symbol("dartx.rightViewMatrix");
var $bounds = dartx.bounds = Symbol("dartx.bounds");
var $emulatedHeight = dartx.emulatedHeight = Symbol("dartx.emulatedHeight");
var $exclusive = dartx.exclusive = Symbol("dartx.exclusive");
var $requestFrameOfReference = dartx.requestFrameOfReference = Symbol("dartx.requestFrameOfReference");
var $session = dartx.session = Symbol("dartx.session");
var $geometry = dartx.geometry = Symbol("dartx.geometry");
var $sittingToStandingTransform = dartx.sittingToStandingTransform = Symbol("dartx.sittingToStandingTransform");
var $sizeX = dartx.sizeX = Symbol("dartx.sizeX");
var $sizeZ = dartx.sizeZ = Symbol("dartx.sizeZ");
var $badInput = dartx.badInput = Symbol("dartx.badInput");
var $customError = dartx.customError = Symbol("dartx.customError");
var $patternMismatch = dartx.patternMismatch = Symbol("dartx.patternMismatch");
var $rangeOverflow = dartx.rangeOverflow = Symbol("dartx.rangeOverflow");
var $rangeUnderflow = dartx.rangeUnderflow = Symbol("dartx.rangeUnderflow");
var $stepMismatch = dartx.stepMismatch = Symbol("dartx.stepMismatch");
var $tooLong = dartx.tooLong = Symbol("dartx.tooLong");
var $tooShort = dartx.tooShort = Symbol("dartx.tooShort");
var $typeMismatch = dartx.typeMismatch = Symbol("dartx.typeMismatch");
var $valid = dartx.valid = Symbol("dartx.valid");
var $valueMissing = dartx.valueMissing = Symbol("dartx.valueMissing");
var $poster = dartx.poster = Symbol("dartx.poster");
var $videoHeight = dartx.videoHeight = Symbol("dartx.videoHeight");
var $videoWidth = dartx.videoWidth = Symbol("dartx.videoWidth");
var $decodedFrameCount = dartx.decodedFrameCount = Symbol("dartx.decodedFrameCount");
var $droppedFrameCount = dartx.droppedFrameCount = Symbol("dartx.droppedFrameCount");
var $getVideoPlaybackQuality = dartx.getVideoPlaybackQuality = Symbol("dartx.getVideoPlaybackQuality");
var $enterFullscreen = dartx.enterFullscreen = Symbol("dartx.enterFullscreen");
var $corruptedVideoFrames = dartx.corruptedVideoFrames = Symbol("dartx.corruptedVideoFrames");
var $creationTime = dartx.creationTime = Symbol("dartx.creationTime");
var $droppedVideoFrames = dartx.droppedVideoFrames = Symbol("dartx.droppedVideoFrames");
var $totalVideoFrames = dartx.totalVideoFrames = Symbol("dartx.totalVideoFrames");
var $sourceBuffer = dartx.sourceBuffer = Symbol("dartx.sourceBuffer");
var $pageLeft = dartx.pageLeft = Symbol("dartx.pageLeft");
var $pageTop = dartx.pageTop = Symbol("dartx.pageTop");
var $align = dartx.align = Symbol("dartx.align");
var $line = dartx.line = Symbol("dartx.line");
var $snapToLines = dartx.snapToLines = Symbol("dartx.snapToLines");
var $vertical = dartx.vertical = Symbol("dartx.vertical");
var $getCueAsHtml = dartx.getCueAsHtml = Symbol("dartx.getCueAsHtml");
var $lines = dartx.lines = Symbol("dartx.lines");
var $regionAnchorX = dartx.regionAnchorX = Symbol("dartx.regionAnchorX");
var $regionAnchorY = dartx.regionAnchorY = Symbol("dartx.regionAnchorY");
var $viewportAnchorX = dartx.viewportAnchorX = Symbol("dartx.viewportAnchorX");
var $viewportAnchorY = dartx.viewportAnchorY = Symbol("dartx.viewportAnchorY");
var $extensions = dartx.extensions = Symbol("dartx.extensions");
var $deltaZ = dartx.deltaZ = Symbol("dartx.deltaZ");
var $deltaMode = dartx.deltaMode = Symbol("dartx.deltaMode");
var $animationFrame = dartx.animationFrame = Symbol("dartx.animationFrame");
var $document = dartx.document = Symbol("dartx.document");
var $requestFileSystem = dartx.requestFileSystem = Symbol("dartx.requestFileSystem");
var $animationWorklet = dartx.animationWorklet = Symbol("dartx.animationWorklet");
var $applicationCache = dartx.applicationCache = Symbol("dartx.applicationCache");
var $audioWorklet = dartx.audioWorklet = Symbol("dartx.audioWorklet");
var $cookieStore = dartx.cookieStore = Symbol("dartx.cookieStore");
var $customElements = dartx.customElements = Symbol("dartx.customElements");
var $defaultStatus = dartx.defaultStatus = Symbol("dartx.defaultStatus");
var $defaultstatus = dartx.defaultstatus = Symbol("dartx.defaultstatus");
var $external = dartx.external = Symbol("dartx.external");
var $history = dartx.history = Symbol("dartx.history");
var $innerHeight = dartx.innerHeight = Symbol("dartx.innerHeight");
var $innerWidth = dartx.innerWidth = Symbol("dartx.innerWidth");
var $localStorage = dartx.localStorage = Symbol("dartx.localStorage");
var $locationbar = dartx.locationbar = Symbol("dartx.locationbar");
var $menubar = dartx.menubar = Symbol("dartx.menubar");
var $offscreenBuffering = dartx.offscreenBuffering = Symbol("dartx.offscreenBuffering");
var $opener = dartx.opener = Symbol("dartx.opener");
var $outerHeight = dartx.outerHeight = Symbol("dartx.outerHeight");
var $outerWidth = dartx.outerWidth = Symbol("dartx.outerWidth");
var $screenLeft = dartx.screenLeft = Symbol("dartx.screenLeft");
var $screenTop = dartx.screenTop = Symbol("dartx.screenTop");
var $screenX = dartx.screenX = Symbol("dartx.screenX");
var $screenY = dartx.screenY = Symbol("dartx.screenY");
var $scrollbars = dartx.scrollbars = Symbol("dartx.scrollbars");
var $sessionStorage = dartx.sessionStorage = Symbol("dartx.sessionStorage");
var $speechSynthesis = dartx.speechSynthesis = Symbol("dartx.speechSynthesis");
var $statusbar = dartx.statusbar = Symbol("dartx.statusbar");
var $styleMedia = dartx.styleMedia = Symbol("dartx.styleMedia");
var $toolbar = dartx.toolbar = Symbol("dartx.toolbar");
var $visualViewport = dartx.visualViewport = Symbol("dartx.visualViewport");
var $alert = dartx.alert = Symbol("dartx.alert");
var $cancelIdleCallback = dartx.cancelIdleCallback = Symbol("dartx.cancelIdleCallback");
var $confirm = dartx.confirm = Symbol("dartx.confirm");
var $find = dartx.find = Symbol("dartx.find");
var $getComputedStyleMap = dartx.getComputedStyleMap = Symbol("dartx.getComputedStyleMap");
var $getMatchedCssRules = dartx.getMatchedCssRules = Symbol("dartx.getMatchedCssRules");
var $matchMedia = dartx.matchMedia = Symbol("dartx.matchMedia");
var $moveBy = dartx.moveBy = Symbol("dartx.moveBy");
var $print = dartx.print = Symbol("dartx.print");
var $requestIdleCallback = dartx.requestIdleCallback = Symbol("dartx.requestIdleCallback");
var $resizeBy = dartx.resizeBy = Symbol("dartx.resizeBy");
var $resizeTo = dartx.resizeTo = Symbol("dartx.resizeTo");
var $resolveLocalFileSystemUrl = dartx.resolveLocalFileSystemUrl = Symbol("dartx.resolveLocalFileSystemUrl");
var $onContentLoaded = dartx.onContentLoaded = Symbol("dartx.onContentLoaded");
var $onDeviceMotion = dartx.onDeviceMotion = Symbol("dartx.onDeviceMotion");
var $onDeviceOrientation = dartx.onDeviceOrientation = Symbol("dartx.onDeviceOrientation");
var $onPageHide = dartx.onPageHide = Symbol("dartx.onPageHide");
var $onPageShow = dartx.onPageShow = Symbol("dartx.onPageShow");
var $onAnimationEnd = dartx.onAnimationEnd = Symbol("dartx.onAnimationEnd");
var $onAnimationIteration = dartx.onAnimationIteration = Symbol("dartx.onAnimationIteration");
var $onAnimationStart = dartx.onAnimationStart = Symbol("dartx.onAnimationStart");
var $onBeforeUnload = dartx.onBeforeUnload = Symbol("dartx.onBeforeUnload");
var $openDatabase = dartx.openDatabase = Symbol("dartx.openDatabase");
var $pageXOffset = dartx.pageXOffset = Symbol("dartx.pageXOffset");
var $pageYOffset = dartx.pageYOffset = Symbol("dartx.pageYOffset");
var $scrollX = dartx.scrollX = Symbol("dartx.scrollX");
var $scrollY = dartx.scrollY = Symbol("dartx.scrollY");
var $focused = dartx.focused = Symbol("dartx.focused");
var $navigate = dartx.navigate = Symbol("dartx.navigate");
var $createExpression = dartx.createExpression = Symbol("dartx.createExpression");
var $createNSResolver = dartx.createNSResolver = Symbol("dartx.createNSResolver");
var $evaluate = dartx.evaluate = Symbol("dartx.evaluate");
var $lookupNamespaceUri = dartx.lookupNamespaceUri = Symbol("dartx.lookupNamespaceUri");
var $booleanValue = dartx.booleanValue = Symbol("dartx.booleanValue");
var $invalidIteratorState = dartx.invalidIteratorState = Symbol("dartx.invalidIteratorState");
var $numberValue = dartx.numberValue = Symbol("dartx.numberValue");
var $resultType = dartx.resultType = Symbol("dartx.resultType");
var $singleNodeValue = dartx.singleNodeValue = Symbol("dartx.singleNodeValue");
var $snapshotLength = dartx.snapshotLength = Symbol("dartx.snapshotLength");
var $stringValue = dartx.stringValue = Symbol("dartx.stringValue");
var $iterateNext = dartx.iterateNext = Symbol("dartx.iterateNext");
var $snapshotItem = dartx.snapshotItem = Symbol("dartx.snapshotItem");
var $serializeToString = dartx.serializeToString = Symbol("dartx.serializeToString");
var $clearParameters = dartx.clearParameters = Symbol("dartx.clearParameters");
var $getParameter = dartx.getParameter = Symbol("dartx.getParameter");
var $importStylesheet = dartx.importStylesheet = Symbol("dartx.importStylesheet");
var $removeParameter = dartx.removeParameter = Symbol("dartx.removeParameter");
var $setParameter = dartx.setParameter = Symbol("dartx.setParameter");
var $transformToDocument = dartx.transformToDocument = Symbol("dartx.transformToDocument");
var $transformToFragment = dartx.transformToFragment = Symbol("dartx.transformToFragment");
var $getBudget = dartx.getBudget = Symbol("dartx.getBudget");
var $getCost = dartx.getCost = Symbol("dartx.getCost");
var $reserve = dartx.reserve = Symbol("dartx.reserve");
var $read = dartx.read = Symbol("dartx.read");
var $readText = dartx.readText = Symbol("dartx.readText");
var $writeText = dartx.writeText = Symbol("dartx.writeText");
var $getNamedItem = dartx.getNamedItem = Symbol("dartx.getNamedItem");
var $getNamedItemNS = dartx.getNamedItemNS = Symbol("dartx.getNamedItemNS");
var $removeNamedItem = dartx.removeNamedItem = Symbol("dartx.removeNamedItem");
var $removeNamedItemNS = dartx.removeNamedItemNS = Symbol("dartx.removeNamedItemNS");
var $setNamedItem = dartx.setNamedItem = Symbol("dartx.setNamedItem");
var $setNamedItemNS = dartx.setNamedItemNS = Symbol("dartx.setNamedItemNS");
var $cache = dartx.cache = Symbol("dartx.cache");
var $redirect = dartx.redirect = Symbol("dartx.redirect");
var $farthestViewportElement = dartx.farthestViewportElement = Symbol("dartx.farthestViewportElement");
var $nearestViewportElement = dartx.nearestViewportElement = Symbol("dartx.nearestViewportElement");
var $getBBox = dartx.getBBox = Symbol("dartx.getBBox");
var $getCtm = dartx.getCtm = Symbol("dartx.getCtm");
var $getScreenCtm = dartx.getScreenCtm = Symbol("dartx.getScreenCtm");
var $requiredExtensions = dartx.requiredExtensions = Symbol("dartx.requiredExtensions");
var $systemLanguage = dartx.systemLanguage = Symbol("dartx.systemLanguage");
var $ownerSvgElement = dartx.ownerSvgElement = Symbol("dartx.ownerSvgElement");
var $viewportElement = dartx.viewportElement = Symbol("dartx.viewportElement");
var $unitType = dartx.unitType = Symbol("dartx.unitType");
var $valueAsString = dartx.valueAsString = Symbol("dartx.valueAsString");
var $valueInSpecifiedUnits = dartx.valueInSpecifiedUnits = Symbol("dartx.valueInSpecifiedUnits");
var $convertToSpecifiedUnits = dartx.convertToSpecifiedUnits = Symbol("dartx.convertToSpecifiedUnits");
var $newValueSpecifiedUnits = dartx.newValueSpecifiedUnits = Symbol("dartx.newValueSpecifiedUnits");
var $targetElement = dartx.targetElement = Symbol("dartx.targetElement");
var $beginElement = dartx.beginElement = Symbol("dartx.beginElement");
var $beginElementAt = dartx.beginElementAt = Symbol("dartx.beginElementAt");
var $endElement = dartx.endElement = Symbol("dartx.endElement");
var $endElementAt = dartx.endElementAt = Symbol("dartx.endElementAt");
var $getCurrentTime = dartx.getCurrentTime = Symbol("dartx.getCurrentTime");
var $getSimpleDuration = dartx.getSimpleDuration = Symbol("dartx.getSimpleDuration");
var $getStartTime = dartx.getStartTime = Symbol("dartx.getStartTime");
var $animVal = dartx.animVal = Symbol("dartx.animVal");
var $baseVal = dartx.baseVal = Symbol("dartx.baseVal");
var $cx = dartx.cx = Symbol("dartx.cx");
var $cy = dartx.cy = Symbol("dartx.cy");
var $r = dartx.r = Symbol("dartx.r");
var $pathLength = dartx.pathLength = Symbol("dartx.pathLength");
var $getPointAtLength = dartx.getPointAtLength = Symbol("dartx.getPointAtLength");
var $getTotalLength = dartx.getTotalLength = Symbol("dartx.getTotalLength");
var $isPointInFill = dartx.isPointInFill = Symbol("dartx.isPointInFill");
var $clipPathUnits = dartx.clipPathUnits = Symbol("dartx.clipPathUnits");
var $rx = dartx.rx = Symbol("dartx.rx");
var $ry = dartx.ry = Symbol("dartx.ry");
var $in1 = dartx.in1 = Symbol("dartx.in1");
var $in2 = dartx.in2 = Symbol("dartx.in2");
var $k1 = dartx.k1 = Symbol("dartx.k1");
var $k2 = dartx.k2 = Symbol("dartx.k2");
var $k3 = dartx.k3 = Symbol("dartx.k3");
var $k4 = dartx.k4 = Symbol("dartx.k4");
var $operator = dartx.operator = Symbol("dartx.operator");
var $bias = dartx.bias = Symbol("dartx.bias");
var $divisor = dartx.divisor = Symbol("dartx.divisor");
var $edgeMode = dartx.edgeMode = Symbol("dartx.edgeMode");
var $kernelMatrix = dartx.kernelMatrix = Symbol("dartx.kernelMatrix");
var $kernelUnitLengthX = dartx.kernelUnitLengthX = Symbol("dartx.kernelUnitLengthX");
var $kernelUnitLengthY = dartx.kernelUnitLengthY = Symbol("dartx.kernelUnitLengthY");
var $orderX = dartx.orderX = Symbol("dartx.orderX");
var $orderY = dartx.orderY = Symbol("dartx.orderY");
var $preserveAlpha = dartx.preserveAlpha = Symbol("dartx.preserveAlpha");
var $targetX = dartx.targetX = Symbol("dartx.targetX");
var $targetY = dartx.targetY = Symbol("dartx.targetY");
var $diffuseConstant = dartx.diffuseConstant = Symbol("dartx.diffuseConstant");
var $surfaceScale = dartx.surfaceScale = Symbol("dartx.surfaceScale");
var $xChannelSelector = dartx.xChannelSelector = Symbol("dartx.xChannelSelector");
var $yChannelSelector = dartx.yChannelSelector = Symbol("dartx.yChannelSelector");
var $azimuth = dartx.azimuth = Symbol("dartx.azimuth");
var $elevation = dartx.elevation = Symbol("dartx.elevation");
var $stdDeviationX = dartx.stdDeviationX = Symbol("dartx.stdDeviationX");
var $stdDeviationY = dartx.stdDeviationY = Symbol("dartx.stdDeviationY");
var $setStdDeviation = dartx.setStdDeviation = Symbol("dartx.setStdDeviation");
var $preserveAspectRatio = dartx.preserveAspectRatio = Symbol("dartx.preserveAspectRatio");
var $dx = dartx.dx = Symbol("dartx.dx");
var $dy = dartx.dy = Symbol("dartx.dy");
var $specularConstant = dartx.specularConstant = Symbol("dartx.specularConstant");
var $specularExponent = dartx.specularExponent = Symbol("dartx.specularExponent");
var $limitingConeAngle = dartx.limitingConeAngle = Symbol("dartx.limitingConeAngle");
var $pointsAtX = dartx.pointsAtX = Symbol("dartx.pointsAtX");
var $pointsAtY = dartx.pointsAtY = Symbol("dartx.pointsAtY");
var $pointsAtZ = dartx.pointsAtZ = Symbol("dartx.pointsAtZ");
var $baseFrequencyX = dartx.baseFrequencyX = Symbol("dartx.baseFrequencyX");
var $baseFrequencyY = dartx.baseFrequencyY = Symbol("dartx.baseFrequencyY");
var $numOctaves = dartx.numOctaves = Symbol("dartx.numOctaves");
var $seed = dartx.seed = Symbol("dartx.seed");
var $stitchTiles = dartx.stitchTiles = Symbol("dartx.stitchTiles");
var $filterUnits = dartx.filterUnits = Symbol("dartx.filterUnits");
var $primitiveUnits = dartx.primitiveUnits = Symbol("dartx.primitiveUnits");
var $viewBox = dartx.viewBox = Symbol("dartx.viewBox");
var $numberOfItems = dartx.numberOfItems = Symbol("dartx.numberOfItems");
var $appendItem = dartx.appendItem = Symbol("dartx.appendItem");
var $getItem = dartx.getItem = Symbol("dartx.getItem");
var $initialize = dartx.initialize = Symbol("dartx.initialize");
var $insertItemBefore = dartx.insertItemBefore = Symbol("dartx.insertItemBefore");
var $removeItem = dartx.removeItem = Symbol("dartx.removeItem");
var $replaceItem = dartx.replaceItem = Symbol("dartx.replaceItem");
var $x1 = dartx.x1 = Symbol("dartx.x1");
var $x2 = dartx.x2 = Symbol("dartx.x2");
var $y1 = dartx.y1 = Symbol("dartx.y1");
var $y2 = dartx.y2 = Symbol("dartx.y2");
var $gradientTransform = dartx.gradientTransform = Symbol("dartx.gradientTransform");
var $gradientUnits = dartx.gradientUnits = Symbol("dartx.gradientUnits");
var $spreadMethod = dartx.spreadMethod = Symbol("dartx.spreadMethod");
var $markerHeight = dartx.markerHeight = Symbol("dartx.markerHeight");
var $markerUnits = dartx.markerUnits = Symbol("dartx.markerUnits");
var $markerWidth = dartx.markerWidth = Symbol("dartx.markerWidth");
var $orientAngle = dartx.orientAngle = Symbol("dartx.orientAngle");
var $orientType = dartx.orientType = Symbol("dartx.orientType");
var $refX = dartx.refX = Symbol("dartx.refX");
var $refY = dartx.refY = Symbol("dartx.refY");
var $setOrientToAngle = dartx.setOrientToAngle = Symbol("dartx.setOrientToAngle");
var $setOrientToAuto = dartx.setOrientToAuto = Symbol("dartx.setOrientToAuto");
var $maskContentUnits = dartx.maskContentUnits = Symbol("dartx.maskContentUnits");
var $maskUnits = dartx.maskUnits = Symbol("dartx.maskUnits");
var $scaleNonUniform = dartx.scaleNonUniform = Symbol("dartx.scaleNonUniform");
var $patternContentUnits = dartx.patternContentUnits = Symbol("dartx.patternContentUnits");
var $patternTransform = dartx.patternTransform = Symbol("dartx.patternTransform");
var $patternUnits = dartx.patternUnits = Symbol("dartx.patternUnits");
var $animatedPoints = dartx.animatedPoints = Symbol("dartx.animatedPoints");
var $points = dartx.points = Symbol("dartx.points");
var $meetOrSlice = dartx.meetOrSlice = Symbol("dartx.meetOrSlice");
var $fr = dartx.fr = Symbol("dartx.fr");
var $fx = dartx.fx = Symbol("dartx.fx");
var $fy = dartx.fy = Symbol("dartx.fy");
var $gradientOffset = dartx.gradientOffset = Symbol("dartx.gradientOffset");
var $currentScale = dartx.currentScale = Symbol("dartx.currentScale");
var $currentTranslate = dartx.currentTranslate = Symbol("dartx.currentTranslate");
var $animationsPaused = dartx.animationsPaused = Symbol("dartx.animationsPaused");
var $checkEnclosure = dartx.checkEnclosure = Symbol("dartx.checkEnclosure");
var $checkIntersection = dartx.checkIntersection = Symbol("dartx.checkIntersection");
var $createSvgAngle = dartx.createSvgAngle = Symbol("dartx.createSvgAngle");
var $createSvgLength = dartx.createSvgLength = Symbol("dartx.createSvgLength");
var $createSvgMatrix = dartx.createSvgMatrix = Symbol("dartx.createSvgMatrix");
var $createSvgNumber = dartx.createSvgNumber = Symbol("dartx.createSvgNumber");
var $createSvgPoint = dartx.createSvgPoint = Symbol("dartx.createSvgPoint");
var $createSvgRect = dartx.createSvgRect = Symbol("dartx.createSvgRect");
var $createSvgTransform = dartx.createSvgTransform = Symbol("dartx.createSvgTransform");
var $createSvgTransformFromMatrix = dartx.createSvgTransformFromMatrix = Symbol("dartx.createSvgTransformFromMatrix");
var $deselectAll = dartx.deselectAll = Symbol("dartx.deselectAll");
var $forceRedraw = dartx.forceRedraw = Symbol("dartx.forceRedraw");
var $getEnclosureList = dartx.getEnclosureList = Symbol("dartx.getEnclosureList");
var $getIntersectionList = dartx.getIntersectionList = Symbol("dartx.getIntersectionList");
var $pauseAnimations = dartx.pauseAnimations = Symbol("dartx.pauseAnimations");
var $setCurrentTime = dartx.setCurrentTime = Symbol("dartx.setCurrentTime");
var $suspendRedraw = dartx.suspendRedraw = Symbol("dartx.suspendRedraw");
var $unpauseAnimations = dartx.unpauseAnimations = Symbol("dartx.unpauseAnimations");
var $unsuspendRedraw = dartx.unsuspendRedraw = Symbol("dartx.unsuspendRedraw");
var $unsuspendRedrawAll = dartx.unsuspendRedrawAll = Symbol("dartx.unsuspendRedrawAll");
var $zoomAndPan = dartx.zoomAndPan = Symbol("dartx.zoomAndPan");
var $lengthAdjust = dartx.lengthAdjust = Symbol("dartx.lengthAdjust");
var $getCharNumAtPosition = dartx.getCharNumAtPosition = Symbol("dartx.getCharNumAtPosition");
var $getComputedTextLength = dartx.getComputedTextLength = Symbol("dartx.getComputedTextLength");
var $getEndPositionOfChar = dartx.getEndPositionOfChar = Symbol("dartx.getEndPositionOfChar");
var $getExtentOfChar = dartx.getExtentOfChar = Symbol("dartx.getExtentOfChar");
var $getNumberOfChars = dartx.getNumberOfChars = Symbol("dartx.getNumberOfChars");
var $getRotationOfChar = dartx.getRotationOfChar = Symbol("dartx.getRotationOfChar");
var $getStartPositionOfChar = dartx.getStartPositionOfChar = Symbol("dartx.getStartPositionOfChar");
var $getSubStringLength = dartx.getSubStringLength = Symbol("dartx.getSubStringLength");
var $selectSubString = dartx.selectSubString = Symbol("dartx.selectSubString");
var $spacing = dartx.spacing = Symbol("dartx.spacing");
var $setMatrix = dartx.setMatrix = Symbol("dartx.setMatrix");
var $setRotate = dartx.setRotate = Symbol("dartx.setRotate");
var $setScale = dartx.setScale = Symbol("dartx.setScale");
var $setSkewX = dartx.setSkewX = Symbol("dartx.setSkewX");
var $setSkewY = dartx.setSkewY = Symbol("dartx.setSkewY");
var $setTranslate = dartx.setTranslate = Symbol("dartx.setTranslate");
var $consolidate = dartx.consolidate = Symbol("dartx.consolidate");
var $fftSize = dartx.fftSize = Symbol("dartx.fftSize");
var $frequencyBinCount = dartx.frequencyBinCount = Symbol("dartx.frequencyBinCount");
var $maxDecibels = dartx.maxDecibels = Symbol("dartx.maxDecibels");
var $minDecibels = dartx.minDecibels = Symbol("dartx.minDecibels");
var $smoothingTimeConstant = dartx.smoothingTimeConstant = Symbol("dartx.smoothingTimeConstant");
var $getByteFrequencyData = dartx.getByteFrequencyData = Symbol("dartx.getByteFrequencyData");
var $getByteTimeDomainData = dartx.getByteTimeDomainData = Symbol("dartx.getByteTimeDomainData");
var $getFloatFrequencyData = dartx.getFloatFrequencyData = Symbol("dartx.getFloatFrequencyData");
var $getFloatTimeDomainData = dartx.getFloatTimeDomainData = Symbol("dartx.getFloatTimeDomainData");
var $channelCount = dartx.channelCount = Symbol("dartx.channelCount");
var $channelCountMode = dartx.channelCountMode = Symbol("dartx.channelCountMode");
var $channelInterpretation = dartx.channelInterpretation = Symbol("dartx.channelInterpretation");
var $context = dartx.context = Symbol("dartx.context");
var $numberOfInputs = dartx.numberOfInputs = Symbol("dartx.numberOfInputs");
var $numberOfOutputs = dartx.numberOfOutputs = Symbol("dartx.numberOfOutputs");
var $connectNode = dartx.connectNode = Symbol("dartx.connectNode");
var $connectParam = dartx.connectParam = Symbol("dartx.connectParam");
var $numberOfChannels = dartx.numberOfChannels = Symbol("dartx.numberOfChannels");
var $sampleRate = dartx.sampleRate = Symbol("dartx.sampleRate");
var $copyFromChannel = dartx.copyFromChannel = Symbol("dartx.copyFromChannel");
var $copyToChannel = dartx.copyToChannel = Symbol("dartx.copyToChannel");
var $getChannelData = dartx.getChannelData = Symbol("dartx.getChannelData");
var $detune = dartx.detune = Symbol("dartx.detune");
var $loopEnd = dartx.loopEnd = Symbol("dartx.loopEnd");
var $loopStart = dartx.loopStart = Symbol("dartx.loopStart");
var $start2 = dartx.start2 = Symbol("dartx.start2");
var $baseLatency = dartx.baseLatency = Symbol("dartx.baseLatency");
var $getOutputTimestamp = dartx.getOutputTimestamp = Symbol("dartx.getOutputTimestamp");
var $suspend = dartx.suspend = Symbol("dartx.suspend");
var $createGain = dartx.createGain = Symbol("dartx.createGain");
var $createScriptProcessor = dartx.createScriptProcessor = Symbol("dartx.createScriptProcessor");
var $decodeAudioData = dartx.decodeAudioData = Symbol("dartx.decodeAudioData");
var $destination = dartx.destination = Symbol("dartx.destination");
var $listener = dartx.listener = Symbol("dartx.listener");
var $createAnalyser = dartx.createAnalyser = Symbol("dartx.createAnalyser");
var $createBiquadFilter = dartx.createBiquadFilter = Symbol("dartx.createBiquadFilter");
var $createBuffer = dartx.createBuffer = Symbol("dartx.createBuffer");
var $createBufferSource = dartx.createBufferSource = Symbol("dartx.createBufferSource");
var $createChannelMerger = dartx.createChannelMerger = Symbol("dartx.createChannelMerger");
var $createChannelSplitter = dartx.createChannelSplitter = Symbol("dartx.createChannelSplitter");
var $createConstantSource = dartx.createConstantSource = Symbol("dartx.createConstantSource");
var $createConvolver = dartx.createConvolver = Symbol("dartx.createConvolver");
var $createDelay = dartx.createDelay = Symbol("dartx.createDelay");
var $createDynamicsCompressor = dartx.createDynamicsCompressor = Symbol("dartx.createDynamicsCompressor");
var $createIirFilter = dartx.createIirFilter = Symbol("dartx.createIirFilter");
var $createMediaElementSource = dartx.createMediaElementSource = Symbol("dartx.createMediaElementSource");
var $createMediaStreamDestination = dartx.createMediaStreamDestination = Symbol("dartx.createMediaStreamDestination");
var $createMediaStreamSource = dartx.createMediaStreamSource = Symbol("dartx.createMediaStreamSource");
var $createOscillator = dartx.createOscillator = Symbol("dartx.createOscillator");
var $createPanner = dartx.createPanner = Symbol("dartx.createPanner");
var $createPeriodicWave = dartx.createPeriodicWave = Symbol("dartx.createPeriodicWave");
var $createStereoPanner = dartx.createStereoPanner = Symbol("dartx.createStereoPanner");
var $createWaveShaper = dartx.createWaveShaper = Symbol("dartx.createWaveShaper");
var $maxChannelCount = dartx.maxChannelCount = Symbol("dartx.maxChannelCount");
var $forwardX = dartx.forwardX = Symbol("dartx.forwardX");
var $forwardY = dartx.forwardY = Symbol("dartx.forwardY");
var $forwardZ = dartx.forwardZ = Symbol("dartx.forwardZ");
var $positionZ = dartx.positionZ = Symbol("dartx.positionZ");
var $upX = dartx.upX = Symbol("dartx.upX");
var $upY = dartx.upY = Symbol("dartx.upY");
var $upZ = dartx.upZ = Symbol("dartx.upZ");
var $setOrientation = dartx.setOrientation = Symbol("dartx.setOrientation");
var $maxValue = dartx.maxValue = Symbol("dartx.maxValue");
var $minValue = dartx.minValue = Symbol("dartx.minValue");
var $cancelAndHoldAtTime = dartx.cancelAndHoldAtTime = Symbol("dartx.cancelAndHoldAtTime");
var $cancelScheduledValues = dartx.cancelScheduledValues = Symbol("dartx.cancelScheduledValues");
var $exponentialRampToValueAtTime = dartx.exponentialRampToValueAtTime = Symbol("dartx.exponentialRampToValueAtTime");
var $linearRampToValueAtTime = dartx.linearRampToValueAtTime = Symbol("dartx.linearRampToValueAtTime");
var $setTargetAtTime = dartx.setTargetAtTime = Symbol("dartx.setTargetAtTime");
var $setValueAtTime = dartx.setValueAtTime = Symbol("dartx.setValueAtTime");
var $setValueCurveAtTime = dartx.setValueCurveAtTime = Symbol("dartx.setValueCurveAtTime");
var $inputBuffer = dartx.inputBuffer = Symbol("dartx.inputBuffer");
var $outputBuffer = dartx.outputBuffer = Symbol("dartx.outputBuffer");
var $playbackTime = dartx.playbackTime = Symbol("dartx.playbackTime");
var $registerProcessor = dartx.registerProcessor = Symbol("dartx.registerProcessor");
var $parameters = dartx.parameters = Symbol("dartx.parameters");
var $Q = dartx.Q = Symbol("dartx.Q");
var $frequency = dartx.frequency = Symbol("dartx.frequency");
var $gain = dartx.gain = Symbol("dartx.gain");
var $getFrequencyResponse = dartx.getFrequencyResponse = Symbol("dartx.getFrequencyResponse");
var $normalize = dartx.normalize = Symbol("dartx.normalize");
var $delayTime = dartx.delayTime = Symbol("dartx.delayTime");
var $attack = dartx.attack = Symbol("dartx.attack");
var $knee = dartx.knee = Symbol("dartx.knee");
var $ratio = dartx.ratio = Symbol("dartx.ratio");
var $reduction = dartx.reduction = Symbol("dartx.reduction");
var $release = dartx.release = Symbol("dartx.release");
var $threshold = dartx.threshold = Symbol("dartx.threshold");
var $mediaElement = dartx.mediaElement = Symbol("dartx.mediaElement");
var $mediaStream = dartx.mediaStream = Symbol("dartx.mediaStream");
var $renderedBuffer = dartx.renderedBuffer = Symbol("dartx.renderedBuffer");
var $startRendering = dartx.startRendering = Symbol("dartx.startRendering");
var $suspendFor = dartx.suspendFor = Symbol("dartx.suspendFor");
var $setPeriodicWave = dartx.setPeriodicWave = Symbol("dartx.setPeriodicWave");
var $coneInnerAngle = dartx.coneInnerAngle = Symbol("dartx.coneInnerAngle");
var $coneOuterAngle = dartx.coneOuterAngle = Symbol("dartx.coneOuterAngle");
var $coneOuterGain = dartx.coneOuterGain = Symbol("dartx.coneOuterGain");
var $distanceModel = dartx.distanceModel = Symbol("dartx.distanceModel");
var $maxDistance = dartx.maxDistance = Symbol("dartx.maxDistance");
var $orientationX = dartx.orientationX = Symbol("dartx.orientationX");
var $orientationY = dartx.orientationY = Symbol("dartx.orientationY");
var $orientationZ = dartx.orientationZ = Symbol("dartx.orientationZ");
var $panningModel = dartx.panningModel = Symbol("dartx.panningModel");
var $refDistance = dartx.refDistance = Symbol("dartx.refDistance");
var $rolloffFactor = dartx.rolloffFactor = Symbol("dartx.rolloffFactor");
var $bufferSize = dartx.bufferSize = Symbol("dartx.bufferSize");
var $setEventListener = dartx.setEventListener = Symbol("dartx.setEventListener");
var $onAudioProcess = dartx.onAudioProcess = Symbol("dartx.onAudioProcess");
var $pan = dartx.pan = Symbol("dartx.pan");
var $curve = dartx.curve = Symbol("dartx.curve");
var $oversample = dartx.oversample = Symbol("dartx.oversample");
var $drawArraysInstancedAngle = dartx.drawArraysInstancedAngle = Symbol("dartx.drawArraysInstancedAngle");
var $drawElementsInstancedAngle = dartx.drawElementsInstancedAngle = Symbol("dartx.drawElementsInstancedAngle");
var $vertexAttribDivisorAngle = dartx.vertexAttribDivisorAngle = Symbol("dartx.vertexAttribDivisorAngle");
var $offscreenCanvas = dartx.offscreenCanvas = Symbol("dartx.offscreenCanvas");
var $statusMessage = dartx.statusMessage = Symbol("dartx.statusMessage");
var $getTranslatedShaderSource = dartx.getTranslatedShaderSource = Symbol("dartx.getTranslatedShaderSource");
var $drawBuffersWebgl = dartx.drawBuffersWebgl = Symbol("dartx.drawBuffersWebgl");
var $beginQueryExt = dartx.beginQueryExt = Symbol("dartx.beginQueryExt");
var $createQueryExt = dartx.createQueryExt = Symbol("dartx.createQueryExt");
var $deleteQueryExt = dartx.deleteQueryExt = Symbol("dartx.deleteQueryExt");
var $endQueryExt = dartx.endQueryExt = Symbol("dartx.endQueryExt");
var $getQueryExt = dartx.getQueryExt = Symbol("dartx.getQueryExt");
var $getQueryObjectExt = dartx.getQueryObjectExt = Symbol("dartx.getQueryObjectExt");
var $isQueryExt = dartx.isQueryExt = Symbol("dartx.isQueryExt");
var $queryCounterExt = dartx.queryCounterExt = Symbol("dartx.queryCounterExt");
var $getBufferSubDataAsync = dartx.getBufferSubDataAsync = Symbol("dartx.getBufferSubDataAsync");
var $loseContext = dartx.loseContext = Symbol("dartx.loseContext");
var $restoreContext = dartx.restoreContext = Symbol("dartx.restoreContext");
var $bindVertexArray = dartx.bindVertexArray = Symbol("dartx.bindVertexArray");
var $createVertexArray = dartx.createVertexArray = Symbol("dartx.createVertexArray");
var $deleteVertexArray = dartx.deleteVertexArray = Symbol("dartx.deleteVertexArray");
var $isVertexArray = dartx.isVertexArray = Symbol("dartx.isVertexArray");
var $drawingBufferHeight = dartx.drawingBufferHeight = Symbol("dartx.drawingBufferHeight");
var $drawingBufferWidth = dartx.drawingBufferWidth = Symbol("dartx.drawingBufferWidth");
var $activeTexture = dartx.activeTexture = Symbol("dartx.activeTexture");
var $attachShader = dartx.attachShader = Symbol("dartx.attachShader");
var $bindAttribLocation = dartx.bindAttribLocation = Symbol("dartx.bindAttribLocation");
var $bindBuffer = dartx.bindBuffer = Symbol("dartx.bindBuffer");
var $bindFramebuffer = dartx.bindFramebuffer = Symbol("dartx.bindFramebuffer");
var $bindRenderbuffer = dartx.bindRenderbuffer = Symbol("dartx.bindRenderbuffer");
var $bindTexture = dartx.bindTexture = Symbol("dartx.bindTexture");
var $blendColor = dartx.blendColor = Symbol("dartx.blendColor");
var $blendEquation = dartx.blendEquation = Symbol("dartx.blendEquation");
var $blendEquationSeparate = dartx.blendEquationSeparate = Symbol("dartx.blendEquationSeparate");
var $blendFunc = dartx.blendFunc = Symbol("dartx.blendFunc");
var $blendFuncSeparate = dartx.blendFuncSeparate = Symbol("dartx.blendFuncSeparate");
var $bufferData = dartx.bufferData = Symbol("dartx.bufferData");
var $bufferSubData = dartx.bufferSubData = Symbol("dartx.bufferSubData");
var $checkFramebufferStatus = dartx.checkFramebufferStatus = Symbol("dartx.checkFramebufferStatus");
var $clearColor = dartx.clearColor = Symbol("dartx.clearColor");
var $clearDepth = dartx.clearDepth = Symbol("dartx.clearDepth");
var $clearStencil = dartx.clearStencil = Symbol("dartx.clearStencil");
var $colorMask = dartx.colorMask = Symbol("dartx.colorMask");
var $compileShader = dartx.compileShader = Symbol("dartx.compileShader");
var $compressedTexImage2D = dartx.compressedTexImage2D = Symbol("dartx.compressedTexImage2D");
var $compressedTexSubImage2D = dartx.compressedTexSubImage2D = Symbol("dartx.compressedTexSubImage2D");
var $copyTexImage2D = dartx.copyTexImage2D = Symbol("dartx.copyTexImage2D");
var $copyTexSubImage2D = dartx.copyTexSubImage2D = Symbol("dartx.copyTexSubImage2D");
var $createFramebuffer = dartx.createFramebuffer = Symbol("dartx.createFramebuffer");
var $createProgram = dartx.createProgram = Symbol("dartx.createProgram");
var $createRenderbuffer = dartx.createRenderbuffer = Symbol("dartx.createRenderbuffer");
var $createShader = dartx.createShader = Symbol("dartx.createShader");
var $createTexture = dartx.createTexture = Symbol("dartx.createTexture");
var $cullFace = dartx.cullFace = Symbol("dartx.cullFace");
var $deleteBuffer = dartx.deleteBuffer = Symbol("dartx.deleteBuffer");
var $deleteFramebuffer = dartx.deleteFramebuffer = Symbol("dartx.deleteFramebuffer");
var $deleteProgram = dartx.deleteProgram = Symbol("dartx.deleteProgram");
var $deleteRenderbuffer = dartx.deleteRenderbuffer = Symbol("dartx.deleteRenderbuffer");
var $deleteShader = dartx.deleteShader = Symbol("dartx.deleteShader");
var $deleteTexture = dartx.deleteTexture = Symbol("dartx.deleteTexture");
var $depthFunc = dartx.depthFunc = Symbol("dartx.depthFunc");
var $depthMask = dartx.depthMask = Symbol("dartx.depthMask");
var $depthRange = dartx.depthRange = Symbol("dartx.depthRange");
var $detachShader = dartx.detachShader = Symbol("dartx.detachShader");
var $disableVertexAttribArray = dartx.disableVertexAttribArray = Symbol("dartx.disableVertexAttribArray");
var $drawArrays = dartx.drawArrays = Symbol("dartx.drawArrays");
var $drawElements = dartx.drawElements = Symbol("dartx.drawElements");
var $enableVertexAttribArray = dartx.enableVertexAttribArray = Symbol("dartx.enableVertexAttribArray");
var $flush = dartx.flush = Symbol("dartx.flush");
var $framebufferRenderbuffer = dartx.framebufferRenderbuffer = Symbol("dartx.framebufferRenderbuffer");
var $framebufferTexture2D = dartx.framebufferTexture2D = Symbol("dartx.framebufferTexture2D");
var $frontFace = dartx.frontFace = Symbol("dartx.frontFace");
var $generateMipmap = dartx.generateMipmap = Symbol("dartx.generateMipmap");
var $getActiveAttrib = dartx.getActiveAttrib = Symbol("dartx.getActiveAttrib");
var $getActiveUniform = dartx.getActiveUniform = Symbol("dartx.getActiveUniform");
var $getAttachedShaders = dartx.getAttachedShaders = Symbol("dartx.getAttachedShaders");
var $getAttribLocation = dartx.getAttribLocation = Symbol("dartx.getAttribLocation");
var $getBufferParameter = dartx.getBufferParameter = Symbol("dartx.getBufferParameter");
var $getError = dartx.getError = Symbol("dartx.getError");
var $getExtension = dartx.getExtension = Symbol("dartx.getExtension");
var $getFramebufferAttachmentParameter = dartx.getFramebufferAttachmentParameter = Symbol("dartx.getFramebufferAttachmentParameter");
var $getProgramInfoLog = dartx.getProgramInfoLog = Symbol("dartx.getProgramInfoLog");
var $getProgramParameter = dartx.getProgramParameter = Symbol("dartx.getProgramParameter");
var $getRenderbufferParameter = dartx.getRenderbufferParameter = Symbol("dartx.getRenderbufferParameter");
var $getShaderInfoLog = dartx.getShaderInfoLog = Symbol("dartx.getShaderInfoLog");
var $getShaderParameter = dartx.getShaderParameter = Symbol("dartx.getShaderParameter");
var $getShaderPrecisionFormat = dartx.getShaderPrecisionFormat = Symbol("dartx.getShaderPrecisionFormat");
var $getShaderSource = dartx.getShaderSource = Symbol("dartx.getShaderSource");
var $getSupportedExtensions = dartx.getSupportedExtensions = Symbol("dartx.getSupportedExtensions");
var $getTexParameter = dartx.getTexParameter = Symbol("dartx.getTexParameter");
var $getUniform = dartx.getUniform = Symbol("dartx.getUniform");
var $getUniformLocation = dartx.getUniformLocation = Symbol("dartx.getUniformLocation");
var $getVertexAttrib = dartx.getVertexAttrib = Symbol("dartx.getVertexAttrib");
var $getVertexAttribOffset = dartx.getVertexAttribOffset = Symbol("dartx.getVertexAttribOffset");
var $hint = dartx.hint = Symbol("dartx.hint");
var $isBuffer = dartx.isBuffer = Symbol("dartx.isBuffer");
var $isEnabled = dartx.isEnabled = Symbol("dartx.isEnabled");
var $isFramebuffer = dartx.isFramebuffer = Symbol("dartx.isFramebuffer");
var $isProgram = dartx.isProgram = Symbol("dartx.isProgram");
var $isRenderbuffer = dartx.isRenderbuffer = Symbol("dartx.isRenderbuffer");
var $isShader = dartx.isShader = Symbol("dartx.isShader");
var $isTexture = dartx.isTexture = Symbol("dartx.isTexture");
var $linkProgram = dartx.linkProgram = Symbol("dartx.linkProgram");
var $pixelStorei = dartx.pixelStorei = Symbol("dartx.pixelStorei");
var $polygonOffset = dartx.polygonOffset = Symbol("dartx.polygonOffset");
var $renderbufferStorage = dartx.renderbufferStorage = Symbol("dartx.renderbufferStorage");
var $sampleCoverage = dartx.sampleCoverage = Symbol("dartx.sampleCoverage");
var $scissor = dartx.scissor = Symbol("dartx.scissor");
var $shaderSource = dartx.shaderSource = Symbol("dartx.shaderSource");
var $stencilFunc = dartx.stencilFunc = Symbol("dartx.stencilFunc");
var $stencilFuncSeparate = dartx.stencilFuncSeparate = Symbol("dartx.stencilFuncSeparate");
var $stencilMask = dartx.stencilMask = Symbol("dartx.stencilMask");
var $stencilMaskSeparate = dartx.stencilMaskSeparate = Symbol("dartx.stencilMaskSeparate");
var $stencilOp = dartx.stencilOp = Symbol("dartx.stencilOp");
var $stencilOpSeparate = dartx.stencilOpSeparate = Symbol("dartx.stencilOpSeparate");
var $texImage2D = dartx.texImage2D = Symbol("dartx.texImage2D");
var $texParameterf = dartx.texParameterf = Symbol("dartx.texParameterf");
var $texParameteri = dartx.texParameteri = Symbol("dartx.texParameteri");
var $texSubImage2D = dartx.texSubImage2D = Symbol("dartx.texSubImage2D");
var $uniform1f = dartx.uniform1f = Symbol("dartx.uniform1f");
var $uniform1fv = dartx.uniform1fv = Symbol("dartx.uniform1fv");
var $uniform1i = dartx.uniform1i = Symbol("dartx.uniform1i");
var $uniform1iv = dartx.uniform1iv = Symbol("dartx.uniform1iv");
var $uniform2f = dartx.uniform2f = Symbol("dartx.uniform2f");
var $uniform2fv = dartx.uniform2fv = Symbol("dartx.uniform2fv");
var $uniform2i = dartx.uniform2i = Symbol("dartx.uniform2i");
var $uniform2iv = dartx.uniform2iv = Symbol("dartx.uniform2iv");
var $uniform3f = dartx.uniform3f = Symbol("dartx.uniform3f");
var $uniform3fv = dartx.uniform3fv = Symbol("dartx.uniform3fv");
var $uniform3i = dartx.uniform3i = Symbol("dartx.uniform3i");
var $uniform3iv = dartx.uniform3iv = Symbol("dartx.uniform3iv");
var $uniform4f = dartx.uniform4f = Symbol("dartx.uniform4f");
var $uniform4fv = dartx.uniform4fv = Symbol("dartx.uniform4fv");
var $uniform4i = dartx.uniform4i = Symbol("dartx.uniform4i");
var $uniform4iv = dartx.uniform4iv = Symbol("dartx.uniform4iv");
var $uniformMatrix2fv = dartx.uniformMatrix2fv = Symbol("dartx.uniformMatrix2fv");
var $uniformMatrix3fv = dartx.uniformMatrix3fv = Symbol("dartx.uniformMatrix3fv");
var $uniformMatrix4fv = dartx.uniformMatrix4fv = Symbol("dartx.uniformMatrix4fv");
var $useProgram = dartx.useProgram = Symbol("dartx.useProgram");
var $validateProgram = dartx.validateProgram = Symbol("dartx.validateProgram");
var $vertexAttrib1f = dartx.vertexAttrib1f = Symbol("dartx.vertexAttrib1f");
var $vertexAttrib1fv = dartx.vertexAttrib1fv = Symbol("dartx.vertexAttrib1fv");
var $vertexAttrib2f = dartx.vertexAttrib2f = Symbol("dartx.vertexAttrib2f");
var $vertexAttrib2fv = dartx.vertexAttrib2fv = Symbol("dartx.vertexAttrib2fv");
var $vertexAttrib3f = dartx.vertexAttrib3f = Symbol("dartx.vertexAttrib3f");
var $vertexAttrib3fv = dartx.vertexAttrib3fv = Symbol("dartx.vertexAttrib3fv");
var $vertexAttrib4f = dartx.vertexAttrib4f = Symbol("dartx.vertexAttrib4f");
var $vertexAttrib4fv = dartx.vertexAttrib4fv = Symbol("dartx.vertexAttrib4fv");
var $vertexAttribPointer = dartx.vertexAttribPointer = Symbol("dartx.vertexAttribPointer");
var $viewport = dartx.viewport = Symbol("dartx.viewport");
var $readPixels = dartx.readPixels = Symbol("dartx.readPixels");
var $texImage2DUntyped = dartx.texImage2DUntyped = Symbol("dartx.texImage2DUntyped");
var $texImage2DTyped = dartx.texImage2DTyped = Symbol("dartx.texImage2DTyped");
var $texSubImage2DUntyped = dartx.texSubImage2DUntyped = Symbol("dartx.texSubImage2DUntyped");
var $texSubImage2DTyped = dartx.texSubImage2DTyped = Symbol("dartx.texSubImage2DTyped");
var $bufferDataTyped = dartx.bufferDataTyped = Symbol("dartx.bufferDataTyped");
var $bufferSubDataTyped = dartx.bufferSubDataTyped = Symbol("dartx.bufferSubDataTyped");
var $beginQuery = dartx.beginQuery = Symbol("dartx.beginQuery");
var $beginTransformFeedback = dartx.beginTransformFeedback = Symbol("dartx.beginTransformFeedback");
var $bindBufferBase = dartx.bindBufferBase = Symbol("dartx.bindBufferBase");
var $bindBufferRange = dartx.bindBufferRange = Symbol("dartx.bindBufferRange");
var $bindSampler = dartx.bindSampler = Symbol("dartx.bindSampler");
var $bindTransformFeedback = dartx.bindTransformFeedback = Symbol("dartx.bindTransformFeedback");
var $blitFramebuffer = dartx.blitFramebuffer = Symbol("dartx.blitFramebuffer");
var $bufferData2 = dartx.bufferData2 = Symbol("dartx.bufferData2");
var $bufferSubData2 = dartx.bufferSubData2 = Symbol("dartx.bufferSubData2");
var $clearBufferfi = dartx.clearBufferfi = Symbol("dartx.clearBufferfi");
var $clearBufferfv = dartx.clearBufferfv = Symbol("dartx.clearBufferfv");
var $clearBufferiv = dartx.clearBufferiv = Symbol("dartx.clearBufferiv");
var $clearBufferuiv = dartx.clearBufferuiv = Symbol("dartx.clearBufferuiv");
var $clientWaitSync = dartx.clientWaitSync = Symbol("dartx.clientWaitSync");
var $compressedTexImage2D2 = dartx.compressedTexImage2D2 = Symbol("dartx.compressedTexImage2D2");
var $compressedTexImage2D3 = dartx.compressedTexImage2D3 = Symbol("dartx.compressedTexImage2D3");
var $compressedTexImage3D = dartx.compressedTexImage3D = Symbol("dartx.compressedTexImage3D");
var $compressedTexImage3D2 = dartx.compressedTexImage3D2 = Symbol("dartx.compressedTexImage3D2");
var $compressedTexSubImage2D2 = dartx.compressedTexSubImage2D2 = Symbol("dartx.compressedTexSubImage2D2");
var $compressedTexSubImage2D3 = dartx.compressedTexSubImage2D3 = Symbol("dartx.compressedTexSubImage2D3");
var $compressedTexSubImage3D = dartx.compressedTexSubImage3D = Symbol("dartx.compressedTexSubImage3D");
var $compressedTexSubImage3D2 = dartx.compressedTexSubImage3D2 = Symbol("dartx.compressedTexSubImage3D2");
var $copyBufferSubData = dartx.copyBufferSubData = Symbol("dartx.copyBufferSubData");
var $copyTexSubImage3D = dartx.copyTexSubImage3D = Symbol("dartx.copyTexSubImage3D");
var $createQuery = dartx.createQuery = Symbol("dartx.createQuery");
var $createSampler = dartx.createSampler = Symbol("dartx.createSampler");
var $createTransformFeedback = dartx.createTransformFeedback = Symbol("dartx.createTransformFeedback");
var $deleteQuery = dartx.deleteQuery = Symbol("dartx.deleteQuery");
var $deleteSampler = dartx.deleteSampler = Symbol("dartx.deleteSampler");
var $deleteSync = dartx.deleteSync = Symbol("dartx.deleteSync");
var $deleteTransformFeedback = dartx.deleteTransformFeedback = Symbol("dartx.deleteTransformFeedback");
var $drawArraysInstanced = dartx.drawArraysInstanced = Symbol("dartx.drawArraysInstanced");
var $drawBuffers = dartx.drawBuffers = Symbol("dartx.drawBuffers");
var $drawElementsInstanced = dartx.drawElementsInstanced = Symbol("dartx.drawElementsInstanced");
var $drawRangeElements = dartx.drawRangeElements = Symbol("dartx.drawRangeElements");
var $endQuery = dartx.endQuery = Symbol("dartx.endQuery");
var $endTransformFeedback = dartx.endTransformFeedback = Symbol("dartx.endTransformFeedback");
var $fenceSync = dartx.fenceSync = Symbol("dartx.fenceSync");
var $framebufferTextureLayer = dartx.framebufferTextureLayer = Symbol("dartx.framebufferTextureLayer");
var $getActiveUniformBlockName = dartx.getActiveUniformBlockName = Symbol("dartx.getActiveUniformBlockName");
var $getActiveUniformBlockParameter = dartx.getActiveUniformBlockParameter = Symbol("dartx.getActiveUniformBlockParameter");
var $getActiveUniforms = dartx.getActiveUniforms = Symbol("dartx.getActiveUniforms");
var $getBufferSubData = dartx.getBufferSubData = Symbol("dartx.getBufferSubData");
var $getFragDataLocation = dartx.getFragDataLocation = Symbol("dartx.getFragDataLocation");
var $getIndexedParameter = dartx.getIndexedParameter = Symbol("dartx.getIndexedParameter");
var $getInternalformatParameter = dartx.getInternalformatParameter = Symbol("dartx.getInternalformatParameter");
var $getQuery = dartx.getQuery = Symbol("dartx.getQuery");
var $getQueryParameter = dartx.getQueryParameter = Symbol("dartx.getQueryParameter");
var $getSamplerParameter = dartx.getSamplerParameter = Symbol("dartx.getSamplerParameter");
var $getSyncParameter = dartx.getSyncParameter = Symbol("dartx.getSyncParameter");
var $getTransformFeedbackVarying = dartx.getTransformFeedbackVarying = Symbol("dartx.getTransformFeedbackVarying");
var $getUniformBlockIndex = dartx.getUniformBlockIndex = Symbol("dartx.getUniformBlockIndex");
var $getUniformIndices = dartx.getUniformIndices = Symbol("dartx.getUniformIndices");
var $invalidateFramebuffer = dartx.invalidateFramebuffer = Symbol("dartx.invalidateFramebuffer");
var $invalidateSubFramebuffer = dartx.invalidateSubFramebuffer = Symbol("dartx.invalidateSubFramebuffer");
var $isQuery = dartx.isQuery = Symbol("dartx.isQuery");
var $isSampler = dartx.isSampler = Symbol("dartx.isSampler");
var $isSync = dartx.isSync = Symbol("dartx.isSync");
var $isTransformFeedback = dartx.isTransformFeedback = Symbol("dartx.isTransformFeedback");
var $pauseTransformFeedback = dartx.pauseTransformFeedback = Symbol("dartx.pauseTransformFeedback");
var $readBuffer = dartx.readBuffer = Symbol("dartx.readBuffer");
var $readPixels2 = dartx.readPixels2 = Symbol("dartx.readPixels2");
var $renderbufferStorageMultisample = dartx.renderbufferStorageMultisample = Symbol("dartx.renderbufferStorageMultisample");
var $resumeTransformFeedback = dartx.resumeTransformFeedback = Symbol("dartx.resumeTransformFeedback");
var $samplerParameterf = dartx.samplerParameterf = Symbol("dartx.samplerParameterf");
var $samplerParameteri = dartx.samplerParameteri = Symbol("dartx.samplerParameteri");
var $texImage2D2 = dartx.texImage2D2 = Symbol("dartx.texImage2D2");
var $texImage3D = dartx.texImage3D = Symbol("dartx.texImage3D");
var $texStorage2D = dartx.texStorage2D = Symbol("dartx.texStorage2D");
var $texStorage3D = dartx.texStorage3D = Symbol("dartx.texStorage3D");
var $texSubImage2D2 = dartx.texSubImage2D2 = Symbol("dartx.texSubImage2D2");
var $texSubImage3D = dartx.texSubImage3D = Symbol("dartx.texSubImage3D");
var $transformFeedbackVaryings = dartx.transformFeedbackVaryings = Symbol("dartx.transformFeedbackVaryings");
var $uniform1fv2 = dartx.uniform1fv2 = Symbol("dartx.uniform1fv2");
var $uniform1iv2 = dartx.uniform1iv2 = Symbol("dartx.uniform1iv2");
var $uniform1ui = dartx.uniform1ui = Symbol("dartx.uniform1ui");
var $uniform1uiv = dartx.uniform1uiv = Symbol("dartx.uniform1uiv");
var $uniform2fv2 = dartx.uniform2fv2 = Symbol("dartx.uniform2fv2");
var $uniform2iv2 = dartx.uniform2iv2 = Symbol("dartx.uniform2iv2");
var $uniform2ui = dartx.uniform2ui = Symbol("dartx.uniform2ui");
var $uniform2uiv = dartx.uniform2uiv = Symbol("dartx.uniform2uiv");
var $uniform3fv2 = dartx.uniform3fv2 = Symbol("dartx.uniform3fv2");
var $uniform3iv2 = dartx.uniform3iv2 = Symbol("dartx.uniform3iv2");
var $uniform3ui = dartx.uniform3ui = Symbol("dartx.uniform3ui");
var $uniform3uiv = dartx.uniform3uiv = Symbol("dartx.uniform3uiv");
var $uniform4fv2 = dartx.uniform4fv2 = Symbol("dartx.uniform4fv2");
var $uniform4iv2 = dartx.uniform4iv2 = Symbol("dartx.uniform4iv2");
var $uniform4ui = dartx.uniform4ui = Symbol("dartx.uniform4ui");
var $uniform4uiv = dartx.uniform4uiv = Symbol("dartx.uniform4uiv");
var $uniformBlockBinding = dartx.uniformBlockBinding = Symbol("dartx.uniformBlockBinding");
var $uniformMatrix2fv2 = dartx.uniformMatrix2fv2 = Symbol("dartx.uniformMatrix2fv2");
var $uniformMatrix2x3fv = dartx.uniformMatrix2x3fv = Symbol("dartx.uniformMatrix2x3fv");
var $uniformMatrix2x4fv = dartx.uniformMatrix2x4fv = Symbol("dartx.uniformMatrix2x4fv");
var $uniformMatrix3fv2 = dartx.uniformMatrix3fv2 = Symbol("dartx.uniformMatrix3fv2");
var $uniformMatrix3x2fv = dartx.uniformMatrix3x2fv = Symbol("dartx.uniformMatrix3x2fv");
var $uniformMatrix3x4fv = dartx.uniformMatrix3x4fv = Symbol("dartx.uniformMatrix3x4fv");
var $uniformMatrix4fv2 = dartx.uniformMatrix4fv2 = Symbol("dartx.uniformMatrix4fv2");
var $uniformMatrix4x2fv = dartx.uniformMatrix4x2fv = Symbol("dartx.uniformMatrix4x2fv");
var $uniformMatrix4x3fv = dartx.uniformMatrix4x3fv = Symbol("dartx.uniformMatrix4x3fv");
var $vertexAttribDivisor = dartx.vertexAttribDivisor = Symbol("dartx.vertexAttribDivisor");
var $vertexAttribI4i = dartx.vertexAttribI4i = Symbol("dartx.vertexAttribI4i");
var $vertexAttribI4iv = dartx.vertexAttribI4iv = Symbol("dartx.vertexAttribI4iv");
var $vertexAttribI4ui = dartx.vertexAttribI4ui = Symbol("dartx.vertexAttribI4ui");
var $vertexAttribI4uiv = dartx.vertexAttribI4uiv = Symbol("dartx.vertexAttribI4uiv");
var $vertexAttribIPointer = dartx.vertexAttribIPointer = Symbol("dartx.vertexAttribIPointer");
var $waitSync = dartx.waitSync = Symbol("dartx.waitSync");
var $precision = dartx.precision = Symbol("dartx.precision");
var $rangeMax = dartx.rangeMax = Symbol("dartx.rangeMax");
var $rangeMin = dartx.rangeMin = Symbol("dartx.rangeMin");
var $lastUploadedVideoFrameWasSkipped = dartx.lastUploadedVideoFrameWasSkipped = Symbol("dartx.lastUploadedVideoFrameWasSkipped");
var $lastUploadedVideoHeight = dartx.lastUploadedVideoHeight = Symbol("dartx.lastUploadedVideoHeight");
var $lastUploadedVideoTimestamp = dartx.lastUploadedVideoTimestamp = Symbol("dartx.lastUploadedVideoTimestamp");
var $lastUploadedVideoWidth = dartx.lastUploadedVideoWidth = Symbol("dartx.lastUploadedVideoWidth");
var $changeVersion = dartx.changeVersion = Symbol("dartx.changeVersion");
var $readTransaction = dartx.readTransaction = Symbol("dartx.readTransaction");
var $transaction_future = dartx.transaction_future = Symbol("dartx.transaction_future");
var $insertId = dartx.insertId = Symbol("dartx.insertId");
var $rowsAffected = dartx.rowsAffected = Symbol("dartx.rowsAffected");
var $executeSql = dartx.executeSql = Symbol("dartx.executeSql");
var ObjectN = () => (ObjectN = dart.constFn(dart.nullable(core.Object)))();
var ListOfObjectN = () => (ListOfObjectN = dart.constFn(core.List$(ObjectN())))();
var boolN = () => (boolN = dart.constFn(dart.nullable(core.bool)))();
var JSArrayOfString = () => (JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))();
var IdentityMapOfString$ObjectN = () => (IdentityMapOfString$ObjectN = dart.constFn(_js_helper.IdentityMap$(core.String, ObjectN())))();
var ListOfString = () => (ListOfString = dart.constFn(core.List$(core.String)))();
var ListNOfString = () => (ListNOfString = dart.constFn(dart.nullable(ListOfString())))();
var IdentityMapOfString$ListNOfString = () => (IdentityMapOfString$ListNOfString = dart.constFn(_js_helper.IdentityMap$(core.String, ListNOfString())))();
var JSArrayOfTypeVariable = () => (JSArrayOfTypeVariable = dart.constFn(_interceptors.JSArray$(dart.TypeVariable)))();
var ExpandoOfFunction = () => (ExpandoOfFunction = dart.constFn(core.Expando$(core.Function)))();
var IdentityMapOfString$Object = () => (IdentityMapOfString$Object = dart.constFn(_js_helper.IdentityMap$(core.String, core.Object)))();
var ListOfObject = () => (ListOfObject = dart.constFn(core.List$(core.Object)))();
var IdentityMapOfTypeVariable$int = () => (IdentityMapOfTypeVariable$int = dart.constFn(_js_helper.IdentityMap$(dart.TypeVariable, core.int)))();
var IdentityMapOfTypeVariable$Object = () => (IdentityMapOfTypeVariable$Object = dart.constFn(_js_helper.IdentityMap$(dart.TypeVariable, core.Object)))();
var LinkedHashMapOfTypeVariable$TypeConstraint = () => (LinkedHashMapOfTypeVariable$TypeConstraint = dart.constFn(collection.LinkedHashMap$(dart.TypeVariable, dart.TypeConstraint)))();
var JSArrayOfObject = () => (JSArrayOfObject = dart.constFn(_interceptors.JSArray$(core.Object)))();
var ListOfType = () => (ListOfType = dart.constFn(core.List$(core.Type)))();
var SymbolL = () => (SymbolL = dart.constFn(dart.legacy(core.Symbol)))();
var MapOfSymbol$dynamic = () => (MapOfSymbol$dynamic = dart.constFn(core.Map$(core.Symbol, dart.dynamic)))();
var TypeL = () => (TypeL = dart.constFn(dart.legacy(core.Type)))();
var JSArrayOfNameValuePair = () => (JSArrayOfNameValuePair = dart.constFn(_interceptors.JSArray$(_debugger.NameValuePair)))();
var intAnddynamicToNullN = () => (intAnddynamicToNullN = dart.constFn(dart.fnType(core.Null, [core.int, dart.dynamic])))();
var JSArrayOfFormatter = () => (JSArrayOfFormatter = dart.constFn(_interceptors.JSArray$(_debugger.Formatter)))();
var _HashSetOfNameValuePair = () => (_HashSetOfNameValuePair = dart.constFn(collection._HashSet$(_debugger.NameValuePair)))();
var IdentityMapOfString$String = () => (IdentityMapOfString$String = dart.constFn(_js_helper.IdentityMap$(core.String, core.String)))();
var dynamicAnddynamicToNullN = () => (dynamicAnddynamicToNullN = dart.constFn(dart.fnType(core.Null, [dart.dynamic, dart.dynamic])))();
var dynamicToString = () => (dynamicToString = dart.constFn(dart.fnType(core.String, [dart.dynamic])))();
var ListOfNameValuePair = () => (ListOfNameValuePair = dart.constFn(core.List$(_debugger.NameValuePair)))();
var StringTobool = () => (StringTobool = dart.constFn(dart.fnType(core.bool, [core.String])))();
var VoidToString = () => (VoidToString = dart.constFn(dart.fnType(core.String, [])))();
var StringToNameValuePair = () => (StringToNameValuePair = dart.constFn(dart.fnType(_debugger.NameValuePair, [core.String])))();
var NameValuePairAndNameValuePairToint = () => (NameValuePairAndNameValuePairToint = dart.constFn(dart.fnType(core.int, [_debugger.NameValuePair, _debugger.NameValuePair])))();
var LinkedHashMapOfdynamic$Object = () => (LinkedHashMapOfdynamic$Object = dart.constFn(collection.LinkedHashMap$(dart.dynamic, core.Object)))();
var dynamicTodynamic = () => (dynamicTodynamic = dart.constFn(dart.fnType(dart.dynamic, [dart.dynamic])))();
var dynamicToObject = () => (dynamicToObject = dart.constFn(dart.fnType(core.Object, [dart.dynamic])))();
var IdentityMapOfString$_MethodStats = () => (IdentityMapOfString$_MethodStats = dart.constFn(_js_helper.IdentityMap$(core.String, _debugger._MethodStats)))();
var StringToString = () => (StringToString = dart.constFn(dart.fnType(core.String, [core.String])))();
var VoidTo_MethodStats = () => (VoidTo_MethodStats = dart.constFn(dart.fnType(_debugger._MethodStats, [])))();
var StringAndStringToint = () => (StringAndStringToint = dart.constFn(dart.fnType(core.int, [core.String, core.String])))();
var JSArrayOfListOfObject = () => (JSArrayOfListOfObject = dart.constFn(_interceptors.JSArray$(ListOfObject())))();
var JSArrayOf_CallMethodRecord = () => (JSArrayOf_CallMethodRecord = dart.constFn(_interceptors.JSArray$(_debugger._CallMethodRecord)))();
var ListN = () => (ListN = dart.constFn(dart.nullable(core.List)))();
var InvocationN = () => (InvocationN = dart.constFn(dart.nullable(core.Invocation)))();
var MapNOfSymbol$dynamic = () => (MapNOfSymbol$dynamic = dart.constFn(dart.nullable(MapOfSymbol$dynamic())))();
var ObjectNAndObjectNToint = () => (ObjectNAndObjectNToint = dart.constFn(dart.fnType(core.int, [ObjectN(), ObjectN()])))();
var dynamicAnddynamicToint = () => (dynamicAnddynamicToint = dart.constFn(dart.fnType(core.int, [dart.dynamic, dart.dynamic])))();
var ObjectAndStackTraceTovoid = () => (ObjectAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, core.StackTrace])))();
var dynamicTovoid = () => (dynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic])))();
var _FutureOfNullN = () => (_FutureOfNullN = dart.constFn(async._Future$(core.Null)))();
var VoidTo_FutureOfNullN = () => (VoidTo_FutureOfNullN = dart.constFn(dart.fnType(_FutureOfNullN(), [])))();
var VoidToNullN = () => (VoidToNullN = dart.constFn(dart.fnType(core.Null, [])))();
var FutureOfNullN = () => (FutureOfNullN = dart.constFn(async.Future$(core.Null)))();
var FutureNOfNullN = () => (FutureNOfNullN = dart.constFn(dart.nullable(FutureOfNullN())))();
var dynamicToFuture = () => (dynamicToFuture = dart.constFn(dart.fnType(async.Future, [dart.dynamic])))();
var _FutureOfString = () => (_FutureOfString = dart.constFn(async._Future$(core.String)))();
var _FutureOfbool = () => (_FutureOfbool = dart.constFn(async._Future$(core.bool)))();
var VoidTobool = () => (VoidTobool = dart.constFn(dart.fnType(core.bool, [])))();
var boolToNullN = () => (boolToNullN = dart.constFn(dart.fnType(core.Null, [core.bool])))();
var VoidTovoid = () => (VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))();
var voidToNullN = () => (voidToNullN = dart.constFn(dart.fnType(core.Null, [dart.void])))();
var _FutureOfint = () => (_FutureOfint = dart.constFn(async._Future$(core.int)))();
var ObjectAndStackTraceToNullN = () => (ObjectAndStackTraceToNullN = dart.constFn(dart.fnType(core.Null, [core.Object, core.StackTrace])))();
var FutureOfvoid = () => (FutureOfvoid = dart.constFn(async.Future$(dart.void)))();
var VoidToFutureOfvoid = () => (VoidToFutureOfvoid = dart.constFn(dart.fnType(FutureOfvoid(), [])))();
var ObjectTovoid = () => (ObjectTovoid = dart.constFn(dart.fnType(dart.void, [core.Object])))();
var EventSinkTo_ConverterStreamEventSink = () => (EventSinkTo_ConverterStreamEventSink = dart.constFn(dart.fnType(convert._ConverterStreamEventSink, [async.EventSink])))();
var JSArrayOfUint8List = () => (JSArrayOfUint8List = dart.constFn(_interceptors.JSArray$(typed_data.Uint8List)))();
var ObjectNAndObjectNToNullN = () => (ObjectNAndObjectNToNullN = dart.constFn(dart.fnType(core.Null, [ObjectN(), ObjectN()])))();
var ObjectNToObjectN = () => (ObjectNToObjectN = dart.constFn(dart.fnType(ObjectN(), [ObjectN()])))();
var EmptyIteratorOfNullN = () => (EmptyIteratorOfNullN = dart.constFn(_internal.EmptyIterator$(core.Null)))();
var doubleL = () => (doubleL = dart.constFn(dart.legacy(core.double)))();
var VoidToint = () => (VoidToint = dart.constFn(dart.fnType(core.int, [])))();
var JSArrayOfint = () => (JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))();
var StringN = () => (StringN = dart.constFn(dart.nullable(core.String)))();
var JSArrayOfStringN = () => (JSArrayOfStringN = dart.constFn(_interceptors.JSArray$(StringN())))();
var SubListIterableOfString = () => (SubListIterableOfString = dart.constFn(_internal.SubListIterable$(core.String)))();
var EmptyIterableOfString = () => (EmptyIterableOfString = dart.constFn(_internal.EmptyIterable$(core.String)))();
var MatchToString = () => (MatchToString = dart.constFn(dart.fnType(core.String, [core.Match])))();
var IterableOfdouble = () => (IterableOfdouble = dart.constFn(core.Iterable$(core.double)))();
var IterableOfint = () => (IterableOfint = dart.constFn(core.Iterable$(core.int)))();
var intN = () => (intN = dart.constFn(dart.nullable(core.int)))();
var ObjectNTovoid = () => (ObjectNTovoid = dart.constFn(dart.fnType(dart.void, [], [ObjectN()])))();
var _FutureOfObjectN = () => (_FutureOfObjectN = dart.constFn(async._Future$(ObjectN())))();
var dynamicToNullN = () => (dynamicToNullN = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))();
var _FutureOfvoid = () => (_FutureOfvoid = dart.constFn(async._Future$(dart.void)))();
var VoidToObject = () => (VoidToObject = dart.constFn(dart.fnType(core.Object, [])))();
var ObjectTodynamic = () => (ObjectTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.Object])))();
var VoidToStackTrace = () => (VoidToStackTrace = dart.constFn(dart.fnType(core.StackTrace, [])))();
var StackTraceTodynamic = () => (StackTraceTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.StackTrace])))();
var ObjectNTobool = () => (ObjectNTobool = dart.constFn(dart.fnType(core.bool, [ObjectN()])))();
var FutureOrOfbool = () => (FutureOrOfbool = dart.constFn(async.FutureOr$(core.bool)))();
var VoidToFutureOrOfbool = () => (VoidToFutureOrOfbool = dart.constFn(dart.fnType(FutureOrOfbool(), [])))();
var boolTovoid = () => (boolTovoid = dart.constFn(dart.fnType(dart.void, [core.bool])))();
var VoidToFn = () => (VoidToFn = dart.constFn(dart.fnType(boolTovoid(), [])))();
var FnTodynamic = () => (FnTodynamic = dart.constFn(dart.fnType(dart.dynamic, [boolTovoid()])))();
var FutureOfbool = () => (FutureOfbool = dart.constFn(async.Future$(core.bool)))();
var ObjectTobool = () => (ObjectTobool = dart.constFn(dart.fnType(core.bool, [core.Object])))();
var VoidTodynamic = () => (VoidTodynamic = dart.constFn(dart.fnType(dart.dynamic, [])))();
var ObjectAndStackTraceTodynamic = () => (ObjectAndStackTraceTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.Object, core.StackTrace])))();
var _FutureListenerOfObject$Object = () => (_FutureListenerOfObject$Object = dart.constFn(async._FutureListener$(core.Object, core.Object)))();
var _FutureListenerNOfObject$Object = () => (_FutureListenerNOfObject$Object = dart.constFn(dart.nullable(_FutureListenerOfObject$Object())))();
var JSArrayOfFunction = () => (JSArrayOfFunction = dart.constFn(_interceptors.JSArray$(core.Function)))();
var _FutureListenerN = () => (_FutureListenerN = dart.constFn(dart.nullable(async._FutureListener)))();
var dynamicTo_Future = () => (dynamicTo_Future = dart.constFn(dart.fnType(async._Future, [dart.dynamic])))();
var _StreamControllerAddStreamStateOfObjectN = () => (_StreamControllerAddStreamStateOfObjectN = dart.constFn(async._StreamControllerAddStreamState$(ObjectN())))();
var FunctionN = () => (FunctionN = dart.constFn(dart.nullable(core.Function)))();
var AsyncErrorN = () => (AsyncErrorN = dart.constFn(dart.nullable(async.AsyncError)))();
var StackTraceN = () => (StackTraceN = dart.constFn(dart.nullable(core.StackTrace)))();
var ZoneAndZoneDelegateAndZone__ToAsyncErrorN = () => (ZoneAndZoneDelegateAndZone__ToAsyncErrorN = dart.constFn(dart.fnType(AsyncErrorN(), [async.Zone, async.ZoneDelegate, async.Zone, core.Object, StackTraceN()])))();
var _ZoneFunctionOfZoneAndZoneDelegateAndZone__ToAsyncErrorN = () => (_ZoneFunctionOfZoneAndZoneDelegateAndZone__ToAsyncErrorN = dart.constFn(async._ZoneFunction$(ZoneAndZoneDelegateAndZone__ToAsyncErrorN())))();
var ZoneAndZoneDelegateAndZone__Tovoid = () => (ZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, VoidTovoid()])))();
var _ZoneFunctionOfZoneAndZoneDelegateAndZone__Tovoid = () => (_ZoneFunctionOfZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(async._ZoneFunction$(ZoneAndZoneDelegateAndZone__Tovoid())))();
var ZoneAndZoneDelegateAndZone__ToTimer = () => (ZoneAndZoneDelegateAndZone__ToTimer = dart.constFn(dart.fnType(async.Timer, [async.Zone, async.ZoneDelegate, async.Zone, core.Duration, VoidTovoid()])))();
var _ZoneFunctionOfZoneAndZoneDelegateAndZone__ToTimer = () => (_ZoneFunctionOfZoneAndZoneDelegateAndZone__ToTimer = dart.constFn(async._ZoneFunction$(ZoneAndZoneDelegateAndZone__ToTimer())))();
var TimerTovoid = () => (TimerTovoid = dart.constFn(dart.fnType(dart.void, [async.Timer])))();
var ZoneAndZoneDelegateAndZone__ToTimer$ = () => (ZoneAndZoneDelegateAndZone__ToTimer$ = dart.constFn(dart.fnType(async.Timer, [async.Zone, async.ZoneDelegate, async.Zone, core.Duration, TimerTovoid()])))();
var _ZoneFunctionOfZoneAndZoneDelegateAndZone__ToTimer$ = () => (_ZoneFunctionOfZoneAndZoneDelegateAndZone__ToTimer$ = dart.constFn(async._ZoneFunction$(ZoneAndZoneDelegateAndZone__ToTimer$())))();
var ZoneAndZoneDelegateAndZone__Tovoid$ = () => (ZoneAndZoneDelegateAndZone__Tovoid$ = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String])))();
var _ZoneFunctionOfZoneAndZoneDelegateAndZone__Tovoid$ = () => (_ZoneFunctionOfZoneAndZoneDelegateAndZone__Tovoid$ = dart.constFn(async._ZoneFunction$(ZoneAndZoneDelegateAndZone__Tovoid$())))();
var ZoneSpecificationN = () => (ZoneSpecificationN = dart.constFn(dart.nullable(async.ZoneSpecification)))();
var MapOfObjectN$ObjectN = () => (MapOfObjectN$ObjectN = dart.constFn(core.Map$(ObjectN(), ObjectN())))();
var MapNOfObjectN$ObjectN = () => (MapNOfObjectN$ObjectN = dart.constFn(dart.nullable(MapOfObjectN$ObjectN())))();
var ZoneAndZoneDelegateAndZone__ToZone = () => (ZoneAndZoneDelegateAndZone__ToZone = dart.constFn(dart.fnType(async.Zone, [async.Zone, async.ZoneDelegate, async.Zone, ZoneSpecificationN(), MapNOfObjectN$ObjectN()])))();
var _ZoneFunctionOfZoneAndZoneDelegateAndZone__ToZone = () => (_ZoneFunctionOfZoneAndZoneDelegateAndZone__ToZone = dart.constFn(async._ZoneFunction$(ZoneAndZoneDelegateAndZone__ToZone())))();
var ZoneAndZoneDelegateAndZone__Tovoid$0 = () => (ZoneAndZoneDelegateAndZone__Tovoid$0 = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.Object, core.StackTrace])))();
var _ZoneFunctionOfZoneAndZoneDelegateAndZone__Tovoid$0 = () => (_ZoneFunctionOfZoneAndZoneDelegateAndZone__Tovoid$0 = dart.constFn(async._ZoneFunction$(ZoneAndZoneDelegateAndZone__Tovoid$0())))();
var ZoneN = () => (ZoneN = dart.constFn(dart.nullable(async.Zone)))();
var ZoneDelegateN = () => (ZoneDelegateN = dart.constFn(dart.nullable(async.ZoneDelegate)))();
var ZoneNAndZoneDelegateNAndZone__ToR = () => (ZoneNAndZoneDelegateNAndZone__ToR = dart.constFn(dart.gFnType(R => [R, [ZoneN(), ZoneDelegateN(), async.Zone, dart.fnType(R, [])]], R => [ObjectN()])))();
var ZoneNAndZoneDelegateNAndZone__ToR$ = () => (ZoneNAndZoneDelegateNAndZone__ToR$ = dart.constFn(dart.gFnType((R, T) => [R, [ZoneN(), ZoneDelegateN(), async.Zone, dart.fnType(R, [T]), T]], (R, T) => [ObjectN(), ObjectN()])))();
var ZoneNAndZoneDelegateNAndZone__ToR$0 = () => (ZoneNAndZoneDelegateNAndZone__ToR$0 = dart.constFn(dart.gFnType((R, T1, T2) => [R, [ZoneN(), ZoneDelegateN(), async.Zone, dart.fnType(R, [T1, T2]), T1, T2]], (R, T1, T2) => [ObjectN(), ObjectN(), ObjectN()])))();
var ZoneAndZoneDelegateAndZone__ToFn = () => (ZoneAndZoneDelegateAndZone__ToFn = dart.constFn(dart.gFnType(R => [dart.fnType(R, []), [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [])]], R => [ObjectN()])))();
var ZoneAndZoneDelegateAndZone__ToFn$ = () => (ZoneAndZoneDelegateAndZone__ToFn$ = dart.constFn(dart.gFnType((R, T) => [dart.fnType(R, [T]), [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [T])]], (R, T) => [ObjectN(), ObjectN()])))();
var ZoneAndZoneDelegateAndZone__ToFn$0 = () => (ZoneAndZoneDelegateAndZone__ToFn$0 = dart.constFn(dart.gFnType((R, T1, T2) => [dart.fnType(R, [T1, T2]), [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [T1, T2])]], (R, T1, T2) => [ObjectN(), ObjectN(), ObjectN()])))();
var AsyncErrorL = () => (AsyncErrorL = dart.constFn(dart.legacy(async.AsyncError)))();
var ZoneL = () => (ZoneL = dart.constFn(dart.legacy(async.Zone)))();
var ZoneDelegateL = () => (ZoneDelegateL = dart.constFn(dart.legacy(async.ZoneDelegate)))();
var ObjectL = () => (ObjectL = dart.constFn(dart.legacy(core.Object)))();
var StackTraceL = () => (StackTraceL = dart.constFn(dart.legacy(core.StackTrace)))();
var ZoneLAndZoneDelegateLAndZoneL__ToAsyncErrorL = () => (ZoneLAndZoneDelegateLAndZoneL__ToAsyncErrorL = dart.constFn(dart.fnType(AsyncErrorL(), [ZoneL(), ZoneDelegateL(), ZoneL(), ObjectL(), StackTraceL()])))();
var ZoneLAndZoneDelegateLAndZoneL__ToLAsyncErrorL = () => (ZoneLAndZoneDelegateLAndZoneL__ToLAsyncErrorL = dart.constFn(dart.legacy(ZoneLAndZoneDelegateLAndZoneL__ToAsyncErrorL())))();
var _ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLAsyncErrorL = () => (_ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLAsyncErrorL = dart.constFn(async._ZoneFunction$(ZoneLAndZoneDelegateLAndZoneL__ToLAsyncErrorL())))();
var VoidToLvoid = () => (VoidToLvoid = dart.constFn(dart.legacy(VoidTovoid())))();
var ZoneLAndZoneDelegateLAndZoneL__Tovoid = () => (ZoneLAndZoneDelegateLAndZoneL__Tovoid = dart.constFn(dart.fnType(dart.void, [ZoneL(), ZoneDelegateL(), ZoneL(), VoidToLvoid()])))();
var ZoneLAndZoneDelegateLAndZoneL__ToLvoid = () => (ZoneLAndZoneDelegateLAndZoneL__ToLvoid = dart.constFn(dart.legacy(ZoneLAndZoneDelegateLAndZoneL__Tovoid())))();
var _ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLvoid = () => (_ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLvoid = dart.constFn(async._ZoneFunction$(ZoneLAndZoneDelegateLAndZoneL__ToLvoid())))();
var ZoneNAndZoneDelegateNAndZone__Tovoid = () => (ZoneNAndZoneDelegateNAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [ZoneN(), ZoneDelegateN(), async.Zone, VoidTovoid()])))();
var TimerL = () => (TimerL = dart.constFn(dart.legacy(async.Timer)))();
var DurationL = () => (DurationL = dart.constFn(dart.legacy(core.Duration)))();
var ZoneLAndZoneDelegateLAndZoneL__ToTimerL = () => (ZoneLAndZoneDelegateLAndZoneL__ToTimerL = dart.constFn(dart.fnType(TimerL(), [ZoneL(), ZoneDelegateL(), ZoneL(), DurationL(), VoidToLvoid()])))();
var ZoneLAndZoneDelegateLAndZoneL__ToLTimerL = () => (ZoneLAndZoneDelegateLAndZoneL__ToLTimerL = dart.constFn(dart.legacy(ZoneLAndZoneDelegateLAndZoneL__ToTimerL())))();
var _ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLTimerL = () => (_ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLTimerL = dart.constFn(async._ZoneFunction$(ZoneLAndZoneDelegateLAndZoneL__ToLTimerL())))();
var TimerLTovoid = () => (TimerLTovoid = dart.constFn(dart.fnType(dart.void, [TimerL()])))();
var TimerLToLvoid = () => (TimerLToLvoid = dart.constFn(dart.legacy(TimerLTovoid())))();
var ZoneLAndZoneDelegateLAndZoneL__ToTimerL$ = () => (ZoneLAndZoneDelegateLAndZoneL__ToTimerL$ = dart.constFn(dart.fnType(TimerL(), [ZoneL(), ZoneDelegateL(), ZoneL(), DurationL(), TimerLToLvoid()])))();
var ZoneLAndZoneDelegateLAndZoneL__ToLTimerL$ = () => (ZoneLAndZoneDelegateLAndZoneL__ToLTimerL$ = dart.constFn(dart.legacy(ZoneLAndZoneDelegateLAndZoneL__ToTimerL$())))();
var _ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLTimerL$ = () => (_ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLTimerL$ = dart.constFn(async._ZoneFunction$(ZoneLAndZoneDelegateLAndZoneL__ToLTimerL$())))();
var StringL = () => (StringL = dart.constFn(dart.legacy(core.String)))();
var ZoneLAndZoneDelegateLAndZoneL__Tovoid$ = () => (ZoneLAndZoneDelegateLAndZoneL__Tovoid$ = dart.constFn(dart.fnType(dart.void, [ZoneL(), ZoneDelegateL(), ZoneL(), StringL()])))();
var ZoneLAndZoneDelegateLAndZoneL__ToLvoid$ = () => (ZoneLAndZoneDelegateLAndZoneL__ToLvoid$ = dart.constFn(dart.legacy(ZoneLAndZoneDelegateLAndZoneL__Tovoid$())))();
var _ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLvoid$ = () => (_ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLvoid$ = dart.constFn(async._ZoneFunction$(ZoneLAndZoneDelegateLAndZoneL__ToLvoid$())))();
var ZoneSpecificationL = () => (ZoneSpecificationL = dart.constFn(dart.legacy(async.ZoneSpecification)))();
var MapOfObjectL$ObjectL = () => (MapOfObjectL$ObjectL = dart.constFn(core.Map$(ObjectL(), ObjectL())))();
var MapLOfObjectL$ObjectL = () => (MapLOfObjectL$ObjectL = dart.constFn(dart.legacy(MapOfObjectL$ObjectL())))();
var ZoneLAndZoneDelegateLAndZoneL__ToZoneL = () => (ZoneLAndZoneDelegateLAndZoneL__ToZoneL = dart.constFn(dart.fnType(ZoneL(), [ZoneL(), ZoneDelegateL(), ZoneL(), ZoneSpecificationL(), MapLOfObjectL$ObjectL()])))();
var ZoneLAndZoneDelegateLAndZoneL__ToLZoneL = () => (ZoneLAndZoneDelegateLAndZoneL__ToLZoneL = dart.constFn(dart.legacy(ZoneLAndZoneDelegateLAndZoneL__ToZoneL())))();
var _ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLZoneL = () => (_ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLZoneL = dart.constFn(async._ZoneFunction$(ZoneLAndZoneDelegateLAndZoneL__ToLZoneL())))();
var ZoneNAndZoneDelegateNAndZone__ToZone = () => (ZoneNAndZoneDelegateNAndZone__ToZone = dart.constFn(dart.fnType(async.Zone, [ZoneN(), ZoneDelegateN(), async.Zone, ZoneSpecificationN(), MapNOfObjectN$ObjectN()])))();
var ZoneLAndZoneDelegateLAndZoneL__Tovoid$0 = () => (ZoneLAndZoneDelegateLAndZoneL__Tovoid$0 = dart.constFn(dart.fnType(dart.void, [ZoneL(), ZoneDelegateL(), ZoneL(), ObjectL(), StackTraceL()])))();
var ZoneLAndZoneDelegateLAndZoneL__ToLvoid$0 = () => (ZoneLAndZoneDelegateLAndZoneL__ToLvoid$0 = dart.constFn(dart.legacy(ZoneLAndZoneDelegateLAndZoneL__Tovoid$0())))();
var _ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLvoid$0 = () => (_ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLvoid$0 = dart.constFn(async._ZoneFunction$(ZoneLAndZoneDelegateLAndZoneL__ToLvoid$0())))();
var ZoneNAndZoneDelegateNAndZone__Tovoid$ = () => (ZoneNAndZoneDelegateNAndZone__Tovoid$ = dart.constFn(dart.fnType(dart.void, [ZoneN(), ZoneDelegateN(), async.Zone, core.Object, core.StackTrace])))();
var NeverAndNeverTodynamic = () => (NeverAndNeverTodynamic = dart.constFn(dart.fnType(dart.dynamic, [dart.Never, dart.Never])))();
var StringTovoid = () => (StringTovoid = dart.constFn(dart.fnType(dart.void, [core.String])))();
var HashMapOfObjectN$ObjectN = () => (HashMapOfObjectN$ObjectN = dart.constFn(collection.HashMap$(ObjectN(), ObjectN())))();
var ZoneAndZoneDelegateAndZone__ToNullN = () => (ZoneAndZoneDelegateAndZone__ToNullN = dart.constFn(dart.fnType(core.Null, [async.Zone, async.ZoneDelegate, async.Zone, core.Object, core.StackTrace])))();
var JSArrayOfObjectN = () => (JSArrayOfObjectN = dart.constFn(_interceptors.JSArray$(ObjectN())))();
var ObjectNToint = () => (ObjectNToint = dart.constFn(dart.fnType(core.int, [ObjectN()])))();
var ObjectNAndObjectNTobool = () => (ObjectNAndObjectNTobool = dart.constFn(dart.fnType(core.bool, [ObjectN(), ObjectN()])))();
var dynamicTobool = () => (dynamicTobool = dart.constFn(dart.fnType(core.bool, [dart.dynamic])))();
var ComparableAndComparableToint = () => (ComparableAndComparableToint = dart.constFn(dart.fnType(core.int, [core.Comparable, core.Comparable])))();
var MappedIterableOfString$dynamic = () => (MappedIterableOfString$dynamic = dart.constFn(_internal.MappedIterable$(core.String, dart.dynamic)))();
var ObjectNTodynamic = () => (ObjectNTodynamic = dart.constFn(dart.fnType(dart.dynamic, [ObjectN()])))();
var MapOfString$dynamic = () => (MapOfString$dynamic = dart.constFn(core.Map$(core.String, dart.dynamic)))();
var StringAnddynamicToNullN = () => (StringAnddynamicToNullN = dart.constFn(dart.fnType(core.Null, [core.String, dart.dynamic])))();
var IdentityMapOfString$dynamic = () => (IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))();
var ListOfint = () => (ListOfint = dart.constFn(core.List$(core.int)))();
var StringBufferAndStringToStringBuffer = () => (StringBufferAndStringToStringBuffer = dart.constFn(dart.fnType(core.StringBuffer, [core.StringBuffer, core.String])))();
var StringBufferToString = () => (StringBufferToString = dart.constFn(dart.fnType(core.String, [core.StringBuffer])))();
var IdentityMapOfString$Encoding = () => (IdentityMapOfString$Encoding = dart.constFn(_js_helper.IdentityMap$(core.String, convert.Encoding)))();
var SinkOfListOfint = () => (SinkOfListOfint = dart.constFn(core.Sink$(ListOfint())))();
var StreamOfString = () => (StreamOfString = dart.constFn(async.Stream$(core.String)))();
var StreamOfListOfint = () => (StreamOfListOfint = dart.constFn(async.Stream$(ListOfint())))();
var SinkOfString = () => (SinkOfString = dart.constFn(core.Sink$(core.String)))();
var intL = () => (intL = dart.constFn(dart.legacy(core.int)))();
var StreamOfObjectN = () => (StreamOfObjectN = dart.constFn(async.Stream$(ObjectN())))();
var JSArrayOfListOfint = () => (JSArrayOfListOfint = dart.constFn(_interceptors.JSArray$(ListOfint())))();
var Uint8ListAndintAndintTovoid = () => (Uint8ListAndintAndintTovoid = dart.constFn(dart.fnType(dart.void, [typed_data.Uint8List, core.int, core.int])))();
var SyncIterableOfString = () => (SyncIterableOfString = dart.constFn(_js_helper.SyncIterable$(core.String)))();
var EventSinkOfString = () => (EventSinkOfString = dart.constFn(async.EventSink$(core.String)))();
var EventSinkOfStringTo_LineSplitterEventSink = () => (EventSinkOfStringTo_LineSplitterEventSink = dart.constFn(dart.fnType(convert._LineSplitterEventSink, [EventSinkOfString()])))();
var VoidToObjectN = () => (VoidToObjectN = dart.constFn(dart.fnType(ObjectN(), [])))();
var IdentityMapOfString$_FakeUserTag = () => (IdentityMapOfString$_FakeUserTag = dart.constFn(_js_helper.IdentityMap$(core.String, developer._FakeUserTag)))();
var LinkedMapOfString$Metric = () => (LinkedMapOfString$Metric = dart.constFn(_js_helper.LinkedMap$(core.String, developer.Metric)))();
var UriN = () => (UriN = dart.constFn(dart.nullable(core.Uri)))();
var CompleterOfUriN = () => (CompleterOfUriN = dart.constFn(async.Completer$(UriN())))();
var UriNTovoid = () => (UriNTovoid = dart.constFn(dart.fnType(dart.void, [UriN()])))();
var CompleterOfUri = () => (CompleterOfUri = dart.constFn(async.Completer$(core.Uri)))();
var UriTovoid = () => (UriTovoid = dart.constFn(dart.fnType(dart.void, [core.Uri])))();
var _SyncBlockN = () => (_SyncBlockN = dart.constFn(dart.nullable(developer._SyncBlock)))();
var JSArrayOf_SyncBlockN = () => (JSArrayOf_SyncBlockN = dart.constFn(_interceptors.JSArray$(_SyncBlockN())))();
var JSArrayOf_AsyncBlock = () => (JSArrayOf_AsyncBlock = dart.constFn(_interceptors.JSArray$(developer._AsyncBlock)))();
var LinkedMapOfObjectN$ObjectN = () => (LinkedMapOfObjectN$ObjectN = dart.constFn(_js_helper.LinkedMap$(ObjectN(), ObjectN())))();
var FutureOfServiceExtensionResponse = () => (FutureOfServiceExtensionResponse = dart.constFn(async.Future$(developer.ServiceExtensionResponse)))();
var MapOfString$String = () => (MapOfString$String = dart.constFn(core.Map$(core.String, core.String)))();
var StringAndMapOfString$StringToFutureOfServiceExtensionResponse = () => (StringAndMapOfString$StringToFutureOfServiceExtensionResponse = dart.constFn(dart.fnType(FutureOfServiceExtensionResponse(), [core.String, MapOfString$String()])))();
var IdentityMapOfString$StringAndMapOfString$StringToFutureOfServiceExtensionResponse = () => (IdentityMapOfString$StringAndMapOfString$StringToFutureOfServiceExtensionResponse = dart.constFn(_js_helper.IdentityMap$(core.String, StringAndMapOfString$StringToFutureOfServiceExtensionResponse())))();
var VoidToUint8List = () => (VoidToUint8List = dart.constFn(dart.fnType(typed_data.Uint8List, [])))();
var Uint8ListTodynamic = () => (Uint8ListTodynamic = dart.constFn(dart.fnType(dart.dynamic, [typed_data.Uint8List])))();
var FutureOfDirectory = () => (FutureOfDirectory = dart.constFn(async.Future$(io.Directory)))();
var DirectoryToFutureOfDirectory = () => (DirectoryToFutureOfDirectory = dart.constFn(dart.fnType(FutureOfDirectory(), [io.Directory])))();
var FutureOrOfDirectory = () => (FutureOrOfDirectory = dart.constFn(async.FutureOr$(io.Directory)))();
var boolToFutureOrOfDirectory = () => (boolToFutureOrOfDirectory = dart.constFn(dart.fnType(FutureOrOfDirectory(), [core.bool])))();
var dynamicTo_Directory = () => (dynamicTo_Directory = dart.constFn(dart.fnType(io._Directory, [dart.dynamic])))();
var dynamicToDirectory = () => (dynamicToDirectory = dart.constFn(dart.fnType(io.Directory, [dart.dynamic])))();
var JSArrayOfFileSystemEntity = () => (JSArrayOfFileSystemEntity = dart.constFn(_interceptors.JSArray$(io.FileSystemEntity)))();
var FutureOrOfString = () => (FutureOrOfString = dart.constFn(async.FutureOr$(core.String)))();
var dynamicToFutureOrOfString = () => (dynamicToFutureOrOfString = dart.constFn(dart.fnType(FutureOrOfString(), [dart.dynamic])))();
var dynamicToFutureOrOfbool = () => (dynamicToFutureOrOfbool = dart.constFn(dart.fnType(FutureOrOfbool(), [dart.dynamic])))();
var FileSystemEntityTypeTobool = () => (FileSystemEntityTypeTobool = dart.constFn(dart.fnType(core.bool, [io.FileSystemEntityType])))();
var dynamicToFileSystemEntityType = () => (dynamicToFileSystemEntityType = dart.constFn(dart.fnType(io.FileSystemEntityType, [dart.dynamic])))();
var StreamControllerOfFileSystemEntity = () => (StreamControllerOfFileSystemEntity = dart.constFn(async.StreamController$(io.FileSystemEntity)))();
var StreamControllerOfUint8List = () => (StreamControllerOfUint8List = dart.constFn(async.StreamController$(typed_data.Uint8List)))();
var VoidToFuture = () => (VoidToFuture = dart.constFn(dart.fnType(async.Future, [])))();
var Uint8ListToNullN = () => (Uint8ListToNullN = dart.constFn(dart.fnType(core.Null, [typed_data.Uint8List])))();
var RandomAccessFileTovoid = () => (RandomAccessFileTovoid = dart.constFn(dart.fnType(dart.void, [io.RandomAccessFile])))();
var dynamicAnddynamicTovoid = () => (dynamicAnddynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic, dart.dynamic])))();
var FutureOfRandomAccessFile = () => (FutureOfRandomAccessFile = dart.constFn(async.Future$(io.RandomAccessFile)))();
var FileN = () => (FileN = dart.constFn(dart.nullable(io.File)))();
var CompleterOfFileN = () => (CompleterOfFileN = dart.constFn(async.Completer$(FileN())))();
var StreamSubscriptionOfListOfint = () => (StreamSubscriptionOfListOfint = dart.constFn(async.StreamSubscription$(ListOfint())))();
var VoidToStreamSubscriptionOfListOfint = () => (VoidToStreamSubscriptionOfListOfint = dart.constFn(dart.fnType(StreamSubscriptionOfListOfint(), [])))();
var StreamSubscriptionOfListOfintTodynamic = () => (StreamSubscriptionOfListOfintTodynamic = dart.constFn(dart.fnType(dart.dynamic, [StreamSubscriptionOfListOfint()])))();
var dynamicAndStackTraceTovoid = () => (dynamicAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic, core.StackTrace])))();
var ListOfintToNullN = () => (ListOfintToNullN = dart.constFn(dart.fnType(core.Null, [ListOfint()])))();
var RandomAccessFileToNullN = () => (RandomAccessFileToNullN = dart.constFn(dart.fnType(core.Null, [io.RandomAccessFile])))();
var RandomAccessFileToFutureOfvoid = () => (RandomAccessFileToFutureOfvoid = dart.constFn(dart.fnType(FutureOfvoid(), [io.RandomAccessFile])))();
var voidToFileN = () => (voidToFileN = dart.constFn(dart.fnType(FileN(), [dart.void])))();
var DirectoryN = () => (DirectoryN = dart.constFn(dart.nullable(io.Directory)))();
var DirectoryNToFuture = () => (DirectoryNToFuture = dart.constFn(dart.fnType(async.Future, [DirectoryN()])))();
var dynamicTo_File = () => (dynamicTo_File = dart.constFn(dart.fnType(io._File, [dart.dynamic])))();
var FileSystemEntityTo_File = () => (FileSystemEntityTo_File = dart.constFn(dart.fnType(io._File, [io.FileSystemEntity])))();
var dynamicToFile = () => (dynamicToFile = dart.constFn(dart.fnType(io.File, [dart.dynamic])))();
var dynamicTo_RandomAccessFile = () => (dynamicTo_RandomAccessFile = dart.constFn(dart.fnType(io._RandomAccessFile, [dart.dynamic])))();
var FutureOrOfint = () => (FutureOrOfint = dart.constFn(async.FutureOr$(core.int)))();
var dynamicToFutureOrOfint = () => (dynamicToFutureOrOfint = dart.constFn(dart.fnType(FutureOrOfint(), [dart.dynamic])))();
var dynamicToDateTime = () => (dynamicToDateTime = dart.constFn(dart.fnType(core.DateTime, [dart.dynamic])))();
var CompleterOfUint8List = () => (CompleterOfUint8List = dart.constFn(async.Completer$(typed_data.Uint8List)))();
var FutureOfUint8List = () => (FutureOfUint8List = dart.constFn(async.Future$(typed_data.Uint8List)))();
var RandomAccessFileToFutureOfUint8List = () => (RandomAccessFileToFutureOfUint8List = dart.constFn(dart.fnType(FutureOfUint8List(), [io.RandomAccessFile])))();
var intToFutureOfUint8List = () => (intToFutureOfUint8List = dart.constFn(dart.fnType(FutureOfUint8List(), [core.int])))();
var FutureOfString = () => (FutureOfString = dart.constFn(async.Future$(core.String)))();
var Uint8ListToFutureOrOfString = () => (Uint8ListToFutureOrOfString = dart.constFn(dart.fnType(FutureOrOfString(), [typed_data.Uint8List])))();
var RandomAccessFileTo_File = () => (RandomAccessFileTo_File = dart.constFn(dart.fnType(io._File, [io.RandomAccessFile])))();
var FutureOrOfFile = () => (FutureOrOfFile = dart.constFn(async.FutureOr$(io.File)))();
var RandomAccessFileToFutureOrOfFile = () => (RandomAccessFileToFutureOrOfFile = dart.constFn(dart.fnType(FutureOrOfFile(), [io.RandomAccessFile])))();
var FutureOfFile = () => (FutureOfFile = dart.constFn(async.Future$(io.File)))();
var RandomAccessFileToFutureOfFile = () => (RandomAccessFileToFutureOfFile = dart.constFn(dart.fnType(FutureOfFile(), [io.RandomAccessFile])))();
var dynamicAnddynamicToFutureOfServiceExtensionResponse = () => (dynamicAnddynamicToFutureOfServiceExtensionResponse = dart.constFn(dart.fnType(FutureOfServiceExtensionResponse(), [dart.dynamic, dart.dynamic])))();
var dynamicToUint8List = () => (dynamicToUint8List = dart.constFn(dart.fnType(typed_data.Uint8List, [dart.dynamic])))();
var FutureOfint = () => (FutureOfint = dart.constFn(async.Future$(core.int)))();
var dynamicToint = () => (dynamicToint = dart.constFn(dart.fnType(core.int, [dart.dynamic])))();
var FileSystemEntityTypeL = () => (FileSystemEntityTypeL = dart.constFn(dart.legacy(io.FileSystemEntityType)))();
var dynamicToFileStat = () => (dynamicToFileStat = dart.constFn(dart.fnType(io.FileStat, [dart.dynamic])))();
var ListOfMapOfString$dynamic = () => (ListOfMapOfString$dynamic = dart.constFn(core.List$(MapOfString$dynamic())))();
var _FileResourceInfoToMapOfString$dynamic = () => (_FileResourceInfoToMapOfString$dynamic = dart.constFn(dart.fnType(MapOfString$dynamic(), [io._FileResourceInfo])))();
var LinkedMapOfint$_FileResourceInfo = () => (LinkedMapOfint$_FileResourceInfo = dart.constFn(_js_helper.LinkedMap$(core.int, io._FileResourceInfo)))();
var _ProcessResourceInfoToMapOfString$dynamic = () => (_ProcessResourceInfoToMapOfString$dynamic = dart.constFn(dart.fnType(MapOfString$dynamic(), [io._ProcessResourceInfo])))();
var LinkedMapOfint$_ProcessResourceInfo = () => (LinkedMapOfint$_ProcessResourceInfo = dart.constFn(_js_helper.LinkedMap$(core.int, io._ProcessResourceInfo)))();
var _SocketResourceInfoToMapOfString$dynamic = () => (_SocketResourceInfoToMapOfString$dynamic = dart.constFn(dart.fnType(MapOfString$dynamic(), [io._SocketResourceInfo])))();
var LinkedMapOfint$_SocketResourceInfo = () => (LinkedMapOfint$_SocketResourceInfo = dart.constFn(_js_helper.LinkedMap$(core.int, io._SocketResourceInfo)))();
var dynamicTo_Link = () => (dynamicTo_Link = dart.constFn(dart.fnType(io._Link, [dart.dynamic])))();
var FutureOfLink = () => (FutureOfLink = dart.constFn(async.Future$(io.Link)))();
var FileSystemEntityToFutureOfLink = () => (FileSystemEntityToFutureOfLink = dart.constFn(dart.fnType(FutureOfLink(), [io.FileSystemEntity])))();
var FileSystemEntityTo_Link = () => (FileSystemEntityTo_Link = dart.constFn(dart.fnType(io._Link, [io.FileSystemEntity])))();
var dynamicToLink = () => (dynamicToLink = dart.constFn(dart.fnType(io.Link, [dart.dynamic])))();
var _SocketStatisticToMapOfString$dynamic = () => (_SocketStatisticToMapOfString$dynamic = dart.constFn(dart.fnType(MapOfString$dynamic(), [io._SocketStatistic])))();
var IdentityMapOfint$_SocketStatistic = () => (IdentityMapOfint$_SocketStatistic = dart.constFn(_js_helper.IdentityMap$(core.int, io._SocketStatistic)))();
var _SocketProfileTypeL = () => (_SocketProfileTypeL = dart.constFn(dart.legacy(io._SocketProfileType)))();
var IOOverridesN = () => (IOOverridesN = dart.constFn(dart.nullable(io.IOOverrides)))();
var _CaseInsensitiveStringMapOfString = () => (_CaseInsensitiveStringMapOfString = dart.constFn(io._CaseInsensitiveStringMap$(core.String)))();
var LinkedMapOfString$String = () => (LinkedMapOfString$String = dart.constFn(_js_helper.LinkedMap$(core.String, core.String)))();
var UnmodifiableMapViewOfString$String = () => (UnmodifiableMapViewOfString$String = dart.constFn(collection.UnmodifiableMapView$(core.String, core.String)))();
var ProcessStartModeL = () => (ProcessStartModeL = dart.constFn(dart.legacy(io.ProcessStartMode)))();
var RawSecureServerSocketToSecureServerSocket = () => (RawSecureServerSocketToSecureServerSocket = dart.constFn(dart.fnType(io.SecureServerSocket, [io.RawSecureServerSocket])))();
var RawSecureSocketToSecureSocket = () => (RawSecureSocketToSecureSocket = dart.constFn(dart.fnType(io.SecureSocket, [io.RawSecureSocket])))();
var ConnectionTaskOfSecureSocket = () => (ConnectionTaskOfSecureSocket = dart.constFn(io.ConnectionTask$(io.SecureSocket)))();
var ConnectionTaskOfRawSecureSocket = () => (ConnectionTaskOfRawSecureSocket = dart.constFn(io.ConnectionTask$(io.RawSecureSocket)))();
var ConnectionTaskOfRawSecureSocketToConnectionTaskOfSecureSocket = () => (ConnectionTaskOfRawSecureSocketToConnectionTaskOfSecureSocket = dart.constFn(dart.fnType(ConnectionTaskOfSecureSocket(), [ConnectionTaskOfRawSecureSocket()])))();
var StreamSubscriptionOfRawSocketEvent = () => (StreamSubscriptionOfRawSocketEvent = dart.constFn(async.StreamSubscription$(io.RawSocketEvent)))();
var StreamSubscriptionNOfRawSocketEvent = () => (StreamSubscriptionNOfRawSocketEvent = dart.constFn(dart.nullable(StreamSubscriptionOfRawSocketEvent())))();
var FutureOfRawSecureSocket = () => (FutureOfRawSecureSocket = dart.constFn(async.Future$(io.RawSecureSocket)))();
var dynamicToFutureOfRawSecureSocket = () => (dynamicToFutureOfRawSecureSocket = dart.constFn(dart.fnType(FutureOfRawSecureSocket(), [dart.dynamic])))();
var StreamControllerOfRawSecureSocket = () => (StreamControllerOfRawSecureSocket = dart.constFn(async.StreamController$(io.RawSecureSocket)))();
var RawServerSocketToRawSecureServerSocket = () => (RawServerSocketToRawSecureServerSocket = dart.constFn(dart.fnType(io.RawSecureServerSocket, [io.RawServerSocket])))();
var RawSecureSocketToNullN = () => (RawSecureSocketToNullN = dart.constFn(dart.fnType(core.Null, [io.RawSecureSocket])))();
var RawSocketToFutureOfRawSecureSocket = () => (RawSocketToFutureOfRawSecureSocket = dart.constFn(dart.fnType(FutureOfRawSecureSocket(), [io.RawSocket])))();
var ConnectionTaskOfRawSocket = () => (ConnectionTaskOfRawSocket = dart.constFn(io.ConnectionTask$(io.RawSocket)))();
var ConnectionTaskOfRawSocketToConnectionTaskOfRawSecureSocket = () => (ConnectionTaskOfRawSocketToConnectionTaskOfRawSecureSocket = dart.constFn(dart.fnType(ConnectionTaskOfRawSecureSocket(), [ConnectionTaskOfRawSocket()])))();
var CompleterOf_RawSecureSocket = () => (CompleterOf_RawSecureSocket = dart.constFn(async.Completer$(io._RawSecureSocket)))();
var StreamControllerOfRawSocketEvent = () => (StreamControllerOfRawSocketEvent = dart.constFn(async.StreamController$(io.RawSocketEvent)))();
var CompleterOfRawSecureSocket = () => (CompleterOfRawSecureSocket = dart.constFn(async.Completer$(io.RawSecureSocket)))();
var _FilterStatusToNullN = () => (_FilterStatusToNullN = dart.constFn(dart.fnType(core.Null, [io._FilterStatus])))();
var intToint = () => (intToint = dart.constFn(dart.fnType(core.int, [core.int])))();
var dynamicTo_FilterStatus = () => (dynamicTo_FilterStatus = dart.constFn(dart.fnType(io._FilterStatus, [dart.dynamic])))();
var ListOfintAndStringTovoid = () => (ListOfintAndStringTovoid = dart.constFn(dart.fnType(dart.void, [ListOfint(), core.String])))();
var _RawSocketOptionsL = () => (_RawSocketOptionsL = dart.constFn(dart.legacy(io._RawSocketOptions)))();
var JSArrayOf_DomainNetworkPolicy = () => (JSArrayOf_DomainNetworkPolicy = dart.constFn(_interceptors.JSArray$(io._DomainNetworkPolicy)))();
var StdoutN = () => (StdoutN = dart.constFn(dart.nullable(io.Stdout)))();
var Fn__ToR = () => (Fn__ToR = dart.constFn(dart.gFnType(R => [R, [dart.fnType(R, [])], {onError: FunctionN(), zoneSpecification: ZoneSpecificationN(), zoneValues: MapNOfObjectN$ObjectN()}, {}], R => [ObjectN()])))();
var ObjectNTovoid$ = () => (ObjectNTovoid$ = dart.constFn(dart.fnType(dart.void, [ObjectN()])))();
var LinkedMapOfSymbol$dynamic = () => (LinkedMapOfSymbol$dynamic = dart.constFn(_js_helper.LinkedMap$(core.Symbol, dart.dynamic)))();
var ObjectToObject = () => (ObjectToObject = dart.constFn(dart.fnType(core.Object, [core.Object])))();
var ObjectTo_DartObject = () => (ObjectTo_DartObject = dart.constFn(dart.fnType(js._DartObject, [core.Object])))();
var ObjectToJsObject = () => (ObjectToJsObject = dart.constFn(dart.fnType(js.JsObject, [core.Object])))();
var PointOfnum = () => (PointOfnum = dart.constFn(math.Point$(core.num)))();
var RectangleOfnum = () => (RectangleOfnum = dart.constFn(math.Rectangle$(core.num)))();



var MapOfString$dynamicTobool = () => (MapOfString$dynamicTobool = dart.constFn(dart.fnType(core.bool, [MapOfString$dynamic()])))();
var MapN = () => (MapN = dart.constFn(dart.nullable(core.Map)))();
var ObjectNToNvoid = () => (ObjectNToNvoid = dart.constFn(dart.nullable(ObjectNTovoid$())))();
var MapNAndFnTodynamic = () => (MapNAndFnTodynamic = dart.constFn(dart.fnType(dart.dynamic, [MapN()], [ObjectNToNvoid()])))();

var BlobNToNullN = () => (BlobNToNullN = dart.constFn(dart.fnType(core.Null, [BlobN()])))();
var JSArrayOfnum = () => (JSArrayOfnum = dart.constFn(_interceptors.JSArray$(core.num)))();

var CompleterOfListOfEntry = () => (CompleterOfListOfEntry = dart.constFn(async.Completer$(ListOfEntry())))();
var ListToNullN = () => (ListToNullN = dart.constFn(dart.fnType(core.Null, [core.List])))();

var IterableOfString = () => (IterableOfString = dart.constFn(core.Iterable$(core.String)))();
var FileNToNullN = () => (FileNToNullN = dart.constFn(dart.fnType(core.Null, [FileN$()])))();

var StringAndStringToNullN = () => (StringAndStringToNullN = dart.constFn(dart.fnType(core.Null, [core.String, core.String])))();
var CompleterOfString = () => (CompleterOfString = dart.constFn(async.Completer$(core.String)))();
var FutureOrNOfString = () => (FutureOrNOfString = dart.constFn(dart.nullable(FutureOrOfString())))();
var MapTobool = () => (MapTobool = dart.constFn(dart.fnType(core.bool, [core.Map])))();
var StringAnddynamicTovoid = () => (StringAnddynamicTovoid = dart.constFn(dart.fnType(dart.void, [core.String, dart.dynamic])))();
var JSArrayOfMap = () => (JSArrayOfMap = dart.constFn(_interceptors.JSArray$(core.Map)))();
var ListAndMutationObserverToNvoid = () => (ListAndMutationObserverToNvoid = dart.constFn(dart.nullable(ListAndMutationObserverTovoid())))();
var boolL = () => (boolL = dart.constFn(dart.legacy(core.bool)))();
var StringToNullN = () => (StringToNullN = dart.constFn(dart.fnType(core.Null, [core.String])))();
var JSArrayOfMapOfString$String = () => (JSArrayOfMapOfString$String = dart.constFn(_interceptors.JSArray$(MapOfString$String())))();

var StringAndStringTovoid = () => (StringAndStringTovoid = dart.constFn(dart.fnType(dart.void, [core.String, core.String])))();


var CompleterOfnum = () => (CompleterOfnum = dart.constFn(async.Completer$(core.num)))();
var numToNullN = () => (numToNullN = dart.constFn(dart.fnType(core.Null, [core.num])))();


var _IdentityHashSetOfString = () => (_IdentityHashSetOfString = dart.constFn(collection._IdentityHashSet$(core.String)))();
var StringAndStringToString = () => (StringAndStringToString = dart.constFn(dart.fnType(core.String, [core.String, core.String])))();
var SetOfString = () => (SetOfString = dart.constFn(core.Set$(core.String)))();
var SetOfStringTobool = () => (SetOfStringTobool = dart.constFn(dart.fnType(core.bool, [SetOfString()])))();
var SetOfStringTovoid = () => (SetOfStringTovoid = dart.constFn(dart.fnType(dart.void, [SetOfString()])))();
var VoidToNString = () => (VoidToNString = dart.constFn(dart.nullable(VoidToString())))();
var LinkedHashSetOfString = () => (LinkedHashSetOfString = dart.constFn(collection.LinkedHashSet$(core.String)))();
var IdentityMapOfString$Function = () => (IdentityMapOfString$Function = dart.constFn(_js_helper.IdentityMap$(core.String, core.Function)))();
var MapNOfString$dynamic = () => (MapNOfString$dynamic = dart.constFn(dart.nullable(MapOfString$dynamic())))();
var dynamicToMapNOfString$dynamic = () => (dynamicToMapNOfString$dynamic = dart.constFn(dart.fnType(MapNOfString$dynamic(), [dart.dynamic])))();
var dynamicToObjectN = () => (dynamicToObjectN = dart.constFn(dart.fnType(ObjectN(), [dart.dynamic])))();
var TypeN = () => (TypeN = dart.constFn(dart.nullable(core.Type)))();
var dynamicAnddynamicTodynamic = () => (dynamicAnddynamicTodynamic = dart.constFn(dart.fnType(dart.dynamic, [dart.dynamic, dart.dynamic])))();
var TypedDataN = () => (TypedDataN = dart.constFn(dart.nullable(typed_data.TypedData)))();
var intAndintToint = () => (intAndintToint = dart.constFn(dart.fnType(core.int, [core.int, core.int])))();
var StringNToint = () => (StringNToint = dart.constFn(dart.fnType(core.int, [StringN()])))();
var intToString = () => (intToString = dart.constFn(dart.fnType(core.String, [core.int])))();
var SymbolAnddynamicToNullN = () => (SymbolAnddynamicToNullN = dart.constFn(dart.fnType(core.Null, [core.Symbol, dart.dynamic])))();
var MapOfSymbol$ObjectN = () => (MapOfSymbol$ObjectN = dart.constFn(core.Map$(core.Symbol, ObjectN())))();
var MapOfString$StringAndStringToMapOfString$String = () => (MapOfString$StringAndStringToMapOfString$String = dart.constFn(dart.fnType(MapOfString$String(), [MapOfString$String(), core.String])))();
var StringAndintTovoid = () => (StringAndintTovoid = dart.constFn(dart.fnType(dart.void, [core.String, core.int])))();
var StringAnddynamicTovoid$ = () => (StringAnddynamicTovoid$ = dart.constFn(dart.fnType(dart.void, [core.String], [dart.dynamic])))();
var ListOfStringL = () => (ListOfStringL = dart.constFn(core.List$(StringL())))();
var ListLOfStringL = () => (ListLOfStringL = dart.constFn(dart.legacy(ListOfStringL())))();
var StringAndListOfStringToListOfString = () => (StringAndListOfStringToListOfString = dart.constFn(dart.fnType(ListOfString(), [core.String, ListOfString()])))();
var MapOfString$ListOfString = () => (MapOfString$ListOfString = dart.constFn(core.Map$(core.String, ListOfString())))();
var StringAndStringNTovoid = () => (StringAndStringNTovoid = dart.constFn(dart.fnType(dart.void, [core.String, StringN()])))();
var IdentityMapOfString$ListOfString = () => (IdentityMapOfString$ListOfString = dart.constFn(_js_helper.IdentityMap$(core.String, ListOfString())))();
var VoidToListOfString = () => (VoidToListOfString = dart.constFn(dart.fnType(ListOfString(), [])))();
var intAndintAndintTovoid = () => (intAndintAndintTovoid = dart.constFn(dart.fnType(dart.void, [core.int, core.int, core.int])))();
var _StringSinkConversionSinkOfStringSink = () => (_StringSinkConversionSinkOfStringSink = dart.constFn(convert._StringSinkConversionSink$(core.StringSink)))();
var ListOfUint8List = () => (ListOfUint8List = dart.constFn(core.List$(typed_data.Uint8List)))();
var intToUint8List = () => (intToUint8List = dart.constFn(dart.fnType(typed_data.Uint8List, [core.int])))();
var dynamicAnddynamicToUint8List = () => (dynamicAnddynamicToUint8List = dart.constFn(dart.fnType(typed_data.Uint8List, [dart.dynamic, dart.dynamic])))();
var Uint8ListAndStringAndintTovoid = () => (Uint8ListAndStringAndintTovoid = dart.constFn(dart.fnType(dart.void, [typed_data.Uint8List, core.String, core.int])))();
var StringToint = () => (StringToint = dart.constFn(dart.fnType(core.int, [core.String])))();
var VoidToNever = () => (VoidToNever = dart.constFn(dart.fnType(dart.Never, [])))();
var StringAndListOfStringToNullN = () => (StringAndListOfStringToNullN = dart.constFn(dart.fnType(core.Null, [core.String, ListOfString()])))();
var HashMapOfString$StringN = () => (HashMapOfString$StringN = dart.constFn(collection.HashMap$(core.String, StringN())))();
var IdentityMapOfString$StringN = () => (IdentityMapOfString$StringN = dart.constFn(_js_helper.IdentityMap$(core.String, StringN())))();
var UnmodifiableMapViewOfString$StringN = () => (UnmodifiableMapViewOfString$StringN = dart.constFn(collection.UnmodifiableMapView$(core.String, StringN())))();
var StringAndStringNToNullN = () => (StringAndStringNToNullN = dart.constFn(dart.fnType(core.Null, [core.String, StringN()])))();
var StringNToString = () => (StringNToString = dart.constFn(dart.fnType(core.String, [StringN()])))();
var dynamicToNever = () => (dynamicToNever = dart.constFn(dart.fnType(dart.Never, [dart.dynamic])))();
var _EmptyStreamOfUint8List = () => (_EmptyStreamOfUint8List = dart.constFn(async._EmptyStream$(typed_data.Uint8List)))();
var Uint8ListToUint8List = () => (Uint8ListToUint8List = dart.constFn(dart.fnType(typed_data.Uint8List, [typed_data.Uint8List])))();
var dynamicToFutureOfHttpClientResponse = () => (dynamicToFutureOfHttpClientResponse = dart.constFn(dart.fnType(FutureOfHttpClientResponse(), [dart.dynamic])))();
var VoidToFutureOfHttpClientResponse = () => (VoidToFutureOfHttpClientResponse = dart.constFn(dart.fnType(FutureOfHttpClientResponse(), [])))();
var VoidToListNOfString = () => (VoidToListNOfString = dart.constFn(dart.fnType(ListNOfString(), [])))();
var boolToFutureOrOfHttpClientResponse = () => (boolToFutureOrOfHttpClientResponse = dart.constFn(dart.fnType(FutureOrOfHttpClientResponse(), [core.bool])))();
var SinkOfUint8List = () => (SinkOfUint8List = dart.constFn(core.Sink$(typed_data.Uint8List)))();
var CompleterOfvoid = () => (CompleterOfvoid = dart.constFn(async.Completer$(dart.void)))();
var EncodingN = () => (EncodingN = dart.constFn(dart.nullable(convert.Encoding)))();
var ListOfintToListOfint = () => (ListOfintToListOfint = dart.constFn(dart.fnType(ListOfint(), [ListOfint()])))();
var VoidToMap = () => (VoidToMap = dart.constFn(dart.fnType(core.Map, [])))();
var JSArrayOfMapOfString$dynamic = () => (JSArrayOfMapOfString$dynamic = dart.constFn(_interceptors.JSArray$(MapOfString$dynamic())))();
var VoidToListOfMapOfString$dynamic = () => (VoidToListOfMapOfString$dynamic = dart.constFn(dart.fnType(ListOfMapOfString$dynamic(), [])))();
var JSArrayOfFuture = () => (JSArrayOfFuture = dart.constFn(_interceptors.JSArray$(async.Future)))();
var ListToFutureOrOfHttpClientResponse = () => (ListToFutureOrOfHttpClientResponse = dart.constFn(dart.fnType(FutureOrOfHttpClientResponse(), [core.List])))();
var CompleterOfSocket = () => (CompleterOfSocket = dart.constFn(async.Completer$(io.Socket)))();
var StringToListOfString = () => (StringToListOfString = dart.constFn(dart.fnType(ListOfString(), [core.String])))();
var voidTovoid = () => (voidTovoid = dart.constFn(dart.fnType(dart.void, [dart.void])))();
var voidToFuture = () => (voidToFuture = dart.constFn(dart.fnType(async.Future, [dart.void])))();
var StreamControllerOfListOfint = () => (StreamControllerOfListOfint = dart.constFn(async.StreamController$(ListOfint())))();
var ListOfintTovoid = () => (ListOfintTovoid = dart.constFn(dart.fnType(dart.void, [ListOfint()])))();
var dynamicTo_HttpOutboundMessageN = () => (dynamicTo_HttpOutboundMessageN = dart.constFn(dart.fnType(_HttpOutboundMessageN(), [dart.dynamic])))();
var dynamicAnddynamicTo_HttpOutboundMessageN = () => (dynamicAnddynamicTo_HttpOutboundMessageN = dart.constFn(dart.fnType(_HttpOutboundMessageN(), [dart.dynamic, dart.dynamic])))();
var dynamicAndStackTraceToNullN = () => (dynamicAndStackTraceToNullN = dart.constFn(dart.fnType(core.Null, [dart.dynamic, core.StackTrace])))();
var SocketToSocket = () => (SocketToSocket = dart.constFn(dart.fnType(io.Socket, [io.Socket])))();
var SocketN = () => (SocketN = dart.constFn(dart.nullable(io.Socket)))();
var FutureOfSocketN = () => (FutureOfSocketN = dart.constFn(async.Future$(SocketN())))();
var SocketTovoid = () => (SocketTovoid = dart.constFn(dart.fnType(dart.void, [io.Socket])))();
var FutureOfSecureSocket = () => (FutureOfSecureSocket = dart.constFn(async.Future$(io.SecureSocket)))();
var _HashSetOfConnectionTask = () => (_HashSetOfConnectionTask = dart.constFn(collection._HashSet$(io.ConnectionTask)))();
var X509CertificateTobool = () => (X509CertificateTobool = dart.constFn(dart.fnType(core.bool, [io.X509Certificate])))();
var dynamicToFutureOrOf_ConnectionInfo = () => (dynamicToFutureOrOf_ConnectionInfo = dart.constFn(dart.fnType(FutureOrOf_ConnectionInfo(), [dart.dynamic])))();
var ConnectionTaskToFutureOf_ConnectionInfo = () => (ConnectionTaskToFutureOf_ConnectionInfo = dart.constFn(dart.fnType(FutureOf_ConnectionInfo(), [io.ConnectionTask])))();
var MapNOfString$String = () => (MapNOfString$String = dart.constFn(dart.nullable(MapOfString$String())))();
var Uri__ToString = () => (Uri__ToString = dart.constFn(dart.fnType(core.String, [core.Uri], {environment: MapNOfString$String()}, {})))();
var dynamicToFutureOf_ConnectionInfo = () => (dynamicToFutureOf_ConnectionInfo = dart.constFn(dart.fnType(FutureOf_ConnectionInfo(), [dart.dynamic])))();
var StringNToStringN = () => (StringNToStringN = dart.constFn(dart.fnType(StringN(), [StringN()])))();
var StreamOfUint8List = () => (StreamOfUint8List = dart.constFn(async.Stream$(typed_data.Uint8List)))();
var SocketToNullN = () => (SocketToNullN = dart.constFn(dart.fnType(core.Null, [io.Socket])))();
var TimerToNullN = () => (TimerToNullN = dart.constFn(dart.fnType(core.Null, [async.Timer])))();
var IterableOfMapEntry = () => (IterableOfMapEntry = dart.constFn(core.Iterable$(core.MapEntry)))();
var VoidToNdynamic = () => (VoidToNdynamic = dart.constFn(dart.nullable(VoidTodynamic())))();
var StringNToFutureOfWebSocket = () => (StringNToFutureOfWebSocket = dart.constFn(dart.fnType(FutureOfWebSocket(), [StringN()])))();
var VoidToFutureOrOfString = () => (VoidToFutureOrOfString = dart.constFn(dart.fnType(FutureOrOfString(), [])))();
var EventSinkOfListOfint = () => (EventSinkOfListOfint = dart.constFn(async.EventSink$(ListOfint())))();
var StringToNever = () => (StringToNever = dart.constFn(dart.fnType(dart.Never, [core.String])))();
var dynamicToMap = () => (dynamicToMap = dart.constFn(dart.fnType(core.Map, [dart.dynamic])))();
const CT = Object.create(null);
var _jsError$ = dart.privateName(dart, "_jsError");
var _type$ = dart.privateName(dart, "_type");
dart.applyMixin = function applyMixin(to, from) {
  to[dart._mixin] = from;
  let toProto = to.prototype;
  let fromProto = from.prototype;
  dart._copyMembers(toProto, fromProto);
  dart._mixinSignature(to, from, dart._methodSig);
  dart._mixinSignature(to, from, dart._fieldSig);
  dart._mixinSignature(to, from, dart._getterSig);
  dart._mixinSignature(to, from, dart._setterSig);
  let mixinOnFn = from[dart.mixinOn];
  if (mixinOnFn != null) {
    let proto = mixinOnFn(to.__proto__).prototype;
    dart._copyMembers(toProto, proto);
  }
};
dart._copyMembers = function _copyMembers(to, from) {
  let names = dart.getOwnNamesAndSymbols(from);
  for (let i = 0, n = names.length; i < n; i = i + 1) {
    let name = names[i];
    if (name === "constructor") continue;
    dart._copyMember(to, from, name);
  }
  return to;
};
dart._copyMember = function _copyMember(to, from, name) {
  let desc = dart.getOwnPropertyDescriptor(core.Object.as(from), core.Object.as(name));
  if (name == Symbol.iterator) {
    let existing = dart.getOwnPropertyDescriptor(core.Object.as(to), core.Object.as(name));
    if (existing != null) {
      if (existing.writable) {
        to[name] = desc.value;
      }
      return;
    }
  }
  let getter = desc.get;
  let setter = desc.set;
  if (getter != null) {
    if (setter == null) {
      let obj = desc.set = {
        __proto__: to.__proto__,
        set [name](x) {
          return super[name] = x;
        }
      };
      desc.set = dart.getOwnPropertyDescriptor(obj, core.Object.as(name)).set;
    }
  } else if (setter != null) {
    if (getter == null) {
      let obj = desc.get = {
        __proto__: to.__proto__,
        get [name]() {
          return super[name];
        }
      };
      desc.get = dart.getOwnPropertyDescriptor(obj, core.Object.as(name)).get;
    }
  }
  dart.defineProperty(core.Object.as(to), core.Object.as(name), core.Object.as(desc));
};
dart._mixinSignature = function _mixinSignature(to, from, kind) {
  to[kind] = () => {
    let baseMembers = dart._getMembers(to.__proto__, kind);
    let fromMembers = dart._getMembers(from, kind);
    if (fromMembers == null) return baseMembers;
    let toSignature = {__proto__: baseMembers};
    dart.copyProperties(toSignature, fromMembers);
    return toSignature;
  };
};
dart.getMixin = function getMixin(clazz) {
  return Object.hasOwnProperty.call(clazz, dart._mixin) ? clazz[dart._mixin] : null;
};
dart.getImplements = function getImplements(clazz) {
  return Object.hasOwnProperty.call(clazz, dart.implements) ? clazz[dart.implements] : null;
};
dart.normalizeFutureOr = function normalizeFutureOr(typeConstructor, setBaseClass) {
  let genericFutureOrType = dart.generic(typeConstructor, setBaseClass);
  function normalize(typeArg) {
    if (typeArg == void 0) return dart.dynamic;
    if (dart._isTop(typeArg) || typeArg === core.Object || typeArg instanceof dart.LegacyType && typeArg.type === core.Object) {
      return typeArg;
    }
    if (typeArg === dart.Never) {
      return async.Future$(typeArg);
    }
    if (typeArg === core.Null) {
      return dart.nullable(async.Future$(typeArg));
    }
    let genericType = genericFutureOrType(typeArg);
    genericType[dart._originalDeclaration] = normalize;
    dart.addTypeCaches(genericType);
    return genericType;
  }
  return normalize;
};
dart.generic = function generic(typeConstructor, setBaseClass) {
  let length = typeConstructor.length;
  if (length < 1) {
    dart.throwInternalError('must have at least one generic type argument');
  }
  let resultMap = new Map();
  function makeGenericType(...args) {
    if (args.length != length && args.length != 0) {
      dart.throwInternalError('requires ' + length + ' or 0 type arguments');
    }
    while (args.length < length)
      args.push(dart.dynamic);
    let value = resultMap;
    for (let i = 0; i < length; i++) {
      let arg = args[i];
      if (arg == null) {
        dart.throwInternalError('type arguments should not be null: ' + typeConstructor);
      }
      let map = value;
      value = map.get(arg);
      if (value === void 0) {
        if (i + 1 == length) {
          value = typeConstructor.apply(null, args);
          if (value) {
            value[dart._typeArguments] = args;
            value[dart._originalDeclaration] = makeGenericType;
          }
          map.set(arg, value);
          if (setBaseClass != null) setBaseClass.apply(null, args);
        } else {
          value = new Map();
          map.set(arg, value);
        }
      }
    }
    return value;
  }
  makeGenericType[dart._genericTypeCtor] = typeConstructor;
  dart.addTypeCaches(makeGenericType);
  return makeGenericType;
};
dart.getGenericClass = function getGenericClass(type) {
  return dart.safeGetOwnProperty(type, dart._originalDeclaration);
};
dart.getGenericArgs = function getGenericArgs(type) {
  return dart.safeGetOwnProperty(type, dart._typeArguments);
};
dart.getGenericArgVariances = function getGenericArgVariances(type) {
  return dart.safeGetOwnProperty(type, dart._variances);
};
dart.setGenericArgVariances = function setGenericArgVariances(f, variances) {
  return f[dart._variances] = variances;
};
dart.getGenericTypeFormals = function getGenericTypeFormals(genericClass) {
  return dart._typeFormalsFromFunction(dart.getGenericTypeCtor(genericClass));
};
dart.instantiateClass = function instantiateClass(genericClass, typeArgs) {
  if (genericClass == null) dart.nullFailed(L0, 243, 32, "genericClass");
  if (typeArgs == null) dart.nullFailed(L0, 243, 59, "typeArgs");
  return genericClass.apply(null, typeArgs);
};
dart.getConstructors = function getConstructors(value) {
  return dart._getMembers(value, dart._constructorSig);
};
dart.getMethods = function getMethods(value) {
  return dart._getMembers(value, dart._methodSig);
};
dart.getFields = function getFields(value) {
  return dart._getMembers(value, dart._fieldSig);
};
dart.getGetters = function getGetters(value) {
  return dart._getMembers(value, dart._getterSig);
};
dart.getSetters = function getSetters(value) {
  return dart._getMembers(value, dart._setterSig);
};
dart.getStaticMethods = function getStaticMethods(value) {
  return dart._getMembers(value, dart._staticMethodSig);
};
dart.getStaticFields = function getStaticFields(value) {
  return dart._getMembers(value, dart._staticFieldSig);
};
dart.getStaticGetters = function getStaticGetters(value) {
  return dart._getMembers(value, dart._staticGetterSig);
};
dart.getStaticSetters = function getStaticSetters(value) {
  return dart._getMembers(value, dart._staticSetterSig);
};
dart.getGenericTypeCtor = function getGenericTypeCtor(value) {
  return value[dart._genericTypeCtor];
};
dart.getType = function getType(obj) {
  if (obj == null) return core.Object;
  if (obj.__proto__ == null) {
    return dart.global.Object.prototype.constructor;
  }
  return obj.__proto__.constructor;
};
dart.getLibraryUri = function getLibraryUri(value) {
  return value[dart._libraryUri];
};
dart.setLibraryUri = function setLibraryUri(f, uri) {
  return f[dart._libraryUri] = uri;
};
dart.isJsInterop = function isJsInterop(obj) {
  if (obj == null) return false;
  if (typeof obj === "function") {
    return obj[dart._runtimeType] == null;
  }
  if (typeof obj !== "object") return false;
  if (obj[dart._extensionType] != null) return false;
  return !(obj instanceof core.Object);
};
dart.getMethodType = function getMethodType(type, name) {
  let m = dart.getMethods(type);
  return m != null ? m[name] : null;
};
dart.getSetterType = function getSetterType(type, name) {
  let setters = dart.getSetters(type);
  if (setters != null) {
    let type = setters[name];
    if (type != null) {
      return type;
    }
  }
  let fields = dart.getFields(type);
  if (fields != null) {
    let fieldInfo = fields[name];
    if (fieldInfo != null && !fieldInfo.isFinal) {
      return fieldInfo.type;
    }
  }
  return null;
};
dart.finalFieldType = function finalFieldType(type, metadata) {
  return {type: type, isFinal: true, metadata: metadata};
};
dart.fieldType = function fieldType(type, metadata) {
  return {type: type, isFinal: false, metadata: metadata};
};
dart.classGetConstructorType = function classGetConstructorType(cls, name) {
  if (cls == null) return null;
  if (name == null) name = "new";
  let ctors = dart.getConstructors(cls);
  return ctors != null ? ctors[name] : null;
};
dart.setMethodSignature = function setMethodSignature(f, sigF) {
  return f[dart._methodSig] = sigF;
};
dart.setFieldSignature = function setFieldSignature(f, sigF) {
  return f[dart._fieldSig] = sigF;
};
dart.setGetterSignature = function setGetterSignature(f, sigF) {
  return f[dart._getterSig] = sigF;
};
dart.setSetterSignature = function setSetterSignature(f, sigF) {
  return f[dart._setterSig] = sigF;
};
dart.setConstructorSignature = function setConstructorSignature(f, sigF) {
  return f[dart._constructorSig] = sigF;
};
dart.setStaticMethodSignature = function setStaticMethodSignature(f, sigF) {
  return f[dart._staticMethodSig] = sigF;
};
dart.setStaticFieldSignature = function setStaticFieldSignature(f, sigF) {
  return f[dart._staticFieldSig] = sigF;
};
dart.setStaticGetterSignature = function setStaticGetterSignature(f, sigF) {
  return f[dart._staticGetterSig] = sigF;
};
dart.setStaticSetterSignature = function setStaticSetterSignature(f, sigF) {
  return f[dart._staticSetterSig] = sigF;
};
dart._getMembers = function _getMembers(type, kind) {
  let sig = type[kind];
  return typeof sig == "function" ? type[kind] = sig() : sig;
};
dart._hasMember = function _hasMember(type, kind, name) {
  let sig = dart._getMembers(type, kind);
  return sig != null && name in sig;
};
dart.hasMethod = function hasMethod(type, name) {
  return dart._hasMember(type, dart._methodSig, name);
};
dart.hasGetter = function hasGetter(type, name) {
  return dart._hasMember(type, dart._getterSig, name);
};
dart.hasSetter = function hasSetter(type, name) {
  return dart._hasMember(type, dart._setterSig, name);
};
dart.hasField = function hasField(type, name) {
  return dart._hasMember(type, dart._fieldSig, name);
};
dart._installProperties = function _installProperties(jsProto, dartType, installedParent) {
  if (dartType === core.Object) {
    dart._installPropertiesForObject(jsProto);
    return;
  }
  let dartSupertype = dartType.__proto__;
  if (dartSupertype !== installedParent) {
    dart._installProperties(jsProto, dartSupertype, installedParent);
  }
  let dartProto = dartType.prototype;
  dart.copyTheseProperties(jsProto, dartProto, dart.getOwnPropertySymbols(dartProto));
};
dart._installPropertiesForObject = function _installPropertiesForObject(jsProto) {
  let coreObjProto = core.Object.prototype;
  let names = dart.getOwnPropertyNames(coreObjProto);
  for (let i = 0, n = names.length; i < n; i = i + 1) {
    let name = names[i];
    if (name === "constructor") continue;
    let desc = dart.getOwnPropertyDescriptor(coreObjProto, name);
    dart.defineProperty(core.Object.as(jsProto), dart.dartx[name], core.Object.as(desc));
  }
};
dart._installPropertiesForGlobalObject = function _installPropertiesForGlobalObject(jsProto) {
  dart._installPropertiesForObject(jsProto);
  jsProto[dartx.toString] = function() {
    return this.toString();
  };
  dart.identityEquals == null ? dart.identityEquals = jsProto[dartx._equals] : null;
};
dart._applyExtension = function _applyExtension(jsType, dartExtType) {
  if (jsType == null) return;
  let jsProto = jsType.prototype;
  if (jsProto == null) return;
  if (dartExtType === core.Object) {
    dart._installPropertiesForGlobalObject(jsProto);
    return;
  }
  if (jsType === dart.global.Object) {
    let extName = dartExtType.name;
    dart._warn(dart.str("Attempting to install properties from non-Object type '") + dart.str(extName) + dart.str("' onto the native JS Object."));
    return;
  }
  dart._installProperties(jsProto, dartExtType, jsProto[dart._extensionType]);
  if (dartExtType !== _interceptors.JSFunction) {
    jsProto[dart._extensionType] = dartExtType;
  }
  jsType[dart._methodSig] = dartExtType[dart._methodSig];
  jsType[dart._fieldSig] = dartExtType[dart._fieldSig];
  jsType[dart._getterSig] = dartExtType[dart._getterSig];
  jsType[dart._setterSig] = dartExtType[dart._setterSig];
};
dart.applyExtension = function applyExtension(name, nativeObject) {
  let dartExtType = dart._extensionMap.get(name);
  let jsType = nativeObject.constructor;
  dart._applyExtension(jsType, dartExtType);
};
dart.applyAllExtensions = function applyAllExtensions(global) {
  dart._extensionMap.forEach((dartExtType, name) => dart._applyExtension(global[name], dartExtType));
};
dart.registerExtension = function registerExtension(name, dartExtType) {
  dart._extensionMap.set(name, dartExtType);
  let jsType = dart.global[name];
  dart._applyExtension(jsType, dartExtType);
};
dart.defineExtensionMethods = function defineExtensionMethods(type, memberNames) {
  if (memberNames == null) dart.nullFailed(L0, 501, 39, "memberNames");
  let proto = type.prototype;
  for (let name of memberNames) {
    proto[dartx[name]] = proto[name];
  }
};
dart.defineExtensionAccessors = function defineExtensionAccessors(type, memberNames) {
  if (memberNames == null) dart.nullFailed(L0, 509, 46, "memberNames");
  let proto = type.prototype;
  for (let name of memberNames) {
    let member = null;
    let p = proto;
    for (;; p = p.__proto__) {
      member = dart.getOwnPropertyDescriptor(p, core.Object.as(name));
      if (member != null) break;
    }
    dart.defineProperty(proto, dartx[name], core.Object.as(member));
  }
};
dart.definePrimitiveHashCode = function definePrimitiveHashCode(proto) {
  dart.defineProperty(core.Object.as(proto), dart.identityHashCode_, core.Object.as(dart.getOwnPropertyDescriptor(core.Object.as(proto), core.Object.as($hashCode))));
};
dart.setBaseClass = function setBaseClass(derived, base) {
  derived.prototype.__proto__ = base.prototype;
  derived.__proto__ = base;
};
dart.setExtensionBaseClass = function setExtensionBaseClass(dartType, jsType) {
  let dartProto = dartType.prototype;
  dartProto[dart._extensionType] = dartType;
  dartProto.__proto__ = jsType.prototype;
};
dart.addTypeTests = function addTypeTests(ctor, isClass) {
  if (isClass == null) isClass = Symbol("_is_" + ctor.name);
  ctor.prototype[isClass] = true;
  ctor.is = function is_C(obj) {
    return obj != null && (obj[isClass] || dart.is(obj, this));
  };
  ctor.as = function as_C(obj) {
    if (obj != null && obj[isClass]) return obj;
    return dart.as(obj, this);
  };
};
dart.addTypeCaches = function addTypeCaches(type) {
  type[dart._cachedLegacy] = void 0;
  type[dart._cachedNullable] = void 0;
  let subtypeCacheMap = new Map();
  type[dart._subtypeCache] = subtypeCacheMap;
  dart._cacheMaps.push(subtypeCacheMap);
};
dart.argumentError = function argumentError(value) {
  dart.throw(new core.ArgumentError.value(value));
};
dart.throwUnimplementedError = function throwUnimplementedError(message) {
  if (message == null) dart.nullFailed(L1, 16, 32, "message");
  dart.throw(new core.UnimplementedError.new(message));
};
dart.assertFailed = function assertFailed(message, fileUri = null, line = null, column = null, conditionSource = null) {
  dart.throw(new _js_helper.AssertionErrorImpl.new(message, fileUri, line, column, conditionSource));
};
dart._nullFailedMessage = function _nullFailedMessage(variableName) {
  return dart.str("A null value was passed into a non-nullable parameter: ") + dart.str(variableName) + dart.str(".");
};
dart.nullFailed = function nullFailed(fileUri, line, column, variable) {
  if (dart._nonNullAsserts) {
    dart.throw(new _js_helper.AssertionErrorImpl.new(dart._nullFailedMessage(variable), fileUri, line, column, dart.str(variable) + dart.str(" != null")));
  }
  let key = dart.str(fileUri) + dart.str(":") + dart.str(line) + dart.str(":") + dart.str(column);
  if (!dart._nullFailedSet.has(key)) {
    dart._nullFailedSet.add(key);
    dart._nullWarn(dart._nullFailedMessage(variable));
  }
};
dart.throwCyclicInitializationError = function throwCyclicInitializationError(field = null) {
  dart.throw(new core.CyclicInitializationError.new(field));
};
dart.throwNullValueError = function throwNullValueError() {
  dart.throw(new core.NoSuchMethodError.new(null, new _internal.Symbol.new("<Unexpected Null Value>"), null, null));
};
dart.castError = function castError(obj, expectedType) {
  let actualType = dart.getReifiedType(obj);
  let message = dart._castErrorMessage(actualType, expectedType);
  dart.throw(new _js_helper.TypeErrorImpl.new(message));
};
dart._castErrorMessage = function _castErrorMessage(from, to) {
  return dart.str("Expected a value of type '") + dart.str(dart.typeName(to)) + dart.str("', ") + dart.str("but got one of type '") + dart.str(dart.typeName(from)) + dart.str("'");
};
dart.getThrown = function getThrown(error) {
  if (error != null) {
    let value = error[dart._thrownValue];
    if (value != null) return value;
  }
  return error;
};
dart.stackTrace = function stackTrace(error) {
  if (!(error instanceof Error)) {
    return new dart._StackTrace.missing(error);
  }
  let trace = error[dart._stackTrace];
  if (trace != null) return trace;
  return error[dart._stackTrace] = new dart._StackTrace.new(error);
};
dart.stackTraceForError = function stackTraceForError(error) {
  if (error == null) dart.nullFailed(L1, 140, 37, "error");
  return dart.stackTrace(error[dart._jsError]);
};
dart.rethrow = function rethrow_(error) {
  if (error == null) dart.nullFailed(L1, 149, 22, "error");
  throw error;
};
dart.throw = function throw_(exception) {
  throw new dart.DartError(exception);
};
dart.createErrorWithStack = function createErrorWithStack(exception, trace) {
  if (exception == null) dart.nullFailed(L1, 232, 37, "exception");
  if (trace == null) {
    let error = exception[dart._jsError];
    return error != null ? error : new dart.DartError(exception);
  }
  if (dart._StackTrace.is(trace)) {
    let originalError = trace[_jsError$];
    if (core.identical(exception, dart.getThrown(originalError))) {
      return originalError;
    }
  }
  return new dart.RethrownDartError(exception, trace);
};
dart.stackPrint = function stackPrint(error) {
  if (error == null) dart.nullFailed(L1, 250, 24, "error");
  console.log(error.stack ? error.stack : "No stack trace for: " + error);
};
dart.bind = function bind(obj, name, method) {
  if (obj == null) obj = _interceptors.jsNull;
  if (method == null) method = obj[name];
  let f = method.bind(obj);
  f._boundObject = obj;
  f._boundMethod = method;
  f[dart._runtimeType] = dart.getMethodType(dart.getType(obj), name);
  return f;
};
dart.bindCall = function bindCall(obj, name) {
  if (obj == null) return null;
  let ftype = dart.getMethodType(dart.getType(obj), name);
  if (ftype == null) return null;
  let method = obj[name];
  let f = method.bind(obj);
  f._boundObject = obj;
  f._boundMethod = method;
  f[dart._runtimeType] = ftype;
  return f;
};
dart.gbind = function gbind(f, ...typeArgs) {
  if (typeArgs == null) dart.nullFailed(L2, 85, 21, "typeArgs");
  let type = f[dart._runtimeType];
  type.checkBounds(typeArgs);
  let result = (...args) => f.apply(null, typeArgs.concat(args));
  return dart.fn(result, type.instantiate(typeArgs));
};
dart.dloadRepl = function dloadRepl(obj, field) {
  return dart.dload(obj, dart.replNameLookup(obj, field));
};
dart.dload = function dload(obj, field) {
  if (typeof obj == "function" && field == "call") {
    return obj;
  }
  let f = dart._canonicalMember(obj, field);
  _debugger.trackCall(obj);
  if (f != null) {
    let type = dart.getType(obj);
    if (dart.test(dart.hasField(type, f)) || dart.test(dart.hasGetter(type, f))) return obj[f];
    if (dart.test(dart.hasMethod(type, f))) return dart.bind(obj, f, null);
    if (dart.test(dart.isJsInterop(obj))) return obj[f];
  }
  return dart.noSuchMethod(obj, new dart.InvocationImpl.new(field, [], {isGetter: true}));
};
dart._stripGenericArguments = function _stripGenericArguments(type) {
  let genericClass = dart.getGenericClass(type);
  if (genericClass != null) return genericClass();
  return type;
};
dart.dputRepl = function dputRepl(obj, field, value) {
  return dart.dput(obj, dart.replNameLookup(obj, field), value);
};
dart.dput = function dput(obj, field, value) {
  let f = dart._canonicalMember(obj, field);
  _debugger.trackCall(obj);
  if (f != null) {
    let setterType = dart.getSetterType(dart.getType(obj), f);
    if (setterType != null) {
      return obj[f] = setterType.as(value);
    }
    if (dart.test(dart.isJsInterop(obj))) return obj[f] = value;
  }
  dart.noSuchMethod(obj, new dart.InvocationImpl.new(field, [value], {isSetter: true}));
  return value;
};
dart._argumentErrors = function _argumentErrors(type, actuals, namedActuals) {
  if (type == null) dart.nullFailed(L2, 147, 38, "type");
  if (actuals == null) dart.nullFailed(L2, 147, 49, "actuals");
  let actualsCount = actuals.length;
  let required = type.args;
  let requiredCount = required.length;
  if (actualsCount < requiredCount) {
    return dart.str("Dynamic call with too few arguments. ") + dart.str("Expected: ") + dart.str(requiredCount) + dart.str(" Actual: ") + dart.str(actualsCount);
  }
  let extras = actualsCount - requiredCount;
  let optionals = type.optionals;
  if (extras > optionals.length) {
    return dart.str("Dynamic call with too many arguments. ") + dart.str("Expected: ") + dart.str(requiredCount) + dart.str(" Actual: ") + dart.str(actualsCount);
  }
  let names = null;
  let named = type.named;
  let requiredNamed = type.requiredNamed;
  if (namedActuals != null) {
    names = dart.getOwnPropertyNames(core.Object.as(namedActuals));
    for (let name of names) {
      if (!(named.hasOwnProperty(name) || requiredNamed.hasOwnProperty(name))) {
        return dart.str("Dynamic call with unexpected named argument '") + dart.str(name) + dart.str("'.");
      }
    }
  }
  let requiredNames = dart.getOwnPropertyNames(core.Object.as(requiredNamed));
  if (dart.test(requiredNames[$isNotEmpty])) {
    let missingRequired = namedActuals == null ? requiredNames : requiredNames[$where](name => !namedActuals.hasOwnProperty(name));
    if (dart.test(missingRequired[$isNotEmpty])) {
      let error = dart.str("Dynamic call with missing required named arguments: ") + dart.str(missingRequired[$join](", ")) + dart.str(".");
      if (!false) {
        dart._nullWarn(error);
      } else {
        return error;
      }
    }
  }
  for (let i = 0; i < requiredCount; i = i + 1) {
    required[i].as(actuals[i]);
  }
  for (let i = 0; i < extras; i = i + 1) {
    optionals[i].as(actuals[i + requiredCount]);
  }
  if (names != null) {
    for (let name of names) {
      (named[name] || requiredNamed[name]).as(namedActuals[name]);
    }
  }
  return null;
};
dart._toSymbolName = function _toSymbolName(symbol) {
  let str = symbol.toString();
  return str.substring(7, str.length - 1);
};
dart._toDisplayName = function _toDisplayName(name) {
  if (name[0] === '_') {
    switch (name) {
      case '_get':
      {
        return '[]';
      }
      case '_set':
      {
        return '[]=';
      }
      case '_negate':
      {
        return 'unary-';
      }
      case '_constructor':
      case '_prototype':
      {
        return name.substring(1);
      }
    }
  }
  return name;
};
dart._dartSymbol = function _dartSymbol(name) {
  return typeof name === "symbol" ? dart.const(new _js_helper.PrivateSymbol.new(dart._toSymbolName(name), name)) : dart.const(new _internal.Symbol.new(dart._toDisplayName(name)));
};
dart._setterSymbol = function _setterSymbol(name) {
  return typeof name === "symbol" ? dart.const(new _js_helper.PrivateSymbol.new(dart._toSymbolName(name) + "=", name)) : dart.const(new _internal.Symbol.new(dart._toDisplayName(name) + "="));
};
dart._checkAndCall = function _checkAndCall(f, ftype, obj, typeArgs, args, named, displayName) {
  _debugger.trackCall(obj);
  let originalTarget = obj === void 0 ? f : obj;
  function callNSM(errorMessage) {
    return dart.noSuchMethod(originalTarget, new dart.InvocationImpl.new(displayName, args, {namedArguments: named, typeArguments: typeArgs || [], isMethod: true, failureMessage: errorMessage}));
  }
  if (f == null) return callNSM('Dynamic call of null.');
  if (!(f instanceof Function)) {
    if (f != null) {
      originalTarget = f;
      f = dart.bindCall(f, dart._canonicalMember(f, "call"));
      ftype = null;
      displayName = "call";
    }
    if (f == null) return callNSM("Dynamic call of object has no instance method 'call'.");
  }
  if (ftype == null) ftype = f[dart._runtimeType];
  if (ftype == null) {
    if (typeArgs != null) {
      dart.throwTypeError('call to JS object `' + obj + '` with type arguments <' + typeArgs + '> is not supported.');
    }
    if (named != null) args.push(named);
    return f.apply(obj, args);
  }
  if (ftype instanceof dart.GenericFunctionType) {
    let formalCount = ftype.formalCount;
    if (typeArgs == null) {
      typeArgs = ftype.instantiateDefaultBounds();
    } else if (typeArgs.length != formalCount) {
      return callNSM('Dynamic call with incorrect number of type arguments. ' + 'Expected: ' + formalCount + ' Actual: ' + typeArgs.length);
    } else {
      ftype.checkBounds(typeArgs);
    }
    ftype = ftype.instantiate(typeArgs);
  } else if (typeArgs != null) {
    return callNSM('Dynamic call with unexpected type arguments. ' + 'Expected: 0 Actual: ' + typeArgs.length);
  }
  let errorMessage = dart._argumentErrors(ftype, args, named);
  if (errorMessage == null) {
    if (typeArgs != null) args = typeArgs.concat(args);
    if (named != null) args.push(named);
    return f.apply(obj, args);
  }
  return callNSM(errorMessage);
};
dart.dcall = function dcall(f, args, named = null) {
  return dart._checkAndCall(f, null, void 0, null, args, named, f.name);
};
dart.dgcall = function dgcall(f, typeArgs, args, named = null) {
  return dart._checkAndCall(f, null, void 0, typeArgs, args, named, f.name || 'call');
};
dart.replNameLookup = function replNameLookup(object, field) {
  let rawField = field;
  if (typeof field == 'symbol') {
    if (field in object) return field;
    field = field.toString();
    field = field.substring('Symbol('.length, field.length - 1);
  } else if (field.charAt(0) != '_') {
    return field;
  }
  if (field in object) return field;
  let proto = object;
  while (proto !== null) {
    let symbols = Object.getOwnPropertySymbols(proto);
    let target = 'Symbol(' + field + ')';
    for (let s = 0; s < symbols.length; s++) {
      let sym = symbols[s];
      if (target == sym.toString()) return sym;
    }
    proto = proto.__proto__;
  }
  return rawField;
};
dart.callMethod = function callMethod(obj, name, typeArgs, args, named, displayName) {
  if (typeof obj == "function" && name == "call") {
    return dart.dgcall(obj, typeArgs, args, named);
  }
  let symbol = dart._canonicalMember(obj, name);
  if (symbol == null) {
    return dart.noSuchMethod(obj, new dart.InvocationImpl.new(displayName, ListOfObjectN().as(args), {isMethod: true}));
  }
  let f = obj != null ? obj[symbol] : null;
  let type = dart.getType(obj);
  let ftype = dart.getMethodType(type, symbol);
  return dart._checkAndCall(f, ftype, obj, typeArgs, args, named, displayName);
};
dart.dsend = function dsend(obj, method, args, named = null) {
  return dart.callMethod(obj, method, null, args, named, method);
};
dart.dgsend = function dgsend(obj, typeArgs, method, args, named = null) {
  return dart.callMethod(obj, method, typeArgs, args, named, method);
};
dart.dsendRepl = function dsendRepl(obj, method, args, named = null) {
  return dart.callMethod(obj, dart.replNameLookup(obj, method), null, args, named, method);
};
dart.dgsendRepl = function dgsendRepl(obj, typeArgs, method, args, named = null) {
  return dart.callMethod(obj, dart.replNameLookup(obj, method), typeArgs, args, named, method);
};
dart.dindex = function dindex(obj, index) {
  return dart.callMethod(obj, "_get", null, [index], null, "[]");
};
dart.dsetindex = function dsetindex(obj, index, value) {
  return dart.callMethod(obj, "_set", null, [index, value], null, "[]=");
};
dart.is = function instanceOf(obj, type) {
  if (obj == null) {
    return type === core.Null || dart._isTop(type) || type instanceof dart.NullableType;
  }
  return dart.isSubtypeOf(core.Object.as(dart.getReifiedType(obj)), core.Object.as(type));
};
dart.as = function cast(obj, type) {
  if (obj == null && !false) {
    dart._nullWarnOnType(type);
    return obj;
  } else {
    let actual = dart.getReifiedType(obj);
    if (dart.isSubtypeOf(core.Object.as(actual), core.Object.as(type))) return obj;
  }
  return dart.castError(obj, type);
};
dart.test = function test(obj) {
  if (obj == null) dart.throw(new _js_helper.BooleanConversionAssertionError.new());
  return obj;
};
dart.dtest = function dtest(obj) {
  if (!(typeof obj == 'boolean')) dart.booleanConversionFailed(false ? obj : dart.test(boolN().as(obj)));
  return obj;
};
dart.booleanConversionFailed = function booleanConversionFailed(obj) {
  let actual = dart.typeName(dart.getReifiedType(obj));
  dart.throw(new _js_helper.TypeErrorImpl.new(dart.str("type '") + dart.str(actual) + dart.str("' is not a 'bool' in boolean expression")));
};
dart.asInt = function asInt(obj) {
  if (Math.floor(obj) != obj) {
    if (obj == null && !false) {
      dart._nullWarnOnType(core.int);
      return null;
    } else {
      dart.castError(obj, core.int);
    }
  }
  return obj;
};
dart.asNullableInt = function asNullableInt(obj) {
  return obj == null ? null : dart.asInt(obj);
};
dart.notNull = function _notNull(x) {
  if (x == null) dart.throwNullValueError();
  return x;
};
dart.nullCast = function nullCast(x, type) {
  if (x == null) {
    if (!false) {
      dart._nullWarnOnType(type);
    } else {
      dart.castError(x, type);
    }
  }
  return x;
};
dart.nullCheck = function nullCheck(x) {
  if (x == null) dart.throw(new _js_helper.TypeErrorImpl.new("Unexpected null value."));
  return x;
};
dart._lookupNonTerminal = function _lookupNonTerminal(map, key) {
  if (map == null) dart.nullFailed(L2, 529, 34, "map");
  let result = map.get(key);
  if (result != null) return result;
  map.set(key, result = new Map());
  return dart.nullCheck(result);
};
dart.constMap = function constMap(K, V, elements) {
  if (elements == null) dart.nullFailed(L2, 536, 34, "elements");
  let count = elements[$length];
  let map = dart._lookupNonTerminal(dart.constantMaps, count);
  for (let i = 0; i < count; i = i + 1) {
    map = dart._lookupNonTerminal(map, elements[i]);
  }
  map = dart._lookupNonTerminal(map, dart.wrapType(K));
  let result = map.get(V);
  if (result != null) return result;
  result = new (_js_helper.ImmutableMap$(K, V)).from(elements);
  map.set(V, result);
  return result;
};
dart._createImmutableSet = function _createImmutableSet(E, elements) {
  if (elements == null) dart.nullFailed(L2, 554, 42, "elements");
  dart._immutableSetConstructor == null ? dart._immutableSetConstructor = dart.getLibrary("dart:collection")._ImmutableSet$ : null;
  return new (dart._immutableSetConstructor(E)).from(elements);
};
dart.constSet = function constSet(E, elements) {
  if (elements == null) dart.nullFailed(L2, 560, 31, "elements");
  let count = elements[$length];
  let map = dart._lookupNonTerminal(dart.constantSets, count);
  for (let i = 0; i < count; i = i + 1) {
    map = dart._lookupNonTerminal(map, elements[i]);
  }
  let result = map.get(E);
  if (result != null) return result;
  result = dart._createImmutableSet(E, elements);
  map.set(E, result);
  return result;
};
dart.multiKeyPutIfAbsent = function multiKeyPutIfAbsent(map, keys, valueFn) {
  for (let k of keys) {
    let value = map.get(k);
    if (!value) {
      map.set(k, value = new Map());
    }
    map = value;
  }
  if (map.has(dart._value)) return map.get(dart._value);
  let value = valueFn();
  map.set(dart._value, value);
  return value;
};
dart.const = function const_(obj) {
  let names = dart.getOwnNamesAndSymbols(obj);
  let count = names.length;
  let map = dart._lookupNonTerminal(dart.constants, count);
  for (let i = 0; i < count; i++) {
    let name = names[i];
    map = dart._lookupNonTerminal(map, name);
    map = dart._lookupNonTerminal(map, obj[name]);
  }
  let type = dart.getReifiedType(obj);
  let value = map.get(type);
  if (value) return value;
  map.set(type, obj);
  return obj;
};
dart.constList = function constList(elements, elementType) {
  let count = elements.length;
  let map = dart._lookupNonTerminal(dart.constantLists, count);
  for (let i = 0; i < count; i++) {
    map = dart._lookupNonTerminal(map, elements[i]);
  }
  let value = map.get(elementType);
  if (value) return value;
  _interceptors.JSArray$(elementType).unmodifiable(elements);
  map.set(elementType, elements);
  return elements;
};
dart.constFn = function constFn(x) {
  return () => x;
};
dart.extensionSymbol = function extensionSymbol(name) {
  if (name == null) dart.nullFailed(L2, 678, 24, "name");
  return dartx[name];
};
dart.equals = function equals(x, y) {
  return x == null ? y == null : x[$_equals](y);
};
dart.hashCode = function hashCode(obj) {
  return obj == null ? 0 : obj[$hashCode];
};
dart.toString = function _toString(obj) {
  if (obj == null) return "null";
  if (typeof obj == 'string') return obj;
  return obj[$toString]();
};
dart.str = function str(obj) {
  if (obj == null) return "null";
  if (typeof obj == 'string') return obj;
  return core.String.as(dart.notNull(obj[$toString]()));
};
dart.noSuchMethod = function noSuchMethod(obj, invocation) {
  if (invocation == null) dart.nullFailed(L2, 714, 30, "invocation");
  if (obj == null) dart.defaultNoSuchMethod(obj, invocation);
  return obj[$noSuchMethod](invocation);
};
dart.defaultNoSuchMethod = function defaultNoSuchMethod(obj, i) {
  if (i == null) dart.nullFailed(L2, 720, 37, "i");
  dart.throw(new core.NoSuchMethodError.withInvocation(obj, i));
};
dart.runtimeType = function runtimeType(obj) {
  return obj == null ? dart.wrapType(core.Null) : obj[dartx.runtimeType];
};
dart._canonicalMember = function _canonicalMember(obj, name) {
  if (typeof name === "symbol") return name;
  if (obj != null && obj[dart._extensionType] != null) {
    return dartx[name];
  }
  if (name == "constructor" || name == "prototype") {
    name = "+" + name;
  }
  return name;
};
dart.loadLibrary = function loadLibrary() {
  return async.Future.value();
};
dart.defineLazy = function defineLazy(to, from, useOldSemantics) {
  if (useOldSemantics == null) dart.nullFailed(L2, 772, 32, "useOldSemantics");
  for (let name of dart.getOwnNamesAndSymbols(from)) {
    if (dart.test(useOldSemantics)) {
      dart.defineLazyFieldOld(to, name, dart.getOwnPropertyDescriptor(core.Object.as(from), core.Object.as(name)));
    } else {
      dart.defineLazyField(to, name, dart.getOwnPropertyDescriptor(core.Object.as(from), core.Object.as(name)));
    }
  }
};
dart.defineLazyField = function defineLazyField(to, name, desc) {
  const initializer = desc.get;
  let init = initializer;
  let value = null;
  let executed = false;
  desc.get = function() {
    if (init == null) return value;
    if (!executed) {
      dart._resetFields.push(() => {
        init = initializer;
        value = null;
        executed = false;
      });
      executed = true;
    }
    value = init();
    init = null;
    return value;
  };
  desc.configurable = true;
  if (desc.set != null) {
    desc.set = function(x) {
      init = null;
      value = x;
    };
  }
  return dart.defineProperty(core.Object.as(to), core.Object.as(name), core.Object.as(desc));
};
dart.defineLazyFieldOld = function defineLazyFieldOld(to, name, desc) {
  const initializer = desc.get;
  let init = initializer;
  let value = null;
  desc.get = function() {
    if (init == null) return value;
    let f = init;
    init = dart.throwCyclicInitializationError;
    if (f === init) f(name);
    dart._resetFields.push(() => {
      init = initializer;
      value = null;
    });
    try {
      value = f();
      init = null;
      return value;
    } catch (e) {
      init = null;
      value = null;
      throw e;
    }
  };
  desc.configurable = true;
  if (desc.set != null) {
    desc.set = function(x) {
      init = null;
      value = x;
    };
  }
  return dart.defineProperty(core.Object.as(to), core.Object.as(name), core.Object.as(desc));
};
dart.fn = function fn(closure, type) {
  closure[dart._runtimeType] = type;
  return closure;
};
dart.lazyFn = function lazyFn(closure, computeType) {
  if (computeType == null) dart.nullFailed(L3, 63, 35, "computeType");
  dart.defineAccessor(core.Object.as(closure), dart._runtimeType, {
    get: () => dart.defineValue(closure, dart._runtimeType, computeType()),
    set: value => dart.defineValue(closure, dart._runtimeType, value),
    configurable: true
  });
  return closure;
};
dart.getFunctionType = function getFunctionType(obj) {
  let args = Array(obj.length).fill(dart.dynamic);
  return dart.fnType(dart.bottom, args, void 0);
};
dart.getReifiedType = function getReifiedType(obj) {
  switch (typeof obj) {
    case "object":
    {
      if (obj == null) return core.Null;
      if (obj instanceof core.Object) {
        return obj.constructor;
      }
      let result = obj[dart._extensionType];
      if (result == null) return dart.jsobject;
      return result;
    }
    case "function":
    {
      let result = obj[dart._runtimeType];
      if (result != null) return result;
      return dart.jsobject;
    }
    case "undefined":
    {
      return core.Null;
    }
    case "number":
    {
      return Math.floor(obj) == obj ? core.int : core.double;
    }
    case "boolean":
    {
      return core.bool;
    }
    case "string":
    {
      return core.String;
    }
    case "symbol":
    default:
    {
      return dart.jsobject;
    }
  }
};
dart.getModuleName = function getModuleName(module) {
  if (module == null) dart.nullFailed(L3, 117, 30, "module");
  return module[dart._moduleName];
};
dart.getModuleNames = function getModuleNames() {
  return Array.from(dart._loadedModules.keys());
};
dart.getSourceMap = function getSourceMap(moduleName) {
  if (moduleName == null) dart.nullFailed(L3, 127, 29, "moduleName");
  return dart._loadedSourceMaps.get(moduleName);
};
dart.getModuleLibraries = function getModuleLibraries(name) {
  if (name == null) dart.nullFailed(L3, 132, 27, "name");
  let module = dart._loadedModules.get(name);
  if (module == null) return null;
  module[dart._moduleName] = name;
  return module;
};
dart.getModulePartMap = function getModulePartMap(name) {
  if (name == null) dart.nullFailed(L3, 140, 25, "name");
  return dart._loadedPartMaps.get(name);
};
dart.trackLibraries = function trackLibraries(moduleName, libraries, parts, sourceMap) {
  if (moduleName == null) dart.nullFailed(L3, 144, 12, "moduleName");
  if (libraries == null) dart.nullFailed(L3, 144, 31, "libraries");
  if (parts == null) dart.nullFailed(L3, 144, 49, "parts");
  if (typeof parts == 'string') {
    sourceMap = parts;
    parts = {};
  }
  dart._loadedSourceMaps.set(moduleName, sourceMap);
  dart._loadedModules.set(moduleName, libraries);
  dart._loadedPartMaps.set(moduleName, parts);
  dart._libraries = null;
  dart._libraryObjects = null;
  dart._parts = null;
};
dart._computeLibraryMetadata = function _computeLibraryMetadata() {
  dart._libraries = JSArrayOfString().of([]);
  dart._libraryObjects = new (IdentityMapOfString$ObjectN()).new();
  dart._parts = new (IdentityMapOfString$ListNOfString()).new();
  let modules = dart.getModuleNames();
  for (let name of modules) {
    let module = dart.getModuleLibraries(name);
    let libraries = dart.getOwnPropertyNames(core.Object.as(module))[$cast](core.String);
    dart.nullCheck(dart._libraries)[$addAll](libraries);
    for (let library of libraries) {
      dart.nullCheck(dart._libraryObjects)[$_set](library, module[library]);
    }
    let partMap = dart.getModulePartMap(name);
    libraries = dart.getOwnPropertyNames(core.Object.as(partMap))[$cast](core.String);
    for (let library of libraries) {
      dart.nullCheck(dart._parts)[$_set](library, ListOfString().from(partMap[library]));
    }
  }
};
dart.getLibrary = function getLibrary(uri) {
  if (uri == null) dart.nullFailed(L3, 192, 27, "uri");
  if (dart._libraryObjects == null) {
    dart._computeLibraryMetadata();
  }
  return dart.nullCheck(dart._libraryObjects)[$_get](uri);
};
dart.getLibraries = function getLibraries() {
  if (dart._libraries == null) {
    dart._computeLibraryMetadata();
  }
  return dart.nullCheck(dart._libraries);
};
dart.getParts = function getParts(libraryUri) {
  let t0;
  if (libraryUri == null) dart.nullFailed(L3, 222, 30, "libraryUri");
  if (dart._parts == null) {
    dart._computeLibraryMetadata();
  }
  t0 = dart.nullCheck(dart._parts)[$_get](libraryUri);
  return t0 == null ? JSArrayOfString().of([]) : t0;
};
dart.polyfill = function polyfill(window) {
  if (window[dart._polyfilled]) return false;
  window[dart._polyfilled] = true;
  if (typeof window.NodeList !== "undefined") {
    window.NodeList.prototype.get = function(i) {
      return this[i];
    };
    window.NamedNodeMap.prototype.get = function(i) {
      return this[i];
    };
    window.DOMTokenList.prototype.get = function(i) {
      return this[i];
    };
    window.HTMLCollection.prototype.get = function(i) {
      return this[i];
    };
    if (typeof window.PannerNode == "undefined") {
      let audioContext;
      if (typeof window.AudioContext == "undefined" && typeof window.webkitAudioContext != "undefined") {
        audioContext = new window.webkitAudioContext();
      } else {
        audioContext = new window.AudioContext();
        window.StereoPannerNode = audioContext.createStereoPanner().constructor;
      }
      window.PannerNode = audioContext.createPanner().constructor;
    }
    if (typeof window.AudioSourceNode == "undefined") {
      window.AudioSourceNode = MediaElementAudioSourceNode.__proto__;
    }
    if (typeof window.FontFaceSet == "undefined") {
      if (typeof window.document.fonts != "undefined") {
        window.FontFaceSet = window.document.fonts.__proto__.constructor;
      }
    }
    if (typeof window.MemoryInfo == "undefined") {
      if (typeof window.performance.memory != "undefined") {
        window.MemoryInfo = function() {
        };
        window.MemoryInfo.prototype = window.performance.memory.__proto__;
      }
    }
    if (typeof window.Geolocation == "undefined") {
      window.Geolocation == window.navigator.geolocation.constructor;
    }
    if (typeof window.Animation == "undefined") {
      let d = window.document.createElement('div');
      if (typeof d.animate != "undefined") {
        window.Animation = d.animate(d).constructor;
      }
    }
    if (typeof window.SourceBufferList == "undefined") {
      if ('MediaSource' in window) {
        window.SourceBufferList = new window.MediaSource().sourceBuffers.constructor;
      }
    }
    if (typeof window.SpeechRecognition == "undefined") {
      window.SpeechRecognition = window.webkitSpeechRecognition;
      window.SpeechRecognitionError = window.webkitSpeechRecognitionError;
      window.SpeechRecognitionEvent = window.webkitSpeechRecognitionEvent;
    }
  }
  return true;
};
dart.trackProfile = function trackProfile(flag) {
  if (flag == null) dart.nullFailed(L4, 140, 24, "flag");
  dart.__trackProfile = flag;
};
dart.setStartAsyncSynchronously = function setStartAsyncSynchronously(value = true) {
  if (value == null) dart.nullFailed(L4, 165, 39, "value");
  dart.startAsyncSynchronously = value;
};
dart.hotRestart = function hotRestart() {
  dart.hotRestartIteration = dart.notNull(dart.hotRestartIteration) + 1;
  for (let f of dart._resetFields)
    f();
  dart._resetFields[$clear]();
  for (let m of dart._cacheMaps)
    m.clear();
  dart._cacheMaps[$clear]();
  dart._nullComparisonSet.clear();
  dart.constantMaps.clear();
};
dart._throwNullSafetyWarningError = function _throwNullSafetyWarningError() {
  return dart.throw(new core.UnsupportedError.new(dart.str("Null safety errors cannot be shown as warnings when running with sound ") + dart.str("null safety.")));
};
dart.weakNullSafetyWarnings = function weakNullSafetyWarnings(showWarnings) {
  if (showWarnings == null) dart.nullFailed(L5, 27, 34, "showWarnings");
  if (dart.test(showWarnings) && false) {
    dart._throwNullSafetyWarningError();
  }
  dart._weakNullSafetyWarnings = showWarnings;
};
dart.nonNullAsserts = function nonNullAsserts(enable) {
  if (enable == null) dart.nullFailed(L5, 43, 26, "enable");
  dart._nonNullAsserts = enable;
};
dart._isJsObject = function _isJsObject(obj) {
  return dart.getReifiedType(obj) === dart.jsobject;
};
dart.assertInterop = function assertInterop(f) {
  if (f == null) dart.nullFailed(L5, 129, 39, "f");
  if (!(dart._isJsObject(f) || !(f instanceof dart.global.Function))) dart.assertFailed("Dart function requires `allowInterop` to be passed to JavaScript.", L5, 131, 7, "_isJsObject(f) ||\n          !JS<bool>('bool', '# instanceof #.Function', f, global_)");
  return f;
};
dart.isDartFunction = function isDartFunction(obj) {
  return obj instanceof Function && obj[dart._runtimeType] != null;
};
dart.tearoffInterop = function tearoffInterop(f) {
  if (!dart._isJsObject(f) || f == null) return f;
  let ret = dart._assertInteropExpando._get(f);
  if (ret == null) {
    ret = function(...arguments$) {
      var args = arguments$.map(dart.assertInterop);
      return f.apply(this, args);
    };
    dart._assertInteropExpando._set(f, ret);
  }
  return ret;
};
dart._warn = function _warn(arg) {
  console.warn(arg);
};
dart._nullWarn = function _nullWarn(arg) {
  if (dart._weakNullSafetyWarnings) {
    dart._warn(dart.str(arg) + dart.str("\n") + dart.str("This will become a failure when runtime null safety is enabled."));
  }
};
dart._nullWarnOnType = function _nullWarnOnType(type) {
  let result = dart._nullComparisonSet.has(type);
  if (!dart.test(result)) {
    dart._nullComparisonSet.add(type);
    dart._nullWarn(dart.str("Null is not a subtype of ") + dart.str(type) + dart.str("."));
  }
};
dart.lazyJSType = function lazyJSType(getJSTypeCallback, name) {
  if (getJSTypeCallback == null) dart.nullFailed(L5, 270, 23, "getJSTypeCallback");
  if (name == null) dart.nullFailed(L5, 270, 49, "name");
  let ret = dart._lazyJSTypes.get(name);
  if (ret == null) {
    ret = new dart.LazyJSType.new(getJSTypeCallback, name);
    dart._lazyJSTypes.set(name, ret);
  }
  return ret;
};
dart.anonymousJSType = function anonymousJSType(name) {
  if (name == null) dart.nullFailed(L5, 279, 24, "name");
  let ret = dart._anonymousJSTypes.get(name);
  if (ret == null) {
    ret = new dart.AnonymousJSType.new(name);
    dart._anonymousJSTypes.set(name, ret);
  }
  return ret;
};
dart.nullable = function nullable(type) {
  let cached = type[dart._cachedNullable];
  if (cached !== void 0) {
    return cached;
  }
  let cachedType = dart._computeNullable(type);
  type[dart._cachedNullable] = cachedType;
  return cachedType;
};
dart._computeNullable = function _computeNullable(type) {
  if (type instanceof dart.LegacyType) {
    return dart.nullable(type.type);
  }
  if (type instanceof dart.NullableType || dart._isTop(type) || type === core.Null || dart._isFutureOr(type) && dart.getGenericArgs(type)[0] instanceof dart.NullableType) {
    return type;
  }
  if (type === dart.Never) return core.Null;
  return new dart.NullableType.new(type);
};
dart.legacy = function legacy(type) {
  let cached = type[dart._cachedLegacy];
  if (cached !== void 0) {
    return cached;
  }
  let cachedType = dart._computeLegacy(type);
  type[dart._cachedLegacy] = cachedType;
  return cachedType;
};
dart._computeLegacy = function _computeLegacy(type) {
  if (type instanceof dart.LegacyType || type instanceof dart.NullableType || dart._isTop(type) || type === core.Null) {
    return type;
  }
  return new dart.LegacyType.new(type);
};
dart.wrapType = function wrapType(type, isNormalized = false) {
  if (type.hasOwnProperty(dart._typeObject)) {
    return type[dart._typeObject];
  }
  let result = isNormalized ? new dart._Type.new(core.Object.as(type)) : type instanceof dart.LegacyType ? dart.wrapType(type.type) : dart._canonicalizeNormalizedTypeObject(type);
  type[dart._typeObject] = result;
  return result;
};
dart._canonicalizeNormalizedTypeObject = function _canonicalizeNormalizedTypeObject(type) {
  if (!!(type instanceof dart.LegacyType)) dart.assertFailed(null, L5, 494, 10, "!_jsInstanceOf(type, LegacyType)");
  function normalizeHelper(a) {
    return dart.unwrapType(dart.wrapType(a));
  }
  if (type instanceof dart.GenericFunctionTypeIdentifier) {
    return dart.wrapType(type, true);
  }
  if (type instanceof dart.FunctionType) {
    let normReturnType = normalizeHelper(dart.dload(type, 'returnType'));
    let normArgs = dart.dsend(dart.dsend(dart.dload(type, 'args'), 'map', [normalizeHelper]), 'toList', []);
    if (dart.global.Object.keys(dart.dload(type, 'named')).length === 0 && dart.global.Object.keys(dart.dload(type, 'requiredNamed')).length === 0) {
      if (dart.dtest(dart.dload(dart.dload(type, 'optionals'), 'isEmpty'))) {
        let normType = dart.fnType(normReturnType, core.List.as(normArgs));
        return dart.wrapType(normType, true);
      }
      let normOptionals = dart.dsend(dart.dsend(dart.dload(type, 'optionals'), 'map', [normalizeHelper]), 'toList', []);
      let normType = dart.fnType(normReturnType, core.List.as(normArgs), normOptionals);
      return dart.wrapType(normType, true);
    }
    let normNamed = {};
    dart._transformJSObject(dart.dload(type, 'named'), normNamed, normalizeHelper);
    let normRequiredNamed = {};
    dart._transformJSObject(dart.dload(type, 'requiredNamed'), normRequiredNamed, normalizeHelper);
    let normType = dart.fnType(normReturnType, core.List.as(normArgs), normNamed, normRequiredNamed);
    return dart.wrapType(normType, true);
  }
  if (type instanceof dart.GenericFunctionType) {
    let formals = dart._getCanonicalTypeFormals(core.int.as(dart.dload(dart.dload(type, 'typeFormals'), 'length')));
    let normBounds = core.List.as(dart.dsend(dart.dsend(dart.dsend(type, 'instantiateTypeBounds', [formals]), 'map', [normalizeHelper]), 'toList', []));
    let substitutedTypes = [];
    if (dart.test(normBounds[$contains](dart.Never))) {
      for (let i = 0; i < dart.notNull(formals[$length]); i = i + 1) {
        let substitutedType = normBounds[$_get](i);
        while (dart.test(formals[$contains](substitutedType))) {
          substitutedType = normBounds[$_get](formals[$indexOf](dart.TypeVariable.as(substitutedType)));
        }
        if (dart.equals(substitutedType, dart.Never)) {
          substitutedTypes[$add](dart.Never);
        } else {
          substitutedTypes[$add](formals[$_get](i));
        }
      }
    } else {
      substitutedTypes = formals;
    }
    let normFunc = dart.FunctionType.as(normalizeHelper(dart.dsend(type, 'instantiate', [substitutedTypes])));
    let typeObjectIdKey = [];
    typeObjectIdKey.push(...normBounds);
    typeObjectIdKey.push(normFunc);
    let memoizedId = dart._memoizeArray(dart._gFnTypeTypeMap, typeObjectIdKey, () => new dart.GenericFunctionTypeIdentifier.new(formals, normBounds, normFunc));
    return dart.wrapType(memoizedId, true);
  }
  let args = dart.getGenericArgs(type);
  let normType = null;
  if (args == null || dart.test(args[$isEmpty])) {
    normType = type;
  } else {
    let genericClass = dart.getGenericClass(type);
    let normArgs = args[$map](core.Object, normalizeHelper)[$toList]();
    normType = genericClass(...normArgs);
  }
  return dart.wrapType(normType, true);
};
dart._transformJSObject = function _transformJSObject(srcObject, dstObject, transform) {
  if (transform == null) dart.nullFailed(L5, 576, 56, "transform");
  for (let key of dart.global.Object.keys(srcObject)) {
    dstObject[key] = dart.dsend(transform, 'call', [srcObject[key]]);
  }
};
dart.unwrapType = function unwrapType(obj) {
  if (obj == null) dart.nullFailed(L5, 587, 24, "obj");
  return obj[_type$];
};
dart._getCanonicalTypeFormals = function _getCanonicalTypeFormals(count) {
  if (count == null) dart.nullFailed(L5, 632, 49, "count");
  while (dart.notNull(count) > dart.notNull(dart._typeVariablePool[$length])) {
    dart._fillTypeVariable();
  }
  return dart._typeVariablePool[$sublist](0, count);
};
dart._fillTypeVariable = function _fillTypeVariable() {
  if (dart.notNull(dart._typeVariablePool[$length]) < 26) {
    dart._typeVariablePool[$add](new dart.TypeVariable.new(core.String.fromCharCode(65 + dart.notNull(dart._typeVariablePool[$length]))));
  } else {
    dart._typeVariablePool[$add](new dart.TypeVariable.new(dart.str("T") + dart.str(dart.notNull(dart._typeVariablePool[$length]) - 26)));
  }
};
dart._memoizeArray = function _memoizeArray(map, arr, create) {
  if (create == null) dart.nullFailed(L5, 654, 32, "create");
  return (() => {
    let len = arr.length;
    map = dart._lookupNonTerminal(map, len);
    for (var i = 0; i < len - 1; ++i) {
      map = dart._lookupNonTerminal(map, arr[i]);
    }
    let result = map.get(arr[len - 1]);
    if (result !== void 0) return result;
    map.set(arr[len - 1], result = create());
    return result;
  })();
};
dart._canonicalizeArray = function _canonicalizeArray(array, map) {
  if (array == null) dart.nullFailed(L5, 666, 30, "array");
  return dart._memoizeArray(map, array, () => array);
};
dart._canonicalizeNamed = function _canonicalizeNamed(named, map) {
  let key = [];
  let names = dart.getOwnPropertyNames(named);
  for (var i = 0; i < names.length; ++i) {
    let name = names[i];
    let type = named[name];
    key.push(name);
    key.push(type);
  }
  return dart._memoizeArray(map, key, () => named);
};
dart._createSmall = function _createSmall(returnType, required) {
  if (required == null) dart.nullFailed(L5, 686, 44, "required");
  return (() => {
    let count = required.length;
    let map = dart._fnTypeSmallMap[count];
    for (var i = 0; i < count; ++i) {
      map = dart._lookupNonTerminal(map, required[i]);
    }
    let result = map.get(returnType);
    if (result !== void 0) return result;
    result = new dart.FunctionType.new(core.Type.as(returnType), required, [], {}, {});
    map.set(returnType, result);
    return result;
  })();
};
dart._typeFormalsFromFunction = function _typeFormalsFromFunction(typeConstructor) {
  let str = typeConstructor.toString();
  let hasParens = str[$_get](0) === "(";
  let end = str[$indexOf](hasParens ? ")" : "=>");
  if (hasParens) {
    return str[$substring](1, end)[$split](",")[$map](dart.TypeVariable, n => {
      if (n == null) dart.nullFailed(L5, 1118, 15, "n");
      return new dart.TypeVariable.new(n[$trim]());
    })[$toList]();
  } else {
    return JSArrayOfTypeVariable().of([new dart.TypeVariable.new(str[$substring](0, end)[$trim]())]);
  }
};
dart.fnType = function fnType(returnType, args, optional = null, requiredNamed = null) {
  if (args == null) dart.nullFailed(L5, 1126, 38, "args");
  return dart.FunctionType.create(returnType, args, optional, requiredNamed);
};
dart.gFnType = function gFnType(instantiateFn, typeBounds) {
  return new dart.GenericFunctionType.new(instantiateFn, typeBounds);
};
dart.isType = function isType(obj) {
  return obj[dart._runtimeType] === core.Type;
};
dart.checkTypeBound = function checkTypeBound(type, bound, name) {
  if (!dart.isSubtypeOf(type, bound)) {
    dart.throwTypeError(dart.str("type `") + dart.str(type) + dart.str("` does not extend `") + dart.str(bound) + dart.str("` of `") + dart.str(name) + dart.str("`."));
  }
};
dart.typeName = function typeName(type) {
  if (type === void 0) return "undefined type";
  if (type === null) return "null type";
  if (type instanceof dart.DartType) {
    return type.toString();
  }
  let tag = type[dart._runtimeType];
  if (tag === core.Type) {
    let name = type.name;
    let args = dart.getGenericArgs(type);
    if (args == null) return name;
    if (dart.getGenericClass(type) == _interceptors.JSArray$) name = 'List';
    let result = name;
    result += '<';
    for (let i = 0; i < args.length; ++i) {
      if (i > 0) result += ', ';
      result += dart.typeName(args[i]);
    }
    result += '>';
    return result;
  }
  if (tag) return "Not a type: " + tag.name;
  return "JSObject<" + type.name + ">";
};
dart._isFunctionSubtype = function _isFunctionSubtype(ft1, ft2, strictMode) {
  let ret1 = ft1.returnType;
  let ret2 = ft2.returnType;
  let args1 = ft1.args;
  let args2 = ft2.args;
  if (args1.length > args2.length) {
    return false;
  }
  for (let i = 0; i < args1.length; ++i) {
    if (!dart._isSubtype(args2[i], args1[i], strictMode)) {
      return false;
    }
  }
  let optionals1 = ft1.optionals;
  let optionals2 = ft2.optionals;
  if (args1.length + optionals1.length < args2.length + optionals2.length) {
    return false;
  }
  let j = 0;
  for (let i = args1.length; i < args2.length; ++i, ++j) {
    if (!dart._isSubtype(args2[i], optionals1[j], strictMode)) {
      return false;
    }
  }
  for (let i = 0; i < optionals2.length; ++i, ++j) {
    if (!dart._isSubtype(optionals2[i], optionals1[j], strictMode)) {
      return false;
    }
  }
  let named1 = ft1.named;
  let requiredNamed1 = ft1.requiredNamed;
  let named2 = ft2.named;
  let requiredNamed2 = ft2.requiredNamed;
  if (!strictMode) {
    named1 = Object.assign({}, named1, requiredNamed1);
    named2 = Object.assign({}, named2, requiredNamed2);
    requiredNamed1 = {};
    requiredNamed2 = {};
  }
  let names = dart.getOwnPropertyNames(requiredNamed1);
  for (let i = 0; i < names.length; ++i) {
    let name = names[i];
    let n2 = requiredNamed2[name];
    if (n2 === void 0) {
      return false;
    }
  }
  names = dart.getOwnPropertyNames(named2);
  for (let i = 0; i < names.length; ++i) {
    let name = names[i];
    let n1 = named1[name];
    let n2 = named2[name];
    if (n1 === void 0) {
      return false;
    }
    if (!dart._isSubtype(n2, n1, strictMode)) {
      return false;
    }
  }
  names = dart.getOwnPropertyNames(requiredNamed2);
  for (let i = 0; i < names.length; ++i) {
    let name = names[i];
    let n1 = named1[name] || requiredNamed1[name];
    let n2 = requiredNamed2[name];
    if (n1 === void 0) {
      return false;
    }
    if (!dart._isSubtype(n2, n1, strictMode)) {
      return false;
    }
  }
  return dart._isSubtype(ret1, ret2, strictMode);
};
dart.isSubtypeOf = function isSubtypeOf(t1, t2) {
  let map = t1[dart._subtypeCache];
  let result = map.get(t2);
  if (result !== void 0) return result;
  let validSubtype = dart._isSubtype(t1, t2, true);
  if (!validSubtype && !false) {
    validSubtype = dart._isSubtype(t1, t2, false);
    if (validSubtype) {
      dart._nullWarn(dart.str(t1) + dart.str(" is not a subtype of ") + dart.str(t2) + dart.str("."));
    }
  }
  map.set(t2, validSubtype);
  return validSubtype;
};
dart._isBottom = function _isBottom(type, strictMode) {
  return type === dart.Never || !strictMode && type === core.Null;
};
dart._isTop = function _isTop(type) {
  if (type instanceof dart.NullableType) return type.type === core.Object;
  return type === dart.dynamic || type === dart.void;
};
dart._isFutureOr = function _isFutureOr(type) {
  let genericClass = dart.getGenericClass(type);
  return genericClass && genericClass === async.FutureOr$;
};
dart._isSubtype = function _isSubtype(t1, t2, strictMode) {
  if (!strictMode) {
    if (t1 instanceof dart.NullableType) {
      t1 = t1.type;
    }
    if (t2 instanceof dart.NullableType) {
      t2 = t2.type;
    }
  }
  if (t1 === t2) {
    return true;
  }
  if (dart._isTop(t2) || dart._isBottom(t1, strictMode)) {
    return true;
  }
  if (t1 === dart.dynamic || t1 === dart.void) {
    return dart._isSubtype(dart.nullable(core.Object), t2, strictMode);
  }
  if (t2 === core.Object) {
    if (dart._isFutureOr(t1)) {
      let t1TypeArg = dart.getGenericArgs(t1)[0];
      return dart._isSubtype(t1TypeArg, core.Object, strictMode);
    }
    if (t1 instanceof dart.LegacyType) {
      return dart._isSubtype(t1.type, t2, strictMode);
    }
    if (t1 === core.Null || t1 instanceof dart.NullableType) {
      return false;
    }
    return true;
  }
  if (t1 === core.Null) {
    if (dart._isFutureOr(t2)) {
      let t2TypeArg = dart.getGenericArgs(t2)[0];
      return dart._isSubtype(core.Null, t2TypeArg, strictMode);
    }
    return t2 === core.Null || t2 instanceof dart.LegacyType || t2 instanceof dart.NullableType;
  }
  if (t1 instanceof dart.LegacyType) {
    return dart._isSubtype(t1.type, t2, strictMode);
  }
  if (t2 instanceof dart.LegacyType) {
    return dart._isSubtype(t1, dart.nullable(t2.type), strictMode);
  }
  if (dart._isFutureOr(t1)) {
    let t1TypeArg = dart.getGenericArgs(t1)[0];
    if (dart._isFutureOr(t2)) {
      let t2TypeArg = dart.getGenericArgs(t2)[0];
      if (dart._isSubtype(t1TypeArg, t2TypeArg, strictMode)) {
        return true;
      }
    }
    let t1Future = async.Future$(t1TypeArg);
    return dart._isSubtype(t1Future, t2, strictMode) && dart._isSubtype(t1TypeArg, t2, strictMode);
  }
  if (t1 instanceof dart.NullableType) {
    return dart._isSubtype(t1.type, t2, strictMode) && dart._isSubtype(core.Null, t2, strictMode);
  }
  if (dart._isFutureOr(t2)) {
    let t2TypeArg = dart.getGenericArgs(t2)[0];
    let t2Future = async.Future$(t2TypeArg);
    return dart._isSubtype(t1, t2Future, strictMode) || dart._isSubtype(t1, t2TypeArg, strictMode);
  }
  if (t2 instanceof dart.NullableType) {
    return dart._isSubtype(t1, t2.type, strictMode) || dart._isSubtype(t1, core.Null, strictMode);
  }
  if (!(t2 instanceof dart.AbstractFunctionType)) {
    if (t1 instanceof dart.AbstractFunctionType) {
      return t2 === core.Function;
    }
    if (t1 === dart.jsobject && t2 instanceof dart.AnonymousJSType) {
      return true;
    }
    return dart._isInterfaceSubtype(t1, t2, strictMode);
  }
  if (!(t1 instanceof dart.AbstractFunctionType)) {
    return false;
  }
  if (t1 instanceof dart.GenericFunctionType) {
    if (!(t2 instanceof dart.GenericFunctionType)) {
      return false;
    }
    let formalCount = t1.formalCount;
    if (formalCount !== t2.formalCount) {
      return false;
    }
    let fresh = t2.typeFormals;
    if (t1.hasTypeBounds || t2.hasTypeBounds) {
      let t1Bounds = t1.instantiateTypeBounds(fresh);
      let t2Bounds = t2.instantiateTypeBounds(fresh);
      for (let i = 0; i < formalCount; i++) {
        if (t1Bounds[i] != t2Bounds[i]) {
          if (!(dart._isSubtype(t1Bounds[i], t2Bounds[i], strictMode) && dart._isSubtype(t2Bounds[i], t1Bounds[i], strictMode))) {
            return false;
          }
        }
      }
    }
    t1 = t1.instantiate(fresh);
    t2 = t2.instantiate(fresh);
  } else if (t2 instanceof dart.GenericFunctionType) {
    return false;
  }
  return dart._isFunctionSubtype(t1, t2, strictMode);
};
dart._isInterfaceSubtype = function _isInterfaceSubtype(t1, t2, strictMode) {
  if (t1 instanceof dart.LazyJSType) t1 = t1.rawJSTypeForCheck();
  if (t2 instanceof dart.LazyJSType) t2 = t2.rawJSTypeForCheck();
  if (t1 === t2) {
    return true;
  }
  if (t1 === core.Object) {
    return false;
  }
  if (t1 === core.Function || t2 === core.Function) {
    return false;
  }
  if (t1 == null) {
    return t2 === core.Object || t2 === dart.dynamic;
  }
  let raw1 = dart.getGenericClass(t1);
  let raw2 = dart.getGenericClass(t2);
  if (raw1 != null && raw1 == raw2) {
    let typeArguments1 = dart.getGenericArgs(t1);
    let typeArguments2 = dart.getGenericArgs(t2);
    if (typeArguments1.length != typeArguments2.length) {
      dart.assertFailed();
    }
    let variances = dart.getGenericArgVariances(t1);
    for (let i = 0; i < typeArguments1.length; ++i) {
      if (variances === void 0 || variances[i] == 1) {
        if (!dart._isSubtype(typeArguments1[i], typeArguments2[i], strictMode)) {
          return false;
        }
      } else if (variances[i] == 2) {
        if (!dart._isSubtype(typeArguments2[i], typeArguments1[i], strictMode)) {
          return false;
        }
      } else if (variances[i] == 3) {
        if (!dart._isSubtype(typeArguments1[i], typeArguments2[i], strictMode) || !dart._isSubtype(typeArguments2[i], typeArguments1[i], strictMode)) {
          return false;
        }
      }
    }
    return true;
  }
  if (dart._isInterfaceSubtype(t1.__proto__, t2, strictMode)) {
    return true;
  }
  let m1 = dart.getMixin(t1);
  if (m1 != null && dart._isInterfaceSubtype(m1, t2, strictMode)) {
    return true;
  }
  let getInterfaces = dart.getImplements(t1);
  if (getInterfaces) {
    for (let i1 of getInterfaces()) {
      if (dart._isInterfaceSubtype(i1, t2, strictMode)) {
        return true;
      }
    }
  }
  return false;
};
dart.extractTypeArguments = function extractTypeArguments(T, instance, f) {
  if (f == null) dart.nullFailed(L5, 1632, 54, "f");
  if (instance == null) {
    dart.throw(new core.ArgumentError.new("Cannot extract type of null instance."));
  }
  let type = T;
  type = type.type || type;
  if (dart.AbstractFunctionType.is(type) || dart._isFutureOr(type)) {
    dart.throw(new core.ArgumentError.new(dart.str("Cannot extract from non-class type (") + dart.str(type) + dart.str(").")));
  }
  let typeArguments = dart.getGenericArgs(type);
  if (dart.test(dart.nullCheck(typeArguments)[$isEmpty])) {
    dart.throw(new core.ArgumentError.new(dart.str("Cannot extract from non-generic type (") + dart.str(type) + dart.str(").")));
  }
  let supertype = dart._getMatchingSupertype(dart.getReifiedType(instance), type);
  if (!(supertype != null)) dart.assertFailed(null, L5, 1650, 10, "supertype != null");
  let typeArgs = dart.getGenericArgs(supertype);
  if (!(typeArgs != null && dart.test(typeArgs[$isNotEmpty]))) dart.assertFailed(null, L5, 1652, 10, "typeArgs != null && typeArgs.isNotEmpty");
  return dart.dgcall(f, typeArgs, []);
};
dart._getMatchingSupertype = function _getMatchingSupertype(subtype, supertype) {
  if (supertype == null) dart.nullFailed(L5, 2013, 55, "supertype");
  if (core.identical(subtype, supertype)) return supertype;
  if (subtype == null || subtype === core.Object) return null;
  let subclass = dart.getGenericClass(subtype);
  let superclass = dart.getGenericClass(supertype);
  if (subclass != null && core.identical(subclass, superclass)) {
    return subtype;
  }
  let result = dart._getMatchingSupertype(subtype.__proto__, supertype);
  if (result != null) return result;
  let mixin = dart.getMixin(subtype);
  if (mixin != null) {
    result = dart._getMatchingSupertype(mixin, supertype);
    if (result != null) return result;
  }
  let getInterfaces = dart.getImplements(subtype);
  if (getInterfaces != null) {
    for (let iface of dart.nullCheck(getInterfaces())) {
      result = dart._getMatchingSupertype(iface, supertype);
      if (result != null) return result;
    }
  }
  return null;
};
dart.defineValue = function defineValue(obj, name, value) {
  dart.defineAccessor(core.Object.as(obj), core.Object.as(name), {value: value, configurable: true, writable: true});
  return value;
};
dart.throwTypeError = function throwTypeError(message) {
  if (message == null) dart.nullFailed(L6, 39, 28, "message");
  dart.throw(new _js_helper.TypeErrorImpl.new(message));
};
dart.throwInternalError = function throwInternalError(message) {
  if (message == null) dart.nullFailed(L6, 44, 32, "message");
  throw Error(message);
};
dart.getOwnNamesAndSymbols = function getOwnNamesAndSymbols(obj) {
  let names = dart.getOwnPropertyNames(core.Object.as(obj));
  let symbols = dart.getOwnPropertySymbols(core.Object.as(obj));
  return names.concat(symbols);
};
dart.safeGetOwnProperty = function safeGetOwnProperty(obj, name) {
  if (obj.hasOwnProperty(name)) return obj[name];
};
dart.copyTheseProperties = function copyTheseProperties(to, from, names) {
  for (let i = 0, n = names.length; i < n; i = i + 1) {
    let name = names[i];
    if (dart.equals(name, "constructor")) continue;
    dart.copyProperty(to, from, name);
  }
  return to;
};
dart.copyProperty = function copyProperty(to, from, name) {
  let desc = dart.getOwnPropertyDescriptor(core.Object.as(from), core.Object.as(name));
  if (name == Symbol.iterator) {
    let existing = dart.getOwnPropertyDescriptor(core.Object.as(to), core.Object.as(name));
    if (existing != null) {
      if (existing.writable) {
        to[name] = desc.value;
      }
      return;
    }
  }
  dart.defineProperty(core.Object.as(to), core.Object.as(name), core.Object.as(desc));
};
dart.export = function exportProperty(to, from, name) {
  return dart.copyProperty(to, from, name);
};
dart.copyProperties = function copyProperties(to, from) {
  return dart.copyTheseProperties(to, from, dart.getOwnNamesAndSymbols(from));
};
dart._polyfilled = Symbol("_polyfilled");
dart.global = (function() {
  var globalState = typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : null;
  if (!globalState) {
    globalState = new Function('return this;')();
  }
  dart.polyfill(globalState);
  if (globalState.Error) {
    globalState.Error.stackTraceLimit = Infinity;
  }
  let settings = 'ddcSettings' in globalState ? globalState.ddcSettings : {};
  dart.trackProfile('trackProfile' in settings ? settings.trackProfile : false);
  return globalState;
})();
dart.JsSymbol = Symbol;
dart.libraryPrototype = dart.library;
dart.startAsyncSynchronously = true;
dart._cacheMaps = [];
dart._resetFields = [];
dart.hotRestartIteration = 0;
dart.addAsyncCallback = function() {
};
dart.removeAsyncCallback = function() {
};
dart.defineProperty = Object.defineProperty;
dart.defineAccessor = Object.defineProperty;
dart.getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
dart.getOwnPropertyNames = Object.getOwnPropertyNames;
dart.getOwnPropertySymbols = Object.getOwnPropertySymbols;
dart.getPrototypeOf = Object.getPrototypeOf;
dart._mixin = Symbol("mixin");
dart.mixinOn = Symbol("mixinOn");
dart.implements = Symbol("implements");
dart._typeArguments = Symbol("typeArguments");
dart._variances = Symbol("variances");
dart._originalDeclaration = Symbol("originalDeclaration");
dart.mixinNew = Symbol("dart.mixinNew");
dart._constructorSig = Symbol("sigCtor");
dart._methodSig = Symbol("sigMethod");
dart._fieldSig = Symbol("sigField");
dart._getterSig = Symbol("sigGetter");
dart._setterSig = Symbol("sigSetter");
dart._staticMethodSig = Symbol("sigStaticMethod");
dart._staticFieldSig = Symbol("sigStaticField");
dart._staticGetterSig = Symbol("sigStaticGetter");
dart._staticSetterSig = Symbol("sigStaticSetter");
dart._genericTypeCtor = Symbol("genericType");
dart._libraryUri = Symbol("libraryUri");
dart._extensionType = Symbol("extensionType");
dart.dartx = dartx;
dart._extensionMap = new Map();
dart.isFuture = Symbol("_is_Future");
dart.isIterable = Symbol("_is_Iterable");
dart.isList = Symbol("_is_List");
dart.isMap = Symbol("_is_Map");
dart.isStream = Symbol("_is_Stream");
dart.isStreamSubscription = Symbol("_is_StreamSubscription");
dart.identityEquals = null;
dart._runtimeType = Symbol("_runtimeType");
dart._moduleName = Symbol("_moduleName");
dart._loadedModules = new Map();
dart._loadedPartMaps = new Map();
dart._loadedSourceMaps = new Map();
dart._libraries = null;
dart._libraryObjects = null;
dart._parts = null;
dart._weakNullSafetyWarnings = false;
dart._nonNullAsserts = false;
dart.metadata = Symbol("metadata");
dart._nullComparisonSet = new Set();
dart._lazyJSTypes = new Map();
dart._anonymousJSTypes = new Map();
dart._cachedNullable = Symbol("cachedNullable");
dart._cachedLegacy = Symbol("cachedLegacy");
dart._subtypeCache = Symbol("_subtypeCache");
core.Object = class Object {
  constructor() {
  }
  static is(o) {
    return o != null;
  }
  static as(o) {
    return o == null ? dart.as(o, core.Object) : o;
  }
  _equals(other) {
    if (other == null) return false;
    return this === other;
  }
  get hashCode() {
    return core.identityHashCode(this);
  }
  toString() {
    return dart.str("Instance of '") + dart.str(dart.typeName(dart.getReifiedType(this))) + dart.str("'");
  }
  noSuchMethod(invocation) {
    if (invocation == null) dart.nullFailed(L7, 60, 35, "invocation");
    return dart.defaultNoSuchMethod(this, invocation);
  }
  get runtimeType() {
    return dart.wrapType(dart.getReifiedType(this));
  }
};
(core.Object.new = function() {
  ;
}).prototype = core.Object.prototype;
dart.addTypeCaches(core.Object);
dart.setMethodSignature(core.Object, () => ({
  __proto__: Object.create(null),
  _equals: dart.fnType(core.bool, [core.Object]),
  [$_equals]: dart.fnType(core.bool, [core.Object]),
  toString: dart.fnType(core.String, []),
  [$toString]: dart.fnType(core.String, []),
  noSuchMethod: dart.fnType(dart.dynamic, [core.Invocation]),
  [$noSuchMethod]: dart.fnType(dart.dynamic, [core.Invocation])
}));
dart.setGetterSignature(core.Object, () => ({
  __proto__: Object.create(null),
  hashCode: core.int,
  [$hashCode]: core.int,
  runtimeType: core.Type,
  [$runtimeType]: core.Type
}));
dart.setLibraryUri(core.Object, L8$);
dart.lazyFn(core.Object, () => core.Type);
dart.defineExtensionMethods(core.Object, ['_equals', 'toString', 'noSuchMethod']);
dart.defineExtensionAccessors(core.Object, ['hashCode', 'runtimeType']);
dart.registerExtension("Object", core.Object);
dart.DartType = class DartType extends core.Object {
  get name() {
    return this[$toString]();
  }
  is(object) {
    return dart.is(object, this);
  }
  as(object) {
    return dart.as(object, this);
  }
};
(dart.DartType.new = function() {
  dart.addTypeCaches(this);
}).prototype = dart.DartType.prototype;
dart.addTypeTests(dart.DartType);
dart.DartType[dart.implements] = () => [core.Type];
dart.setMethodSignature(dart.DartType, () => ({
  __proto__: dart.getMethods(dart.DartType.__proto__),
  is: dart.fnType(core.bool, [dart.dynamic]),
  as: dart.fnType(dart.dynamic, [dart.dynamic])
}));
dart.setGetterSignature(dart.DartType, () => ({
  __proto__: dart.getGetters(dart.DartType.__proto__),
  name: core.String
}));
dart.setLibraryUri(dart.DartType, L9$);
dart.NeverType = class NeverType extends dart.DartType {
  toString() {
    return "Never";
  }
};
(dart.NeverType.new = function() {
  dart.NeverType.__proto__.new.call(this);
  ;
}).prototype = dart.NeverType.prototype;
dart.addTypeTests(dart.NeverType);
dart.setLibraryUri(dart.NeverType, L9$);
dart.defineExtensionMethods(dart.NeverType, ['toString']);
dart.Never = new dart.NeverType.new();
dart.DynamicType = class DynamicType extends dart.DartType {
  toString() {
    return "dynamic";
  }
  is(object) {
    return true;
  }
  as(object) {
    return object;
  }
};
(dart.DynamicType.new = function() {
  dart.DynamicType.__proto__.new.call(this);
  ;
}).prototype = dart.DynamicType.prototype;
dart.addTypeTests(dart.DynamicType);
dart.setMethodSignature(dart.DynamicType, () => ({
  __proto__: dart.getMethods(dart.DynamicType.__proto__),
  as: dart.fnType(dart.nullable(core.Object), [dart.nullable(core.Object)])
}));
dart.setLibraryUri(dart.DynamicType, L9$);
dart.defineExtensionMethods(dart.DynamicType, ['toString']);
dart.dynamic = new dart.DynamicType.new();
dart.VoidType = class VoidType extends dart.DartType {
  toString() {
    return "void";
  }
  is(object) {
    return true;
  }
  as(object) {
    return object;
  }
};
(dart.VoidType.new = function() {
  dart.VoidType.__proto__.new.call(this);
  ;
}).prototype = dart.VoidType.prototype;
dart.addTypeTests(dart.VoidType);
dart.setMethodSignature(dart.VoidType, () => ({
  __proto__: dart.getMethods(dart.VoidType.__proto__),
  as: dart.fnType(dart.nullable(core.Object), [dart.nullable(core.Object)])
}));
dart.setLibraryUri(dart.VoidType, L9$);
dart.defineExtensionMethods(dart.VoidType, ['toString']);
dart.void = new dart.VoidType.new();
dart.JSObjectType = class JSObjectType extends dart.DartType {
  toString() {
    return "NativeJavaScriptObject";
  }
};
(dart.JSObjectType.new = function() {
  dart.JSObjectType.__proto__.new.call(this);
  ;
}).prototype = dart.JSObjectType.prototype;
dart.addTypeTests(dart.JSObjectType);
dart.setLibraryUri(dart.JSObjectType, L9$);
dart.defineExtensionMethods(dart.JSObjectType, ['toString']);
dart.jsobject = new dart.JSObjectType.new();
dart._typeObject = Symbol("typeObject");
dart._fnTypeNamedArgMap = new Map();
dart._fnTypeArrayArgMap = new Map();
dart._fnTypeTypeMap = new Map();
dart._fnTypeSmallMap = [new Map(), new Map(), new Map()];
dart._gFnTypeTypeMap = new Map();
dart._nullFailedSet = new Set();
dart._thrownValue = Symbol("_thrownValue");
dart._jsError = Symbol("_jsError");
dart._stackTrace = Symbol("_stackTrace");
dart.DartError = class DartError extends Error {
  constructor(error) {
    super();
    if (error == null) error = new core.NullThrownError.new();
    this[dart._thrownValue] = error;
    if (error != null && typeof error == "object" && error[dart._jsError] == null) {
      error[dart._jsError] = this;
    }
  }
  get message() {
    return dart.toString(this[dart._thrownValue]);
  }
};
dart.RethrownDartError = class RethrownDartError extends dart.DartError {
  constructor(error, stackTrace) {
    super(error);
    this[dart._stackTrace] = stackTrace;
  }
  get message() {
    return super.message + "\n    " + dart.toString(this[dart._stackTrace]) + "\n";
  }
};
dart.constantMaps = new Map();
dart.constantSets = new Map();
dart._immutableSetConstructor = null;
dart._value = Symbol("_value");
dart.constants = new Map();
dart.constantLists = new Map();
dart.identityHashCode_ = Symbol("_identityHashCode");
dart.JsIterator = class JsIterator {
  constructor(dartIterator) {
    this.dartIterator = dartIterator;
  }
  next() {
    let i = this.dartIterator;
    let done = !i.moveNext();
    return {done: done, value: done ? void 0 : i.current};
  }
};
dart.defineLazy(dart, {
  /*dart._assertInteropExpando*/get _assertInteropExpando() {
    return new (ExpandoOfFunction()).new();
  },
  set _assertInteropExpando(_) {},
  /*dart.bottom*/get bottom() {
    return core.Null;
  },
  /*dart._typeVariablePool*/get _typeVariablePool() {
    return JSArrayOfTypeVariable().of([]);
  }
}, false);
var _rawJSType = dart.privateName(dart, "_rawJSType");
var _getRawJSTypeFn$ = dart.privateName(dart, "_getRawJSTypeFn");
var _dartName$ = dart.privateName(dart, "_dartName");
var _getRawJSType = dart.privateName(dart, "_getRawJSType");
dart.LazyJSType = class LazyJSType extends dart.DartType {
  toString() {
    let raw = this[_getRawJSType]();
    return raw != null ? dart.typeName(raw) : dart.str("JSObject<") + dart.str(this[_dartName$]) + dart.str(">");
  }
  [_getRawJSType]() {
    let raw = this[_rawJSType];
    if (raw != null) return raw;
    try {
      raw = dart.nullCheck(this[_getRawJSTypeFn$])();
    } catch (e$) {
      let e = dart.getThrown(e$);
      if (core.Object.is(e)) {
      } else
        throw e$;
    }
    if (raw == null) {
      dart._warn(dart.str("Cannot find native JavaScript type (") + dart.str(this[_dartName$]) + dart.str(") for type check"));
    } else {
      this[_rawJSType] = raw;
      this[_getRawJSTypeFn$] = null;
    }
    return raw;
  }
  rawJSTypeForCheck() {
    let t1;
    t1 = this[_getRawJSType]();
    return t1 == null ? dart.jsobject : t1;
  }
  isRawJSType(obj) {
    let raw = this[_getRawJSType]();
    if (raw != null) return obj instanceof raw;
    return dart._isJsObject(obj);
  }
  is(obj) {
    return this.isRawJSType(obj) || dart.is(obj, this);
  }
  as(obj) {
    return obj == null || this.is(obj) ? obj : dart.castError(obj, this);
  }
};
(dart.LazyJSType.new = function(_getRawJSTypeFn, _dartName) {
  if (_dartName == null) dart.nullFailed(L5, 176, 41, "_dartName");
  this[_rawJSType] = null;
  this[_getRawJSTypeFn$] = _getRawJSTypeFn;
  this[_dartName$] = _dartName;
  dart.LazyJSType.__proto__.new.call(this);
  ;
}).prototype = dart.LazyJSType.prototype;
dart.addTypeTests(dart.LazyJSType);
dart.setMethodSignature(dart.LazyJSType, () => ({
  __proto__: dart.getMethods(dart.LazyJSType.__proto__),
  [_getRawJSType]: dart.fnType(dart.nullable(core.Object), []),
  rawJSTypeForCheck: dart.fnType(core.Object, []),
  isRawJSType: dart.fnType(core.bool, [dart.dynamic])
}));
dart.setLibraryUri(dart.LazyJSType, L9$);
dart.setFieldSignature(dart.LazyJSType, () => ({
  __proto__: dart.getFields(dart.LazyJSType.__proto__),
  [_getRawJSTypeFn$]: dart.fieldType(dart.nullable(dart.fnType(dart.dynamic, []))),
  [_dartName$]: dart.finalFieldType(core.String),
  [_rawJSType]: dart.fieldType(dart.nullable(core.Object))
}));
dart.defineExtensionMethods(dart.LazyJSType, ['toString']);
dart.AnonymousJSType = class AnonymousJSType extends dart.DartType {
  toString() {
    return this[_dartName$];
  }
  is(obj) {
    return dart._isJsObject(obj) || dart.is(obj, this);
  }
  as(obj) {
    return obj == null || dart._isJsObject(obj) ? obj : dart.as(obj, this);
  }
};
(dart.AnonymousJSType.new = function(_dartName) {
  if (_dartName == null) dart.nullFailed(L5, 227, 24, "_dartName");
  this[_dartName$] = _dartName;
  dart.AnonymousJSType.__proto__.new.call(this);
  ;
}).prototype = dart.AnonymousJSType.prototype;
dart.addTypeTests(dart.AnonymousJSType);
dart.setLibraryUri(dart.AnonymousJSType, L9$);
dart.setFieldSignature(dart.AnonymousJSType, () => ({
  __proto__: dart.getFields(dart.AnonymousJSType.__proto__),
  [_dartName$]: dart.finalFieldType(core.String)
}));
dart.defineExtensionMethods(dart.AnonymousJSType, ['toString']);
var type$ = dart.privateName(dart, "NullableType.type");
dart.NullableType = class NullableType extends dart.DartType {
  get type() {
    return this[type$];
  }
  set type(value) {
    super.type = value;
  }
  get name() {
    return dart.str(this.type) + dart.str("?");
  }
  toString() {
    return this.name;
  }
  is(obj) {
    return obj == null || this.type.is(obj);
  }
  as(obj) {
    return obj == null || this.type.is(obj) ? obj : dart.as(obj, this);
  }
};
(dart.NullableType.new = function(type) {
  this[type$] = type;
  dart.NullableType.__proto__.new.call(this);
  ;
}).prototype = dart.NullableType.prototype;
dart.addTypeTests(dart.NullableType);
dart.setLibraryUri(dart.NullableType, L9$);
dart.setFieldSignature(dart.NullableType, () => ({
  __proto__: dart.getFields(dart.NullableType.__proto__),
  type: dart.finalFieldType(core.Type)
}));
dart.defineExtensionMethods(dart.NullableType, ['toString']);
var type$0 = dart.privateName(dart, "LegacyType.type");
dart.LegacyType = class LegacyType extends dart.DartType {
  get type() {
    return this[type$0];
  }
  set type(value) {
    super.type = value;
  }
  get name() {
    return dart.str(this.type);
  }
  toString() {
    return this.name;
  }
  is(obj) {
    if (obj == null) {
      return this.type === core.Object || this.type === dart.Never;
    }
    return this.type.is(obj);
  }
  as(obj) {
    return obj == null || this.type.is(obj) ? obj : dart.as(obj, this);
  }
};
(dart.LegacyType.new = function(type) {
  this[type$0] = type;
  dart.LegacyType.__proto__.new.call(this);
  ;
}).prototype = dart.LegacyType.prototype;
dart.addTypeTests(dart.LegacyType);
dart.setLibraryUri(dart.LegacyType, L9$);
dart.setFieldSignature(dart.LegacyType, () => ({
  __proto__: dart.getFields(dart.LegacyType.__proto__),
  type: dart.finalFieldType(core.Type)
}));
dart.defineExtensionMethods(dart.LegacyType, ['toString']);
dart.BottomType = class BottomType extends dart.DartType {
  toString() {
    return "bottom";
  }
};
(dart.BottomType.new = function() {
  dart.BottomType.__proto__.new.call(this);
  ;
}).prototype = dart.BottomType.prototype;
dart.addTypeTests(dart.BottomType);
dart.setLibraryUri(dart.BottomType, L9$);
dart.defineExtensionMethods(dart.BottomType, ['toString']);
core.Type = class Type extends core.Object {};
(core.Type.new = function() {
  ;
}).prototype = core.Type.prototype;
dart.addTypeTests(core.Type);
dart.addTypeCaches(core.Type);
dart.setLibraryUri(core.Type, L8$);
dart._Type = class _Type extends core.Type {
  toString() {
    return dart.typeName(this[_type$]);
  }
  get runtimeType() {
    return dart.wrapType(core.Type);
  }
};
(dart._Type.new = function(_type) {
  if (_type == null) dart.nullFailed(L5, 462, 14, "_type");
  this[_type$] = _type;
  ;
}).prototype = dart._Type.prototype;
dart.addTypeTests(dart._Type);
dart.setLibraryUri(dart._Type, L9$);
dart.setFieldSignature(dart._Type, () => ({
  __proto__: dart.getFields(dart._Type.__proto__),
  [_type$]: dart.finalFieldType(core.Object)
}));
dart.defineExtensionMethods(dart._Type, ['toString']);
dart.defineExtensionAccessors(dart._Type, ['runtimeType']);
dart.AbstractFunctionType = class AbstractFunctionType extends dart.DartType {};
(dart.AbstractFunctionType.new = function() {
  dart.AbstractFunctionType.__proto__.new.call(this);
  ;
}).prototype = dart.AbstractFunctionType.prototype;
dart.addTypeTests(dart.AbstractFunctionType);
dart.setLibraryUri(dart.AbstractFunctionType, L9$);
var _stringValue = dart.privateName(dart, "_stringValue");
var _createNameMap = dart.privateName(dart, "_createNameMap");
var returnType$ = dart.privateName(dart, "FunctionType.returnType");
var args$ = dart.privateName(dart, "FunctionType.args");
var optionals$ = dart.privateName(dart, "FunctionType.optionals");
var named$ = dart.privateName(dart, "FunctionType.named");
var requiredNamed$ = dart.privateName(dart, "FunctionType.requiredNamed");
dart.FunctionType = class FunctionType extends dart.AbstractFunctionType {
  get returnType() {
    return this[returnType$];
  }
  set returnType(value) {
    super.returnType = value;
  }
  get args() {
    return this[args$];
  }
  set args(value) {
    super.args = value;
  }
  get optionals() {
    return this[optionals$];
  }
  set optionals(value) {
    super.optionals = value;
  }
  get named() {
    return this[named$];
  }
  set named(value) {
    super.named = value;
  }
  get requiredNamed() {
    return this[requiredNamed$];
  }
  set requiredNamed(value) {
    super.requiredNamed = value;
  }
  static create(returnType, args, optionalArgs, requiredNamedArgs) {
    if (args == null) dart.nullFailed(L5, 719, 24, "args");
    let noOptionalArgs = optionalArgs == null && requiredNamedArgs == null;
    if (noOptionalArgs && args.length < 3) {
      return dart._createSmall(returnType, args);
    }
    args = dart._canonicalizeArray(args, dart._fnTypeArrayArgMap);
    let keys = [];
    let create = null;
    if (noOptionalArgs) {
      keys = [returnType, args];
      create = () => new dart.FunctionType.new(core.Type.as(returnType), args, [], {}, {});
    } else if (optionalArgs instanceof Array) {
      let optionals = dart._canonicalizeArray(optionalArgs, dart._fnTypeArrayArgMap);
      keys = [returnType, args, optionals];
      create = () => new dart.FunctionType.new(core.Type.as(returnType), args, optionals, {}, {});
    } else {
      let named = dart._canonicalizeNamed(optionalArgs, dart._fnTypeNamedArgMap);
      let requiredNamed = dart._canonicalizeNamed(requiredNamedArgs, dart._fnTypeNamedArgMap);
      keys = [returnType, args, named, requiredNamed];
      create = () => new dart.FunctionType.new(core.Type.as(returnType), args, [], named, requiredNamed);
    }
    return dart._memoizeArray(dart._fnTypeTypeMap, keys, create);
  }
  toString() {
    return this.name;
  }
  get requiredParameterCount() {
    return this.args[$length];
  }
  get positionalParameterCount() {
    return dart.notNull(this.args[$length]) + dart.notNull(this.optionals[$length]);
  }
  getPositionalParameter(i) {
    if (i == null) dart.nullFailed(L5, 758, 30, "i");
    let n = this.args[$length];
    return dart.notNull(i) < dart.notNull(n) ? this.args[$_get](i) : this.optionals[$_get](dart.notNull(i) + dart.notNull(n));
  }
  [_createNameMap](names) {
    if (names == null) dart.nullFailed(L5, 764, 52, "names");
    let result = new (IdentityMapOfString$Object()).new();
    names.sort();
    for (let i = 0; i < names.length; i = i + 1) {
      let name = names[i];
      result[$_set](name, this.named[name]);
    }
    return result;
  }
  getNamedParameters() {
    return this[_createNameMap](dart.getOwnPropertyNames(core.Object.as(this.named))[$toList]());
  }
  getRequiredNamedParameters() {
    return this[_createNameMap](dart.getOwnPropertyNames(core.Object.as(this.requiredNamed))[$toList]());
  }
  get name() {
    if (this[_stringValue] != null) return dart.nullCheck(this[_stringValue]);
    let buffer = "(";
    for (let i = 0; i < this.args.length; i = i + 1) {
      if (i > 0) {
        buffer = buffer + ", ";
      }
      buffer = buffer + dart.typeName(this.args[i]);
    }
    if (this.optionals.length > 0) {
      if (this.args.length > 0) buffer = buffer + ", ";
      buffer = buffer + "[";
      for (let i = 0; i < this.optionals.length; i = i + 1) {
        if (i > 0) {
          buffer = buffer + ", ";
        }
        buffer = buffer + dart.typeName(this.optionals[i]);
      }
      buffer = buffer + "]";
    } else if (Object.keys(this.named).length > 0 || Object.keys(this.requiredNamed).length > 0) {
      if (this.args.length > 0) buffer = buffer + ", ";
      buffer = buffer + "{";
      let names = dart.getOwnPropertyNames(core.Object.as(this.named));
      names.sort();
      for (let i = 0; i < names.length; i = i + 1) {
        if (i > 0) {
          buffer = buffer + ", ";
        }
        let typeNameString = dart.typeName(this.named[names[i]]);
        buffer = buffer + (dart.str(typeNameString) + dart.str(" ") + dart.str(names[i]));
      }
      if (Object.keys(this.requiredNamed).length > 0 && names.length > 0) buffer = buffer + ", ";
      names = dart.getOwnPropertyNames(core.Object.as(this.requiredNamed));
      names.sort();
      for (let i = 0; i < names.length; i = i + 1) {
        if (i > 0) {
          buffer = buffer + ", ";
        }
        let typeNameString = dart.typeName(this.requiredNamed[names[i]]);
        buffer = buffer + (dart.str("required ") + dart.str(typeNameString) + dart.str(" ") + dart.str(names[i]));
      }
      buffer = buffer + "}";
    }
    let returnTypeName = dart.typeName(this.returnType);
    buffer = buffer + (dart.str(") => ") + dart.str(returnTypeName));
    this[_stringValue] = buffer;
    return buffer;
  }
  is(obj) {
    if (typeof obj == "function") {
      let actual = obj[dart._runtimeType];
      return actual == null || dart.isSubtypeOf(actual, this);
    }
    return false;
  }
  as(obj) {
    if (dart.test(this.is(obj))) return obj;
    return dart.as(obj, this);
  }
};
(dart.FunctionType.new = function(returnType, args, optionals, named, requiredNamed) {
  if (returnType == null) dart.nullFailed(L5, 750, 21, "returnType");
  if (args == null) dart.nullFailed(L5, 750, 38, "args");
  if (optionals == null) dart.nullFailed(L5, 750, 49, "optionals");
  this[_stringValue] = null;
  this[returnType$] = returnType;
  this[args$] = args;
  this[optionals$] = optionals;
  this[named$] = named;
  this[requiredNamed$] = requiredNamed;
  dart.FunctionType.__proto__.new.call(this);
  ;
}).prototype = dart.FunctionType.prototype;
dart.addTypeTests(dart.FunctionType);
dart.setMethodSignature(dart.FunctionType, () => ({
  __proto__: dart.getMethods(dart.FunctionType.__proto__),
  getPositionalParameter: dart.fnType(dart.dynamic, [core.int]),
  [_createNameMap]: dart.fnType(core.Map$(core.String, core.Object), [core.List$(dart.nullable(core.Object))]),
  getNamedParameters: dart.fnType(core.Map$(core.String, core.Object), []),
  getRequiredNamedParameters: dart.fnType(core.Map$(core.String, core.Object), [])
}));
dart.setGetterSignature(dart.FunctionType, () => ({
  __proto__: dart.getGetters(dart.FunctionType.__proto__),
  requiredParameterCount: core.int,
  positionalParameterCount: core.int
}));
dart.setLibraryUri(dart.FunctionType, L9$);
dart.setFieldSignature(dart.FunctionType, () => ({
  __proto__: dart.getFields(dart.FunctionType.__proto__),
  returnType: dart.finalFieldType(core.Type),
  args: dart.finalFieldType(core.List),
  optionals: dart.finalFieldType(core.List),
  named: dart.finalFieldType(dart.dynamic),
  requiredNamed: dart.finalFieldType(dart.dynamic),
  [_stringValue]: dart.fieldType(dart.nullable(core.String))
}));
dart.defineExtensionMethods(dart.FunctionType, ['toString']);
var name$ = dart.privateName(dart, "TypeVariable.name");
dart.TypeVariable = class TypeVariable extends dart.DartType {
  get name() {
    return this[name$];
  }
  set name(value) {
    super.name = value;
  }
  toString() {
    return this.name;
  }
};
(dart.TypeVariable.new = function(name) {
  if (name == null) dart.nullFailed(L5, 859, 21, "name");
  this[name$] = name;
  dart.TypeVariable.__proto__.new.call(this);
  ;
}).prototype = dart.TypeVariable.prototype;
dart.addTypeTests(dart.TypeVariable);
dart.setLibraryUri(dart.TypeVariable, L9$);
dart.setFieldSignature(dart.TypeVariable, () => ({
  __proto__: dart.getFields(dart.TypeVariable.__proto__),
  name: dart.finalFieldType(core.String)
}));
dart.defineExtensionMethods(dart.TypeVariable, ['toString']);
dart.Variance = class Variance extends core.Object {};
(dart.Variance.new = function() {
  ;
}).prototype = dart.Variance.prototype;
dart.addTypeTests(dart.Variance);
dart.setLibraryUri(dart.Variance, L9$);
dart.defineLazy(dart.Variance, {
  /*dart.Variance.unrelated*/get unrelated() {
    return 0;
  },
  /*dart.Variance.covariant*/get covariant() {
    return 1;
  },
  /*dart.Variance.contravariant*/get contravariant() {
    return 2;
  },
  /*dart.Variance.invariant*/get invariant() {
    return 3;
  }
}, false);
var typeFormals$ = dart.privateName(dart, "GenericFunctionTypeIdentifier.typeFormals");
var typeBounds$ = dart.privateName(dart, "GenericFunctionTypeIdentifier.typeBounds");
var func = dart.privateName(dart, "GenericFunctionTypeIdentifier.function");
dart.GenericFunctionTypeIdentifier = class GenericFunctionTypeIdentifier extends dart.AbstractFunctionType {
  get typeFormals() {
    return this[typeFormals$];
  }
  set typeFormals(value) {
    super.typeFormals = value;
  }
  get typeBounds() {
    return this[typeBounds$];
  }
  set typeBounds(value) {
    super.typeBounds = value;
  }
  get function() {
    return this[func];
  }
  set function(value) {
    super.function = value;
  }
  toString() {
    if (this[_stringValue] != null) return dart.nullCheck(this[_stringValue]);
    let s = "<";
    let typeFormals = this.typeFormals;
    let typeBounds = this.typeBounds;
    for (let i = 0, n = core.int.as(dart.dload(typeFormals, 'length')); i < dart.notNull(n); i = i + 1) {
      if (i !== 0) s = s + ", ";
      s = s + typeFormals[i].name;
      let bound = dart.dsend(typeBounds, '_get', [i]);
      if (bound === dart.dynamic || bound === dart.nullable(core.Object) || !false && bound === core.Object) {
        continue;
      }
      s = s + (dart.str(" extends ") + dart.str(bound));
    }
    s = s + (">" + dart.notNull(dart.toString(this.function)));
    return this[_stringValue] = s;
  }
};
(dart.GenericFunctionTypeIdentifier.new = function(typeFormals, typeBounds, $function) {
  if ($function == null) dart.nullFailed(L5, 882, 47, "function");
  this[_stringValue] = null;
  this[typeFormals$] = typeFormals;
  this[typeBounds$] = typeBounds;
  this[func] = $function;
  dart.GenericFunctionTypeIdentifier.__proto__.new.call(this);
  ;
}).prototype = dart.GenericFunctionTypeIdentifier.prototype;
dart.addTypeTests(dart.GenericFunctionTypeIdentifier);
dart.setLibraryUri(dart.GenericFunctionTypeIdentifier, L9$);
dart.setFieldSignature(dart.GenericFunctionTypeIdentifier, () => ({
  __proto__: dart.getFields(dart.GenericFunctionTypeIdentifier.__proto__),
  typeFormals: dart.finalFieldType(dart.dynamic),
  typeBounds: dart.finalFieldType(dart.dynamic),
  function: dart.finalFieldType(dart.FunctionType),
  [_stringValue]: dart.fieldType(dart.nullable(core.String))
}));
dart.defineExtensionMethods(dart.GenericFunctionTypeIdentifier, ['toString']);
var _instantiateTypeBounds$ = dart.privateName(dart, "_instantiateTypeBounds");
var _instantiateTypeParts = dart.privateName(dart, "_instantiateTypeParts");
var _typeFormals = dart.privateName(dart, "_typeFormals");
var formalCount = dart.privateName(dart, "GenericFunctionType.formalCount");
dart.GenericFunctionType = class GenericFunctionType extends dart.AbstractFunctionType {
  get formalCount() {
    return this[formalCount];
  }
  set formalCount(value) {
    super.formalCount = value;
  }
  get typeFormals() {
    return this[_typeFormals];
  }
  get hasTypeBounds() {
    return this[_instantiateTypeBounds$] != null;
  }
  checkBounds(typeArgs) {
    if (typeArgs == null) dart.nullFailed(L5, 930, 25, "typeArgs");
    if (!dart.dtest(this.hasTypeBounds)) return;
    let bounds = this.instantiateTypeBounds(typeArgs);
    let typeFormals = this.typeFormals;
    for (let i = 0; i < dart.notNull(typeArgs[$length]); i = i + 1) {
      dart.checkTypeBound(core.Object.as(typeArgs[$_get](i)), bounds[$_get](i), typeFormals[$_get](i).name);
    }
  }
  instantiate(typeArgs) {
    let parts = this[_instantiateTypeParts].apply(null, typeArgs);
    return dart.FunctionType.create(parts[0], parts[1], parts[2], parts[3]);
  }
  instantiateTypeBounds(typeArgs) {
    if (typeArgs == null) dart.nullFailed(L5, 948, 43, "typeArgs");
    if (!dart.dtest(this.hasTypeBounds)) {
      return ListOfObject().filled(this.formalCount, dart.legacy(core.Object));
    }
    return this[_instantiateTypeBounds$].apply(null, typeArgs);
  }
  toString() {
    let s = "<";
    let typeFormals = this.typeFormals;
    let typeBounds = this.instantiateTypeBounds(typeFormals);
    for (let i = 0, n = typeFormals[$length]; i < dart.notNull(n); i = i + 1) {
      if (i !== 0) s = s + ", ";
      s = s + typeFormals[i].name;
      let bound = typeBounds[$_get](i);
      if (bound !== dart.dynamic && bound !== core.Object) {
        s = s + (dart.str(" extends ") + dart.str(bound));
      }
    }
    s = s + (">" + dart.notNull(dart.toString(this.instantiate(typeFormals))));
    return s;
  }
  instantiateDefaultBounds() {
    function defaultsToDynamic(type) {
      if (type === dart.dynamic) return true;
      if (type instanceof dart.NullableType || !false && type instanceof dart.LegacyType) {
        return type.type === core.Object;
      }
      return false;
    }
    let typeFormals = this.typeFormals;
    let all = new (IdentityMapOfTypeVariable$int()).new();
    let defaults = ListOfObjectN().filled(typeFormals[$length], null);
    let partials = new (IdentityMapOfTypeVariable$Object()).new();
    let typeBounds = this.instantiateTypeBounds(typeFormals);
    for (let i = 0; i < dart.notNull(typeFormals[$length]); i = i + 1) {
      let typeFormal = typeFormals[$_get](i);
      let bound = typeBounds[$_get](i);
      all[$_set](typeFormal, i);
      if (dart.test(defaultsToDynamic(bound))) {
        defaults[$_set](i, dart.dynamic);
      } else {
        defaults[$_set](i, typeFormal);
        partials[$_set](typeFormal, bound);
      }
    }
    function hasFreeFormal(t) {
      if (dart.test(partials[$containsKey](t))) return true;
      if (t instanceof dart.LegacyType || t instanceof dart.NullableType) {
        return hasFreeFormal(t.type);
      }
      let typeArgs = dart.getGenericArgs(t);
      if (typeArgs != null) return typeArgs[$any](hasFreeFormal);
      if (dart.GenericFunctionType.is(t)) {
        return hasFreeFormal(t.instantiate(t.typeFormals));
      }
      if (dart.FunctionType.is(t)) {
        return dart.test(hasFreeFormal(t.returnType)) || dart.test(t.args[$any](hasFreeFormal));
      }
      return false;
    }
    let hasProgress = true;
    while (hasProgress) {
      hasProgress = false;
      for (let typeFormal of partials[$keys]) {
        let partialBound = dart.nullCheck(partials[$_get](typeFormal));
        if (!dart.test(hasFreeFormal(partialBound))) {
          let index = dart.nullCheck(all[$_get](typeFormal));
          defaults[$_set](index, this.instantiateTypeBounds(defaults)[$_get](index));
          partials[$remove](typeFormal);
          hasProgress = true;
          break;
        }
      }
    }
    if (dart.test(partials[$isNotEmpty])) {
      dart.throwTypeError(dart.str("Instantiate to bounds failed for type with ") + dart.str("recursive generic bounds: ") + dart.str(dart.typeName(this)) + dart.str(". ") + dart.str("Try passing explicit type arguments."));
    }
    return defaults;
  }
  is(obj) {
    if (typeof obj == "function") {
      let actual = obj[dart._runtimeType];
      return actual != null && dart.isSubtypeOf(actual, this);
    }
    return false;
  }
  as(obj) {
    if (this.is(obj)) return obj;
    return dart.as(obj, this);
  }
};
(dart.GenericFunctionType.new = function(instantiateTypeParts, _instantiateTypeBounds) {
  this[_instantiateTypeBounds$] = _instantiateTypeBounds;
  this[_instantiateTypeParts] = instantiateTypeParts;
  this[formalCount] = instantiateTypeParts.length;
  this[_typeFormals] = dart._typeFormalsFromFunction(instantiateTypeParts);
  dart.GenericFunctionType.__proto__.new.call(this);
  ;
}).prototype = dart.GenericFunctionType.prototype;
dart.addTypeTests(dart.GenericFunctionType);
dart.setMethodSignature(dart.GenericFunctionType, () => ({
  __proto__: dart.getMethods(dart.GenericFunctionType.__proto__),
  checkBounds: dart.fnType(dart.void, [core.List]),
  instantiate: dart.fnType(dart.FunctionType, [dart.dynamic]),
  instantiateTypeBounds: dart.fnType(core.List$(core.Object), [core.List]),
  instantiateDefaultBounds: dart.fnType(core.List, [])
}));
dart.setGetterSignature(dart.GenericFunctionType, () => ({
  __proto__: dart.getGetters(dart.GenericFunctionType.__proto__),
  typeFormals: core.List$(dart.TypeVariable),
  hasTypeBounds: dart.dynamic
}));
dart.setLibraryUri(dart.GenericFunctionType, L9$);
dart.setFieldSignature(dart.GenericFunctionType, () => ({
  __proto__: dart.getFields(dart.GenericFunctionType.__proto__),
  [_instantiateTypeParts]: dart.finalFieldType(dart.dynamic),
  formalCount: dart.finalFieldType(core.int),
  [_instantiateTypeBounds$]: dart.finalFieldType(dart.dynamic),
  [_typeFormals]: dart.finalFieldType(core.List$(dart.TypeVariable))
}));
dart.defineExtensionMethods(dart.GenericFunctionType, ['toString']);
var _typeVariables = dart.privateName(dart, "_typeVariables");
var _isSubtypeMatch = dart.privateName(dart, "_isSubtypeMatch");
var _constrainLower = dart.privateName(dart, "_constrainLower");
var _constrainUpper = dart.privateName(dart, "_constrainUpper");
var _isFunctionSubtypeMatch = dart.privateName(dart, "_isFunctionSubtypeMatch");
var _isInterfaceSubtypeMatch = dart.privateName(dart, "_isInterfaceSubtypeMatch");
var _isTop$ = dart.privateName(dart, "_isTop");
dart._TypeInferrer = class _TypeInferrer extends core.Object {
  getInferredTypes() {
    let result = JSArrayOfObject().of([]);
    for (let constraint of this[_typeVariables][$values]) {
      if (constraint.lower != null) {
        result[$add](dart.nullCheck(constraint.lower));
      } else if (constraint.upper != null) {
        result[$add](dart.nullCheck(constraint.upper));
      } else {
        return null;
      }
    }
    return result;
  }
  trySubtypeMatch(subtype, supertype) {
    if (subtype == null) dart.nullFailed(L5, 1688, 31, "subtype");
    if (supertype == null) dart.nullFailed(L5, 1688, 47, "supertype");
    return this[_isSubtypeMatch](subtype, supertype);
  }
  [_constrainLower](parameter, lower) {
    if (parameter == null) dart.nullFailed(L5, 1691, 37, "parameter");
    if (lower == null) dart.nullFailed(L5, 1691, 55, "lower");
    dart.nullCheck(this[_typeVariables][$_get](parameter))[_constrainLower](lower);
  }
  [_constrainUpper](parameter, upper) {
    if (parameter == null) dart.nullFailed(L5, 1695, 37, "parameter");
    if (upper == null) dart.nullFailed(L5, 1695, 55, "upper");
    dart.nullCheck(this[_typeVariables][$_get](parameter))[_constrainUpper](upper);
  }
  [_isFunctionSubtypeMatch](subtype, supertype) {
    let t7;
    if (subtype == null) dart.nullFailed(L5, 1699, 45, "subtype");
    if (supertype == null) dart.nullFailed(L5, 1699, 67, "supertype");
    if (dart.notNull(subtype.requiredParameterCount) > dart.notNull(supertype.requiredParameterCount)) {
      return false;
    }
    if (dart.notNull(subtype.positionalParameterCount) < dart.notNull(supertype.positionalParameterCount)) {
      return false;
    }
    if (!dart.VoidType.is(supertype.returnType) && !dart.test(this[_isSubtypeMatch](subtype.returnType, supertype.returnType))) {
      return false;
    }
    for (let i = 0, n = supertype.positionalParameterCount; i < dart.notNull(n); i = i + 1) {
      if (!dart.test(this[_isSubtypeMatch](core.Object.as(supertype.getPositionalParameter(i)), core.Object.as(subtype.getPositionalParameter(i))))) {
        return false;
      }
    }
    let supertypeNamed = supertype.getNamedParameters();
    let supertypeRequiredNamed = supertype.getRequiredNamedParameters();
    let subtypeNamed = supertype.getNamedParameters();
    let subtypeRequiredNamed = supertype.getRequiredNamedParameters();
    if (!false) {
      supertypeNamed = (() => {
        let t1 = new (IdentityMapOfString$Object()).new();
        for (let t2 of supertypeNamed[$entries])
          t1[$_set](t2.key, t2.value);
        for (let t3 of supertypeRequiredNamed[$entries])
          t1[$_set](t3.key, t3.value);
        return t1;
      })();
      subtypeNamed = (() => {
        let t4 = new (IdentityMapOfString$Object()).new();
        for (let t5 of subtypeNamed[$entries])
          t4[$_set](t5.key, t5.value);
        for (let t6 of subtypeRequiredNamed[$entries])
          t4[$_set](t6.key, t6.value);
        return t4;
      })();
      supertypeRequiredNamed = new (IdentityMapOfString$Object()).new();
      subtypeRequiredNamed = new (IdentityMapOfString$Object()).new();
    }
    for (let name of subtypeRequiredNamed[$keys]) {
      let supertypeParamType = supertypeRequiredNamed[$_get](name);
      if (supertypeParamType == null) return false;
    }
    for (let name of supertypeNamed[$keys]) {
      let subtypeParamType = subtypeNamed[$_get](name);
      if (subtypeParamType == null) return false;
      if (!dart.test(this[_isSubtypeMatch](dart.nullCheck(supertypeNamed[$_get](name)), subtypeParamType))) {
        return false;
      }
    }
    for (let name of supertypeRequiredNamed[$keys]) {
      let subtypeParamType = (t7 = subtypeRequiredNamed[$_get](name), t7 == null ? dart.nullCheck(subtypeNamed[$_get](name)) : t7);
      if (!dart.test(this[_isSubtypeMatch](dart.nullCheck(supertypeRequiredNamed[$_get](name)), subtypeParamType))) {
        return false;
      }
    }
    return true;
  }
  [_isInterfaceSubtypeMatch](subtype, supertype) {
    if (subtype == null) dart.nullFailed(L5, 1775, 40, "subtype");
    if (supertype == null) dart.nullFailed(L5, 1775, 56, "supertype");
    let matchingSupertype = dart._getMatchingSupertype(subtype, supertype);
    if (matchingSupertype == null) return false;
    let matchingTypeArgs = dart.nullCheck(dart.getGenericArgs(matchingSupertype));
    let supertypeTypeArgs = dart.nullCheck(dart.getGenericArgs(supertype));
    for (let i = 0; i < dart.notNull(supertypeTypeArgs[$length]); i = i + 1) {
      if (!dart.test(this[_isSubtypeMatch](core.Object.as(matchingTypeArgs[$_get](i)), core.Object.as(supertypeTypeArgs[$_get](i))))) {
        return false;
      }
    }
    return true;
  }
  [_isSubtypeMatch](subtype, supertype) {
    if (subtype == null) dart.nullFailed(L5, 1819, 31, "subtype");
    if (supertype == null) dart.nullFailed(L5, 1819, 47, "supertype");
    if (dart.TypeVariable.is(subtype) && dart.test(this[_typeVariables][$containsKey](subtype))) {
      this[_constrainUpper](subtype, supertype);
      return true;
    }
    if (dart.TypeVariable.is(supertype) && dart.test(this[_typeVariables][$containsKey](supertype))) {
      this[_constrainLower](supertype, subtype);
      return true;
    }
    if (core.identical(subtype, supertype)) return true;
    if (dart.test(this[_isTop$](supertype))) return true;
    if (subtype === core.Null) return true;
    if (dart._isFutureOr(subtype)) {
      let subtypeArg = dart.nullCheck(dart.getGenericArgs(subtype))[$_get](0);
      if (dart._isFutureOr(supertype)) {
        let supertypeArg = dart.nullCheck(dart.getGenericArgs(supertype))[$_get](0);
        return this[_isSubtypeMatch](core.Object.as(subtypeArg), core.Object.as(supertypeArg));
      }
      let subtypeFuture = async.Future$(subtypeArg);
      return dart.test(this[_isSubtypeMatch](subtypeFuture, supertype)) && dart.test(this[_isSubtypeMatch](core.Object.as(dart.nullCheck(subtypeArg)), supertype));
    }
    if (dart._isFutureOr(supertype)) {
      let supertypeArg = dart.nullCheck(dart.getGenericArgs(supertype))[$_get](0);
      let supertypeFuture = async.Future$(supertypeArg);
      return dart.test(this[_isSubtypeMatch](subtype, supertypeFuture)) || dart.test(this[_isSubtypeMatch](subtype, core.Object.as(supertypeArg)));
    }
    if (dart.TypeVariable.is(subtype)) {
      return dart.TypeVariable.is(supertype) && subtype == supertype;
    }
    if (dart.GenericFunctionType.is(subtype)) {
      if (dart.GenericFunctionType.is(supertype)) {
        let formalCount = subtype.formalCount;
        if (formalCount != supertype.formalCount) return false;
        let fresh = supertype.typeFormals;
        let t1Bounds = subtype.instantiateTypeBounds(fresh);
        let t2Bounds = supertype.instantiateTypeBounds(fresh);
        for (let i = 0; i < dart.notNull(formalCount); i = i + 1) {
          if (!dart.test(this[_isSubtypeMatch](t2Bounds[$_get](i), t1Bounds[$_get](i)))) {
            return false;
          }
        }
        return this[_isFunctionSubtypeMatch](subtype.instantiate(fresh), supertype.instantiate(fresh));
      } else {
        return false;
      }
    } else if (dart.GenericFunctionType.is(supertype)) {
      return false;
    }
    if (dart.FunctionType.is(subtype)) {
      if (!dart.FunctionType.is(supertype)) {
        if (supertype === core.Function || supertype === core.Object) {
          return true;
        } else {
          return false;
        }
      }
      if (dart.FunctionType.is(supertype)) {
        return this[_isFunctionSubtypeMatch](subtype, supertype);
      }
    }
    return this[_isInterfaceSubtypeMatch](subtype, supertype);
  }
  [_isTop$](type) {
    if (type == null) dart.nullFailed(L5, 1962, 22, "type");
    return core.identical(type, dart.dynamic) || core.identical(type, dart.void) || type === core.Object;
  }
};
(dart._TypeInferrer.new = function(typeVariables) {
  if (typeVariables == null) dart.nullFailed(L5, 1663, 40, "typeVariables");
  this[_typeVariables] = LinkedHashMapOfTypeVariable$TypeConstraint().fromIterables(typeVariables, typeVariables[$map](dart.TypeConstraint, _ => {
    if (_ == null) dart.nullFailed(L5, 1665, 47, "_");
    return new dart.TypeConstraint.new();
  }));
  ;
}).prototype = dart._TypeInferrer.prototype;
dart.addTypeTests(dart._TypeInferrer);
dart.setMethodSignature(dart._TypeInferrer, () => ({
  __proto__: dart.getMethods(dart._TypeInferrer.__proto__),
  getInferredTypes: dart.fnType(dart.nullable(core.List$(core.Object)), []),
  trySubtypeMatch: dart.fnType(core.bool, [core.Object, core.Object]),
  [_constrainLower]: dart.fnType(dart.void, [dart.TypeVariable, core.Object]),
  [_constrainUpper]: dart.fnType(dart.void, [dart.TypeVariable, core.Object]),
  [_isFunctionSubtypeMatch]: dart.fnType(core.bool, [dart.FunctionType, dart.FunctionType]),
  [_isInterfaceSubtypeMatch]: dart.fnType(core.bool, [core.Object, core.Object]),
  [_isSubtypeMatch]: dart.fnType(core.bool, [core.Object, core.Object]),
  [_isTop$]: dart.fnType(core.bool, [core.Object])
}));
dart.setLibraryUri(dart._TypeInferrer, L9$);
dart.setFieldSignature(dart._TypeInferrer, () => ({
  __proto__: dart.getFields(dart._TypeInferrer.__proto__),
  [_typeVariables]: dart.finalFieldType(core.Map$(dart.TypeVariable, dart.TypeConstraint))
}));
var lower = dart.privateName(dart, "TypeConstraint.lower");
var upper = dart.privateName(dart, "TypeConstraint.upper");
dart.TypeConstraint = class TypeConstraint extends core.Object {
  get lower() {
    return this[lower];
  }
  set lower(value) {
    this[lower] = value;
  }
  get upper() {
    return this[upper];
  }
  set upper(value) {
    this[upper] = value;
  }
  [_constrainLower](type) {
    if (type == null) dart.nullFailed(L5, 1978, 31, "type");
    let _lower = this.lower;
    if (_lower != null) {
      if (dart.isSubtypeOf(_lower, type)) {
        return;
      }
      if (!dart.isSubtypeOf(type, _lower)) {
        type = core.Null;
      }
    }
    this.lower = type;
  }
  [_constrainUpper](type) {
    if (type == null) dart.nullFailed(L5, 1993, 31, "type");
    let _upper = this.upper;
    if (_upper != null) {
      if (dart.isSubtypeOf(type, _upper)) {
        return;
      }
      if (!dart.isSubtypeOf(_upper, type)) {
        type = core.Object;
      }
    }
    this.upper = type;
  }
  toString() {
    return dart.str(dart.typeName(this.lower)) + dart.str(" <: <type> <: ") + dart.str(dart.typeName(this.upper));
  }
};
(dart.TypeConstraint.new = function() {
  this[lower] = null;
  this[upper] = null;
  ;
}).prototype = dart.TypeConstraint.prototype;
dart.addTypeTests(dart.TypeConstraint);
dart.setMethodSignature(dart.TypeConstraint, () => ({
  __proto__: dart.getMethods(dart.TypeConstraint.__proto__),
  [_constrainLower]: dart.fnType(dart.void, [core.Object]),
  [_constrainUpper]: dart.fnType(dart.void, [core.Object])
}));
dart.setLibraryUri(dart.TypeConstraint, L9$);
dart.setFieldSignature(dart.TypeConstraint, () => ({
  __proto__: dart.getFields(dart.TypeConstraint.__proto__),
  lower: dart.fieldType(dart.nullable(core.Object)),
  upper: dart.fieldType(dart.nullable(core.Object))
}));
dart.defineExtensionMethods(dart.TypeConstraint, ['toString']);
var _trace = dart.privateName(dart, "_trace");
var _jsObjectMissingTrace = dart.privateName(dart, "_jsObjectMissingTrace");
dart._StackTrace = class _StackTrace extends core.Object {
  toString() {
    if (this[_trace] != null) return dart.nullCheck(this[_trace]);
    let e = this[_jsError$];
    let trace = "";
    if (e != null && typeof e === "object") {
      trace = _interceptors.NativeError.is(e) ? e[$dartStack]() : e.stack;
      let mapper = _debugger.stackTraceMapper;
      if (trace != null && mapper != null) {
        trace = mapper(trace);
      }
    }
    if (trace[$isEmpty] || this[_jsObjectMissingTrace] != null) {
      let jsToString = null;
      try {
        jsToString = "" + this[_jsObjectMissingTrace];
      } catch (e$) {
        let _ = dart.getThrown(e$);
        if (core.Object.is(_)) {
          jsToString = "<error converting JS object to string>";
        } else
          throw e$;
      }
      trace = dart.str("Non-error `") + dart.str(jsToString) + dart.str("` thrown by JS does not have stack trace.") + dart.str("\nCaught in Dart at:\n\n") + dart.str(trace);
    }
    return this[_trace] = trace;
  }
};
(dart._StackTrace.new = function(_jsError) {
  this[_trace] = null;
  this[_jsError$] = _jsError;
  this[_jsObjectMissingTrace] = null;
  ;
}).prototype = dart._StackTrace.prototype;
(dart._StackTrace.missing = function(caughtObj) {
  this[_trace] = null;
  this[_jsObjectMissingTrace] = caughtObj != null ? caughtObj : "null";
  this[_jsError$] = Error();
  ;
}).prototype = dart._StackTrace.prototype;
dart.addTypeTests(dart._StackTrace);
dart._StackTrace[dart.implements] = () => [core.StackTrace];
dart.setLibraryUri(dart._StackTrace, L9$);
dart.setFieldSignature(dart._StackTrace, () => ({
  __proto__: dart.getFields(dart._StackTrace.__proto__),
  [_jsError$]: dart.finalFieldType(dart.nullable(core.Object)),
  [_jsObjectMissingTrace]: dart.finalFieldType(dart.nullable(core.Object)),
  [_trace]: dart.fieldType(dart.nullable(core.String))
}));
dart.defineExtensionMethods(dart._StackTrace, ['toString']);
let const$;
let const$0;
var C0;
core.Invocation = class Invocation extends core.Object {
  static method(memberName, positionalArguments, namedArguments = null) {
    if (memberName == null) dart.nullFailed(L10, 24, 18, "memberName");
    return new core._Invocation.method(memberName, null, positionalArguments, namedArguments);
  }
  static genericMethod(memberName, typeArguments, positionalArguments, namedArguments = null) {
    if (memberName == null) dart.nullFailed(L10, 37, 43, "memberName");
    return new core._Invocation.method(memberName, typeArguments, positionalArguments, namedArguments);
  }
  get typeArguments() {
    return C0 || CT.C0;
  }
  get isAccessor() {
    return dart.test(this.isGetter) || dart.test(this.isSetter);
  }
};
(core.Invocation.new = function() {
  ;
}).prototype = core.Invocation.prototype;
dart.addTypeTests(core.Invocation);
dart.addTypeCaches(core.Invocation);
dart.setGetterSignature(core.Invocation, () => ({
  __proto__: dart.getGetters(core.Invocation.__proto__),
  typeArguments: core.List$(core.Type),
  isAccessor: core.bool
}));
dart.setLibraryUri(core.Invocation, L8$);
var memberName$ = dart.privateName(dart, "InvocationImpl.memberName");
var positionalArguments$ = dart.privateName(dart, "InvocationImpl.positionalArguments");
var namedArguments$ = dart.privateName(dart, "InvocationImpl.namedArguments");
var typeArguments$ = dart.privateName(dart, "InvocationImpl.typeArguments");
var isMethod$ = dart.privateName(dart, "InvocationImpl.isMethod");
var isGetter$ = dart.privateName(dart, "InvocationImpl.isGetter");
var isSetter$ = dart.privateName(dart, "InvocationImpl.isSetter");
var failureMessage$ = dart.privateName(dart, "InvocationImpl.failureMessage");
dart.InvocationImpl = class InvocationImpl extends core.Invocation {
  get memberName() {
    return this[memberName$];
  }
  set memberName(value) {
    super.memberName = value;
  }
  get positionalArguments() {
    return this[positionalArguments$];
  }
  set positionalArguments(value) {
    super.positionalArguments = value;
  }
  get namedArguments() {
    return this[namedArguments$];
  }
  set namedArguments(value) {
    super.namedArguments = value;
  }
  get typeArguments() {
    return this[typeArguments$];
  }
  set typeArguments(value) {
    super.typeArguments = value;
  }
  get isMethod() {
    return this[isMethod$];
  }
  set isMethod(value) {
    super.isMethod = value;
  }
  get isGetter() {
    return this[isGetter$];
  }
  set isGetter(value) {
    super.isGetter = value;
  }
  get isSetter() {
    return this[isSetter$];
  }
  set isSetter(value) {
    super.isSetter = value;
  }
  get failureMessage() {
    return this[failureMessage$];
  }
  set failureMessage(value) {
    super.failureMessage = value;
  }
  static _namedArgsToSymbols(namedArgs) {
    if (namedArgs == null) return const$0 || (const$0 = dart.constMap(SymbolL(), dart.dynamic, []));
    return MapOfSymbol$dynamic().unmodifiable(collection.LinkedHashMap.fromIterable(dart.getOwnPropertyNames(core.Object.as(namedArgs)), {
      key: dart._dartSymbol,
      value: k => namedArgs[k]
    }));
  }
};
(dart.InvocationImpl.new = function(memberName, positionalArguments, opts) {
  if (positionalArguments == null) dart.nullFailed(L2, 20, 44, "positionalArguments");
  let namedArguments = opts && 'namedArguments' in opts ? opts.namedArguments : null;
  let typeArguments = opts && 'typeArguments' in opts ? opts.typeArguments : const$ || (const$ = dart.constList([], dart.dynamic));
  if (typeArguments == null) dart.nullFailed(L2, 22, 12, "typeArguments");
  let isMethod = opts && 'isMethod' in opts ? opts.isMethod : false;
  if (isMethod == null) dart.nullFailed(L2, 23, 12, "isMethod");
  let isGetter = opts && 'isGetter' in opts ? opts.isGetter : false;
  if (isGetter == null) dart.nullFailed(L2, 24, 12, "isGetter");
  let isSetter = opts && 'isSetter' in opts ? opts.isSetter : false;
  if (isSetter == null) dart.nullFailed(L2, 25, 12, "isSetter");
  let failureMessage = opts && 'failureMessage' in opts ? opts.failureMessage : "method not found";
  if (failureMessage == null) dart.nullFailed(L2, 26, 12, "failureMessage");
  this[isMethod$] = isMethod;
  this[isGetter$] = isGetter;
  this[isSetter$] = isSetter;
  this[failureMessage$] = failureMessage;
  this[memberName$] = dart.test(isSetter) ? dart._setterSymbol(memberName) : dart._dartSymbol(memberName);
  this[positionalArguments$] = core.List.unmodifiable(positionalArguments);
  this[namedArguments$] = dart.InvocationImpl._namedArgsToSymbols(namedArguments);
  this[typeArguments$] = ListOfType().unmodifiable(typeArguments[$map](dart.dynamic, dart.wrapType));
  dart.InvocationImpl.__proto__.new.call(this);
  ;
}).prototype = dart.InvocationImpl.prototype;
dart.addTypeTests(dart.InvocationImpl);
dart.setLibraryUri(dart.InvocationImpl, L9$);
dart.setFieldSignature(dart.InvocationImpl, () => ({
  __proto__: dart.getFields(dart.InvocationImpl.__proto__),
  memberName: dart.finalFieldType(core.Symbol),
  positionalArguments: dart.finalFieldType(core.List),
  namedArguments: dart.finalFieldType(core.Map$(core.Symbol, dart.dynamic)),
  typeArguments: dart.finalFieldType(core.List$(core.Type)),
  isMethod: dart.finalFieldType(core.bool),
  isGetter: dart.finalFieldType(core.bool),
  isSetter: dart.finalFieldType(core.bool),
  failureMessage: dart.finalFieldType(core.String)
}));
var L37 = "org-dartlang-sdk:///lib/internal/linked_list.dart";
var L141 = "org-dartlang-sdk:///lib/_internal/js_dev_runtime/patch/typed_data_patch.dart";
var L110 = "org-dartlang-sdk:///lib/io/file_system_entity.dart";
var L38 = "org-dartlang-sdk:///lib/collection/iterable.dart";
var L138 = "org-dartlang-sdk:///lib/math/point.dart";
var L126 = "org-dartlang-sdk:///lib/io/service_object.dart";
var L43 = "dart:_isolate_helper";
var L121 = "org-dartlang-sdk:///lib/io/process.dart";
var L77 = "org-dartlang-sdk:///lib/collection/hash_set.dart";
var L14 = "org-dartlang-sdk:///lib/_internal/js_dev_runtime/private/foreign_helper.dart";
var L116 = "org-dartlang-sdk:///lib/io/link.dart";
var L87 = "org-dartlang-sdk:///lib/convert/encoding.dart";
var L4 = "org-dartlang-sdk:///lib/_internal/js_dev_runtime/private/ddc_runtime/runtime.dart";
var L99 = "dart:developer";
var L18 = "org-dartlang-sdk:///lib/_internal/js_dev_runtime/private/js_array.dart";
var L119 = "org-dartlang-sdk:///lib/io/overrides.dart";
var L21 = "org-dartlang-sdk:///lib/internal/internal.dart";
var L0 = "org-dartlang-sdk:///lib/_internal/js_dev_runtime/private/ddc_runtime/classes.dart";
var L79 = "org-dartlang-sdk:///lib/collection/linked_hash_map.dart";
var L69 = "org-dartlang-sdk:///lib/async/stream_transformers.dart";
var L17 = "org-dartlang-sdk:///lib/_internal/js_dev_runtime/private/interceptors.dart";
var L96 = "org-dartlang-sdk:///lib/convert/line_splitter.dart";
var L7 = "org-dartlang-sdk:///lib/_internal/js_dev_runtime/patch/core_patch.dart";
var L58 = "dart:_native_typed_data";
var L173 = "org-dartlang-sdk:///lib/core/uri.dart";
var L53 = "org-dartlang-sdk:///lib/_internal/js_dev_runtime/private/native_helper.dart";
var L71 = "org-dartlang-sdk:///lib/async/zone.dart";
var L39 = "org-dartlang-sdk:///lib/internal/sort.dart";
var L82 = "org-dartlang-sdk:///lib/collection/queue.dart";
var L154 = "org-dartlang-sdk:///lib/svg/dart2js/svg_dart2js.dart";
var L128 = "org-dartlang-sdk:///lib/io/string_transformer.dart";
var L22 = "org-dartlang-sdk:///lib/collection/list.dart";
var L11 = "org-dartlang-sdk:///lib/_internal/js_dev_runtime/private/debugger.dart";
var L56 = "dart:_metadata";
var L40 = "org-dartlang-sdk:///lib/_internal/js_dev_runtime/patch/internal_patch.dart";
var L120 = "org-dartlang-sdk:///lib/io/platform_impl.dart";
var L104 = "dart:io";
var L30 = "org-dartlang-sdk:///lib/convert/converter.dart";
var L162 = "org-dartlang-sdk:///lib/core/map.dart";
var L164 = "org-dartlang-sdk:///lib/core/bool.dart";
var L169 = "org-dartlang-sdk:///lib/core/exceptions.dart";
var L167 = "org-dartlang-sdk:///lib/core/duration.dart";
var L72 = "org-dartlang-sdk:///lib/async/async_error.dart";
var L134 = "org-dartlang-sdk:///lib/js_util/js_util.dart";
var L36 = "org-dartlang-sdk:///lib/internal/iterable.dart";
var L76 = "org-dartlang-sdk:///lib/collection/hash_map.dart";
var L135 = "org-dartlang-sdk:///lib/_internal/js_dev_runtime/patch/math_patch.dart";
var L118 = "org-dartlang-sdk:///lib/io/network_profiling.dart";
var L2 = "org-dartlang-sdk:///lib/_internal/js_dev_runtime/private/ddc_runtime/operations.dart";
var L19 = "org-dartlang-sdk:///lib/_internal/js_dev_runtime/private/js_number.dart";
var L20 = "org-dartlang-sdk:///lib/_internal/js_dev_runtime/private/js_string.dart";
var L12 = "dart:_debugger";
var L146 = "dart:html";
var L52 = "org-dartlang-sdk:///lib/_internal/js_dev_runtime/private/js_rti.dart";
var L74 = "org-dartlang-sdk:///lib/collection/set.dart";
var L6 = "org-dartlang-sdk:///lib/_internal/js_dev_runtime/private/ddc_runtime/utils.dart";
var L155 = "dart:svg";
var L42 = "org-dartlang-sdk:///lib/_internal/js_dev_runtime/private/isolate_helper.dart";
var L65 = "org-dartlang-sdk:///lib/async/future.dart";
var L34 = "org-dartlang-sdk:///lib/core/iterable.dart";
var L140 = "org-dartlang-sdk:///lib/typed_data/typed_data.dart";
var L27 = "org-dartlang-sdk:///lib/internal/async_cast.dart";
var L115 = "org-dartlang-sdk:///lib/io/io_sink.dart";
var L84 = "org-dartlang-sdk:///lib/_internal/js_dev_runtime/patch/convert_patch.dart";
var L49 = "org-dartlang-sdk:///lib/_internal/js_dev_runtime/private/custom_hash_map.dart";
var L123 = "org-dartlang-sdk:///lib/io/secure_socket.dart";
var L23 = "dart:collection";
var L137 = "org-dartlang-sdk:///lib/math/jenkins_smi_hash.dart";
var L75 = "org-dartlang-sdk:///lib/collection/collections.dart";
var L61 = "org-dartlang-sdk:///lib/async/broadcast_stream_controller.dart";
var L107 = "org-dartlang-sdk:///lib/io/data_transformer.dart";
var L92 = "org-dartlang-sdk:///lib/convert/chunked_conversion.dart";
var L81 = "org-dartlang-sdk:///lib/collection/linked_list.dart";
var L1 = "org-dartlang-sdk:///lib/_internal/js_dev_runtime/private/ddc_runtime/errors.dart";
var L64 = "org-dartlang-sdk:///lib/async/deferred_load.dart";
var L133 = "dart:js";
var L93 = "org-dartlang-sdk:///lib/convert/html_escape.dart";
var L145 = "org-dartlang-sdk:///lib/html/dart2js/html_dart2js.dart";
var L67 = "org-dartlang-sdk:///lib/async/schedule_microtask.dart";
var L66 = "org-dartlang-sdk:///lib/async/future_impl.dart";
var L97 = "org-dartlang-sdk:///lib/convert/utf.dart";
var L166 = "org-dartlang-sdk:///lib/core/date_time.dart";
var L73 = "org-dartlang-sdk:///lib/_internal/js_dev_runtime/patch/collection_patch.dart";
var L129 = "dart:isolate";
var L102 = "org-dartlang-sdk:///lib/developer/service.dart";
var L16 = "dart:_interceptors";
var L80 = "org-dartlang-sdk:///lib/collection/linked_hash_set.dart";
var L100 = "org-dartlang-sdk:///lib/developer/extension.dart";
var L106 = "org-dartlang-sdk:///lib/_internal/js_dev_runtime/patch/io_patch.dart";
var L90 = "org-dartlang-sdk:///lib/convert/byte_conversion.dart";
var L85 = "org-dartlang-sdk:///lib/convert/string_conversion.dart";
var L68 = "org-dartlang-sdk:///lib/async/stream_pipe.dart";
var L88 = "org-dartlang-sdk:///lib/convert/codec.dart";
var L170 = "org-dartlang-sdk:///lib/core/set.dart";
var L48 = "org-dartlang-sdk:///lib/_internal/js_dev_runtime/private/identity_hash_map.dart";
var L63 = "org-dartlang-sdk:///lib/async/stream_impl.dart";
var L8$ = "dart:core";
var L127 = "org-dartlang-sdk:///lib/io/stdio.dart";
var L108 = "org-dartlang-sdk:///lib/io/directory.dart";
var L44 = "dart:_js_helper";
var L122 = "org-dartlang-sdk:///lib/io/secure_server_socket.dart";
var L50 = "org-dartlang-sdk:///lib/_internal/js_dev_runtime/private/regexp_helper.dart";
var L47 = "org-dartlang-sdk:///lib/_internal/js_dev_runtime/private/linked_hash_map.dart";
var L131 = "org-dartlang-sdk:///lib/_internal/js_dev_runtime/patch/isolate_patch.dart";
var L45 = "org-dartlang-sdk:///lib/_internal/js_dev_runtime/private/js_helper.dart";
var L163 = "org-dartlang-sdk:///lib/core/annotations.dart";
var L112 = "org-dartlang-sdk:///lib/io/file.dart";
var L130 = "org-dartlang-sdk:///lib/isolate/isolate.dart";
var L168 = "org-dartlang-sdk:///lib/core/errors.dart";
var L78 = "org-dartlang-sdk:///lib/collection/iterator.dart";
var L51 = "org-dartlang-sdk:///lib/_internal/js_dev_runtime/private/string_helper.dart";
var L46 = "org-dartlang-sdk:///lib/_internal/js_dev_runtime/private/annotations.dart";
var L24 = "org-dartlang-sdk:///lib/internal/list.dart";
var L3 = "org-dartlang-sdk:///lib/_internal/js_dev_runtime/private/ddc_runtime/rtti.dart";
var L57 = "org-dartlang-sdk:///lib/_internal/js_dev_runtime/private/native_typed_data.dart";
var L114 = "org-dartlang-sdk:///lib/io/io_resource_info.dart";
var L94 = "org-dartlang-sdk:///lib/convert/json.dart";
var L86 = "org-dartlang-sdk:///lib/convert/ascii.dart";
var L105 = "org-dartlang-sdk:///lib/io/common.dart";
var L111 = "org-dartlang-sdk:///lib/io/embedder_config.dart";
var L125 = "org-dartlang-sdk:///lib/io/security_context.dart";
var L29 = "dart:async";
var L95 = "org-dartlang-sdk:///lib/convert/latin1.dart";
var L113 = "org-dartlang-sdk:///lib/io/file_impl.dart";
var L70 = "org-dartlang-sdk:///lib/async/timer.dart";
var L117 = "org-dartlang-sdk:///lib/io/network_policy.dart";
var L171 = "org-dartlang-sdk:///lib/core/stacktrace.dart";
var L41 = "org-dartlang-sdk:///lib/internal/symbol.dart";
var L109 = "org-dartlang-sdk:///lib/io/directory_impl.dart";
var L33 = "org-dartlang-sdk:///lib/internal/cast.dart";
var L9$ = "dart:_runtime";
var L136 = "dart:math";
var L62 = "org-dartlang-sdk:///lib/async/stream_controller.dart";
var L83 = "org-dartlang-sdk:///lib/collection/splay_tree.dart";
var L132 = "org-dartlang-sdk:///lib/_internal/js_dev_runtime/patch/js_patch.dart";
var L54 = "org-dartlang-sdk:///lib/_internal/js_dev_runtime/private/js_primitives.dart";
var L25 = "dart:_internal";
var L15 = "dart:_foreign_helper";
var L28 = "org-dartlang-sdk:///lib/async/stream.dart";
var L98 = "org-dartlang-sdk:///lib/_internal/js_dev_runtime/patch/developer_patch.dart";
var L10 = "org-dartlang-sdk:///lib/core/invocation.dart";
var L139 = "org-dartlang-sdk:///lib/math/rectangle.dart";
var L124 = "org-dartlang-sdk:///lib/io/socket.dart";
var L172 = "org-dartlang-sdk:///lib/core/string.dart";
var L89 = "org-dartlang-sdk:///lib/core/list.dart";
var L165 = "org-dartlang-sdk:///lib/core/comparable.dart";
var L103 = "org-dartlang-sdk:///lib/developer/timeline.dart";
var L26 = "org-dartlang-sdk:///lib/core/num.dart";
var L35 = "org-dartlang-sdk:///lib/collection/maps.dart";
var L32 = "org-dartlang-sdk:///lib/internal/bytes_builder.dart";
var L13 = "org-dartlang-sdk:///lib/_internal/js_dev_runtime/private/profile.dart";
var L59 = "dart:typed_data";
var L31 = "dart:convert";
var L60 = "org-dartlang-sdk:///lib/_internal/js_dev_runtime/patch/async_patch.dart";
var L101 = "org-dartlang-sdk:///lib/developer/profiler.dart";
var L142 = "org-dartlang-sdk:///lib/typed_data/unmodifiable_typed_data.dart";
var L91 = "org-dartlang-sdk:///lib/convert/base64.dart";
var L5 = "org-dartlang-sdk:///lib/_internal/js_dev_runtime/private/ddc_runtime/types.dart";
dart.defineLazy(CT, {
  get C0() {
    return C0 = dart.constList([], TypeL());
  },
  get C1() {
    return C1 = dart.const({
      __proto__: _debugger.JsonMLConfig.prototype,
      [name$0]: "none"
    });
  },
  get C2() {
    return C2 = dart.const({
      __proto__: _debugger.JsonMLConfig.prototype,
      [name$0]: "skipDart"
    });
  },
  get C3() {
    return C3 = dart.const({
      __proto__: _debugger.JsonMLConfig.prototype,
      [name$0]: "keyToString"
    });
  },
  get C4() {
    return C4 = dart.const({
      __proto__: _debugger.JsonMLConfig.prototype,
      [name$0]: "asClass"
    });
  },
  get C5() {
    return C5 = dart.const({
      __proto__: _debugger.JsonMLConfig.prototype,
      [name$0]: "asObject"
    });
  },
  get C6() {
    return C6 = dart.const({
      __proto__: _debugger.JsonMLConfig.prototype,
      [name$0]: "asMap"
    });
  },
  get C7() {
    return C7 = dart.fn(_debugger.getTypeName, dynamicToString());
  },
  get C8() {
    return C8 = dart.const({
      __proto__: _foreign_helper._Rest.prototype
    });
  },
  get C9() {
    return C9 = dart.const(new _js_helper.PrivateSymbol.new('_receiver', _receiver));
  },
  get C10() {
    return C10 = dart.const(new _js_helper.PrivateSymbol.new('_arguments', _arguments));
  },
  get C11() {
    return C11 = dart.const(new _js_helper.PrivateSymbol.new('_memberName', _memberName));
  },
  get C12() {
    return C12 = dart.const(new _js_helper.PrivateSymbol.new('_invocation', _invocation));
  },
  get C13() {
    return C13 = dart.const(new _js_helper.PrivateSymbol.new('_namedArguments', _namedArguments));
  },
  get C14() {
    return C14 = dart.const(new _js_helper.PrivateSymbol.new('_hasValue', _hasValue));
  },
  get C15() {
    return C15 = dart.const(new _js_helper.PrivateSymbol.new('_errorExplanation', _errorExplanation));
  },
  get C16() {
    return C16 = dart.const(new _js_helper.PrivateSymbol.new('_errorName', _errorName));
  },
  get C17() {
    return C17 = dart.const({
      __proto__: core.OutOfMemoryError.prototype
    });
  },
  get C18() {
    return C18 = dart.fn(collection.ListMixin._compareAny, dynamicAnddynamicToint());
  },
  get C19() {
    return C19 = dart.fn(collection.MapBase._id, ObjectNToObjectN());
  },
  get C20() {
    return C20 = dart.const({
      __proto__: EmptyIteratorOfNullN().prototype
    });
  },
  get C21() {
    return C21 = dart.constList([1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 10000000000.0, 100000000000.0, 1000000000000.0, 10000000000000.0, 100000000000000.0, 1000000000000000.0, 10000000000000000.0, 100000000000000000.0, 1000000000000000000.0, 10000000000000000000.0, 100000000000000000000.0, 1e+21, 1e+22], doubleL());
  },
  get C22() {
    return C22 = dart.fn(_js_helper.Primitives.dateNow, VoidToint());
  },
  get C23() {
    return C23 = dart.const(new _js_helper.PrivateSymbol.new('_receiver', _receiver$0));
  },
  get C24() {
    return C24 = dart.const(new _js_helper.PrivateSymbol.new('_arguments', _arguments$0));
  },
  get C25() {
    return C25 = dart.const(new _js_helper.PrivateSymbol.new('_memberName', _memberName$0));
  },
  get C26() {
    return C26 = dart.const(new _js_helper.PrivateSymbol.new('_invocation', _invocation$0));
  },
  get C27() {
    return C27 = dart.const(new _js_helper.PrivateSymbol.new('_namedArguments', _namedArguments$0));
  },
  get C28() {
    return C28 = dart.fn(_js_helper._matchString, MatchToString());
  },
  get C29() {
    return C29 = dart.fn(_js_helper._stringIdentity, StringToString());
  },
  get C30() {
    return C30 = dart.const({
      __proto__: _js_helper._Patch.prototype
    });
  },
  get C31() {
    return C31 = dart.const({
      __proto__: _js_helper._NotNull.prototype
    });
  },
  get C32() {
    return C32 = dart.const({
      __proto__: _js_helper._Undefined.prototype
    });
  },
  get C33() {
    return C33 = dart.const({
      __proto__: _js_helper._NullCheck.prototype
    });
  },
  get C34() {
    return C34 = dart.const({
      __proto__: typed_data.Endian.prototype,
      [Endian__littleEndian]: false
    });
  },
  get C35() {
    return C35 = dart.fn(async._nullDataHandler, dynamicTovoid());
  },
  get C36() {
    return C36 = dart.fn(async._nullErrorHandler, ObjectAndStackTraceTovoid());
  },
  get C37() {
    return C37 = dart.fn(async._nullDoneHandler, VoidTovoid());
  },
  get C38() {
    return C38 = dart.const({
      __proto__: async._DelayedDone.prototype
    });
  },
  get C39() {
    return C39 = dart.constList([], core.Null);
  },
  get C40() {
    return C40 = dart.fn(async.Future._kTrue, ObjectNTobool());
  },
  get C41() {
    return C41 = async._AsyncRun._scheduleImmediateJSOverride;
  },
  get C42() {
    return C42 = async._AsyncRun._scheduleImmediateWithPromise;
  },
  get C43() {
    return C43 = dart.const({
      __proto__: async._RootZone.prototype
    });
  },
  get C45() {
    return C45 = dart.fn(async._rootRun, ZoneNAndZoneDelegateNAndZone__ToR());
  },
  get C44() {
    return C44 = dart.const({
      __proto__: async._RunNullaryZoneFunction.prototype,
      [function$1]: C45 || CT.C45,
      [zone$0]: C43 || CT.C43
    });
  },
  get C47() {
    return C47 = dart.fn(async._rootRunUnary, ZoneNAndZoneDelegateNAndZone__ToR$());
  },
  get C46() {
    return C46 = dart.const({
      __proto__: async._RunUnaryZoneFunction.prototype,
      [function$2]: C47 || CT.C47,
      [zone$1]: C43 || CT.C43
    });
  },
  get C49() {
    return C49 = dart.fn(async._rootRunBinary, ZoneNAndZoneDelegateNAndZone__ToR$0());
  },
  get C48() {
    return C48 = dart.const({
      __proto__: async._RunBinaryZoneFunction.prototype,
      [function$3]: C49 || CT.C49,
      [zone$2]: C43 || CT.C43
    });
  },
  get C51() {
    return C51 = dart.fn(async._rootRegisterCallback, ZoneAndZoneDelegateAndZone__ToFn());
  },
  get C50() {
    return C50 = dart.const({
      __proto__: async._RegisterNullaryZoneFunction.prototype,
      [function$4]: C51 || CT.C51,
      [zone$3]: C43 || CT.C43
    });
  },
  get C53() {
    return C53 = dart.fn(async._rootRegisterUnaryCallback, ZoneAndZoneDelegateAndZone__ToFn$());
  },
  get C52() {
    return C52 = dart.const({
      __proto__: async._RegisterUnaryZoneFunction.prototype,
      [function$5]: C53 || CT.C53,
      [zone$4]: C43 || CT.C43
    });
  },
  get C55() {
    return C55 = dart.fn(async._rootRegisterBinaryCallback, ZoneAndZoneDelegateAndZone__ToFn$0());
  },
  get C54() {
    return C54 = dart.const({
      __proto__: async._RegisterBinaryZoneFunction.prototype,
      [function$6]: C55 || CT.C55,
      [zone$5]: C43 || CT.C43
    });
  },
  get C57() {
    return C57 = dart.fn(async._rootErrorCallback, ZoneAndZoneDelegateAndZone__ToAsyncErrorN());
  },
  get C56() {
    return C56 = dart.const({
      __proto__: _ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLAsyncErrorL().prototype,
      [function$0]: C57 || CT.C57,
      [zone$]: C43 || CT.C43
    });
  },
  get C59() {
    return C59 = dart.fn(async._rootScheduleMicrotask, ZoneNAndZoneDelegateNAndZone__Tovoid());
  },
  get C58() {
    return C58 = dart.const({
      __proto__: _ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLvoid().prototype,
      [function$0]: C59 || CT.C59,
      [zone$]: C43 || CT.C43
    });
  },
  get C61() {
    return C61 = dart.fn(async._rootCreateTimer, ZoneAndZoneDelegateAndZone__ToTimer());
  },
  get C60() {
    return C60 = dart.const({
      __proto__: _ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLTimerL().prototype,
      [function$0]: C61 || CT.C61,
      [zone$]: C43 || CT.C43
    });
  },
  get C63() {
    return C63 = dart.fn(async._rootCreatePeriodicTimer, ZoneAndZoneDelegateAndZone__ToTimer$());
  },
  get C62() {
    return C62 = dart.const({
      __proto__: _ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLTimerL$().prototype,
      [function$0]: C63 || CT.C63,
      [zone$]: C43 || CT.C43
    });
  },
  get C65() {
    return C65 = dart.fn(async._rootPrint, ZoneAndZoneDelegateAndZone__Tovoid$());
  },
  get C64() {
    return C64 = dart.const({
      __proto__: _ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLvoid$().prototype,
      [function$0]: C65 || CT.C65,
      [zone$]: C43 || CT.C43
    });
  },
  get C67() {
    return C67 = dart.fn(async._rootFork, ZoneNAndZoneDelegateNAndZone__ToZone());
  },
  get C66() {
    return C66 = dart.const({
      __proto__: _ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLZoneL().prototype,
      [function$0]: C67 || CT.C67,
      [zone$]: C43 || CT.C43
    });
  },
  get C69() {
    return C69 = dart.fn(async._rootHandleUncaughtError, ZoneNAndZoneDelegateNAndZone__Tovoid$());
  },
  get C68() {
    return C68 = dart.const({
      __proto__: _ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLvoid$0().prototype,
      [function$0]: C69 || CT.C69,
      [zone$]: C43 || CT.C43
    });
  },
  get C70() {
    return C70 = dart.fn(async._startMicrotaskLoop, VoidTovoid());
  },
  get C71() {
    return C71 = dart.fn(async._printToZone, StringTovoid());
  },
  get C72() {
    return C72 = dart.const({
      __proto__: async._ZoneSpecification.prototype,
      [fork$]: null,
      [print$]: null,
      [createPeriodicTimer$]: null,
      [createTimer$]: null,
      [scheduleMicrotask$]: null,
      [errorCallback$]: null,
      [registerBinaryCallback$]: null,
      [registerUnaryCallback$]: null,
      [registerCallback$]: null,
      [runBinary$]: null,
      [runUnary$]: null,
      [run$]: null,
      [handleUncaughtError$]: null
    });
  },
  get C73() {
    return C73 = dart.hashCode;
  },
  get C74() {
    return C74 = dart.fn(core.identityHashCode, ObjectNToint());
  },
  get C75() {
    return C75 = dart.fn(core.identical, ObjectNAndObjectNTobool());
  },
  get C76() {
    return C76 = dart.equals;
  },
  get C77() {
    return C77 = dart.fn(core.Comparable.compare, ComparableAndComparableToint());
  },
  get C78() {
    return C78 = dart.fn(collection._dynamicCompare, dynamicAnddynamicToint());
  },
  get C79() {
    return C79 = dart.const({
      __proto__: convert.AsciiDecoder.prototype,
      [_UnicodeSubsetDecoder__subsetMask]: 127,
      [_UnicodeSubsetDecoder__allowInvalid]: true
    });
  },
  get C80() {
    return C80 = dart.const({
      __proto__: convert.AsciiDecoder.prototype,
      [_UnicodeSubsetDecoder__subsetMask]: 127,
      [_UnicodeSubsetDecoder__allowInvalid]: false
    });
  },
  get C81() {
    return C81 = dart.const({
      __proto__: convert.AsciiEncoder.prototype,
      [_UnicodeSubsetEncoder__subsetMask]: 127
    });
  },
  get C82() {
    return C82 = dart.constList([239, 191, 189], intL());
  },
  get C83() {
    return C83 = dart.const({
      __proto__: convert.Base64Encoder.prototype,
      [Base64Encoder__urlSafe]: false
    });
  },
  get C84() {
    return C84 = dart.const({
      __proto__: convert.Base64Encoder.prototype,
      [Base64Encoder__urlSafe]: true
    });
  },
  get C85() {
    return C85 = dart.const({
      __proto__: convert.Base64Decoder.prototype
    });
  },
  get C86() {
    return C86 = dart.constList([], intL());
  },
  get C87() {
    return C87 = dart.const({
      __proto__: convert.HtmlEscapeMode.prototype,
      [escapeSlash$]: true,
      [escapeApos$]: true,
      [escapeQuot$]: true,
      [escapeLtGt$]: true,
      [_name$3]: "unknown"
    });
  },
  get C88() {
    return C88 = dart.const({
      __proto__: convert.HtmlEscapeMode.prototype,
      [escapeSlash$]: false,
      [escapeApos$]: false,
      [escapeQuot$]: true,
      [escapeLtGt$]: true,
      [_name$3]: "attribute"
    });
  },
  get C89() {
    return C89 = dart.const({
      __proto__: convert.HtmlEscapeMode.prototype,
      [escapeSlash$]: false,
      [escapeApos$]: true,
      [escapeQuot$]: false,
      [escapeLtGt$]: true,
      [_name$3]: "attribute"
    });
  },
  get C90() {
    return C90 = dart.const({
      __proto__: convert.HtmlEscapeMode.prototype,
      [escapeSlash$]: false,
      [escapeApos$]: false,
      [escapeQuot$]: false,
      [escapeLtGt$]: true,
      [_name$3]: "element"
    });
  },
  get C91() {
    return C91 = dart.const({
      __proto__: convert.JsonEncoder.prototype,
      [JsonEncoder__toEncodable]: null,
      [JsonEncoder_indent]: null
    });
  },
  get C92() {
    return C92 = dart.const({
      __proto__: convert.JsonDecoder.prototype,
      [JsonDecoder__reviver]: null
    });
  },
  get C93() {
    return C93 = dart.fn(convert._defaultToEncodable, dynamicTodynamic());
  },
  get C94() {
    return C94 = dart.const({
      __proto__: convert.Latin1Decoder.prototype,
      [_UnicodeSubsetDecoder__subsetMask]: 255,
      [_UnicodeSubsetDecoder__allowInvalid]: true
    });
  },
  get C95() {
    return C95 = dart.const({
      __proto__: convert.Latin1Decoder.prototype,
      [_UnicodeSubsetDecoder__subsetMask]: 255,
      [_UnicodeSubsetDecoder__allowInvalid]: false
    });
  },
  get C96() {
    return C96 = dart.const({
      __proto__: convert.Latin1Encoder.prototype,
      [_UnicodeSubsetEncoder__subsetMask]: 255
    });
  },
  get C97() {
    return C97 = dart.constList([65533], intL());
  },
  get C98() {
    return C98 = dart.const({
      __proto__: convert.Utf8Decoder.prototype,
      [Utf8Decoder__allowMalformed]: true
    });
  },
  get C99() {
    return C99 = dart.const({
      __proto__: convert.Utf8Decoder.prototype,
      [Utf8Decoder__allowMalformed]: false
    });
  },
  get C100() {
    return C100 = dart.const({
      __proto__: convert.Utf8Encoder.prototype
    });
  },
  get C101() {
    return C101 = dart.const({
      __proto__: convert.AsciiCodec.prototype,
      [_allowInvalid$]: false
    });
  },
  get C102() {
    return C102 = dart.const({
      __proto__: convert.Base64Codec.prototype,
      [_encoder$]: C83 || CT.C83
    });
  },
  get C103() {
    return C103 = dart.const({
      __proto__: convert.Base64Codec.prototype,
      [_encoder$]: C84 || CT.C84
    });
  },
  get C104() {
    return C104 = dart.const({
      __proto__: convert.HtmlEscape.prototype,
      [mode$]: C87 || CT.C87
    });
  },
  get C105() {
    return C105 = dart.const({
      __proto__: convert.JsonCodec.prototype,
      [_toEncodable]: null,
      [_reviver]: null
    });
  },
  get C106() {
    return C106 = dart.const({
      __proto__: convert.Latin1Codec.prototype,
      [_allowInvalid$1]: false
    });
  },
  get C107() {
    return C107 = dart.const({
      __proto__: convert.Utf8Codec.prototype,
      [_allowMalformed$]: false
    });
  },
  get C108() {
    return C108 = dart.const({
      __proto__: io.FileMode.prototype,
      [_mode$]: 0
    });
  },
  get C109() {
    return C109 = dart.const({
      __proto__: io.FileMode.prototype,
      [_mode$]: 1
    });
  },
  get C110() {
    return C110 = dart.const({
      __proto__: io.FileMode.prototype,
      [_mode$]: 2
    });
  },
  get C111() {
    return C111 = dart.const({
      __proto__: io.FileMode.prototype,
      [_mode$]: 3
    });
  },
  get C112() {
    return C112 = dart.const({
      __proto__: io.FileMode.prototype,
      [_mode$]: 4
    });
  },
  get C113() {
    return C113 = dart.const({
      __proto__: io.FileLock.prototype,
      [_type$1]: 1
    });
  },
  get C114() {
    return C114 = dart.const({
      __proto__: io.FileLock.prototype,
      [_type$1]: 2
    });
  },
  get C115() {
    return C115 = dart.const({
      __proto__: io.FileLock.prototype,
      [_type$1]: 3
    });
  },
  get C116() {
    return C116 = dart.const({
      __proto__: io.FileLock.prototype,
      [_type$1]: 4
    });
  },
  get C117() {
    return C117 = dart.const({
      __proto__: convert.LineSplitter.prototype
    });
  },
  get C118() {
    return C118 = dart.fn(io._FileResourceInfo.getOpenFiles, dynamicAnddynamicToFutureOfServiceExtensionResponse());
  },
  get C119() {
    return C119 = dart.fn(io._FileResourceInfo.getFileInfoMapByID, dynamicAnddynamicToFutureOfServiceExtensionResponse());
  },
  get C120() {
    return C120 = dart.constList(["file", "directory", "link", "notFound"], StringL());
  },
  get C121() {
    return C121 = dart.const({
      __proto__: io.FileSystemEntityType.prototype,
      [_type$2]: 0
    });
  },
  get C122() {
    return C122 = dart.const({
      __proto__: io.FileSystemEntityType.prototype,
      [_type$2]: 1
    });
  },
  get C123() {
    return C123 = dart.const({
      __proto__: io.FileSystemEntityType.prototype,
      [_type$2]: 2
    });
  },
  get C124() {
    return C124 = dart.const({
      __proto__: io.FileSystemEntityType.prototype,
      [_type$2]: 3
    });
  },
  get C125() {
    return C125 = dart.constList([C121 || CT.C121, C122 || CT.C122, C123 || CT.C123, C124 || CT.C124], FileSystemEntityTypeL());
  },
  get C126() {
    return C126 = dart.constList(["---", "--x", "-w-", "-wx", "r--", "r-x", "rw-", "rwx"], StringL());
  },
  get C127() {
    return C127 = dart.fn(io._NetworkProfiling._serviceExtensionHandler, StringAndMapOfString$StringToFutureOfServiceExtensionResponse());
  },
  get C128() {
    return C128 = dart.const({
      __proto__: io._SocketProfileType.prototype,
      [_name$4]: "_SocketProfileType.startTime",
      index: 0
    });
  },
  get C129() {
    return C129 = dart.const({
      __proto__: io._SocketProfileType.prototype,
      [_name$4]: "_SocketProfileType.endTime",
      index: 1
    });
  },
  get C130() {
    return C130 = dart.const({
      __proto__: io._SocketProfileType.prototype,
      [_name$4]: "_SocketProfileType.address",
      index: 2
    });
  },
  get C131() {
    return C131 = dart.const({
      __proto__: io._SocketProfileType.prototype,
      [_name$4]: "_SocketProfileType.port",
      index: 3
    });
  },
  get C132() {
    return C132 = dart.const({
      __proto__: io._SocketProfileType.prototype,
      [_name$4]: "_SocketProfileType.socketType",
      index: 4
    });
  },
  get C133() {
    return C133 = dart.const({
      __proto__: io._SocketProfileType.prototype,
      [_name$4]: "_SocketProfileType.readBytes",
      index: 5
    });
  },
  get C134() {
    return C134 = dart.const({
      __proto__: io._SocketProfileType.prototype,
      [_name$4]: "_SocketProfileType.writeBytes",
      index: 6
    });
  },
  get C135() {
    return C135 = dart.constList([C128 || CT.C128, C129 || CT.C129, C130 || CT.C130, C131 || CT.C131, C132 || CT.C132, C133 || CT.C133, C134 || CT.C134], _SocketProfileTypeL());
  },
  get C137() {
    return C137 = dart.const({
      __proto__: io.ProcessStartMode.prototype,
      [ProcessStartMode__mode]: 0
    });
  },
  get C138() {
    return C138 = dart.const({
      __proto__: io.ProcessStartMode.prototype,
      [ProcessStartMode__mode]: 1
    });
  },
  get C139() {
    return C139 = dart.const({
      __proto__: io.ProcessStartMode.prototype,
      [ProcessStartMode__mode]: 2
    });
  },
  get C140() {
    return C140 = dart.const({
      __proto__: io.ProcessStartMode.prototype,
      [ProcessStartMode__mode]: 3
    });
  },
  get C136() {
    return C136 = dart.constList([C137 || CT.C137, C138 || CT.C138, C139 || CT.C139, C140 || CT.C140], ProcessStartModeL());
  },
  get C141() {
    return C141 = dart.constList(["normal", "inheritStdio", "detached", "detachedWithStdio"], StringL());
  },
  get C142() {
    return C142 = dart.const({
      __proto__: io.SystemEncoding.prototype
    });
  },
  get C143() {
    return C143 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGTERM",
      [ProcessSignal__signalNumber]: 15
    });
  },
  get C144() {
    return C144 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGHUP",
      [ProcessSignal__signalNumber]: 1
    });
  },
  get C145() {
    return C145 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGINT",
      [ProcessSignal__signalNumber]: 2
    });
  },
  get C146() {
    return C146 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGQUIT",
      [ProcessSignal__signalNumber]: 3
    });
  },
  get C147() {
    return C147 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGILL",
      [ProcessSignal__signalNumber]: 4
    });
  },
  get C148() {
    return C148 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGTRAP",
      [ProcessSignal__signalNumber]: 5
    });
  },
  get C149() {
    return C149 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGABRT",
      [ProcessSignal__signalNumber]: 6
    });
  },
  get C150() {
    return C150 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGBUS",
      [ProcessSignal__signalNumber]: 7
    });
  },
  get C151() {
    return C151 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGFPE",
      [ProcessSignal__signalNumber]: 8
    });
  },
  get C152() {
    return C152 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGKILL",
      [ProcessSignal__signalNumber]: 9
    });
  },
  get C153() {
    return C153 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGUSR1",
      [ProcessSignal__signalNumber]: 10
    });
  },
  get C154() {
    return C154 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGSEGV",
      [ProcessSignal__signalNumber]: 11
    });
  },
  get C155() {
    return C155 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGUSR2",
      [ProcessSignal__signalNumber]: 12
    });
  },
  get C156() {
    return C156 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGPIPE",
      [ProcessSignal__signalNumber]: 13
    });
  },
  get C157() {
    return C157 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGALRM",
      [ProcessSignal__signalNumber]: 14
    });
  },
  get C158() {
    return C158 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGCHLD",
      [ProcessSignal__signalNumber]: 17
    });
  },
  get C159() {
    return C159 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGCONT",
      [ProcessSignal__signalNumber]: 18
    });
  },
  get C160() {
    return C160 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGSTOP",
      [ProcessSignal__signalNumber]: 19
    });
  },
  get C161() {
    return C161 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGTSTP",
      [ProcessSignal__signalNumber]: 20
    });
  },
  get C162() {
    return C162 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGTTIN",
      [ProcessSignal__signalNumber]: 21
    });
  },
  get C163() {
    return C163 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGTTOU",
      [ProcessSignal__signalNumber]: 22
    });
  },
  get C164() {
    return C164 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGURG",
      [ProcessSignal__signalNumber]: 23
    });
  },
  get C165() {
    return C165 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGXCPU",
      [ProcessSignal__signalNumber]: 24
    });
  },
  get C166() {
    return C166 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGXFSZ",
      [ProcessSignal__signalNumber]: 25
    });
  },
  get C167() {
    return C167 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGVTALRM",
      [ProcessSignal__signalNumber]: 26
    });
  },
  get C168() {
    return C168 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGPROF",
      [ProcessSignal__signalNumber]: 27
    });
  },
  get C169() {
    return C169 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGWINCH",
      [ProcessSignal__signalNumber]: 28
    });
  },
  get C170() {
    return C170 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGPOLL",
      [ProcessSignal__signalNumber]: 29
    });
  },
  get C171() {
    return C171 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGSYS",
      [ProcessSignal__signalNumber]: 31
    });
  },
  get C172() {
    return C172 = dart.constList(["RawSocketEvent.read", "RawSocketEvent.write", "RawSocketEvent.readClosed", "RawSocketEvent.closed"], StringL());
  },
  get C173() {
    return C173 = dart.const({
      __proto__: io.RawSocketEvent.prototype,
      [_value$0]: 0
    });
  },
  get C174() {
    return C174 = dart.const({
      __proto__: io.RawSocketEvent.prototype,
      [_value$0]: 1
    });
  },
  get C175() {
    return C175 = dart.const({
      __proto__: io.RawSocketEvent.prototype,
      [_value$0]: 2
    });
  },
  get C176() {
    return C176 = dart.const({
      __proto__: io.RawSocketEvent.prototype,
      [_value$0]: 3
    });
  },
  get C177() {
    return C177 = dart.const({
      __proto__: io.InternetAddressType.prototype,
      [_value$1]: 0
    });
  },
  get C178() {
    return C178 = dart.const({
      __proto__: io.InternetAddressType.prototype,
      [_value$1]: 1
    });
  },
  get C179() {
    return C179 = dart.const({
      __proto__: io.InternetAddressType.prototype,
      [_value$1]: 2
    });
  },
  get C180() {
    return C180 = dart.const({
      __proto__: io.InternetAddressType.prototype,
      [_value$1]: -1
    });
  },
  get C181() {
    return C181 = dart.const({
      __proto__: io.SocketDirection.prototype,
      [_value$2]: 0
    });
  },
  get C182() {
    return C182 = dart.const({
      __proto__: io.SocketDirection.prototype,
      [_value$2]: 1
    });
  },
  get C183() {
    return C183 = dart.const({
      __proto__: io.SocketDirection.prototype,
      [_value$2]: 2
    });
  },
  get C184() {
    return C184 = dart.const({
      __proto__: io.SocketOption.prototype,
      [_value$3]: 0
    });
  },
  get C185() {
    return C185 = dart.const({
      __proto__: io.SocketOption.prototype,
      [_value$3]: 1
    });
  },
  get C186() {
    return C186 = dart.const({
      __proto__: io.SocketOption.prototype,
      [_value$3]: 2
    });
  },
  get C187() {
    return C187 = dart.const({
      __proto__: io.SocketOption.prototype,
      [_value$3]: 3
    });
  },
  get C188() {
    return C188 = dart.const({
      __proto__: io.SocketOption.prototype,
      [_value$3]: 4
    });
  },
  get C189() {
    return C189 = dart.const({
      __proto__: io._RawSocketOptions.prototype,
      [_name$4]: "_RawSocketOptions.SOL_SOCKET",
      index: 0
    });
  },
  get C190() {
    return C190 = dart.const({
      __proto__: io._RawSocketOptions.prototype,
      [_name$4]: "_RawSocketOptions.IPPROTO_IP",
      index: 1
    });
  },
  get C191() {
    return C191 = dart.const({
      __proto__: io._RawSocketOptions.prototype,
      [_name$4]: "_RawSocketOptions.IP_MULTICAST_IF",
      index: 2
    });
  },
  get C192() {
    return C192 = dart.const({
      __proto__: io._RawSocketOptions.prototype,
      [_name$4]: "_RawSocketOptions.IPPROTO_IPV6",
      index: 3
    });
  },
  get C193() {
    return C193 = dart.const({
      __proto__: io._RawSocketOptions.prototype,
      [_name$4]: "_RawSocketOptions.IPV6_MULTICAST_IF",
      index: 4
    });
  },
  get C194() {
    return C194 = dart.const({
      __proto__: io._RawSocketOptions.prototype,
      [_name$4]: "_RawSocketOptions.IPPROTO_TCP",
      index: 5
    });
  },
  get C195() {
    return C195 = dart.const({
      __proto__: io._RawSocketOptions.prototype,
      [_name$4]: "_RawSocketOptions.IPPROTO_UDP",
      index: 6
    });
  },
  get C196() {
    return C196 = dart.constList([C189 || CT.C189, C190 || CT.C190, C191 || CT.C191, C192 || CT.C192, C193 || CT.C193, C194 || CT.C194, C195 || CT.C195], _RawSocketOptionsL());
  },
  get C197() {
    return C197 = dart.const({
      __proto__: io.StdioType.prototype,
      [name$11]: "terminal"
    });
  },
  get C198() {
    return C198 = dart.const({
      __proto__: io.StdioType.prototype,
      [name$11]: "pipe"
    });
  },
  get C199() {
    return C199 = dart.const({
      __proto__: io.StdioType.prototype,
      [name$11]: "file"
    });
  },
  get C200() {
    return C200 = dart.const({
      __proto__: io.StdioType.prototype,
      [name$11]: "other"
    });
  },
  get C201() {
    return C201 = dart.const({
      __proto__: io._WindowsCodePageEncoder.prototype
    });
  },
  get C202() {
    return C202 = dart.const({
      __proto__: io._WindowsCodePageDecoder.prototype
    });
  },
  get C203() {
    return C203 = dart.constList([1, 2, 3, 4, 0], intL());
  },
  get C204() {
    return C204 = dart.const({
      __proto__: io.ZLibCodec.prototype,
      [dictionary$]: null,
      [raw$]: false,
      [windowBits$]: 15,
      [strategy$]: 0,
      [memLevel$]: 8,
      [level$]: 6,
      [gzip$]: false
    });
  },
  get C205() {
    return C205 = dart.const({
      __proto__: io.GZipCodec.prototype,
      [raw$0]: false,
      [dictionary$0]: null,
      [windowBits$0]: 15,
      [strategy$0]: 0,
      [memLevel$0]: 8,
      [level$0]: 6,
      [gzip$0]: true
    });
  },
  get C206() {
    return C206 = dart.fn(async.runZoned, Fn__ToR());
  },
  get C207() {
    return C207 = dart.fn(js._convertToJS, ObjectNToObjectN());
  },
  get C208() {
    return C208 = dart.fn(js._wrapDartFunction, ObjectToObject());
  },
  get C209() {
    return C209 = dart.fn(js._wrapToDartHelper, ObjectToJsObject());
  },
  get C210() {
    return C210 = dart.const({
      __proto__: math._JSRandom.prototype
    });
  },
  get C211() {
    return C211 = dart.const({
      __proto__: typed_data.Endian.prototype,
      [Endian__littleEndian]: true
    });
  },
  get C212() {
    return C212 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "abort"
    });
  },
  get C213() {
    return C213 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "close"
    });
  },
  get C214() {
    return C214 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "error"
    });
  },
  get C215() {
    return C215 = dart.const({
      __proto__: EventStreamProviderOfVersionChangeEventL().prototype,
      [EventStreamProvider__eventType]: "versionchange"
    });
  },
  get C216() {
    return C216 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "success"
    });
  },
  get C217() {
    return C217 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "blocked"
    });
  },
  get C218() {
    return C218 = dart.const({
      __proto__: EventStreamProviderOfVersionChangeEventL().prototype,
      [EventStreamProvider__eventType]: "upgradeneeded"
    });
  },
  get C219() {
    return C219 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "complete"
    });
  },
  get C220() {
    return C220 = dart.const({
      __proto__: _js_helper.Creates.prototype,
      [types$0]: "JSExtendableArray|=Object|num|String"
    });
  },
  get C221() {
    return C221 = dart.const({
      __proto__: _js_helper.Returns.prototype,
      [types$1]: "JSExtendableArray|=Object|num|String"
    });
  },

  get C223() {
    return C223 = dart.const({
      __proto__: _CustomEventStreamProviderOfWheelEventL().prototype,
      [_CustomEventStreamProvider__eventTypeGetter]: C224 || CT.C224
    });
  },
  get C225() {
    return C225 = dart.const({
      __proto__: _CustomEventStreamProviderOfTransitionEventL().prototype,
      [_CustomEventStreamProvider__eventTypeGetter]: C226 || CT.C226
    });
  },
  get C227() {
    return C227 = dart.constList(["HEAD", "AREA", "BASE", "BASEFONT", "BR", "COL", "COLGROUP", "EMBED", "FRAME", "FRAMESET", "HR", "IMAGE", "IMG", "INPUT", "ISINDEX", "LINK", "META", "PARAM", "SOURCE", "STYLE", "TITLE", "WBR"], StringL());
  },
  get C228() {
    return C228 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "beforecopy"
    });
  },
  get C229() {
    return C229 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "beforecut"
    });
  },
  get C230() {
    return C230 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "beforepaste"
    });
  },
  get C231() {
    return C231 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "blur"
    });
  },
  get C232() {
    return C232 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "canplay"
    });
  },
  get C233() {
    return C233 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "canplaythrough"
    });
  },
  get C234() {
    return C234 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "change"
    });
  },
  get C235() {
    return C235 = dart.const({
      __proto__: EventStreamProviderOfMouseEventL().prototype,
      [EventStreamProvider__eventType]: "click"
    });
  },
  get C236() {
    return C236 = dart.const({
      __proto__: EventStreamProviderOfMouseEventL().prototype,
      [EventStreamProvider__eventType]: "contextmenu"
    });
  },
  get C237() {
    return C237 = dart.const({
      __proto__: EventStreamProviderOfClipboardEventL().prototype,
      [EventStreamProvider__eventType]: "copy"
    });
  },
  get C238() {
    return C238 = dart.const({
      __proto__: EventStreamProviderOfClipboardEventL().prototype,
      [EventStreamProvider__eventType]: "cut"
    });
  },
  get C239() {
    return C239 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "dblclick"
    });
  },
  get C240() {
    return C240 = dart.const({
      __proto__: EventStreamProviderOfMouseEventL().prototype,
      [EventStreamProvider__eventType]: "drag"
    });
  },
  get C241() {
    return C241 = dart.const({
      __proto__: EventStreamProviderOfMouseEventL().prototype,
      [EventStreamProvider__eventType]: "dragend"
    });
  },
  get C242() {
    return C242 = dart.const({
      __proto__: EventStreamProviderOfMouseEventL().prototype,
      [EventStreamProvider__eventType]: "dragenter"
    });
  },
  get C243() {
    return C243 = dart.const({
      __proto__: EventStreamProviderOfMouseEventL().prototype,
      [EventStreamProvider__eventType]: "dragleave"
    });
  },
  get C244() {
    return C244 = dart.const({
      __proto__: EventStreamProviderOfMouseEventL().prototype,
      [EventStreamProvider__eventType]: "dragover"
    });
  },
  get C245() {
    return C245 = dart.const({
      __proto__: EventStreamProviderOfMouseEventL().prototype,
      [EventStreamProvider__eventType]: "dragstart"
    });
  },
  get C246() {
    return C246 = dart.const({
      __proto__: EventStreamProviderOfMouseEventL().prototype,
      [EventStreamProvider__eventType]: "drop"
    });
  },
  get C247() {
    return C247 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "durationchange"
    });
  },
  get C248() {
    return C248 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "emptied"
    });
  },
  get C249() {
    return C249 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "ended"
    });
  },
  get C250() {
    return C250 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "focus"
    });
  },
  get C251() {
    return C251 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "input"
    });
  },
  get C252() {
    return C252 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "invalid"
    });
  },
  get C253() {
    return C253 = dart.const({
      __proto__: EventStreamProviderOfKeyboardEventL().prototype,
      [EventStreamProvider__eventType]: "keydown"
    });
  },
  get C254() {
    return C254 = dart.const({
      __proto__: EventStreamProviderOfKeyboardEventL().prototype,
      [EventStreamProvider__eventType]: "keypress"
    });
  },
  get C255() {
    return C255 = dart.const({
      __proto__: EventStreamProviderOfKeyboardEventL().prototype,
      [EventStreamProvider__eventType]: "keyup"
    });
  },
  get C256() {
    return C256 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "load"
    });
  },
  get C257() {
    return C257 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "loadeddata"
    });
  },
  get C258() {
    return C258 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "loadedmetadata"
    });
  },
  get C259() {
    return C259 = dart.const({
      __proto__: EventStreamProviderOfMouseEventL().prototype,
      [EventStreamProvider__eventType]: "mousedown"
    });
  },
  get C260() {
    return C260 = dart.const({
      __proto__: EventStreamProviderOfMouseEventL().prototype,
      [EventStreamProvider__eventType]: "mouseenter"
    });
  },
  get C261() {
    return C261 = dart.const({
      __proto__: EventStreamProviderOfMouseEventL().prototype,
      [EventStreamProvider__eventType]: "mouseleave"
    });
  },
  get C262() {
    return C262 = dart.const({
      __proto__: EventStreamProviderOfMouseEventL().prototype,
      [EventStreamProvider__eventType]: "mousemove"
    });
  },
  get C263() {
    return C263 = dart.const({
      __proto__: EventStreamProviderOfMouseEventL().prototype,
      [EventStreamProvider__eventType]: "mouseout"
    });
  },
  get C264() {
    return C264 = dart.const({
      __proto__: EventStreamProviderOfMouseEventL().prototype,
      [EventStreamProvider__eventType]: "mouseover"
    });
  },
  get C265() {
    return C265 = dart.const({
      __proto__: EventStreamProviderOfMouseEventL().prototype,
      [EventStreamProvider__eventType]: "mouseup"
    });
  },
  get C266() {
    return C266 = dart.const({
      __proto__: EventStreamProviderOfClipboardEventL().prototype,
      [EventStreamProvider__eventType]: "paste"
    });
  },
  get C267() {
    return C267 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "pause"
    });
  },
  get C268() {
    return C268 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "play"
    });
  },
  get C269() {
    return C269 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "playing"
    });
  },
  get C270() {
    return C270 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "ratechange"
    });
  },
  get C271() {
    return C271 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "reset"
    });
  },
  get C272() {
    return C272 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "resize"
    });
  },
  get C273() {
    return C273 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "scroll"
    });
  },
  get C274() {
    return C274 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "search"
    });
  },
  get C275() {
    return C275 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "seeked"
    });
  },
  get C276() {
    return C276 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "seeking"
    });
  },
  get C277() {
    return C277 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "select"
    });
  },
  get C278() {
    return C278 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "selectstart"
    });
  },
  get C279() {
    return C279 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "stalled"
    });
  },
  get C280() {
    return C280 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "submit"
    });
  },
  get C281() {
    return C281 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "suspend"
    });
  },
  get C282() {
    return C282 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "timeupdate"
    });
  },
  get C283() {
    return C283 = dart.const({
      __proto__: EventStreamProviderOfTouchEventL().prototype,
      [EventStreamProvider__eventType]: "touchcancel"
    });
  },
  get C284() {
    return C284 = dart.const({
      __proto__: EventStreamProviderOfTouchEventL().prototype,
      [EventStreamProvider__eventType]: "touchend"
    });
  },
  get C285() {
    return C285 = dart.const({
      __proto__: EventStreamProviderOfTouchEventL().prototype,
      [EventStreamProvider__eventType]: "touchenter"
    });
  },
  get C286() {
    return C286 = dart.const({
      __proto__: EventStreamProviderOfTouchEventL().prototype,
      [EventStreamProvider__eventType]: "touchleave"
    });
  },
  get C287() {
    return C287 = dart.const({
      __proto__: EventStreamProviderOfTouchEventL().prototype,
      [EventStreamProvider__eventType]: "touchmove"
    });
  },
  get C288() {
    return C288 = dart.const({
      __proto__: EventStreamProviderOfTouchEventL().prototype,
      [EventStreamProvider__eventType]: "touchstart"
    });
  },
  get C289() {
    return C289 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "volumechange"
    });
  },
  get C290() {
    return C290 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "waiting"
    });
  },
  get C291() {
    return C291 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "webkitfullscreenchange"
    });
  },
  get C292() {
    return C292 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "webkitfullscreenerror"
    });
  },
  get C293() {
    return C293 = dart.const({
      __proto__: EventStreamProviderOfWheelEventL().prototype,
      [EventStreamProvider__eventType]: "wheel"
    });
  },
  get C294() {
    return C294 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "accessibleclick"
    });
  },
  get C295() {
    return C295 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "accessiblecontextmenu"
    });
  },
  get C296() {
    return C296 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "accessibledecrement"
    });
  },
  get C297() {
    return C297 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "accessiblefocus"
    });
  },
  get C298() {
    return C298 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "accessibleincrement"
    });
  },
  get C299() {
    return C299 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "accessiblescrollintoview"
    });
  },
  get C300() {
    return C300 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "cancel"
    });
  },
  get C301() {
    return C301 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "finish"
    });
  },
  get C302() {
    return C302 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "cached"
    });
  },
  get C303() {
    return C303 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "checking"
    });
  },
  get C304() {
    return C304 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "downloading"
    });
  },
  get C305() {
    return C305 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "noupdate"
    });
  },
  get C306() {
    return C306 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "obsolete"
    });
  },
  get C307() {
    return C307 = dart.const({
      __proto__: EventStreamProviderOfProgressEventL().prototype,
      [EventStreamProvider__eventType]: "progress"
    });
  },
  get C308() {
    return C308 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "updateready"
    });
  },
  get C309() {
    return C309 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "hashchange"
    });
  },
  get C310() {
    return C310 = dart.const({
      __proto__: EventStreamProviderOfMessageEventL().prototype,
      [EventStreamProvider__eventType]: "message"
    });
  },
  get C311() {
    return C311 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "offline"
    });
  },
  get C312() {
    return C312 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "online"
    });
  },
  get C313() {
    return C313 = dart.const({
      __proto__: EventStreamProviderOfPopStateEventL().prototype,
      [EventStreamProvider__eventType]: "popstate"
    });
  },
  get C314() {
    return C314 = dart.const({
      __proto__: EventStreamProviderOfStorageEventL().prototype,
      [EventStreamProvider__eventType]: "storage"
    });
  },
  get C315() {
    return C315 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "unload"
    });
  },
  get C316() {
    return C316 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "mute"
    });
  },
  get C317() {
    return C317 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "unmute"
    });
  },
  get C318() {
    return C318 = dart.const({
      __proto__: EventStreamProviderOfContextEventL().prototype,
      [EventStreamProvider__eventType]: "webglcontextlost"
    });
  },
  get C319() {
    return C319 = dart.const({
      __proto__: EventStreamProviderOfContextEventL().prototype,
      [EventStreamProvider__eventType]: "webglcontextrestored"
    });
  },
  get C320() {
    return C320 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "pointerlockchange"
    });
  },
  get C321() {
    return C321 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "pointerlockerror"
    });
  },
  get C322() {
    return C322 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "readystatechange"
    });
  },
  get C323() {
    return C323 = dart.const({
      __proto__: EventStreamProviderOfSecurityPolicyViolationEventL().prototype,
      [EventStreamProvider__eventType]: "securitypolicyviolation"
    });
  },
  get C324() {
    return C324 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "selectionchange"
    });
  },
  get C328() {
    return C328 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "open"
    });
  },
  get C329() {
    return C329 = dart.const({
      __proto__: EventStreamProviderOfProgressEventL().prototype,
      [EventStreamProvider__eventType]: "abort"
    });
  },
  get C330() {
    return C330 = dart.const({
      __proto__: EventStreamProviderOfProgressEventL().prototype,
      [EventStreamProvider__eventType]: "error"
    });
  },
  get C331() {
    return C331 = dart.const({
      __proto__: EventStreamProviderOfProgressEventL().prototype,
      [EventStreamProvider__eventType]: "load"
    });
  },
  get C332() {
    return C332 = dart.const({
      __proto__: EventStreamProviderOfProgressEventL().prototype,
      [EventStreamProvider__eventType]: "loadend"
    });
  },
  get C333() {
    return C333 = dart.const({
      __proto__: EventStreamProviderOfProgressEventL().prototype,
      [EventStreamProvider__eventType]: "loadstart"
    });
  },
  get C334() {
    return C334 = dart.const({
      __proto__: EventStreamProviderOfProgressEventL().prototype,
      [EventStreamProvider__eventType]: "write"
    });
  },
  get C335() {
    return C335 = dart.const({
      __proto__: EventStreamProviderOfProgressEventL().prototype,
      [EventStreamProvider__eventType]: "writeend"
    });
  },
  get C336() {
    return C336 = dart.const({
      __proto__: EventStreamProviderOfProgressEventL().prototype,
      [EventStreamProvider__eventType]: "writestart"
    });
  },
  get C337() {
    return C337 = dart.const({
      __proto__: EventStreamProviderOfFontFaceSetLoadEventL().prototype,
      [EventStreamProvider__eventType]: "loading"
    });
  },
  get C338() {
    return C338 = dart.const({
      __proto__: EventStreamProviderOfFontFaceSetLoadEventL().prototype,
      [EventStreamProvider__eventType]: "loadingdone"
    });
  },
  get C339() {
    return C339 = dart.const({
      __proto__: EventStreamProviderOfFontFaceSetLoadEventL().prototype,
      [EventStreamProvider__eventType]: "loadingerror"
    });
  },
  get C340() {
    return C340 = dart.const({
      __proto__: EventStreamProviderOfWheelEventL().prototype,
      [EventStreamProvider__eventType]: "mousewheel"
    });
  },
  get C341() {
    return C341 = dart.const({
      __proto__: _CustomEventStreamProviderOfEventL().prototype,
      [_CustomEventStreamProvider__eventTypeGetter]: C342 || CT.C342
    });
  },
  get C343() {
    return C343 = dart.const({
      __proto__: EventStreamProviderOfProgressEventL().prototype,
      [EventStreamProvider__eventType]: "timeout"
    });
  },
  get C344() {
    return C344 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "addtrack"
    });
  },
  get C345() {
    return C345 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "removetrack"
    });
  },
  get C346() {
    return C346 = dart.constList([], MessagePortL());
  },
  get C347() {
    return C347 = dart.const({
      __proto__: EventStreamProviderOfMidiMessageEventL().prototype,
      [EventStreamProvider__eventType]: "midimessage"
    });
  },
  get C348() {
    return C348 = dart.constMap(StringL(), boolL(), ["childList", true, "attributes", true, "characterData", true, "subtree", true, "attributeOldValue", true, "characterDataOldValue", true]);
  },
  get C349() {
    return C349 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "click"
    });
  },
  get C350() {
    return C350 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "show"
    });
  },
  get C351() {
    return C351 = dart.const({
      __proto__: EventStreamProviderOfRtcDtmfToneChangeEventL().prototype,
      [EventStreamProvider__eventType]: "tonechange"
    });
  },
  get C352() {
    return C352 = dart.const({
      __proto__: EventStreamProviderOfMediaStreamEventL().prototype,
      [EventStreamProvider__eventType]: "addstream"
    });
  },
  get C353() {
    return C353 = dart.const({
      __proto__: EventStreamProviderOfRtcDataChannelEventL().prototype,
      [EventStreamProvider__eventType]: "datachannel"
    });
  },
  get C354() {
    return C354 = dart.const({
      __proto__: EventStreamProviderOfRtcPeerConnectionIceEventL().prototype,
      [EventStreamProvider__eventType]: "icecandidate"
    });
  },
  get C355() {
    return C355 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "iceconnectionstatechange"
    });
  },
  get C356() {
    return C356 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "negotiationneeded"
    });
  },
  get C357() {
    return C357 = dart.const({
      __proto__: EventStreamProviderOfMediaStreamEventL().prototype,
      [EventStreamProvider__eventType]: "removestream"
    });
  },
  get C358() {
    return C358 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "signalingstatechange"
    });
  },
  get C359() {
    return C359 = dart.const({
      __proto__: EventStreamProviderOfRtcTrackEventL().prototype,
      [EventStreamProvider__eventType]: "track"
    });
  },
  get C360() {
    return C360 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "activate"
    });
  },
  get C361() {
    return C361 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "fetch"
    });
  },
  get C362() {
    return C362 = dart.const({
      __proto__: EventStreamProviderOfForeignFetchEventL().prototype,
      [EventStreamProvider__eventType]: "foreignfetch"
    });
  },
  get C363() {
    return C363 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "install"
    });
  },
  get C364() {
    return C364 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "connect"
    });
  },
  get C365() {
    return C365 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "audioend"
    });
  },
  get C366() {
    return C366 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "audiostart"
    });
  },
  get C367() {
    return C367 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "end"
    });
  },
  get C368() {
    return C368 = dart.const({
      __proto__: EventStreamProviderOfSpeechRecognitionErrorL().prototype,
      [EventStreamProvider__eventType]: "error"
    });
  },
  get C369() {
    return C369 = dart.const({
      __proto__: EventStreamProviderOfSpeechRecognitionEventL().prototype,
      [EventStreamProvider__eventType]: "nomatch"
    });
  },
  get C370() {
    return C370 = dart.const({
      __proto__: EventStreamProviderOfSpeechRecognitionEventL().prototype,
      [EventStreamProvider__eventType]: "result"
    });
  },
  get C371() {
    return C371 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "soundend"
    });
  },
  get C372() {
    return C372 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "soundstart"
    });
  },
  get C373() {
    return C373 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "speechend"
    });
  },
  get C374() {
    return C374 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "speechstart"
    });
  },
  get C375() {
    return C375 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "start"
    });
  },
  get C376() {
    return C376 = dart.const({
      __proto__: EventStreamProviderOfSpeechSynthesisEventL().prototype,
      [EventStreamProvider__eventType]: "boundary"
    });
  },
  get C377() {
    return C377 = dart.const({
      __proto__: EventStreamProviderOfSpeechSynthesisEventL().prototype,
      [EventStreamProvider__eventType]: "end"
    });
  },
  get C378() {
    return C378 = dart.const({
      __proto__: EventStreamProviderOfSpeechSynthesisEventL().prototype,
      [EventStreamProvider__eventType]: "mark"
    });
  },
  get C379() {
    return C379 = dart.const({
      __proto__: EventStreamProviderOfSpeechSynthesisEventL().prototype,
      [EventStreamProvider__eventType]: "resume"
    });
  },
  get C380() {
    return C380 = dart.const({
      __proto__: EventStreamProviderOfSpeechSynthesisEventL().prototype,
      [EventStreamProvider__eventType]: "start"
    });
  },
  get C381() {
    return C381 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "cuechange"
    });
  },
  get C382() {
    return C382 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "enter"
    });
  },
  get C383() {
    return C383 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "exit"
    });
  },
  get C384() {
    return C384 = dart.const({
      __proto__: EventStreamProviderOfTrackEventL().prototype,
      [EventStreamProvider__eventType]: "addtrack"
    });
  },
  get C385() {
    return C385 = dart.const({
      __proto__: EventStreamProviderOfCloseEventL().prototype,
      [EventStreamProvider__eventType]: "close"
    });
  },
  get C386() {
    return C386 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "DOMContentLoaded"
    });
  },
  get C387() {
    return C387 = dart.const({
      __proto__: EventStreamProviderOfDeviceMotionEventL().prototype,
      [EventStreamProvider__eventType]: "devicemotion"
    });
  },
  get C388() {
    return C388 = dart.const({
      __proto__: EventStreamProviderOfDeviceOrientationEventL().prototype,
      [EventStreamProvider__eventType]: "deviceorientation"
    });
  },
  get C389() {
    return C389 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "loadstart"
    });
  },
  get C390() {
    return C390 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "pagehide"
    });
  },
  get C391() {
    return C391 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "pageshow"
    });
  },
  get C392() {
    return C392 = dart.const({
      __proto__: EventStreamProviderOfEventL().prototype,
      [EventStreamProvider__eventType]: "progress"
    });
  },
  get C393() {
    return C393 = dart.const({
      __proto__: EventStreamProviderOfAnimationEventL().prototype,
      [EventStreamProvider__eventType]: "webkitAnimationEnd"
    });
  },
  get C394() {
    return C394 = dart.const({
      __proto__: EventStreamProviderOfAnimationEventL().prototype,
      [EventStreamProvider__eventType]: "webkitAnimationIteration"
    });
  },
  get C395() {
    return C395 = dart.const({
      __proto__: EventStreamProviderOfAnimationEventL().prototype,
      [EventStreamProvider__eventType]: "webkitAnimationStart"
    });
  },
  get C399() {
    return C399 = dart.constList(["*::class", "*::dir", "*::draggable", "*::hidden", "*::id", "*::inert", "*::itemprop", "*::itemref", "*::itemscope", "*::lang", "*::spellcheck", "*::title", "*::translate", "A::accesskey", "A::coords", "A::hreflang", "A::name", "A::shape", "A::tabindex", "A::target", "A::type", "AREA::accesskey", "AREA::alt", "AREA::coords", "AREA::nohref", "AREA::shape", "AREA::tabindex", "AREA::target", "AUDIO::controls", "AUDIO::loop", "AUDIO::mediagroup", "AUDIO::muted", "AUDIO::preload", "BDO::dir", "BODY::alink", "BODY::bgcolor", "BODY::link", "BODY::text", "BODY::vlink", "BR::clear", "BUTTON::accesskey", "BUTTON::disabled", "BUTTON::name", "BUTTON::tabindex", "BUTTON::type", "BUTTON::value", "CANVAS::height", "CANVAS::width", "CAPTION::align", "COL::align", "COL::char", "COL::charoff", "COL::span", "COL::valign", "COL::width", "COLGROUP::align", "COLGROUP::char", "COLGROUP::charoff", "COLGROUP::span", "COLGROUP::valign", "COLGROUP::width", "COMMAND::checked", "COMMAND::command", "COMMAND::disabled", "COMMAND::label", "COMMAND::radiogroup", "COMMAND::type", "DATA::value", "DEL::datetime", "DETAILS::open", "DIR::compact", "DIV::align", "DL::compact", "FIELDSET::disabled", "FONT::color", "FONT::face", "FONT::size", "FORM::accept", "FORM::autocomplete", "FORM::enctype", "FORM::method", "FORM::name", "FORM::novalidate", "FORM::target", "FRAME::name", "H1::align", "H2::align", "H3::align", "H4::align", "H5::align", "H6::align", "HR::align", "HR::noshade", "HR::size", "HR::width", "HTML::version", "IFRAME::align", "IFRAME::frameborder", "IFRAME::height", "IFRAME::marginheight", "IFRAME::marginwidth", "IFRAME::width", "IMG::align", "IMG::alt", "IMG::border", "IMG::height", "IMG::hspace", "IMG::ismap", "IMG::name", "IMG::usemap", "IMG::vspace", "IMG::width", "INPUT::accept", "INPUT::accesskey", "INPUT::align", "INPUT::alt", "INPUT::autocomplete", "INPUT::autofocus", "INPUT::checked", "INPUT::disabled", "INPUT::inputmode", "INPUT::ismap", "INPUT::list", "INPUT::max", "INPUT::maxlength", "INPUT::min", "INPUT::multiple", "INPUT::name", "INPUT::placeholder", "INPUT::readonly", "INPUT::required", "INPUT::size", "INPUT::step", "INPUT::tabindex", "INPUT::type", "INPUT::usemap", "INPUT::value", "INS::datetime", "KEYGEN::disabled", "KEYGEN::keytype", "KEYGEN::name", "LABEL::accesskey", "LABEL::for", "LEGEND::accesskey", "LEGEND::align", "LI::type", "LI::value", "LINK::sizes", "MAP::name", "MENU::compact", "MENU::label", "MENU::type", "METER::high", "METER::low", "METER::max", "METER::min", "METER::value", "OBJECT::typemustmatch", "OL::compact", "OL::reversed", "OL::start", "OL::type", "OPTGROUP::disabled", "OPTGROUP::label", "OPTION::disabled", "OPTION::label", "OPTION::selected", "OPTION::value", "OUTPUT::for", "OUTPUT::name", "P::align", "PRE::width", "PROGRESS::max", "PROGRESS::min", "PROGRESS::value", "SELECT::autocomplete", "SELECT::disabled", "SELECT::multiple", "SELECT::name", "SELECT::required", "SELECT::size", "SELECT::tabindex", "SOURCE::type", "TABLE::align", "TABLE::bgcolor", "TABLE::border", "TABLE::cellpadding", "TABLE::cellspacing", "TABLE::frame", "TABLE::rules", "TABLE::summary", "TABLE::width", "TBODY::align", "TBODY::char", "TBODY::charoff", "TBODY::valign", "TD::abbr", "TD::align", "TD::axis", "TD::bgcolor", "TD::char", "TD::charoff", "TD::colspan", "TD::headers", "TD::height", "TD::nowrap", "TD::rowspan", "TD::scope", "TD::valign", "TD::width", "TEXTAREA::accesskey", "TEXTAREA::autocomplete", "TEXTAREA::cols", "TEXTAREA::disabled", "TEXTAREA::inputmode", "TEXTAREA::name", "TEXTAREA::placeholder", "TEXTAREA::readonly", "TEXTAREA::required", "TEXTAREA::rows", "TEXTAREA::tabindex", "TEXTAREA::wrap", "TFOOT::align", "TFOOT::char", "TFOOT::charoff", "TFOOT::valign", "TH::abbr", "TH::align", "TH::axis", "TH::bgcolor", "TH::char", "TH::charoff", "TH::colspan", "TH::headers", "TH::height", "TH::nowrap", "TH::rowspan", "TH::scope", "TH::valign", "TH::width", "THEAD::align", "THEAD::char", "THEAD::charoff", "THEAD::valign", "TR::align", "TR::bgcolor", "TR::char", "TR::charoff", "TR::valign", "TRACK::default", "TRACK::kind", "TRACK::label", "TRACK::srclang", "UL::compact", "UL::type", "VIDEO::controls", "VIDEO::height", "VIDEO::loop", "VIDEO::mediagroup", "VIDEO::muted", "VIDEO::preload", "VIDEO::width"], StringL());
  },
  get C400() {
    return C400 = dart.constList(["A::href", "AREA::href", "BLOCKQUOTE::cite", "BODY::background", "COMMAND::icon", "DEL::cite", "FORM::action", "IMG::src", "INPUT::src", "INS::cite", "Q::cite", "VIDEO::poster"], StringL());
  },
  get C401() {
    return C401 = dart.constMap(StringL(), intL(), ["Up", 38, "Down", 40, "Left", 37, "Right", 39, "Enter", 13, "F1", 112, "F2", 113, "F3", 114, "F4", 115, "F5", 116, "F6", 117, "F7", 118, "F8", 119, "F9", 120, "F10", 121, "F11", 122, "F12", 123, "U+007F", 46, "Home", 36, "End", 35, "PageUp", 33, "PageDown", 34, "Insert", 45]);
  },
  get C402() {
    return C402 = dart.constList([], StringL());
  },
  get C403() {
    return C403 = dart.constList(["A", "FORM"], StringL());
  },
  get C404() {
    return C404 = dart.constList(["A::accesskey", "A::coords", "A::hreflang", "A::name", "A::shape", "A::tabindex", "A::target", "A::type", "FORM::accept", "FORM::autocomplete", "FORM::enctype", "FORM::method", "FORM::name", "FORM::novalidate", "FORM::target"], StringL());
  },
  get C405() {
    return C405 = dart.constList(["A::href", "FORM::action"], StringL());
  },
  get C406() {
    return C406 = dart.constList(["IMG"], StringL());
  },
  get C407() {
    return C407 = dart.constList(["IMG::align", "IMG::alt", "IMG::border", "IMG::height", "IMG::hspace", "IMG::ismap", "IMG::name", "IMG::usemap", "IMG::vspace", "IMG::width"], StringL());
  },
  get C408() {
    return C408 = dart.constList(["IMG::src"], StringL());
  },
  get C409() {
    return C409 = dart.constList(["B", "BLOCKQUOTE", "BR", "EM", "H1", "H2", "H3", "H4", "H5", "H6", "HR", "I", "LI", "OL", "P", "SPAN", "UL"], StringL());
  },
  get C410() {
    return C410 = dart.constList(["bind", "if", "ref", "repeat", "syntax"], StringL());
  },

  get C414() {
    return C414 = dart.const({
      __proto__: _js_helper.Creates.prototype,
      [types$0]: "num|String|bool|JSExtendableArray|=Object|Blob|File|NativeByteBuffer|NativeTypedData|MessagePort"
    });
  },
  get C415() {
    return C415 = dart.const({
      __proto__: _js_helper.Returns.prototype,
      [types$1]: "num|String|bool|JSExtendableArray|=Object|Blob|File|NativeByteBuffer|NativeTypedData|MessagePort"
    });
  },
  get C416() {
    return C416 = dart.const({
      __proto__: EventStreamProviderOfAudioProcessingEventL().prototype,
      [EventStreamProvider__eventType]: "audioprocess"
    });
  },
  get C417() {
    return C417 = dart.const({
      __proto__: core.IntegerDivisionByZeroException.prototype
    });
  },
  get C418() {
    return C418 = dart.const({
      __proto__: core.Duration.prototype,
      [_duration$]: 0
    });
  },
  get C419() {
    return C419 = dart.constList([], ObjectL());
  },
  get C420() {
    return C420 = dart.constMap(SymbolL(), ObjectL(), []);
  },
  get C421() {
    return C421 = dart.fn(core._GeneratorIterable._id, intToint());
  },
  get C422() {
    return C422 = dart.const({
      __proto__: core._StringStackTrace.prototype,
      [_StringStackTrace__stackTrace]: ""
    });
  },
  get C423() {
    return C423 = dart.const(new _internal.Symbol.new('unary-'));
  },
  get C424() {
    return C424 = dart.const(new _internal.Symbol.new(''));
  },
  get C425() {
    return C425 = dart.fn(core.Uri.decodeComponent, StringToString());
  },
  get C426() {
    return C426 = dart.constMap(StringL(), ListLOfStringL(), []);
  },
  get C427() {
    return C427 = dart.fn(core._toUnmodifiableStringList, StringAndListOfStringToListOfString());
  },
  get C428() {
    return C428 = dart.fn(core._Uri._createList, VoidToListOfString());
  },
  get C429() {
    return C429 = dart.constList([0, 0, 24576, 1023, 65534, 34815, 65534, 18431], intL());
  },
  get C430() {
    return C430 = dart.constList([0, 0, 26498, 1023, 65534, 34815, 65534, 18431], intL());
  },
  get C431() {
    return C431 = dart.constList([0, 0, 65498, 45055, 65535, 34815, 65534, 18431], intL());
  },
  get C432() {
    return C432 = dart.constList([0, 0, 26624, 1023, 65534, 2047, 65534, 2047], intL());
  },
  get C433() {
    return C433 = dart.constList([0, 0, 32776, 33792, 1, 10240, 0, 0], intL());
  },
  get C434() {
    return C434 = dart.constList([0, 0, 32722, 12287, 65534, 34815, 65534, 18431], intL());
  },
  get C435() {
    return C435 = dart.constList([0, 0, 32754, 11263, 65534, 34815, 65534, 18431], intL());
  },
  get C436() {
    return C436 = dart.constList([0, 0, 32722, 12287, 65535, 34815, 65534, 18431], intL());
  },
  get C437() {
    return C437 = dart.constList([0, 0, 65490, 12287, 65535, 34815, 65534, 18431], intL());
  },
  get C438() {
    return C438 = dart.constList([0, 0, 65490, 45055, 65535, 34815, 65534, 18431], intL());
  },
  get C439() {
    return C439 = dart.constList([0, 0, 27858, 1023, 65534, 51199, 65535, 32767], intL());
  },
  get C440() {
    return C440 = dart.constMap(StringL(), StringL(), []);
  },
  get C441() {
    return C441 = dart.const({
      __proto__: core.Deprecated.prototype,
      [message$11]: "next release"
    });
  },
  get C442() {
    return C442 = dart.const({
      __proto__: core._Override.prototype
    });
  },
  get C443() {
    return C443 = dart.const({
      __proto__: core._Proxy.prototype
    });
  },
  get C444() {
    return C444 = dart.const({
      __proto__: core.Duration.prototype,
      [_duration$]: 120000000
    });
  },
  get C445() {
    return C445 = dart.constList(["cache-control", "connection", "date", "pragma", "trailer", "transfer-encoding", "upgrade", "via", "warning"], StringL());
  },
  get C446() {
    return C446 = dart.constList(["allow", "content-encoding", "content-language", "content-length", "content-location", "content-md5", "content-range", "content-type", "expires", "last-modified"], StringL());
  },
  get C447() {
    return C447 = dart.constList(["accept-ranges", "age", "etag", "location", "proxy-authenticate", "retry-after", "server", "vary", "www-authenticate"], StringL());
  },
  get C448() {
    return C448 = dart.constList(["accept", "accept-charset", "accept-encoding", "accept-language", "authorization", "expect", "from", "host", "if-match", "if-modified-since", "if-none-match", "if-range", "if-unmodified-since", "max-forwards", "proxy-authorization", "range", "referer", "te", "user-agent"], StringL());
  },
  get C449() {
    return C449 = dart.const({
      __proto__: core.Duration.prototype,
      [_duration$]: 15000000
    });
  },

  get C453() {
    return C453 = dart.constList([C450 || CT.C450, C451 || CT.C451, C452 || CT.C452], HttpClientResponseCompressionStateL());
  },
  get C454() {
    return C454 = dart.constList([-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -1, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, 62, -2, 62, -2, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -2, -2, -2, 0, -2, -2, -2, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -2, -2, -2, -2, 63, -2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2], intL());
  },
  get C455() {
    return C455 = dart.constList([3614090360.0, 3905402710.0, 606105819, 3250441966.0, 4118548399.0, 1200080426, 2821735955.0, 4249261313.0, 1770035416, 2336552879.0, 4294925233.0, 2304563134.0, 1804603682, 4254626195.0, 2792965006.0, 1236535329, 4129170786.0, 3225465664.0, 643717713, 3921069994.0, 3593408605.0, 38016083, 3634488961.0, 3889429448.0, 568446438, 3275163606.0, 4107603335.0, 1163531501, 2850285829.0, 4243563512.0, 1735328473, 2368359562.0, 4294588738.0, 2272392833.0, 1839030562, 4259657740.0, 2763975236.0, 1272893353, 4139469664.0, 3200236656.0, 681279174, 3936430074.0, 3572445317.0, 76029189, 3654602809.0, 3873151461.0, 530742520, 3299628645.0, 4096336452.0, 1126891415, 2878612391.0, 4237533241.0, 1700485571, 2399980690.0, 4293915773.0, 2240044497.0, 1873313359, 4264355552.0, 2734768916.0, 1309151649, 4149444226.0, 3174756917.0, 718787259, 3951481745.0], intL());
  },
  get C456() {
    return C456 = dart.constList([7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21], intL());
  },
  get C457() {
    return C457 = dart.constList(["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"], dart.dynamic);
  },
  get C458() {
    return C458 = dart.constList(["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], dart.dynamic);
  },
  get C459() {
    return C459 = dart.constList(["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"], dart.dynamic);
  },
  get C460() {
    return C460 = dart.constList(["jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec"], dart.dynamic);
  },
  get C461() {
    return C461 = dart.constList(["(", ")", "<", ">", "@", ",", ";", ":", "\\", "\"", "/", "[", "]", "?", "=", "{", "}"], StringL());
  },
  get C463() {
    return C463 = dart.const(new _js_helper.PrivateSymbol.new('_#IOSink#encoding', __IOSink_encoding$));
  },
  get C464() {
    return C464 = dart.const(new _js_helper.PrivateSymbol.new('_#IOSink#encoding=', __IOSink_encoding_));
  },
  get C465() {
    return C465 = dart.constList([48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70], intL());
  },
  get C466() {
    return C466 = dart.constList([13, 10, 48, 13, 10, 13, 10], intL());
  },
  get C467() {
    return C467 = dart.constList([48, 13, 10, 13, 10], intL());
  },

  get C470() {
    return C470 = dart.constList([C471 || CT.C471], _ProxyL());
  },


  get C475() {
    return C475 = dart.constList([72, 84, 84, 80], intL());
  },
  get C476() {
    return C476 = dart.constList([72, 84, 84, 80, 47, 49, 46], intL());
  },
  get C477() {
    return C477 = dart.constList([72, 84, 84, 80, 47, 49, 46, 48], intL());
  },
  get C478() {
    return C478 = dart.constList([72, 84, 84, 80, 47, 49, 46, 49], intL());
  },
  get C479() {
    return C479 = dart.constList([false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, true, true, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false], boolL());
  },
  get C482() {
    return C482 = dart.constList([0, 0, 255, 255], intL());
  },
  get C483() {
    return C483 = dart.const({
      __proto__: core.Duration.prototype,
      [_duration$]: 5000000
    });
  }
}, false);
var name$0 = dart.privateName(_debugger, "JsonMLConfig.name");
var C1;
var C2;
var C3;
var C4;
var C5;
var C6;
_debugger.JsonMLConfig = class JsonMLConfig extends core.Object {
  get name() {
    return this[name$0];
  }
  set name(value) {
    super.name = value;
  }
  toString() {
    return dart.str("JsonMLConfig(") + dart.str(this.name) + dart.str(")");
  }
};
(_debugger.JsonMLConfig.new = function(name) {
  if (name == null) dart.nullFailed(L11, 28, 27, "name");
  this[name$0] = name;
  ;
}).prototype = _debugger.JsonMLConfig.prototype;
dart.addTypeTests(_debugger.JsonMLConfig);
dart.addTypeCaches(_debugger.JsonMLConfig);
dart.setLibraryUri(_debugger.JsonMLConfig, L12);
dart.setFieldSignature(_debugger.JsonMLConfig, () => ({
  __proto__: dart.getFields(_debugger.JsonMLConfig.__proto__),
  name: dart.finalFieldType(core.String)
}));
dart.defineExtensionMethods(_debugger.JsonMLConfig, ['toString']);
dart.defineLazy(_debugger.JsonMLConfig, {
  /*_debugger.JsonMLConfig.none*/get none() {
    return C1 || CT.C1;
  },
  /*_debugger.JsonMLConfig.skipDart*/get skipDart() {
    return C2 || CT.C2;
  },
  /*_debugger.JsonMLConfig.keyToString*/get keyToString() {
    return C3 || CT.C3;
  },
  /*_debugger.JsonMLConfig.asClass*/get asClass() {
    return C4 || CT.C4;
  },
  /*_debugger.JsonMLConfig.asObject*/get asObject() {
    return C5 || CT.C5;
  },
  /*_debugger.JsonMLConfig.asMap*/get asMap() {
    return C6 || CT.C6;
  }
}, false);
_debugger.JSNative = class JSNative extends core.Object {
  static getProperty(object, name) {
    return object[name];
  }
  static setProperty(object, name, value) {
    return object[name] = value;
  }
};
(_debugger.JSNative.new = function() {
  ;
}).prototype = _debugger.JSNative.prototype;
dart.addTypeTests(_debugger.JSNative);
dart.addTypeCaches(_debugger.JSNative);
dart.setLibraryUri(_debugger.JSNative, L12);
var name$1 = dart.privateName(_debugger, "NameValuePair.name");
var value$ = dart.privateName(_debugger, "NameValuePair.value");
var config$ = dart.privateName(_debugger, "NameValuePair.config");
var hideName$ = dart.privateName(_debugger, "NameValuePair.hideName");
_debugger.NameValuePair = class NameValuePair extends core.Object {
  get name() {
    return this[name$1];
  }
  set name(value) {
    super.name = value;
  }
  get value() {
    return this[value$];
  }
  set value(value) {
    super.value = value;
  }
  get config() {
    return this[config$];
  }
  set config(value) {
    super.config = value;
  }
  get hideName() {
    return this[hideName$];
  }
  set hideName(value) {
    super.hideName = value;
  }
  _equals(other) {
    if (other == null) return false;
    if (!_debugger.NameValuePair.is(other)) return false;
    if (dart.test(this.hideName) || dart.test(other.hideName)) return this === other;
    return other.name == this.name;
  }
  get hashCode() {
    return dart.hashCode(this.name);
  }
  get displayName() {
    return dart.test(this.hideName) ? "" : this.name;
  }
};
(_debugger.NameValuePair.new = function(opts) {
  let name = opts && 'name' in opts ? opts.name : "";
  if (name == null) dart.nullFailed(L11, 172, 13, "name");
  let value = opts && 'value' in opts ? opts.value : null;
  let config = opts && 'config' in opts ? opts.config : C1 || CT.C1;
  if (config == null) dart.nullFailed(L11, 174, 12, "config");
  let hideName = opts && 'hideName' in opts ? opts.hideName : false;
  if (hideName == null) dart.nullFailed(L11, 175, 12, "hideName");
  this[name$1] = name;
  this[value$] = value;
  this[config$] = config;
  this[hideName$] = hideName;
  ;
}).prototype = _debugger.NameValuePair.prototype;
dart.addTypeTests(_debugger.NameValuePair);
dart.addTypeCaches(_debugger.NameValuePair);
dart.setGetterSignature(_debugger.NameValuePair, () => ({
  __proto__: dart.getGetters(_debugger.NameValuePair.__proto__),
  displayName: core.String
}));
dart.setLibraryUri(_debugger.NameValuePair, L12);
dart.setFieldSignature(_debugger.NameValuePair, () => ({
  __proto__: dart.getFields(_debugger.NameValuePair.__proto__),
  name: dart.finalFieldType(core.String),
  value: dart.finalFieldType(dart.nullable(core.Object)),
  config: dart.finalFieldType(_debugger.JsonMLConfig),
  hideName: dart.finalFieldType(core.bool)
}));
dart.defineExtensionMethods(_debugger.NameValuePair, ['_equals']);
dart.defineExtensionAccessors(_debugger.NameValuePair, ['hashCode']);
var key$ = dart.privateName(_debugger, "MapEntry.key");
var value$0 = dart.privateName(_debugger, "MapEntry.value");
_debugger.MapEntry = class MapEntry extends core.Object {
  get key() {
    return this[key$];
  }
  set key(value) {
    super.key = value;
  }
  get value() {
    return this[value$0];
  }
  set value(value) {
    super.value = value;
  }
};
(_debugger.MapEntry.new = function(opts) {
  let key = opts && 'key' in opts ? opts.key : null;
  let value = opts && 'value' in opts ? opts.value : null;
  this[key$] = key;
  this[value$0] = value;
  ;
}).prototype = _debugger.MapEntry.prototype;
dart.addTypeTests(_debugger.MapEntry);
dart.addTypeCaches(_debugger.MapEntry);
dart.setLibraryUri(_debugger.MapEntry, L12);
dart.setFieldSignature(_debugger.MapEntry, () => ({
  __proto__: dart.getFields(_debugger.MapEntry.__proto__),
  key: dart.finalFieldType(dart.nullable(core.Object)),
  value: dart.finalFieldType(dart.nullable(core.Object))
}));
var start$ = dart.privateName(_debugger, "IterableSpan.start");
var end$ = dart.privateName(_debugger, "IterableSpan.end");
var iterable$ = dart.privateName(_debugger, "IterableSpan.iterable");
_debugger.IterableSpan = class IterableSpan extends core.Object {
  get start() {
    return this[start$];
  }
  set start(value) {
    super.start = value;
  }
  get end() {
    return this[end$];
  }
  set end(value) {
    super.end = value;
  }
  get iterable() {
    return this[iterable$];
  }
  set iterable(value) {
    super.iterable = value;
  }
  get length() {
    return dart.notNull(this.end) - dart.notNull(this.start);
  }
  get maxPowerOfSubsetSize() {
    return (math.log(dart.notNull(this.length) - 0.5) / math.log(_debugger._maxSpanLength))[$truncate]();
  }
  get subsetSize() {
    return math.pow(_debugger._maxSpanLength, this.maxPowerOfSubsetSize)[$toInt]();
  }
  asMap() {
    return this.iterable[$skip](this.start)[$take](this.length)[$toList]()[$asMap]();
  }
  children() {
    let children = JSArrayOfNameValuePair().of([]);
    if (dart.notNull(this.length) <= dart.notNull(_debugger._maxSpanLength)) {
      this.asMap()[$forEach](dart.fn((i, element) => {
        if (i == null) dart.nullFailed(L11, 225, 24, "i");
        children[$add](new _debugger.NameValuePair.new({name: (dart.notNull(i) + dart.notNull(this.start))[$toString](), value: element}));
      }, intAnddynamicToNullN()));
    } else {
      for (let i = this.start; dart.notNull(i) < dart.notNull(this.end); i = dart.notNull(i) + dart.notNull(this.subsetSize)) {
        let subSpan = new _debugger.IterableSpan.new(i, math.min(core.int, this.end, dart.notNull(this.subsetSize) + dart.notNull(i)), this.iterable);
        if (subSpan.length === 1) {
          children[$add](new _debugger.NameValuePair.new({name: dart.toString(i), value: this.iterable[$elementAt](i)}));
        } else {
          children[$add](new _debugger.NameValuePair.new({name: dart.str("[") + dart.str(i) + dart.str("...") + dart.str(dart.notNull(subSpan.end) - 1) + dart.str("]"), value: subSpan, hideName: true}));
        }
      }
    }
    return children;
  }
};
(_debugger.IterableSpan.new = function(start, end, iterable) {
  if (start == null) dart.nullFailed(L11, 203, 21, "start");
  if (end == null) dart.nullFailed(L11, 203, 33, "end");
  if (iterable == null) dart.nullFailed(L11, 203, 43, "iterable");
  this[start$] = start;
  this[end$] = end;
  this[iterable$] = iterable;
  ;
}).prototype = _debugger.IterableSpan.prototype;
dart.addTypeTests(_debugger.IterableSpan);
dart.addTypeCaches(_debugger.IterableSpan);
dart.setMethodSignature(_debugger.IterableSpan, () => ({
  __proto__: dart.getMethods(_debugger.IterableSpan.__proto__),
  asMap: dart.fnType(core.Map$(core.int, dart.dynamic), []),
  children: dart.fnType(core.List$(_debugger.NameValuePair), [])
}));
dart.setGetterSignature(_debugger.IterableSpan, () => ({
  __proto__: dart.getGetters(_debugger.IterableSpan.__proto__),
  length: core.int,
  maxPowerOfSubsetSize: core.int,
  subsetSize: core.int
}));
dart.setLibraryUri(_debugger.IterableSpan, L12);
dart.setFieldSignature(_debugger.IterableSpan, () => ({
  __proto__: dart.getFields(_debugger.IterableSpan.__proto__),
  start: dart.finalFieldType(core.int),
  end: dart.finalFieldType(core.int),
  iterable: dart.finalFieldType(core.Iterable)
}));
var name$2 = dart.privateName(_debugger, "Library.name");
var object$ = dart.privateName(_debugger, "Library.object");
_debugger.Library = class Library extends core.Object {
  get name() {
    return this[name$2];
  }
  set name(value) {
    super.name = value;
  }
  get object() {
    return this[object$];
  }
  set object(value) {
    super.object = value;
  }
};
(_debugger.Library.new = function(name, object) {
  if (name == null) dart.nullFailed(L11, 248, 16, "name");
  if (object == null) dart.nullFailed(L11, 248, 27, "object");
  this[name$2] = name;
  this[object$] = object;
  ;
}).prototype = _debugger.Library.prototype;
dart.addTypeTests(_debugger.Library);
dart.addTypeCaches(_debugger.Library);
dart.setLibraryUri(_debugger.Library, L12);
dart.setFieldSignature(_debugger.Library, () => ({
  __proto__: dart.getFields(_debugger.Library.__proto__),
  name: dart.finalFieldType(core.String),
  object: dart.finalFieldType(core.Object)
}));
var object$0 = dart.privateName(_debugger, "NamedConstructor.object");
_debugger.NamedConstructor = class NamedConstructor extends core.Object {
  get object() {
    return this[object$0];
  }
  set object(value) {
    super.object = value;
  }
};
(_debugger.NamedConstructor.new = function(object) {
  if (object == null) dart.nullFailed(L11, 255, 25, "object");
  this[object$0] = object;
  ;
}).prototype = _debugger.NamedConstructor.prototype;
dart.addTypeTests(_debugger.NamedConstructor);
dart.addTypeCaches(_debugger.NamedConstructor);
dart.setLibraryUri(_debugger.NamedConstructor, L12);
dart.setFieldSignature(_debugger.NamedConstructor, () => ({
  __proto__: dart.getFields(_debugger.NamedConstructor.__proto__),
  object: dart.finalFieldType(core.Object)
}));
var name$3 = dart.privateName(_debugger, "HeritageClause.name");
var types$ = dart.privateName(_debugger, "HeritageClause.types");
_debugger.HeritageClause = class HeritageClause extends core.Object {
  get name() {
    return this[name$3];
  }
  set name(value) {
    super.name = value;
  }
  get types() {
    return this[types$];
  }
  set types(value) {
    super.types = value;
  }
};
(_debugger.HeritageClause.new = function(name, types) {
  if (name == null) dart.nullFailed(L11, 261, 23, "name");
  if (types == null) dart.nullFailed(L11, 261, 34, "types");
  this[name$3] = name;
  this[types$] = types;
  ;
}).prototype = _debugger.HeritageClause.prototype;
dart.addTypeTests(_debugger.HeritageClause);
dart.addTypeCaches(_debugger.HeritageClause);
dart.setLibraryUri(_debugger.HeritageClause, L12);
dart.setFieldSignature(_debugger.HeritageClause, () => ({
  __proto__: dart.getFields(_debugger.HeritageClause.__proto__),
  name: dart.finalFieldType(core.String),
  types: dart.finalFieldType(core.List)
}));
var _attributes = dart.privateName(_debugger, "_attributes");
var __JsonMLElement__jsonML = dart.privateName(_debugger, "_#JsonMLElement#_jsonML");
var _jsonML = dart.privateName(_debugger, "_jsonML");
_debugger.JsonMLElement = class JsonMLElement extends core.Object {
  get [_jsonML]() {
    let t8;
    t8 = this[__JsonMLElement__jsonML];
    return t8 == null ? dart.throw(new _internal.LateInitializationErrorImpl.new("Field '_jsonML' has not been initialized.")) : t8;
  }
  set [_jsonML](t8) {
    if (t8 == null) dart.nullFailed(L11, 285, 13, "null");
    this[__JsonMLElement__jsonML] = t8;
  }
  appendChild(element) {
    this[_jsonML][$add](dart.dsend(element, 'toJsonML', []));
  }
  createChild(tagName) {
    if (tagName == null) dart.nullFailed(L11, 296, 36, "tagName");
    let c = new _debugger.JsonMLElement.new(tagName);
    this[_jsonML][$add](c.toJsonML());
    return c;
  }
  createObjectTag(object) {
    let t9;
    t9 = this.createChild("object");
    return (() => {
      t9.addAttribute("object", object);
      return t9;
    })();
  }
  setStyle(style) {
    if (style == null) dart.nullFailed(L11, 305, 24, "style");
    dart.dput(this[_attributes], 'style', style);
  }
  addStyle(style) {
    let t9;
    if (style == null) dart.nullFailed(L11, 309, 19, "style");
    if (dart.dload(this[_attributes], 'style') == null) {
      dart.dput(this[_attributes], 'style', style);
    } else {
      t9 = this[_attributes];
      dart.dput(t9, 'style', dart.dsend(dart.dload(t9, 'style'), '+', [style]));
    }
  }
  addAttribute(key, value) {
    _debugger.JSNative.setProperty(this[_attributes], key, value);
  }
  createTextChild(text) {
    if (text == null) dart.nullFailed(L11, 321, 26, "text");
    this[_jsonML][$add](text);
  }
  toJsonML() {
    return this[_jsonML];
  }
};
(_debugger.JsonMLElement.new = function(tagName) {
  this[_attributes] = null;
  this[__JsonMLElement__jsonML] = null;
  this[_attributes] = {};
  this[_jsonML] = [tagName, this[_attributes]];
}).prototype = _debugger.JsonMLElement.prototype;
dart.addTypeTests(_debugger.JsonMLElement);
dart.addTypeCaches(_debugger.JsonMLElement);
dart.setMethodSignature(_debugger.JsonMLElement, () => ({
  __proto__: dart.getMethods(_debugger.JsonMLElement.__proto__),
  appendChild: dart.fnType(dart.dynamic, [dart.dynamic]),
  createChild: dart.fnType(_debugger.JsonMLElement, [core.String]),
  createObjectTag: dart.fnType(_debugger.JsonMLElement, [dart.dynamic]),
  setStyle: dart.fnType(dart.void, [core.String]),
  addStyle: dart.fnType(dart.dynamic, [core.String]),
  addAttribute: dart.fnType(dart.dynamic, [dart.dynamic, dart.dynamic]),
  createTextChild: dart.fnType(dart.dynamic, [core.String]),
  toJsonML: dart.fnType(dart.dynamic, [])
}));
dart.setGetterSignature(_debugger.JsonMLElement, () => ({
  __proto__: dart.getGetters(_debugger.JsonMLElement.__proto__),
  [_jsonML]: core.List
}));
dart.setSetterSignature(_debugger.JsonMLElement, () => ({
  __proto__: dart.getSetters(_debugger.JsonMLElement.__proto__),
  [_jsonML]: core.List
}));
dart.setLibraryUri(_debugger.JsonMLElement, L12);
dart.setFieldSignature(_debugger.JsonMLElement, () => ({
  __proto__: dart.getFields(_debugger.JsonMLElement.__proto__),
  [_attributes]: dart.fieldType(dart.dynamic),
  [__JsonMLElement__jsonML]: dart.fieldType(dart.nullable(core.List))
}));
var _simpleFormatter$ = dart.privateName(_debugger, "_simpleFormatter");
var customFormattersOn = dart.privateName(_debugger, "JsonMLFormatter.customFormattersOn");
_debugger.JsonMLFormatter = class JsonMLFormatter extends core.Object {
  get customFormattersOn() {
    return this[customFormattersOn];
  }
  set customFormattersOn(value) {
    this[customFormattersOn] = value;
  }
  setMaxSpanLengthForTestingOnly(spanLength) {
    if (spanLength == null) dart.nullFailed(L11, 363, 43, "spanLength");
    _debugger._maxSpanLength = spanLength;
  }
  header(object, config) {
    let t9;
    this.customFormattersOn = true;
    if (dart.equals(config, _debugger.JsonMLConfig.skipDart) || dart.test(_debugger.isNativeJavaScriptObject(object))) {
      return null;
    }
    let c = this[_simpleFormatter$].preview(object, config);
    if (c == null) return null;
    if (dart.equals(config, _debugger.JsonMLConfig.keyToString)) {
      c = dart.toString(object);
    }
    let element = (t9 = new _debugger.JsonMLElement.new("span"), (() => {
      t9.setStyle("background-color: #d9edf7;color: black");
      t9.createTextChild(c);
      return t9;
    })());
    return element.toJsonML();
  }
  hasBody(object, config) {
    return this[_simpleFormatter$].hasChildren(object, config);
  }
  body(object, config) {
    let t9, t9$, t9$0, t9$1, t9$2;
    let body = (t9 = new _debugger.JsonMLElement.new("ol"), (() => {
      t9.setStyle(dart.str("list-style-type: none;") + dart.str("padding-left: 0px;") + dart.str("margin-top: 0px;") + dart.str("margin-bottom: 0px;") + dart.str("margin-left: 12px;"));
      return t9;
    })());
    if (core.StackTrace.is(object)) {
      body.addStyle("background-color: thistle;color: rgb(196, 26, 22);");
    }
    let children = this[_simpleFormatter$].children(object, config);
    if (children == null) return body.toJsonML();
    for (let child of children) {
      let li = body.createChild("li");
      li.setStyle("padding-left: 13px;");
      let nameSpan = null;
      let valueStyle = "";
      if (!dart.test(child.hideName)) {
        nameSpan = (t9$ = new _debugger.JsonMLElement.new("span"), (() => {
          t9$.createTextChild(child.displayName[$isNotEmpty] ? dart.str(child.displayName) + dart.str(": ") : "");
          t9$.setStyle("background-color: thistle; color: rgb(136, 19, 145); margin-right: -13px");
          return t9$;
        })());
        valueStyle = "margin-left: 13px";
      }
      if (_debugger._typeof(child.value) === "object" || _debugger._typeof(child.value) === "function") {
        let valueSpan = (t9$0 = new _debugger.JsonMLElement.new("span"), (() => {
          t9$0.setStyle(valueStyle);
          return t9$0;
        })());
        t9$1 = valueSpan.createObjectTag(child.value);
        (() => {
          t9$1.addAttribute("config", child.config);
          return t9$1;
        })();
        if (nameSpan != null) {
          li.appendChild(nameSpan);
        }
        li.appendChild(valueSpan);
      } else {
        let line = li.createChild("span");
        if (nameSpan != null) {
          line.appendChild(nameSpan);
        }
        line.appendChild((t9$2 = new _debugger.JsonMLElement.new("span"), (() => {
          t9$2.createTextChild(_debugger.safePreview(child.value, child.config));
          t9$2.setStyle(valueStyle);
          return t9$2;
        })()));
      }
    }
    return body.toJsonML();
  }
};
(_debugger.JsonMLFormatter.new = function(_simpleFormatter) {
  if (_simpleFormatter == null) dart.nullFailed(L11, 361, 24, "_simpleFormatter");
  this[customFormattersOn] = false;
  this[_simpleFormatter$] = _simpleFormatter;
  ;
}).prototype = _debugger.JsonMLFormatter.prototype;
dart.addTypeTests(_debugger.JsonMLFormatter);
dart.addTypeCaches(_debugger.JsonMLFormatter);
dart.setMethodSignature(_debugger.JsonMLFormatter, () => ({
  __proto__: dart.getMethods(_debugger.JsonMLFormatter.__proto__),
  setMaxSpanLengthForTestingOnly: dart.fnType(dart.void, [core.int]),
  header: dart.fnType(dart.dynamic, [dart.dynamic, dart.dynamic]),
  hasBody: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
  body: dart.fnType(dart.dynamic, [dart.dynamic, dart.dynamic])
}));
dart.setLibraryUri(_debugger.JsonMLFormatter, L12);
dart.setFieldSignature(_debugger.JsonMLFormatter, () => ({
  __proto__: dart.getFields(_debugger.JsonMLFormatter.__proto__),
  [_simpleFormatter$]: dart.fieldType(_debugger.DartFormatter),
  customFormattersOn: dart.fieldType(core.bool)
}));
_debugger.Formatter = class Formatter extends core.Object {};
(_debugger.Formatter.new = function() {
  ;
}).prototype = _debugger.Formatter.prototype;
dart.addTypeTests(_debugger.Formatter);
dart.addTypeCaches(_debugger.Formatter);
dart.setLibraryUri(_debugger.Formatter, L12);
var _formatters = dart.privateName(_debugger, "_formatters");
var _printConsoleError = dart.privateName(_debugger, "_printConsoleError");
_debugger.DartFormatter = class DartFormatter extends core.Object {
  preview(object, config) {
    try {
      if (object == null || typeof object == 'number' || typeof object == 'string' || dart.test(_debugger.isNativeJavaScriptObject(object))) {
        return dart.toString(object);
      }
      for (let formatter of this[_formatters]) {
        if (dart.test(formatter.accept(object, config))) return formatter.preview(object);
      }
    } catch (e$) {
      let e = dart.getThrown(e$);
      let trace = dart.stackTrace(e$);
      if (core.Object.is(e)) {
        this[_printConsoleError](dart.str("Caught exception ") + dart.str(e) + dart.str("\n trace:\n") + dart.str(trace));
      } else
        throw e$;
    }
    return null;
  }
  hasChildren(object, config) {
    if (object == null) return false;
    try {
      for (let formatter of this[_formatters]) {
        if (dart.test(formatter.accept(object, config))) return formatter.hasChildren(object);
      }
    } catch (e$) {
      let e = dart.getThrown(e$);
      let trace = dart.stackTrace(e$);
      if (core.Object.is(e)) {
        this[_printConsoleError](dart.str("[hasChildren] Caught exception ") + dart.str(e) + dart.str("\n trace:\n") + dart.str(trace));
      } else
        throw e$;
    }
    return false;
  }
  children(object, config) {
    try {
      if (object != null) {
        for (let formatter of this[_formatters]) {
          if (dart.test(formatter.accept(object, config))) return formatter.children(object);
        }
      }
    } catch (e$) {
      let e = dart.getThrown(e$);
      let trace = dart.stackTrace(e$);
      if (core.Object.is(e)) {
        this[_printConsoleError](dart.str("Caught exception ") + dart.str(e) + dart.str("\n trace:\n") + dart.str(trace));
      } else
        throw e$;
    }
    return JSArrayOfNameValuePair().of([]);
  }
  [_printConsoleError](message) {
    if (message == null) dart.nullFailed(L11, 523, 34, "message");
    return window.console.error(message);
  }
};
(_debugger.DartFormatter.new = function() {
  this[_formatters] = JSArrayOfFormatter().of([new _debugger.ObjectInternalsFormatter.new(), new _debugger.ClassFormatter.new(), new _debugger.TypeFormatter.new(), new _debugger.NamedConstructorFormatter.new(), new _debugger.MapFormatter.new(), new _debugger.MapOverviewFormatter.new(), new _debugger.IterableFormatter.new(), new _debugger.IterableSpanFormatter.new(), new _debugger.MapEntryFormatter.new(), new _debugger.StackTraceFormatter.new(), new _debugger.ErrorAndExceptionFormatter.new(), new _debugger.FunctionFormatter.new(), new _debugger.HeritageClauseFormatter.new(), new _debugger.LibraryModuleFormatter.new(), new _debugger.LibraryFormatter.new(), new _debugger.ObjectFormatter.new()]);
  ;
}).prototype = _debugger.DartFormatter.prototype;
dart.addTypeTests(_debugger.DartFormatter);
dart.addTypeCaches(_debugger.DartFormatter);
dart.setMethodSignature(_debugger.DartFormatter, () => ({
  __proto__: dart.getMethods(_debugger.DartFormatter.__proto__),
  preview: dart.fnType(dart.nullable(core.String), [dart.dynamic, dart.dynamic]),
  hasChildren: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
  children: dart.fnType(dart.nullable(core.List$(_debugger.NameValuePair)), [dart.dynamic, dart.dynamic]),
  [_printConsoleError]: dart.fnType(dart.void, [core.String])
}));
dart.setLibraryUri(_debugger.DartFormatter, L12);
dart.setFieldSignature(_debugger.DartFormatter, () => ({
  __proto__: dart.getFields(_debugger.DartFormatter.__proto__),
  [_formatters]: dart.finalFieldType(core.List$(_debugger.Formatter))
}));
_debugger.ObjectFormatter = class ObjectFormatter extends _debugger.Formatter {
  accept(object, config) {
    return !dart.test(_debugger.isNativeJavaScriptObject(object));
  }
  preview(object) {
    let typeName = _debugger.getObjectTypeName(object);
    try {
      let toString = dart.str(object);
      if (toString.length > dart.notNull(_debugger.maxFormatterStringLength)) {
        toString = toString[$substring](0, dart.notNull(_debugger.maxFormatterStringLength) - 3) + "...";
      }
      if (toString[$contains](typeName)) {
        return toString;
      } else {
        return dart.str(toString) + dart.str(" (") + dart.str(typeName) + dart.str(")");
      }
    } catch (e$) {
      let e = dart.getThrown(e$);
      if (core.Object.is(e)) {
      } else
        throw e$;
    }
    return typeName;
  }
  hasChildren(object) {
    return true;
  }
  children(object) {
    let type = dart.getType(object);
    let ret = new (_HashSetOfNameValuePair()).new();
    let fields = new (_HashSetOfNameValuePair()).new();
    _debugger.addPropertiesFromSignature(dart.getFields(type), fields, object, true);
    let getters = new (_HashSetOfNameValuePair()).new();
    _debugger.addPropertiesFromSignature(dart.getGetters(type), getters, object, true);
    ret.addAll(_debugger.sortProperties(fields));
    ret.addAll(_debugger.sortProperties(getters));
    _debugger.addMetadataChildren(object, ret);
    return ret[$toList]();
  }
};
(_debugger.ObjectFormatter.new = function() {
  ;
}).prototype = _debugger.ObjectFormatter.prototype;
dart.addTypeTests(_debugger.ObjectFormatter);
dart.addTypeCaches(_debugger.ObjectFormatter);
dart.setMethodSignature(_debugger.ObjectFormatter, () => ({
  __proto__: dart.getMethods(_debugger.ObjectFormatter.__proto__),
  accept: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
  preview: dart.fnType(core.String, [dart.dynamic]),
  hasChildren: dart.fnType(core.bool, [dart.dynamic]),
  children: dart.fnType(dart.nullable(core.List$(_debugger.NameValuePair)), [dart.dynamic])
}));
dart.setLibraryUri(_debugger.ObjectFormatter, L12);
_debugger.ObjectInternalsFormatter = class ObjectInternalsFormatter extends _debugger.ObjectFormatter {
  accept(object, config) {
    return dart.test(super.accept(object, config)) && dart.equals(config, _debugger.JsonMLConfig.asObject);
  }
  preview(object) {
    return _debugger.getObjectTypeName(object);
  }
};
(_debugger.ObjectInternalsFormatter.new = function() {
  ;
}).prototype = _debugger.ObjectInternalsFormatter.prototype;
dart.addTypeTests(_debugger.ObjectInternalsFormatter);
dart.addTypeCaches(_debugger.ObjectInternalsFormatter);
dart.setLibraryUri(_debugger.ObjectInternalsFormatter, L12);
_debugger.LibraryModuleFormatter = class LibraryModuleFormatter extends core.Object {
  accept(object, config) {
    return dart.getModuleName(core.Object.as(object)) != null;
  }
  hasChildren(object) {
    return true;
  }
  preview(object) {
    let libraryNames = dart.nullCheck(dart.getModuleName(core.Object.as(object)))[$split]("/");
    if (dart.notNull(libraryNames[$length]) > 1 && libraryNames[$last] == libraryNames[$_get](dart.notNull(libraryNames[$length]) - 2)) {
      libraryNames[$_set](dart.notNull(libraryNames[$length]) - 1, "");
    }
    return dart.str("Library Module: ") + dart.str(libraryNames[$join]("/"));
  }
  children(object) {
    let children = new (_HashSetOfNameValuePair()).new();
    for (let name of _debugger.getOwnPropertyNames(object)) {
      let value = _debugger.safeGetProperty(core.Object.as(object), name);
      children.add(new _debugger.NameValuePair.new({name: name, value: new _debugger.Library.new(name, value), hideName: true}));
    }
    return children[$toList]();
  }
};
(_debugger.LibraryModuleFormatter.new = function() {
  ;
}).prototype = _debugger.LibraryModuleFormatter.prototype;
dart.addTypeTests(_debugger.LibraryModuleFormatter);
dart.addTypeCaches(_debugger.LibraryModuleFormatter);
_debugger.LibraryModuleFormatter[dart.implements] = () => [_debugger.Formatter];
dart.setMethodSignature(_debugger.LibraryModuleFormatter, () => ({
  __proto__: dart.getMethods(_debugger.LibraryModuleFormatter.__proto__),
  accept: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
  hasChildren: dart.fnType(core.bool, [dart.dynamic]),
  preview: dart.fnType(core.String, [dart.dynamic]),
  children: dart.fnType(core.List$(_debugger.NameValuePair), [dart.dynamic])
}));
dart.setLibraryUri(_debugger.LibraryModuleFormatter, L12);
var genericParameters = dart.privateName(_debugger, "LibraryFormatter.genericParameters");
_debugger.LibraryFormatter = class LibraryFormatter extends core.Object {
  get genericParameters() {
    return this[genericParameters];
  }
  set genericParameters(value) {
    this[genericParameters] = value;
  }
  accept(object, config) {
    return _debugger.Library.is(object);
  }
  hasChildren(object) {
    return true;
  }
  preview(object) {
    return core.String.as(dart.dload(object, 'name'));
  }
  children(object) {
    let children = new (_HashSetOfNameValuePair()).new();
    let objectProperties = _debugger.safeProperties(dart.dload(object, 'object'));
    dart.dsend(objectProperties, 'forEach', [dart.fn((name, value) => {
        if (dart.getGenericTypeCtor(value) != null) return;
        children.add(_debugger.NameValuePair.as(dart.isType(value) ? this.classChild(core.String.as(name), core.Object.as(value)) : new _debugger.NameValuePair.new({name: core.String.as(name), value: value})));
      }, dynamicAnddynamicToNullN())]);
    return children[$toList]();
  }
  classChild(name, child) {
    if (name == null) dart.nullFailed(L11, 644, 21, "name");
    if (child == null) dart.nullFailed(L11, 644, 34, "child");
    let typeName = _debugger.getTypeName(child);
    return new _debugger.NameValuePair.new({name: typeName, value: child, config: _debugger.JsonMLConfig.asClass});
  }
};
(_debugger.LibraryFormatter.new = function() {
  this[genericParameters] = new (IdentityMapOfString$String()).new();
  ;
}).prototype = _debugger.LibraryFormatter.prototype;
dart.addTypeTests(_debugger.LibraryFormatter);
dart.addTypeCaches(_debugger.LibraryFormatter);
_debugger.LibraryFormatter[dart.implements] = () => [_debugger.Formatter];
dart.setMethodSignature(_debugger.LibraryFormatter, () => ({
  __proto__: dart.getMethods(_debugger.LibraryFormatter.__proto__),
  accept: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
  hasChildren: dart.fnType(core.bool, [dart.dynamic]),
  preview: dart.fnType(core.String, [dart.dynamic]),
  children: dart.fnType(core.List$(_debugger.NameValuePair), [dart.dynamic]),
  classChild: dart.fnType(dart.dynamic, [core.String, core.Object])
}));
dart.setLibraryUri(_debugger.LibraryFormatter, L12);
dart.setFieldSignature(_debugger.LibraryFormatter, () => ({
  __proto__: dart.getFields(_debugger.LibraryFormatter.__proto__),
  genericParameters: dart.fieldType(collection.HashMap$(core.String, core.String))
}));
_debugger.FunctionFormatter = class FunctionFormatter extends core.Object {
  accept(object, config) {
    if (_debugger._typeof(object) !== "function") return false;
    return dart.getReifiedType(object) != null;
  }
  hasChildren(object) {
    return true;
  }
  preview(object) {
    try {
      return dart.typeName(dart.getReifiedType(object));
    } catch (e$) {
      let e = dart.getThrown(e$);
      if (core.Object.is(e)) {
        return _debugger.safePreview(object, _debugger.JsonMLConfig.none);
      } else
        throw e$;
    }
  }
  children(object) {
    return JSArrayOfNameValuePair().of([new _debugger.NameValuePair.new({name: "signature", value: this.preview(object)}), new _debugger.NameValuePair.new({name: "JavaScript Function", value: object, config: _debugger.JsonMLConfig.skipDart})]);
  }
};
(_debugger.FunctionFormatter.new = function() {
  ;
}).prototype = _debugger.FunctionFormatter.prototype;
dart.addTypeTests(_debugger.FunctionFormatter);
dart.addTypeCaches(_debugger.FunctionFormatter);
_debugger.FunctionFormatter[dart.implements] = () => [_debugger.Formatter];
dart.setMethodSignature(_debugger.FunctionFormatter, () => ({
  __proto__: dart.getMethods(_debugger.FunctionFormatter.__proto__),
  accept: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
  hasChildren: dart.fnType(core.bool, [dart.dynamic]),
  preview: dart.fnType(core.String, [dart.dynamic]),
  children: dart.fnType(core.List$(_debugger.NameValuePair), [dart.dynamic])
}));
dart.setLibraryUri(_debugger.FunctionFormatter, L12);
_debugger.MapOverviewFormatter = class MapOverviewFormatter extends core.Object {
  accept(object, config) {
    return core.Map.is(object);
  }
  hasChildren(object) {
    return true;
  }
  preview(object) {
    let map = core.Map.as(object);
    try {
      return dart.str(_debugger.getObjectTypeName(map));
    } catch (e$) {
      let e = dart.getThrown(e$);
      if (core.Object.is(e)) {
        return _debugger.safePreview(object, _debugger.JsonMLConfig.none);
      } else
        throw e$;
    }
  }
  children(object) {
    return JSArrayOfNameValuePair().of([new _debugger.NameValuePair.new({name: "[[instance view]]", value: object, config: _debugger.JsonMLConfig.asObject}), new _debugger.NameValuePair.new({name: "[[entries]]", value: object, config: _debugger.JsonMLConfig.asMap})]);
  }
};
(_debugger.MapOverviewFormatter.new = function() {
  ;
}).prototype = _debugger.MapOverviewFormatter.prototype;
dart.addTypeTests(_debugger.MapOverviewFormatter);
dart.addTypeCaches(_debugger.MapOverviewFormatter);
_debugger.MapOverviewFormatter[dart.implements] = () => [_debugger.Formatter];
dart.setMethodSignature(_debugger.MapOverviewFormatter, () => ({
  __proto__: dart.getMethods(_debugger.MapOverviewFormatter.__proto__),
  accept: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
  hasChildren: dart.fnType(core.bool, [dart.dynamic]),
  preview: dart.fnType(core.String, [dart.dynamic]),
  children: dart.fnType(core.List$(_debugger.NameValuePair), [dart.dynamic])
}));
dart.setLibraryUri(_debugger.MapOverviewFormatter, L12);
_debugger.MapFormatter = class MapFormatter extends core.Object {
  accept(object, config) {
    return _js_helper.InternalMap.is(object) || dart.equals(config, _debugger.JsonMLConfig.asMap);
  }
  hasChildren(object) {
    return true;
  }
  preview(object) {
    let map = core.Map.as(object);
    try {
      return dart.str(_debugger.getObjectTypeName(map)) + dart.str(" length ") + dart.str(map[$length]);
    } catch (e$) {
      let e = dart.getThrown(e$);
      if (core.Object.is(e)) {
        return _debugger.safePreview(object, _debugger.JsonMLConfig.none);
      } else
        throw e$;
    }
  }
  children(object) {
    let map = core.Map.as(object);
    let entries = new (_HashSetOfNameValuePair()).new();
    map[$forEach](dart.fn((key, value) => {
      let entryWrapper = new _debugger.MapEntry.new({key: key, value: value});
      entries.add(new _debugger.NameValuePair.new({name: dart.toString(entries[$length]), value: entryWrapper}));
    }, dynamicAnddynamicToNullN()));
    _debugger.addMetadataChildren(object, entries);
    return entries[$toList]();
  }
};
(_debugger.MapFormatter.new = function() {
  ;
}).prototype = _debugger.MapFormatter.prototype;
dart.addTypeTests(_debugger.MapFormatter);
dart.addTypeCaches(_debugger.MapFormatter);
_debugger.MapFormatter[dart.implements] = () => [_debugger.Formatter];
dart.setMethodSignature(_debugger.MapFormatter, () => ({
  __proto__: dart.getMethods(_debugger.MapFormatter.__proto__),
  accept: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
  hasChildren: dart.fnType(core.bool, [dart.dynamic]),
  preview: dart.fnType(core.String, [dart.dynamic]),
  children: dart.fnType(core.List$(_debugger.NameValuePair), [dart.dynamic])
}));
dart.setLibraryUri(_debugger.MapFormatter, L12);
_debugger.IterableFormatter = class IterableFormatter extends core.Object {
  accept(object, config) {
    return core.Iterable.is(object);
  }
  preview(object) {
    let iterable = core.Iterable.as(object);
    try {
      let length = iterable[$length];
      return dart.str(_debugger.getObjectTypeName(iterable)) + dart.str(" length ") + dart.str(length);
    } catch (e) {
      let _ = dart.getThrown(e);
      if (core.Object.is(_)) {
        return dart.str(_debugger.getObjectTypeName(iterable));
      } else
        throw e;
    }
  }
  hasChildren(object) {
    return true;
  }
  children(object) {
    let children = new (_HashSetOfNameValuePair()).new();
    children.addAll(new _debugger.IterableSpan.new(0, core.int.as(dart.dload(object, 'length')), core.Iterable.as(object)).children());
    _debugger.addMetadataChildren(object, children);
    return children[$toList]();
  }
};
(_debugger.IterableFormatter.new = function() {
  ;
}).prototype = _debugger.IterableFormatter.prototype;
dart.addTypeTests(_debugger.IterableFormatter);
dart.addTypeCaches(_debugger.IterableFormatter);
_debugger.IterableFormatter[dart.implements] = () => [_debugger.Formatter];
dart.setMethodSignature(_debugger.IterableFormatter, () => ({
  __proto__: dart.getMethods(_debugger.IterableFormatter.__proto__),
  accept: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
  preview: dart.fnType(core.String, [dart.dynamic]),
  hasChildren: dart.fnType(core.bool, [dart.dynamic]),
  children: dart.fnType(core.List$(_debugger.NameValuePair), [dart.dynamic])
}));
dart.setLibraryUri(_debugger.IterableFormatter, L12);
_debugger.NamedConstructorFormatter = class NamedConstructorFormatter extends core.Object {
  accept(object, config) {
    return _debugger.NamedConstructor.is(object);
  }
  preview(object) {
    return "Named Constructor";
  }
  hasChildren(object) {
    return true;
  }
  children(object) {
    return JSArrayOfNameValuePair().of([new _debugger.NameValuePair.new({name: "JavaScript Function", value: object, config: _debugger.JsonMLConfig.skipDart})]);
  }
};
(_debugger.NamedConstructorFormatter.new = function() {
  ;
}).prototype = _debugger.NamedConstructorFormatter.prototype;
dart.addTypeTests(_debugger.NamedConstructorFormatter);
dart.addTypeCaches(_debugger.NamedConstructorFormatter);
_debugger.NamedConstructorFormatter[dart.implements] = () => [_debugger.Formatter];
dart.setMethodSignature(_debugger.NamedConstructorFormatter, () => ({
  __proto__: dart.getMethods(_debugger.NamedConstructorFormatter.__proto__),
  accept: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
  preview: dart.fnType(core.String, [dart.dynamic]),
  hasChildren: dart.fnType(core.bool, [dart.dynamic]),
  children: dart.fnType(core.List$(_debugger.NameValuePair), [dart.dynamic])
}));
dart.setLibraryUri(_debugger.NamedConstructorFormatter, L12);
_debugger.MapEntryFormatter = class MapEntryFormatter extends core.Object {
  accept(object, config) {
    return _debugger.MapEntry.is(object);
  }
  preview(object) {
    let entry = _debugger.MapEntry.as(object);
    return dart.str(_debugger.safePreview(entry.key, _debugger.JsonMLConfig.none)) + dart.str(" => ") + dart.str(_debugger.safePreview(entry.value, _debugger.JsonMLConfig.none));
  }
  hasChildren(object) {
    return true;
  }
  children(object) {
    return JSArrayOfNameValuePair().of([new _debugger.NameValuePair.new({name: "key", value: dart.dload(object, 'key'), config: _debugger.JsonMLConfig.keyToString}), new _debugger.NameValuePair.new({name: "value", value: dart.dload(object, 'value')})]);
  }
};
(_debugger.MapEntryFormatter.new = function() {
  ;
}).prototype = _debugger.MapEntryFormatter.prototype;
dart.addTypeTests(_debugger.MapEntryFormatter);
dart.addTypeCaches(_debugger.MapEntryFormatter);
_debugger.MapEntryFormatter[dart.implements] = () => [_debugger.Formatter];
dart.setMethodSignature(_debugger.MapEntryFormatter, () => ({
  __proto__: dart.getMethods(_debugger.MapEntryFormatter.__proto__),
  accept: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
  preview: dart.fnType(core.String, [dart.dynamic]),
  hasChildren: dart.fnType(core.bool, [dart.dynamic]),
  children: dart.fnType(core.List$(_debugger.NameValuePair), [dart.dynamic])
}));
dart.setLibraryUri(_debugger.MapEntryFormatter, L12);
var C7;
_debugger.HeritageClauseFormatter = class HeritageClauseFormatter extends core.Object {
  accept(object, config) {
    return _debugger.HeritageClause.is(object);
  }
  preview(object) {
    let clause = _debugger.HeritageClause.as(object);
    let typeNames = clause.types[$map](core.String, C7 || CT.C7);
    return dart.str(clause.name) + dart.str(" ") + dart.str(typeNames[$join](", "));
  }
  hasChildren(object) {
    return true;
  }
  children(object) {
    let clause = _debugger.HeritageClause.as(object);
    let children = JSArrayOfNameValuePair().of([]);
    for (let type of clause.types) {
      children[$add](new _debugger.NameValuePair.new({value: type, config: _debugger.JsonMLConfig.asClass}));
    }
    return children;
  }
};
(_debugger.HeritageClauseFormatter.new = function() {
  ;
}).prototype = _debugger.HeritageClauseFormatter.prototype;
dart.addTypeTests(_debugger.HeritageClauseFormatter);
dart.addTypeCaches(_debugger.HeritageClauseFormatter);
_debugger.HeritageClauseFormatter[dart.implements] = () => [_debugger.Formatter];
dart.setMethodSignature(_debugger.HeritageClauseFormatter, () => ({
  __proto__: dart.getMethods(_debugger.HeritageClauseFormatter.__proto__),
  accept: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
  preview: dart.fnType(core.String, [dart.dynamic]),
  hasChildren: dart.fnType(core.bool, [dart.dynamic]),
  children: dart.fnType(core.List$(_debugger.NameValuePair), [dart.dynamic])
}));
dart.setLibraryUri(_debugger.HeritageClauseFormatter, L12);
_debugger.IterableSpanFormatter = class IterableSpanFormatter extends core.Object {
  accept(object, config) {
    return _debugger.IterableSpan.is(object);
  }
  preview(object) {
    return dart.str("[") + dart.str(dart.dload(object, 'start')) + dart.str("...") + dart.str(dart.dsend(dart.dload(object, 'end'), '-', [1])) + dart.str("]");
  }
  hasChildren(object) {
    return true;
  }
  children(object) {
    return ListOfNameValuePair().as(dart.dsend(object, 'children', []));
  }
};
(_debugger.IterableSpanFormatter.new = function() {
  ;
}).prototype = _debugger.IterableSpanFormatter.prototype;
dart.addTypeTests(_debugger.IterableSpanFormatter);
dart.addTypeCaches(_debugger.IterableSpanFormatter);
_debugger.IterableSpanFormatter[dart.implements] = () => [_debugger.Formatter];
dart.setMethodSignature(_debugger.IterableSpanFormatter, () => ({
  __proto__: dart.getMethods(_debugger.IterableSpanFormatter.__proto__),
  accept: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
  preview: dart.fnType(core.String, [dart.dynamic]),
  hasChildren: dart.fnType(core.bool, [dart.dynamic]),
  children: dart.fnType(core.List$(_debugger.NameValuePair), [dart.dynamic])
}));
dart.setLibraryUri(_debugger.IterableSpanFormatter, L12);
_debugger.ErrorAndExceptionFormatter = class ErrorAndExceptionFormatter extends _debugger.ObjectFormatter {
  accept(object, config) {
    return core.Error.is(object) || core.Exception.is(object);
  }
  hasChildren(object) {
    return true;
  }
  preview(object) {
    let trace = dart.stackTrace(object);
    let line = dart.str(trace)[$split]("\n")[$firstWhere](dart.fn(l => {
      if (l == null) dart.nullFailed(L11, 862, 10, "l");
      return l[$contains](_debugger.ErrorAndExceptionFormatter._pattern) && !l[$contains]("dart:sdk") && !l[$contains]("dart_sdk");
    }, StringTobool()), {orElse: dart.fn(() => "", VoidToString())});
    return line !== "" ? dart.str(object) + dart.str(" at ") + dart.str(line) : dart.str(object);
  }
  children(object) {
    let trace = dart.stackTrace(object);
    let entries = new (_HashSetOfNameValuePair()).new();
    entries.add(new _debugger.NameValuePair.new({name: "stackTrace", value: trace}));
    this.addInstanceMembers(object, entries);
    _debugger.addMetadataChildren(object, entries);
    return entries[$toList]();
  }
  addInstanceMembers(object, ret) {
    if (ret == null) dart.nullFailed(L11, 880, 54, "ret");
    ret.add(new _debugger.NameValuePair.new({name: "[[instance members]]", value: object, config: _debugger.JsonMLConfig.asObject}));
  }
};
(_debugger.ErrorAndExceptionFormatter.new = function() {
  ;
}).prototype = _debugger.ErrorAndExceptionFormatter.prototype;
dart.addTypeTests(_debugger.ErrorAndExceptionFormatter);
dart.addTypeCaches(_debugger.ErrorAndExceptionFormatter);
dart.setMethodSignature(_debugger.ErrorAndExceptionFormatter, () => ({
  __proto__: dart.getMethods(_debugger.ErrorAndExceptionFormatter.__proto__),
  children: dart.fnType(core.List$(_debugger.NameValuePair), [dart.dynamic]),
  addInstanceMembers: dart.fnType(dart.void, [dart.dynamic, core.Set$(_debugger.NameValuePair)])
}));
dart.setLibraryUri(_debugger.ErrorAndExceptionFormatter, L12);
dart.defineLazy(_debugger.ErrorAndExceptionFormatter, {
  /*_debugger.ErrorAndExceptionFormatter._pattern*/get _pattern() {
    return core.RegExp.new("\\d+\\:\\d+");
  }
}, false);
_debugger.StackTraceFormatter = class StackTraceFormatter extends core.Object {
  accept(object, config) {
    return core.StackTrace.is(object);
  }
  preview(object) {
    return "StackTrace";
  }
  hasChildren(object) {
    return true;
  }
  children(object) {
    return dart.toString(object)[$split]("\n")[$map](_debugger.NameValuePair, dart.fn(line => {
      if (line == null) dart.nullFailed(L11, 901, 13, "line");
      return new _debugger.NameValuePair.new({value: line[$replaceFirst](core.RegExp.new("^\\s+at\\s"), ""), hideName: true});
    }, StringToNameValuePair()))[$toList]();
  }
};
(_debugger.StackTraceFormatter.new = function() {
  ;
}).prototype = _debugger.StackTraceFormatter.prototype;
dart.addTypeTests(_debugger.StackTraceFormatter);
dart.addTypeCaches(_debugger.StackTraceFormatter);
_debugger.StackTraceFormatter[dart.implements] = () => [_debugger.Formatter];
dart.setMethodSignature(_debugger.StackTraceFormatter, () => ({
  __proto__: dart.getMethods(_debugger.StackTraceFormatter.__proto__),
  accept: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
  preview: dart.fnType(core.String, [dart.dynamic]),
  hasChildren: dart.fnType(core.bool, [dart.dynamic]),
  children: dart.fnType(core.List$(_debugger.NameValuePair), [dart.dynamic])
}));
dart.setLibraryUri(_debugger.StackTraceFormatter, L12);
_debugger.ClassFormatter = class ClassFormatter extends core.Object {
  accept(object, config) {
    return dart.equals(config, _debugger.JsonMLConfig.asClass);
  }
  preview(type) {
    let $implements = dart.getImplements(type)();
    let typeName = _debugger.getTypeName(type);
    if ($implements != null) {
      let typeNames = $implements[$map](core.String, C7 || CT.C7);
      return dart.str(typeName) + dart.str(" implements ") + dart.str(typeNames[$join](", "));
    } else {
      return typeName;
    }
  }
  hasChildren(object) {
    return true;
  }
  children(type) {
    let t17, t17$;
    let ret = new (_HashSetOfNameValuePair()).new();
    let staticProperties = new (_HashSetOfNameValuePair()).new();
    let staticMethods = new (_HashSetOfNameValuePair()).new();
    _debugger.addPropertiesFromSignature(dart.getStaticFields(type), staticProperties, type, false);
    _debugger.addPropertiesFromSignature(dart.getStaticGetters(type), staticProperties, type, false);
    _debugger.addPropertiesFromSignature(dart.getStaticMethods(type), staticMethods, type, false);
    if (dart.test(staticProperties[$isNotEmpty]) || dart.test(staticMethods[$isNotEmpty])) {
      t17 = ret;
      (() => {
        t17.add(new _debugger.NameValuePair.new({value: "[[Static members]]", hideName: true}));
        t17.addAll(_debugger.sortProperties(staticProperties));
        t17.addAll(_debugger.sortProperties(staticMethods));
        return t17;
      })();
    }
    let instanceMethods = new (_HashSetOfNameValuePair()).new();
    _debugger.addPropertiesFromSignature(dart.getMethods(type), instanceMethods, type.prototype, false, {tagTypes: true});
    if (dart.test(instanceMethods[$isNotEmpty])) {
      t17$ = ret;
      (() => {
        t17$.add(new _debugger.NameValuePair.new({value: "[[Instance Methods]]", hideName: true}));
        t17$.addAll(_debugger.sortProperties(instanceMethods));
        return t17$;
      })();
    }
    let mixin = dart.getMixin(type);
    if (mixin != null) {
      ret.add(new _debugger.NameValuePair.new({name: "[[Mixins]]", value: new _debugger.HeritageClause.new("mixins", [mixin])}));
    }
    let baseProto = type.__proto__;
    if (baseProto != null && !dart.test(dart.isJsInterop(baseProto))) {
      ret.add(new _debugger.NameValuePair.new({name: "[[base class]]", value: baseProto, config: _debugger.JsonMLConfig.asClass}));
    }
    return ret[$toList]();
  }
};
(_debugger.ClassFormatter.new = function() {
  ;
}).prototype = _debugger.ClassFormatter.prototype;
dart.addTypeTests(_debugger.ClassFormatter);
dart.addTypeCaches(_debugger.ClassFormatter);
_debugger.ClassFormatter[dart.implements] = () => [_debugger.Formatter];
dart.setMethodSignature(_debugger.ClassFormatter, () => ({
  __proto__: dart.getMethods(_debugger.ClassFormatter.__proto__),
  accept: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
  preview: dart.fnType(core.String, [dart.dynamic]),
  hasChildren: dart.fnType(core.bool, [dart.dynamic]),
  children: dart.fnType(core.List$(_debugger.NameValuePair), [dart.dynamic])
}));
dart.setLibraryUri(_debugger.ClassFormatter, L12);
_debugger.TypeFormatter = class TypeFormatter extends core.Object {
  accept(object, config) {
    return core.Type.is(object);
  }
  preview(object) {
    return dart.toString(object);
  }
  hasChildren(object) {
    return false;
  }
  children(object) {
    return JSArrayOfNameValuePair().of([]);
  }
};
(_debugger.TypeFormatter.new = function() {
  ;
}).prototype = _debugger.TypeFormatter.prototype;
dart.addTypeTests(_debugger.TypeFormatter);
dart.addTypeCaches(_debugger.TypeFormatter);
_debugger.TypeFormatter[dart.implements] = () => [_debugger.Formatter];
dart.setMethodSignature(_debugger.TypeFormatter, () => ({
  __proto__: dart.getMethods(_debugger.TypeFormatter.__proto__),
  accept: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
  preview: dart.fnType(core.String, [dart.dynamic]),
  hasChildren: dart.fnType(core.bool, [dart.dynamic]),
  children: dart.fnType(core.List$(_debugger.NameValuePair), [dart.dynamic])
}));
dart.setLibraryUri(_debugger.TypeFormatter, L12);
_debugger._MethodStats = class _MethodStats extends core.Object {};
(_debugger._MethodStats.new = function(typeName, frame) {
  if (typeName == null) dart.nullFailed(L13, 13, 21, "typeName");
  if (frame == null) dart.nullFailed(L13, 13, 36, "frame");
  this.count = 0.0;
  this.typeName = typeName;
  this.frame = frame;
  ;
}).prototype = _debugger._MethodStats.prototype;
dart.addTypeTests(_debugger._MethodStats);
dart.addTypeCaches(_debugger._MethodStats);
dart.setLibraryUri(_debugger._MethodStats, L12);
dart.setFieldSignature(_debugger._MethodStats, () => ({
  __proto__: dart.getFields(_debugger._MethodStats.__proto__),
  typeName: dart.finalFieldType(core.String),
  frame: dart.finalFieldType(core.String),
  count: dart.fieldType(core.double)
}));
_debugger._CallMethodRecord = class _CallMethodRecord extends core.Object {};
(_debugger._CallMethodRecord.new = function(jsError, type) {
  this.jsError = jsError;
  this.type = type;
  ;
}).prototype = _debugger._CallMethodRecord.prototype;
dart.addTypeTests(_debugger._CallMethodRecord);
dart.addTypeCaches(_debugger._CallMethodRecord);
dart.setLibraryUri(_debugger._CallMethodRecord, L12);
dart.setFieldSignature(_debugger._CallMethodRecord, () => ({
  __proto__: dart.getFields(_debugger._CallMethodRecord.__proto__),
  jsError: dart.fieldType(dart.dynamic),
  type: dart.fieldType(dart.dynamic)
}));
_debugger._typeof = function _typeof(object) {
  return typeof object;
};
_debugger.getOwnPropertyNames = function getOwnPropertyNames(object) {
  return JSArrayOfString().of(dart.getOwnPropertyNames(core.Object.as(object)));
};
_debugger.getOwnPropertySymbols = function getOwnPropertySymbols(object) {
  return Object.getOwnPropertySymbols(object);
};
_debugger.addMetadataChildren = function addMetadataChildren(object, ret) {
  if (ret == null) dart.nullFailed(L11, 63, 53, "ret");
  ret.add(new _debugger.NameValuePair.new({name: "[[class]]", value: dart.getReifiedType(object), config: _debugger.JsonMLConfig.asClass}));
};
_debugger.addPropertiesFromSignature = function addPropertiesFromSignature(sig, properties, object, walkPrototypeChain, opts) {
  let t17;
  if (properties == null) dart.nullFailed(L11, 75, 29, "properties");
  if (walkPrototypeChain == null) dart.nullFailed(L11, 75, 54, "walkPrototypeChain");
  let tagTypes = opts && 'tagTypes' in opts ? opts.tagTypes : false;
  let skippedNames = (t17 = new collection._HashSet.new(), (() => {
    t17.add("hashCode");
    return t17;
  })());
  let objectPrototype = Object.prototype;
  while (sig != null && !core.identical(sig, objectPrototype)) {
    for (let symbol of _debugger.getOwnPropertySymbols(sig)) {
      let dartName = _debugger.symbolName(symbol);
      let dartXPrefix = "dartx.";
      if (dartName[$startsWith](dartXPrefix)) {
        dartName = dartName[$substring](dartXPrefix.length);
      }
      if (dart.test(skippedNames.contains(dartName))) continue;
      let value = _debugger.safeGetProperty(core.Object.as(object), core.Object.as(symbol));
      if (dart.dtest(tagTypes) && _debugger._typeof(value) === "function") {
        dart.fn(value, sig[symbol]);
      }
      properties.add(new _debugger.NameValuePair.new({name: dartName, value: value}));
    }
    for (let name of _debugger.getOwnPropertyNames(sig)) {
      let value = _debugger.safeGetProperty(core.Object.as(object), name);
      if (dart.test(skippedNames.contains(name))) continue;
      if (dart.dtest(tagTypes) && _debugger._typeof(value) === "function") {
        dart.fn(value, sig[name]);
      }
      properties.add(new _debugger.NameValuePair.new({name: name, value: value}));
    }
    if (!dart.test(walkPrototypeChain)) break;
    sig = dart.getPrototypeOf(core.Object.as(sig));
  }
};
_debugger.sortProperties = function sortProperties(properties) {
  if (properties == null) dart.nullFailed(L11, 115, 60, "properties");
  let sortedProperties = properties[$toList]();
  sortedProperties[$sort](dart.fn((a, b) => {
    if (a == null) dart.nullFailed(L11, 118, 26, "a");
    if (b == null) dart.nullFailed(L11, 118, 29, "b");
    let aPrivate = a.name[$startsWith]("_");
    let bPrivate = b.name[$startsWith]("_");
    if (!aPrivate[$_equals](bPrivate)) return aPrivate ? 1 : -1;
    return a.name[$compareTo](b.name);
  }, NameValuePairAndNameValuePairToint()));
  return sortedProperties;
};
_debugger.getObjectTypeName = function getObjectTypeName(object) {
  let reifiedType = dart.getReifiedType(object);
  if (reifiedType == null) {
    if (_debugger._typeof(object) === "function") {
      return "[[Raw JavaScript Function]]";
    }
    return "<Error getting type name>";
  }
  return _debugger.getTypeName(reifiedType);
};
_debugger.getTypeName = function getTypeName(type) {
  return dart.typeName(type);
};
_debugger.safePreview = function safePreview(object, config) {
  try {
    let preview = _debugger._devtoolsFormatter[_simpleFormatter$].preview(object, config);
    if (preview != null) return preview;
    return dart.toString(object);
  } catch (e$) {
    let e = dart.getThrown(e$);
    if (core.Object.is(e)) {
      return dart.str("<Exception thrown> ") + dart.str(e);
    } else
      throw e$;
  }
};
_debugger.symbolName = function symbolName(symbol) {
  let name = dart.toString(symbol);
  if (!name[$startsWith]("Symbol(")) dart.assertFailed(null, L11, 157, 10, "name.startsWith('Symbol(')");
  return name[$substring]("Symbol(".length, name.length - 1);
};
_debugger.hasMethod = function hasMethod$(object, name) {
  if (name == null) dart.nullFailed(L11, 161, 31, "name");
  try {
    return dart.hasMethod(object, name);
  } catch (e$) {
    let e = dart.getThrown(e$);
    if (core.Object.is(e)) {
      return false;
    } else
      throw e$;
  }
};
_debugger.safeGetProperty = function safeGetProperty(protoChain, name) {
  if (protoChain == null) dart.nullFailed(L11, 267, 31, "protoChain");
  if (name == null) dart.nullFailed(L11, 267, 50, "name");
  try {
    return core.Object.as(_debugger.JSNative.getProperty(protoChain, name));
  } catch (e$) {
    let e = dart.getThrown(e$);
    if (core.Object.is(e)) {
      return dart.str("<Exception thrown> ") + dart.str(e);
    } else
      throw e$;
  }
};
_debugger.safeProperties = function safeProperties(object) {
  return LinkedHashMapOfdynamic$Object().fromIterable(_debugger.getOwnPropertyNames(object)[$where](dart.fn(each => {
    if (each == null) dart.nullFailed(L11, 277, 17, "each");
    return _debugger.safeGetProperty(core.Object.as(object), each) != null;
  }, StringTobool())), {key: dart.fn(name => name, dynamicTodynamic()), value: dart.fn(name => _debugger.safeGetProperty(core.Object.as(object), core.Object.as(name)), dynamicToObject())});
};
_debugger.isNativeJavaScriptObject = function isNativeJavaScriptObject(object) {
  let type = _debugger._typeof(object);
  if (type !== "object" && type !== "function") return true;
  if (dart.test(dart.isJsInterop(object)) && dart.getModuleName(core.Object.as(object)) == null) {
    return true;
  }
  return object instanceof Node;
};
_debugger.registerDevtoolsFormatter = function registerDevtoolsFormatter() {
  dart.global.devtoolsFormatters = [_debugger._devtoolsFormatter];
};
_debugger.getModuleNames = function getModuleNames$() {
  return dart.getModuleNames();
};
_debugger.getModuleLibraries = function getModuleLibraries$(name) {
  if (name == null) dart.nullFailed(L11, 1015, 27, "name");
  return dart.getModuleLibraries(name);
};
_debugger.getDynamicStats = function getDynamicStats() {
  let t20;
  let callMethodStats = new (IdentityMapOfString$_MethodStats()).new();
  if (dart.notNull(_debugger._callMethodRecords[$length]) > 0) {
    let recordRatio = dart.notNull(_debugger._totalCallRecords) / dart.notNull(_debugger._callMethodRecords[$length]);
    for (let record of _debugger._callMethodRecords) {
      let stackStr = record.jsError.stack;
      let frames = stackStr[$split]("\n");
      let src = frames[$skip](2)[$map](core.String, dart.fn(f => {
        if (f == null) dart.nullFailed(L13, 66, 17, "f");
        return _debugger._frameMappingCache[$putIfAbsent](f, dart.fn(() => dart.nullCheck(_debugger.stackTraceMapper)(dart.str("\n") + dart.str(f)), VoidToString()));
      }, StringToString()))[$firstWhere](dart.fn(f => {
        if (f == null) dart.nullFailed(L13, 68, 24, "f");
        return !f[$startsWith]("dart:");
      }, StringTobool()), {orElse: dart.fn(() => "", VoidToString())});
      let actualTypeName = dart.typeName(record.type);
      t20 = callMethodStats[$putIfAbsent](dart.str(actualTypeName) + dart.str(" <") + dart.str(src) + dart.str(">"), dart.fn(() => new _debugger._MethodStats.new(actualTypeName, src), VoidTo_MethodStats()));
      t20.count = dart.notNull(t20.count) + recordRatio;
    }
    if (_debugger._totalCallRecords != _debugger._callMethodRecords[$length]) {
      for (let k of callMethodStats[$keys][$toList]()) {
        let stats = dart.nullCheck(callMethodStats[$_get](k));
        let threshold = dart.notNull(_debugger._minCount) * recordRatio;
        if (dart.notNull(stats.count) + 0.001 < threshold) {
          callMethodStats[$remove](k);
        }
      }
    }
  }
  _debugger._callMethodRecords[$clear]();
  _debugger._totalCallRecords = 0;
  let keys = callMethodStats[$keys][$toList]();
  keys[$sort](dart.fn((a, b) => {
    if (a == null) dart.nullFailed(L13, 94, 8, "a");
    if (b == null) dart.nullFailed(L13, 94, 11, "b");
    return dart.nullCheck(callMethodStats[$_get](b)).count[$compareTo](dart.nullCheck(callMethodStats[$_get](a)).count);
  }, StringAndStringToint()));
  let ret = JSArrayOfListOfObject().of([]);
  for (let key of keys) {
    let stats = dart.nullCheck(callMethodStats[$_get](key));
    ret[$add](JSArrayOfObject().of([stats.typeName, stats.frame, stats.count[$round]()]));
  }
  return ret;
};
_debugger.clearDynamicStats = function clearDynamicStats() {
  _debugger._callMethodRecords[$clear]();
};
_debugger.trackCall = function trackCall(obj) {
  if (!_debugger._trackProfile) return;
  let index = -1;
  _debugger._totalCallRecords = dart.notNull(_debugger._totalCallRecords) + 1;
  if (_debugger._callMethodRecords[$length] == _debugger._callRecordSampleSize) {
    index = Math.floor(Math.random() * _debugger._totalCallRecords);
    if (index >= dart.notNull(_debugger._callMethodRecords[$length])) return;
  }
  let record = new _debugger._CallMethodRecord.new(new Error(), dart.getReifiedType(obj));
  if (index === -1) {
    _debugger._callMethodRecords[$add](record);
  } else {
    _debugger._callMethodRecords[$_set](index, record);
  }
};
dart.copyProperties(_debugger, {
  get stackTraceMapper() {
    let _util = dart.global.$dartStackTraceUtility;
    return _util != null ? _util.mapper : null;
  },
  get _trackProfile() {
    return dart.__trackProfile;
  }
});
dart.defineLazy(_debugger, {
  /*_debugger._maxSpanLength*/get _maxSpanLength() {
    return 100;
  },
  set _maxSpanLength(_) {},
  /*_debugger._devtoolsFormatter*/get _devtoolsFormatter() {
    return new _debugger.JsonMLFormatter.new(new _debugger.DartFormatter.new());
  },
  set _devtoolsFormatter(_) {},
  /*_debugger.maxFormatterStringLength*/get maxFormatterStringLength() {
    return 100;
  },
  set maxFormatterStringLength(_) {},
  /*_debugger._callRecordSampleSize*/get _callRecordSampleSize() {
    return 5000;
  },
  set _callRecordSampleSize(_) {},
  /*_debugger._callMethodRecords*/get _callMethodRecords() {
    return JSArrayOf_CallMethodRecord().of([]);
  },
  set _callMethodRecords(_) {},
  /*_debugger._totalCallRecords*/get _totalCallRecords() {
    return 0;
  },
  set _totalCallRecords(_) {},
  /*_debugger._minCount*/get _minCount() {
    return 2;
  },
  set _minCount(_) {},
  /*_debugger._frameMappingCache*/get _frameMappingCache() {
    return new (IdentityMapOfString$String()).new();
  },
  set _frameMappingCache(_) {}
}, false);




//_foreign_helper --------------
var name$4 = dart.privateName(_foreign_helper, "JSExportName.name");
_foreign_helper.JSExportName = class JSExportName extends core.Object {
  get name() {
    return this[name$4];
  }
  set name(value) {
    super.name = value;
  }
};
(_foreign_helper.JSExportName.new = function(name) {
  if (name == null) dart.nullFailed(L14, 139, 27, "name");
  this[name$4] = name;
  ;
}).prototype = _foreign_helper.JSExportName.prototype;
dart.addTypeTests(_foreign_helper.JSExportName);
dart.addTypeCaches(_foreign_helper.JSExportName);
dart.setLibraryUri(_foreign_helper.JSExportName, L15);
dart.setFieldSignature(_foreign_helper.JSExportName, () => ({
  __proto__: dart.getFields(_foreign_helper.JSExportName.__proto__),
  name: dart.finalFieldType(core.String)
}));
var code$ = dart.privateName(_foreign_helper, "JS_CONST.code");
_foreign_helper.JS_CONST = class JS_CONST extends core.Object {
  get code() {
    return this[code$];
  }
  set code(value) {
    super.code = value;
  }
};
(_foreign_helper.JS_CONST.new = function(code) {
  if (code == null) dart.nullFailed(L14, 259, 23, "code");
  this[code$] = code;
  ;
}).prototype = _foreign_helper.JS_CONST.prototype;
dart.addTypeTests(_foreign_helper.JS_CONST);
dart.addTypeCaches(_foreign_helper.JS_CONST);
dart.setLibraryUri(_foreign_helper.JS_CONST, L15);
dart.setFieldSignature(_foreign_helper.JS_CONST, () => ({
  __proto__: dart.getFields(_foreign_helper.JS_CONST.__proto__),
  code: dart.finalFieldType(core.String)
}));
_foreign_helper._Rest = class _Rest extends core.Object {};
(_foreign_helper._Rest.new = function() {
  ;
}).prototype = _foreign_helper._Rest.prototype;
dart.addTypeTests(_foreign_helper._Rest);
dart.addTypeCaches(_foreign_helper._Rest);
dart.setLibraryUri(_foreign_helper._Rest, L15);
_foreign_helper.JS_DART_OBJECT_CONSTRUCTOR = function JS_DART_OBJECT_CONSTRUCTOR() {
};
_foreign_helper.JS_INTERCEPTOR_CONSTANT = function JS_INTERCEPTOR_CONSTANT(type) {
  if (type == null) dart.nullFailed(L14, 157, 30, "type");
};
_foreign_helper.JS_EFFECT = function JS_EFFECT(code) {
  if (code == null) dart.nullFailed(L14, 244, 25, "code");
  dart.dsend(code, 'call', [null]);
};
_foreign_helper.JS_STRING_CONCAT = function JS_STRING_CONCAT(a, b) {
  if (a == null) dart.nullFailed(L14, 266, 32, "a");
  if (b == null) dart.nullFailed(L14, 266, 42, "b");
  return a + b;
};
_foreign_helper.spread = function spread(args) {
  dart.throw(new core.StateError.new(dart.str("The spread function cannot be called, ") + dart.str("it should be compiled away.")));
};
var C8;
dart.defineLazy(_foreign_helper, {
  /*_foreign_helper.rest*/get rest() {
    return C8 || CT.C8;
  }
}, false);
_interceptors.Interceptor = class Interceptor extends core.Object {
  toString() {
    return this.toString();
  }
};
(_interceptors.Interceptor.new = function() {
  ;
}).prototype = _interceptors.Interceptor.prototype;
dart.addTypeTests(_interceptors.Interceptor);
dart.addTypeCaches(_interceptors.Interceptor);
dart.setLibraryUri(_interceptors.Interceptor, L16);
dart.defineExtensionMethods(_interceptors.Interceptor, ['toString']);
_interceptors.JSBool = class JSBool extends _interceptors.Interceptor {
  [$toString]() {
    return String(this);
  }
  get [$hashCode]() {
    return this ? 2 * 3 * 23 * 3761 : 269 * 811;
  }
  [$bitAnd](other) {
    if (other == null) dart.argumentError(other);
    return other && this;
  }
  [$bitOr](other) {
    if (other == null) dart.argumentError(other);
    return other || this;
  }
  [$bitXor](other) {
    if (other == null) dart.argumentError(other);
    return this !== other;
  }
  get [$runtimeType]() {
    return dart.wrapType(core.bool);
  }
};
(_interceptors.JSBool.new = function() {
  _interceptors.JSBool.__proto__.new.call(this);
  ;
}).prototype = _interceptors.JSBool.prototype;
dart.addTypeTests(_interceptors.JSBool);
dart.addTypeCaches(_interceptors.JSBool);
_interceptors.JSBool[dart.implements] = () => [core.bool];
dart.setMethodSignature(_interceptors.JSBool, () => ({
  __proto__: dart.getMethods(_interceptors.JSBool.__proto__),
  [$bitAnd]: dart.fnType(core.bool, [core.bool]),
  [$bitOr]: dart.fnType(core.bool, [core.bool]),
  [$bitXor]: dart.fnType(core.bool, [core.bool])
}));
dart.setLibraryUri(_interceptors.JSBool, L16);
dart.definePrimitiveHashCode(_interceptors.JSBool.prototype);
dart.registerExtension("Boolean", _interceptors.JSBool);
const _is_JSIndexable_default = Symbol('_is_JSIndexable_default');
_interceptors.JSIndexable$ = dart.generic(E => {
  class JSIndexable extends core.Object {}
  (JSIndexable.new = function() {
    ;
  }).prototype = JSIndexable.prototype;
  dart.addTypeTests(JSIndexable);
  JSIndexable.prototype[_is_JSIndexable_default] = true;
  dart.addTypeCaches(JSIndexable);
  dart.setLibraryUri(JSIndexable, L16);
  return JSIndexable;
});
_interceptors.JSIndexable = _interceptors.JSIndexable$();
dart.addTypeTests(_interceptors.JSIndexable, _is_JSIndexable_default);
_interceptors.JSObject = class JSObject extends core.Object {};
(_interceptors.JSObject.new = function() {
  ;
}).prototype = _interceptors.JSObject.prototype;
dart.addTypeTests(_interceptors.JSObject);
dart.addTypeCaches(_interceptors.JSObject);
dart.setLibraryUri(_interceptors.JSObject, L16);
_interceptors.JavaScriptObject = class JavaScriptObject extends _interceptors.Interceptor {
  get hashCode() {
    return 0;
  }
  get runtimeType() {
    return dart.wrapType(_interceptors.JSObject);
  }
};
(_interceptors.JavaScriptObject.new = function() {
  _interceptors.JavaScriptObject.__proto__.new.call(this);
  ;
}).prototype = _interceptors.JavaScriptObject.prototype;
dart.addTypeTests(_interceptors.JavaScriptObject);
dart.addTypeCaches(_interceptors.JavaScriptObject);
_interceptors.JavaScriptObject[dart.implements] = () => [_interceptors.JSObject];
dart.setLibraryUri(_interceptors.JavaScriptObject, L16);
dart.defineExtensionAccessors(_interceptors.JavaScriptObject, ['hashCode', 'runtimeType']);
_interceptors.PlainJavaScriptObject = class PlainJavaScriptObject extends _interceptors.JavaScriptObject {};
(_interceptors.PlainJavaScriptObject.new = function() {
  _interceptors.PlainJavaScriptObject.__proto__.new.call(this);
  ;
}).prototype = _interceptors.PlainJavaScriptObject.prototype;
dart.addTypeTests(_interceptors.PlainJavaScriptObject);
dart.addTypeCaches(_interceptors.PlainJavaScriptObject);
dart.setLibraryUri(_interceptors.PlainJavaScriptObject, L16);
_interceptors.UnknownJavaScriptObject = class UnknownJavaScriptObject extends _interceptors.JavaScriptObject {
  toString() {
    return String(this);
  }
};
(_interceptors.UnknownJavaScriptObject.new = function() {
  _interceptors.UnknownJavaScriptObject.__proto__.new.call(this);
  ;
}).prototype = _interceptors.UnknownJavaScriptObject.prototype;
dart.addTypeTests(_interceptors.UnknownJavaScriptObject);
dart.addTypeCaches(_interceptors.UnknownJavaScriptObject);
dart.setLibraryUri(_interceptors.UnknownJavaScriptObject, L16);
dart.defineExtensionMethods(_interceptors.UnknownJavaScriptObject, ['toString']);
_interceptors.NativeError = class NativeError extends _interceptors.Interceptor {
  dartStack() {
    return this.stack;
  }
};
(_interceptors.NativeError.new = function() {
  _interceptors.NativeError.__proto__.new.call(this);
  ;
}).prototype = _interceptors.NativeError.prototype;
dart.addTypeTests(_interceptors.NativeError);
dart.addTypeCaches(_interceptors.NativeError);
dart.setMethodSignature(_interceptors.NativeError, () => ({
  __proto__: dart.getMethods(_interceptors.NativeError.__proto__),
  dartStack: dart.fnType(core.String, []),
  [$dartStack]: dart.fnType(core.String, [])
}));
dart.setLibraryUri(_interceptors.NativeError, L16);
dart.defineExtensionMethods(_interceptors.NativeError, ['dartStack']);
var _fieldName = dart.privateName(_interceptors, "_fieldName");
var _functionCallTarget = dart.privateName(_interceptors, "_functionCallTarget");
var _receiver = dart.privateName(_interceptors, "_receiver");
var C9;
var _receiver$ = dart.privateName(core, "_receiver");
var _arguments = dart.privateName(_interceptors, "_arguments");
var C10;
var _arguments$ = dart.privateName(core, "_arguments");
var _memberName = dart.privateName(_interceptors, "_memberName");
var C11;
var _memberName$ = dart.privateName(core, "_memberName");
var _invocation = dart.privateName(_interceptors, "_invocation");
var C12;
var _invocation$ = dart.privateName(core, "_invocation");
var _namedArguments = dart.privateName(_interceptors, "_namedArguments");
var C13;
var _namedArguments$ = dart.privateName(core, "_namedArguments");
_interceptors.JSNoSuchMethodError = class JSNoSuchMethodError extends _interceptors.NativeError {
  [_fieldName](message) {
    let t20;
    if (message == null) dart.nullFailed(L17, 123, 29, "message");
    let match = _interceptors.JSNoSuchMethodError._nullError.firstMatch(message);
    if (match == null) return null;
    let name = dart.nullCheck(match._get(1));
    match = (t20 = _interceptors.JSNoSuchMethodError._extensionName.firstMatch(name), t20 == null ? _interceptors.JSNoSuchMethodError._privateName.firstMatch(name) : t20);
    return match != null ? match._get(1) : name;
  }
  [_functionCallTarget](message) {
    if (message == null) dart.nullFailed(L17, 131, 38, "message");
    let match = _interceptors.JSNoSuchMethodError._notAFunction.firstMatch(message);
    return match != null ? match._get(1) : null;
  }
  [$dartStack]() {
    let stack = super[$dartStack]();
    stack = dart.notNull(this[$toString]()) + "\n" + dart.notNull(stack[$split]("\n")[$sublist](1)[$join]("\n"));
    return stack;
  }
  get [$stackTrace]() {
    return dart.stackTrace(this);
  }
  [$toString]() {
    let message = this.message;
    let callTarget = this[_functionCallTarget](message);
    if (callTarget != null) {
      return dart.str("NoSuchMethodError: tried to call a non-function, such as null: ") + dart.str("'") + dart.str(callTarget) + dart.str("'");
    }
    let name = this[_fieldName](message);
    if (name == null) {
      return this.toString();
    }
    return dart.str("NoSuchMethodError: invalid member on null: '") + dart.str(name) + dart.str("'");
  }
  get [_receiver$]() {
    return this[$noSuchMethod](new core._Invocation.getter(C9 || CT.C9));
  }
  get [_arguments$]() {
    return ListN().as(this[$noSuchMethod](new core._Invocation.getter(C10 || CT.C10)));
  }
  get [_memberName$]() {
    return core.Symbol.as(this[$noSuchMethod](new core._Invocation.getter(C11 || CT.C11)));
  }
  get [_invocation$]() {
    return InvocationN().as(this[$noSuchMethod](new core._Invocation.getter(C12 || CT.C12)));
  }
  get [_namedArguments$]() {
    return MapNOfSymbol$dynamic().as(this[$noSuchMethod](new core._Invocation.getter(C13 || CT.C13)));
  }
};
(_interceptors.JSNoSuchMethodError.new = function() {
  _interceptors.JSNoSuchMethodError.__proto__.new.call(this);
  ;
}).prototype = _interceptors.JSNoSuchMethodError.prototype;
dart.addTypeTests(_interceptors.JSNoSuchMethodError);
dart.addTypeCaches(_interceptors.JSNoSuchMethodError);
_interceptors.JSNoSuchMethodError[dart.implements] = () => [core.NoSuchMethodError];
dart.setMethodSignature(_interceptors.JSNoSuchMethodError, () => ({
  __proto__: dart.getMethods(_interceptors.JSNoSuchMethodError.__proto__),
  [_fieldName]: dart.fnType(dart.nullable(core.String), [core.String]),
  [_functionCallTarget]: dart.fnType(dart.nullable(core.String), [core.String])
}));
dart.setGetterSignature(_interceptors.JSNoSuchMethodError, () => ({
  __proto__: dart.getGetters(_interceptors.JSNoSuchMethodError.__proto__),
  [$stackTrace]: core.StackTrace,
  [_receiver$]: dart.nullable(core.Object),
  [_arguments$]: dart.nullable(core.List),
  [_memberName$]: core.Symbol,
  [_invocation$]: dart.nullable(core.Invocation),
  [_namedArguments$]: dart.nullable(core.Map$(core.Symbol, dart.dynamic))
}));
dart.setLibraryUri(_interceptors.JSNoSuchMethodError, L16);
dart.defineLazy(_interceptors.JSNoSuchMethodError, {
  /*_interceptors.JSNoSuchMethodError._nullError*/get _nullError() {
    return core.RegExp.new("^Cannot read property '(.+)' of null$");
  },
  /*_interceptors.JSNoSuchMethodError._notAFunction*/get _notAFunction() {
    return core.RegExp.new("^(.+) is not a function$");
  },
  /*_interceptors.JSNoSuchMethodError._extensionName*/get _extensionName() {
    return core.RegExp.new("^Symbol\\(dartx\\.(.+)\\)$");
  },
  /*_interceptors.JSNoSuchMethodError._privateName*/get _privateName() {
    return core.RegExp.new("^Symbol\\((_.+)\\)$");
  }
}, false);
dart.registerExtension("TypeError", _interceptors.JSNoSuchMethodError);
_interceptors.JSFunction = class JSFunction extends _interceptors.Interceptor {
  [$toString]() {
    if (dart.isType(this)) return dart.typeName(this);
    return "Closure: " + dart.typeName(dart.getReifiedType(this)) + " from: " + this;
  }
  [$_equals](other) {
    if (other == null) return false;
    if (other == null) return false;
    let boundObj = this._boundObject;
    if (boundObj == null) return this === other;
    return boundObj === other._boundObject && this._boundMethod === other._boundMethod;
  }
  get [$hashCode]() {
    let boundObj = this._boundObject;
    if (boundObj == null) return core.identityHashCode(this);
    let boundMethod = this._boundMethod;
    let hash = 17 * 31 + dart.notNull(dart.hashCode(boundObj)) & 536870911;
    return hash * 31 + dart.notNull(core.identityHashCode(boundMethod)) & 536870911;
  }
  get [$runtimeType]() {
    return dart.wrapType(dart.getReifiedType(this));
  }
};
(_interceptors.JSFunction.new = function() {
  _interceptors.JSFunction.__proto__.new.call(this);
  ;
}).prototype = _interceptors.JSFunction.prototype;
dart.addTypeTests(_interceptors.JSFunction);
dart.addTypeCaches(_interceptors.JSFunction);
dart.setLibraryUri(_interceptors.JSFunction, L16);
dart.registerExtension("Function", _interceptors.JSFunction);
_interceptors.JSNull = class JSNull extends core.Object {
  toString() {
    return "null";
  }
  noSuchMethod(i) {
    if (i == null) dart.nullFailed(L17, 207, 27, "i");
    return dart.defaultNoSuchMethod(null, i);
  }
};
(_interceptors.JSNull.new = function() {
  ;
}).prototype = _interceptors.JSNull.prototype;
dart.addTypeTests(_interceptors.JSNull);
dart.addTypeCaches(_interceptors.JSNull);
dart.setLibraryUri(_interceptors.JSNull, L16);
dart.defineExtensionMethods(_interceptors.JSNull, ['toString', 'noSuchMethod']);
var _hasValue = dart.privateName(_interceptors, "_hasValue");
var C14;
var _hasValue$ = dart.privateName(core, "_hasValue");
var _errorExplanation = dart.privateName(_interceptors, "_errorExplanation");
var C15;
var _errorExplanation$ = dart.privateName(core, "_errorExplanation");
var _errorName = dart.privateName(_interceptors, "_errorName");
var C16;
var _errorName$ = dart.privateName(core, "_errorName");
_interceptors.JSRangeError = class JSRangeError extends _interceptors.Interceptor {
  get [$stackTrace]() {
    return dart.stackTrace(this);
  }
  get [$invalidValue]() {
    return null;
  }
  get [$name]() {
    return null;
  }
  get [$message]() {
    return this.message;
  }
  [$toString]() {
    return dart.str("Invalid argument: ") + dart.str(this[$message]);
  }
  get [_hasValue$]() {
    return core.bool.as(this[$noSuchMethod](new core._Invocation.getter(C14 || CT.C14)));
  }
  get [_errorExplanation$]() {
    return core.String.as(this[$noSuchMethod](new core._Invocation.getter(C15 || CT.C15)));
  }
  get [_errorName$]() {
    return core.String.as(this[$noSuchMethod](new core._Invocation.getter(C16 || CT.C16)));
  }
};
(_interceptors.JSRangeError.new = function() {
  _interceptors.JSRangeError.__proto__.new.call(this);
  ;
}).prototype = _interceptors.JSRangeError.prototype;
dart.addTypeTests(_interceptors.JSRangeError);
dart.addTypeCaches(_interceptors.JSRangeError);
_interceptors.JSRangeError[dart.implements] = () => [core.ArgumentError];
dart.setGetterSignature(_interceptors.JSRangeError, () => ({
  __proto__: dart.getGetters(_interceptors.JSRangeError.__proto__),
  [$stackTrace]: core.StackTrace,
  [$invalidValue]: dart.dynamic,
  [$name]: dart.nullable(core.String),
  [$message]: dart.dynamic,
  [_hasValue$]: core.bool,
  [_errorExplanation$]: core.String,
  [_errorName$]: core.String
}));
dart.setLibraryUri(_interceptors.JSRangeError, L16);
dart.registerExtension("RangeError", _interceptors.JSRangeError);
var _setLengthUnsafe = dart.privateName(_interceptors, "_setLengthUnsafe");
var _removeWhere = dart.privateName(_interceptors, "_removeWhere");
const _is_JSArray_default = Symbol('_is_JSArray_default');
_interceptors.JSArray$ = dart.generic(E => {
  var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
  var WhereIterableOfE = () => (WhereIterableOfE = dart.constFn(_internal.WhereIterable$(E)))();
  var SubListIterableOfE = () => (SubListIterableOfE = dart.constFn(_internal.SubListIterable$(E)))();
  var TakeWhileIterableOfE = () => (TakeWhileIterableOfE = dart.constFn(_internal.TakeWhileIterable$(E)))();
  var SkipWhileIterableOfE = () => (SkipWhileIterableOfE = dart.constFn(_internal.SkipWhileIterable$(E)))();
  var EAndEToE = () => (EAndEToE = dart.constFn(dart.fnType(E, [E, E])))();
  var VoidToE = () => (VoidToE = dart.constFn(dart.fnType(E, [])))();
  var VoidToNE = () => (VoidToNE = dart.constFn(dart.nullable(VoidToE())))();
  var JSArrayOfE = () => (JSArrayOfE = dart.constFn(_interceptors.JSArray$(E)))();
  var ListOfE = () => (ListOfE = dart.constFn(core.List$(E)))();
  var EN = () => (EN = dart.constFn(dart.nullable(E)))();
  var ReversedListIterableOfE = () => (ReversedListIterableOfE = dart.constFn(_internal.ReversedListIterable$(E)))();
  var LinkedHashSetOfE = () => (LinkedHashSetOfE = dart.constFn(collection.LinkedHashSet$(E)))();
  var ArrayIteratorOfE = () => (ArrayIteratorOfE = dart.constFn(_interceptors.ArrayIterator$(E)))();
  var ListMapViewOfE = () => (ListMapViewOfE = dart.constFn(_internal.ListMapView$(E)))();
  var FollowedByIterableOfE = () => (FollowedByIterableOfE = dart.constFn(_internal.FollowedByIterable$(E)))();
  class JSArray extends core.Object {
    constructor() {
      return [];
    }
    static of(list) {
      list.__proto__ = JSArray.prototype;
      return list;
    }
    static fixed(list) {
      list.__proto__ = JSArray.prototype;
      list.fixed$length = Array;
      return list;
    }
    static unmodifiable(list) {
      list.__proto__ = JSArray.prototype;
      list.fixed$length = Array;
      list.immutable$list = Array;
      return list;
    }
    static markFixedList(list) {
      list.fixed$length = Array;
    }
    static markUnmodifiableList(list) {
      list.fixed$length = Array;
      list.immutable$list = Array;
    }
    [$checkMutable](reason) {
      if (this.immutable$list) {
        dart.throw(new core.UnsupportedError.new(core.String.as(reason)));
      }
    }
    [$checkGrowable](reason) {
      if (this.fixed$length) {
        dart.throw(new core.UnsupportedError.new(core.String.as(reason)));
      }
    }
    [$cast](R) {
      return core.List.castFrom(E, R, this);
    }
    [$add](value) {
      E.as(value);
      this[$checkGrowable]("add");
      this.push(value);
    }
    [$removeAt](index) {
      if (index == null) dart.argumentError(index);
      this[$checkGrowable]("removeAt");
      if (index < 0 || index >= this[$length]) {
        dart.throw(new core.RangeError.value(index));
      }
      return this.splice(index, 1)[0];
    }
    [$insert](index, value) {
      if (index == null) dart.argumentError(index);
      E.as(value);
      this[$checkGrowable]("insert");
      if (index < 0 || index > this[$length]) {
        dart.throw(new core.RangeError.value(index));
      }
      this.splice(index, 0, value);
    }
    [$insertAll](index, iterable) {
      if (index == null) dart.argumentError(index);
      IterableOfE().as(iterable);
      if (iterable == null) dart.nullFailed(L18, 93, 52, "iterable");
      this[$checkGrowable]("insertAll");
      core.RangeError.checkValueInInterval(index, 0, this[$length], "index");
      if (!_internal.EfficientLengthIterable.is(iterable)) {
        iterable = iterable[$toList]();
      }
      let insertionLength = dart.notNull(iterable[$length]);
      this[_setLengthUnsafe](this[$length] + insertionLength);
      let end = index + insertionLength;
      this[$setRange](end, this[$length], this, index);
      this[$setRange](index, end, iterable);
    }
    [$setAll](index, iterable) {
      let t20;
      if (index == null) dart.argumentError(index);
      IterableOfE().as(iterable);
      if (iterable == null) dart.nullFailed(L18, 107, 49, "iterable");
      this[$checkMutable]("setAll");
      core.RangeError.checkValueInInterval(index, 0, this[$length], "index");
      for (let element of iterable) {
        this[$_set]((t20 = index, index = t20 + 1, t20), element);
      }
    }
    [$removeLast]() {
      this[$checkGrowable]("removeLast");
      if (this[$length] === 0) dart.throw(_js_helper.diagnoseIndexError(this, -1));
      return this.pop();
    }
    [$remove](element) {
      this[$checkGrowable]("remove");
      let length = this[$length];
      for (let i = 0; i < length; i = i + 1) {
        if (dart.equals(this[$_get](i), element)) {
          this.splice(i, 1);
          return true;
        }
      }
      return false;
    }
    [$removeWhere](test) {
      if (test == null) dart.nullFailed(L18, 136, 37, "test");
      this[$checkGrowable]("removeWhere");
      this[_removeWhere](test, true);
    }
    [$retainWhere](test) {
      if (test == null) dart.nullFailed(L18, 141, 37, "test");
      this[$checkGrowable]("retainWhere");
      this[_removeWhere](test, false);
    }
    [_removeWhere](test, removeMatching) {
      if (test == null) dart.nullFailed(L18, 146, 38, "test");
      if (removeMatching == null) dart.nullFailed(L18, 146, 49, "removeMatching");
      let retained = [];
      let end = this[$length];
      for (let i = 0; i < end; i = i + 1) {
        let element = this[i];
        if ((!dart.test(test(element)))[$_equals](removeMatching)) {
          retained[$add](element);
        }
        if (this[$length] !== end) dart.throw(new core.ConcurrentModificationError.new(this));
      }
      if (retained[$length] === end) return;
      this[$length] = retained[$length];
      let length = dart.notNull(retained[$length]);
      for (let i = 0; i < length; i = i + 1) {
        this[i] = retained[i];
      }
    }
    [$where](f) {
      if (f == null) dart.nullFailed(L18, 173, 38, "f");
      return new (WhereIterableOfE()).new(this, f);
    }
    [$expand](T, f) {
      if (f == null) dart.nullFailed(L18, 177, 49, "f");
      return new (_internal.ExpandIterable$(E, T)).new(this, f);
    }
    [$addAll](collection) {
      IterableOfE().as(collection);
      if (collection == null) dart.nullFailed(L18, 181, 27, "collection");
      let i = this[$length];
      this[$checkGrowable]("addAll");
      for (let e of collection) {
        if (!(i === this[$length] || dart.throw(new core.ConcurrentModificationError.new(this)))) dart.assertFailed(null, L18, 185, 14, "i == this.length || (throw ConcurrentModificationError(this))");
        i = i + 1;
        this.push(e);
      }
    }
    [$clear]() {
      this[$length] = 0;
    }
    [$forEach](f) {
      if (f == null) dart.nullFailed(L18, 195, 33, "f");
      let end = this[$length];
      for (let i = 0; i < end; i = i + 1) {
        let element = this[i];
        f(element);
        if (this[$length] !== end) dart.throw(new core.ConcurrentModificationError.new(this));
      }
    }
    [$map](T, f) {
      if (f == null) dart.nullFailed(L18, 204, 36, "f");
      return new (_internal.MappedListIterable$(E, T)).new(this, f);
    }
    [$join](separator = "") {
      if (separator == null) dart.nullFailed(L18, 208, 23, "separator");
      let length = this[$length];
      let list = ListOfString().filled(length, "");
      for (let i = 0; i < length; i = i + 1) {
        list[$_set](i, dart.str(this[$_get](i)));
      }
      return list.join(separator);
    }
    [$take](n) {
      if (n == null) dart.nullFailed(L18, 217, 24, "n");
      return new (SubListIterableOfE()).new(this, 0, n);
    }
    [$takeWhile](test) {
      if (test == null) dart.nullFailed(L18, 221, 30, "test");
      return new (TakeWhileIterableOfE()).new(this, test);
    }
    [$skip](n) {
      if (n == null) dart.nullFailed(L18, 225, 24, "n");
      return new (SubListIterableOfE()).new(this, n, null);
    }
    [$skipWhile](test) {
      if (test == null) dart.nullFailed(L18, 229, 42, "test");
      return new (SkipWhileIterableOfE()).new(this, test);
    }
    [$reduce](combine) {
      EAndEToE().as(combine);
      if (combine == null) dart.nullFailed(L18, 233, 14, "combine");
      let length = this[$length];
      if (length === 0) dart.throw(_internal.IterableElementError.noElement());
      let value = this[$_get](0);
      for (let i = 1; i < length; i = i + 1) {
        let element = this[i];
        value = combine(value, element);
        if (length !== this[$length]) dart.throw(new core.ConcurrentModificationError.new(this));
      }
      return value;
    }
    [$fold](T, initialValue, combine) {
      if (combine == null) dart.nullFailed(L18, 245, 68, "combine");
      let value = initialValue;
      let length = this[$length];
      for (let i = 0; i < length; i = i + 1) {
        let element = this[i];
        value = combine(value, element);
        if (this[$length] !== length) dart.throw(new core.ConcurrentModificationError.new(this));
      }
      return value;
    }
    [$firstWhere](test, opts) {
      if (test == null) dart.nullFailed(L18, 256, 33, "test");
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToNE().as(orElse);
      let end = this[$length];
      for (let i = 0; i < end; i = i + 1) {
        let element = this[i];
        if (dart.test(test(element))) return element;
        if (this[$length] !== end) dart.throw(new core.ConcurrentModificationError.new(this));
      }
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    [$lastWhere](test, opts) {
      if (test == null) dart.nullFailed(L18, 267, 32, "test");
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToNE().as(orElse);
      let length = this[$length];
      for (let i = length - 1; i >= 0; i = i - 1) {
        let element = this[i];
        if (dart.test(test(element))) return element;
        if (length !== this[$length]) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    [$singleWhere](test, opts) {
      if (test == null) dart.nullFailed(L18, 280, 34, "test");
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToNE().as(orElse);
      let length = this[$length];
      let match = null;
      let matchFound = false;
      for (let i = 0; i < length; i = i + 1) {
        let element = this[i];
        if (dart.test(test(element))) {
          if (matchFound) {
            dart.throw(_internal.IterableElementError.tooMany());
          }
          matchFound = true;
          match = element;
        }
        if (length !== this[$length]) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
      if (matchFound) return E.as(match);
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    [$elementAt](index) {
      if (index == null) dart.nullFailed(L18, 302, 19, "index");
      return this[$_get](index);
    }
    [$sublist](start, end = null) {
      if (start == null) dart.argumentError(start);
      if (start < 0 || start > this[$length]) {
        dart.throw(new core.RangeError.range(start, 0, this[$length], "start"));
      }
      if (end == null) {
        end = this[$length];
      } else {
        let _end = end;
        if (_end < start || _end > this[$length]) {
          dart.throw(new core.RangeError.range(end, start, this[$length], "end"));
        }
      }
      if (start === end) return JSArrayOfE().of([]);
      return JSArrayOfE().of(this.slice(start, end));
    }
    [$getRange](start, end) {
      if (start == null) dart.nullFailed(L18, 323, 28, "start");
      if (end == null) dart.nullFailed(L18, 323, 39, "end");
      core.RangeError.checkValidRange(start, end, this[$length]);
      return new (SubListIterableOfE()).new(this, start, end);
    }
    get [$first]() {
      if (this[$length] > 0) return this[$_get](0);
      dart.throw(_internal.IterableElementError.noElement());
    }
    get [$last]() {
      if (this[$length] > 0) return this[$_get](this[$length] - 1);
      dart.throw(_internal.IterableElementError.noElement());
    }
    get [$single]() {
      if (this[$length] === 1) return this[$_get](0);
      if (this[$length] === 0) dart.throw(_internal.IterableElementError.noElement());
      dart.throw(_internal.IterableElementError.tooMany());
    }
    [$removeRange](start, end) {
      if (start == null) dart.argumentError(start);
      if (end == null) dart.argumentError(end);
      this[$checkGrowable]("removeRange");
      core.RangeError.checkValidRange(start, end, this[$length]);
      let deleteCount = end - start;
      this.splice(start, deleteCount);
    }
    [$setRange](start, end, iterable, skipCount = 0) {
      if (start == null) dart.argumentError(start);
      if (end == null) dart.argumentError(end);
      IterableOfE().as(iterable);
      if (iterable == null) dart.nullFailed(L18, 351, 71, "iterable");
      if (skipCount == null) dart.argumentError(skipCount);
      this[$checkMutable]("set range");
      core.RangeError.checkValidRange(start, end, this[$length]);
      let length = end - start;
      if (length === 0) return;
      core.RangeError.checkNotNegative(skipCount, "skipCount");
      let otherList = JSArrayOfE().of([]);
      let otherStart = 0;
      if (ListOfE().is(iterable)) {
        otherList = iterable;
        otherStart = skipCount;
      } else {
        otherList = iterable[$skip](skipCount)[$toList]({growable: false});
        otherStart = 0;
      }
      if (otherStart + length > dart.notNull(otherList[$length])) {
        dart.throw(_internal.IterableElementError.tooFew());
      }
      if (otherStart < start) {
        for (let i = length - 1; i >= 0; i = i - 1) {
          let element = otherList[$_get](otherStart + i);
          this[start + i] = element;
        }
      } else {
        for (let i = 0; i < length; i = i + 1) {
          let element = otherList[$_get](otherStart + i);
          this[start + i] = element;
        }
      }
    }
    [$fillRange](start, end, fillValue = null) {
      if (start == null) dart.argumentError(start);
      if (end == null) dart.argumentError(end);
      EN().as(fillValue);
      this[$checkMutable]("fill range");
      core.RangeError.checkValidRange(start, end, this[$length]);
      let checkedFillValue = E.as(fillValue);
      for (let i = start; i < end; i = i + 1) {
        this[i] = checkedFillValue;
      }
    }
    [$replaceRange](start, end, replacement) {
      if (start == null) dart.argumentError(start);
      if (end == null) dart.argumentError(end);
      IterableOfE().as(replacement);
      if (replacement == null) dart.nullFailed(L18, 402, 61, "replacement");
      this[$checkGrowable]("replace range");
      core.RangeError.checkValidRange(start, end, this[$length]);
      if (!_internal.EfficientLengthIterable.is(replacement)) {
        replacement = replacement[$toList]();
      }
      let removeLength = end - start;
      let insertLength = dart.notNull(replacement[$length]);
      if (removeLength >= insertLength) {
        let delta = removeLength - insertLength;
        let insertEnd = start + insertLength;
        let newLength = this[$length] - delta;
        this[$setRange](start, insertEnd, replacement);
        if (delta !== 0) {
          this[$setRange](insertEnd, newLength, this, end);
          this[$length] = newLength;
        }
      } else {
        let delta = insertLength - removeLength;
        let newLength = this[$length] + delta;
        let insertEnd = start + insertLength;
        this[_setLengthUnsafe](newLength);
        this[$setRange](insertEnd, newLength, this, end);
        this[$setRange](start, insertEnd, replacement);
      }
    }
    [$any](test) {
      if (test == null) dart.nullFailed(L18, 430, 29, "test");
      let end = this[$length];
      for (let i = 0; i < end; i = i + 1) {
        let element = this[i];
        if (dart.test(test(element))) return true;
        if (this[$length] !== end) dart.throw(new core.ConcurrentModificationError.new(this));
      }
      return false;
    }
    [$every](test) {
      if (test == null) dart.nullFailed(L18, 440, 31, "test");
      let end = this[$length];
      for (let i = 0; i < end; i = i + 1) {
        let element = this[i];
        if (!dart.test(test(element))) return false;
        if (this[$length] !== end) dart.throw(new core.ConcurrentModificationError.new(this));
      }
      return true;
    }
    get [$reversed]() {
      return new (ReversedListIterableOfE()).new(this);
    }
    [$sort](compare = null) {
      this[$checkMutable]("sort");
      if (compare == null) {
        _internal.Sort.sort(E, this, dart.fn((a, b) => core.Comparable.compare(core.Comparable.as(a), core.Comparable.as(b)), ObjectNAndObjectNToint()));
      } else {
        _internal.Sort.sort(E, this, compare);
      }
    }
    [$shuffle](random = null) {
      this[$checkMutable]("shuffle");
      if (random == null) random = math.Random.new();
      let length = this[$length];
      while (length > 1) {
        let pos = random.nextInt(length);
        length = length - 1;
        let tmp = this[$_get](length);
        this[$_set](length, this[$_get](pos));
        this[$_set](pos, tmp);
      }
    }
    [$indexOf](element, start = 0) {
      if (start == null) dart.argumentError(start);
      let length = this[$length];
      if (start >= length) {
        return -1;
      }
      if (start < 0) {
        start = 0;
      }
      for (let i = start; i < length; i = i + 1) {
        if (dart.equals(this[$_get](i), element)) {
          return i;
        }
      }
      return -1;
    }
    [$lastIndexOf](element, startIndex = null) {
      let t20;
      let start = (t20 = startIndex, t20 == null ? this[$length] - 1 : t20);
      if (start >= this[$length]) {
        start = this[$length] - 1;
      } else if (start < 0) {
        return -1;
      }
      for (let i = start; i >= 0; i = i - 1) {
        if (dart.equals(this[$_get](i), element)) {
          return i;
        }
      }
      return -1;
    }
    [$contains](other) {
      let length = this[$length];
      for (let i = 0; i < length; i = i + 1) {
        let element = this[i];
        if (dart.equals(element, other)) return true;
      }
      return false;
    }
    get [$isEmpty]() {
      return this[$length] === 0;
    }
    get [$isNotEmpty]() {
      return !this[$isEmpty];
    }
    [$toString]() {
      return collection.ListBase.listToString(this);
    }
    [$toList](opts) {
      let growable = opts && 'growable' in opts ? opts.growable : true;
      if (growable == null) dart.argumentError(growable);
      let list = this.slice();
      if (!growable) _interceptors.JSArray.markFixedList(list);
      return JSArrayOfE().of(list);
    }
    [$toSet]() {
      return LinkedHashSetOfE().from(this);
    }
    get [$iterator]() {
      return new (ArrayIteratorOfE()).new(this);
    }
    get [$hashCode]() {
      return core.identityHashCode(this);
    }
    [$_equals](other) {
      if (other == null) return false;
      return this === other;
    }
    get [$length]() {
      return this.length;
    }
    set [$length](newLength) {
      if (newLength == null) dart.argumentError(newLength);
      this[$checkGrowable]("set length");
      if (newLength < 0) {
        dart.throw(new core.RangeError.range(newLength, 0, null, "newLength"));
      }
      if (newLength > this[$length]) E.as(null);
      this.length = newLength;
    }
    [_setLengthUnsafe](newLength) {
      if (newLength == null) dart.nullFailed(L18, 564, 29, "newLength");
      if (dart.notNull(newLength) < 0) {
        dart.throw(new core.RangeError.range(newLength, 0, null, "newLength"));
      }
      this.length = newLength;
    }
    [$_get](index) {
      if (index == null) dart.nullFailed(L18, 574, 21, "index");
      if (index == null || index >= this.length || index < 0) {
        dart.throw(_js_helper.diagnoseIndexError(this, index));
      }
      return this[index];
    }
    [$_set](index, value$) {
      let value = value$;
      if (index == null) dart.nullFailed(L18, 584, 25, "index");
      E.as(value);
      this[$checkMutable]("indexed set");
      if (index == null || index >= this.length || index < 0) {
        dart.throw(_js_helper.diagnoseIndexError(this, index));
      }
      this[index] = value;
      return value$;
    }
    [$asMap]() {
      return new (ListMapViewOfE()).new(this);
    }
    get [$runtimeType]() {
      return dart.wrapType(core.List$(E));
    }
    [$followedBy](other) {
      IterableOfE().as(other);
      if (other == null) dart.nullFailed(L18, 601, 38, "other");
      return FollowedByIterableOfE().firstEfficient(this, other);
    }
    [$whereType](T) {
      return new (_internal.WhereTypeIterable$(T)).new(this);
    }
    [$plus](other) {
      ListOfE().as(other);
      if (other == null) dart.nullFailed(L18, 606, 30, "other");
      return (() => {
        let t20 = JSArrayOfE().of([]);
        for (let t21 of this)
          t20[$add](t21);
        for (let t22 of other)
          t20[$add](t22);
        return t20;
      })();
    }
    [$indexWhere](test, start = 0) {
      if (test == null) dart.nullFailed(L18, 608, 35, "test");
      if (start == null) dart.nullFailed(L18, 608, 46, "start");
      if (dart.notNull(start) >= this[$length]) return -1;
      if (dart.notNull(start) < 0) start = 0;
      for (let i = start; dart.notNull(i) < this[$length]; i = dart.notNull(i) + 1) {
        if (dart.test(test(this[$_get](i)))) return i;
      }
      return -1;
    }
    [$lastIndexWhere](test, start = null) {
      if (test == null) dart.nullFailed(L18, 617, 39, "test");
      if (start == null) start = this[$length] - 1;
      if (dart.notNull(start) < 0) return -1;
      for (let i = start; dart.notNull(i) >= 0; i = dart.notNull(i) - 1) {
        if (dart.test(test(this[$_get](i)))) return i;
      }
      return -1;
    }
    set [$first](element) {
      E.as(element);
      if (this[$isEmpty]) dart.throw(new core.IndexError.new(0, this));
      this[$_set](0, element);
    }
    set [$last](element) {
      E.as(element);
      if (this[$isEmpty]) dart.throw(new core.IndexError.new(0, this));
      this[$_set](this[$length] - 1, element);
    }
  }
  (JSArray.new = function() {
    ;
  }).prototype = JSArray.prototype;
  dart.setExtensionBaseClass(JSArray, dart.global.Array);
  JSArray.prototype[dart.isList] = true;
  dart.addTypeTests(JSArray);
  JSArray.prototype[_is_JSArray_default] = true;
  dart.addTypeCaches(JSArray);
  JSArray[dart.implements] = () => [core.List$(E), _interceptors.JSIndexable$(E)];
  dart.setMethodSignature(JSArray, () => ({
    __proto__: dart.getMethods(JSArray.__proto__),
    [$checkMutable]: dart.fnType(dart.dynamic, [dart.dynamic]),
    [$checkGrowable]: dart.fnType(dart.dynamic, [dart.dynamic]),
    [$cast]: dart.gFnType(R => [core.List$(R), []], R => [dart.nullable(core.Object)]),
    [$add]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    [$removeAt]: dart.fnType(E, [core.int]),
    [$insert]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
    [$insertAll]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
    [$setAll]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
    [$removeLast]: dart.fnType(E, []),
    [$remove]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    [$removeWhere]: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
    [$retainWhere]: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
    [_removeWhere]: dart.fnType(dart.void, [dart.fnType(core.bool, [E]), core.bool]),
    [$where]: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
    [$expand]: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(core.Iterable$(T), [E])]], T => [dart.nullable(core.Object)]),
    [$addAll]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    [$clear]: dart.fnType(dart.void, []),
    [$forEach]: dart.fnType(dart.void, [dart.fnType(dart.void, [E])]),
    [$map]: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(T, [E])]], T => [dart.nullable(core.Object)]),
    [$join]: dart.fnType(core.String, [], [core.String]),
    [$take]: dart.fnType(core.Iterable$(E), [core.int]),
    [$takeWhile]: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
    [$skip]: dart.fnType(core.Iterable$(E), [core.int]),
    [$skipWhile]: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
    [$reduce]: dart.fnType(E, [dart.nullable(core.Object)]),
    [$fold]: dart.gFnType(T => [T, [T, dart.fnType(T, [T, E])]], T => [dart.nullable(core.Object)]),
    [$firstWhere]: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
    [$lastWhere]: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
    [$singleWhere]: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
    [$elementAt]: dart.fnType(E, [core.int]),
    [$sublist]: dart.fnType(core.List$(E), [core.int], [dart.nullable(core.int)]),
    [$getRange]: dart.fnType(core.Iterable$(E), [core.int, core.int]),
    [$removeRange]: dart.fnType(dart.void, [core.int, core.int]),
    [$setRange]: dart.fnType(dart.void, [core.int, core.int, dart.nullable(core.Object)], [core.int]),
    [$fillRange]: dart.fnType(dart.void, [core.int, core.int], [dart.nullable(core.Object)]),
    [$replaceRange]: dart.fnType(dart.void, [core.int, core.int, dart.nullable(core.Object)]),
    [$any]: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
    [$every]: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
    [$sort]: dart.fnType(dart.void, [], [dart.nullable(dart.fnType(core.int, [E, E]))]),
    [$shuffle]: dart.fnType(dart.void, [], [dart.nullable(math.Random)]),
    [$indexOf]: dart.fnType(core.int, [dart.nullable(core.Object)], [core.int]),
    [$lastIndexOf]: dart.fnType(core.int, [dart.nullable(core.Object)], [dart.nullable(core.int)]),
    [$contains]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    [$toList]: dart.fnType(core.List$(E), [], {growable: core.bool}, {}),
    [$toSet]: dart.fnType(core.Set$(E), []),
    [_setLengthUnsafe]: dart.fnType(dart.void, [core.int]),
    [$_get]: dart.fnType(E, [core.int]),
    [$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
    [$asMap]: dart.fnType(core.Map$(core.int, E), []),
    [$followedBy]: dart.fnType(core.Iterable$(E), [dart.nullable(core.Object)]),
    [$whereType]: dart.gFnType(T => [core.Iterable$(T), []], T => [dart.nullable(core.Object)]),
    [$plus]: dart.fnType(core.List$(E), [dart.nullable(core.Object)]),
    [$indexWhere]: dart.fnType(core.int, [dart.fnType(core.bool, [E])], [core.int]),
    [$lastIndexWhere]: dart.fnType(core.int, [dart.fnType(core.bool, [E])], [dart.nullable(core.int)])
  }));
  dart.setGetterSignature(JSArray, () => ({
    __proto__: dart.getGetters(JSArray.__proto__),
    [$first]: E,
    [$last]: E,
    [$single]: E,
    [$reversed]: core.Iterable$(E),
    [$isEmpty]: core.bool,
    [$isNotEmpty]: core.bool,
    [$iterator]: core.Iterator$(E),
    [$length]: core.int
  }));
  dart.setSetterSignature(JSArray, () => ({
    __proto__: dart.getSetters(JSArray.__proto__),
    [$length]: core.int,
    [$first]: dart.nullable(core.Object),
    [$last]: dart.nullable(core.Object)
  }));
  dart.setLibraryUri(JSArray, L16);
  return JSArray;
});
_interceptors.JSArray = _interceptors.JSArray$();
dart.addTypeTests(_interceptors.JSArray, _is_JSArray_default);
dart.registerExtension("Array", _interceptors.JSArray);
const _is_JSMutableArray_default = Symbol('_is_JSMutableArray_default');
_interceptors.JSMutableArray$ = dart.generic(E => {
  class JSMutableArray extends _interceptors.JSArray$(E) {}
  (JSMutableArray.new = function() {
    JSMutableArray.__proto__.new.call(this);
    ;
  }).prototype = JSMutableArray.prototype;
  dart.addTypeTests(JSMutableArray);
  JSMutableArray.prototype[_is_JSMutableArray_default] = true;
  dart.addTypeCaches(JSMutableArray);
  dart.setLibraryUri(JSMutableArray, L16);
  return JSMutableArray;
});
_interceptors.JSMutableArray = _interceptors.JSMutableArray$();
dart.addTypeTests(_interceptors.JSMutableArray, _is_JSMutableArray_default);
const _is_JSFixedArray_default = Symbol('_is_JSFixedArray_default');
_interceptors.JSFixedArray$ = dart.generic(E => {
  class JSFixedArray extends _interceptors.JSMutableArray$(E) {}
  (JSFixedArray.new = function() {
    JSFixedArray.__proto__.new.call(this);
    ;
  }).prototype = JSFixedArray.prototype;
  dart.addTypeTests(JSFixedArray);
  JSFixedArray.prototype[_is_JSFixedArray_default] = true;
  dart.addTypeCaches(JSFixedArray);
  dart.setLibraryUri(JSFixedArray, L16);
  return JSFixedArray;
});
_interceptors.JSFixedArray = _interceptors.JSFixedArray$();
dart.addTypeTests(_interceptors.JSFixedArray, _is_JSFixedArray_default);
const _is_JSExtendableArray_default = Symbol('_is_JSExtendableArray_default');
_interceptors.JSExtendableArray$ = dart.generic(E => {
  class JSExtendableArray extends _interceptors.JSMutableArray$(E) {}
  (JSExtendableArray.new = function() {
    JSExtendableArray.__proto__.new.call(this);
    ;
  }).prototype = JSExtendableArray.prototype;
  dart.addTypeTests(JSExtendableArray);
  JSExtendableArray.prototype[_is_JSExtendableArray_default] = true;
  dart.addTypeCaches(JSExtendableArray);
  dart.setLibraryUri(JSExtendableArray, L16);
  return JSExtendableArray;
});
_interceptors.JSExtendableArray = _interceptors.JSExtendableArray$();
dart.addTypeTests(_interceptors.JSExtendableArray, _is_JSExtendableArray_default);
const _is_JSUnmodifiableArray_default = Symbol('_is_JSUnmodifiableArray_default');
_interceptors.JSUnmodifiableArray$ = dart.generic(E => {
  class JSUnmodifiableArray extends _interceptors.JSArray$(E) {}
  (JSUnmodifiableArray.new = function() {
    JSUnmodifiableArray.__proto__.new.call(this);
    ;
  }).prototype = JSUnmodifiableArray.prototype;
  dart.addTypeTests(JSUnmodifiableArray);
  JSUnmodifiableArray.prototype[_is_JSUnmodifiableArray_default] = true;
  dart.addTypeCaches(JSUnmodifiableArray);
  dart.setLibraryUri(JSUnmodifiableArray, L16);
  return JSUnmodifiableArray;
});
_interceptors.JSUnmodifiableArray = _interceptors.JSUnmodifiableArray$();
dart.addTypeTests(_interceptors.JSUnmodifiableArray, _is_JSUnmodifiableArray_default);
var _current = dart.privateName(_interceptors, "_current");
var _iterable = dart.privateName(_interceptors, "_iterable");
var _length = dart.privateName(_interceptors, "_length");
var _index = dart.privateName(_interceptors, "_index");
const _is_ArrayIterator_default = Symbol('_is_ArrayIterator_default');
_interceptors.ArrayIterator$ = dart.generic(E => {
  class ArrayIterator extends core.Object {
    get current() {
      return E.as(this[_current]);
    }
    moveNext() {
      let length = this[_iterable][$length];
      if (this[_length] !== length) {
        dart.throw(_js_helper.throwConcurrentModificationError(this[_iterable]));
      }
      if (this[_index] >= length) {
        this[_current] = null;
        return false;
      }
      this[_current] = this[_iterable][$_get](this[_index]);
      this[_index] = this[_index] + 1;
      return true;
    }
  }
  (ArrayIterator.new = function(iterable) {
    if (iterable == null) dart.nullFailed(L18, 666, 28, "iterable");
    this[_current] = null;
    this[_iterable] = iterable;
    this[_length] = iterable[$length];
    this[_index] = 0;
    ;
  }).prototype = ArrayIterator.prototype;
  dart.addTypeTests(ArrayIterator);
  ArrayIterator.prototype[_is_ArrayIterator_default] = true;
  dart.addTypeCaches(ArrayIterator);
  ArrayIterator[dart.implements] = () => [core.Iterator$(E)];
  dart.setMethodSignature(ArrayIterator, () => ({
    __proto__: dart.getMethods(ArrayIterator.__proto__),
    moveNext: dart.fnType(core.bool, [])
  }));
  dart.setGetterSignature(ArrayIterator, () => ({
    __proto__: dart.getGetters(ArrayIterator.__proto__),
    current: E
  }));
  dart.setLibraryUri(ArrayIterator, L16);
  dart.setFieldSignature(ArrayIterator, () => ({
    __proto__: dart.getFields(ArrayIterator.__proto__),
    [_iterable]: dart.finalFieldType(_interceptors.JSArray$(E)),
    [_length]: dart.finalFieldType(core.int),
    [_index]: dart.fieldType(core.int),
    [_current]: dart.fieldType(dart.nullable(E))
  }));
  return ArrayIterator;
});
_interceptors.ArrayIterator = _interceptors.ArrayIterator$();
dart.addTypeTests(_interceptors.ArrayIterator, _is_ArrayIterator_default);
var _isInt32 = dart.privateName(_interceptors, "_isInt32");
var _tdivSlow = dart.privateName(_interceptors, "_tdivSlow");
var _shlPositive = dart.privateName(_interceptors, "_shlPositive");
var _shrOtherPositive = dart.privateName(_interceptors, "_shrOtherPositive");
var _shrBothPositive = dart.privateName(_interceptors, "_shrBothPositive");
_interceptors.JSNumber = class JSNumber extends _interceptors.Interceptor {
  [$compareTo](b) {
    core.num.as(b);
    if (b == null) dart.argumentError(b);
    if (this < b) {
      return -1;
    } else if (this > b) {
      return 1;
    } else if (this[$_equals](b)) {
      if (this[$_equals](0)) {
        let bIsNegative = b[$isNegative];
        if (this[$isNegative][$_equals](bIsNegative)) return 0;
        if (this[$isNegative]) return -1;
        return 1;
      }
      return 0;
    } else if (this[$isNaN]) {
      if (b[$isNaN]) {
        return 0;
      }
      return 1;
    } else {
      return -1;
    }
  }
  get [$isNegative]() {
    return this[$_equals](0) ? 1 / this < 0 : this < 0;
  }
  get [$isNaN]() {
    return isNaN(this);
  }
  get [$isInfinite]() {
    return this == 1 / 0 || this == -1 / 0;
  }
  get [$isFinite]() {
    return isFinite(this);
  }
  [$remainder](b) {
    if (b == null) dart.argumentError(b);
    return this % b;
  }
  [$abs]() {
    return Math.abs(this);
  }
  get [$sign]() {
    return _interceptors.JSNumber.as(this > 0 ? 1 : this < 0 ? -1 : this);
  }
  [$toInt]() {
    if (this >= -2147483648 && this <= 2147483647) {
      return this | 0;
    }
    if (isFinite(this)) {
      return this[$truncateToDouble]() + 0;
    }
    dart.throw(new core.UnsupportedError.new("" + this));
  }
  [$truncate]() {
    return this[$toInt]();
  }
  [$ceil]() {
    return this[$ceilToDouble]()[$toInt]();
  }
  [$floor]() {
    return this[$floorToDouble]()[$toInt]();
  }
  [$round]() {
    if (this > 0) {
      if (this !== 1 / 0) {
        return Math.round(this);
      }
    } else if (this > -1 / 0) {
      return 0 - Math.round(0 - this);
    }
    dart.throw(new core.UnsupportedError.new("" + this));
  }
  [$ceilToDouble]() {
    return Math.ceil(this);
  }
  [$floorToDouble]() {
    return Math.floor(this);
  }
  [$roundToDouble]() {
    if (this < 0) {
      return -Math.round(-this);
    } else {
      return Math.round(this);
    }
  }
  [$truncateToDouble]() {
    return this < 0 ? this[$ceilToDouble]() : this[$floorToDouble]();
  }
  [$clamp](lowerLimit, upperLimit) {
    if (lowerLimit == null) dart.argumentError(lowerLimit);
    if (upperLimit == null) dart.argumentError(upperLimit);
    if (lowerLimit[$compareTo](upperLimit) > 0) {
      dart.throw(_js_helper.argumentErrorValue(lowerLimit));
    }
    if (this[$compareTo](lowerLimit) < 0) return lowerLimit;
    if (this[$compareTo](upperLimit) > 0) return upperLimit;
    return this;
  }
  [$toDouble]() {
    return this;
  }
  [$toStringAsFixed](fractionDigits) {
    if (fractionDigits == null) dart.argumentError(fractionDigits);
    if (fractionDigits < 0 || fractionDigits > 20) {
      dart.throw(new core.RangeError.range(fractionDigits, 0, 20, "fractionDigits"));
    }
    let result = this.toFixed(fractionDigits);
    if (this[$_equals](0) && this[$isNegative]) return dart.str("-") + dart.str(result);
    return result;
  }
  [$toStringAsExponential](fractionDigits = null) {
    let result = null;
    if (fractionDigits != null) {
      let _fractionDigits = fractionDigits;
      if (_fractionDigits < 0 || _fractionDigits > 20) {
        dart.throw(new core.RangeError.range(_fractionDigits, 0, 20, "fractionDigits"));
      }
      result = this.toExponential(_fractionDigits);
    } else {
      result = this.toExponential();
    }
    if (this[$_equals](0) && this[$isNegative]) return dart.str("-") + dart.str(result);
    return result;
  }
  [$toStringAsPrecision](precision) {
    if (precision == null) dart.argumentError(precision);
    if (precision < 1 || precision > 21) {
      dart.throw(new core.RangeError.range(precision, 1, 21, "precision"));
    }
    let result = this.toPrecision(precision);
    if (this[$_equals](0) && this[$isNegative]) return dart.str("-") + dart.str(result);
    return result;
  }
  [$toRadixString](radix) {
    if (radix == null) dart.argumentError(radix);
    if (radix < 2 || radix > 36) {
      dart.throw(new core.RangeError.range(radix, 2, 36, "radix"));
    }
    let result = this.toString(radix);
    if (result[$codeUnitAt](result.length - 1) !== 41) {
      return result;
    }
    return _interceptors.JSNumber._handleIEtoString(result);
  }
  static _handleIEtoString(result) {
    if (result == null) dart.nullFailed(L19, 194, 42, "result");
    let match = /^([\da-z]+)(?:\.([\da-z]+))?\(e\+(\d+)\)$/.exec(result);
    if (match == null) {
      dart.throw(new core.UnsupportedError.new(dart.str("Unexpected toString result: ") + dart.str(result)));
    }
    result = match[$_get](1);
    let exponent = +match[$_get](3);
    if (match[$_get](2) != null) {
      result = result + match[$_get](2);
      exponent = exponent - match[$_get](2).length;
    }
    return dart.notNull(result) + "0"[$times](exponent);
  }
  [$toString]() {
    if (this[$_equals](0) && 1 / this < 0) {
      return "-0.0";
    } else {
      return "" + this;
    }
  }
  get [$hashCode]() {
    let intValue = this | 0;
    if (this[$_equals](intValue)) return 536870911 & intValue;
    let absolute = Math.abs(this);
    let lnAbsolute = Math.log(absolute);
    let log2 = lnAbsolute / 0.6931471805599453;
    let floorLog2 = log2 | 0;
    let factor = Math.pow(2, floorLog2);
    let scaled = absolute < 1 ? absolute / factor : factor / absolute;
    let rescaled1 = scaled * 9007199254740992;
    let rescaled2 = scaled * 3542243181176521;
    let d1 = rescaled1 | 0;
    let d2 = rescaled2 | 0;
    let d3 = floorLog2;
    let h = 536870911 & (d1 + d2) * (601 * 997) + d3 * 1259;
    return h;
  }
  [$_negate]() {
    return -this;
  }
  [$plus](other) {
    if (other == null) dart.argumentError(other);
    return this + other;
  }
  [$minus](other) {
    if (other == null) dart.argumentError(other);
    return this - other;
  }
  [$divide](other) {
    if (other == null) dart.argumentError(other);
    return this / other;
  }
  [$times](other) {
    if (other == null) dart.argumentError(other);
    return this * other;
  }
  [$modulo](other) {
    if (other == null) dart.argumentError(other);
    let result = this % other;
    if (result[$_equals](0)) return _interceptors.JSNumber.as(0);
    if (result > 0) return result;
    if (other < 0) {
      return result - other;
    } else {
      return result + other;
    }
  }
  [_isInt32](value) {
    return (value | 0) === value;
  }
  [$floorDivide](other) {
    if (other == null) dart.argumentError(other);
    if (this[_isInt32](this) && this[_isInt32](other) && 0 !== other && -1 !== other) {
      return this / other | 0;
    } else {
      return this[_tdivSlow](other);
    }
  }
  [_tdivSlow](other) {
    if (other == null) dart.nullFailed(L19, 308, 21, "other");
    return (this / other)[$toInt]();
  }
  [$leftShift](other) {
    if (other == null) dart.argumentError(other);
    if (other < 0) _js_helper.throwArgumentErrorValue(other);
    return this[_shlPositive](other);
  }
  [_shlPositive](other) {
    return other > 31 ? 0 : this << other >>> 0;
  }
  [$rightShift](other) {
    if (other == null) dart.argumentError(other);
    if (other < 0) _js_helper.throwArgumentErrorValue(other);
    return this[_shrOtherPositive](other);
  }
  [_shrOtherPositive](other) {
    return this > 0 ? this[_shrBothPositive](other) : this >> (other > 31 ? 31 : other) >>> 0;
  }
  [_shrBothPositive](other) {
    return other > 31 ? 0 : this >>> other;
  }
  [$bitAnd](other) {
    if (other == null) dart.argumentError(other);
    return (this & other) >>> 0;
  }
  [$bitOr](other) {
    if (other == null) dart.argumentError(other);
    return (this | other) >>> 0;
  }
  [$bitXor](other) {
    if (other == null) dart.argumentError(other);
    return (this ^ other) >>> 0;
  }
  [$lessThan](other) {
    if (other == null) dart.argumentError(other);
    return this < other;
  }
  [$greaterThan](other) {
    if (other == null) dart.argumentError(other);
    return this > other;
  }
  [$lessOrEquals](other) {
    if (other == null) dart.argumentError(other);
    return this <= other;
  }
  [$greaterOrEquals](other) {
    if (other == null) dart.argumentError(other);
    return this >= other;
  }
  get [$isEven]() {
    return (this & 1) === 0;
  }
  get [$isOdd]() {
    return (this & 1) === 1;
  }
  [$toUnsigned](width) {
    if (width == null) dart.argumentError(width);
    return (this & (1)[$leftShift](width) - 1) >>> 0;
  }
  [$toSigned](width) {
    if (width == null) dart.argumentError(width);
    let signMask = (1)[$leftShift](width - 1);
    return ((this & signMask - 1) >>> 0) - ((this & signMask) >>> 0);
  }
  get [$bitLength]() {
    let nonneg = this < 0 ? -this - 1 : this;
    let wordBits = 32;
    while (nonneg >= 4294967296) {
      nonneg = (nonneg / 4294967296)[$truncate]();
      wordBits = wordBits + 32;
    }
    return wordBits - _interceptors.JSNumber._clz32(nonneg);
  }
  static _clz32(uint32) {
    return 32 - _interceptors.JSNumber._bitCount(_interceptors.JSNumber._spread(uint32));
  }
  [$modPow](e, m) {
    if (e == null) dart.argumentError(e);
    if (m == null) dart.argumentError(m);
    if (e < 0) dart.throw(new core.RangeError.range(e, 0, null, "exponent"));
    if (m <= 0) dart.throw(new core.RangeError.range(m, 1, null, "modulus"));
    if (e === 0) return 1;
    if (this < -9007199254740991.0 || this > 9007199254740991.0) {
      dart.throw(new core.RangeError.range(this, -9007199254740991.0, 9007199254740991.0, "receiver"));
    }
    if (e > 9007199254740991.0) {
      dart.throw(new core.RangeError.range(e, 0, 9007199254740991.0, "exponent"));
    }
    if (m > 9007199254740991.0) {
      dart.throw(new core.RangeError.range(e, 1, 9007199254740991.0, "modulus"));
    }
    if (m > 94906265) {
      return core._BigIntImpl.from(this).modPow(core._BigIntImpl.from(e), core._BigIntImpl.from(m)).toInt();
    }
    let b = this;
    if (b < 0 || b > m) {
      b = b[$modulo](m);
    }
    let r = 1;
    while (e > 0) {
      if (e[$isOdd]) {
        r = (r * b)[$modulo](m);
      }
      e = (e / 2)[$truncate]();
      b = (b * b)[$modulo](m);
    }
    return r;
  }
  static _binaryGcd(x, y, inv) {
    let s = 1;
    if (!inv) {
      while (x[$isEven] && y[$isEven]) {
        x = (x / 2)[$truncate]();
        y = (y / 2)[$truncate]();
        s = s * 2;
      }
      if (y[$isOdd]) {
        let t = x;
        x = y;
        y = t;
      }
    }
    let ac = x[$isEven];
    let u = x;
    let v = y;
    let a = 1;
    let b = 0;
    let c = 0;
    let d = 1;
    do {
      while (u[$isEven]) {
        u = (u / 2)[$truncate]();
        if (ac) {
          if (!a[$isEven] || !b[$isEven]) {
            a = a + y;
            b = b - x;
          }
          a = (a / 2)[$truncate]();
        } else if (!b[$isEven]) {
          b = b - x;
        }
        b = (b / 2)[$truncate]();
      }
      while (v[$isEven]) {
        v = (v / 2)[$truncate]();
        if (ac) {
          if (!c[$isEven] || !d[$isEven]) {
            c = c + y;
            d = d - x;
          }
          c = (c / 2)[$truncate]();
        } else if (!d[$isEven]) {
          d = d - x;
        }
        d = (d / 2)[$truncate]();
      }
      if (u >= v) {
        u = u - v;
        if (ac) a = a - c;
        b = b - d;
      } else {
        v = v - u;
        if (ac) c = c - a;
        d = d - b;
      }
    } while (u !== 0);
    if (!inv) return s * v;
    if (v !== 1) dart.throw(core.Exception.new("Not coprime"));
    if (d < 0) {
      d = d + x;
      if (d < 0) d = d + x;
    } else if (d > x) {
      d = d - x;
      if (d > x) d = d - x;
    }
    return d;
  }
  [$modInverse](m) {
    if (m == null) dart.argumentError(m);
    if (m <= 0) dart.throw(new core.RangeError.range(m, 1, null, "modulus"));
    if (m === 1) return 0;
    let t = this;
    if (t < 0 || t >= m) t = t[$modulo](m);
    if (t === 1) return 1;
    if (t === 0 || t[$isEven] && m[$isEven]) {
      dart.throw(core.Exception.new("Not coprime"));
    }
    return _interceptors.JSNumber._binaryGcd(m, t, true);
  }
  [$gcd](other) {
    if (other == null) dart.argumentError(other);
    let x = this[$abs]();
    let y = other[$abs]();
    if (x === 0) return y;
    if (y === 0) return x;
    if (x === 1 || y === 1) return 1;
    return _interceptors.JSNumber._binaryGcd(x, y, false);
  }
  static _bitCount(i) {
    i = _interceptors.JSNumber._shru(i, 0) - (_interceptors.JSNumber._shru(i, 1) & 1431655765);
    i = (i & 858993459) + (_interceptors.JSNumber._shru(i, 2) & 858993459);
    i = 252645135 & i + _interceptors.JSNumber._shru(i, 4);
    i = i + _interceptors.JSNumber._shru(i, 8);
    i = i + _interceptors.JSNumber._shru(i, 16);
    return i & 63;
  }
  static _shru(value, shift) {
    if (value == null) dart.nullFailed(L19, 606, 24, "value");
    if (shift == null) dart.nullFailed(L19, 606, 35, "shift");
    return value >>> shift;
  }
  static _shrs(value, shift) {
    if (value == null) dart.nullFailed(L19, 609, 24, "value");
    if (shift == null) dart.nullFailed(L19, 609, 35, "shift");
    return value >> shift;
  }
  static _ors(a, b) {
    if (a == null) dart.nullFailed(L19, 612, 23, "a");
    if (b == null) dart.nullFailed(L19, 612, 30, "b");
    return a | b;
  }
  static _spread(i) {
    i = _interceptors.JSNumber._ors(i, _interceptors.JSNumber._shrs(i, 1));
    i = _interceptors.JSNumber._ors(i, _interceptors.JSNumber._shrs(i, 2));
    i = _interceptors.JSNumber._ors(i, _interceptors.JSNumber._shrs(i, 4));
    i = _interceptors.JSNumber._ors(i, _interceptors.JSNumber._shrs(i, 8));
    i = _interceptors.JSNumber._shru(_interceptors.JSNumber._ors(i, _interceptors.JSNumber._shrs(i, 16)), 0);
    return i;
  }
  [$bitNot]() {
    return ~this >>> 0;
  }
};
(_interceptors.JSNumber.new = function() {
  _interceptors.JSNumber.__proto__.new.call(this);
  ;
}).prototype = _interceptors.JSNumber.prototype;
dart.addTypeTests(_interceptors.JSNumber);
dart.addTypeCaches(_interceptors.JSNumber);
_interceptors.JSNumber[dart.implements] = () => [core.int, core.double];
dart.setMethodSignature(_interceptors.JSNumber, () => ({
  __proto__: dart.getMethods(_interceptors.JSNumber.__proto__),
  [$compareTo]: dart.fnType(core.int, [dart.nullable(core.Object)]),
  [$remainder]: dart.fnType(_interceptors.JSNumber, [core.num]),
  [$abs]: dart.fnType(_interceptors.JSNumber, []),
  [$toInt]: dart.fnType(core.int, []),
  [$truncate]: dart.fnType(core.int, []),
  [$ceil]: dart.fnType(core.int, []),
  [$floor]: dart.fnType(core.int, []),
  [$round]: dart.fnType(core.int, []),
  [$ceilToDouble]: dart.fnType(core.double, []),
  [$floorToDouble]: dart.fnType(core.double, []),
  [$roundToDouble]: dart.fnType(core.double, []),
  [$truncateToDouble]: dart.fnType(core.double, []),
  [$clamp]: dart.fnType(core.num, [core.num, core.num]),
  [$toDouble]: dart.fnType(core.double, []),
  [$toStringAsFixed]: dart.fnType(core.String, [core.int]),
  [$toStringAsExponential]: dart.fnType(core.String, [], [dart.nullable(core.int)]),
  [$toStringAsPrecision]: dart.fnType(core.String, [core.int]),
  [$toRadixString]: dart.fnType(core.String, [core.int]),
  [$_negate]: dart.fnType(_interceptors.JSNumber, []),
  [$plus]: dart.fnType(_interceptors.JSNumber, [core.num]),
  [$minus]: dart.fnType(_interceptors.JSNumber, [core.num]),
  [$divide]: dart.fnType(core.double, [core.num]),
  [$times]: dart.fnType(_interceptors.JSNumber, [core.num]),
  [$modulo]: dart.fnType(_interceptors.JSNumber, [core.num]),
  [_isInt32]: dart.fnType(core.bool, [core.num]),
  [$floorDivide]: dart.fnType(core.int, [core.num]),
  [_tdivSlow]: dart.fnType(core.int, [core.num]),
  [$leftShift]: dart.fnType(core.int, [core.num]),
  [_shlPositive]: dart.fnType(core.int, [core.num]),
  [$rightShift]: dart.fnType(core.int, [core.num]),
  [_shrOtherPositive]: dart.fnType(core.int, [core.num]),
  [_shrBothPositive]: dart.fnType(core.int, [core.num]),
  [$bitAnd]: dart.fnType(core.int, [core.num]),
  [$bitOr]: dart.fnType(core.int, [core.num]),
  [$bitXor]: dart.fnType(core.int, [core.num]),
  [$lessThan]: dart.fnType(core.bool, [core.num]),
  [$greaterThan]: dart.fnType(core.bool, [core.num]),
  [$lessOrEquals]: dart.fnType(core.bool, [core.num]),
  [$greaterOrEquals]: dart.fnType(core.bool, [core.num]),
  [$toUnsigned]: dart.fnType(core.int, [core.int]),
  [$toSigned]: dart.fnType(core.int, [core.int]),
  [$modPow]: dart.fnType(core.int, [core.int, core.int]),
  [$modInverse]: dart.fnType(core.int, [core.int]),
  [$gcd]: dart.fnType(core.int, [core.int]),
  [$bitNot]: dart.fnType(core.int, [])
}));
dart.setGetterSignature(_interceptors.JSNumber, () => ({
  __proto__: dart.getGetters(_interceptors.JSNumber.__proto__),
  [$isNegative]: core.bool,
  [$isNaN]: core.bool,
  [$isInfinite]: core.bool,
  [$isFinite]: core.bool,
  [$sign]: _interceptors.JSNumber,
  [$isEven]: core.bool,
  [$isOdd]: core.bool,
  [$bitLength]: core.int
}));
dart.setLibraryUri(_interceptors.JSNumber, L16);
dart.defineLazy(_interceptors.JSNumber, {
  /*_interceptors.JSNumber._MIN_INT32*/get _MIN_INT32() {
    return -2147483648;
  },
  /*_interceptors.JSNumber._MAX_INT32*/get _MAX_INT32() {
    return 2147483647;
  }
}, false);
dart.definePrimitiveHashCode(_interceptors.JSNumber.prototype);
dart.registerExtension("Number", _interceptors.JSNumber);
var _defaultSplit = dart.privateName(_interceptors, "_defaultSplit");
var C17;
_interceptors.JSString = class JSString extends _interceptors.Interceptor {
  [$codeUnitAt](index) {
    if (index == null) dart.argumentError(index);
    let len = this.length;
    if (index < 0 || index >= len) {
      dart.throw(new core.IndexError.new(index, this, "index", null, len));
    }
    return this.charCodeAt(index);
  }
  [$allMatches](string, start = 0) {
    if (string == null) dart.argumentError(string);
    if (start == null) dart.argumentError(start);
    let len = string.length;
    if (0 > start || start > len) {
      dart.throw(new core.RangeError.range(start, 0, len));
    }
    return _js_helper.allMatchesInStringUnchecked(this, string, start);
  }
  [$matchAsPrefix](string, start = 0) {
    if (string == null) dart.argumentError(string);
    if (start == null) dart.argumentError(start);
    let stringLength = string.length;
    if (start < 0 || start > stringLength) {
      dart.throw(new core.RangeError.range(start, 0, stringLength));
    }
    let thisLength = this.length;
    if (start + thisLength > stringLength) return null;
    for (let i = 0; i < thisLength; i = i + 1) {
      if (string[$codeUnitAt](start + i) !== this[$codeUnitAt](i)) {
        return null;
      }
    }
    return new _js_helper.StringMatch.new(start, string, this);
  }
  [$plus](other) {
    if (other == null) dart.argumentError(other);
    return this + other;
  }
  [$endsWith](other) {
    if (other == null) dart.argumentError(other);
    let otherLength = other.length;
    let thisLength = this.length;
    if (otherLength > thisLength) return false;
    return other === this[$substring](thisLength - otherLength);
  }
  [$replaceAll](from, to) {
    if (from == null) dart.nullFailed(L20, 67, 29, "from");
    if (to == null) dart.argumentError(to);
    return _js_helper.stringReplaceAllUnchecked(this, from, to);
  }
  [$replaceAllMapped](from, convert) {
    if (from == null) dart.nullFailed(L20, 72, 35, "from");
    if (convert == null) dart.nullFailed(L20, 72, 64, "convert");
    return this[$splitMapJoin](from, {onMatch: convert});
  }
  [$splitMapJoin](from, opts) {
    if (from == null) dart.nullFailed(L20, 77, 31, "from");
    let onMatch = opts && 'onMatch' in opts ? opts.onMatch : null;
    let onNonMatch = opts && 'onNonMatch' in opts ? opts.onNonMatch : null;
    return _js_helper.stringReplaceAllFuncUnchecked(this, from, onMatch, onNonMatch);
  }
  [$replaceFirst](from, to, startIndex = 0) {
    if (from == null) dart.nullFailed(L20, 83, 31, "from");
    if (to == null) dart.argumentError(to);
    if (startIndex == null) dart.argumentError(startIndex);
    core.RangeError.checkValueInInterval(startIndex, 0, this.length, "startIndex");
    return _js_helper.stringReplaceFirstUnchecked(this, from, to, startIndex);
  }
  [$replaceFirstMapped](from, replace, startIndex = 0) {
    if (from == null) dart.nullFailed(L20, 91, 15, "from");
    if (replace == null) dart.argumentError(replace);
    if (startIndex == null) dart.argumentError(startIndex);
    core.RangeError.checkValueInInterval(startIndex, 0, this.length, "startIndex");
    return _js_helper.stringReplaceFirstMappedUnchecked(this, from, replace, startIndex);
  }
  [$split](pattern) {
    if (pattern == null) dart.argumentError(pattern);
    if (typeof pattern == 'string') {
      return JSArrayOfString().of(this.split(pattern));
    } else if (_js_helper.JSSyntaxRegExp.is(pattern) && _js_helper.regExpCaptureCount(pattern) === 0) {
      let re = _js_helper.regExpGetNative(pattern);
      return JSArrayOfString().of(this.split(re));
    } else {
      return this[_defaultSplit](pattern);
    }
  }
  [$replaceRange](start, end, replacement) {
    if (start == null) dart.argumentError(start);
    if (replacement == null) dart.argumentError(replacement);
    let e = core.RangeError.checkValidRange(start, end, this.length);
    return _js_helper.stringReplaceRangeUnchecked(this, start, e, replacement);
  }
  [_defaultSplit](pattern) {
    if (pattern == null) dart.nullFailed(L20, 117, 38, "pattern");
    let result = JSArrayOfString().of([]);
    let start = 0;
    let length = 1;
    for (let match of pattern[$allMatches](this)) {
      let matchStart = match.start;
      let matchEnd = match.end;
      length = matchEnd - matchStart;
      if (length === 0 && start === matchStart) {
        continue;
      }
      let end = matchStart;
      result[$add](this[$substring](start, end));
      start = matchEnd;
    }
    if (start < this.length || length > 0) {
      result[$add](this[$substring](start));
    }
    return result;
  }
  [$startsWith](pattern, index = 0) {
    if (pattern == null) dart.nullFailed(L20, 148, 27, "pattern");
    if (index == null) dart.argumentError(index);
    let length = this.length;
    if (index < 0 || index > length) {
      dart.throw(new core.RangeError.range(index, 0, this.length));
    }
    if (typeof pattern == 'string') {
      let other = pattern;
      let otherLength = other.length;
      let endIndex = index + otherLength;
      if (endIndex > length) return false;
      return other === this.substring(index, endIndex);
    }
    return pattern[$matchAsPrefix](this, index) != null;
  }
  [$substring](startIndex, _endIndex = null) {
    let t23;
    if (startIndex == null) dart.argumentError(startIndex);
    let length = this.length;
    let endIndex = (t23 = _endIndex, t23 == null ? length : t23);
    if (startIndex < 0) dart.throw(new core.RangeError.value(startIndex));
    if (startIndex > dart.notNull(endIndex)) dart.throw(new core.RangeError.value(startIndex));
    if (dart.notNull(endIndex) > length) dart.throw(new core.RangeError.value(endIndex));
    return this.substring(startIndex, endIndex);
  }
  [$toLowerCase]() {
    return this.toLowerCase();
  }
  [$toUpperCase]() {
    return this.toUpperCase();
  }
  static _isWhitespace(codeUnit) {
    if (codeUnit < 256) {
      switch (codeUnit) {
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 32:
        case 133:
        case 160:
        {
          return true;
        }
        default:
        {
          return false;
        }
      }
    }
    switch (codeUnit) {
      case 5760:
      case 8192:
      case 8193:
      case 8194:
      case 8195:
      case 8196:
      case 8197:
      case 8198:
      case 8199:
      case 8200:
      case 8201:
      case 8202:
      case 8232:
      case 8233:
      case 8239:
      case 8287:
      case 12288:
      case 65279:
      {
        return true;
      }
      default:
      {
        return false;
      }
    }
  }
  static _skipLeadingWhitespace(string, index) {
    if (string == null) dart.nullFailed(L20, 247, 44, "string");
    if (index == null) dart.argumentError(index);
    let stringLength = string.length;
    while (index < stringLength) {
      let codeUnit = string[$codeUnitAt](index);
      if (codeUnit !== 32 && codeUnit !== 13 && !_interceptors.JSString._isWhitespace(codeUnit)) {
        break;
      }
      index = index + 1;
    }
    return index;
  }
  static _skipTrailingWhitespace(string, index) {
    if (string == null) dart.nullFailed(L20, 266, 45, "string");
    if (index == null) dart.argumentError(index);
    while (index > 0) {
      let codeUnit = string[$codeUnitAt](index - 1);
      if (codeUnit !== 32 && codeUnit !== 13 && !_interceptors.JSString._isWhitespace(codeUnit)) {
        break;
      }
      index = index - 1;
    }
    return index;
  }
  [$trim]() {
    let result = this.trim();
    let length = result.length;
    if (length === 0) return result;
    let firstCode = result[$codeUnitAt](0);
    let startIndex = 0;
    if (firstCode === 133) {
      startIndex = _interceptors.JSString._skipLeadingWhitespace(result, 1);
      if (startIndex === length) return "";
    }
    let endIndex = length;
    let lastCode = result[$codeUnitAt](endIndex - 1);
    if (lastCode === 133) {
      endIndex = _interceptors.JSString._skipTrailingWhitespace(result, endIndex - 1);
    }
    if (startIndex === 0 && endIndex === length) return result;
    return result.substring(startIndex, endIndex);
  }
  [$trimLeft]() {
    let result = null;
    let startIndex = 0;
    if (typeof this.trimLeft != "undefined") {
      result = this.trimLeft();
      if (result.length === 0) return result;
      let firstCode = result[$codeUnitAt](0);
      if (firstCode === 133) {
        startIndex = _interceptors.JSString._skipLeadingWhitespace(result, 1);
      }
    } else {
      result = this;
      startIndex = _interceptors.JSString._skipLeadingWhitespace(this, 0);
    }
    if (startIndex === 0) return result;
    if (startIndex === result.length) return "";
    return result.substring(startIndex);
  }
  [$trimRight]() {
    let result = null;
    let endIndex = 0;
    if (typeof this.trimRight != "undefined") {
      result = this.trimRight();
      endIndex = result.length;
      if (endIndex === 0) return result;
      let lastCode = result[$codeUnitAt](endIndex - 1);
      if (lastCode === 133) {
        endIndex = _interceptors.JSString._skipTrailingWhitespace(result, endIndex - 1);
      }
    } else {
      result = this;
      endIndex = _interceptors.JSString._skipTrailingWhitespace(this, this.length);
    }
    if (endIndex === result.length) return result;
    if (endIndex === 0) return "";
    return result.substring(0, endIndex);
  }
  [$times](times) {
    if (times == null) dart.argumentError(times);
    if (0 >= times) return "";
    if (times === 1 || this.length === 0) return this;
    if (times !== times >>> 0) {
      dart.throw(C17 || CT.C17);
    }
    let result = "";
    let s = this;
    while (true) {
      if ((times & 1) === 1) result = s + result;
      times = times >>> 1;
      if (times === 0) break;
      s = s + s;
    }
    return result;
  }
  [$padLeft](width, padding = " ") {
    if (width == null) dart.argumentError(width);
    if (padding == null) dart.nullFailed(L20, 390, 48, "padding");
    let delta = width - this.length;
    if (delta <= 0) return this;
    return padding[$times](delta) + this;
  }
  [$padRight](width, padding = " ") {
    if (width == null) dart.argumentError(width);
    if (padding == null) dart.nullFailed(L20, 397, 49, "padding");
    let delta = width - this.length;
    if (delta <= 0) return this;
    return this[$plus](padding[$times](delta));
  }
  get [$codeUnits]() {
    return new _internal.CodeUnits.new(this);
  }
  get [$runes]() {
    return new core.Runes.new(this);
  }
  [$indexOf](pattern, start = 0) {
    if (pattern == null) dart.argumentError(pattern);
    if (start == null) dart.argumentError(start);
    if (start < 0 || start > this.length) {
      dart.throw(new core.RangeError.range(start, 0, this.length));
    }
    if (typeof pattern == 'string') {
      return _js_helper.stringIndexOfStringUnchecked(this, pattern, start);
    }
    if (_js_helper.JSSyntaxRegExp.is(pattern)) {
      let re = pattern;
      let match = _js_helper.firstMatchAfter(re, this, start);
      return match == null ? -1 : match.start;
    }
    let length = this.length;
    for (let i = start; i <= length; i = i + 1) {
      if (pattern[$matchAsPrefix](this, i) != null) return i;
    }
    return -1;
  }
  [$lastIndexOf](pattern, _start = null) {
    let t23;
    if (pattern == null) dart.argumentError(pattern);
    let length = this.length;
    let start = (t23 = _start, t23 == null ? length : t23);
    if (dart.notNull(start) < 0 || dart.notNull(start) > length) {
      dart.throw(new core.RangeError.range(start, 0, length));
    }
    if (typeof pattern == 'string') {
      let other = pattern;
      if (dart.notNull(start) + other.length > length) {
        start = length - other.length;
      }
      return _js_helper.stringLastIndexOfUnchecked(this, other, start);
    }
    for (let i = start; dart.notNull(i) >= 0; i = dart.notNull(i) - 1) {
      if (pattern[$matchAsPrefix](this, i) != null) return i;
    }
    return -1;
  }
  [$contains](other, startIndex = 0) {
    if (other == null) dart.argumentError(other);
    if (startIndex == null) dart.argumentError(startIndex);
    if (startIndex < 0 || startIndex > this.length) {
      dart.throw(new core.RangeError.range(startIndex, 0, this.length));
    }
    return _js_helper.stringContainsUnchecked(this, other, startIndex);
  }
  get [$isEmpty]() {
    return this.length === 0;
  }
  get [$isNotEmpty]() {
    return !this[$isEmpty];
  }
  [$compareTo](other) {
    core.String.as(other);
    if (other == null) dart.argumentError(other);
    return this[$_equals](other) ? 0 : this < other ? -1 : 1;
  }
  [$toString]() {
    return this;
  }
  get [$hashCode]() {
    let hash = 0;
    let length = this.length;
    for (let i = 0; i < length; i = i + 1) {
      hash = 536870911 & hash + this.charCodeAt(i);
      hash = 536870911 & hash + ((524287 & hash) << 10);
      hash = hash ^ hash >> 6;
    }
    hash = 536870911 & hash + ((67108863 & hash) << 3);
    hash = hash ^ hash >> 11;
    return 536870911 & hash + ((16383 & hash) << 15);
  }
  get [$runtimeType]() {
    return dart.wrapType(core.String);
  }
  get [$length]() {
    return this.length;
  }
  [$_get](index) {
    if (index == null) dart.argumentError(index);
    if (index >= this.length || index < 0) {
      dart.throw(_js_helper.diagnoseIndexError(this, index));
    }
    return this[index];
  }
};
(_interceptors.JSString.new = function() {
  _interceptors.JSString.__proto__.new.call(this);
  ;
}).prototype = _interceptors.JSString.prototype;
dart.addTypeTests(_interceptors.JSString);
dart.addTypeCaches(_interceptors.JSString);
_interceptors.JSString[dart.implements] = () => [core.String, _interceptors.JSIndexable$(core.String)];
dart.setMethodSignature(_interceptors.JSString, () => ({
  __proto__: dart.getMethods(_interceptors.JSString.__proto__),
  [$codeUnitAt]: dart.fnType(core.int, [core.int]),
  [$allMatches]: dart.fnType(core.Iterable$(core.Match), [core.String], [core.int]),
  [$matchAsPrefix]: dart.fnType(dart.nullable(core.Match), [core.String], [core.int]),
  [$plus]: dart.fnType(core.String, [core.String]),
  [$endsWith]: dart.fnType(core.bool, [core.String]),
  [$replaceAll]: dart.fnType(core.String, [core.Pattern, core.String]),
  [$replaceAllMapped]: dart.fnType(core.String, [core.Pattern, dart.fnType(core.String, [core.Match])]),
  [$splitMapJoin]: dart.fnType(core.String, [core.Pattern], {onMatch: dart.nullable(dart.fnType(core.String, [core.Match])), onNonMatch: dart.nullable(dart.fnType(core.String, [core.String]))}, {}),
  [$replaceFirst]: dart.fnType(core.String, [core.Pattern, core.String], [core.int]),
  [$replaceFirstMapped]: dart.fnType(core.String, [core.Pattern, dart.fnType(core.String, [core.Match])], [core.int]),
  [$split]: dart.fnType(core.List$(core.String), [core.Pattern]),
  [$replaceRange]: dart.fnType(core.String, [core.int, dart.nullable(core.int), core.String]),
  [_defaultSplit]: dart.fnType(core.List$(core.String), [core.Pattern]),
  [$startsWith]: dart.fnType(core.bool, [core.Pattern], [core.int]),
  [$substring]: dart.fnType(core.String, [core.int], [dart.nullable(core.int)]),
  [$toLowerCase]: dart.fnType(core.String, []),
  [$toUpperCase]: dart.fnType(core.String, []),
  [$trim]: dart.fnType(core.String, []),
  [$trimLeft]: dart.fnType(core.String, []),
  [$trimRight]: dart.fnType(core.String, []),
  [$times]: dart.fnType(core.String, [core.int]),
  [$padLeft]: dart.fnType(core.String, [core.int], [core.String]),
  [$padRight]: dart.fnType(core.String, [core.int], [core.String]),
  [$indexOf]: dart.fnType(core.int, [core.Pattern], [core.int]),
  [$lastIndexOf]: dart.fnType(core.int, [core.Pattern], [dart.nullable(core.int)]),
  [$contains]: dart.fnType(core.bool, [core.Pattern], [core.int]),
  [$compareTo]: dart.fnType(core.int, [dart.nullable(core.Object)]),
  [$_get]: dart.fnType(core.String, [core.int])
}));
dart.setGetterSignature(_interceptors.JSString, () => ({
  __proto__: dart.getGetters(_interceptors.JSString.__proto__),
  [$codeUnits]: core.List$(core.int),
  [$runes]: core.Runes,
  [$isEmpty]: core.bool,
  [$isNotEmpty]: core.bool,
  [$length]: core.int
}));
dart.setLibraryUri(_interceptors.JSString, L16);
dart.definePrimitiveHashCode(_interceptors.JSString.prototype);
dart.registerExtension("String", _interceptors.JSString);
_interceptors.getInterceptor = function getInterceptor(obj) {
  return obj;
};
_interceptors.findInterceptorConstructorForType = function findInterceptorConstructorForType(type) {
};
_interceptors.findConstructorForNativeSubclassType = function findConstructorForNativeSubclassType(type, name) {
  if (name == null) dart.nullFailed(L17, 231, 57, "name");
};
_interceptors.getNativeInterceptor = function getNativeInterceptor(object) {
};
_interceptors.setDispatchProperty = function setDispatchProperty(object, value) {
};
dart.defineLazy(_interceptors, {
  /*_interceptors.jsNull*/get jsNull() {
    return new _interceptors.JSNull.new();
  }
}, false);
var _string$ = dart.privateName(_internal, "_string");
var _closeGap = dart.privateName(collection, "_closeGap");
var _filter = dart.privateName(collection, "_filter");
var C18;
const _is_ListMixin_default = Symbol('_is_ListMixin_default');
collection.ListMixin$ = dart.generic(E => {
  var ListIteratorOfE = () => (ListIteratorOfE = dart.constFn(_internal.ListIterator$(E)))();
  var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
  var FollowedByIterableOfE = () => (FollowedByIterableOfE = dart.constFn(_internal.FollowedByIterable$(E)))();
  var VoidToE = () => (VoidToE = dart.constFn(dart.fnType(E, [])))();
  var VoidToNE = () => (VoidToNE = dart.constFn(dart.nullable(VoidToE())))();
  var ETodynamic = () => (ETodynamic = dart.constFn(dart.fnType(dart.dynamic, [E])))();
  var WhereIterableOfE = () => (WhereIterableOfE = dart.constFn(_internal.WhereIterable$(E)))();
  var EAndEToE = () => (EAndEToE = dart.constFn(dart.fnType(E, [E, E])))();
  var SubListIterableOfE = () => (SubListIterableOfE = dart.constFn(_internal.SubListIterable$(E)))();
  var SkipWhileIterableOfE = () => (SkipWhileIterableOfE = dart.constFn(_internal.SkipWhileIterable$(E)))();
  var TakeWhileIterableOfE = () => (TakeWhileIterableOfE = dart.constFn(_internal.TakeWhileIterable$(E)))();
  var ListOfE = () => (ListOfE = dart.constFn(core.List$(E)))();
  var _HashSetOfE = () => (_HashSetOfE = dart.constFn(collection._HashSet$(E)))();
  var JSArrayOfE = () => (JSArrayOfE = dart.constFn(_interceptors.JSArray$(E)))();
  var ListMapViewOfE = () => (ListMapViewOfE = dart.constFn(_internal.ListMapView$(E)))();
  var EN = () => (EN = dart.constFn(dart.nullable(E)))();
  var ReversedListIterableOfE = () => (ReversedListIterableOfE = dart.constFn(_internal.ReversedListIterable$(E)))();
  class ListMixin extends core.Object {
    get iterator() {
      return new (ListIteratorOfE()).new(this);
    }
    [Symbol.iterator]() {
      return new dart.JsIterator(this[$iterator]);
    }
    elementAt(index) {
      if (index == null) dart.nullFailed(L22, 78, 19, "index");
      return this[$_get](index);
    }
    followedBy(other) {
      IterableOfE().as(other);
      if (other == null) dart.nullFailed(L22, 80, 38, "other");
      return FollowedByIterableOfE().firstEfficient(this, other);
    }
    forEach(action) {
      if (action == null) dart.nullFailed(L22, 83, 21, "action");
      let length = this[$length];
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        action(this[$_get](i));
        if (length != this[$length]) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
    }
    get isEmpty() {
      return this[$length] === 0;
    }
    get isNotEmpty() {
      return !dart.test(this[$isEmpty]);
    }
    get first() {
      if (this[$length] === 0) dart.throw(_internal.IterableElementError.noElement());
      return this[$_get](0);
    }
    set first(value) {
      E.as(value);
      if (this[$length] === 0) dart.throw(_internal.IterableElementError.noElement());
      this[$_set](0, value);
    }
    get last() {
      if (this[$length] === 0) dart.throw(_internal.IterableElementError.noElement());
      return this[$_get](dart.notNull(this[$length]) - 1);
    }
    set last(value) {
      E.as(value);
      if (this[$length] === 0) dart.throw(_internal.IterableElementError.noElement());
      this[$_set](dart.notNull(this[$length]) - 1, value);
    }
    get single() {
      if (this[$length] === 0) dart.throw(_internal.IterableElementError.noElement());
      if (dart.notNull(this[$length]) > 1) dart.throw(_internal.IterableElementError.tooMany());
      return this[$_get](0);
    }
    contains(element) {
      let length = this[$length];
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        if (dart.equals(this[$_get](i), element)) return true;
        if (length != this[$length]) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
      return false;
    }
    every(test) {
      if (test == null) dart.nullFailed(L22, 135, 19, "test");
      let length = this[$length];
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        if (!dart.test(test(this[$_get](i)))) return false;
        if (length != this[$length]) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
      return true;
    }
    any(test) {
      if (test == null) dart.nullFailed(L22, 146, 17, "test");
      let length = this[$length];
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        if (dart.test(test(this[$_get](i)))) return true;
        if (length != this[$length]) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
      return false;
    }
    firstWhere(test, opts) {
      if (test == null) dart.nullFailed(L22, 157, 21, "test");
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToNE().as(orElse);
      let length = this[$length];
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        let element = this[$_get](i);
        if (dart.test(test(element))) return element;
        if (length != this[$length]) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    lastWhere(test, opts) {
      if (test == null) dart.nullFailed(L22, 170, 20, "test");
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToNE().as(orElse);
      let length = this[$length];
      for (let i = dart.notNull(length) - 1; i >= 0; i = i - 1) {
        let element = this[$_get](i);
        if (dart.test(test(element))) return element;
        if (length != this[$length]) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    singleWhere(test, opts) {
      if (test == null) dart.nullFailed(L22, 183, 22, "test");
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToNE().as(orElse);
      let length = this[$length];
      let match = null;
      let match$35isSet = false;
      function match$35get() {
        return match$35isSet ? match : dart.throw(new _internal.LateInitializationErrorImpl.new("Local 'match' has not been initialized."));
      }
      dart.fn(match$35get, VoidToE());
      function match$35set(t25) {
        match$35isSet = true;
        return match = t25;
      }
      dart.fn(match$35set, ETodynamic());
      let matchFound = false;
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        let element = this[$_get](i);
        if (dart.test(test(element))) {
          if (matchFound) {
            dart.throw(_internal.IterableElementError.tooMany());
          }
          matchFound = true;
          match$35set(element);
        }
        if (length != this[$length]) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
      if (matchFound) return match$35get();
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    join(separator = "") {
      let t27;
      if (separator == null) dart.nullFailed(L22, 205, 23, "separator");
      if (this[$length] === 0) return "";
      let buffer = (t27 = new core.StringBuffer.new(), (() => {
        t27.writeAll(this, separator);
        return t27;
      })());
      return dart.toString(buffer);
    }
    where(test) {
      if (test == null) dart.nullFailed(L22, 211, 26, "test");
      return new (WhereIterableOfE()).new(this, test);
    }
    whereType(T) {
      return new (_internal.WhereTypeIterable$(T)).new(this);
    }
    map(T, f) {
      if (f == null) dart.nullFailed(L22, 215, 24, "f");
      return new (_internal.MappedListIterable$(E, T)).new(this, f);
    }
    expand(T, f) {
      if (f == null) dart.nullFailed(L22, 217, 37, "f");
      return new (_internal.ExpandIterable$(E, T)).new(this, f);
    }
    reduce(combine) {
      EAndEToE().as(combine);
      if (combine == null) dart.nullFailed(L22, 220, 14, "combine");
      let length = this[$length];
      if (length === 0) dart.throw(_internal.IterableElementError.noElement());
      let value = this[$_get](0);
      for (let i = 1; i < dart.notNull(length); i = i + 1) {
        value = combine(value, this[$_get](i));
        if (length != this[$length]) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
      return value;
    }
    fold(T, initialValue, combine) {
      if (combine == null) dart.nullFailed(L22, 233, 31, "combine");
      let value = initialValue;
      let length = this[$length];
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        value = combine(value, this[$_get](i));
        if (length != this[$length]) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
      return value;
    }
    skip(count) {
      if (count == null) dart.nullFailed(L22, 245, 24, "count");
      return new (SubListIterableOfE()).new(this, count, null);
    }
    skipWhile(test) {
      if (test == null) dart.nullFailed(L22, 247, 30, "test");
      return new (SkipWhileIterableOfE()).new(this, test);
    }
    take(count) {
      if (count == null) dart.nullFailed(L22, 251, 24, "count");
      return new (SubListIterableOfE()).new(this, 0, count);
    }
    takeWhile(test) {
      if (test == null) dart.nullFailed(L22, 253, 30, "test");
      return new (TakeWhileIterableOfE()).new(this, test);
    }
    toList(opts) {
      let growable = opts && 'growable' in opts ? opts.growable : true;
      if (growable == null) dart.nullFailed(L22, 257, 24, "growable");
      if (dart.test(this[$isEmpty])) return ListOfE().empty({growable: growable});
      let first = this[$_get](0);
      let result = ListOfE().filled(this[$length], first, {growable: growable});
      for (let i = 1; i < dart.notNull(this[$length]); i = i + 1) {
        result[$_set](i, this[$_get](i));
      }
      return result;
    }
    toSet() {
      let result = new (_HashSetOfE()).new();
      for (let i = 0; i < dart.notNull(this[$length]); i = i + 1) {
        result.add(this[$_get](i));
      }
      return result;
    }
    add(element) {
      let t27;
      E.as(element);
      this[$_set]((t27 = this[$length], this[$length] = dart.notNull(t27) + 1, t27), element);
    }
    addAll(iterable) {
      IterableOfE().as(iterable);
      if (iterable == null) dart.nullFailed(L22, 281, 27, "iterable");
      let i = this[$length];
      for (let element of iterable) {
        if (!(this[$length] == i || dart.throw(new core.ConcurrentModificationError.new(this)))) dart.assertFailed(null, L22, 284, 14, "this.length == i || (throw ConcurrentModificationError(this))");
        this[$add](element);
        i = dart.notNull(i) + 1;
      }
    }
    remove(element) {
      for (let i = 0; i < dart.notNull(this[$length]); i = i + 1) {
        if (dart.equals(this[$_get](i), element)) {
          this[_closeGap](i, i + 1);
          return true;
        }
      }
      return false;
    }
    [_closeGap](start, end) {
      if (start == null) dart.nullFailed(L22, 302, 22, "start");
      if (end == null) dart.nullFailed(L22, 302, 33, "end");
      let length = this[$length];
      if (!(0 <= dart.notNull(start))) dart.assertFailed(null, L22, 304, 12, "0 <= start");
      if (!(dart.notNull(start) < dart.notNull(end))) dart.assertFailed(null, L22, 305, 12, "start < end");
      if (!(dart.notNull(end) <= dart.notNull(length))) dart.assertFailed(null, L22, 306, 12, "end <= length");
      let size = dart.notNull(end) - dart.notNull(start);
      for (let i = end; dart.notNull(i) < dart.notNull(length); i = dart.notNull(i) + 1) {
        this[$_set](dart.notNull(i) - size, this[$_get](i));
      }
      this[$length] = dart.notNull(length) - size;
    }
    removeWhere(test) {
      if (test == null) dart.nullFailed(L22, 314, 25, "test");
      this[_filter](test, false);
    }
    retainWhere(test) {
      if (test == null) dart.nullFailed(L22, 318, 25, "test");
      this[_filter](test, true);
    }
    [_filter](test, retainMatching) {
      if (test == null) dart.nullFailed(L22, 322, 21, "test");
      if (retainMatching == null) dart.nullFailed(L22, 322, 43, "retainMatching");
      let retained = JSArrayOfE().of([]);
      let length = this[$length];
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        let element = this[$_get](i);
        if (dart.equals(test(element), retainMatching)) {
          retained[$add](element);
        }
        if (length != this[$length]) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
      if (retained[$length] != this[$length]) {
        this[$setRange](0, retained[$length], retained);
        this[$length] = retained[$length];
      }
    }
    clear() {
      this[$length] = 0;
    }
    cast(R) {
      return core.List.castFrom(E, R, this);
    }
    removeLast() {
      if (this[$length] === 0) {
        dart.throw(_internal.IterableElementError.noElement());
      }
      let result = this[$_get](dart.notNull(this[$length]) - 1);
      this[$length] = dart.notNull(this[$length]) - 1;
      return result;
    }
    sort(compare = null) {
      let t27;
      _internal.Sort.sort(E, this, (t27 = compare, t27 == null ? C18 || CT.C18 : t27));
    }
    static _compareAny(a, b) {
      return core.Comparable.compare(core.Comparable.as(a), core.Comparable.as(b));
    }
    shuffle(random = null) {
      random == null ? random = math.Random.new() : null;
      if (random == null) dart.throw("!");
      let length = this[$length];
      while (dart.notNull(length) > 1) {
        let pos = random.nextInt(length);
        length = dart.notNull(length) - 1;
        let tmp = this[$_get](length);
        this[$_set](length, this[$_get](pos));
        this[$_set](pos, tmp);
      }
    }
    asMap() {
      return new (ListMapViewOfE()).new(this);
    }
    ['+'](other) {
      ListOfE().as(other);
      if (other == null) dart.nullFailed(L22, 380, 30, "other");
      return (() => {
        let t27 = JSArrayOfE().of([]);
        for (let t28 of this)
          t27[$add](t28);
        for (let t29 of other)
          t27[$add](t29);
        return t27;
      })();
    }
    sublist(start, end = null) {
      if (start == null) dart.nullFailed(L22, 382, 23, "start");
      let listLength = this[$length];
      end == null ? end = listLength : null;
      if (end == null) dart.throw("!");
      core.RangeError.checkValidRange(start, end, listLength);
      return ListOfE().from(this[$getRange](start, end));
    }
    getRange(start, end) {
      if (start == null) dart.nullFailed(L22, 391, 28, "start");
      if (end == null) dart.nullFailed(L22, 391, 39, "end");
      core.RangeError.checkValidRange(start, end, this[$length]);
      return new (SubListIterableOfE()).new(this, start, end);
    }
    removeRange(start, end) {
      if (start == null) dart.nullFailed(L22, 396, 24, "start");
      if (end == null) dart.nullFailed(L22, 396, 35, "end");
      core.RangeError.checkValidRange(start, end, this[$length]);
      if (dart.notNull(end) > dart.notNull(start)) {
        this[_closeGap](start, end);
      }
    }
    fillRange(start, end, fill = null) {
      if (start == null) dart.nullFailed(L22, 403, 22, "start");
      if (end == null) dart.nullFailed(L22, 403, 33, "end");
      EN().as(fill);
      let value = E.as(fill);
      core.RangeError.checkValidRange(start, end, this[$length]);
      for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
        this[$_set](i, value);
      }
    }
    setRange(start, end, iterable, skipCount = 0) {
      if (start == null) dart.nullFailed(L22, 413, 21, "start");
      if (end == null) dart.nullFailed(L22, 413, 32, "end");
      IterableOfE().as(iterable);
      if (iterable == null) dart.nullFailed(L22, 413, 49, "iterable");
      if (skipCount == null) dart.nullFailed(L22, 413, 64, "skipCount");
      core.RangeError.checkValidRange(start, end, this[$length]);
      let length = dart.notNull(end) - dart.notNull(start);
      if (length === 0) return;
      core.RangeError.checkNotNegative(skipCount, "skipCount");
      let otherList = null;
      let otherStart = null;
      if (ListOfE().is(iterable)) {
        otherList = iterable;
        otherStart = skipCount;
      } else {
        otherList = iterable[$skip](skipCount)[$toList]({growable: false});
        otherStart = 0;
      }
      if (dart.notNull(otherStart) + length > dart.notNull(otherList[$length])) {
        dart.throw(_internal.IterableElementError.tooFew());
      }
      if (dart.notNull(otherStart) < dart.notNull(start)) {
        for (let i = length - 1; i >= 0; i = i - 1) {
          this[$_set](dart.notNull(start) + i, otherList[$_get](dart.notNull(otherStart) + i));
        }
      } else {
        for (let i = 0; i < length; i = i + 1) {
          this[$_set](dart.notNull(start) + i, otherList[$_get](dart.notNull(otherStart) + i));
        }
      }
    }
    replaceRange(start, end, newContents) {
      if (start == null) dart.nullFailed(L22, 444, 25, "start");
      if (end == null) dart.nullFailed(L22, 444, 36, "end");
      IterableOfE().as(newContents);
      if (newContents == null) dart.nullFailed(L22, 444, 53, "newContents");
      core.RangeError.checkValidRange(start, end, this[$length]);
      if (start == this[$length]) {
        this[$addAll](newContents);
        return;
      }
      if (!_internal.EfficientLengthIterable.is(newContents)) {
        newContents = newContents[$toList]();
      }
      let removeLength = dart.notNull(end) - dart.notNull(start);
      let insertLength = newContents[$length];
      if (removeLength >= dart.notNull(insertLength)) {
        let insertEnd = dart.notNull(start) + dart.notNull(insertLength);
        this[$setRange](start, insertEnd, newContents);
        if (removeLength > dart.notNull(insertLength)) {
          this[_closeGap](insertEnd, end);
        }
      } else if (end == this[$length]) {
        let i = start;
        for (let element of newContents) {
          if (dart.notNull(i) < dart.notNull(end)) {
            this[$_set](i, element);
          } else {
            this[$add](element);
          }
          i = dart.notNull(i) + 1;
        }
      } else {
        let delta = dart.notNull(insertLength) - removeLength;
        let oldLength = this[$length];
        let insertEnd = dart.notNull(start) + dart.notNull(insertLength);
        for (let i = dart.notNull(oldLength) - delta; i < dart.notNull(oldLength); i = i + 1) {
          this[$add](this[$_get](i > 0 ? i : 0));
        }
        if (insertEnd < dart.notNull(oldLength)) {
          this[$setRange](insertEnd, oldLength, this, end);
        }
        this[$setRange](start, insertEnd, newContents);
      }
    }
    indexOf(element, start = 0) {
      if (start == null) dart.nullFailed(L22, 485, 37, "start");
      if (dart.notNull(start) < 0) start = 0;
      for (let i = start; dart.notNull(i) < dart.notNull(this[$length]); i = dart.notNull(i) + 1) {
        if (dart.equals(this[$_get](i), element)) return i;
      }
      return -1;
    }
    indexWhere(test, start = 0) {
      if (test == null) dart.nullFailed(L22, 493, 23, "test");
      if (start == null) dart.nullFailed(L22, 493, 45, "start");
      if (dart.notNull(start) < 0) start = 0;
      for (let i = start; dart.notNull(i) < dart.notNull(this[$length]); i = dart.notNull(i) + 1) {
        if (dart.test(test(this[$_get](i)))) return i;
      }
      return -1;
    }
    lastIndexOf(element, start = null) {
      if (start == null || dart.notNull(start) >= dart.notNull(this[$length])) start = dart.notNull(this[$length]) - 1;
      if (start == null) dart.throw("!");
      for (let i = start; dart.notNull(i) >= 0; i = dart.notNull(i) - 1) {
        if (dart.equals(this[$_get](i), element)) return i;
      }
      return -1;
    }
    lastIndexWhere(test, start = null) {
      if (test == null) dart.nullFailed(L22, 513, 27, "test");
      if (start == null || dart.notNull(start) >= dart.notNull(this[$length])) start = dart.notNull(this[$length]) - 1;
      if (start == null) dart.throw("!");
      for (let i = start; dart.notNull(i) >= 0; i = dart.notNull(i) - 1) {
        if (dart.test(test(this[$_get](i)))) return i;
      }
      return -1;
    }
    insert(index, element) {
      if (index == null) dart.nullFailed(L22, 525, 19, "index");
      E.as(element);
      core.ArgumentError.checkNotNull(core.int, index, "index");
      let length = this[$length];
      core.RangeError.checkValueInInterval(index, 0, length, "index");
      this[$add](element);
      if (index != length) {
        this[$setRange](dart.notNull(index) + 1, dart.notNull(length) + 1, this, index);
        this[$_set](index, element);
      }
    }
    removeAt(index) {
      if (index == null) dart.nullFailed(L22, 536, 18, "index");
      let result = this[$_get](index);
      this[_closeGap](index, dart.notNull(index) + 1);
      return result;
    }
    insertAll(index, iterable) {
      if (index == null) dart.nullFailed(L22, 542, 22, "index");
      IterableOfE().as(iterable);
      if (iterable == null) dart.nullFailed(L22, 542, 41, "iterable");
      core.RangeError.checkValueInInterval(index, 0, this[$length], "index");
      if (index == this[$length]) {
        this[$addAll](iterable);
        return;
      }
      if (!_internal.EfficientLengthIterable.is(iterable) || iterable === this) {
        iterable = iterable[$toList]();
      }
      let insertionLength = iterable[$length];
      if (insertionLength === 0) {
        return;
      }
      let oldLength = this[$length];
      for (let i = dart.notNull(oldLength) - dart.notNull(insertionLength); i < dart.notNull(oldLength); i = i + 1) {
        this[$add](this[$_get](i > 0 ? i : 0));
      }
      if (iterable[$length] != insertionLength) {
        this[$length] = dart.notNull(this[$length]) - dart.notNull(insertionLength);
        dart.throw(new core.ConcurrentModificationError.new(iterable));
      }
      let oldCopyStart = dart.notNull(index) + dart.notNull(insertionLength);
      if (oldCopyStart < dart.notNull(oldLength)) {
        this[$setRange](oldCopyStart, oldLength, this, index);
      }
      this[$setAll](index, iterable);
    }
    setAll(index, iterable) {
      let t30;
      if (index == null) dart.nullFailed(L22, 575, 19, "index");
      IterableOfE().as(iterable);
      if (iterable == null) dart.nullFailed(L22, 575, 38, "iterable");
      if (core.List.is(iterable)) {
        this[$setRange](index, dart.notNull(index) + dart.notNull(iterable[$length]), iterable);
      } else {
        for (let element of iterable) {
          this[$_set]((t30 = index, index = dart.notNull(t30) + 1, t30), element);
        }
      }
    }
    get reversed() {
      return new (ReversedListIterableOfE()).new(this);
    }
    toString() {
      return collection.IterableBase.iterableToFullString(this, "[", "]");
    }
  }
  (ListMixin.new = function() {
    ;
  }).prototype = ListMixin.prototype;
  ListMixin.prototype[dart.isList] = true;
  dart.addTypeTests(ListMixin);
  ListMixin.prototype[_is_ListMixin_default] = true;
  dart.addTypeCaches(ListMixin);
  ListMixin[dart.implements] = () => [core.List$(E)];
  dart.setMethodSignature(ListMixin, () => ({
    __proto__: dart.getMethods(ListMixin.__proto__),
    elementAt: dart.fnType(E, [core.int]),
    [$elementAt]: dart.fnType(E, [core.int]),
    followedBy: dart.fnType(core.Iterable$(E), [dart.nullable(core.Object)]),
    [$followedBy]: dart.fnType(core.Iterable$(E), [dart.nullable(core.Object)]),
    forEach: dart.fnType(dart.void, [dart.fnType(dart.void, [E])]),
    [$forEach]: dart.fnType(dart.void, [dart.fnType(dart.void, [E])]),
    contains: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    [$contains]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    every: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
    [$every]: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
    any: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
    [$any]: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
    firstWhere: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
    [$firstWhere]: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
    lastWhere: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
    [$lastWhere]: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
    singleWhere: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
    [$singleWhere]: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
    join: dart.fnType(core.String, [], [core.String]),
    [$join]: dart.fnType(core.String, [], [core.String]),
    where: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
    [$where]: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
    whereType: dart.gFnType(T => [core.Iterable$(T), []], T => [dart.nullable(core.Object)]),
    [$whereType]: dart.gFnType(T => [core.Iterable$(T), []], T => [dart.nullable(core.Object)]),
    map: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(T, [E])]], T => [dart.nullable(core.Object)]),
    [$map]: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(T, [E])]], T => [dart.nullable(core.Object)]),
    expand: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(core.Iterable$(T), [E])]], T => [dart.nullable(core.Object)]),
    [$expand]: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(core.Iterable$(T), [E])]], T => [dart.nullable(core.Object)]),
    reduce: dart.fnType(E, [dart.nullable(core.Object)]),
    [$reduce]: dart.fnType(E, [dart.nullable(core.Object)]),
    fold: dart.gFnType(T => [T, [T, dart.fnType(T, [T, E])]], T => [dart.nullable(core.Object)]),
    [$fold]: dart.gFnType(T => [T, [T, dart.fnType(T, [T, E])]], T => [dart.nullable(core.Object)]),
    skip: dart.fnType(core.Iterable$(E), [core.int]),
    [$skip]: dart.fnType(core.Iterable$(E), [core.int]),
    skipWhile: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
    [$skipWhile]: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
    take: dart.fnType(core.Iterable$(E), [core.int]),
    [$take]: dart.fnType(core.Iterable$(E), [core.int]),
    takeWhile: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
    [$takeWhile]: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
    toList: dart.fnType(core.List$(E), [], {growable: core.bool}, {}),
    [$toList]: dart.fnType(core.List$(E), [], {growable: core.bool}, {}),
    toSet: dart.fnType(core.Set$(E), []),
    [$toSet]: dart.fnType(core.Set$(E), []),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    [$add]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    addAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    [$addAll]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    remove: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    [$remove]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    [_closeGap]: dart.fnType(dart.void, [core.int, core.int]),
    removeWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
    [$removeWhere]: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
    retainWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
    [$retainWhere]: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
    [_filter]: dart.fnType(dart.void, [dart.fnType(core.bool, [E]), core.bool]),
    clear: dart.fnType(dart.void, []),
    [$clear]: dart.fnType(dart.void, []),
    cast: dart.gFnType(R => [core.List$(R), []], R => [dart.nullable(core.Object)]),
    [$cast]: dart.gFnType(R => [core.List$(R), []], R => [dart.nullable(core.Object)]),
    removeLast: dart.fnType(E, []),
    [$removeLast]: dart.fnType(E, []),
    sort: dart.fnType(dart.void, [], [dart.nullable(dart.fnType(core.int, [E, E]))]),
    [$sort]: dart.fnType(dart.void, [], [dart.nullable(dart.fnType(core.int, [E, E]))]),
    shuffle: dart.fnType(dart.void, [], [dart.nullable(math.Random)]),
    [$shuffle]: dart.fnType(dart.void, [], [dart.nullable(math.Random)]),
    asMap: dart.fnType(core.Map$(core.int, E), []),
    [$asMap]: dart.fnType(core.Map$(core.int, E), []),
    '+': dart.fnType(core.List$(E), [dart.nullable(core.Object)]),
    [$plus]: dart.fnType(core.List$(E), [dart.nullable(core.Object)]),
    sublist: dart.fnType(core.List$(E), [core.int], [dart.nullable(core.int)]),
    [$sublist]: dart.fnType(core.List$(E), [core.int], [dart.nullable(core.int)]),
    getRange: dart.fnType(core.Iterable$(E), [core.int, core.int]),
    [$getRange]: dart.fnType(core.Iterable$(E), [core.int, core.int]),
    removeRange: dart.fnType(dart.void, [core.int, core.int]),
    [$removeRange]: dart.fnType(dart.void, [core.int, core.int]),
    fillRange: dart.fnType(dart.void, [core.int, core.int], [dart.nullable(core.Object)]),
    [$fillRange]: dart.fnType(dart.void, [core.int, core.int], [dart.nullable(core.Object)]),
    setRange: dart.fnType(dart.void, [core.int, core.int, dart.nullable(core.Object)], [core.int]),
    [$setRange]: dart.fnType(dart.void, [core.int, core.int, dart.nullable(core.Object)], [core.int]),
    replaceRange: dart.fnType(dart.void, [core.int, core.int, dart.nullable(core.Object)]),
    [$replaceRange]: dart.fnType(dart.void, [core.int, core.int, dart.nullable(core.Object)]),
    indexOf: dart.fnType(core.int, [dart.nullable(core.Object)], [core.int]),
    [$indexOf]: dart.fnType(core.int, [dart.nullable(core.Object)], [core.int]),
    indexWhere: dart.fnType(core.int, [dart.fnType(core.bool, [E])], [core.int]),
    [$indexWhere]: dart.fnType(core.int, [dart.fnType(core.bool, [E])], [core.int]),
    lastIndexOf: dart.fnType(core.int, [dart.nullable(core.Object)], [dart.nullable(core.int)]),
    [$lastIndexOf]: dart.fnType(core.int, [dart.nullable(core.Object)], [dart.nullable(core.int)]),
    lastIndexWhere: dart.fnType(core.int, [dart.fnType(core.bool, [E])], [dart.nullable(core.int)]),
    [$lastIndexWhere]: dart.fnType(core.int, [dart.fnType(core.bool, [E])], [dart.nullable(core.int)]),
    insert: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
    [$insert]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
    removeAt: dart.fnType(E, [core.int]),
    [$removeAt]: dart.fnType(E, [core.int]),
    insertAll: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
    [$insertAll]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
    setAll: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
    [$setAll]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(ListMixin, () => ({
    __proto__: dart.getGetters(ListMixin.__proto__),
    iterator: core.Iterator$(E),
    [$iterator]: core.Iterator$(E),
    isEmpty: core.bool,
    [$isEmpty]: core.bool,
    isNotEmpty: core.bool,
    [$isNotEmpty]: core.bool,
    first: E,
    [$first]: E,
    last: E,
    [$last]: E,
    single: E,
    [$single]: E,
    reversed: core.Iterable$(E),
    [$reversed]: core.Iterable$(E)
  }));
  dart.setSetterSignature(ListMixin, () => ({
    __proto__: dart.getSetters(ListMixin.__proto__),
    first: dart.nullable(core.Object),
    [$first]: dart.nullable(core.Object),
    last: dart.nullable(core.Object),
    [$last]: dart.nullable(core.Object)
  }));
  dart.setLibraryUri(ListMixin, L23);
  dart.defineExtensionMethods(ListMixin, [
    'elementAt',
    'followedBy',
    'forEach',
    'contains',
    'every',
    'any',
    'firstWhere',
    'lastWhere',
    'singleWhere',
    'join',
    'where',
    'whereType',
    'map',
    'expand',
    'reduce',
    'fold',
    'skip',
    'skipWhile',
    'take',
    'takeWhile',
    'toList',
    'toSet',
    'add',
    'addAll',
    'remove',
    'removeWhere',
    'retainWhere',
    'clear',
    'cast',
    'removeLast',
    'sort',
    'shuffle',
    'asMap',
    '+',
    'sublist',
    'getRange',
    'removeRange',
    'fillRange',
    'setRange',
    'replaceRange',
    'indexOf',
    'indexWhere',
    'lastIndexOf',
    'lastIndexWhere',
    'insert',
    'removeAt',
    'insertAll',
    'setAll',
    'toString'
  ]);
  dart.defineExtensionAccessors(ListMixin, [
    'iterator',
    'isEmpty',
    'isNotEmpty',
    'first',
    'last',
    'single',
    'reversed'
  ]);
  return ListMixin;
});
collection.ListMixin = collection.ListMixin$();
dart.addTypeTests(collection.ListMixin, _is_ListMixin_default);
const _is_ListBase_default = Symbol('_is_ListBase_default');
collection.ListBase$ = dart.generic(E => {
  const Object_ListMixin$36 = class Object_ListMixin extends core.Object {};
  (Object_ListMixin$36.new = function() {
  }).prototype = Object_ListMixin$36.prototype;
  dart.applyMixin(Object_ListMixin$36, collection.ListMixin$(E));
  class ListBase extends Object_ListMixin$36 {
    static listToString(list) {
      if (list == null) dart.nullFailed(L22, 42, 35, "list");
      return collection.IterableBase.iterableToFullString(list, "[", "]");
    }
  }
  (ListBase.new = function() {
    ;
  }).prototype = ListBase.prototype;
  dart.addTypeTests(ListBase);
  ListBase.prototype[_is_ListBase_default] = true;
  dart.addTypeCaches(ListBase);
  dart.setLibraryUri(ListBase, L23);
  return ListBase;
});
collection.ListBase = collection.ListBase$();
dart.addTypeTests(collection.ListBase, _is_ListBase_default);
const _is_UnmodifiableListMixin_default = Symbol('_is_UnmodifiableListMixin_default');
_internal.UnmodifiableListMixin$ = dart.generic(E => {
  var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
  var EN = () => (EN = dart.constFn(dart.nullable(E)))();
  class UnmodifiableListMixin extends core.Object {
    _set(index, value$) {
      let value = value$;
      if (index == null) dart.nullFailed(L24, 89, 25, "index");
      E.as(value);
      dart.throw(new core.UnsupportedError.new("Cannot modify an unmodifiable list"));
      return value$;
    }
    set length(newLength) {
      if (newLength == null) dart.nullFailed(L24, 94, 18, "newLength");
      dart.throw(new core.UnsupportedError.new("Cannot change the length of an unmodifiable list"));
    }
    set first(element) {
      E.as(element);
      dart.throw(new core.UnsupportedError.new("Cannot modify an unmodifiable list"));
    }
    set last(element) {
      E.as(element);
      dart.throw(new core.UnsupportedError.new("Cannot modify an unmodifiable list"));
    }
    setAll(at, iterable) {
      if (at == null) dart.nullFailed(L24, 108, 19, "at");
      IterableOfE().as(iterable);
      if (iterable == null) dart.nullFailed(L24, 108, 35, "iterable");
      dart.throw(new core.UnsupportedError.new("Cannot modify an unmodifiable list"));
    }
    add(value) {
      E.as(value);
      dart.throw(new core.UnsupportedError.new("Cannot add to an unmodifiable list"));
    }
    insert(index, element) {
      if (index == null) dart.nullFailed(L24, 118, 19, "index");
      E.as(element);
      dart.throw(new core.UnsupportedError.new("Cannot add to an unmodifiable list"));
    }
    insertAll(at, iterable) {
      if (at == null) dart.nullFailed(L24, 123, 22, "at");
      IterableOfE().as(iterable);
      if (iterable == null) dart.nullFailed(L24, 123, 38, "iterable");
      dart.throw(new core.UnsupportedError.new("Cannot add to an unmodifiable list"));
    }
    addAll(iterable) {
      IterableOfE().as(iterable);
      if (iterable == null) dart.nullFailed(L24, 128, 27, "iterable");
      dart.throw(new core.UnsupportedError.new("Cannot add to an unmodifiable list"));
    }
    remove(element) {
      dart.throw(new core.UnsupportedError.new("Cannot remove from an unmodifiable list"));
    }
    removeWhere(test) {
      if (test == null) dart.nullFailed(L24, 138, 25, "test");
      dart.throw(new core.UnsupportedError.new("Cannot remove from an unmodifiable list"));
    }
    retainWhere(test) {
      if (test == null) dart.nullFailed(L24, 143, 25, "test");
      dart.throw(new core.UnsupportedError.new("Cannot remove from an unmodifiable list"));
    }
    sort(compare = null) {
      dart.throw(new core.UnsupportedError.new("Cannot modify an unmodifiable list"));
    }
    shuffle(random = null) {
      dart.throw(new core.UnsupportedError.new("Cannot modify an unmodifiable list"));
    }
    clear() {
      dart.throw(new core.UnsupportedError.new("Cannot clear an unmodifiable list"));
    }
    removeAt(index) {
      if (index == null) dart.nullFailed(L24, 163, 18, "index");
      dart.throw(new core.UnsupportedError.new("Cannot remove from an unmodifiable list"));
    }
    removeLast() {
      dart.throw(new core.UnsupportedError.new("Cannot remove from an unmodifiable list"));
    }
    setRange(start, end, iterable, skipCount = 0) {
      if (start == null) dart.nullFailed(L24, 173, 21, "start");
      if (end == null) dart.nullFailed(L24, 173, 32, "end");
      IterableOfE().as(iterable);
      if (iterable == null) dart.nullFailed(L24, 173, 49, "iterable");
      if (skipCount == null) dart.nullFailed(L24, 173, 64, "skipCount");
      dart.throw(new core.UnsupportedError.new("Cannot modify an unmodifiable list"));
    }
    removeRange(start, end) {
      if (start == null) dart.nullFailed(L24, 178, 24, "start");
      if (end == null) dart.nullFailed(L24, 178, 35, "end");
      dart.throw(new core.UnsupportedError.new("Cannot remove from an unmodifiable list"));
    }
    replaceRange(start, end, iterable) {
      if (start == null) dart.nullFailed(L24, 183, 25, "start");
      if (end == null) dart.nullFailed(L24, 183, 36, "end");
      IterableOfE().as(iterable);
      if (iterable == null) dart.nullFailed(L24, 183, 53, "iterable");
      dart.throw(new core.UnsupportedError.new("Cannot remove from an unmodifiable list"));
    }
    fillRange(start, end, fillValue = null) {
      if (start == null) dart.nullFailed(L24, 188, 22, "start");
      if (end == null) dart.nullFailed(L24, 188, 33, "end");
      EN().as(fillValue);
      dart.throw(new core.UnsupportedError.new("Cannot modify an unmodifiable list"));
    }
    [Symbol.iterator]() {
      return new dart.JsIterator(this[$iterator]);
    }
  }
  (UnmodifiableListMixin.new = function() {
    ;
  }).prototype = UnmodifiableListMixin.prototype;
  UnmodifiableListMixin.prototype[dart.isList] = true;
  dart.addTypeTests(UnmodifiableListMixin);
  UnmodifiableListMixin.prototype[_is_UnmodifiableListMixin_default] = true;
  dart.addTypeCaches(UnmodifiableListMixin);
  UnmodifiableListMixin[dart.implements] = () => [core.List$(E)];
  dart.setMethodSignature(UnmodifiableListMixin, () => ({
    __proto__: dart.getMethods(UnmodifiableListMixin.__proto__),
    _set: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
    [$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
    setAll: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
    [$setAll]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    [$add]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    insert: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
    [$insert]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
    insertAll: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
    [$insertAll]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
    addAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    [$addAll]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    remove: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    [$remove]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    removeWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
    [$removeWhere]: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
    retainWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
    [$retainWhere]: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
    sort: dart.fnType(dart.void, [], [dart.nullable(dart.fnType(core.int, [E, E]))]),
    [$sort]: dart.fnType(dart.void, [], [dart.nullable(dart.fnType(core.int, [E, E]))]),
    shuffle: dart.fnType(dart.void, [], [dart.nullable(math.Random)]),
    [$shuffle]: dart.fnType(dart.void, [], [dart.nullable(math.Random)]),
    clear: dart.fnType(dart.void, []),
    [$clear]: dart.fnType(dart.void, []),
    removeAt: dart.fnType(E, [core.int]),
    [$removeAt]: dart.fnType(E, [core.int]),
    removeLast: dart.fnType(E, []),
    [$removeLast]: dart.fnType(E, []),
    setRange: dart.fnType(dart.void, [core.int, core.int, dart.nullable(core.Object)], [core.int]),
    [$setRange]: dart.fnType(dart.void, [core.int, core.int, dart.nullable(core.Object)], [core.int]),
    removeRange: dart.fnType(dart.void, [core.int, core.int]),
    [$removeRange]: dart.fnType(dart.void, [core.int, core.int]),
    replaceRange: dart.fnType(dart.void, [core.int, core.int, dart.nullable(core.Object)]),
    [$replaceRange]: dart.fnType(dart.void, [core.int, core.int, dart.nullable(core.Object)]),
    fillRange: dart.fnType(dart.void, [core.int, core.int], [dart.nullable(core.Object)]),
    [$fillRange]: dart.fnType(dart.void, [core.int, core.int], [dart.nullable(core.Object)])
  }));
  dart.setSetterSignature(UnmodifiableListMixin, () => ({
    __proto__: dart.getSetters(UnmodifiableListMixin.__proto__),
    length: core.int,
    [$length]: core.int,
    first: dart.nullable(core.Object),
    [$first]: dart.nullable(core.Object),
    last: dart.nullable(core.Object),
    [$last]: dart.nullable(core.Object)
  }));
  dart.setLibraryUri(UnmodifiableListMixin, L25);
  dart.defineExtensionMethods(UnmodifiableListMixin, [
    '_set',
    'setAll',
    'add',
    'insert',
    'insertAll',
    'addAll',
    'remove',
    'removeWhere',
    'retainWhere',
    'sort',
    'shuffle',
    'clear',
    'removeAt',
    'removeLast',
    'setRange',
    'removeRange',
    'replaceRange',
    'fillRange'
  ]);
  dart.defineExtensionAccessors(UnmodifiableListMixin, ['length', 'first', 'last']);
  return UnmodifiableListMixin;
});
_internal.UnmodifiableListMixin = _internal.UnmodifiableListMixin$();
dart.addTypeTests(_internal.UnmodifiableListMixin, _is_UnmodifiableListMixin_default);
const _is_UnmodifiableListBase_default = Symbol('_is_UnmodifiableListBase_default');
_internal.UnmodifiableListBase$ = dart.generic(E => {
  const ListBase_UnmodifiableListMixin$36 = class ListBase_UnmodifiableListMixin extends collection.ListBase$(E) {};
  (ListBase_UnmodifiableListMixin$36.new = function() {
  }).prototype = ListBase_UnmodifiableListMixin$36.prototype;
  dart.applyMixin(ListBase_UnmodifiableListMixin$36, _internal.UnmodifiableListMixin$(E));
  class UnmodifiableListBase extends ListBase_UnmodifiableListMixin$36 {}
  (UnmodifiableListBase.new = function() {
    ;
  }).prototype = UnmodifiableListBase.prototype;
  dart.addTypeTests(UnmodifiableListBase);
  UnmodifiableListBase.prototype[_is_UnmodifiableListBase_default] = true;
  dart.addTypeCaches(UnmodifiableListBase);
  dart.setLibraryUri(UnmodifiableListBase, L25);
  return UnmodifiableListBase;
});
_internal.UnmodifiableListBase = _internal.UnmodifiableListBase$();
dart.addTypeTests(_internal.UnmodifiableListBase, _is_UnmodifiableListBase_default);
core.num = class num extends core.Object {
  static is(o) {
    return typeof o == "number";
  }
  static as(o) {
    if (typeof o == "number") return o;
    return dart.as(o, core.num);
  }
  static parse(input, onError = null) {
    if (input == null) dart.nullFailed(L26, 471, 27, "input");
    let result = core.num.tryParse(input);
    if (result != null) return result;
    if (onError == null) dart.throw(new core.FormatException.new(input));
    return onError(input);
  }
  static tryParse(input) {
    let t30;
    if (input == null) dart.nullFailed(L26, 484, 31, "input");
    let source = input[$trim]();
    t30 = core.int.tryParse(source);
    return t30 == null ? core.double.tryParse(source) : t30;
  }
};
(core.num.new = function() {
  ;
}).prototype = core.num.prototype;
dart.addTypeCaches(core.num);
core.num[dart.implements] = () => [core.Comparable$(core.num)];
dart.setLibraryUri(core.num, L8$);
core.int = class int extends core.num {
  static is(o) {
    return typeof o == "number" && Math.floor(o) == o;
  }
  static as(o) {
    if (typeof o == "number" && Math.floor(o) == o) {
      return o;
    }
    return dart.as(o, core.int);
  }
  static fromEnvironment(name, opts) {
    if (name == null) dart.nullFailed(L7, 187, 38, "name");
    let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : 0;
    if (defaultValue == null) dart.nullFailed(L7, 187, 49, "defaultValue");
    dart.throw(new core.UnsupportedError.new("int.fromEnvironment can only be used as a const constructor"));
  }
  static parse(source, opts) {
    if (source == null) dart.nullFailed(L7, 173, 27, "source");
    let radix = opts && 'radix' in opts ? opts.radix : null;
    let onError = opts && 'onError' in opts ? opts.onError : null;
    let value = core.int.tryParse(source, {radix: radix});
    if (value != null) return value;
    if (onError != null) return onError(source);
    dart.throw(new core.FormatException.new(source));
  }
  static tryParse(source, opts) {
    if (source == null) dart.nullFailed(L7, 182, 31, "source");
    let radix = opts && 'radix' in opts ? opts.radix : null;
    return _js_helper.Primitives.parseInt(source, radix);
  }
};
dart.addTypeCaches(core.int);
dart.setLibraryUri(core.int, L8$);
_internal.CodeUnits = class CodeUnits extends _internal.UnmodifiableListBase$(core.int) {
  get length() {
    return this[_string$].length;
  }
  set length(value) {
    super.length = value;
  }
  _get(i) {
    if (i == null) dart.nullFailed(L21, 77, 23, "i");
    return this[_string$][$codeUnitAt](i);
  }
  static stringOf(u) {
    if (u == null) dart.nullFailed(L21, 79, 36, "u");
    return u[_string$];
  }
};
(_internal.CodeUnits.new = function(_string) {
  if (_string == null) dart.nullFailed(L21, 74, 18, "_string");
  this[_string$] = _string;
  ;
}).prototype = _internal.CodeUnits.prototype;
dart.addTypeTests(_internal.CodeUnits);
dart.addTypeCaches(_internal.CodeUnits);
dart.setMethodSignature(_internal.CodeUnits, () => ({
  __proto__: dart.getMethods(_internal.CodeUnits.__proto__),
  _get: dart.fnType(core.int, [core.int]),
  [$_get]: dart.fnType(core.int, [core.int])
}));
dart.setGetterSignature(_internal.CodeUnits, () => ({
  __proto__: dart.getGetters(_internal.CodeUnits.__proto__),
  length: core.int,
  [$length]: core.int
}));
dart.setLibraryUri(_internal.CodeUnits, L25);
dart.setFieldSignature(_internal.CodeUnits, () => ({
  __proto__: dart.getFields(_internal.CodeUnits.__proto__),
  [_string$]: dart.finalFieldType(core.String)
}));
dart.defineExtensionMethods(_internal.CodeUnits, ['_get']);
dart.defineExtensionAccessors(_internal.CodeUnits, ['length']);
var name$5 = dart.privateName(_internal, "ExternalName.name");
_internal.ExternalName = class ExternalName extends core.Object {
  get name() {
    return this[name$5];
  }
  set name(value) {
    super.name = value;
  }
};
(_internal.ExternalName.new = function(name) {
  if (name == null) dart.nullFailed(L21, 92, 27, "name");
  this[name$5] = name;
  ;
}).prototype = _internal.ExternalName.prototype;
dart.addTypeTests(_internal.ExternalName);
dart.addTypeCaches(_internal.ExternalName);
dart.setLibraryUri(_internal.ExternalName, L25);
dart.setFieldSignature(_internal.ExternalName, () => ({
  __proto__: dart.getFields(_internal.ExternalName.__proto__),
  name: dart.finalFieldType(core.String)
}));
var version$ = dart.privateName(_internal, "Since.version");
_internal.Since = class Since extends core.Object {
  get version() {
    return this[version$];
  }
  set version(value) {
    super.version = value;
  }
};
(_internal.Since.new = function(version) {
  if (version == null) dart.nullFailed(L21, 210, 20, "version");
  this[version$] = version;
  ;
}).prototype = _internal.Since.prototype;
dart.addTypeTests(_internal.Since);
dart.addTypeCaches(_internal.Since);
dart.setLibraryUri(_internal.Since, L25);
dart.setFieldSignature(_internal.Since, () => ({
  __proto__: dart.getFields(_internal.Since.__proto__),
  version: dart.finalFieldType(core.String)
}));
var _name$ = dart.privateName(_internal, "_name");
core.Error = class Error extends core.Object {
  static safeToString(object) {
    if (typeof object == 'number' || typeof object == 'boolean' || null == object) {
      return dart.toString(object);
    }
    if (typeof object == 'string') {
      return core.Error._stringToSafeString(object);
    }
    return core.Error._objectToString(object);
  }
  static _stringToSafeString(string) {
    if (string == null) dart.nullFailed(L7, 281, 44, "string");
    return JSON.stringify(string);
  }
  static _objectToString(object) {
    if (object == null) dart.nullFailed(L7, 276, 40, "object");
    return dart.str("Instance of '") + dart.str(dart.typeName(dart.getReifiedType(object))) + dart.str("'");
  }
  get stackTrace() {
    return dart.stackTraceForError(this);
  }
};
(core.Error.new = function() {
  ;
}).prototype = core.Error.prototype;
dart.addTypeTests(core.Error);
dart.addTypeCaches(core.Error);
dart.setGetterSignature(core.Error, () => ({
  __proto__: dart.getGetters(core.Error.__proto__),
  stackTrace: dart.nullable(core.StackTrace),
  [$stackTrace]: dart.nullable(core.StackTrace)
}));
dart.setLibraryUri(core.Error, L8$);
dart.defineExtensionAccessors(core.Error, ['stackTrace']);
const _is_NotNullableError_default = Symbol('_is_NotNullableError_default');
_internal.NotNullableError$ = dart.generic(T => {
  class NotNullableError extends core.Error {
    toString() {
      return dart.str("Null is not a valid value for the parameter '") + dart.str(this[_name$]) + dart.str("' of type '") + dart.str(dart.wrapType(T)) + dart.str("'");
    }
  }
  (NotNullableError.new = function(_name) {
    if (_name == null) dart.nullFailed(L21, 233, 25, "_name");
    this[_name$] = _name;
    NotNullableError.__proto__.new.call(this);
    ;
  }).prototype = NotNullableError.prototype;
  dart.addTypeTests(NotNullableError);
  NotNullableError.prototype[_is_NotNullableError_default] = true;
  dart.addTypeCaches(NotNullableError);
  NotNullableError[dart.implements] = () => [core.TypeError];
  dart.setLibraryUri(NotNullableError, L25);
  dart.setFieldSignature(NotNullableError, () => ({
    __proto__: dart.getFields(NotNullableError.__proto__),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(NotNullableError, ['toString']);
  return NotNullableError;
});
_internal.NotNullableError = _internal.NotNullableError$();
dart.addTypeTests(_internal.NotNullableError, _is_NotNullableError_default);
_internal.HttpStatus = class HttpStatus extends core.Object {};
(_internal.HttpStatus.new = function() {
  ;
}).prototype = _internal.HttpStatus.prototype;
dart.addTypeTests(_internal.HttpStatus);
dart.addTypeCaches(_internal.HttpStatus);
dart.setLibraryUri(_internal.HttpStatus, L25);
dart.defineLazy(_internal.HttpStatus, {
  /*_internal.HttpStatus.continue__*/get continue__() {
    return 100;
  },
  /*_internal.HttpStatus.switchingProtocols*/get switchingProtocols() {
    return 101;
  },
  /*_internal.HttpStatus.processing*/get processing() {
    return 102;
  },
  /*_internal.HttpStatus.ok*/get ok() {
    return 200;
  },
  /*_internal.HttpStatus.created*/get created() {
    return 201;
  },
  /*_internal.HttpStatus.accepted*/get accepted() {
    return 202;
  },
  /*_internal.HttpStatus.nonAuthoritativeInformation*/get nonAuthoritativeInformation() {
    return 203;
  },
  /*_internal.HttpStatus.noContent*/get noContent() {
    return 204;
  },
  /*_internal.HttpStatus.resetContent*/get resetContent() {
    return 205;
  },
  /*_internal.HttpStatus.partialContent*/get partialContent() {
    return 206;
  },
  /*_internal.HttpStatus.multiStatus*/get multiStatus() {
    return 207;
  },
  /*_internal.HttpStatus.alreadyReported*/get alreadyReported() {
    return 208;
  },
  /*_internal.HttpStatus.imUsed*/get imUsed() {
    return 226;
  },
  /*_internal.HttpStatus.multipleChoices*/get multipleChoices() {
    return 300;
  },
  /*_internal.HttpStatus.movedPermanently*/get movedPermanently() {
    return 301;
  },
  /*_internal.HttpStatus.found*/get found() {
    return 302;
  },
  /*_internal.HttpStatus.movedTemporarily*/get movedTemporarily() {
    return 302;
  },
  /*_internal.HttpStatus.seeOther*/get seeOther() {
    return 303;
  },
  /*_internal.HttpStatus.notModified*/get notModified() {
    return 304;
  },
  /*_internal.HttpStatus.useProxy*/get useProxy() {
    return 305;
  },
  /*_internal.HttpStatus.temporaryRedirect*/get temporaryRedirect() {
    return 307;
  },
  /*_internal.HttpStatus.permanentRedirect*/get permanentRedirect() {
    return 308;
  },
  /*_internal.HttpStatus.badRequest*/get badRequest() {
    return 400;
  },
  /*_internal.HttpStatus.unauthorized*/get unauthorized() {
    return 401;
  },
  /*_internal.HttpStatus.paymentRequired*/get paymentRequired() {
    return 402;
  },
  /*_internal.HttpStatus.forbidden*/get forbidden() {
    return 403;
  },
  /*_internal.HttpStatus.notFound*/get notFound() {
    return 404;
  },
  /*_internal.HttpStatus.methodNotAllowed*/get methodNotAllowed() {
    return 405;
  },
  /*_internal.HttpStatus.notAcceptable*/get notAcceptable() {
    return 406;
  },
  /*_internal.HttpStatus.proxyAuthenticationRequired*/get proxyAuthenticationRequired() {
    return 407;
  },
  /*_internal.HttpStatus.requestTimeout*/get requestTimeout() {
    return 408;
  },
  /*_internal.HttpStatus.conflict*/get conflict() {
    return 409;
  },
  /*_internal.HttpStatus.gone*/get gone() {
    return 410;
  },
  /*_internal.HttpStatus.lengthRequired*/get lengthRequired() {
    return 411;
  },
  /*_internal.HttpStatus.preconditionFailed*/get preconditionFailed() {
    return 412;
  },
  /*_internal.HttpStatus.requestEntityTooLarge*/get requestEntityTooLarge() {
    return 413;
  },
  /*_internal.HttpStatus.requestUriTooLong*/get requestUriTooLong() {
    return 414;
  },
  /*_internal.HttpStatus.unsupportedMediaType*/get unsupportedMediaType() {
    return 415;
  },
  /*_internal.HttpStatus.requestedRangeNotSatisfiable*/get requestedRangeNotSatisfiable() {
    return 416;
  },
  /*_internal.HttpStatus.expectationFailed*/get expectationFailed() {
    return 417;
  },
  /*_internal.HttpStatus.misdirectedRequest*/get misdirectedRequest() {
    return 421;
  },
  /*_internal.HttpStatus.unprocessableEntity*/get unprocessableEntity() {
    return 422;
  },
  /*_internal.HttpStatus.locked*/get locked() {
    return 423;
  },
  /*_internal.HttpStatus.failedDependency*/get failedDependency() {
    return 424;
  },
  /*_internal.HttpStatus.upgradeRequired*/get upgradeRequired() {
    return 426;
  },
  /*_internal.HttpStatus.preconditionRequired*/get preconditionRequired() {
    return 428;
  },
  /*_internal.HttpStatus.tooManyRequests*/get tooManyRequests() {
    return 429;
  },
  /*_internal.HttpStatus.requestHeaderFieldsTooLarge*/get requestHeaderFieldsTooLarge() {
    return 431;
  },
  /*_internal.HttpStatus.connectionClosedWithoutResponse*/get connectionClosedWithoutResponse() {
    return 444;
  },
  /*_internal.HttpStatus.unavailableForLegalReasons*/get unavailableForLegalReasons() {
    return 451;
  },
  /*_internal.HttpStatus.clientClosedRequest*/get clientClosedRequest() {
    return 499;
  },
  /*_internal.HttpStatus.internalServerError*/get internalServerError() {
    return 500;
  },
  /*_internal.HttpStatus.notImplemented*/get notImplemented() {
    return 501;
  },
  /*_internal.HttpStatus.badGateway*/get badGateway() {
    return 502;
  },
  /*_internal.HttpStatus.serviceUnavailable*/get serviceUnavailable() {
    return 503;
  },
  /*_internal.HttpStatus.gatewayTimeout*/get gatewayTimeout() {
    return 504;
  },
  /*_internal.HttpStatus.httpVersionNotSupported*/get httpVersionNotSupported() {
    return 505;
  },
  /*_internal.HttpStatus.variantAlsoNegotiates*/get variantAlsoNegotiates() {
    return 506;
  },
  /*_internal.HttpStatus.insufficientStorage*/get insufficientStorage() {
    return 507;
  },
  /*_internal.HttpStatus.loopDetected*/get loopDetected() {
    return 508;
  },
  /*_internal.HttpStatus.notExtended*/get notExtended() {
    return 510;
  },
  /*_internal.HttpStatus.networkAuthenticationRequired*/get networkAuthenticationRequired() {
    return 511;
  },
  /*_internal.HttpStatus.networkConnectTimeoutError*/get networkConnectTimeoutError() {
    return 599;
  },
  /*_internal.HttpStatus.CONTINUE*/get CONTINUE() {
    return 100;
  },
  /*_internal.HttpStatus.SWITCHING_PROTOCOLS*/get SWITCHING_PROTOCOLS() {
    return 101;
  },
  /*_internal.HttpStatus.OK*/get OK() {
    return 200;
  },
  /*_internal.HttpStatus.CREATED*/get CREATED() {
    return 201;
  },
  /*_internal.HttpStatus.ACCEPTED*/get ACCEPTED() {
    return 202;
  },
  /*_internal.HttpStatus.NON_AUTHORITATIVE_INFORMATION*/get NON_AUTHORITATIVE_INFORMATION() {
    return 203;
  },
  /*_internal.HttpStatus.NO_CONTENT*/get NO_CONTENT() {
    return 204;
  },
  /*_internal.HttpStatus.RESET_CONTENT*/get RESET_CONTENT() {
    return 205;
  },
  /*_internal.HttpStatus.PARTIAL_CONTENT*/get PARTIAL_CONTENT() {
    return 206;
  },
  /*_internal.HttpStatus.MULTIPLE_CHOICES*/get MULTIPLE_CHOICES() {
    return 300;
  },
  /*_internal.HttpStatus.MOVED_PERMANENTLY*/get MOVED_PERMANENTLY() {
    return 301;
  },
  /*_internal.HttpStatus.FOUND*/get FOUND() {
    return 302;
  },
  /*_internal.HttpStatus.MOVED_TEMPORARILY*/get MOVED_TEMPORARILY() {
    return 302;
  },
  /*_internal.HttpStatus.SEE_OTHER*/get SEE_OTHER() {
    return 303;
  },
  /*_internal.HttpStatus.NOT_MODIFIED*/get NOT_MODIFIED() {
    return 304;
  },
  /*_internal.HttpStatus.USE_PROXY*/get USE_PROXY() {
    return 305;
  },
  /*_internal.HttpStatus.TEMPORARY_REDIRECT*/get TEMPORARY_REDIRECT() {
    return 307;
  },
  /*_internal.HttpStatus.BAD_REQUEST*/get BAD_REQUEST() {
    return 400;
  },
  /*_internal.HttpStatus.UNAUTHORIZED*/get UNAUTHORIZED() {
    return 401;
  },
  /*_internal.HttpStatus.PAYMENT_REQUIRED*/get PAYMENT_REQUIRED() {
    return 402;
  },
  /*_internal.HttpStatus.FORBIDDEN*/get FORBIDDEN() {
    return 403;
  },
  /*_internal.HttpStatus.NOT_FOUND*/get NOT_FOUND() {
    return 404;
  },
  /*_internal.HttpStatus.METHOD_NOT_ALLOWED*/get METHOD_NOT_ALLOWED() {
    return 405;
  },
  /*_internal.HttpStatus.NOT_ACCEPTABLE*/get NOT_ACCEPTABLE() {
    return 406;
  },
  /*_internal.HttpStatus.PROXY_AUTHENTICATION_REQUIRED*/get PROXY_AUTHENTICATION_REQUIRED() {
    return 407;
  },
  /*_internal.HttpStatus.REQUEST_TIMEOUT*/get REQUEST_TIMEOUT() {
    return 408;
  },
  /*_internal.HttpStatus.CONFLICT*/get CONFLICT() {
    return 409;
  },
  /*_internal.HttpStatus.GONE*/get GONE() {
    return 410;
  },
  /*_internal.HttpStatus.LENGTH_REQUIRED*/get LENGTH_REQUIRED() {
    return 411;
  },
  /*_internal.HttpStatus.PRECONDITION_FAILED*/get PRECONDITION_FAILED() {
    return 412;
  },
  /*_internal.HttpStatus.REQUEST_ENTITY_TOO_LARGE*/get REQUEST_ENTITY_TOO_LARGE() {
    return 413;
  },
  /*_internal.HttpStatus.REQUEST_URI_TOO_LONG*/get REQUEST_URI_TOO_LONG() {
    return 414;
  },
  /*_internal.HttpStatus.UNSUPPORTED_MEDIA_TYPE*/get UNSUPPORTED_MEDIA_TYPE() {
    return 415;
  },
  /*_internal.HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE*/get REQUESTED_RANGE_NOT_SATISFIABLE() {
    return 416;
  },
  /*_internal.HttpStatus.EXPECTATION_FAILED*/get EXPECTATION_FAILED() {
    return 417;
  },
  /*_internal.HttpStatus.UPGRADE_REQUIRED*/get UPGRADE_REQUIRED() {
    return 426;
  },
  /*_internal.HttpStatus.INTERNAL_SERVER_ERROR*/get INTERNAL_SERVER_ERROR() {
    return 500;
  },
  /*_internal.HttpStatus.NOT_IMPLEMENTED*/get NOT_IMPLEMENTED() {
    return 501;
  },
  /*_internal.HttpStatus.BAD_GATEWAY*/get BAD_GATEWAY() {
    return 502;
  },
  /*_internal.HttpStatus.SERVICE_UNAVAILABLE*/get SERVICE_UNAVAILABLE() {
    return 503;
  },
  /*_internal.HttpStatus.GATEWAY_TIMEOUT*/get GATEWAY_TIMEOUT() {
    return 504;
  },
  /*_internal.HttpStatus.HTTP_VERSION_NOT_SUPPORTED*/get HTTP_VERSION_NOT_SUPPORTED() {
    return 505;
  },
  /*_internal.HttpStatus.NETWORK_CONNECT_TIMEOUT_ERROR*/get NETWORK_CONNECT_TIMEOUT_ERROR() {
    return 599;
  }
}, false);
var _source$ = dart.privateName(_internal, "_source");
var _add = dart.privateName(async, "_add");
var _closeUnchecked = dart.privateName(async, "_closeUnchecked");
var _addError = dart.privateName(async, "_addError");
var _completeError = dart.privateName(async, "_completeError");
var _complete = dart.privateName(async, "_complete");
var _sink$ = dart.privateName(async, "_sink");
async.Stream$ = dart.generic(T => {
  var _AsBroadcastStreamOfT = () => (_AsBroadcastStreamOfT = dart.constFn(async._AsBroadcastStream$(T)))();
  var _WhereStreamOfT = () => (_WhereStreamOfT = dart.constFn(async._WhereStream$(T)))();
  var TToNullN = () => (TToNullN = dart.constFn(dart.fnType(core.Null, [T])))();
  var _HandleErrorStreamOfT = () => (_HandleErrorStreamOfT = dart.constFn(async._HandleErrorStream$(T)))();
  var StreamConsumerOfT = () => (StreamConsumerOfT = dart.constFn(async.StreamConsumer$(T)))();
  var TAndTToT = () => (TAndTToT = dart.constFn(dart.fnType(T, [T, T])))();
  var _FutureOfT = () => (_FutureOfT = dart.constFn(async._Future$(T)))();
  var VoidToT = () => (VoidToT = dart.constFn(dart.fnType(T, [])))();
  var TTodynamic = () => (TTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T])))();
  var JSArrayOfT = () => (JSArrayOfT = dart.constFn(_interceptors.JSArray$(T)))();
  var ListOfT = () => (ListOfT = dart.constFn(core.List$(T)))();
  var _FutureOfListOfT = () => (_FutureOfListOfT = dart.constFn(async._Future$(ListOfT())))();
  var _HashSetOfT = () => (_HashSetOfT = dart.constFn(collection._HashSet$(T)))();
  var SetOfT = () => (SetOfT = dart.constFn(core.Set$(T)))();
  var _FutureOfSetOfT = () => (_FutureOfSetOfT = dart.constFn(async._Future$(SetOfT())))();
  var _TakeStreamOfT = () => (_TakeStreamOfT = dart.constFn(async._TakeStream$(T)))();
  var _TakeWhileStreamOfT = () => (_TakeWhileStreamOfT = dart.constFn(async._TakeWhileStream$(T)))();
  var _SkipStreamOfT = () => (_SkipStreamOfT = dart.constFn(async._SkipStream$(T)))();
  var _SkipWhileStreamOfT = () => (_SkipWhileStreamOfT = dart.constFn(async._SkipWhileStream$(T)))();
  var _DistinctStreamOfT = () => (_DistinctStreamOfT = dart.constFn(async._DistinctStream$(T)))();
  var VoidToNT = () => (VoidToNT = dart.constFn(dart.nullable(VoidToT())))();
  var _SyncBroadcastStreamControllerOfT = () => (_SyncBroadcastStreamControllerOfT = dart.constFn(async._SyncBroadcastStreamController$(T)))();
  var _SyncStreamControllerOfT = () => (_SyncStreamControllerOfT = dart.constFn(async._SyncStreamController$(T)))();
  var EventSinkOfT = () => (EventSinkOfT = dart.constFn(async.EventSink$(T)))();
  var _ControllerEventSinkWrapperOfT = () => (_ControllerEventSinkWrapperOfT = dart.constFn(async._ControllerEventSinkWrapper$(T)))();
  class Stream extends core.Object {
    static value(value) {
      let t30;
      return (t30 = new (async._AsyncStreamController$(T)).new(null, null, null, null), (() => {
        t30[_add](value);
        t30[_closeUnchecked]();
        return t30;
      })()).stream;
    }
    static error(error, stackTrace = null) {
      let t31, t30;
      if (error == null) dart.nullFailed(L28, 153, 31, "error");
      core.ArgumentError.checkNotNull(core.Object, error, "error");
      return (t30 = new (async._AsyncStreamController$(T)).new(null, null, null, null), (() => {
        t30[_addError](error, (t31 = stackTrace, t31 == null ? async.AsyncError.defaultStackTrace(error) : t31));
        t30[_closeUnchecked]();
        return t30;
      })()).stream;
    }
    static fromFuture(future) {
      if (future == null) dart.nullFailed(L28, 168, 39, "future");
      let controller = new (async._SyncStreamController$(T)).new(null, null, null, null);
      future.then(core.Null, dart.fn(value => {
        controller[_add](value);
        controller[_closeUnchecked]();
      }, dart.fnType(core.Null, [T])), {onError: dart.fn((error, stackTrace) => {
          controller[_addError](core.Object.as(error), core.StackTrace.as(stackTrace));
          controller[_closeUnchecked]();
        }, dynamicAnddynamicToNullN())});
      return controller.stream;
    }
    static fromFutures(futures) {
      if (futures == null) dart.nullFailed(L28, 199, 50, "futures");
      let controller = new (async._SyncStreamController$(T)).new(null, null, null, null);
      let count = 0;
      function onValue(value) {
        if (!dart.test(controller.isClosed)) {
          controller[_add](value);
          if ((count = count - 1) === 0) controller[_closeUnchecked]();
        }
      }
      dart.fn(onValue, dart.fnType(dart.void, [T]));
      function onError(error, stack) {
        if (error == null) dart.nullFailed(L28, 213, 25, "error");
        if (stack == null) dart.nullFailed(L28, 213, 43, "stack");
        if (!dart.test(controller.isClosed)) {
          controller[_addError](error, stack);
          if ((count = count - 1) === 0) controller[_closeUnchecked]();
        }
      }
      dart.fn(onError, ObjectAndStackTraceTovoid());
      for (let future of futures) {
        count = count + 1;
        future.then(dart.void, onValue, {onError: onError});
      }
      if (count === 0) async.scheduleMicrotask(dart.bind(controller, 'close'));
      return controller.stream;
    }
    static fromIterable(elements) {
      if (elements == null) dart.nullFailed(L28, 245, 43, "elements");
      return new (async._GeneratedStreamImpl$(T)).new(dart.fn(() => new (async._IterablePendingEvents$(T)).new(elements), dart.fnType(async._IterablePendingEvents$(T), [])));
    }
    static multi(onListen, opts) {
      if (onListen == null) dart.nullFailed(L28, 316, 64, "onListen");
      let isBroadcast = opts && 'isBroadcast' in opts ? opts.isBroadcast : false;
      if (isBroadcast == null) dart.nullFailed(L28, 317, 13, "isBroadcast");
      return new (async._MultiStream$(T)).new(onListen, isBroadcast);
    }
    static periodic(period, computation = null) {
      if (period == null) dart.nullFailed(L28, 335, 36, "period");
      if (computation == null && !dart.test(_internal.typeAcceptsNull(T))) {
        dart.throw(new core.ArgumentError.value(null, "computation", "Must not be omitted when the event type is non-nullable"));
      }
      let controller = new (async._SyncStreamController$(T)).new(null, null, null, null);
      let watch = new core.Stopwatch.new();
      controller.onListen = dart.fn(() => {
        let t31;
        let computationCount = 0;
        function sendEvent(_) {
          let t30;
          watch.reset();
          if (computation != null) {
            let event = null;
            try {
              event = computation((t30 = computationCount, computationCount = t30 + 1, t30));
            } catch (e$) {
              let e = dart.getThrown(e$);
              let s = dart.stackTrace(e$);
              if (core.Object.is(e)) {
                controller.addError(e, s);
                return;
              } else
                throw e$;
            }
            controller.add(event);
          } else {
            controller.add(T.as(null));
          }
        }
        dart.fn(sendEvent, dynamicTovoid());
        let timer = async.Timer.periodic(period, sendEvent);
        t31 = controller;
        (() => {
          t31.onCancel = dart.fn(() => {
            timer.cancel();
            return async.Future._nullFuture;
          }, VoidTo_FutureOfNullN());
          t31.onPause = dart.fn(() => {
            watch.stop();
            timer.cancel();
          }, VoidToNullN());
          t31.onResume = dart.fn(() => {
            let elapsed = watch.elapsed;
            watch.start();
            timer = async.Timer.new(period['-'](elapsed), dart.fn(() => {
              timer = async.Timer.periodic(period, sendEvent);
              sendEvent(null);
            }, VoidToNullN()));
          }, VoidToNullN());
          return t31;
        })();
      }, VoidToNullN());
      return controller.stream;
    }
    static eventTransformed(source, mapSink) {
      if (source == null) dart.nullFailed(L28, 425, 23, "source");
      if (mapSink == null) dart.nullFailed(L28, 425, 50, "mapSink");
      return new (async._BoundSinkStream$(dart.dynamic, T)).new(source, mapSink);
    }
    static castFrom(S, T, source) {
      if (source == null) dart.nullFailed(L28, 437, 45, "source");
      return new (_internal.CastStream$(S, T)).new(source);
    }
    get isBroadcast() {
      return false;
    }
    asBroadcastStream(opts) {
      let onListen = opts && 'onListen' in opts ? opts.onListen : null;
      let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
      return new (_AsBroadcastStreamOfT()).new(this, onListen, onCancel);
    }
    where(test) {
      if (test == null) dart.nullFailed(L28, 523, 24, "test");
      return new (_WhereStreamOfT()).new(this, test);
    }
    map(S, convert) {
      if (convert == null) dart.nullFailed(L28, 553, 22, "convert");
      return new (async._MapStream$(T, S)).new(this, convert);
    }
    asyncMap(E, convert) {
      if (convert == null) dart.nullFailed(L28, 567, 37, "convert");
      let controller = null;
      if (dart.test(this.isBroadcast)) {
        controller = new (async._SyncBroadcastStreamController$(E)).new(null, null);
      } else {
        controller = new (async._SyncStreamController$(E)).new(null, null, null, null);
      }
      controller.onListen = dart.fn(() => {
        let t32;
        let subscription = this.listen(null, {onError: dart.bind(controller, _addError), onDone: dart.bind(controller, 'close')});
        function add(value) {
          controller.add(value);
        }
        dart.fn(add, dart.fnType(FutureNOfNullN(), [E]));
        let addError = dart.bind(controller, _addError);
        let resume = dart.bind(subscription, 'resume');
        subscription.onData(dart.fn(event => {
          let newValue = null;
          try {
            newValue = convert(event);
          } catch (e$) {
            let e = dart.getThrown(e$);
            let s = dart.stackTrace(e$);
            if (core.Object.is(e)) {
              controller.addError(e, s);
              return;
            } else
              throw e$;
          }
          if (async.Future$(E).is(newValue)) {
            subscription.pause();
            newValue.then(core.Null, add, {onError: addError}).whenComplete(resume);
          } else {
            controller.add(E.as(newValue));
          }
        }, TToNullN()));
        controller.onCancel = dart.bind(subscription, 'cancel');
        if (!dart.test(this.isBroadcast)) {
          t32 = controller;
          (() => {
            t32.onPause = dart.bind(subscription, 'pause');
            t32.onResume = resume;
            return t32;
          })();
        }
      }, VoidToNullN());
      return controller.stream;
    }
    asyncExpand(E, convert) {
      if (convert == null) dart.nullFailed(L28, 629, 39, "convert");
      let controller = null;
      if (dart.test(this.isBroadcast)) {
        controller = new (async._SyncBroadcastStreamController$(E)).new(null, null);
      } else {
        controller = new (async._SyncStreamController$(E)).new(null, null, null, null);
      }
      controller.onListen = dart.fn(() => {
        let t33;
        let subscription = this.listen(null, {onError: dart.bind(controller, _addError), onDone: dart.bind(controller, 'close')});
        subscription.onData(dart.fn(event => {
          let newStream = null;
          try {
            newStream = convert(event);
          } catch (e$) {
            let e = dart.getThrown(e$);
            let s = dart.stackTrace(e$);
            if (core.Object.is(e)) {
              controller.addError(e, s);
              return;
            } else
              throw e$;
          }
          if (newStream != null) {
            subscription.pause();
            controller.addStream(newStream).whenComplete(dart.bind(subscription, 'resume'));
          }
        }, TToNullN()));
        controller.onCancel = dart.bind(subscription, 'cancel');
        if (!dart.test(this.isBroadcast)) {
          t33 = controller;
          (() => {
            t33.onPause = dart.bind(subscription, 'pause');
            t33.onResume = dart.bind(subscription, 'resume');
            return t33;
          })();
        }
      }, VoidToNullN());
      return controller.stream;
    }
    handleError(onError, opts) {
      if (onError == null) dart.nullFailed(L28, 696, 34, "onError");
      let test = opts && 'test' in opts ? opts.test : null;
      return new (_HandleErrorStreamOfT()).new(this, onError, test);
    }
    expand(S, convert) {
      if (convert == null) dart.nullFailed(L28, 719, 35, "convert");
      return new (async._ExpandStream$(T, S)).new(this, convert);
    }
    pipe(streamConsumer) {
      StreamConsumerOfT().as(streamConsumer);
      if (streamConsumer == null) dart.nullFailed(L28, 739, 33, "streamConsumer");
      return streamConsumer.addStream(this).then(dart.dynamic, dart.fn(_ => streamConsumer.close(), dynamicToFuture()));
    }
    transform(S, streamTransformer) {
      async.StreamTransformer$(T, S).as(streamTransformer);
      if (streamTransformer == null) dart.nullFailed(L28, 770, 50, "streamTransformer");
      return streamTransformer.bind(this);
    }
    reduce(combine) {
      TAndTToT().as(combine);
      if (combine == null) dart.nullFailed(L28, 793, 22, "combine");
      let result = new (_FutureOfT()).new();
      let seenFirst = false;
      let value = null;
      let value$35isSet = false;
      function value$35get() {
        return value$35isSet ? value : dart.throw(new _internal.LateInitializationErrorImpl.new("Local 'value' has not been initialized."));
      }
      dart.fn(value$35get, VoidToT());
      function value$35set(t35) {
        value$35isSet = true;
        return value = t35;
      }
      dart.fn(value$35set, TTodynamic());
      let subscription = this.listen(null, {onError: dart.bind(result, _completeError), onDone: dart.fn(() => {
          if (!seenFirst) {
            try {
              dart.throw(_internal.IterableElementError.noElement());
            } catch (e$) {
              let e = dart.getThrown(e$);
              let s = dart.stackTrace(e$);
              if (core.Object.is(e)) {
                async._completeWithErrorCallback(result, e, s);
              } else
                throw e$;
            }
          } else {
            result[_complete](value$35get());
          }
        }, VoidToNullN()), cancelOnError: true});
      subscription.onData(dart.fn(element => {
        if (seenFirst) {
          async._runUserCode(T, dart.fn(() => combine(value$35get(), element), VoidToT()), dart.fn(newValue => {
            value$35set(newValue);
          }, TToNullN()), async._cancelAndErrorClosure(subscription, result));
        } else {
          value$35set(element);
          seenFirst = true;
        }
      }, TToNullN()));
      return result;
    }
    fold(S, initialValue, combine) {
      if (combine == null) dart.nullFailed(L28, 842, 39, "combine");
      let result = new (async._Future$(S)).new();
      let value = initialValue;
      let subscription = this.listen(null, {onError: dart.bind(result, _completeError), onDone: dart.fn(() => {
          result[_complete](value);
        }, VoidToNullN()), cancelOnError: true});
      subscription.onData(dart.fn(element => {
        async._runUserCode(S, dart.fn(() => combine(value, element), dart.fnType(S, [])), dart.fn(newValue => {
          value = newValue;
        }, dart.fnType(core.Null, [S])), async._cancelAndErrorClosure(subscription, result));
      }, TToNullN()));
      return result;
    }
    join(separator = "") {
      if (separator == null) dart.nullFailed(L28, 871, 31, "separator");
      let result = new (_FutureOfString()).new();
      let buffer = new core.StringBuffer.new();
      let first = true;
      let subscription = this.listen(null, {onError: dart.bind(result, _completeError), onDone: dart.fn(() => {
          result[_complete](buffer.toString());
        }, VoidToNullN()), cancelOnError: true});
      subscription.onData(separator[$isEmpty] ? dart.fn(element => {
        try {
          buffer.write(element);
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            async._cancelAndErrorWithReplacement(subscription, result, e, s);
          } else
            throw e$;
        }
      }, TToNullN()) : dart.fn(element => {
        if (!first) {
          buffer.write(separator);
        }
        first = false;
        try {
          buffer.write(element);
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            async._cancelAndErrorWithReplacement(subscription, result, e, s);
          } else
            throw e$;
        }
      }, TToNullN()));
      return result;
    }
    contains(needle) {
      let future = new (_FutureOfbool()).new();
      let subscription = this.listen(null, {onError: dart.bind(future, _completeError), onDone: dart.fn(() => {
          future[_complete](false);
        }, VoidToNullN()), cancelOnError: true});
      subscription.onData(dart.fn(element => {
        async._runUserCode(core.bool, dart.fn(() => dart.equals(element, needle), VoidTobool()), dart.fn(isMatch => {
          if (isMatch == null) dart.nullFailed(L28, 920, 53, "isMatch");
          if (dart.test(isMatch)) {
            async._cancelAndValue(subscription, future, true);
          }
        }, boolToNullN()), async._cancelAndErrorClosure(subscription, future));
      }, TToNullN()));
      return future;
    }
    forEach(action) {
      if (action == null) dart.nullFailed(L28, 939, 23, "action");
      let future = new async._Future.new();
      let subscription = this.listen(null, {onError: dart.bind(future, _completeError), onDone: dart.fn(() => {
          future[_complete](null);
        }, VoidToNullN()), cancelOnError: true});
      subscription.onData(dart.fn(element => {
        async._runUserCode(dart.void, dart.fn(() => action(element), VoidTovoid()), dart.fn(_ => {
        }, voidToNullN()), async._cancelAndErrorClosure(subscription, future));
      }, TToNullN()));
      return future;
    }
    every(test) {
      if (test == null) dart.nullFailed(L28, 966, 27, "test");
      let future = new (_FutureOfbool()).new();
      let subscription = this.listen(null, {onError: dart.bind(future, _completeError), onDone: dart.fn(() => {
          future[_complete](true);
        }, VoidToNullN()), cancelOnError: true});
      subscription.onData(dart.fn(element => {
        async._runUserCode(core.bool, dart.fn(() => test(element), VoidTobool()), dart.fn(isMatch => {
          if (isMatch == null) dart.nullFailed(L28, 973, 47, "isMatch");
          if (!dart.test(isMatch)) {
            async._cancelAndValue(subscription, future, false);
          }
        }, boolToNullN()), async._cancelAndErrorClosure(subscription, future));
      }, TToNullN()));
      return future;
    }
    any(test) {
      if (test == null) dart.nullFailed(L28, 996, 25, "test");
      let future = new (_FutureOfbool()).new();
      let subscription = this.listen(null, {onError: dart.bind(future, _completeError), onDone: dart.fn(() => {
          future[_complete](false);
        }, VoidToNullN()), cancelOnError: true});
      subscription.onData(dart.fn(element => {
        async._runUserCode(core.bool, dart.fn(() => test(element), VoidTobool()), dart.fn(isMatch => {
          if (isMatch == null) dart.nullFailed(L28, 1003, 47, "isMatch");
          if (dart.test(isMatch)) {
            async._cancelAndValue(subscription, future, true);
          }
        }, boolToNullN()), async._cancelAndErrorClosure(subscription, future));
      }, TToNullN()));
      return future;
    }
    get length() {
      let future = new (_FutureOfint()).new();
      let count = 0;
      this.listen(dart.fn(_ => {
        count = count + 1;
      }, TToNullN()), {onError: dart.bind(future, _completeError), onDone: dart.fn(() => {
          future[_complete](count);
        }, VoidToNullN()), cancelOnError: true});
      return future;
    }
    get isEmpty() {
      let future = new (_FutureOfbool()).new();
      let subscription = this.listen(null, {onError: dart.bind(future, _completeError), onDone: dart.fn(() => {
          future[_complete](true);
        }, VoidToNullN()), cancelOnError: true});
      subscription.onData(dart.fn(_ => {
        async._cancelAndValue(subscription, future, false);
      }, TToNullN()));
      return future;
    }
    cast(R) {
      return async.Stream.castFrom(T, R, this);
    }
    toList() {
      let result = JSArrayOfT().of([]);
      let future = new (_FutureOfListOfT()).new();
      this.listen(dart.fn(data => {
        result[$add](data);
      }, TToNullN()), {onError: dart.bind(future, _completeError), onDone: dart.fn(() => {
          future[_complete](result);
        }, VoidToNullN()), cancelOnError: true});
      return future;
    }
    toSet() {
      let result = new (_HashSetOfT()).new();
      let future = new (_FutureOfSetOfT()).new();
      this.listen(dart.fn(data => {
        result.add(data);
      }, TToNullN()), {onError: dart.bind(future, _completeError), onDone: dart.fn(() => {
          future[_complete](result);
        }, VoidToNullN()), cancelOnError: true});
      return future;
    }
    drain(E, futureValue = null) {
      if (futureValue == null) {
        futureValue = E.as(futureValue);
      }
      return this.listen(null, {cancelOnError: true}).asFuture(E, futureValue);
    }
    take(count) {
      if (count == null) dart.nullFailed(L28, 1175, 22, "count");
      return new (_TakeStreamOfT()).new(this, count);
    }
    takeWhile(test) {
      if (test == null) dart.nullFailed(L28, 1201, 28, "test");
      return new (_TakeWhileStreamOfT()).new(this, test);
    }
    skip(count) {
      if (count == null) dart.nullFailed(L28, 1220, 22, "count");
      return new (_SkipStreamOfT()).new(this, count);
    }
    skipWhile(test) {
      if (test == null) dart.nullFailed(L28, 1242, 28, "test");
      return new (_SkipWhileStreamOfT()).new(this, test);
    }
    distinct(equals = null) {
      return new (_DistinctStreamOfT()).new(this, equals);
    }
    get first() {
      let future = new (_FutureOfT()).new();
      let subscription = this.listen(null, {onError: dart.bind(future, _completeError), onDone: dart.fn(() => {
          try {
            dart.throw(_internal.IterableElementError.noElement());
          } catch (e$) {
            let e = dart.getThrown(e$);
            let s = dart.stackTrace(e$);
            if (core.Object.is(e)) {
              async._completeWithErrorCallback(future, e, s);
            } else
              throw e$;
          }
        }, VoidToNullN()), cancelOnError: true});
      subscription.onData(dart.fn(value => {
        async._cancelAndValue(subscription, future, value);
      }, TToNullN()));
      return future;
    }
    get last() {
      let future = new (_FutureOfT()).new();
      let result = null;
      let result$35isSet = false;
      function result$35get() {
        return result$35isSet ? result : dart.throw(new _internal.LateInitializationErrorImpl.new("Local 'result' has not been initialized."));
      }
      dart.fn(result$35get, VoidToT());
      function result$35set(t43) {
        result$35isSet = true;
        return result = t43;
      }
      dart.fn(result$35set, TTodynamic());
      let foundResult = false;
      this.listen(dart.fn(value => {
        foundResult = true;
        result$35set(value);
      }, TToNullN()), {onError: dart.bind(future, _completeError), onDone: dart.fn(() => {
          if (foundResult) {
            future[_complete](result$35get());
            return;
          }
          try {
            dart.throw(_internal.IterableElementError.noElement());
          } catch (e$) {
            let e = dart.getThrown(e$);
            let s = dart.stackTrace(e$);
            if (core.Object.is(e)) {
              async._completeWithErrorCallback(future, e, s);
            } else
              throw e$;
          }
        }, VoidToNullN()), cancelOnError: true});
      return future;
    }
    get single() {
      let future = new (_FutureOfT()).new();
      let result = null;
      let result$35isSet = false;
      function result$35get() {
        return result$35isSet ? result : dart.throw(new _internal.LateInitializationErrorImpl.new("Local 'result' has not been initialized."));
      }
      dart.fn(result$35get, VoidToT());
      function result$35set(t48) {
        result$35isSet = true;
        return result = t48;
      }
      dart.fn(result$35set, TTodynamic());
      let foundResult = false;
      let subscription = this.listen(null, {onError: dart.bind(future, _completeError), onDone: dart.fn(() => {
          if (foundResult) {
            future[_complete](result$35get());
            return;
          }
          try {
            dart.throw(_internal.IterableElementError.noElement());
          } catch (e$) {
            let e = dart.getThrown(e$);
            let s = dart.stackTrace(e$);
            if (core.Object.is(e)) {
              async._completeWithErrorCallback(future, e, s);
            } else
              throw e$;
          }
        }, VoidToNullN()), cancelOnError: true});
      subscription.onData(dart.fn(value => {
        if (foundResult) {
          try {
            dart.throw(_internal.IterableElementError.tooMany());
          } catch (e$) {
            let e = dart.getThrown(e$);
            let s = dart.stackTrace(e$);
            if (core.Object.is(e)) {
              async._cancelAndErrorWithReplacement(subscription, future, e, s);
            } else
              throw e$;
          }
          return;
        }
        foundResult = true;
        result$35set(value);
      }, TToNullN()));
      return future;
    }
    firstWhere(test, opts) {
      if (test == null) dart.nullFailed(L28, 1407, 29, "test");
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToNT().as(orElse);
      let future = new (_FutureOfT()).new();
      let subscription = this.listen(null, {onError: dart.bind(future, _completeError), onDone: dart.fn(() => {
          if (orElse != null) {
            async._runUserCode(T, orElse, dart.bind(future, _complete), dart.bind(future, _completeError));
            return;
          }
          try {
            dart.throw(_internal.IterableElementError.noElement());
          } catch (e$) {
            let e = dart.getThrown(e$);
            let s = dart.stackTrace(e$);
            if (core.Object.is(e)) {
              async._completeWithErrorCallback(future, e, s);
            } else
              throw e$;
          }
        }, VoidToNullN()), cancelOnError: true});
      subscription.onData(dart.fn(value => {
        async._runUserCode(core.bool, dart.fn(() => test(value), VoidTobool()), dart.fn(isMatch => {
          if (isMatch == null) dart.nullFailed(L28, 1424, 45, "isMatch");
          if (dart.test(isMatch)) {
            async._cancelAndValue(subscription, future, value);
          }
        }, boolToNullN()), async._cancelAndErrorClosure(subscription, future));
      }, TToNullN()));
      return future;
    }
    lastWhere(test, opts) {
      if (test == null) dart.nullFailed(L28, 1444, 28, "test");
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToNT().as(orElse);
      let future = new (_FutureOfT()).new();
      let result = null;
      let result$35isSet = false;
      function result$35get() {
        return result$35isSet ? result : dart.throw(new _internal.LateInitializationErrorImpl.new("Local 'result' has not been initialized."));
      }
      dart.fn(result$35get, VoidToT());
      function result$35set(t55) {
        result$35isSet = true;
        return result = t55;
      }
      dart.fn(result$35set, TTodynamic());
      let foundResult = false;
      let subscription = this.listen(null, {onError: dart.bind(future, _completeError), onDone: dart.fn(() => {
          if (foundResult) {
            future[_complete](result$35get());
            return;
          }
          if (orElse != null) {
            async._runUserCode(T, orElse, dart.bind(future, _complete), dart.bind(future, _completeError));
            return;
          }
          try {
            dart.throw(_internal.IterableElementError.noElement());
          } catch (e$) {
            let e = dart.getThrown(e$);
            let s = dart.stackTrace(e$);
            if (core.Object.is(e)) {
              async._completeWithErrorCallback(future, e, s);
            } else
              throw e$;
          }
        }, VoidToNullN()), cancelOnError: true});
      subscription.onData(dart.fn(value => {
        async._runUserCode(core.bool, dart.fn(() => test(value), VoidTobool()), dart.fn(isMatch => {
          if (isMatch == null) dart.nullFailed(L28, 1466, 45, "isMatch");
          if (dart.test(isMatch)) {
            foundResult = true;
            result$35set(value);
          }
        }, boolToNullN()), async._cancelAndErrorClosure(subscription, future));
      }, TToNullN()));
      return future;
    }
    singleWhere(test, opts) {
      if (test == null) dart.nullFailed(L28, 1482, 30, "test");
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToNT().as(orElse);
      let future = new (_FutureOfT()).new();
      let result = null;
      let result$35isSet = false;
      function result$35get() {
        return result$35isSet ? result : dart.throw(new _internal.LateInitializationErrorImpl.new("Local 'result' has not been initialized."));
      }
      dart.fn(result$35get, VoidToT());
      function result$35set(t60) {
        result$35isSet = true;
        return result = t60;
      }
      dart.fn(result$35set, TTodynamic());
      let foundResult = false;
      let subscription = this.listen(null, {onError: dart.bind(future, _completeError), onDone: dart.fn(() => {
          if (foundResult) {
            future[_complete](result$35get());
            return;
          }
          if (orElse != null) {
            async._runUserCode(T, orElse, dart.bind(future, _complete), dart.bind(future, _completeError));
            return;
          }
          try {
            dart.throw(_internal.IterableElementError.noElement());
          } catch (e$) {
            let e = dart.getThrown(e$);
            let s = dart.stackTrace(e$);
            if (core.Object.is(e)) {
              async._completeWithErrorCallback(future, e, s);
            } else
              throw e$;
          }
        }, VoidToNullN()), cancelOnError: true});
      subscription.onData(dart.fn(value => {
        async._runUserCode(core.bool, dart.fn(() => test(value), VoidTobool()), dart.fn(isMatch => {
          if (isMatch == null) dart.nullFailed(L28, 1504, 45, "isMatch");
          if (dart.test(isMatch)) {
            if (foundResult) {
              try {
                dart.throw(_internal.IterableElementError.tooMany());
              } catch (e$) {
                let e = dart.getThrown(e$);
                let s = dart.stackTrace(e$);
                if (core.Object.is(e)) {
                  async._cancelAndErrorWithReplacement(subscription, future, e, s);
                } else
                  throw e$;
              }
              return;
            }
            foundResult = true;
            result$35set(value);
          }
        }, boolToNullN()), async._cancelAndErrorClosure(subscription, future));
      }, TToNullN()));
      return future;
    }
    elementAt(index) {
      if (index == null) dart.nullFailed(L28, 1538, 27, "index");
      core.RangeError.checkNotNegative(index, "index");
      let result = new (_FutureOfT()).new();
      let elementIndex = 0;
      let subscription = null;
      subscription = this.listen(null, {onError: dart.bind(result, _completeError), onDone: dart.fn(() => {
          result[_completeError](new core.IndexError.new(index, this, "index", null, elementIndex), core.StackTrace.empty);
        }, VoidToNullN()), cancelOnError: true});
      subscription.onData(dart.fn(value => {
        if (index === elementIndex) {
          async._cancelAndValue(subscription, result, value);
          return;
        }
        elementIndex = elementIndex + 1;
      }, TToNullN()));
      return result;
    }
    timeout(timeLimit, opts) {
      if (timeLimit == null) dart.nullFailed(L28, 1587, 30, "timeLimit");
      let onTimeout = opts && 'onTimeout' in opts ? opts.onTimeout : null;
      let controller = null;
      if (dart.test(this.isBroadcast)) {
        controller = new (_SyncBroadcastStreamControllerOfT()).new(null, null);
      } else {
        controller = new (_SyncStreamControllerOfT()).new(null, null, null, null);
      }
      let zone = async.Zone.current;
      let timeoutCallback = null;
      if (onTimeout == null) {
        timeoutCallback = dart.fn(() => {
          controller.addError(new async.TimeoutException.new("No stream event", timeLimit), null);
        }, VoidToNullN());
      } else {
        let registeredOnTimeout = zone.registerUnaryCallback(dart.void, EventSinkOfT(), onTimeout);
        let wrapper = new (_ControllerEventSinkWrapperOfT()).new(null);
        timeoutCallback = dart.fn(() => {
          wrapper[_sink$] = controller;
          zone.runUnaryGuarded(_ControllerEventSinkWrapperOfT(), registeredOnTimeout, wrapper);
          wrapper[_sink$] = null;
        }, VoidToNullN());
      }
      controller.onListen = dart.fn(() => {
        let t64, t64$;
        let timer = zone.createTimer(timeLimit, timeoutCallback);
        let subscription = this.listen(null);
        t64 = subscription;
        (() => {
          t64.onData(dart.fn(event => {
            timer.cancel();
            timer = zone.createTimer(timeLimit, timeoutCallback);
            controller.add(event);
          }, TToNullN()));
          t64.onError(dart.fn((error, stackTrace) => {
            if (error == null) dart.nullFailed(L28, 1631, 27, "error");
            if (stackTrace == null) dart.nullFailed(L28, 1631, 45, "stackTrace");
            timer.cancel();
            timer = zone.createTimer(timeLimit, timeoutCallback);
            controller[_addError](error, stackTrace);
          }, ObjectAndStackTraceToNullN()));
          t64.onDone(dart.fn(() => {
            timer.cancel();
            controller.close();
          }, VoidToNullN()));
          return t64;
        })();
        controller.onCancel = dart.fn(() => {
          timer.cancel();
          return subscription.cancel();
        }, VoidToFutureOfvoid());
        if (!dart.test(this.isBroadcast)) {
          t64$ = controller;
          (() => {
            t64$.onPause = dart.fn(() => {
              timer.cancel();
              subscription.pause();
            }, VoidToNullN());
            t64$.onResume = dart.fn(() => {
              subscription.resume();
              timer = zone.createTimer(timeLimit, timeoutCallback);
            }, VoidToNullN());
            return t64$;
          })();
        }
      }, VoidToNullN());
      return controller.stream;
    }
  }
  (Stream.new = function() {
    ;
  }).prototype = Stream.prototype;
  (Stream._internal = function() {
    ;
  }).prototype = Stream.prototype;
  dart.addTypeTests(Stream);
  Stream.prototype[dart.isStream] = true;
  dart.addTypeCaches(Stream);
  dart.setMethodSignature(Stream, () => ({
    __proto__: dart.getMethods(Stream.__proto__),
    asBroadcastStream: dart.fnType(async.Stream$(T), [], {onCancel: dart.nullable(dart.fnType(dart.void, [async.StreamSubscription$(T)])), onListen: dart.nullable(dart.fnType(dart.void, [async.StreamSubscription$(T)]))}, {}),
    where: dart.fnType(async.Stream$(T), [dart.fnType(core.bool, [T])]),
    map: dart.gFnType(S => [async.Stream$(S), [dart.fnType(S, [T])]], S => [dart.nullable(core.Object)]),
    asyncMap: dart.gFnType(E => [async.Stream$(E), [dart.fnType(async.FutureOr$(E), [T])]], E => [dart.nullable(core.Object)]),
    asyncExpand: dart.gFnType(E => [async.Stream$(E), [dart.fnType(dart.nullable(async.Stream$(E)), [T])]], E => [dart.nullable(core.Object)]),
    handleError: dart.fnType(async.Stream$(T), [core.Function], {test: dart.nullable(dart.fnType(core.bool, [dart.dynamic]))}, {}),
    expand: dart.gFnType(S => [async.Stream$(S), [dart.fnType(core.Iterable$(S), [T])]], S => [dart.nullable(core.Object)]),
    pipe: dart.fnType(async.Future, [dart.nullable(core.Object)]),
    transform: dart.gFnType(S => [async.Stream$(S), [dart.nullable(core.Object)]], S => [dart.nullable(core.Object)]),
    reduce: dart.fnType(async.Future$(T), [dart.nullable(core.Object)]),
    fold: dart.gFnType(S => [async.Future$(S), [S, dart.fnType(S, [S, T])]], S => [dart.nullable(core.Object)]),
    join: dart.fnType(async.Future$(core.String), [], [core.String]),
    contains: dart.fnType(async.Future$(core.bool), [dart.nullable(core.Object)]),
    forEach: dart.fnType(async.Future, [dart.fnType(dart.void, [T])]),
    every: dart.fnType(async.Future$(core.bool), [dart.fnType(core.bool, [T])]),
    any: dart.fnType(async.Future$(core.bool), [dart.fnType(core.bool, [T])]),
    cast: dart.gFnType(R => [async.Stream$(R), []], R => [dart.nullable(core.Object)]),
    toList: dart.fnType(async.Future$(core.List$(T)), []),
    toSet: dart.fnType(async.Future$(core.Set$(T)), []),
    drain: dart.gFnType(E => [async.Future$(E), [], [dart.nullable(E)]], E => [dart.nullable(core.Object)]),
    take: dart.fnType(async.Stream$(T), [core.int]),
    takeWhile: dart.fnType(async.Stream$(T), [dart.fnType(core.bool, [T])]),
    skip: dart.fnType(async.Stream$(T), [core.int]),
    skipWhile: dart.fnType(async.Stream$(T), [dart.fnType(core.bool, [T])]),
    distinct: dart.fnType(async.Stream$(T), [], [dart.nullable(dart.fnType(core.bool, [T, T]))]),
    firstWhere: dart.fnType(async.Future$(T), [dart.fnType(core.bool, [T])], {orElse: dart.nullable(core.Object)}, {}),
    lastWhere: dart.fnType(async.Future$(T), [dart.fnType(core.bool, [T])], {orElse: dart.nullable(core.Object)}, {}),
    singleWhere: dart.fnType(async.Future$(T), [dart.fnType(core.bool, [T])], {orElse: dart.nullable(core.Object)}, {}),
    elementAt: dart.fnType(async.Future$(T), [core.int]),
    timeout: dart.fnType(async.Stream$(T), [core.Duration], {onTimeout: dart.nullable(dart.fnType(dart.void, [async.EventSink$(T)]))}, {})
  }));
  dart.setGetterSignature(Stream, () => ({
    __proto__: dart.getGetters(Stream.__proto__),
    isBroadcast: core.bool,
    length: async.Future$(core.int),
    isEmpty: async.Future$(core.bool),
    first: async.Future$(T),
    last: async.Future$(T),
    single: async.Future$(T)
  }));
  dart.setLibraryUri(Stream, L29);
  return Stream;
});
async.Stream = async.Stream$();
dart.addTypeTests(async.Stream, dart.isStream);
const _is_CastStream_default = Symbol('_is_CastStream_default');
_internal.CastStream$ = dart.generic((S, T) => {
  var CastStreamSubscriptionOfS$T = () => (CastStreamSubscriptionOfS$T = dart.constFn(_internal.CastStreamSubscription$(S, T)))();
  class CastStream extends async.Stream$(T) {
    get isBroadcast() {
      return this[_source$].isBroadcast;
    }
    listen(onData, opts) {
      let t30;
      let onError = opts && 'onError' in opts ? opts.onError : null;
      let onDone = opts && 'onDone' in opts ? opts.onDone : null;
      let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
      t30 = new (CastStreamSubscriptionOfS$T()).new(this[_source$].listen(null, {onDone: onDone, cancelOnError: cancelOnError}));
      return (() => {
        t30.onData(onData);
        t30.onError(onError);
        return t30;
      })();
    }
    cast(R) {
      return new (_internal.CastStream$(S, R)).new(this[_source$]);
    }
  }
  (CastStream.new = function(_source) {
    if (_source == null) dart.nullFailed(L27, 11, 19, "_source");
    this[_source$] = _source;
    CastStream.__proto__.new.call(this);
    ;
  }).prototype = CastStream.prototype;
  dart.addTypeTests(CastStream);
  CastStream.prototype[_is_CastStream_default] = true;
  dart.addTypeCaches(CastStream);
  dart.setMethodSignature(CastStream, () => ({
    __proto__: dart.getMethods(CastStream.__proto__),
    listen: dart.fnType(async.StreamSubscription$(T), [dart.nullable(dart.fnType(dart.void, [T]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {}),
    cast: dart.gFnType(R => [async.Stream$(R), []], R => [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(CastStream, L25);
  dart.setFieldSignature(CastStream, () => ({
    __proto__: dart.getFields(CastStream.__proto__),
    [_source$]: dart.finalFieldType(async.Stream$(S))
  }));
  return CastStream;
});
_internal.CastStream = _internal.CastStream$();
dart.addTypeTests(_internal.CastStream, _is_CastStream_default);
var _zone = dart.privateName(_internal, "_zone");
var _handleData = dart.privateName(_internal, "_handleData");
var _handleError = dart.privateName(_internal, "_handleError");
var _onData = dart.privateName(_internal, "_onData");
const _is_CastStreamSubscription_default = Symbol('_is_CastStreamSubscription_default');
_internal.CastStreamSubscription$ = dart.generic((S, T) => {
  class CastStreamSubscription extends core.Object {
    cancel() {
      return this[_source$].cancel();
    }
    onData(handleData) {
      this[_handleData] = handleData == null ? null : this[_zone].registerUnaryCallback(dart.dynamic, T, handleData);
    }
    onError(handleError) {
      this[_source$].onError(handleError);
      if (handleError == null) {
        this[_handleError] = null;
      } else if (ObjectAndStackTraceTovoid().is(handleError)) {
        this[_handleError] = this[_zone].registerBinaryCallback(dart.dynamic, core.Object, core.StackTrace, handleError);
      } else if (ObjectTovoid().is(handleError)) {
        this[_handleError] = this[_zone].registerUnaryCallback(dart.dynamic, core.Object, handleError);
      } else {
        dart.throw(new core.ArgumentError.new(dart.str("handleError callback must take either an Object ") + dart.str("(the error), or both an Object (the error) and a StackTrace.")));
      }
    }
    onDone(handleDone) {
      this[_source$].onDone(handleDone);
    }
    [_onData](data) {
      S.as(data);
      if (this[_handleData] == null) return;
      let targetData = null;
      try {
        targetData = T.as(data);
      } catch (e) {
        let error = dart.getThrown(e);
        let stack = dart.stackTrace(e);
        if (core.Object.is(error)) {
          let handleError = this[_handleError];
          if (handleError == null) {
            this[_zone].handleUncaughtError(error, stack);
          } else if (ObjectAndStackTraceTovoid().is(handleError)) {
            this[_zone].runBinaryGuarded(core.Object, core.StackTrace, handleError, error, stack);
          } else {
            this[_zone].runUnaryGuarded(core.Object, ObjectTovoid().as(handleError), error);
          }
          return;
        } else
          throw e;
      }
      this[_zone].runUnaryGuarded(T, dart.nullCheck(this[_handleData]), targetData);
    }
    pause(resumeSignal = null) {
      this[_source$].pause(resumeSignal);
    }
    resume() {
      this[_source$].resume();
    }
    get isPaused() {
      return this[_source$].isPaused;
    }
    asFuture(E, futureValue = null) {
      return this[_source$].asFuture(E, futureValue);
    }
  }
  (CastStreamSubscription.new = function(_source) {
    if (_source == null) dart.nullFailed(L27, 37, 31, "_source");
    this[_zone] = async.Zone.current;
    this[_handleData] = null;
    this[_handleError] = null;
    this[_source$] = _source;
    this[_source$].onData(dart.bind(this, _onData));
  }).prototype = CastStreamSubscription.prototype;
  CastStreamSubscription.prototype[dart.isStreamSubscription] = true;
  dart.addTypeTests(CastStreamSubscription);
  CastStreamSubscription.prototype[_is_CastStreamSubscription_default] = true;
  dart.addTypeCaches(CastStreamSubscription);
  CastStreamSubscription[dart.implements] = () => [async.StreamSubscription$(T)];
  dart.setMethodSignature(CastStreamSubscription, () => ({
    __proto__: dart.getMethods(CastStreamSubscription.__proto__),
    cancel: dart.fnType(async.Future, []),
    onData: dart.fnType(dart.void, [dart.nullable(dart.fnType(dart.void, [T]))]),
    onError: dart.fnType(dart.void, [dart.nullable(core.Function)]),
    onDone: dart.fnType(dart.void, [dart.nullable(dart.fnType(dart.void, []))]),
    [_onData]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    pause: dart.fnType(dart.void, [], [dart.nullable(async.Future)]),
    resume: dart.fnType(dart.void, []),
    asFuture: dart.gFnType(E => [async.Future$(E), [], [dart.nullable(E)]], E => [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(CastStreamSubscription, () => ({
    __proto__: dart.getGetters(CastStreamSubscription.__proto__),
    isPaused: core.bool
  }));
  dart.setLibraryUri(CastStreamSubscription, L25);
  dart.setFieldSignature(CastStreamSubscription, () => ({
    __proto__: dart.getFields(CastStreamSubscription.__proto__),
    [_source$]: dart.finalFieldType(async.StreamSubscription$(S)),
    [_zone]: dart.finalFieldType(async.Zone),
    [_handleData]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [T]))),
    [_handleError]: dart.fieldType(dart.nullable(core.Function))
  }));
  return CastStreamSubscription;
});
_internal.CastStreamSubscription = _internal.CastStreamSubscription$();
dart.addTypeTests(_internal.CastStreamSubscription, _is_CastStreamSubscription_default);
const _is_StreamTransformerBase_default = Symbol('_is_StreamTransformerBase_default');
async.StreamTransformerBase$ = dart.generic((S, T) => {
  class StreamTransformerBase extends core.Object {
    cast(RS, RT) {
      return async.StreamTransformer.castFrom(S, T, RS, RT, this);
    }
  }
  (StreamTransformerBase.new = function() {
    ;
  }).prototype = StreamTransformerBase.prototype;
  dart.addTypeTests(StreamTransformerBase);
  StreamTransformerBase.prototype[_is_StreamTransformerBase_default] = true;
  dart.addTypeCaches(StreamTransformerBase);
  StreamTransformerBase[dart.implements] = () => [async.StreamTransformer$(S, T)];
  dart.setMethodSignature(StreamTransformerBase, () => ({
    __proto__: dart.getMethods(StreamTransformerBase.__proto__),
    cast: dart.gFnType((RS, RT) => [async.StreamTransformer$(RS, RT), []], (RS, RT) => [dart.nullable(core.Object), dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(StreamTransformerBase, L29);
  return StreamTransformerBase;
});
async.StreamTransformerBase = async.StreamTransformerBase$();
dart.addTypeTests(async.StreamTransformerBase, _is_StreamTransformerBase_default);
const _is_CastStreamTransformer_default = Symbol('_is_CastStreamTransformer_default');
_internal.CastStreamTransformer$ = dart.generic((SS, ST, TS, TT) => {
  var StreamOfTS = () => (StreamOfTS = dart.constFn(async.Stream$(TS)))();
  class CastStreamTransformer extends async.StreamTransformerBase$(TS, TT) {
    cast(RS, RT) {
      return new (_internal.CastStreamTransformer$(SS, ST, RS, RT)).new(this[_source$]);
    }
    bind(stream) {
      StreamOfTS().as(stream);
      if (stream == null) dart.nullFailed(L27, 108, 30, "stream");
      return this[_source$].bind(stream.cast(SS)).cast(TT);
    }
  }
  (CastStreamTransformer.new = function(_source) {
    if (_source == null) dart.nullFailed(L27, 104, 30, "_source");
    this[_source$] = _source;
    CastStreamTransformer.__proto__.new.call(this);
    ;
  }).prototype = CastStreamTransformer.prototype;
  dart.addTypeTests(CastStreamTransformer);
  CastStreamTransformer.prototype[_is_CastStreamTransformer_default] = true;
  dart.addTypeCaches(CastStreamTransformer);
  dart.setMethodSignature(CastStreamTransformer, () => ({
    __proto__: dart.getMethods(CastStreamTransformer.__proto__),
    cast: dart.gFnType((RS, RT) => [async.StreamTransformer$(RS, RT), []], (RS, RT) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    bind: dart.fnType(async.Stream$(TT), [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(CastStreamTransformer, L25);
  dart.setFieldSignature(CastStreamTransformer, () => ({
    __proto__: dart.getFields(CastStreamTransformer.__proto__),
    [_source$]: dart.finalFieldType(async.StreamTransformer$(SS, ST))
  }));
  return CastStreamTransformer;
});
_internal.CastStreamTransformer = _internal.CastStreamTransformer$();
dart.addTypeTests(_internal.CastStreamTransformer, _is_CastStreamTransformer_default);
const _is_Converter_default = Symbol('_is_Converter_default');
convert.Converter$ = dart.generic((S, T) => {
  var StreamOfS = () => (StreamOfS = dart.constFn(async.Stream$(S)))();
  var SinkOfT = () => (SinkOfT = dart.constFn(core.Sink$(T)))();
  var StreamOfT = () => (StreamOfT = dart.constFn(async.Stream$(T)))();
  class Converter extends async.StreamTransformerBase$(S, T) {
    static castFrom(SS, ST, TS, TT, source) {
      if (source == null) dart.nullFailed(L30, 21, 71, "source");
      return new (_internal.CastConverter$(SS, ST, TS, TT)).new(source);
    }
    fuse(TT, other) {
      convert.Converter$(T, TT).as(other);
      if (other == null) dart.nullFailed(L30, 31, 46, "other");
      return new (convert._FusedConverter$(S, T, TT)).new(this, other);
    }
    startChunkedConversion(sink) {
      SinkOfT().as(sink);
      if (sink == null) dart.nullFailed(L30, 39, 42, "sink");
      dart.throw(new core.UnsupportedError.new(dart.str("This converter does not support chunked conversions: ") + dart.str(this)));
    }
    bind(stream) {
      StreamOfS().as(stream);
      if (stream == null) dart.nullFailed(L30, 44, 28, "stream");
      return StreamOfT().eventTransformed(stream, dart.fn(sink => {
        if (sink == null) dart.nullFailed(L30, 46, 28, "sink");
        return new convert._ConverterStreamEventSink.new(this, sink);
      }, EventSinkTo_ConverterStreamEventSink()));
    }
    cast(RS, RT) {
      return convert.Converter.castFrom(S, T, RS, RT, this);
    }
  }
  (Converter.new = function() {
    Converter.__proto__.new.call(this);
    ;
  }).prototype = Converter.prototype;
  dart.addTypeTests(Converter);
  Converter.prototype[_is_Converter_default] = true;
  dart.addTypeCaches(Converter);
  dart.setMethodSignature(Converter, () => ({
    __proto__: dart.getMethods(Converter.__proto__),
    fuse: dart.gFnType(TT => [convert.Converter$(S, TT), [dart.nullable(core.Object)]], TT => [dart.nullable(core.Object)]),
    startChunkedConversion: dart.fnType(core.Sink$(S), [dart.nullable(core.Object)]),
    bind: dart.fnType(async.Stream$(T), [dart.nullable(core.Object)]),
    cast: dart.gFnType((RS, RT) => [convert.Converter$(RS, RT), []], (RS, RT) => [dart.nullable(core.Object), dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(Converter, L31);
  return Converter;
});
convert.Converter = convert.Converter$();
dart.addTypeTests(convert.Converter, _is_Converter_default);
const _is_CastConverter_default = Symbol('_is_CastConverter_default');
_internal.CastConverter$ = dart.generic((SS, ST, TS, TT) => {
  var StreamOfTS = () => (StreamOfTS = dart.constFn(async.Stream$(TS)))();
  class CastConverter extends convert.Converter$(TS, TT) {
    convert(input) {
      TS.as(input);
      return TT.as(this[_source$].convert(SS.as(input)));
    }
    bind(stream) {
      StreamOfTS().as(stream);
      if (stream == null) dart.nullFailed(L27, 120, 30, "stream");
      return this[_source$].bind(stream.cast(SS)).cast(TT);
    }
    cast(RS, RT) {
      return new (_internal.CastConverter$(SS, ST, RS, RT)).new(this[_source$]);
    }
  }
  (CastConverter.new = function(_source) {
    if (_source == null) dart.nullFailed(L27, 114, 22, "_source");
    this[_source$] = _source;
    CastConverter.__proto__.new.call(this);
    ;
  }).prototype = CastConverter.prototype;
  dart.addTypeTests(CastConverter);
  CastConverter.prototype[_is_CastConverter_default] = true;
  dart.addTypeCaches(CastConverter);
  dart.setMethodSignature(CastConverter, () => ({
    __proto__: dart.getMethods(CastConverter.__proto__),
    convert: dart.fnType(TT, [dart.nullable(core.Object)]),
    cast: dart.gFnType((RS, RT) => [convert.Converter$(RS, RT), []], (RS, RT) => [dart.nullable(core.Object), dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(CastConverter, L25);
  dart.setFieldSignature(CastConverter, () => ({
    __proto__: dart.getFields(CastConverter.__proto__),
    [_source$]: dart.finalFieldType(convert.Converter$(SS, ST))
  }));
  return CastConverter;
});
_internal.CastConverter = _internal.CastConverter$();
dart.addTypeTests(_internal.CastConverter, _is_CastConverter_default);
_internal.BytesBuilder = class BytesBuilder extends core.Object {
  static new(opts) {
    let copy = opts && 'copy' in opts ? opts.copy : true;
    if (copy == null) dart.nullFailed(L32, 30, 30, "copy");
    return dart.test(copy) ? new _internal._CopyingBytesBuilder.new() : new _internal._BytesBuilder.new();
  }
};
(_internal.BytesBuilder[dart.mixinNew] = function() {
}).prototype = _internal.BytesBuilder.prototype;
dart.addTypeTests(_internal.BytesBuilder);
dart.addTypeCaches(_internal.BytesBuilder);
dart.setLibraryUri(_internal.BytesBuilder, L25);
var _length$ = dart.privateName(_internal, "_length");
var _buffer = dart.privateName(_internal, "_buffer");
var _grow = dart.privateName(_internal, "_grow");
var _clear = dart.privateName(_internal, "_clear");
_internal._CopyingBytesBuilder = class _CopyingBytesBuilder extends core.Object {
  add(bytes) {
    if (bytes == null) dart.nullFailed(L32, 89, 22, "bytes");
    let byteCount = bytes[$length];
    if (byteCount === 0) return;
    let required = dart.notNull(this[_length$]) + dart.notNull(byteCount);
    if (dart.notNull(this[_buffer][$length]) < required) {
      this[_grow](required);
    }
    if (!(dart.notNull(this[_buffer][$length]) >= required)) dart.assertFailed(null, L32, 96, 12, "_buffer.length >= required");
    if (typed_data.Uint8List.is(bytes)) {
      this[_buffer][$setRange](this[_length$], required, bytes);
    } else {
      for (let i = 0; i < dart.notNull(byteCount); i = i + 1) {
        this[_buffer][$_set](dart.notNull(this[_length$]) + i, bytes[$_get](i));
      }
    }
    this[_length$] = required;
  }
  addByte(byte) {
    if (byte == null) dart.nullFailed(L32, 107, 20, "byte");
    if (this[_buffer][$length] == this[_length$]) {
      this[_grow](this[_length$]);
    }
    if (!(dart.notNull(this[_buffer][$length]) > dart.notNull(this[_length$]))) dart.assertFailed(null, L32, 113, 12, "_buffer.length > _length");
    this[_buffer][$_set](this[_length$], byte);
    this[_length$] = dart.notNull(this[_length$]) + 1;
  }
  [_grow](required) {
    if (required == null) dart.nullFailed(L32, 118, 18, "required");
    let newSize = dart.notNull(required) * 2;
    if (dart.notNull(newSize) < 1024) {
      newSize = 1024;
    } else {
      newSize = _internal._CopyingBytesBuilder._pow2roundup(newSize);
    }
    let newBuffer = _native_typed_data.NativeUint8List.new(newSize);
    newBuffer[$setRange](0, this[_buffer][$length], this[_buffer]);
    this[_buffer] = newBuffer;
  }
  takeBytes() {
    if (this[_length$] === 0) return _internal._CopyingBytesBuilder._emptyList;
    let buffer = typed_data.Uint8List.view(this[_buffer][$buffer], this[_buffer][$offsetInBytes], this[_length$]);
    this[_clear]();
    return buffer;
  }
  toBytes() {
    if (this[_length$] === 0) return _internal._CopyingBytesBuilder._emptyList;
    return _native_typed_data.NativeUint8List.fromList(typed_data.Uint8List.view(this[_buffer][$buffer], this[_buffer][$offsetInBytes], this[_length$]));
  }
  get length() {
    return this[_length$];
  }
  get isEmpty() {
    return this[_length$] === 0;
  }
  get isNotEmpty() {
    return this[_length$] !== 0;
  }
  clear() {
    this[_clear]();
  }
  [_clear]() {
    this[_length$] = 0;
    this[_buffer] = _internal._CopyingBytesBuilder._emptyList;
  }
  static _pow2roundup(x) {
    if (x == null) dart.nullFailed(L32, 161, 31, "x");
    if (!(dart.notNull(x) > 0)) dart.assertFailed(null, L32, 162, 12, "x > 0");
    x = dart.notNull(x) - 1;
    x = (dart.notNull(x) | x[$rightShift](1)) >>> 0;
    x = (dart.notNull(x) | x[$rightShift](2)) >>> 0;
    x = (dart.notNull(x) | x[$rightShift](4)) >>> 0;
    x = (dart.notNull(x) | x[$rightShift](8)) >>> 0;
    x = (dart.notNull(x) | x[$rightShift](16)) >>> 0;
    return dart.notNull(x) + 1;
  }
};
(_internal._CopyingBytesBuilder.new = function() {
  this[_length$] = 0;
  this[_buffer] = _internal._CopyingBytesBuilder._emptyList;
  ;
}).prototype = _internal._CopyingBytesBuilder.prototype;
dart.addTypeTests(_internal._CopyingBytesBuilder);
dart.addTypeCaches(_internal._CopyingBytesBuilder);
_internal._CopyingBytesBuilder[dart.implements] = () => [_internal.BytesBuilder];
dart.setMethodSignature(_internal._CopyingBytesBuilder, () => ({
  __proto__: dart.getMethods(_internal._CopyingBytesBuilder.__proto__),
  add: dart.fnType(dart.void, [core.List$(core.int)]),
  addByte: dart.fnType(dart.void, [core.int]),
  [_grow]: dart.fnType(dart.void, [core.int]),
  takeBytes: dart.fnType(typed_data.Uint8List, []),
  toBytes: dart.fnType(typed_data.Uint8List, []),
  clear: dart.fnType(dart.void, []),
  [_clear]: dart.fnType(dart.void, [])
}));
dart.setGetterSignature(_internal._CopyingBytesBuilder, () => ({
  __proto__: dart.getGetters(_internal._CopyingBytesBuilder.__proto__),
  length: core.int,
  isEmpty: core.bool,
  isNotEmpty: core.bool
}));
dart.setLibraryUri(_internal._CopyingBytesBuilder, L25);
dart.setFieldSignature(_internal._CopyingBytesBuilder, () => ({
  __proto__: dart.getFields(_internal._CopyingBytesBuilder.__proto__),
  [_length$]: dart.fieldType(core.int),
  [_buffer]: dart.fieldType(typed_data.Uint8List)
}));
dart.defineLazy(_internal._CopyingBytesBuilder, {
  /*_internal._CopyingBytesBuilder._initSize*/get _initSize() {
    return 1024;
  },
  /*_internal._CopyingBytesBuilder._emptyList*/get _emptyList() {
    return _native_typed_data.NativeUint8List.new(0);
  }
}, false);
var _chunks = dart.privateName(_internal, "_chunks");
_internal._BytesBuilder = class _BytesBuilder extends core.Object {
  add(bytes) {
    if (bytes == null) dart.nullFailed(L32, 181, 22, "bytes");
    let typedBytes = null;
    if (typed_data.Uint8List.is(bytes)) {
      typedBytes = bytes;
    } else {
      typedBytes = _native_typed_data.NativeUint8List.fromList(bytes);
    }
    this[_chunks][$add](typedBytes);
    this[_length$] = dart.notNull(this[_length$]) + dart.notNull(typedBytes[$length]);
  }
  addByte(byte) {
    let t65;
    if (byte == null) dart.nullFailed(L32, 192, 20, "byte");
    this[_chunks][$add]((t65 = _native_typed_data.NativeUint8List.new(1), (() => {
      t65[$_set](0, byte);
      return t65;
    })()));
    this[_length$] = dart.notNull(this[_length$]) + 1;
  }
  takeBytes() {
    if (this[_length$] === 0) return _internal._CopyingBytesBuilder._emptyList;
    if (this[_chunks][$length] === 1) {
      let buffer = this[_chunks][$_get](0);
      this[_clear]();
      return buffer;
    }
    let buffer = _native_typed_data.NativeUint8List.new(this[_length$]);
    let offset = 0;
    for (let chunk of this[_chunks]) {
      buffer[$setRange](offset, offset + dart.notNull(chunk[$length]), chunk);
      offset = offset + dart.notNull(chunk[$length]);
    }
    this[_clear]();
    return buffer;
  }
  toBytes() {
    if (this[_length$] === 0) return _internal._CopyingBytesBuilder._emptyList;
    let buffer = _native_typed_data.NativeUint8List.new(this[_length$]);
    let offset = 0;
    for (let chunk of this[_chunks]) {
      buffer[$setRange](offset, offset + dart.notNull(chunk[$length]), chunk);
      offset = offset + dart.notNull(chunk[$length]);
    }
    return buffer;
  }
  get length() {
    return this[_length$];
  }
  get isEmpty() {
    return this[_length$] === 0;
  }
  get isNotEmpty() {
    return this[_length$] !== 0;
  }
  clear() {
    this[_clear]();
  }
  [_clear]() {
    this[_length$] = 0;
    this[_chunks][$clear]();
  }
};
(_internal._BytesBuilder.new = function() {
  this[_length$] = 0;
  this[_chunks] = JSArrayOfUint8List().of([]);
  ;
}).prototype = _internal._BytesBuilder.prototype;
dart.addTypeTests(_internal._BytesBuilder);
dart.addTypeCaches(_internal._BytesBuilder);
_internal._BytesBuilder[dart.implements] = () => [_internal.BytesBuilder];
dart.setMethodSignature(_internal._BytesBuilder, () => ({
  __proto__: dart.getMethods(_internal._BytesBuilder.__proto__),
  add: dart.fnType(dart.void, [core.List$(core.int)]),
  addByte: dart.fnType(dart.void, [core.int]),
  takeBytes: dart.fnType(typed_data.Uint8List, []),
  toBytes: dart.fnType(typed_data.Uint8List, []),
  clear: dart.fnType(dart.void, []),
  [_clear]: dart.fnType(dart.void, [])
}));
dart.setGetterSignature(_internal._BytesBuilder, () => ({
  __proto__: dart.getGetters(_internal._BytesBuilder.__proto__),
  length: core.int,
  isEmpty: core.bool,
  isNotEmpty: core.bool
}));
dart.setLibraryUri(_internal._BytesBuilder, L25);
dart.setFieldSignature(_internal._BytesBuilder, () => ({
  __proto__: dart.getFields(_internal._BytesBuilder.__proto__),
  [_length$]: dart.fieldType(core.int),
  [_chunks]: dart.finalFieldType(core.List$(typed_data.Uint8List))
}));
core.Iterable$ = dart.generic(E => {
  var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
  var EfficientLengthIterableOfE = () => (EfficientLengthIterableOfE = dart.constFn(_internal.EfficientLengthIterable$(E)))();
  var FollowedByIterableOfE = () => (FollowedByIterableOfE = dart.constFn(_internal.FollowedByIterable$(E)))();
  var WhereIterableOfE = () => (WhereIterableOfE = dart.constFn(_internal.WhereIterable$(E)))();
  var EAndEToE = () => (EAndEToE = dart.constFn(dart.fnType(E, [E, E])))();
  var ListOfE = () => (ListOfE = dart.constFn(core.List$(E)))();
  var LinkedHashSetOfE = () => (LinkedHashSetOfE = dart.constFn(collection.LinkedHashSet$(E)))();
  var TakeIterableOfE = () => (TakeIterableOfE = dart.constFn(_internal.TakeIterable$(E)))();
  var TakeWhileIterableOfE = () => (TakeWhileIterableOfE = dart.constFn(_internal.TakeWhileIterable$(E)))();
  var SkipIterableOfE = () => (SkipIterableOfE = dart.constFn(_internal.SkipIterable$(E)))();
  var SkipWhileIterableOfE = () => (SkipWhileIterableOfE = dart.constFn(_internal.SkipWhileIterable$(E)))();
  var VoidToE = () => (VoidToE = dart.constFn(dart.fnType(E, [])))();
  var VoidToNE = () => (VoidToNE = dart.constFn(dart.nullable(VoidToE())))();
  var ETodynamic = () => (ETodynamic = dart.constFn(dart.fnType(dart.dynamic, [E])))();
  class Iterable extends core.Object {
    static generate(count, generator = null) {
      if (count == null) dart.nullFailed(L34, 106, 33, "count");
      if (dart.notNull(count) <= 0) return new (_internal.EmptyIterable$(E)).new();
      return new (core._GeneratorIterable$(E)).new(count, generator);
    }
    static castFrom(S, T, source) {
      if (source == null) dart.nullFailed(L34, 127, 49, "source");
      return _internal.CastIterable$(S, T).new(source);
    }
    [Symbol.iterator]() {
      return new dart.JsIterator(this[$iterator]);
    }
    cast(R) {
      return core.Iterable.castFrom(E, R, this);
    }
    followedBy(other) {
      IterableOfE().as(other);
      if (other == null) dart.nullFailed(L34, 179, 38, "other");
      let self = this;
      if (EfficientLengthIterableOfE().is(self)) {
        return FollowedByIterableOfE().firstEfficient(self, other);
      }
      return new (FollowedByIterableOfE()).new(this, other);
    }
    map(T, f) {
      if (f == null) dart.nullFailed(L34, 201, 24, "f");
      return _internal.MappedIterable$(E, T).new(this, f);
    }
    where(test) {
      if (test == null) dart.nullFailed(L34, 217, 26, "test");
      return new (WhereIterableOfE()).new(this, test);
    }
    whereType(T) {
      return new (_internal.WhereTypeIterable$(T)).new(this);
    }
    expand(T, f) {
      if (f == null) dart.nullFailed(L34, 252, 37, "f");
      return new (_internal.ExpandIterable$(E, T)).new(this, f);
    }
    contains(element) {
      for (let e of this) {
        if (dart.equals(e, element)) return true;
      }
      return false;
    }
    forEach(f) {
      if (f == null) dart.nullFailed(L34, 282, 21, "f");
      for (let element of this)
        f(element);
    }
    reduce(combine) {
      EAndEToE().as(combine);
      if (combine == null) dart.nullFailed(L34, 308, 14, "combine");
      let iterator = this[$iterator];
      if (!dart.test(iterator.moveNext())) {
        dart.throw(_internal.IterableElementError.noElement());
      }
      let value = iterator.current;
      while (dart.test(iterator.moveNext())) {
        value = combine(value, iterator.current);
      }
      return value;
    }
    fold(T, initialValue, combine) {
      if (combine == null) dart.nullFailed(L34, 339, 31, "combine");
      let value = initialValue;
      for (let element of this)
        value = combine(value, element);
      return value;
    }
    every(test) {
      if (test == null) dart.nullFailed(L34, 351, 19, "test");
      for (let element of this) {
        if (!dart.test(test(element))) return false;
      }
      return true;
    }
    join(separator = "") {
      if (separator == null) dart.nullFailed(L34, 366, 23, "separator");
      let iterator = this[$iterator];
      if (!dart.test(iterator.moveNext())) return "";
      let buffer = new core.StringBuffer.new();
      if (separator == null || separator === "") {
        do {
          buffer.write(dart.toString(iterator.current));
        } while (dart.test(iterator.moveNext()));
      } else {
        buffer.write(dart.toString(iterator.current));
        while (dart.test(iterator.moveNext())) {
          buffer.write(separator);
          buffer.write(dart.toString(iterator.current));
        }
      }
      return buffer.toString();
    }
    any(test) {
      if (test == null) dart.nullFailed(L34, 390, 17, "test");
      for (let element of this) {
        if (dart.test(test(element))) return true;
      }
      return false;
    }
    toList(opts) {
      let growable = opts && 'growable' in opts ? opts.growable : true;
      if (growable == null) dart.nullFailed(L34, 403, 24, "growable");
      return ListOfE().of(this, {growable: growable});
    }
    toSet() {
      return LinkedHashSetOfE().of(this);
    }
    get length() {
      if (!!_internal.EfficientLengthIterable.is(this)) dart.assertFailed(null, L34, 426, 12, "this is! EfficientLengthIterable");
      let count = 0;
      let it = this[$iterator];
      while (dart.test(it.moveNext())) {
        count = count + 1;
      }
      return count;
    }
    get isEmpty() {
      return !dart.test(this[$iterator].moveNext());
    }
    get isNotEmpty() {
      return !dart.test(this[$isEmpty]);
    }
    take(count) {
      if (count == null) dart.nullFailed(L34, 460, 24, "count");
      return TakeIterableOfE().new(this, count);
    }
    takeWhile(test) {
      if (test == null) dart.nullFailed(L34, 474, 30, "test");
      return new (TakeWhileIterableOfE()).new(this, test);
    }
    skip(count) {
      if (count == null) dart.nullFailed(L34, 494, 24, "count");
      return SkipIterableOfE().new(this, count);
    }
    skipWhile(test) {
      if (test == null) dart.nullFailed(L34, 510, 30, "test");
      return new (SkipWhileIterableOfE()).new(this, test);
    }
    get first() {
      let it = this[$iterator];
      if (!dart.test(it.moveNext())) {
        dart.throw(_internal.IterableElementError.noElement());
      }
      return it.current;
    }
    get last() {
      let it = this[$iterator];
      if (!dart.test(it.moveNext())) {
        dart.throw(_internal.IterableElementError.noElement());
      }
      let result = null;
      do {
        result = it.current;
      } while (dart.test(it.moveNext()));
      return result;
    }
    get single() {
      let it = this[$iterator];
      if (!dart.test(it.moveNext())) dart.throw(_internal.IterableElementError.noElement());
      let result = it.current;
      if (dart.test(it.moveNext())) dart.throw(_internal.IterableElementError.tooMany());
      return result;
    }
    firstWhere(test, opts) {
      if (test == null) dart.nullFailed(L34, 573, 21, "test");
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToNE().as(orElse);
      for (let element of this) {
        if (dart.test(test(element))) return element;
      }
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    lastWhere(test, opts) {
      if (test == null) dart.nullFailed(L34, 595, 20, "test");
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToNE().as(orElse);
      let result = null;
      let result$35isSet = false;
      function result$35get() {
        return result$35isSet ? result : dart.throw(new _internal.LateInitializationErrorImpl.new("Local 'result' has not been initialized."));
      }
      dart.fn(result$35get, VoidToE());
      function result$35set(t67) {
        result$35isSet = true;
        return result = t67;
      }
      dart.fn(result$35set, ETodynamic());
      let foundMatching = false;
      for (let element of this) {
        if (dart.test(test(element))) {
          result$35set(element);
          foundMatching = true;
        }
      }
      if (foundMatching) return result$35get();
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    singleWhere(test, opts) {
      if (test == null) dart.nullFailed(L34, 618, 22, "test");
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToNE().as(orElse);
      let result = null;
      let result$35isSet = false;
      function result$35get() {
        return result$35isSet ? result : dart.throw(new _internal.LateInitializationErrorImpl.new("Local 'result' has not been initialized."));
      }
      dart.fn(result$35get, VoidToE());
      function result$35set(t71) {
        result$35isSet = true;
        return result = t71;
      }
      dart.fn(result$35set, ETodynamic());
      let foundMatching = false;
      for (let element of this) {
        if (dart.test(test(element))) {
          if (foundMatching) {
            dart.throw(_internal.IterableElementError.tooMany());
          }
          result$35set(element);
          foundMatching = true;
        }
      }
      if (foundMatching) return result$35get();
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    elementAt(index) {
      if (index == null) dart.nullFailed(L34, 646, 19, "index");
      core.RangeError.checkNotNegative(index, "index");
      let elementIndex = 0;
      for (let element of this) {
        if (index === elementIndex) return element;
        elementIndex = elementIndex + 1;
      }
      dart.throw(new core.IndexError.new(index, this, "index", null, elementIndex));
    }
    toString() {
      return collection.IterableBase.iterableToShortString(this, "(", ")");
    }
  }
  (Iterable.new = function() {
    ;
  }).prototype = Iterable.prototype;
  dart.addTypeTests(Iterable);
  Iterable.prototype[dart.isIterable] = true;
  dart.addTypeCaches(Iterable);
  dart.setMethodSignature(Iterable, () => ({
    __proto__: dart.getMethods(Iterable.__proto__),
    cast: dart.gFnType(R => [core.Iterable$(R), []], R => [dart.nullable(core.Object)]),
    [$cast]: dart.gFnType(R => [core.Iterable$(R), []], R => [dart.nullable(core.Object)]),
    followedBy: dart.fnType(core.Iterable$(E), [dart.nullable(core.Object)]),
    [$followedBy]: dart.fnType(core.Iterable$(E), [dart.nullable(core.Object)]),
    map: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(T, [E])]], T => [dart.nullable(core.Object)]),
    [$map]: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(T, [E])]], T => [dart.nullable(core.Object)]),
    where: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
    [$where]: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
    whereType: dart.gFnType(T => [core.Iterable$(T), []], T => [dart.nullable(core.Object)]),
    [$whereType]: dart.gFnType(T => [core.Iterable$(T), []], T => [dart.nullable(core.Object)]),
    expand: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(core.Iterable$(T), [E])]], T => [dart.nullable(core.Object)]),
    [$expand]: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(core.Iterable$(T), [E])]], T => [dart.nullable(core.Object)]),
    contains: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    [$contains]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    forEach: dart.fnType(dart.void, [dart.fnType(dart.void, [E])]),
    [$forEach]: dart.fnType(dart.void, [dart.fnType(dart.void, [E])]),
    reduce: dart.fnType(E, [dart.nullable(core.Object)]),
    [$reduce]: dart.fnType(E, [dart.nullable(core.Object)]),
    fold: dart.gFnType(T => [T, [T, dart.fnType(T, [T, E])]], T => [dart.nullable(core.Object)]),
    [$fold]: dart.gFnType(T => [T, [T, dart.fnType(T, [T, E])]], T => [dart.nullable(core.Object)]),
    every: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
    [$every]: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
    join: dart.fnType(core.String, [], [core.String]),
    [$join]: dart.fnType(core.String, [], [core.String]),
    any: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
    [$any]: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
    toList: dart.fnType(core.List$(E), [], {growable: core.bool}, {}),
    [$toList]: dart.fnType(core.List$(E), [], {growable: core.bool}, {}),
    toSet: dart.fnType(core.Set$(E), []),
    [$toSet]: dart.fnType(core.Set$(E), []),
    take: dart.fnType(core.Iterable$(E), [core.int]),
    [$take]: dart.fnType(core.Iterable$(E), [core.int]),
    takeWhile: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
    [$takeWhile]: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
    skip: dart.fnType(core.Iterable$(E), [core.int]),
    [$skip]: dart.fnType(core.Iterable$(E), [core.int]),
    skipWhile: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
    [$skipWhile]: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
    firstWhere: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
    [$firstWhere]: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
    lastWhere: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
    [$lastWhere]: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
    singleWhere: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
    [$singleWhere]: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
    elementAt: dart.fnType(E, [core.int]),
    [$elementAt]: dart.fnType(E, [core.int])
  }));
  dart.setGetterSignature(Iterable, () => ({
    __proto__: dart.getGetters(Iterable.__proto__),
    length: core.int,
    [$length]: core.int,
    isEmpty: core.bool,
    [$isEmpty]: core.bool,
    isNotEmpty: core.bool,
    [$isNotEmpty]: core.bool,
    first: E,
    [$first]: E,
    last: E,
    [$last]: E,
    single: E,
    [$single]: E
  }));
  dart.setLibraryUri(Iterable, L8$);
  dart.defineExtensionMethods(Iterable, [
    'cast',
    'followedBy',
    'map',
    'where',
    'whereType',
    'expand',
    'contains',
    'forEach',
    'reduce',
    'fold',
    'every',
    'join',
    'any',
    'toList',
    'toSet',
    'take',
    'takeWhile',
    'skip',
    'skipWhile',
    'firstWhere',
    'lastWhere',
    'singleWhere',
    'elementAt',
    'toString'
  ]);
  dart.defineExtensionAccessors(Iterable, [
    'length',
    'isEmpty',
    'isNotEmpty',
    'first',
    'last',
    'single'
  ]);
  return Iterable;
});
core.Iterable = core.Iterable$();
dart.addTypeTests(core.Iterable, dart.isIterable);
const _is__CastIterableBase_default = Symbol('_is__CastIterableBase_default');
_internal._CastIterableBase$ = dart.generic((S, T) => {
  var CastIteratorOfS$T = () => (CastIteratorOfS$T = dart.constFn(_internal.CastIterator$(S, T)))();
  var CastIterableOfS$T = () => (CastIterableOfS$T = dart.constFn(_internal.CastIterable$(S, T)))();
  var STobool = () => (STobool = dart.constFn(dart.fnType(core.bool, [S])))();
  var VoidToS = () => (VoidToS = dart.constFn(dart.fnType(S, [])))();
  var VoidToT = () => (VoidToT = dart.constFn(dart.fnType(T, [])))();
  var VoidToNT = () => (VoidToNT = dart.constFn(dart.nullable(VoidToT())))();
  class _CastIterableBase extends core.Iterable$(T) {
    get iterator() {
      return new (CastIteratorOfS$T()).new(this[_source$][$iterator]);
    }
    get length() {
      return this[_source$][$length];
    }
    get isEmpty() {
      return this[_source$][$isEmpty];
    }
    get isNotEmpty() {
      return this[_source$][$isNotEmpty];
    }
    skip(count) {
      if (count == null) dart.nullFailed(L33, 39, 24, "count");
      return CastIterableOfS$T().new(this[_source$][$skip](count));
    }
    take(count) {
      if (count == null) dart.nullFailed(L33, 40, 24, "count");
      return CastIterableOfS$T().new(this[_source$][$take](count));
    }
    elementAt(index) {
      if (index == null) dart.nullFailed(L33, 42, 19, "index");
      return T.as(this[_source$][$elementAt](index));
    }
    get first() {
      return T.as(this[_source$][$first]);
    }
    get last() {
      return T.as(this[_source$][$last]);
    }
    get single() {
      return T.as(this[_source$][$single]);
    }
    contains(other) {
      return this[_source$][$contains](other);
    }
    lastWhere(test, opts) {
      if (test == null) dart.nullFailed(L33, 51, 20, "test");
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToNT().as(orElse);
      return T.as(this[_source$][$lastWhere](dart.fn(element => test(T.as(element)), STobool()), {orElse: orElse == null ? null : dart.fn(() => S.as(orElse()), VoidToS())}));
    }
    toString() {
      return dart.toString(this[_source$]);
    }
  }
  (_CastIterableBase.new = function() {
    _CastIterableBase.__proto__.new.call(this);
    ;
  }).prototype = _CastIterableBase.prototype;
  dart.addTypeTests(_CastIterableBase);
  _CastIterableBase.prototype[_is__CastIterableBase_default] = true;
  dart.addTypeCaches(_CastIterableBase);
  dart.setGetterSignature(_CastIterableBase, () => ({
    __proto__: dart.getGetters(_CastIterableBase.__proto__),
    iterator: core.Iterator$(T),
    [$iterator]: core.Iterator$(T)
  }));
  dart.setLibraryUri(_CastIterableBase, L25);
  dart.defineExtensionMethods(_CastIterableBase, [
    'skip',
    'take',
    'elementAt',
    'contains',
    'lastWhere',
    'toString'
  ]);
  dart.defineExtensionAccessors(_CastIterableBase, [
    'iterator',
    'length',
    'isEmpty',
    'isNotEmpty',
    'first',
    'last',
    'single'
  ]);
  return _CastIterableBase;
});
_internal._CastIterableBase = _internal._CastIterableBase$();
dart.addTypeTests(_internal._CastIterableBase, _is__CastIterableBase_default);
const _is_CastIterator_default = Symbol('_is_CastIterator_default');
_internal.CastIterator$ = dart.generic((S, T) => {
  class CastIterator extends core.Object {
    moveNext() {
      return this[_source$].moveNext();
    }
    get current() {
      return T.as(this[_source$].current);
    }
  }
  (CastIterator.new = function(_source) {
    if (_source == null) dart.nullFailed(L33, 60, 21, "_source");
    this[_source$] = _source;
    ;
  }).prototype = CastIterator.prototype;
  dart.addTypeTests(CastIterator);
  CastIterator.prototype[_is_CastIterator_default] = true;
  dart.addTypeCaches(CastIterator);
  CastIterator[dart.implements] = () => [core.Iterator$(T)];
  dart.setMethodSignature(CastIterator, () => ({
    __proto__: dart.getMethods(CastIterator.__proto__),
    moveNext: dart.fnType(core.bool, [])
  }));
  dart.setGetterSignature(CastIterator, () => ({
    __proto__: dart.getGetters(CastIterator.__proto__),
    current: T
  }));
  dart.setLibraryUri(CastIterator, L25);
  dart.setFieldSignature(CastIterator, () => ({
    __proto__: dart.getFields(CastIterator.__proto__),
    [_source$]: dart.fieldType(core.Iterator$(S))
  }));
  return CastIterator;
});
_internal.CastIterator = _internal.CastIterator$();
dart.addTypeTests(_internal.CastIterator, _is_CastIterator_default);
const _is_CastIterable_default = Symbol('_is_CastIterable_default');
var _source$0 = dart.privateName(_internal, "CastIterable._source");
_internal.CastIterable$ = dart.generic((S, T) => {
  class CastIterable extends _internal._CastIterableBase$(S, T) {
    get [_source$]() {
      return this[_source$0];
    }
    set [_source$](value) {
      super[_source$] = value;
    }
    static new(source) {
      if (source == null) dart.nullFailed(L33, 70, 36, "source");
      if (_internal.EfficientLengthIterable$(S).is(source)) {
        return new (_internal._EfficientLengthCastIterable$(S, T)).new(source);
      }
      return new (_internal.CastIterable$(S, T)).__(source);
    }
    cast(R) {
      return _internal.CastIterable$(S, R).new(this[_source$]);
    }
  }
  (CastIterable.__ = function(_source) {
    if (_source == null) dart.nullFailed(L33, 68, 23, "_source");
    this[_source$0] = _source;
    CastIterable.__proto__.new.call(this);
    ;
  }).prototype = CastIterable.prototype;
  dart.addTypeTests(CastIterable);
  CastIterable.prototype[_is_CastIterable_default] = true;
  dart.addTypeCaches(CastIterable);
  dart.setMethodSignature(CastIterable, () => ({
    __proto__: dart.getMethods(CastIterable.__proto__),
    cast: dart.gFnType(R => [core.Iterable$(R), []], R => [dart.nullable(core.Object)]),
    [$cast]: dart.gFnType(R => [core.Iterable$(R), []], R => [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(CastIterable, L25);
  dart.setFieldSignature(CastIterable, () => ({
    __proto__: dart.getFields(CastIterable.__proto__),
    [_source$]: dart.finalFieldType(core.Iterable$(S))
  }));
  dart.defineExtensionMethods(CastIterable, ['cast']);
  return CastIterable;
});
_internal.CastIterable = _internal.CastIterable$();
dart.addTypeTests(_internal.CastIterable, _is_CastIterable_default);
const _is__EfficientLengthCastIterable_default = Symbol('_is__EfficientLengthCastIterable_default');
_internal._EfficientLengthCastIterable$ = dart.generic((S, T) => {
  class _EfficientLengthCastIterable extends _internal.CastIterable$(S, T) {}
  (_EfficientLengthCastIterable.new = function(source) {
    if (source == null) dart.nullFailed(L33, 82, 59, "source");
    _EfficientLengthCastIterable.__proto__.__.call(this, source);
    ;
  }).prototype = _EfficientLengthCastIterable.prototype;
  dart.addTypeTests(_EfficientLengthCastIterable);
  _EfficientLengthCastIterable.prototype[_is__EfficientLengthCastIterable_default] = true;
  dart.addTypeCaches(_EfficientLengthCastIterable);
  _EfficientLengthCastIterable[dart.implements] = () => [_internal.EfficientLengthIterable$(T)];
  dart.setLibraryUri(_EfficientLengthCastIterable, L25);
  return _EfficientLengthCastIterable;
});
_internal._EfficientLengthCastIterable = _internal._EfficientLengthCastIterable$();
dart.addTypeTests(_internal._EfficientLengthCastIterable, _is__EfficientLengthCastIterable_default);
const _is__CastListBase_default = Symbol('_is__CastListBase_default');
_internal._CastListBase$ = dart.generic((S, T) => {
  var CastIterableOfT$S = () => (CastIterableOfT$S = dart.constFn(_internal.CastIterable$(T, S)))();
  var SAndSToint = () => (SAndSToint = dart.constFn(dart.fnType(core.int, [S, S])))();
  var STobool = () => (STobool = dart.constFn(dart.fnType(core.bool, [S])))();
  var CastIterableOfS$T = () => (CastIterableOfS$T = dart.constFn(_internal.CastIterable$(S, T)))();
  var IterableOfT = () => (IterableOfT = dart.constFn(core.Iterable$(T)))();
  var TN = () => (TN = dart.constFn(dart.nullable(T)))();
  const _CastIterableBase_ListMixin$36 = class _CastIterableBase_ListMixin extends _internal._CastIterableBase$(S, T) {};
  (_CastIterableBase_ListMixin$36.new = function() {
    _CastIterableBase_ListMixin$36.__proto__.new.call(this);
  }).prototype = _CastIterableBase_ListMixin$36.prototype;
  dart.applyMixin(_CastIterableBase_ListMixin$36, collection.ListMixin$(T));
  class _CastListBase extends _CastIterableBase_ListMixin$36 {
    _get(index) {
      if (index == null) dart.nullFailed(L33, 99, 21, "index");
      return T.as(this[_source$][$_get](index));
    }
    _set(index, value$) {
      let value = value$;
      if (index == null) dart.nullFailed(L33, 101, 25, "index");
      T.as(value);
      this[_source$][$_set](index, S.as(value));
      return value$;
    }
    set length(length) {
      if (length == null) dart.nullFailed(L33, 105, 23, "length");
      this[_source$][$length] = length;
    }
    get length() {
      return super.length;
    }
    add(value) {
      T.as(value);
      this[_source$][$add](S.as(value));
    }
    addAll(values) {
      IterableOfT().as(values);
      if (values == null) dart.nullFailed(L33, 113, 27, "values");
      this[_source$][$addAll](CastIterableOfT$S().new(values));
    }
    sort(compare = null) {
      this[_source$][$sort](compare == null ? null : dart.fn((v1, v2) => compare(T.as(v1), T.as(v2)), SAndSToint()));
    }
    shuffle(random = null) {
      this[_source$][$shuffle](random);
    }
    insert(index, element) {
      if (index == null) dart.nullFailed(L33, 126, 19, "index");
      T.as(element);
      this[_source$][$insert](index, S.as(element));
    }
    insertAll(index, elements) {
      if (index == null) dart.nullFailed(L33, 130, 22, "index");
      IterableOfT().as(elements);
      if (elements == null) dart.nullFailed(L33, 130, 41, "elements");
      this[_source$][$insertAll](index, CastIterableOfT$S().new(elements));
    }
    setAll(index, elements) {
      if (index == null) dart.nullFailed(L33, 134, 19, "index");
      IterableOfT().as(elements);
      if (elements == null) dart.nullFailed(L33, 134, 38, "elements");
      this[_source$][$setAll](index, CastIterableOfT$S().new(elements));
    }
    remove(value) {
      return this[_source$][$remove](value);
    }
    removeAt(index) {
      if (index == null) dart.nullFailed(L33, 140, 18, "index");
      return T.as(this[_source$][$removeAt](index));
    }
    removeLast() {
      return T.as(this[_source$][$removeLast]());
    }
    removeWhere(test) {
      if (test == null) dart.nullFailed(L33, 144, 25, "test");
      this[_source$][$removeWhere](dart.fn(element => test(T.as(element)), STobool()));
    }
    retainWhere(test) {
      if (test == null) dart.nullFailed(L33, 148, 25, "test");
      this[_source$][$retainWhere](dart.fn(element => test(T.as(element)), STobool()));
    }
    getRange(start, end) {
      if (start == null) dart.nullFailed(L33, 152, 28, "start");
      if (end == null) dart.nullFailed(L33, 152, 39, "end");
      return CastIterableOfS$T().new(this[_source$][$getRange](start, end));
    }
    setRange(start, end, iterable, skipCount = 0) {
      if (start == null) dart.nullFailed(L33, 155, 21, "start");
      if (end == null) dart.nullFailed(L33, 155, 32, "end");
      IterableOfT().as(iterable);
      if (iterable == null) dart.nullFailed(L33, 155, 49, "iterable");
      if (skipCount == null) dart.nullFailed(L33, 155, 64, "skipCount");
      this[_source$][$setRange](start, end, CastIterableOfT$S().new(iterable), skipCount);
    }
    removeRange(start, end) {
      if (start == null) dart.nullFailed(L33, 159, 24, "start");
      if (end == null) dart.nullFailed(L33, 159, 35, "end");
      this[_source$][$removeRange](start, end);
    }
    fillRange(start, end, fillValue = null) {
      if (start == null) dart.nullFailed(L33, 163, 22, "start");
      if (end == null) dart.nullFailed(L33, 163, 33, "end");
      TN().as(fillValue);
      this[_source$][$fillRange](start, end, S.as(fillValue));
    }
    replaceRange(start, end, replacement) {
      if (start == null) dart.nullFailed(L33, 167, 25, "start");
      if (end == null) dart.nullFailed(L33, 167, 36, "end");
      IterableOfT().as(replacement);
      if (replacement == null) dart.nullFailed(L33, 167, 53, "replacement");
      this[_source$][$replaceRange](start, end, CastIterableOfT$S().new(replacement));
    }
  }
  (_CastListBase.new = function() {
    _CastListBase.__proto__.new.call(this);
    ;
  }).prototype = _CastListBase.prototype;
  dart.addTypeTests(_CastListBase);
  _CastListBase.prototype[_is__CastListBase_default] = true;
  dart.addTypeCaches(_CastListBase);
  dart.setMethodSignature(_CastListBase, () => ({
    __proto__: dart.getMethods(_CastListBase.__proto__),
    _get: dart.fnType(T, [core.int]),
    [$_get]: dart.fnType(T, [core.int]),
    _set: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
    [$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)])
  }));
  dart.setSetterSignature(_CastListBase, () => ({
    __proto__: dart.getSetters(_CastListBase.__proto__),
    length: core.int,
    [$length]: core.int
  }));
  dart.setLibraryUri(_CastListBase, L25);
  dart.defineExtensionMethods(_CastListBase, [
    '_get',
    '_set',
    'add',
    'addAll',
    'sort',
    'shuffle',
    'insert',
    'insertAll',
    'setAll',
    'remove',
    'removeAt',
    'removeLast',
    'removeWhere',
    'retainWhere',
    'getRange',
    'setRange',
    'removeRange',
    'fillRange',
    'replaceRange'
  ]);
  dart.defineExtensionAccessors(_CastListBase, ['length']);
  return _CastListBase;
});
_internal._CastListBase = _internal._CastListBase$();
dart.addTypeTests(_internal._CastListBase, _is__CastListBase_default);
const _is_CastList_default = Symbol('_is_CastList_default');
var _source$1 = dart.privateName(_internal, "CastList._source");
_internal.CastList$ = dart.generic((S, T) => {
  class CastList extends _internal._CastListBase$(S, T) {
    get [_source$]() {
      return this[_source$1];
    }
    set [_source$](value) {
      super[_source$] = value;
    }
    cast(R) {
      return new (_internal.CastList$(S, R)).new(this[_source$]);
    }
  }
  (CastList.new = function(_source) {
    if (_source == null) dart.nullFailed(L33, 174, 17, "_source");
    this[_source$1] = _source;
    CastList.__proto__.new.call(this);
    ;
  }).prototype = CastList.prototype;
  dart.addTypeTests(CastList);
  CastList.prototype[_is_CastList_default] = true;
  dart.addTypeCaches(CastList);
  dart.setMethodSignature(CastList, () => ({
    __proto__: dart.getMethods(CastList.__proto__),
    cast: dart.gFnType(R => [core.List$(R), []], R => [dart.nullable(core.Object)]),
    [$cast]: dart.gFnType(R => [core.List$(R), []], R => [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(CastList, L25);
  dart.setFieldSignature(CastList, () => ({
    __proto__: dart.getFields(CastList.__proto__),
    [_source$]: dart.finalFieldType(core.List$(S))
  }));
  dart.defineExtensionMethods(CastList, ['cast']);
  return CastList;
});
_internal.CastList = _internal.CastList$();
dart.addTypeTests(_internal.CastList, _is_CastList_default);
var _emptySet$ = dart.privateName(_internal, "_emptySet");
var _conditionalAdd = dart.privateName(_internal, "_conditionalAdd");
var _clone = dart.privateName(_internal, "_clone");
const _is_CastSet_default = Symbol('_is_CastSet_default');
var _source$2 = dart.privateName(_internal, "CastSet._source");
_internal.CastSet$ = dart.generic((S, T) => {
  var CastIterableOfT$S = () => (CastIterableOfT$S = dart.constFn(_internal.CastIterable$(T, S)))();
  var STobool = () => (STobool = dart.constFn(dart.fnType(core.bool, [S])))();
  var CastSetOfS$T = () => (CastSetOfS$T = dart.constFn(_internal.CastSet$(S, T)))();
  var IterableOfT = () => (IterableOfT = dart.constFn(core.Iterable$(T)))();
  var _HashSetOfT = () => (_HashSetOfT = dart.constFn(collection._HashSet$(T)))();
  var SetOfT = () => (SetOfT = dart.constFn(core.Set$(T)))();
  class CastSet extends _internal._CastIterableBase$(S, T) {
    get [_source$]() {
      return this[_source$2];
    }
    set [_source$](value) {
      super[_source$] = value;
    }
    static _defaultEmptySet(R) {
      return new (collection._HashSet$(R)).new();
    }
    cast(R) {
      return new (_internal.CastSet$(S, R)).new(this[_source$], this[_emptySet$]);
    }
    add(value) {
      T.as(value);
      return this[_source$].add(S.as(value));
    }
    addAll(elements) {
      IterableOfT().as(elements);
      if (elements == null) dart.nullFailed(L33, 194, 27, "elements");
      this[_source$].addAll(CastIterableOfT$S().new(elements));
    }
    remove(object) {
      return this[_source$].remove(object);
    }
    removeAll(objects) {
      if (objects == null) dart.nullFailed(L33, 200, 36, "objects");
      this[_source$].removeAll(objects);
    }
    retainAll(objects) {
      if (objects == null) dart.nullFailed(L33, 204, 36, "objects");
      this[_source$].retainAll(objects);
    }
    removeWhere(test) {
      if (test == null) dart.nullFailed(L33, 208, 25, "test");
      this[_source$].removeWhere(dart.fn(element => test(T.as(element)), STobool()));
    }
    retainWhere(test) {
      if (test == null) dart.nullFailed(L33, 212, 25, "test");
      this[_source$].retainWhere(dart.fn(element => test(T.as(element)), STobool()));
    }
    containsAll(objects) {
      if (objects == null) dart.nullFailed(L33, 216, 38, "objects");
      return this[_source$].containsAll(objects);
    }
    intersection(other) {
      if (other == null) dart.nullFailed(L33, 218, 36, "other");
      if (this[_emptySet$] != null) return this[_conditionalAdd](other, true);
      return new (CastSetOfS$T()).new(this[_source$].intersection(other), null);
    }
    difference(other) {
      if (other == null) dart.nullFailed(L33, 223, 34, "other");
      if (this[_emptySet$] != null) return this[_conditionalAdd](other, false);
      return new (CastSetOfS$T()).new(this[_source$].difference(other), null);
    }
    [_conditionalAdd](other, otherContains) {
      if (other == null) dart.nullFailed(L33, 228, 39, "other");
      if (otherContains == null) dart.nullFailed(L33, 228, 51, "otherContains");
      let emptySet = this[_emptySet$];
      let result = emptySet == null ? new (_HashSetOfT()).new() : emptySet(T);
      for (let element of this[_source$]) {
        let castElement = T.as(element);
        if (dart.equals(otherContains, other.contains(castElement))) result.add(castElement);
      }
      return result;
    }
    union(other) {
      let t73;
      SetOfT().as(other);
      if (other == null) dart.nullFailed(L33, 238, 23, "other");
      t73 = this[_clone]();
      return (() => {
        t73.addAll(other);
        return t73;
      })();
    }
    clear() {
      this[_source$].clear();
    }
    [_clone]() {
      let emptySet = this[_emptySet$];
      let result = emptySet == null ? new (_HashSetOfT()).new() : emptySet(T);
      result.addAll(this);
      return result;
    }
    toSet() {
      return this[_clone]();
    }
    lookup(key) {
      return T.as(this[_source$].lookup(key));
    }
  }
  (CastSet.new = function(_source, _emptySet) {
    if (_source == null) dart.nullFailed(L33, 187, 16, "_source");
    this[_source$2] = _source;
    this[_emptySet$] = _emptySet;
    CastSet.__proto__.new.call(this);
    ;
  }).prototype = CastSet.prototype;
  dart.addTypeTests(CastSet);
  CastSet.prototype[_is_CastSet_default] = true;
  dart.addTypeCaches(CastSet);
  CastSet[dart.implements] = () => [core.Set$(T)];
  dart.setMethodSignature(CastSet, () => ({
    __proto__: dart.getMethods(CastSet.__proto__),
    cast: dart.gFnType(R => [core.Set$(R), []], R => [dart.nullable(core.Object)]),
    [$cast]: dart.gFnType(R => [core.Set$(R), []], R => [dart.nullable(core.Object)]),
    add: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    addAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    remove: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    removeAll: dart.fnType(dart.void, [core.Iterable$(dart.nullable(core.Object))]),
    retainAll: dart.fnType(dart.void, [core.Iterable$(dart.nullable(core.Object))]),
    removeWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [T])]),
    retainWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [T])]),
    containsAll: dart.fnType(core.bool, [core.Iterable$(dart.nullable(core.Object))]),
    intersection: dart.fnType(core.Set$(T), [core.Set$(dart.nullable(core.Object))]),
    difference: dart.fnType(core.Set$(T), [core.Set$(dart.nullable(core.Object))]),
    [_conditionalAdd]: dart.fnType(core.Set$(T), [core.Set$(dart.nullable(core.Object)), core.bool]),
    union: dart.fnType(core.Set$(T), [dart.nullable(core.Object)]),
    clear: dart.fnType(dart.void, []),
    [_clone]: dart.fnType(core.Set$(T), []),
    lookup: dart.fnType(T, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(CastSet, L25);
  dart.setFieldSignature(CastSet, () => ({
    __proto__: dart.getFields(CastSet.__proto__),
    [_source$]: dart.finalFieldType(core.Set$(S)),
    [_emptySet$]: dart.finalFieldType(dart.nullable(dart.gFnType(R => [core.Set$(R), []], R => [dart.nullable(core.Object)])))
  }));
  dart.defineExtensionMethods(CastSet, ['cast', 'toSet']);
  return CastSet;
});
_internal.CastSet = _internal.CastSet$();
dart.addTypeTests(_internal.CastSet, _is_CastSet_default);
var C19;
const _is_MapMixin_default = Symbol('_is_MapMixin_default');
collection.MapMixin$ = dart.generic((K, V) => {
  var MapOfK$V = () => (MapOfK$V = dart.constFn(core.Map$(K, V)))();
  var KAndVToV = () => (KAndVToV = dart.constFn(dart.fnType(V, [K, V])))();
  var MapEntryOfK$V = () => (MapEntryOfK$V = dart.constFn(core.MapEntry$(K, V)))();
  var KToMapEntryOfK$V = () => (KToMapEntryOfK$V = dart.constFn(dart.fnType(MapEntryOfK$V(), [K])))();
  var IterableOfMapEntryOfK$V = () => (IterableOfMapEntryOfK$V = dart.constFn(core.Iterable$(MapEntryOfK$V())))();
  var JSArrayOfK = () => (JSArrayOfK = dart.constFn(_interceptors.JSArray$(K)))();
  var _MapBaseValueIterableOfK$V = () => (_MapBaseValueIterableOfK$V = dart.constFn(collection._MapBaseValueIterable$(K, V)))();
  var VoidToV = () => (VoidToV = dart.constFn(dart.fnType(V, [])))();
  var VToV = () => (VToV = dart.constFn(dart.fnType(V, [V])))();
  var VoidToNV = () => (VoidToNV = dart.constFn(dart.nullable(VoidToV())))();
  class MapMixin extends core.Object {
    cast(RK, RV) {
      return core.Map.castFrom(K, V, RK, RV, this);
    }
    forEach(action) {
      if (action == null) dart.nullFailed(L35, 121, 21, "action");
      for (let key of this[$keys]) {
        action(key, V.as(this[$_get](key)));
      }
    }
    addAll(other) {
      MapOfK$V().as(other);
      if (other == null) dart.nullFailed(L35, 127, 25, "other");
      for (let key of other[$keys]) {
        this[$_set](key, V.as(other[$_get](key)));
      }
    }
    containsValue(value) {
      for (let key of this[$keys]) {
        if (dart.equals(this[$_get](key), value)) return true;
      }
      return false;
    }
    putIfAbsent(key, ifAbsent) {
      let t74, t73;
      K.as(key);
      VoidToV().as(ifAbsent);
      if (ifAbsent == null) dart.nullFailed(L35, 140, 26, "ifAbsent");
      if (dart.test(this[$containsKey](key))) {
        return V.as(this[$_get](key));
      }
      t73 = key;
      t74 = ifAbsent();
      this[$_set](t73, t74);
      return t74;
    }
    update(key, update, opts) {
      let t74, t73, t74$, t73$;
      K.as(key);
      VToV().as(update);
      if (update == null) dart.nullFailed(L35, 147, 21, "update");
      let ifAbsent = opts && 'ifAbsent' in opts ? opts.ifAbsent : null;
      VoidToNV().as(ifAbsent);
      if (dart.test(this[$containsKey](key))) {
        t73 = key;
        t74 = update(V.as(this[$_get](key)));
        this[$_set](t73, t74);
        return t74;
      }
      if (ifAbsent != null) {
        t73$ = key;
        t74$ = ifAbsent();
        this[$_set](t73$, t74$);
        return t74$;
      }
      dart.throw(new core.ArgumentError.value(key, "key", "Key not in map."));
    }
    updateAll(update) {
      KAndVToV().as(update);
      if (update == null) dart.nullFailed(L35, 157, 20, "update");
      for (let key of this[$keys]) {
        this[$_set](key, update(key, V.as(this[$_get](key))));
      }
    }
    get entries() {
      return this[$keys][$map](MapEntryOfK$V(), dart.fn(key => new (MapEntryOfK$V()).__(key, V.as(this[$_get](key))), KToMapEntryOfK$V()));
    }
    map(K2, V2, transform) {
      if (transform == null) dart.nullFailed(L35, 167, 44, "transform");
      let result = new (_js_helper.LinkedMap$(K2, V2)).new();
      for (let key of this[$keys]) {
        let entry = transform(key, V.as(this[$_get](key)));
        result[$_set](entry.key, entry.value);
      }
      return result;
    }
    addEntries(newEntries) {
      IterableOfMapEntryOfK$V().as(newEntries);
      if (newEntries == null) dart.nullFailed(L35, 176, 44, "newEntries");
      for (let entry of newEntries) {
        this[$_set](entry.key, entry.value);
      }
    }
    removeWhere(test) {
      if (test == null) dart.nullFailed(L35, 182, 25, "test");
      let keysToRemove = JSArrayOfK().of([]);
      for (let key of this[$keys]) {
        if (dart.test(test(key, V.as(this[$_get](key))))) keysToRemove[$add](key);
      }
      for (let key of keysToRemove) {
        this[$remove](key);
      }
    }
    containsKey(key) {
      return this[$keys][$contains](key);
    }
    get length() {
      return this[$keys][$length];
    }
    get isEmpty() {
      return this[$keys][$isEmpty];
    }
    get isNotEmpty() {
      return this[$keys][$isNotEmpty];
    }
    get values() {
      return new (_MapBaseValueIterableOfK$V()).new(this);
    }
    toString() {
      return collection.MapBase.mapToString(this);
    }
  }
  (MapMixin.new = function() {
    ;
  }).prototype = MapMixin.prototype;
  MapMixin.prototype[dart.isMap] = true;
  dart.addTypeTests(MapMixin);
  MapMixin.prototype[_is_MapMixin_default] = true;
  dart.addTypeCaches(MapMixin);
  MapMixin[dart.implements] = () => [core.Map$(K, V)];
  dart.setMethodSignature(MapMixin, () => ({
    __proto__: dart.getMethods(MapMixin.__proto__),
    cast: dart.gFnType((RK, RV) => [core.Map$(RK, RV), []], (RK, RV) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    [$cast]: dart.gFnType((RK, RV) => [core.Map$(RK, RV), []], (RK, RV) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    forEach: dart.fnType(dart.void, [dart.fnType(dart.void, [K, V])]),
    [$forEach]: dart.fnType(dart.void, [dart.fnType(dart.void, [K, V])]),
    addAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    [$addAll]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    containsValue: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    [$containsValue]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    putIfAbsent: dart.fnType(V, [dart.nullable(core.Object), dart.nullable(core.Object)]),
    [$putIfAbsent]: dart.fnType(V, [dart.nullable(core.Object), dart.nullable(core.Object)]),
    update: dart.fnType(V, [dart.nullable(core.Object), dart.nullable(core.Object)], {ifAbsent: dart.nullable(core.Object)}, {}),
    [$update]: dart.fnType(V, [dart.nullable(core.Object), dart.nullable(core.Object)], {ifAbsent: dart.nullable(core.Object)}, {}),
    updateAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    [$updateAll]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    map: dart.gFnType((K2, V2) => [core.Map$(K2, V2), [dart.fnType(core.MapEntry$(K2, V2), [K, V])]], (K2, V2) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    [$map]: dart.gFnType((K2, V2) => [core.Map$(K2, V2), [dart.fnType(core.MapEntry$(K2, V2), [K, V])]], (K2, V2) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    addEntries: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    [$addEntries]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    removeWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [K, V])]),
    [$removeWhere]: dart.fnType(dart.void, [dart.fnType(core.bool, [K, V])]),
    containsKey: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    [$containsKey]: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(MapMixin, () => ({
    __proto__: dart.getGetters(MapMixin.__proto__),
    entries: core.Iterable$(core.MapEntry$(K, V)),
    [$entries]: core.Iterable$(core.MapEntry$(K, V)),
    length: core.int,
    [$length]: core.int,
    isEmpty: core.bool,
    [$isEmpty]: core.bool,
    isNotEmpty: core.bool,
    [$isNotEmpty]: core.bool,
    values: core.Iterable$(V),
    [$values]: core.Iterable$(V)
  }));
  dart.setLibraryUri(MapMixin, L23);
  dart.defineExtensionMethods(MapMixin, [
    'cast',
    'forEach',
    'addAll',
    'containsValue',
    'putIfAbsent',
    'update',
    'updateAll',
    'map',
    'addEntries',
    'removeWhere',
    'containsKey',
    'toString'
  ]);
  dart.defineExtensionAccessors(MapMixin, [
    'entries',
    'length',
    'isEmpty',
    'isNotEmpty',
    'values'
  ]);
  return MapMixin;
});
collection.MapMixin = collection.MapMixin$();
dart.addTypeTests(collection.MapMixin, _is_MapMixin_default);
const _is_MapBase_default = Symbol('_is_MapBase_default');
collection.MapBase$ = dart.generic((K, V) => {
  class MapBase extends collection.MapMixin$(K, V) {
    static mapToString(m) {
      if (m == null) dart.nullFailed(L35, 22, 51, "m");
      if (dart.test(collection._isToStringVisiting(m))) {
        return "{...}";
      }
      let result = new core.StringBuffer.new();
      try {
        collection._toStringVisiting[$add](m);
        result.write("{");
        let first = true;
        m[$forEach](dart.fn((k, v) => {
          if (!first) {
            result.write(", ");
          }
          first = false;
          result.write(k);
          result.write(": ");
          result.write(v);
        }, ObjectNAndObjectNToNullN()));
        result.write("}");
      } finally {
        if (!core.identical(collection._toStringVisiting[$last], m)) dart.assertFailed(null, L35, 44, 14, "identical(_toStringVisiting.last, m)");
        collection._toStringVisiting[$removeLast]();
      }
      return result.toString();
    }
    static _id(x) {
      return x;
    }
    static _fillMapWithMappedIterable(map, iterable, key, value) {
      if (map == null) dart.nullFailed(L35, 58, 29, "map");
      if (iterable == null) dart.nullFailed(L35, 59, 25, "iterable");
      key == null ? key = C19 || CT.C19 : null;
      value == null ? value = C19 || CT.C19 : null;
      if (key == null) dart.throw("!");
      if (value == null) dart.throw("!");
      for (let element of iterable) {
        map[$_set](key(element), value(element));
      }
    }
    static _fillMapWithIterables(map, keys, values) {
      if (map == null) dart.nullFailed(L35, 77, 59, "map");
      if (keys == null) dart.nullFailed(L35, 78, 25, "keys");
      if (values == null) dart.nullFailed(L35, 78, 49, "values");
      let keyIterator = keys[$iterator];
      let valueIterator = values[$iterator];
      let hasNextKey = keyIterator.moveNext();
      let hasNextValue = valueIterator.moveNext();
      while (dart.test(hasNextKey) && dart.test(hasNextValue)) {
        map[$_set](keyIterator.current, valueIterator.current);
        hasNextKey = keyIterator.moveNext();
        hasNextValue = valueIterator.moveNext();
      }
      if (dart.test(hasNextKey) || dart.test(hasNextValue)) {
        dart.throw(new core.ArgumentError.new("Iterables do not have same length."));
      }
    }
  }
  (MapBase.new = function() {
    ;
  }).prototype = MapBase.prototype;
  dart.addTypeTests(MapBase);
  MapBase.prototype[_is_MapBase_default] = true;
  dart.addTypeCaches(MapBase);
  dart.setLibraryUri(MapBase, L23);
  return MapBase;
});
collection.MapBase = collection.MapBase$();
dart.addTypeTests(collection.MapBase, _is_MapBase_default);
const _is_CastMap_default = Symbol('_is_CastMap_default');
_internal.CastMap$ = dart.generic((SK, SV, K, V) => {
  var CastMapOfK$V$SK$SV = () => (CastMapOfK$V$SK$SV = dart.constFn(_internal.CastMap$(K, V, SK, SV)))();
  var SKAndSVToNullN = () => (SKAndSVToNullN = dart.constFn(dart.fnType(core.Null, [SK, SV])))();
  var CastIterableOfSK$K = () => (CastIterableOfSK$K = dart.constFn(_internal.CastIterable$(SK, K)))();
  var SKAndSVToSV = () => (SKAndSVToSV = dart.constFn(dart.fnType(SV, [SK, SV])))();
  var MapEntryOfSK$SV = () => (MapEntryOfSK$SV = dart.constFn(core.MapEntry$(SK, SV)))();
  var MapEntryOfSK$SVToMapEntryOfK$V = () => (MapEntryOfSK$SVToMapEntryOfK$V = dart.constFn(dart.fnType(MapEntryOfK$V(), [MapEntryOfSK$SV()])))();
  var SKAndSVTobool = () => (SKAndSVTobool = dart.constFn(dart.fnType(core.bool, [SK, SV])))();
  var VoidToSV = () => (VoidToSV = dart.constFn(dart.fnType(SV, [])))();
  var CastIterableOfSV$V = () => (CastIterableOfSV$V = dart.constFn(_internal.CastIterable$(SV, V)))();
  var SVToSV = () => (SVToSV = dart.constFn(dart.fnType(SV, [SV])))();
  var MapOfK$V = () => (MapOfK$V = dart.constFn(core.Map$(K, V)))();
  var KAndVToV = () => (KAndVToV = dart.constFn(dart.fnType(V, [K, V])))();
  var MapEntryOfK$V = () => (MapEntryOfK$V = dart.constFn(core.MapEntry$(K, V)))();
  var IterableOfMapEntryOfK$V = () => (IterableOfMapEntryOfK$V = dart.constFn(core.Iterable$(MapEntryOfK$V())))();
  var VN = () => (VN = dart.constFn(dart.nullable(V)))();
  var VoidToV = () => (VoidToV = dart.constFn(dart.fnType(V, [])))();
  var VToV = () => (VToV = dart.constFn(dart.fnType(V, [V])))();
  var VoidToNV = () => (VoidToNV = dart.constFn(dart.nullable(VoidToV())))();
  class CastMap extends collection.MapBase$(K, V) {
    cast(RK, RV) {
      return new (_internal.CastMap$(SK, SV, RK, RV)).new(this[_source$]);
    }
    containsValue(value) {
      return this[_source$][$containsValue](value);
    }
    containsKey(key) {
      return this[_source$][$containsKey](key);
    }
    _get(key) {
      return VN().as(this[_source$][$_get](key));
    }
    _set(key, value$) {
      let value = value$;
      K.as(key);
      V.as(value);
      this[_source$][$_set](SK.as(key), SV.as(value));
      return value$;
    }
    putIfAbsent(key, ifAbsent) {
      K.as(key);
      VoidToV().as(ifAbsent);
      if (ifAbsent == null) dart.nullFailed(L33, 273, 37, "ifAbsent");
      return V.as(this[_source$][$putIfAbsent](SK.as(key), dart.fn(() => SV.as(ifAbsent()), VoidToSV())));
    }
    addAll(other) {
      MapOfK$V().as(other);
      if (other == null) dart.nullFailed(L33, 276, 25, "other");
      this[_source$][$addAll](new (CastMapOfK$V$SK$SV()).new(other));
    }
    remove(key) {
      return V.as(this[_source$][$remove](key));
    }
    clear() {
      this[_source$][$clear]();
    }
    forEach(f) {
      if (f == null) dart.nullFailed(L33, 286, 21, "f");
      this[_source$][$forEach](dart.fn((key, value) => {
        f(K.as(key), V.as(value));
      }, SKAndSVToNullN()));
    }
    get keys() {
      return CastIterableOfSK$K().new(this[_source$][$keys]);
    }
    get values() {
      return CastIterableOfSV$V().new(this[_source$][$values]);
    }
    get length() {
      return this[_source$][$length];
    }
    get isEmpty() {
      return this[_source$][$isEmpty];
    }
    get isNotEmpty() {
      return this[_source$][$isNotEmpty];
    }
    update(key, update, opts) {
      K.as(key);
      VToV().as(update);
      if (update == null) dart.nullFailed(L33, 302, 21, "update");
      let ifAbsent = opts && 'ifAbsent' in opts ? opts.ifAbsent : null;
      VoidToNV().as(ifAbsent);
      return V.as(this[_source$][$update](SK.as(key), dart.fn(value => SV.as(update(V.as(value))), SVToSV()), {ifAbsent: ifAbsent == null ? null : dart.fn(() => SV.as(ifAbsent()), VoidToSV())}));
    }
    updateAll(update) {
      KAndVToV().as(update);
      if (update == null) dart.nullFailed(L33, 307, 20, "update");
      this[_source$][$updateAll](dart.fn((key, value) => SV.as(update(K.as(key), V.as(value))), SKAndSVToSV()));
    }
    get entries() {
      return this[_source$][$entries][$map](MapEntryOfK$V(), dart.fn(e => {
        if (e == null) dart.nullFailed(L33, 313, 27, "e");
        return new (MapEntryOfK$V()).__(K.as(e.key), V.as(e.value));
      }, MapEntryOfSK$SVToMapEntryOfK$V()));
    }
    addEntries(entries) {
      IterableOfMapEntryOfK$V().as(entries);
      if (entries == null) dart.nullFailed(L33, 316, 44, "entries");
      for (let entry of entries) {
        this[_source$][$_set](SK.as(entry.key), SV.as(entry.value));
      }
    }
    removeWhere(test) {
      if (test == null) dart.nullFailed(L33, 322, 25, "test");
      this[_source$][$removeWhere](dart.fn((key, value) => test(K.as(key), V.as(value)), SKAndSVTobool()));
    }
  }
  (CastMap.new = function(_source) {
    if (_source == null) dart.nullFailed(L33, 259, 16, "_source");
    this[_source$] = _source;
    ;
  }).prototype = CastMap.prototype;
  dart.addTypeTests(CastMap);
  CastMap.prototype[_is_CastMap_default] = true;
  dart.addTypeCaches(CastMap);
  dart.setMethodSignature(CastMap, () => ({
    __proto__: dart.getMethods(CastMap.__proto__),
    cast: dart.gFnType((RK, RV) => [core.Map$(RK, RV), []], (RK, RV) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    [$cast]: dart.gFnType((RK, RV) => [core.Map$(RK, RV), []], (RK, RV) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    _get: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
    [$_get]: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
    _set: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
    [$_set]: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
    remove: dart.fnType(V, [dart.nullable(core.Object)]),
    [$remove]: dart.fnType(V, [dart.nullable(core.Object)]),
    clear: dart.fnType(dart.void, []),
    [$clear]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(CastMap, () => ({
    __proto__: dart.getGetters(CastMap.__proto__),
    keys: core.Iterable$(K),
    [$keys]: core.Iterable$(K)
  }));
  dart.setLibraryUri(CastMap, L25);
  dart.setFieldSignature(CastMap, () => ({
    __proto__: dart.getFields(CastMap.__proto__),
    [_source$]: dart.finalFieldType(core.Map$(SK, SV))
  }));
  dart.defineExtensionMethods(CastMap, [
    'cast',
    'containsValue',
    'containsKey',
    '_get',
    '_set',
    'putIfAbsent',
    'addAll',
    'remove',
    'clear',
    'forEach',
    'update',
    'updateAll',
    'addEntries',
    'removeWhere'
  ]);
  dart.defineExtensionAccessors(CastMap, [
    'keys',
    'values',
    'length',
    'isEmpty',
    'isNotEmpty',
    'entries'
  ]);
  return CastMap;
});
_internal.CastMap = _internal.CastMap$();
dart.addTypeTests(_internal.CastMap, _is_CastMap_default);
const _is_CastQueue_default = Symbol('_is_CastQueue_default');
var _source$3 = dart.privateName(_internal, "CastQueue._source");
_internal.CastQueue$ = dart.generic((S, T) => {
  var CastIterableOfT$S = () => (CastIterableOfT$S = dart.constFn(_internal.CastIterable$(T, S)))();
  var STobool = () => (STobool = dart.constFn(dart.fnType(core.bool, [S])))();
  var IterableOfT = () => (IterableOfT = dart.constFn(core.Iterable$(T)))();
  class CastQueue extends _internal._CastIterableBase$(S, T) {
    get [_source$]() {
      return this[_source$3];
    }
    set [_source$](value) {
      super[_source$] = value;
    }
    cast(R) {
      return new (_internal.CastQueue$(S, R)).new(this[_source$]);
    }
    removeFirst() {
      return T.as(this[_source$].removeFirst());
    }
    removeLast() {
      return T.as(this[_source$].removeLast());
    }
    add(value) {
      T.as(value);
      this[_source$].add(S.as(value));
    }
    addFirst(value) {
      T.as(value);
      this[_source$].addFirst(S.as(value));
    }
    addLast(value) {
      T.as(value);
      this[_source$].addLast(S.as(value));
    }
    remove(other) {
      return this[_source$].remove(other);
    }
    addAll(elements) {
      IterableOfT().as(elements);
      if (elements == null) dart.nullFailed(L33, 348, 27, "elements");
      this[_source$].addAll(CastIterableOfT$S().new(elements));
    }
    removeWhere(test) {
      if (test == null) dart.nullFailed(L33, 352, 25, "test");
      this[_source$].removeWhere(dart.fn(element => test(T.as(element)), STobool()));
    }
    retainWhere(test) {
      if (test == null) dart.nullFailed(L33, 356, 25, "test");
      this[_source$].retainWhere(dart.fn(element => test(T.as(element)), STobool()));
    }
    clear() {
      this[_source$].clear();
    }
  }
  (CastQueue.new = function(_source) {
    if (_source == null) dart.nullFailed(L33, 329, 18, "_source");
    this[_source$3] = _source;
    CastQueue.__proto__.new.call(this);
    ;
  }).prototype = CastQueue.prototype;
  dart.addTypeTests(CastQueue);
  CastQueue.prototype[_is_CastQueue_default] = true;
  dart.addTypeCaches(CastQueue);
  CastQueue[dart.implements] = () => [collection.Queue$(T)];
  dart.setMethodSignature(CastQueue, () => ({
    __proto__: dart.getMethods(CastQueue.__proto__),
    cast: dart.gFnType(R => [collection.Queue$(R), []], R => [dart.nullable(core.Object)]),
    [$cast]: dart.gFnType(R => [collection.Queue$(R), []], R => [dart.nullable(core.Object)]),
    removeFirst: dart.fnType(T, []),
    removeLast: dart.fnType(T, []),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    addFirst: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    addLast: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    remove: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    addAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    removeWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [T])]),
    retainWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [T])]),
    clear: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(CastQueue, L25);
  dart.setFieldSignature(CastQueue, () => ({
    __proto__: dart.getFields(CastQueue.__proto__),
    [_source$]: dart.finalFieldType(collection.Queue$(S))
  }));
  dart.defineExtensionMethods(CastQueue, ['cast']);
  return CastQueue;
});
_internal.CastQueue = _internal.CastQueue$();
dart.addTypeTests(_internal.CastQueue, _is_CastQueue_default);
var _message$ = dart.privateName(_internal, "_message");
_internal.LateInitializationErrorImpl = class LateInitializationErrorImpl extends core.Error {
  toString() {
    let message = this[_message$];
    return message != null ? dart.str("LateInitializationError: ") + dart.str(message) : "LateInitializationError";
  }
};
(_internal.LateInitializationErrorImpl.new = function(_message = null) {
  this[_message$] = _message;
  _internal.LateInitializationErrorImpl.__proto__.new.call(this);
  ;
}).prototype = _internal.LateInitializationErrorImpl.prototype;
dart.addTypeTests(_internal.LateInitializationErrorImpl);
dart.addTypeCaches(_internal.LateInitializationErrorImpl);
_internal.LateInitializationErrorImpl[dart.implements] = () => [core.LateInitializationError];
dart.setLibraryUri(_internal.LateInitializationErrorImpl, L25);
dart.setFieldSignature(_internal.LateInitializationErrorImpl, () => ({
  __proto__: dart.getFields(_internal.LateInitializationErrorImpl.__proto__),
  [_message$]: dart.finalFieldType(dart.nullable(core.String))
}));
dart.defineExtensionMethods(_internal.LateInitializationErrorImpl, ['toString']);
const _is_EfficientLengthIterable_default = Symbol('_is_EfficientLengthIterable_default');
_internal.EfficientLengthIterable$ = dart.generic(T => {
  class EfficientLengthIterable extends core.Iterable$(T) {}
  (EfficientLengthIterable.new = function() {
    EfficientLengthIterable.__proto__.new.call(this);
    ;
  }).prototype = EfficientLengthIterable.prototype;
  dart.addTypeTests(EfficientLengthIterable);
  EfficientLengthIterable.prototype[_is_EfficientLengthIterable_default] = true;
  dart.addTypeCaches(EfficientLengthIterable);
  dart.setLibraryUri(EfficientLengthIterable, L25);
  return EfficientLengthIterable;
});
_internal.EfficientLengthIterable = _internal.EfficientLengthIterable$();
dart.addTypeTests(_internal.EfficientLengthIterable, _is_EfficientLengthIterable_default);
const _is_ListIterable_default = Symbol('_is_ListIterable_default');
_internal.ListIterable$ = dart.generic(E => {
  var ListIteratorOfE = () => (ListIteratorOfE = dart.constFn(_internal.ListIterator$(E)))();
  var VoidToE = () => (VoidToE = dart.constFn(dart.fnType(E, [])))();
  var VoidToNE = () => (VoidToNE = dart.constFn(dart.nullable(VoidToE())))();
  var ETodynamic = () => (ETodynamic = dart.constFn(dart.fnType(dart.dynamic, [E])))();
  var EAndEToE = () => (EAndEToE = dart.constFn(dart.fnType(E, [E, E])))();
  var SubListIterableOfE = () => (SubListIterableOfE = dart.constFn(_internal.SubListIterable$(E)))();
  var ListOfE = () => (ListOfE = dart.constFn(core.List$(E)))();
  var _HashSetOfE = () => (_HashSetOfE = dart.constFn(collection._HashSet$(E)))();
  class ListIterable extends _internal.EfficientLengthIterable$(E) {
    get iterator() {
      return new (ListIteratorOfE()).new(this);
    }
    forEach(action) {
      if (action == null) dart.nullFailed(L36, 36, 21, "action");
      let length = this.length;
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        action(this.elementAt(i));
        if (length != this.length) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
    }
    get isEmpty() {
      return this.length === 0;
    }
    get first() {
      if (this.length === 0) dart.throw(_internal.IterableElementError.noElement());
      return this.elementAt(0);
    }
    get last() {
      if (this.length === 0) dart.throw(_internal.IterableElementError.noElement());
      return this.elementAt(dart.notNull(this.length) - 1);
    }
    get single() {
      if (this.length === 0) dart.throw(_internal.IterableElementError.noElement());
      if (dart.notNull(this.length) > 1) dart.throw(_internal.IterableElementError.tooMany());
      return this.elementAt(0);
    }
    contains(element) {
      let length = this.length;
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        if (dart.equals(this.elementAt(i), element)) return true;
        if (length != this.length) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
      return false;
    }
    every(test) {
      if (test == null) dart.nullFailed(L36, 75, 19, "test");
      let length = this.length;
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        if (!dart.test(test(this.elementAt(i)))) return false;
        if (length != this.length) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
      return true;
    }
    any(test) {
      if (test == null) dart.nullFailed(L36, 86, 17, "test");
      let length = this.length;
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        if (dart.test(test(this.elementAt(i)))) return true;
        if (length != this.length) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
      return false;
    }
    firstWhere(test, opts) {
      if (test == null) dart.nullFailed(L36, 97, 21, "test");
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToNE().as(orElse);
      let length = this.length;
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        let element = this.elementAt(i);
        if (dart.test(test(element))) return element;
        if (length != this.length) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    lastWhere(test, opts) {
      if (test == null) dart.nullFailed(L36, 110, 20, "test");
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToNE().as(orElse);
      let length = this.length;
      for (let i = dart.notNull(length) - 1; i >= 0; i = i - 1) {
        let element = this.elementAt(i);
        if (dart.test(test(element))) return element;
        if (length != this.length) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    singleWhere(test, opts) {
      if (test == null) dart.nullFailed(L36, 123, 22, "test");
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToNE().as(orElse);
      let length = this.length;
      let match = null;
      let match$35isSet = false;
      function match$35get() {
        return match$35isSet ? match : dart.throw(new _internal.LateInitializationErrorImpl.new("Local 'match' has not been initialized."));
      }
      dart.fn(match$35get, VoidToE());
      function match$35set(t75) {
        match$35isSet = true;
        return match = t75;
      }
      dart.fn(match$35set, ETodynamic());
      let matchFound = false;
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        let element = this.elementAt(i);
        if (dart.test(test(element))) {
          if (matchFound) {
            dart.throw(_internal.IterableElementError.tooMany());
          }
          matchFound = true;
          match$35set(element);
        }
        if (length != this.length) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
      if (matchFound) return match$35get();
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    join(separator = "") {
      if (separator == null) dart.nullFailed(L36, 145, 23, "separator");
      let length = this.length;
      if (!separator[$isEmpty]) {
        if (length === 0) return "";
        let first = dart.str(this.elementAt(0));
        if (length != this.length) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
        let buffer = new core.StringBuffer.new(first);
        for (let i = 1; i < dart.notNull(length); i = i + 1) {
          buffer.write(separator);
          buffer.write(this.elementAt(i));
          if (length != this.length) {
            dart.throw(new core.ConcurrentModificationError.new(this));
          }
        }
        return buffer.toString();
      } else {
        let buffer = new core.StringBuffer.new();
        for (let i = 0; i < dart.notNull(length); i = i + 1) {
          buffer.write(this.elementAt(i));
          if (length != this.length) {
            dart.throw(new core.ConcurrentModificationError.new(this));
          }
        }
        return buffer.toString();
      }
    }
    where(test) {
      if (test == null) dart.nullFailed(L36, 174, 26, "test");
      return super[$where](test);
    }
    map(T, f) {
      if (f == null) dart.nullFailed(L36, 176, 24, "f");
      return new (_internal.MappedListIterable$(E, T)).new(this, f);
    }
    reduce(combine) {
      EAndEToE().as(combine);
      if (combine == null) dart.nullFailed(L36, 178, 14, "combine");
      let length = this.length;
      if (length === 0) dart.throw(_internal.IterableElementError.noElement());
      let value = this.elementAt(0);
      for (let i = 1; i < dart.notNull(length); i = i + 1) {
        value = combine(value, this.elementAt(i));
        if (length != this.length) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
      return value;
    }
    fold(T, initialValue, combine) {
      if (combine == null) dart.nullFailed(L36, 191, 31, "combine");
      let value = initialValue;
      let length = this.length;
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        value = combine(value, this.elementAt(i));
        if (length != this.length) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
      return value;
    }
    skip(count) {
      if (count == null) dart.nullFailed(L36, 203, 24, "count");
      return new (SubListIterableOfE()).new(this, count, null);
    }
    skipWhile(test) {
      if (test == null) dart.nullFailed(L36, 205, 30, "test");
      return super[$skipWhile](test);
    }
    take(count) {
      if (count == null) dart.nullFailed(L36, 207, 24, "count");
      return new (SubListIterableOfE()).new(this, 0, count);
    }
    takeWhile(test) {
      if (test == null) dart.nullFailed(L36, 209, 30, "test");
      return super[$takeWhile](test);
    }
    toList(opts) {
      let growable = opts && 'growable' in opts ? opts.growable : true;
      if (growable == null) dart.nullFailed(L36, 211, 24, "growable");
      return ListOfE().of(this, {growable: growable});
    }
    toSet() {
      let result = new (_HashSetOfE()).new();
      for (let i = 0; i < dart.notNull(this.length); i = i + 1) {
        result.add(this.elementAt(i));
      }
      return result;
    }
  }
  (ListIterable.new = function() {
    ListIterable.__proto__.new.call(this);
    ;
  }).prototype = ListIterable.prototype;
  dart.addTypeTests(ListIterable);
  ListIterable.prototype[_is_ListIterable_default] = true;
  dart.addTypeCaches(ListIterable);
  dart.setMethodSignature(ListIterable, () => ({
    __proto__: dart.getMethods(ListIterable.__proto__),
    map: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(T, [E])]], T => [dart.nullable(core.Object)]),
    [$map]: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(T, [E])]], T => [dart.nullable(core.Object)]),
    fold: dart.gFnType(T => [T, [T, dart.fnType(T, [T, E])]], T => [dart.nullable(core.Object)]),
    [$fold]: dart.gFnType(T => [T, [T, dart.fnType(T, [T, E])]], T => [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(ListIterable, () => ({
    __proto__: dart.getGetters(ListIterable.__proto__),
    iterator: core.Iterator$(E),
    [$iterator]: core.Iterator$(E)
  }));
  dart.setLibraryUri(ListIterable, L25);
  dart.defineExtensionMethods(ListIterable, [
    'forEach',
    'contains',
    'every',
    'any',
    'firstWhere',
    'lastWhere',
    'singleWhere',
    'join',
    'where',
    'map',
    'reduce',
    'fold',
    'skip',
    'skipWhile',
    'take',
    'takeWhile',
    'toList',
    'toSet'
  ]);
  dart.defineExtensionAccessors(ListIterable, [
    'iterator',
    'isEmpty',
    'first',
    'last',
    'single'
  ]);
  return ListIterable;
});
_internal.ListIterable = _internal.ListIterable$();
dart.addTypeTests(_internal.ListIterable, _is_ListIterable_default);
var _iterable$ = dart.privateName(_internal, "_iterable");
var _start$ = dart.privateName(_internal, "_start");
var _endOrLength$ = dart.privateName(_internal, "_endOrLength");
var _endIndex = dart.privateName(_internal, "_endIndex");
var _startIndex = dart.privateName(_internal, "_startIndex");
const _is_SubListIterable_default = Symbol('_is_SubListIterable_default');
_internal.SubListIterable$ = dart.generic(E => {
  var EmptyIterableOfE = () => (EmptyIterableOfE = dart.constFn(_internal.EmptyIterable$(E)))();
  var SubListIterableOfE = () => (SubListIterableOfE = dart.constFn(_internal.SubListIterable$(E)))();
  var ListOfE = () => (ListOfE = dart.constFn(core.List$(E)))();
  class SubListIterable extends _internal.ListIterable$(E) {
    get [_endIndex]() {
      let length = this[_iterable$][$length];
      let endOrLength = this[_endOrLength$];
      if (endOrLength == null || dart.notNull(endOrLength) > dart.notNull(length)) return length;
      return endOrLength;
    }
    get [_startIndex]() {
      let length = this[_iterable$][$length];
      if (dart.notNull(this[_start$]) > dart.notNull(length)) return length;
      return this[_start$];
    }
    get length() {
      let length = this[_iterable$][$length];
      if (dart.notNull(this[_start$]) >= dart.notNull(length)) return 0;
      let endOrLength = this[_endOrLength$];
      if (endOrLength == null || dart.notNull(endOrLength) >= dart.notNull(length)) {
        return dart.notNull(length) - dart.notNull(this[_start$]);
      }
      return dart.notNull(endOrLength) - dart.notNull(this[_start$]);
    }
    elementAt(index) {
      if (index == null) dart.nullFailed(L36, 262, 19, "index");
      let realIndex = dart.notNull(this[_startIndex]) + dart.notNull(index);
      if (dart.notNull(index) < 0 || realIndex >= dart.notNull(this[_endIndex])) {
        dart.throw(new core.IndexError.new(index, this, "index"));
      }
      return this[_iterable$][$elementAt](realIndex);
    }
    skip(count) {
      if (count == null) dart.nullFailed(L36, 270, 24, "count");
      core.RangeError.checkNotNegative(count, "count");
      let newStart = dart.notNull(this[_start$]) + dart.notNull(count);
      let endOrLength = this[_endOrLength$];
      if (endOrLength != null && newStart >= dart.notNull(endOrLength)) {
        return new (EmptyIterableOfE()).new();
      }
      return new (SubListIterableOfE()).new(this[_iterable$], newStart, this[_endOrLength$]);
    }
    take(count) {
      if (count == null) dart.nullFailed(L36, 280, 24, "count");
      core.RangeError.checkNotNegative(count, "count");
      let endOrLength = this[_endOrLength$];
      if (endOrLength == null) {
        return new (SubListIterableOfE()).new(this[_iterable$], this[_start$], dart.notNull(this[_start$]) + dart.notNull(count));
      } else {
        let newEnd = dart.notNull(this[_start$]) + dart.notNull(count);
        if (dart.notNull(endOrLength) < newEnd) return this;
        return new (SubListIterableOfE()).new(this[_iterable$], this[_start$], newEnd);
      }
    }
    toList(opts) {
      let growable = opts && 'growable' in opts ? opts.growable : true;
      if (growable == null) dart.nullFailed(L36, 292, 24, "growable");
      let start = this[_start$];
      let end = this[_iterable$][$length];
      let endOrLength = this[_endOrLength$];
      if (endOrLength != null && dart.notNull(endOrLength) < dart.notNull(end)) end = endOrLength;
      let length = dart.notNull(end) - dart.notNull(start);
      if (length <= 0) return ListOfE().empty({growable: growable});
      let result = ListOfE().filled(length, this[_iterable$][$elementAt](start), {growable: growable});
      for (let i = 1; i < length; i = i + 1) {
        result[$_set](i, this[_iterable$][$elementAt](dart.notNull(start) + i));
        if (dart.notNull(this[_iterable$][$length]) < dart.notNull(end)) dart.throw(new core.ConcurrentModificationError.new(this));
      }
      return result;
    }
  }
  (SubListIterable.new = function(_iterable, _start, _endOrLength) {
    if (_iterable == null) dart.nullFailed(L36, 228, 24, "_iterable");
    if (_start == null) dart.nullFailed(L36, 228, 40, "_start");
    this[_iterable$] = _iterable;
    this[_start$] = _start;
    this[_endOrLength$] = _endOrLength;
    SubListIterable.__proto__.new.call(this);
    core.RangeError.checkNotNegative(this[_start$], "start");
    let endOrLength = this[_endOrLength$];
    if (endOrLength != null) {
      core.RangeError.checkNotNegative(endOrLength, "end");
      if (dart.notNull(this[_start$]) > dart.notNull(endOrLength)) {
        dart.throw(new core.RangeError.range(this[_start$], 0, endOrLength, "start"));
      }
    }
  }).prototype = SubListIterable.prototype;
  dart.addTypeTests(SubListIterable);
  SubListIterable.prototype[_is_SubListIterable_default] = true;
  dart.addTypeCaches(SubListIterable);
  dart.setGetterSignature(SubListIterable, () => ({
    __proto__: dart.getGetters(SubListIterable.__proto__),
    [_endIndex]: core.int,
    [_startIndex]: core.int
  }));
  dart.setLibraryUri(SubListIterable, L25);
  dart.setFieldSignature(SubListIterable, () => ({
    __proto__: dart.getFields(SubListIterable.__proto__),
    [_iterable$]: dart.finalFieldType(core.Iterable$(E)),
    [_start$]: dart.finalFieldType(core.int),
    [_endOrLength$]: dart.finalFieldType(dart.nullable(core.int))
  }));
  dart.defineExtensionMethods(SubListIterable, ['elementAt', 'skip', 'take', 'toList']);
  dart.defineExtensionAccessors(SubListIterable, ['length']);
  return SubListIterable;
});
_internal.SubListIterable = _internal.SubListIterable$();
dart.addTypeTests(_internal.SubListIterable, _is_SubListIterable_default);
var _current$ = dart.privateName(_internal, "_current");
var _index$ = dart.privateName(_internal, "_index");
const _is_ListIterator_default = Symbol('_is_ListIterator_default');
_internal.ListIterator$ = dart.generic(E => {
  class ListIterator extends core.Object {
    get current() {
      let cur = this[_current$];
      return cur != null ? cur : E.as(cur);
    }
    moveNext() {
      let length = this[_iterable$][$length];
      if (this[_length$] != length) {
        dart.throw(new core.ConcurrentModificationError.new(this[_iterable$]));
      }
      if (dart.notNull(this[_index$]) >= dart.notNull(length)) {
        this[_current$] = null;
        return false;
      }
      this[_current$] = this[_iterable$][$elementAt](this[_index$]);
      this[_index$] = dart.notNull(this[_index$]) + 1;
      return true;
    }
  }
  (ListIterator.new = function(iterable) {
    if (iterable == null) dart.nullFailed(L36, 323, 28, "iterable");
    this[_current$] = null;
    this[_iterable$] = iterable;
    this[_length$] = iterable[$length];
    this[_index$] = 0;
    ;
  }).prototype = ListIterator.prototype;
  dart.addTypeTests(ListIterator);
  ListIterator.prototype[_is_ListIterator_default] = true;
  dart.addTypeCaches(ListIterator);
  ListIterator[dart.implements] = () => [core.Iterator$(E)];
  dart.setMethodSignature(ListIterator, () => ({
    __proto__: dart.getMethods(ListIterator.__proto__),
    moveNext: dart.fnType(core.bool, [])
  }));
  dart.setGetterSignature(ListIterator, () => ({
    __proto__: dart.getGetters(ListIterator.__proto__),
    current: E
  }));
  dart.setLibraryUri(ListIterator, L25);
  dart.setFieldSignature(ListIterator, () => ({
    __proto__: dart.getFields(ListIterator.__proto__),
    [_iterable$]: dart.finalFieldType(core.Iterable$(E)),
    [_length$]: dart.finalFieldType(core.int),
    [_index$]: dart.fieldType(core.int),
    [_current$]: dart.fieldType(dart.nullable(E))
  }));
  return ListIterator;
});
_internal.ListIterator = _internal.ListIterator$();
dart.addTypeTests(_internal.ListIterator, _is_ListIterator_default);
var _f$ = dart.privateName(_internal, "_f");
const _is_MappedIterable_default = Symbol('_is_MappedIterable_default');
_internal.MappedIterable$ = dart.generic((S, T) => {
  var MappedIteratorOfS$T = () => (MappedIteratorOfS$T = dart.constFn(_internal.MappedIterator$(S, T)))();
  class MappedIterable extends core.Iterable$(T) {
    static new(iterable, $function) {
      if (iterable == null) dart.nullFailed(L36, 355, 38, "iterable");
      if ($function == null) dart.nullFailed(L36, 355, 50, "function");
      if (_internal.EfficientLengthIterable.is(iterable)) {
        return new (_internal.EfficientLengthMappedIterable$(S, T)).new(iterable, $function);
      }
      return new (_internal.MappedIterable$(S, T)).__(iterable, $function);
    }
    get iterator() {
      return new (MappedIteratorOfS$T()).new(this[_iterable$][$iterator], this[_f$]);
    }
    get length() {
      return this[_iterable$][$length];
    }
    get isEmpty() {
      return this[_iterable$][$isEmpty];
    }
    get first() {
      let t77;
      t77 = this[_iterable$][$first];
      return this[_f$](t77);
    }
    get last() {
      let t77;
      t77 = this[_iterable$][$last];
      return this[_f$](t77);
    }
    get single() {
      let t77;
      t77 = this[_iterable$][$single];
      return this[_f$](t77);
    }
    elementAt(index) {
      let t77;
      if (index == null) dart.nullFailed(L36, 374, 19, "index");
      t77 = this[_iterable$][$elementAt](index);
      return this[_f$](t77);
    }
  }
  (MappedIterable.__ = function(_iterable, _f) {
    if (_iterable == null) dart.nullFailed(L36, 362, 25, "_iterable");
    if (_f == null) dart.nullFailed(L36, 362, 41, "_f");
    this[_iterable$] = _iterable;
    this[_f$] = _f;
    MappedIterable.__proto__.new.call(this);
    ;
  }).prototype = MappedIterable.prototype;
  dart.addTypeTests(MappedIterable);
  MappedIterable.prototype[_is_MappedIterable_default] = true;
  dart.addTypeCaches(MappedIterable);
  dart.setGetterSignature(MappedIterable, () => ({
    __proto__: dart.getGetters(MappedIterable.__proto__),
    iterator: core.Iterator$(T),
    [$iterator]: core.Iterator$(T)
  }));
  dart.setLibraryUri(MappedIterable, L25);
  dart.setFieldSignature(MappedIterable, () => ({
    __proto__: dart.getFields(MappedIterable.__proto__),
    [_iterable$]: dart.finalFieldType(core.Iterable$(S)),
    [_f$]: dart.finalFieldType(dart.fnType(T, [S]))
  }));
  dart.defineExtensionMethods(MappedIterable, ['elementAt']);
  dart.defineExtensionAccessors(MappedIterable, [
    'iterator',
    'length',
    'isEmpty',
    'first',
    'last',
    'single'
  ]);
  return MappedIterable;
});
_internal.MappedIterable = _internal.MappedIterable$();
dart.addTypeTests(_internal.MappedIterable, _is_MappedIterable_default);
const _is_EfficientLengthMappedIterable_default = Symbol('_is_EfficientLengthMappedIterable_default');
_internal.EfficientLengthMappedIterable$ = dart.generic((S, T) => {
  class EfficientLengthMappedIterable extends _internal.MappedIterable$(S, T) {}
  (EfficientLengthMappedIterable.new = function(iterable, $function) {
    if (iterable == null) dart.nullFailed(L36, 379, 45, "iterable");
    if ($function == null) dart.nullFailed(L36, 379, 57, "function");
    EfficientLengthMappedIterable.__proto__.__.call(this, iterable, $function);
    ;
  }).prototype = EfficientLengthMappedIterable.prototype;
  dart.addTypeTests(EfficientLengthMappedIterable);
  EfficientLengthMappedIterable.prototype[_is_EfficientLengthMappedIterable_default] = true;
  dart.addTypeCaches(EfficientLengthMappedIterable);
  EfficientLengthMappedIterable[dart.implements] = () => [_internal.EfficientLengthIterable$(T)];
  dart.setLibraryUri(EfficientLengthMappedIterable, L25);
  return EfficientLengthMappedIterable;
});
_internal.EfficientLengthMappedIterable = _internal.EfficientLengthMappedIterable$();
dart.addTypeTests(_internal.EfficientLengthMappedIterable, _is_EfficientLengthMappedIterable_default);
var _iterator$ = dart.privateName(_internal, "_iterator");
const _is_Iterator_default = Symbol('_is_Iterator_default');
core.Iterator$ = dart.generic(E => {
  class Iterator extends core.Object {}
  (Iterator.new = function() {
    ;
  }).prototype = Iterator.prototype;
  dart.addTypeTests(Iterator);
  Iterator.prototype[_is_Iterator_default] = true;
  dart.addTypeCaches(Iterator);
  dart.setLibraryUri(Iterator, L8$);
  return Iterator;
});
core.Iterator = core.Iterator$();
dart.addTypeTests(core.Iterator, _is_Iterator_default);
const _is_MappedIterator_default = Symbol('_is_MappedIterator_default');
_internal.MappedIterator$ = dart.generic((S, T) => {
  class MappedIterator extends core.Iterator$(T) {
    moveNext() {
      let t77;
      if (dart.test(this[_iterator$].moveNext())) {
        this[_current$] = (t77 = this[_iterator$].current, this[_f$](t77));
        return true;
      }
      this[_current$] = null;
      return false;
    }
    get current() {
      let cur = this[_current$];
      return cur != null ? cur : T.as(cur);
    }
  }
  (MappedIterator.new = function(_iterator, _f) {
    if (_iterator == null) dart.nullFailed(L36, 388, 23, "_iterator");
    if (_f == null) dart.nullFailed(L36, 388, 39, "_f");
    this[_current$] = null;
    this[_iterator$] = _iterator;
    this[_f$] = _f;
    ;
  }).prototype = MappedIterator.prototype;
  dart.addTypeTests(MappedIterator);
  MappedIterator.prototype[_is_MappedIterator_default] = true;
  dart.addTypeCaches(MappedIterator);
  dart.setMethodSignature(MappedIterator, () => ({
    __proto__: dart.getMethods(MappedIterator.__proto__),
    moveNext: dart.fnType(core.bool, [])
  }));
  dart.setGetterSignature(MappedIterator, () => ({
    __proto__: dart.getGetters(MappedIterator.__proto__),
    current: T
  }));
  dart.setLibraryUri(MappedIterator, L25);
  dart.setFieldSignature(MappedIterator, () => ({
    __proto__: dart.getFields(MappedIterator.__proto__),
    [_current$]: dart.fieldType(dart.nullable(T)),
    [_iterator$]: dart.finalFieldType(core.Iterator$(S)),
    [_f$]: dart.finalFieldType(dart.fnType(T, [S]))
  }));
  return MappedIterator;
});
_internal.MappedIterator = _internal.MappedIterator$();
dart.addTypeTests(_internal.MappedIterator, _is_MappedIterator_default);
const _is_MappedListIterable_default = Symbol('_is_MappedListIterable_default');
_internal.MappedListIterable$ = dart.generic((S, T) => {
  class MappedListIterable extends _internal.ListIterable$(T) {
    get length() {
      return this[_source$][$length];
    }
    elementAt(index) {
      let t77;
      if (index == null) dart.nullFailed(L36, 417, 19, "index");
      t77 = this[_source$][$elementAt](index);
      return this[_f$](t77);
    }
  }
  (MappedListIterable.new = function(_source, _f) {
    if (_source == null) dart.nullFailed(L36, 414, 27, "_source");
    if (_f == null) dart.nullFailed(L36, 414, 41, "_f");
    this[_source$] = _source;
    this[_f$] = _f;
    MappedListIterable.__proto__.new.call(this);
    ;
  }).prototype = MappedListIterable.prototype;
  dart.addTypeTests(MappedListIterable);
  MappedListIterable.prototype[_is_MappedListIterable_default] = true;
  dart.addTypeCaches(MappedListIterable);
  dart.setLibraryUri(MappedListIterable, L25);
  dart.setFieldSignature(MappedListIterable, () => ({
    __proto__: dart.getFields(MappedListIterable.__proto__),
    [_source$]: dart.finalFieldType(core.Iterable$(S)),
    [_f$]: dart.finalFieldType(dart.fnType(T, [S]))
  }));
  dart.defineExtensionMethods(MappedListIterable, ['elementAt']);
  dart.defineExtensionAccessors(MappedListIterable, ['length']);
  return MappedListIterable;
});
_internal.MappedListIterable = _internal.MappedListIterable$();
dart.addTypeTests(_internal.MappedListIterable, _is_MappedListIterable_default);
const _is_WhereIterable_default = Symbol('_is_WhereIterable_default');
_internal.WhereIterable$ = dart.generic(E => {
  var WhereIteratorOfE = () => (WhereIteratorOfE = dart.constFn(_internal.WhereIterator$(E)))();
  class WhereIterable extends core.Iterable$(E) {
    get iterator() {
      return new (WhereIteratorOfE()).new(this[_iterable$][$iterator], this[_f$]);
    }
    map(T, f) {
      if (f == null) dart.nullFailed(L36, 431, 24, "f");
      return new (_internal.MappedIterable$(E, T)).__(this, f);
    }
  }
  (WhereIterable.new = function(_iterable, _f) {
    if (_iterable == null) dart.nullFailed(L36, 426, 22, "_iterable");
    if (_f == null) dart.nullFailed(L36, 426, 38, "_f");
    this[_iterable$] = _iterable;
    this[_f$] = _f;
    WhereIterable.__proto__.new.call(this);
    ;
  }).prototype = WhereIterable.prototype;
  dart.addTypeTests(WhereIterable);
  WhereIterable.prototype[_is_WhereIterable_default] = true;
  dart.addTypeCaches(WhereIterable);
  dart.setMethodSignature(WhereIterable, () => ({
    __proto__: dart.getMethods(WhereIterable.__proto__),
    map: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(T, [E])]], T => [dart.nullable(core.Object)]),
    [$map]: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(T, [E])]], T => [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(WhereIterable, () => ({
    __proto__: dart.getGetters(WhereIterable.__proto__),
    iterator: core.Iterator$(E),
    [$iterator]: core.Iterator$(E)
  }));
  dart.setLibraryUri(WhereIterable, L25);
  dart.setFieldSignature(WhereIterable, () => ({
    __proto__: dart.getFields(WhereIterable.__proto__),
    [_iterable$]: dart.finalFieldType(core.Iterable$(E)),
    [_f$]: dart.finalFieldType(dart.fnType(core.bool, [E]))
  }));
  dart.defineExtensionMethods(WhereIterable, ['map']);
  dart.defineExtensionAccessors(WhereIterable, ['iterator']);
  return WhereIterable;
});
_internal.WhereIterable = _internal.WhereIterable$();
dart.addTypeTests(_internal.WhereIterable, _is_WhereIterable_default);
const _is_WhereIterator_default = Symbol('_is_WhereIterator_default');
_internal.WhereIterator$ = dart.generic(E => {
  class WhereIterator extends core.Iterator$(E) {
    moveNext() {
      let t77;
      while (dart.test(this[_iterator$].moveNext())) {
        if (dart.test((t77 = this[_iterator$].current, this[_f$](t77)))) {
          return true;
        }
      }
      return false;
    }
    get current() {
      return this[_iterator$].current;
    }
  }
  (WhereIterator.new = function(_iterator, _f) {
    if (_iterator == null) dart.nullFailed(L36, 438, 22, "_iterator");
    if (_f == null) dart.nullFailed(L36, 438, 38, "_f");
    this[_iterator$] = _iterator;
    this[_f$] = _f;
    ;
  }).prototype = WhereIterator.prototype;
  dart.addTypeTests(WhereIterator);
  WhereIterator.prototype[_is_WhereIterator_default] = true;
  dart.addTypeCaches(WhereIterator);
  dart.setMethodSignature(WhereIterator, () => ({
    __proto__: dart.getMethods(WhereIterator.__proto__),
    moveNext: dart.fnType(core.bool, [])
  }));
  dart.setGetterSignature(WhereIterator, () => ({
    __proto__: dart.getGetters(WhereIterator.__proto__),
    current: E
  }));
  dart.setLibraryUri(WhereIterator, L25);
  dart.setFieldSignature(WhereIterator, () => ({
    __proto__: dart.getFields(WhereIterator.__proto__),
    [_iterator$]: dart.finalFieldType(core.Iterator$(E)),
    [_f$]: dart.finalFieldType(dart.fnType(core.bool, [E]))
  }));
  return WhereIterator;
});
_internal.WhereIterator = _internal.WhereIterator$();
dart.addTypeTests(_internal.WhereIterator, _is_WhereIterator_default);
const _is_ExpandIterable_default = Symbol('_is_ExpandIterable_default');
_internal.ExpandIterable$ = dart.generic((S, T) => {
  var ExpandIteratorOfS$T = () => (ExpandIteratorOfS$T = dart.constFn(_internal.ExpandIterator$(S, T)))();
  class ExpandIterable extends core.Iterable$(T) {
    get iterator() {
      return new (ExpandIteratorOfS$T()).new(this[_iterable$][$iterator], this[_f$]);
    }
  }
  (ExpandIterable.new = function(_iterable, _f) {
    if (_iterable == null) dart.nullFailed(L36, 458, 23, "_iterable");
    if (_f == null) dart.nullFailed(L36, 458, 39, "_f");
    this[_iterable$] = _iterable;
    this[_f$] = _f;
    ExpandIterable.__proto__.new.call(this);
    ;
  }).prototype = ExpandIterable.prototype;
  dart.addTypeTests(ExpandIterable);
  ExpandIterable.prototype[_is_ExpandIterable_default] = true;
  dart.addTypeCaches(ExpandIterable);
  dart.setGetterSignature(ExpandIterable, () => ({
    __proto__: dart.getGetters(ExpandIterable.__proto__),
    iterator: core.Iterator$(T),
    [$iterator]: core.Iterator$(T)
  }));
  dart.setLibraryUri(ExpandIterable, L25);
  dart.setFieldSignature(ExpandIterable, () => ({
    __proto__: dart.getFields(ExpandIterable.__proto__),
    [_iterable$]: dart.finalFieldType(core.Iterable$(S)),
    [_f$]: dart.finalFieldType(dart.fnType(core.Iterable$(T), [S]))
  }));
  dart.defineExtensionAccessors(ExpandIterable, ['iterator']);
  return ExpandIterable;
});
_internal.ExpandIterable = _internal.ExpandIterable$();
dart.addTypeTests(_internal.ExpandIterable, _is_ExpandIterable_default);
var _currentExpansion = dart.privateName(_internal, "_currentExpansion");
var C20;
const _is_ExpandIterator_default = Symbol('_is_ExpandIterator_default');
_internal.ExpandIterator$ = dart.generic((S, T) => {
  class ExpandIterator extends core.Object {
    get current() {
      let cur = this[_current$];
      return cur != null ? cur : T.as(cur);
    }
    moveNext() {
      let t77;
      if (this[_currentExpansion] == null) return false;
      while (!dart.test(dart.nullCheck(this[_currentExpansion]).moveNext())) {
        this[_current$] = null;
        if (dart.test(this[_iterator$].moveNext())) {
          this[_currentExpansion] = null;
          this[_currentExpansion] = (t77 = this[_iterator$].current, this[_f$](t77))[$iterator];
        } else {
          return false;
        }
      }
      this[_current$] = dart.nullCheck(this[_currentExpansion]).current;
      return true;
    }
  }
  (ExpandIterator.new = function(_iterator, _f) {
    if (_iterator == null) dart.nullFailed(L36, 472, 23, "_iterator");
    if (_f == null) dart.nullFailed(L36, 472, 39, "_f");
    this[_currentExpansion] = C20 || CT.C20;
    this[_current$] = null;
    this[_iterator$] = _iterator;
    this[_f$] = _f;
    ;
  }).prototype = ExpandIterator.prototype;
  dart.addTypeTests(ExpandIterator);
  ExpandIterator.prototype[_is_ExpandIterator_default] = true;
  dart.addTypeCaches(ExpandIterator);
  ExpandIterator[dart.implements] = () => [core.Iterator$(T)];
  dart.setMethodSignature(ExpandIterator, () => ({
    __proto__: dart.getMethods(ExpandIterator.__proto__),
    moveNext: dart.fnType(core.bool, [])
  }));
  dart.setGetterSignature(ExpandIterator, () => ({
    __proto__: dart.getGetters(ExpandIterator.__proto__),
    current: T
  }));
  dart.setLibraryUri(ExpandIterator, L25);
  dart.setFieldSignature(ExpandIterator, () => ({
    __proto__: dart.getFields(ExpandIterator.__proto__),
    [_iterator$]: dart.finalFieldType(core.Iterator$(S)),
    [_f$]: dart.finalFieldType(dart.fnType(core.Iterable$(T), [S])),
    [_currentExpansion]: dart.fieldType(dart.nullable(core.Iterator$(T))),
    [_current$]: dart.fieldType(dart.nullable(T))
  }));
  return ExpandIterator;
});
_internal.ExpandIterator = _internal.ExpandIterator$();
dart.addTypeTests(_internal.ExpandIterator, _is_ExpandIterator_default);
var _takeCount$ = dart.privateName(_internal, "_takeCount");
const _is_TakeIterable_default = Symbol('_is_TakeIterable_default');
_internal.TakeIterable$ = dart.generic(E => {
  var TakeIteratorOfE = () => (TakeIteratorOfE = dart.constFn(_internal.TakeIterator$(E)))();
  class TakeIterable extends core.Iterable$(E) {
    static new(iterable, takeCount) {
      if (iterable == null) dart.nullFailed(L36, 501, 36, "iterable");
      if (takeCount == null) dart.nullFailed(L36, 501, 50, "takeCount");
      core.ArgumentError.checkNotNull(core.int, takeCount, "takeCount");
      core.RangeError.checkNotNegative(takeCount, "takeCount");
      if (_internal.EfficientLengthIterable.is(iterable)) {
        return new (_internal.EfficientLengthTakeIterable$(E)).new(iterable, takeCount);
      }
      return new (_internal.TakeIterable$(E)).__(iterable, takeCount);
    }
    get iterator() {
      return new (TakeIteratorOfE()).new(this[_iterable$][$iterator], this[_takeCount$]);
    }
  }
  (TakeIterable.__ = function(_iterable, _takeCount) {
    if (_iterable == null) dart.nullFailed(L36, 510, 23, "_iterable");
    if (_takeCount == null) dart.nullFailed(L36, 510, 39, "_takeCount");
    this[_iterable$] = _iterable;
    this[_takeCount$] = _takeCount;
    TakeIterable.__proto__.new.call(this);
    ;
  }).prototype = TakeIterable.prototype;
  dart.addTypeTests(TakeIterable);
  TakeIterable.prototype[_is_TakeIterable_default] = true;
  dart.addTypeCaches(TakeIterable);
  dart.setGetterSignature(TakeIterable, () => ({
    __proto__: dart.getGetters(TakeIterable.__proto__),
    iterator: core.Iterator$(E),
    [$iterator]: core.Iterator$(E)
  }));
  dart.setLibraryUri(TakeIterable, L25);
  dart.setFieldSignature(TakeIterable, () => ({
    __proto__: dart.getFields(TakeIterable.__proto__),
    [_iterable$]: dart.finalFieldType(core.Iterable$(E)),
    [_takeCount$]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionAccessors(TakeIterable, ['iterator']);
  return TakeIterable;
});
_internal.TakeIterable = _internal.TakeIterable$();
dart.addTypeTests(_internal.TakeIterable, _is_TakeIterable_default);
const _is_EfficientLengthTakeIterable_default = Symbol('_is_EfficientLengthTakeIterable_default');
_internal.EfficientLengthTakeIterable$ = dart.generic(E => {
  class EfficientLengthTakeIterable extends _internal.TakeIterable$(E) {
    get length() {
      let iterableLength = this[_iterable$][$length];
      if (dart.notNull(iterableLength) > dart.notNull(this[_takeCount$])) return this[_takeCount$];
      return iterableLength;
    }
  }
  (EfficientLengthTakeIterable.new = function(iterable, takeCount) {
    if (iterable == null) dart.nullFailed(L36, 519, 43, "iterable");
    if (takeCount == null) dart.nullFailed(L36, 519, 57, "takeCount");
    EfficientLengthTakeIterable.__proto__.__.call(this, iterable, takeCount);
    ;
  }).prototype = EfficientLengthTakeIterable.prototype;
  dart.addTypeTests(EfficientLengthTakeIterable);
  EfficientLengthTakeIterable.prototype[_is_EfficientLengthTakeIterable_default] = true;
  dart.addTypeCaches(EfficientLengthTakeIterable);
  EfficientLengthTakeIterable[dart.implements] = () => [_internal.EfficientLengthIterable$(E)];
  dart.setLibraryUri(EfficientLengthTakeIterable, L25);
  dart.defineExtensionAccessors(EfficientLengthTakeIterable, ['length']);
  return EfficientLengthTakeIterable;
});
_internal.EfficientLengthTakeIterable = _internal.EfficientLengthTakeIterable$();
dart.addTypeTests(_internal.EfficientLengthTakeIterable, _is_EfficientLengthTakeIterable_default);
var _remaining$ = dart.privateName(_internal, "_remaining");
const _is_TakeIterator_default = Symbol('_is_TakeIterator_default');
_internal.TakeIterator$ = dart.generic(E => {
  class TakeIterator extends core.Iterator$(E) {
    moveNext() {
      this[_remaining$] = dart.notNull(this[_remaining$]) - 1;
      if (dart.notNull(this[_remaining$]) >= 0) {
        return this[_iterator$].moveNext();
      }
      this[_remaining$] = -1;
      return false;
    }
    get current() {
      if (dart.notNull(this[_remaining$]) < 0) return E.as(null);
      return this[_iterator$].current;
    }
  }
  (TakeIterator.new = function(_iterator, _remaining) {
    if (_iterator == null) dart.nullFailed(L36, 533, 21, "_iterator");
    if (_remaining == null) dart.nullFailed(L36, 533, 37, "_remaining");
    this[_iterator$] = _iterator;
    this[_remaining$] = _remaining;
    if (!(dart.notNull(this[_remaining$]) >= 0)) dart.assertFailed(null, L36, 534, 12, "_remaining >= 0");
  }).prototype = TakeIterator.prototype;
  dart.addTypeTests(TakeIterator);
  TakeIterator.prototype[_is_TakeIterator_default] = true;
  dart.addTypeCaches(TakeIterator);
  dart.setMethodSignature(TakeIterator, () => ({
    __proto__: dart.getMethods(TakeIterator.__proto__),
    moveNext: dart.fnType(core.bool, [])
  }));
  dart.setGetterSignature(TakeIterator, () => ({
    __proto__: dart.getGetters(TakeIterator.__proto__),
    current: E
  }));
  dart.setLibraryUri(TakeIterator, L25);
  dart.setFieldSignature(TakeIterator, () => ({
    __proto__: dart.getFields(TakeIterator.__proto__),
    [_iterator$]: dart.finalFieldType(core.Iterator$(E)),
    [_remaining$]: dart.fieldType(core.int)
  }));
  return TakeIterator;
});
_internal.TakeIterator = _internal.TakeIterator$();
dart.addTypeTests(_internal.TakeIterator, _is_TakeIterator_default);
const _is_TakeWhileIterable_default = Symbol('_is_TakeWhileIterable_default');
_internal.TakeWhileIterable$ = dart.generic(E => {
  var TakeWhileIteratorOfE = () => (TakeWhileIteratorOfE = dart.constFn(_internal.TakeWhileIterator$(E)))();
  class TakeWhileIterable extends core.Iterable$(E) {
    get iterator() {
      return new (TakeWhileIteratorOfE()).new(this[_iterable$][$iterator], this[_f$]);
    }
  }
  (TakeWhileIterable.new = function(_iterable, _f) {
    if (_iterable == null) dart.nullFailed(L36, 560, 26, "_iterable");
    if (_f == null) dart.nullFailed(L36, 560, 42, "_f");
    this[_iterable$] = _iterable;
    this[_f$] = _f;
    TakeWhileIterable.__proto__.new.call(this);
    ;
  }).prototype = TakeWhileIterable.prototype;
  dart.addTypeTests(TakeWhileIterable);
  TakeWhileIterable.prototype[_is_TakeWhileIterable_default] = true;
  dart.addTypeCaches(TakeWhileIterable);
  dart.setGetterSignature(TakeWhileIterable, () => ({
    __proto__: dart.getGetters(TakeWhileIterable.__proto__),
    iterator: core.Iterator$(E),
    [$iterator]: core.Iterator$(E)
  }));
  dart.setLibraryUri(TakeWhileIterable, L25);
  dart.setFieldSignature(TakeWhileIterable, () => ({
    __proto__: dart.getFields(TakeWhileIterable.__proto__),
    [_iterable$]: dart.finalFieldType(core.Iterable$(E)),
    [_f$]: dart.finalFieldType(dart.fnType(core.bool, [E]))
  }));
  dart.defineExtensionAccessors(TakeWhileIterable, ['iterator']);
  return TakeWhileIterable;
});
_internal.TakeWhileIterable = _internal.TakeWhileIterable$();
dart.addTypeTests(_internal.TakeWhileIterable, _is_TakeWhileIterable_default);
var _isFinished = dart.privateName(_internal, "_isFinished");
const _is_TakeWhileIterator_default = Symbol('_is_TakeWhileIterator_default');
_internal.TakeWhileIterator$ = dart.generic(E => {
  class TakeWhileIterator extends core.Iterator$(E) {
    moveNext() {
      let t77;
      if (dart.test(this[_isFinished])) return false;
      if (!dart.test(this[_iterator$].moveNext()) || !dart.test((t77 = this[_iterator$].current, this[_f$](t77)))) {
        this[_isFinished] = true;
        return false;
      }
      return true;
    }
    get current() {
      if (dart.test(this[_isFinished])) return E.as(null);
      return this[_iterator$].current;
    }
  }
  (TakeWhileIterator.new = function(_iterator, _f) {
    if (_iterator == null) dart.nullFailed(L36, 572, 26, "_iterator");
    if (_f == null) dart.nullFailed(L36, 572, 42, "_f");
    this[_isFinished] = false;
    this[_iterator$] = _iterator;
    this[_f$] = _f;
    ;
  }).prototype = TakeWhileIterator.prototype;
  dart.addTypeTests(TakeWhileIterator);
  TakeWhileIterator.prototype[_is_TakeWhileIterator_default] = true;
  dart.addTypeCaches(TakeWhileIterator);
  dart.setMethodSignature(TakeWhileIterator, () => ({
    __proto__: dart.getMethods(TakeWhileIterator.__proto__),
    moveNext: dart.fnType(core.bool, [])
  }));
  dart.setGetterSignature(TakeWhileIterator, () => ({
    __proto__: dart.getGetters(TakeWhileIterator.__proto__),
    current: E
  }));
  dart.setLibraryUri(TakeWhileIterator, L25);
  dart.setFieldSignature(TakeWhileIterator, () => ({
    __proto__: dart.getFields(TakeWhileIterator.__proto__),
    [_iterator$]: dart.finalFieldType(core.Iterator$(E)),
    [_f$]: dart.finalFieldType(dart.fnType(core.bool, [E])),
    [_isFinished]: dart.fieldType(core.bool)
  }));
  return TakeWhileIterator;
});
_internal.TakeWhileIterator = _internal.TakeWhileIterator$();
dart.addTypeTests(_internal.TakeWhileIterator, _is_TakeWhileIterator_default);
var _skipCount$ = dart.privateName(_internal, "_skipCount");
const _is_SkipIterable_default = Symbol('_is_SkipIterable_default');
_internal.SkipIterable$ = dart.generic(E => {
  var SkipIterableOfE = () => (SkipIterableOfE = dart.constFn(_internal.SkipIterable$(E)))();
  var SkipIteratorOfE = () => (SkipIteratorOfE = dart.constFn(_internal.SkipIterator$(E)))();
  class SkipIterable extends core.Iterable$(E) {
    static new(iterable, count) {
      if (iterable == null) dart.nullFailed(L36, 593, 36, "iterable");
      if (count == null) dart.nullFailed(L36, 593, 50, "count");
      if (_internal.EfficientLengthIterable.is(iterable)) {
        return _internal.EfficientLengthSkipIterable$(E).new(iterable, count);
      }
      return new (_internal.SkipIterable$(E)).__(iterable, _internal._checkCount(count));
    }
    skip(count) {
      if (count == null) dart.nullFailed(L36, 602, 24, "count");
      return new (SkipIterableOfE()).__(this[_iterable$], dart.notNull(this[_skipCount$]) + dart.notNull(_internal._checkCount(count)));
    }
    get iterator() {
      return new (SkipIteratorOfE()).new(this[_iterable$][$iterator], this[_skipCount$]);
    }
  }
  (SkipIterable.__ = function(_iterable, _skipCount) {
    if (_iterable == null) dart.nullFailed(L36, 600, 23, "_iterable");
    if (_skipCount == null) dart.nullFailed(L36, 600, 39, "_skipCount");
    this[_iterable$] = _iterable;
    this[_skipCount$] = _skipCount;
    SkipIterable.__proto__.new.call(this);
    ;
  }).prototype = SkipIterable.prototype;
  dart.addTypeTests(SkipIterable);
  SkipIterable.prototype[_is_SkipIterable_default] = true;
  dart.addTypeCaches(SkipIterable);
  dart.setGetterSignature(SkipIterable, () => ({
    __proto__: dart.getGetters(SkipIterable.__proto__),
    iterator: core.Iterator$(E),
    [$iterator]: core.Iterator$(E)
  }));
  dart.setLibraryUri(SkipIterable, L25);
  dart.setFieldSignature(SkipIterable, () => ({
    __proto__: dart.getFields(SkipIterable.__proto__),
    [_iterable$]: dart.finalFieldType(core.Iterable$(E)),
    [_skipCount$]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(SkipIterable, ['skip']);
  dart.defineExtensionAccessors(SkipIterable, ['iterator']);
  return SkipIterable;
});
_internal.SkipIterable = _internal.SkipIterable$();
dart.addTypeTests(_internal.SkipIterable, _is_SkipIterable_default);
const _is_EfficientLengthSkipIterable_default = Symbol('_is_EfficientLengthSkipIterable_default');
_internal.EfficientLengthSkipIterable$ = dart.generic(E => {
  var EfficientLengthSkipIterableOfE = () => (EfficientLengthSkipIterableOfE = dart.constFn(_internal.EfficientLengthSkipIterable$(E)))();
  class EfficientLengthSkipIterable extends _internal.SkipIterable$(E) {
    static new(iterable, count) {
      if (iterable == null) dart.nullFailed(L36, 613, 51, "iterable");
      if (count == null) dart.nullFailed(L36, 613, 65, "count");
      return new (_internal.EfficientLengthSkipIterable$(E)).__(iterable, _internal._checkCount(count));
    }
    get length() {
      let length = dart.notNull(this[_iterable$][$length]) - dart.notNull(this[_skipCount$]);
      if (length >= 0) return length;
      return 0;
    }
    skip(count) {
      if (count == null) dart.nullFailed(L36, 626, 24, "count");
      return new (EfficientLengthSkipIterableOfE()).__(this[_iterable$], dart.notNull(this[_skipCount$]) + dart.notNull(_internal._checkCount(count)));
    }
  }
  (EfficientLengthSkipIterable.__ = function(iterable, count) {
    if (iterable == null) dart.nullFailed(L36, 617, 45, "iterable");
    if (count == null) dart.nullFailed(L36, 617, 59, "count");
    EfficientLengthSkipIterable.__proto__.__.call(this, iterable, count);
    ;
  }).prototype = EfficientLengthSkipIterable.prototype;
  dart.addTypeTests(EfficientLengthSkipIterable);
  EfficientLengthSkipIterable.prototype[_is_EfficientLengthSkipIterable_default] = true;
  dart.addTypeCaches(EfficientLengthSkipIterable);
  EfficientLengthSkipIterable[dart.implements] = () => [_internal.EfficientLengthIterable$(E)];
  dart.setLibraryUri(EfficientLengthSkipIterable, L25);
  dart.defineExtensionMethods(EfficientLengthSkipIterable, ['skip']);
  dart.defineExtensionAccessors(EfficientLengthSkipIterable, ['length']);
  return EfficientLengthSkipIterable;
});
_internal.EfficientLengthSkipIterable = _internal.EfficientLengthSkipIterable$();
dart.addTypeTests(_internal.EfficientLengthSkipIterable, _is_EfficientLengthSkipIterable_default);
const _is_SkipIterator_default = Symbol('_is_SkipIterator_default');
_internal.SkipIterator$ = dart.generic(E => {
  class SkipIterator extends core.Iterator$(E) {
    moveNext() {
      for (let i = 0; i < dart.notNull(this[_skipCount$]); i = i + 1)
        this[_iterator$].moveNext();
      this[_skipCount$] = 0;
      return this[_iterator$].moveNext();
    }
    get current() {
      return this[_iterator$].current;
    }
  }
  (SkipIterator.new = function(_iterator, _skipCount) {
    if (_iterator == null) dart.nullFailed(L36, 642, 21, "_iterator");
    if (_skipCount == null) dart.nullFailed(L36, 642, 37, "_skipCount");
    this[_iterator$] = _iterator;
    this[_skipCount$] = _skipCount;
    if (!(dart.notNull(this[_skipCount$]) >= 0)) dart.assertFailed(null, L36, 643, 12, "_skipCount >= 0");
  }).prototype = SkipIterator.prototype;
  dart.addTypeTests(SkipIterator);
  SkipIterator.prototype[_is_SkipIterator_default] = true;
  dart.addTypeCaches(SkipIterator);
  dart.setMethodSignature(SkipIterator, () => ({
    __proto__: dart.getMethods(SkipIterator.__proto__),
    moveNext: dart.fnType(core.bool, [])
  }));
  dart.setGetterSignature(SkipIterator, () => ({
    __proto__: dart.getGetters(SkipIterator.__proto__),
    current: E
  }));
  dart.setLibraryUri(SkipIterator, L25);
  dart.setFieldSignature(SkipIterator, () => ({
    __proto__: dart.getFields(SkipIterator.__proto__),
    [_iterator$]: dart.finalFieldType(core.Iterator$(E)),
    [_skipCount$]: dart.fieldType(core.int)
  }));
  return SkipIterator;
});
_internal.SkipIterator = _internal.SkipIterator$();
dart.addTypeTests(_internal.SkipIterator, _is_SkipIterator_default);
const _is_SkipWhileIterable_default = Symbol('_is_SkipWhileIterable_default');
_internal.SkipWhileIterable$ = dart.generic(E => {
  var SkipWhileIteratorOfE = () => (SkipWhileIteratorOfE = dart.constFn(_internal.SkipWhileIterator$(E)))();
  class SkipWhileIterable extends core.Iterable$(E) {
    get iterator() {
      return new (SkipWhileIteratorOfE()).new(this[_iterable$][$iterator], this[_f$]);
    }
  }
  (SkipWhileIterable.new = function(_iterable, _f) {
    if (_iterable == null) dart.nullFailed(L36, 659, 26, "_iterable");
    if (_f == null) dart.nullFailed(L36, 659, 42, "_f");
    this[_iterable$] = _iterable;
    this[_f$] = _f;
    SkipWhileIterable.__proto__.new.call(this);
    ;
  }).prototype = SkipWhileIterable.prototype;
  dart.addTypeTests(SkipWhileIterable);
  SkipWhileIterable.prototype[_is_SkipWhileIterable_default] = true;
  dart.addTypeCaches(SkipWhileIterable);
  dart.setGetterSignature(SkipWhileIterable, () => ({
    __proto__: dart.getGetters(SkipWhileIterable.__proto__),
    iterator: core.Iterator$(E),
    [$iterator]: core.Iterator$(E)
  }));
  dart.setLibraryUri(SkipWhileIterable, L25);
  dart.setFieldSignature(SkipWhileIterable, () => ({
    __proto__: dart.getFields(SkipWhileIterable.__proto__),
    [_iterable$]: dart.finalFieldType(core.Iterable$(E)),
    [_f$]: dart.finalFieldType(dart.fnType(core.bool, [E]))
  }));
  dart.defineExtensionAccessors(SkipWhileIterable, ['iterator']);
  return SkipWhileIterable;
});
_internal.SkipWhileIterable = _internal.SkipWhileIterable$();
dart.addTypeTests(_internal.SkipWhileIterable, _is_SkipWhileIterable_default);
var _hasSkipped = dart.privateName(_internal, "_hasSkipped");
const _is_SkipWhileIterator_default = Symbol('_is_SkipWhileIterator_default');
_internal.SkipWhileIterator$ = dart.generic(E => {
  class SkipWhileIterator extends core.Iterator$(E) {
    moveNext() {
      let t77;
      if (!dart.test(this[_hasSkipped])) {
        this[_hasSkipped] = true;
        while (dart.test(this[_iterator$].moveNext())) {
          if (!dart.test((t77 = this[_iterator$].current, this[_f$](t77)))) return true;
        }
      }
      return this[_iterator$].moveNext();
    }
    get current() {
      return this[_iterator$].current;
    }
  }
  (SkipWhileIterator.new = function(_iterator, _f) {
    if (_iterator == null) dart.nullFailed(L36, 671, 26, "_iterator");
    if (_f == null) dart.nullFailed(L36, 671, 42, "_f");
    this[_hasSkipped] = false;
    this[_iterator$] = _iterator;
    this[_f$] = _f;
    ;
  }).prototype = SkipWhileIterator.prototype;
  dart.addTypeTests(SkipWhileIterator);
  SkipWhileIterator.prototype[_is_SkipWhileIterator_default] = true;
  dart.addTypeCaches(SkipWhileIterator);
  dart.setMethodSignature(SkipWhileIterator, () => ({
    __proto__: dart.getMethods(SkipWhileIterator.__proto__),
    moveNext: dart.fnType(core.bool, [])
  }));
  dart.setGetterSignature(SkipWhileIterator, () => ({
    __proto__: dart.getGetters(SkipWhileIterator.__proto__),
    current: E
  }));
  dart.setLibraryUri(SkipWhileIterator, L25);
  dart.setFieldSignature(SkipWhileIterator, () => ({
    __proto__: dart.getFields(SkipWhileIterator.__proto__),
    [_iterator$]: dart.finalFieldType(core.Iterator$(E)),
    [_f$]: dart.finalFieldType(dart.fnType(core.bool, [E])),
    [_hasSkipped]: dart.fieldType(core.bool)
  }));
  return SkipWhileIterator;
});
_internal.SkipWhileIterator = _internal.SkipWhileIterator$();
dart.addTypeTests(_internal.SkipWhileIterator, _is_SkipWhileIterator_default);
const _is_EmptyIterable_default = Symbol('_is_EmptyIterable_default');
_internal.EmptyIterable$ = dart.generic(E => {
  var VoidToE = () => (VoidToE = dart.constFn(dart.fnType(E, [])))();
  var VoidToNE = () => (VoidToNE = dart.constFn(dart.nullable(VoidToE())))();
  var EAndEToE = () => (EAndEToE = dart.constFn(dart.fnType(E, [E, E])))();
  var ListOfE = () => (ListOfE = dart.constFn(core.List$(E)))();
  var _HashSetOfE = () => (_HashSetOfE = dart.constFn(collection._HashSet$(E)))();
  class EmptyIterable extends _internal.EfficientLengthIterable$(E) {
    get iterator() {
      return C20 || CT.C20;
    }
    forEach(action) {
      if (action == null) dart.nullFailed(L36, 694, 21, "action");
    }
    get isEmpty() {
      return true;
    }
    get length() {
      return 0;
    }
    get first() {
      dart.throw(_internal.IterableElementError.noElement());
    }
    get last() {
      dart.throw(_internal.IterableElementError.noElement());
    }
    get single() {
      dart.throw(_internal.IterableElementError.noElement());
    }
    elementAt(index) {
      if (index == null) dart.nullFailed(L36, 712, 19, "index");
      dart.throw(new core.RangeError.range(index, 0, 0, "index"));
    }
    contains(element) {
      return false;
    }
    every(test) {
      if (test == null) dart.nullFailed(L36, 718, 19, "test");
      return true;
    }
    any(test) {
      if (test == null) dart.nullFailed(L36, 720, 17, "test");
      return false;
    }
    firstWhere(test, opts) {
      if (test == null) dart.nullFailed(L36, 722, 21, "test");
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToNE().as(orElse);
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    lastWhere(test, opts) {
      if (test == null) dart.nullFailed(L36, 727, 20, "test");
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToNE().as(orElse);
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    singleWhere(test, opts) {
      if (test == null) dart.nullFailed(L36, 732, 22, "test");
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToNE().as(orElse);
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    join(separator = "") {
      if (separator == null) dart.nullFailed(L36, 737, 23, "separator");
      return "";
    }
    where(test) {
      if (test == null) dart.nullFailed(L36, 739, 26, "test");
      return this;
    }
    map(T, f) {
      if (f == null) dart.nullFailed(L36, 741, 24, "f");
      return new (_internal.EmptyIterable$(T)).new();
    }
    reduce(combine) {
      EAndEToE().as(combine);
      if (combine == null) dart.nullFailed(L36, 743, 14, "combine");
      dart.throw(_internal.IterableElementError.noElement());
    }
    fold(T, initialValue, combine) {
      if (combine == null) dart.nullFailed(L36, 747, 31, "combine");
      return initialValue;
    }
    skip(count) {
      if (count == null) dart.nullFailed(L36, 751, 24, "count");
      core.RangeError.checkNotNegative(count, "count");
      return this;
    }
    skipWhile(test) {
      if (test == null) dart.nullFailed(L36, 756, 30, "test");
      return this;
    }
    take(count) {
      if (count == null) dart.nullFailed(L36, 758, 24, "count");
      core.RangeError.checkNotNegative(count, "count");
      return this;
    }
    takeWhile(test) {
      if (test == null) dart.nullFailed(L36, 763, 30, "test");
      return this;
    }
    toList(opts) {
      let growable = opts && 'growable' in opts ? opts.growable : true;
      if (growable == null) dart.nullFailed(L36, 765, 24, "growable");
      return ListOfE().empty({growable: growable});
    }
    toSet() {
      return new (_HashSetOfE()).new();
    }
  }
  (EmptyIterable.new = function() {
    EmptyIterable.__proto__.new.call(this);
    ;
  }).prototype = EmptyIterable.prototype;
  dart.addTypeTests(EmptyIterable);
  EmptyIterable.prototype[_is_EmptyIterable_default] = true;
  dart.addTypeCaches(EmptyIterable);
  dart.setMethodSignature(EmptyIterable, () => ({
    __proto__: dart.getMethods(EmptyIterable.__proto__),
    map: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(T, [E])]], T => [dart.nullable(core.Object)]),
    [$map]: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(T, [E])]], T => [dart.nullable(core.Object)]),
    fold: dart.gFnType(T => [T, [T, dart.fnType(T, [T, E])]], T => [dart.nullable(core.Object)]),
    [$fold]: dart.gFnType(T => [T, [T, dart.fnType(T, [T, E])]], T => [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(EmptyIterable, () => ({
    __proto__: dart.getGetters(EmptyIterable.__proto__),
    iterator: core.Iterator$(E),
    [$iterator]: core.Iterator$(E)
  }));
  dart.setLibraryUri(EmptyIterable, L25);
  dart.defineExtensionMethods(EmptyIterable, [
    'forEach',
    'elementAt',
    'contains',
    'every',
    'any',
    'firstWhere',
    'lastWhere',
    'singleWhere',
    'join',
    'where',
    'map',
    'reduce',
    'fold',
    'skip',
    'skipWhile',
    'take',
    'takeWhile',
    'toList',
    'toSet'
  ]);
  dart.defineExtensionAccessors(EmptyIterable, [
    'iterator',
    'isEmpty',
    'length',
    'first',
    'last',
    'single'
  ]);
  return EmptyIterable;
});
_internal.EmptyIterable = _internal.EmptyIterable$();
dart.addTypeTests(_internal.EmptyIterable, _is_EmptyIterable_default);
const _is_EmptyIterator_default = Symbol('_is_EmptyIterator_default');
_internal.EmptyIterator$ = dart.generic(E => {
  class EmptyIterator extends core.Object {
    moveNext() {
      return false;
    }
    get current() {
      dart.throw(_internal.IterableElementError.noElement());
    }
  }
  (EmptyIterator.new = function() {
    ;
  }).prototype = EmptyIterator.prototype;
  dart.addTypeTests(EmptyIterator);
  EmptyIterator.prototype[_is_EmptyIterator_default] = true;
  dart.addTypeCaches(EmptyIterator);
  EmptyIterator[dart.implements] = () => [core.Iterator$(E)];
  dart.setMethodSignature(EmptyIterator, () => ({
    __proto__: dart.getMethods(EmptyIterator.__proto__),
    moveNext: dart.fnType(core.bool, [])
  }));
  dart.setGetterSignature(EmptyIterator, () => ({
    __proto__: dart.getGetters(EmptyIterator.__proto__),
    current: E
  }));
  dart.setLibraryUri(EmptyIterator, L25);
  return EmptyIterator;
});
_internal.EmptyIterator = _internal.EmptyIterator$();
dart.addTypeTests(_internal.EmptyIterator, _is_EmptyIterator_default);
var _first$ = dart.privateName(_internal, "_first");
var _second$ = dart.privateName(_internal, "_second");
const _is_FollowedByIterable_default = Symbol('_is_FollowedByIterable_default');
_internal.FollowedByIterable$ = dart.generic(E => {
  var FollowedByIteratorOfE = () => (FollowedByIteratorOfE = dart.constFn(_internal.FollowedByIterator$(E)))();
  class FollowedByIterable extends core.Iterable$(E) {
    static firstEfficient(first, second) {
      if (first == null) dart.nullFailed(L36, 785, 34, "first");
      if (second == null) dart.nullFailed(L36, 785, 53, "second");
      if (_internal.EfficientLengthIterable$(E).is(second)) {
        return new (_internal.EfficientLengthFollowedByIterable$(E)).new(first, second);
      }
      return new (_internal.FollowedByIterable$(E)).new(first, second);
    }
    get iterator() {
      return new (FollowedByIteratorOfE()).new(this[_first$], this[_second$]);
    }
    get length() {
      return dart.notNull(this[_first$][$length]) + dart.notNull(this[_second$][$length]);
    }
    get isEmpty() {
      return dart.test(this[_first$][$isEmpty]) && dart.test(this[_second$][$isEmpty]);
    }
    get isNotEmpty() {
      return dart.test(this[_first$][$isNotEmpty]) || dart.test(this[_second$][$isNotEmpty]);
    }
    contains(value) {
      return dart.test(this[_first$][$contains](value)) || dart.test(this[_second$][$contains](value));
    }
    get first() {
      let iterator = this[_first$][$iterator];
      if (dart.test(iterator.moveNext())) return iterator.current;
      return this[_second$][$first];
    }
    get last() {
      let iterator = this[_second$][$iterator];
      if (dart.test(iterator.moveNext())) {
        let last = iterator.current;
        while (dart.test(iterator.moveNext()))
          last = iterator.current;
        return last;
      }
      return this[_first$][$last];
    }
  }
  (FollowedByIterable.new = function(_first, _second) {
    if (_first == null) dart.nullFailed(L36, 782, 27, "_first");
    if (_second == null) dart.nullFailed(L36, 782, 40, "_second");
    this[_first$] = _first;
    this[_second$] = _second;
    FollowedByIterable.__proto__.new.call(this);
    ;
  }).prototype = FollowedByIterable.prototype;
  dart.addTypeTests(FollowedByIterable);
  FollowedByIterable.prototype[_is_FollowedByIterable_default] = true;
  dart.addTypeCaches(FollowedByIterable);
  dart.setGetterSignature(FollowedByIterable, () => ({
    __proto__: dart.getGetters(FollowedByIterable.__proto__),
    iterator: core.Iterator$(E),
    [$iterator]: core.Iterator$(E)
  }));
  dart.setLibraryUri(FollowedByIterable, L25);
  dart.setFieldSignature(FollowedByIterable, () => ({
    __proto__: dart.getFields(FollowedByIterable.__proto__),
    [_first$]: dart.finalFieldType(core.Iterable$(E)),
    [_second$]: dart.finalFieldType(core.Iterable$(E))
  }));
  dart.defineExtensionMethods(FollowedByIterable, ['contains']);
  dart.defineExtensionAccessors(FollowedByIterable, [
    'iterator',
    'length',
    'isEmpty',
    'isNotEmpty',
    'first',
    'last'
  ]);
  return FollowedByIterable;
});
_internal.FollowedByIterable = _internal.FollowedByIterable$();
dart.addTypeTests(_internal.FollowedByIterable, _is_FollowedByIterable_default);
const _is_EfficientLengthFollowedByIterable_default = Symbol('_is_EfficientLengthFollowedByIterable_default');
_internal.EfficientLengthFollowedByIterable$ = dart.generic(E => {
  class EfficientLengthFollowedByIterable extends _internal.FollowedByIterable$(E) {
    elementAt(index) {
      if (index == null) dart.nullFailed(L36, 828, 19, "index");
      let firstLength = this[_first$][$length];
      if (dart.notNull(index) < dart.notNull(firstLength)) return this[_first$][$elementAt](index);
      return this[_second$][$elementAt](dart.notNull(index) - dart.notNull(firstLength));
    }
    get first() {
      if (dart.test(this[_first$][$isNotEmpty])) return this[_first$][$first];
      return this[_second$][$first];
    }
    get last() {
      if (dart.test(this[_second$][$isNotEmpty])) return this[_second$][$last];
      return this[_first$][$last];
    }
  }
  (EfficientLengthFollowedByIterable.new = function(first, second) {
    if (first == null) dart.nullFailed(L36, 825, 34, "first");
    if (second == null) dart.nullFailed(L36, 825, 68, "second");
    EfficientLengthFollowedByIterable.__proto__.new.call(this, first, second);
    ;
  }).prototype = EfficientLengthFollowedByIterable.prototype;
  dart.addTypeTests(EfficientLengthFollowedByIterable);
  EfficientLengthFollowedByIterable.prototype[_is_EfficientLengthFollowedByIterable_default] = true;
  dart.addTypeCaches(EfficientLengthFollowedByIterable);
  EfficientLengthFollowedByIterable[dart.implements] = () => [_internal.EfficientLengthIterable$(E)];
  dart.setLibraryUri(EfficientLengthFollowedByIterable, L25);
  dart.defineExtensionMethods(EfficientLengthFollowedByIterable, ['elementAt']);
  dart.defineExtensionAccessors(EfficientLengthFollowedByIterable, ['first', 'last']);
  return EfficientLengthFollowedByIterable;
});
_internal.EfficientLengthFollowedByIterable = _internal.EfficientLengthFollowedByIterable$();
dart.addTypeTests(_internal.EfficientLengthFollowedByIterable, _is_EfficientLengthFollowedByIterable_default);
var _nextIterable$ = dart.privateName(_internal, "_nextIterable");
var _currentIterator = dart.privateName(_internal, "_currentIterator");
const _is_FollowedByIterator_default = Symbol('_is_FollowedByIterator_default');
_internal.FollowedByIterator$ = dart.generic(E => {
  class FollowedByIterator extends core.Object {
    moveNext() {
      if (dart.test(this[_currentIterator].moveNext())) return true;
      if (this[_nextIterable$] != null) {
        this[_currentIterator] = dart.nullCheck(this[_nextIterable$])[$iterator];
        this[_nextIterable$] = null;
        return this[_currentIterator].moveNext();
      }
      return false;
    }
    get current() {
      return this[_currentIterator].current;
    }
  }
  (FollowedByIterator.new = function(first, _nextIterable) {
    if (first == null) dart.nullFailed(L36, 849, 34, "first");
    this[_nextIterable$] = _nextIterable;
    this[_currentIterator] = first[$iterator];
    ;
  }).prototype = FollowedByIterator.prototype;
  dart.addTypeTests(FollowedByIterator);
  FollowedByIterator.prototype[_is_FollowedByIterator_default] = true;
  dart.addTypeCaches(FollowedByIterator);
  FollowedByIterator[dart.implements] = () => [core.Iterator$(E)];
  dart.setMethodSignature(FollowedByIterator, () => ({
    __proto__: dart.getMethods(FollowedByIterator.__proto__),
    moveNext: dart.fnType(core.bool, [])
  }));
  dart.setGetterSignature(FollowedByIterator, () => ({
    __proto__: dart.getGetters(FollowedByIterator.__proto__),
    current: E
  }));
  dart.setLibraryUri(FollowedByIterator, L25);
  dart.setFieldSignature(FollowedByIterator, () => ({
    __proto__: dart.getFields(FollowedByIterator.__proto__),
    [_currentIterator]: dart.fieldType(core.Iterator$(E)),
    [_nextIterable$]: dart.fieldType(dart.nullable(core.Iterable$(E)))
  }));
  return FollowedByIterator;
});
_internal.FollowedByIterator = _internal.FollowedByIterator$();
dart.addTypeTests(_internal.FollowedByIterator, _is_FollowedByIterator_default);
const _is_WhereTypeIterable_default = Symbol('_is_WhereTypeIterable_default');
_internal.WhereTypeIterable$ = dart.generic(T => {
  var WhereTypeIteratorOfT = () => (WhereTypeIteratorOfT = dart.constFn(_internal.WhereTypeIterator$(T)))();
  class WhereTypeIterable extends core.Iterable$(T) {
    get iterator() {
      return new (WhereTypeIteratorOfT()).new(this[_source$][$iterator]);
    }
  }
  (WhereTypeIterable.new = function(_source) {
    if (_source == null) dart.nullFailed(L36, 867, 26, "_source");
    this[_source$] = _source;
    WhereTypeIterable.__proto__.new.call(this);
    ;
  }).prototype = WhereTypeIterable.prototype;
  dart.addTypeTests(WhereTypeIterable);
  WhereTypeIterable.prototype[_is_WhereTypeIterable_default] = true;
  dart.addTypeCaches(WhereTypeIterable);
  dart.setGetterSignature(WhereTypeIterable, () => ({
    __proto__: dart.getGetters(WhereTypeIterable.__proto__),
    iterator: core.Iterator$(T),
    [$iterator]: core.Iterator$(T)
  }));
  dart.setLibraryUri(WhereTypeIterable, L25);
  dart.setFieldSignature(WhereTypeIterable, () => ({
    __proto__: dart.getFields(WhereTypeIterable.__proto__),
    [_source$]: dart.finalFieldType(core.Iterable$(dart.nullable(core.Object)))
  }));
  dart.defineExtensionAccessors(WhereTypeIterable, ['iterator']);
  return WhereTypeIterable;
});
_internal.WhereTypeIterable = _internal.WhereTypeIterable$();
dart.addTypeTests(_internal.WhereTypeIterable, _is_WhereTypeIterable_default);
const _is_WhereTypeIterator_default = Symbol('_is_WhereTypeIterator_default');
_internal.WhereTypeIterator$ = dart.generic(T => {
  class WhereTypeIterator extends core.Object {
    moveNext() {
      while (dart.test(this[_source$].moveNext())) {
        if (T.is(this[_source$].current)) return true;
      }
      return false;
    }
    get current() {
      return T.as(this[_source$].current);
    }
  }
  (WhereTypeIterator.new = function(_source) {
    if (_source == null) dart.nullFailed(L36, 873, 26, "_source");
    this[_source$] = _source;
    ;
  }).prototype = WhereTypeIterator.prototype;
  dart.addTypeTests(WhereTypeIterator);
  WhereTypeIterator.prototype[_is_WhereTypeIterator_default] = true;
  dart.addTypeCaches(WhereTypeIterator);
  WhereTypeIterator[dart.implements] = () => [core.Iterator$(T)];
  dart.setMethodSignature(WhereTypeIterator, () => ({
    __proto__: dart.getMethods(WhereTypeIterator.__proto__),
    moveNext: dart.fnType(core.bool, [])
  }));
  dart.setGetterSignature(WhereTypeIterator, () => ({
    __proto__: dart.getGetters(WhereTypeIterator.__proto__),
    current: T
  }));
  dart.setLibraryUri(WhereTypeIterator, L25);
  dart.setFieldSignature(WhereTypeIterator, () => ({
    __proto__: dart.getFields(WhereTypeIterator.__proto__),
    [_source$]: dart.finalFieldType(core.Iterator$(dart.nullable(core.Object)))
  }));
  return WhereTypeIterator;
});
_internal.WhereTypeIterator = _internal.WhereTypeIterator$();
dart.addTypeTests(_internal.WhereTypeIterator, _is_WhereTypeIterator_default);
_internal.IterableElementError = class IterableElementError extends core.Object {
  static noElement() {
    return new core.StateError.new("No element");
  }
  static tooMany() {
    return new core.StateError.new("Too many elements");
  }
  static tooFew() {
    return new core.StateError.new("Too few elements");
  }
};
(_internal.IterableElementError.new = function() {
  ;
}).prototype = _internal.IterableElementError.prototype;
dart.addTypeTests(_internal.IterableElementError);
dart.addTypeCaches(_internal.IterableElementError);
dart.setLibraryUri(_internal.IterableElementError, L25);
const _is_FixedLengthListMixin_default = Symbol('_is_FixedLengthListMixin_default');
_internal.FixedLengthListMixin$ = dart.generic(E => {
  var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
  class FixedLengthListMixin extends core.Object {
    set length(newLength) {
      if (newLength == null) dart.nullFailed(L24, 14, 18, "newLength");
      dart.throw(new core.UnsupportedError.new("Cannot change the length of a fixed-length list"));
    }
    add(value) {
      E.as(value);
      dart.throw(new core.UnsupportedError.new("Cannot add to a fixed-length list"));
    }
    insert(index, value) {
      if (index == null) dart.nullFailed(L24, 25, 19, "index");
      E.as(value);
      dart.throw(new core.UnsupportedError.new("Cannot add to a fixed-length list"));
    }
    insertAll(at, iterable) {
      if (at == null) dart.nullFailed(L24, 30, 22, "at");
      IterableOfE().as(iterable);
      if (iterable == null) dart.nullFailed(L24, 30, 38, "iterable");
      dart.throw(new core.UnsupportedError.new("Cannot add to a fixed-length list"));
    }
    addAll(iterable) {
      IterableOfE().as(iterable);
      if (iterable == null) dart.nullFailed(L24, 35, 27, "iterable");
      dart.throw(new core.UnsupportedError.new("Cannot add to a fixed-length list"));
    }
    remove(element) {
      dart.throw(new core.UnsupportedError.new("Cannot remove from a fixed-length list"));
    }
    removeWhere(test) {
      if (test == null) dart.nullFailed(L24, 45, 25, "test");
      dart.throw(new core.UnsupportedError.new("Cannot remove from a fixed-length list"));
    }
    retainWhere(test) {
      if (test == null) dart.nullFailed(L24, 50, 25, "test");
      dart.throw(new core.UnsupportedError.new("Cannot remove from a fixed-length list"));
    }
    clear() {
      dart.throw(new core.UnsupportedError.new("Cannot clear a fixed-length list"));
    }
    removeAt(index) {
      if (index == null) dart.nullFailed(L24, 60, 18, "index");
      dart.throw(new core.UnsupportedError.new("Cannot remove from a fixed-length list"));
    }
    removeLast() {
      dart.throw(new core.UnsupportedError.new("Cannot remove from a fixed-length list"));
    }
    removeRange(start, end) {
      if (start == null) dart.nullFailed(L24, 70, 24, "start");
      if (end == null) dart.nullFailed(L24, 70, 35, "end");
      dart.throw(new core.UnsupportedError.new("Cannot remove from a fixed-length list"));
    }
    replaceRange(start, end, iterable) {
      if (start == null) dart.nullFailed(L24, 75, 25, "start");
      if (end == null) dart.nullFailed(L24, 75, 36, "end");
      IterableOfE().as(iterable);
      if (iterable == null) dart.nullFailed(L24, 75, 53, "iterable");
      dart.throw(new core.UnsupportedError.new("Cannot remove from a fixed-length list"));
    }
  }
  (FixedLengthListMixin.new = function() {
    ;
  }).prototype = FixedLengthListMixin.prototype;
  dart.addTypeTests(FixedLengthListMixin);
  FixedLengthListMixin.prototype[_is_FixedLengthListMixin_default] = true;
  dart.addTypeCaches(FixedLengthListMixin);
  dart.setMethodSignature(FixedLengthListMixin, () => ({
    __proto__: dart.getMethods(FixedLengthListMixin.__proto__),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    [$add]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    insert: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
    [$insert]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
    insertAll: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
    [$insertAll]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
    addAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    [$addAll]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    remove: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    [$remove]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    removeWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
    [$removeWhere]: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
    retainWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
    [$retainWhere]: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
    clear: dart.fnType(dart.void, []),
    [$clear]: dart.fnType(dart.void, []),
    removeAt: dart.fnType(E, [core.int]),
    [$removeAt]: dart.fnType(E, [core.int]),
    removeLast: dart.fnType(E, []),
    [$removeLast]: dart.fnType(E, []),
    removeRange: dart.fnType(dart.void, [core.int, core.int]),
    [$removeRange]: dart.fnType(dart.void, [core.int, core.int]),
    replaceRange: dart.fnType(dart.void, [core.int, core.int, dart.nullable(core.Object)]),
    [$replaceRange]: dart.fnType(dart.void, [core.int, core.int, dart.nullable(core.Object)])
  }));
  dart.setSetterSignature(FixedLengthListMixin, () => ({
    __proto__: dart.getSetters(FixedLengthListMixin.__proto__),
    length: core.int,
    [$length]: core.int
  }));
  dart.setLibraryUri(FixedLengthListMixin, L25);
  dart.defineExtensionMethods(FixedLengthListMixin, [
    'add',
    'insert',
    'insertAll',
    'addAll',
    'remove',
    'removeWhere',
    'retainWhere',
    'clear',
    'removeAt',
    'removeLast',
    'removeRange',
    'replaceRange'
  ]);
  dart.defineExtensionAccessors(FixedLengthListMixin, ['length']);
  return FixedLengthListMixin;
});
_internal.FixedLengthListMixin = _internal.FixedLengthListMixin$();
dart.addTypeTests(_internal.FixedLengthListMixin, _is_FixedLengthListMixin_default);
const _is_FixedLengthListBase_default = Symbol('_is_FixedLengthListBase_default');
_internal.FixedLengthListBase$ = dart.generic(E => {
  const ListBase_FixedLengthListMixin$36 = class ListBase_FixedLengthListMixin extends collection.ListBase$(E) {};
  (ListBase_FixedLengthListMixin$36.new = function() {
  }).prototype = ListBase_FixedLengthListMixin$36.prototype;
  dart.applyMixin(ListBase_FixedLengthListMixin$36, _internal.FixedLengthListMixin$(E));
  class FixedLengthListBase extends ListBase_FixedLengthListMixin$36 {}
  (FixedLengthListBase.new = function() {
    ;
  }).prototype = FixedLengthListBase.prototype;
  dart.addTypeTests(FixedLengthListBase);
  FixedLengthListBase.prototype[_is_FixedLengthListBase_default] = true;
  dart.addTypeCaches(FixedLengthListBase);
  dart.setLibraryUri(FixedLengthListBase, L25);
  return FixedLengthListBase;
});
_internal.FixedLengthListBase = _internal.FixedLengthListBase$();
dart.addTypeTests(_internal.FixedLengthListBase, _is_FixedLengthListBase_default);
var _backedList$ = dart.privateName(_internal, "_backedList");
_internal._ListIndicesIterable = class _ListIndicesIterable extends _internal.ListIterable$(core.int) {
  get length() {
    return this[_backedList$][$length];
  }
  elementAt(index) {
    if (index == null) dart.nullFailed(L24, 217, 21, "index");
    core.RangeError.checkValidIndex(index, this);
    return index;
  }
};
(_internal._ListIndicesIterable.new = function(_backedList) {
  if (_backedList == null) dart.nullFailed(L24, 214, 29, "_backedList");
  this[_backedList$] = _backedList;
  _internal._ListIndicesIterable.__proto__.new.call(this);
  ;
}).prototype = _internal._ListIndicesIterable.prototype;
dart.addTypeTests(_internal._ListIndicesIterable);
dart.addTypeCaches(_internal._ListIndicesIterable);
dart.setLibraryUri(_internal._ListIndicesIterable, L25);
dart.setFieldSignature(_internal._ListIndicesIterable, () => ({
  __proto__: dart.getFields(_internal._ListIndicesIterable.__proto__),
  [_backedList$]: dart.fieldType(core.List)
}));
dart.defineExtensionMethods(_internal._ListIndicesIterable, ['elementAt']);
dart.defineExtensionAccessors(_internal._ListIndicesIterable, ['length']);
var _values$ = dart.privateName(_internal, "_values");
const _is__UnmodifiableMapMixin_default = Symbol('_is__UnmodifiableMapMixin_default');
collection._UnmodifiableMapMixin$ = dart.generic((K, V) => {
  var MapOfK$V = () => (MapOfK$V = dart.constFn(core.Map$(K, V)))();
  var MapEntryOfK$V = () => (MapEntryOfK$V = dart.constFn(core.MapEntry$(K, V)))();
  var IterableOfMapEntryOfK$V = () => (IterableOfMapEntryOfK$V = dart.constFn(core.Iterable$(MapEntryOfK$V())))();
  var KAndVToV = () => (KAndVToV = dart.constFn(dart.fnType(V, [K, V])))();
  var VoidToV = () => (VoidToV = dart.constFn(dart.fnType(V, [])))();
  var VToV = () => (VToV = dart.constFn(dart.fnType(V, [V])))();
  var VoidToNV = () => (VoidToNV = dart.constFn(dart.nullable(VoidToV())))();
  class _UnmodifiableMapMixin extends core.Object {
    _set(key, value$) {
      let value = value$;
      K.as(key);
      V.as(value);
      dart.throw(new core.UnsupportedError.new("Cannot modify unmodifiable map"));
      return value$;
    }
    addAll(other) {
      MapOfK$V().as(other);
      if (other == null) dart.nullFailed(L35, 276, 25, "other");
      dart.throw(new core.UnsupportedError.new("Cannot modify unmodifiable map"));
    }
    addEntries(entries) {
      IterableOfMapEntryOfK$V().as(entries);
      if (entries == null) dart.nullFailed(L35, 281, 44, "entries");
      dart.throw(new core.UnsupportedError.new("Cannot modify unmodifiable map"));
    }
    clear() {
      dart.throw(new core.UnsupportedError.new("Cannot modify unmodifiable map"));
    }
    remove(key) {
      dart.throw(new core.UnsupportedError.new("Cannot modify unmodifiable map"));
    }
    removeWhere(test) {
      if (test == null) dart.nullFailed(L35, 296, 25, "test");
      dart.throw(new core.UnsupportedError.new("Cannot modify unmodifiable map"));
    }
    putIfAbsent(key, ifAbsent) {
      K.as(key);
      VoidToV().as(ifAbsent);
      if (ifAbsent == null) dart.nullFailed(L35, 301, 26, "ifAbsent");
      dart.throw(new core.UnsupportedError.new("Cannot modify unmodifiable map"));
    }
    update(key, update, opts) {
      K.as(key);
      VToV().as(update);
      if (update == null) dart.nullFailed(L35, 306, 21, "update");
      let ifAbsent = opts && 'ifAbsent' in opts ? opts.ifAbsent : null;
      VoidToNV().as(ifAbsent);
      dart.throw(new core.UnsupportedError.new("Cannot modify unmodifiable map"));
    }
    updateAll(update) {
      KAndVToV().as(update);
      if (update == null) dart.nullFailed(L35, 311, 20, "update");
      dart.throw(new core.UnsupportedError.new("Cannot modify unmodifiable map"));
    }
  }
  (_UnmodifiableMapMixin.new = function() {
    ;
  }).prototype = _UnmodifiableMapMixin.prototype;
  _UnmodifiableMapMixin.prototype[dart.isMap] = true;
  dart.addTypeTests(_UnmodifiableMapMixin);
  _UnmodifiableMapMixin.prototype[_is__UnmodifiableMapMixin_default] = true;
  dart.addTypeCaches(_UnmodifiableMapMixin);
  _UnmodifiableMapMixin[dart.implements] = () => [core.Map$(K, V)];
  dart.setMethodSignature(_UnmodifiableMapMixin, () => ({
    __proto__: dart.getMethods(_UnmodifiableMapMixin.__proto__),
    _set: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
    [$_set]: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
    addAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    [$addAll]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    addEntries: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    [$addEntries]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    clear: dart.fnType(dart.void, []),
    [$clear]: dart.fnType(dart.void, []),
    remove: dart.fnType(V, [dart.nullable(core.Object)]),
    [$remove]: dart.fnType(V, [dart.nullable(core.Object)]),
    removeWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [K, V])]),
    [$removeWhere]: dart.fnType(dart.void, [dart.fnType(core.bool, [K, V])]),
    putIfAbsent: dart.fnType(V, [dart.nullable(core.Object), dart.nullable(core.Object)]),
    [$putIfAbsent]: dart.fnType(V, [dart.nullable(core.Object), dart.nullable(core.Object)]),
    update: dart.fnType(V, [dart.nullable(core.Object), dart.nullable(core.Object)], {ifAbsent: dart.nullable(core.Object)}, {}),
    [$update]: dart.fnType(V, [dart.nullable(core.Object), dart.nullable(core.Object)], {ifAbsent: dart.nullable(core.Object)}, {}),
    updateAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    [$updateAll]: dart.fnType(dart.void, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(_UnmodifiableMapMixin, L23);
  dart.defineExtensionMethods(_UnmodifiableMapMixin, [
    '_set',
    'addAll',
    'addEntries',
    'clear',
    'remove',
    'removeWhere',
    'putIfAbsent',
    'update',
    'updateAll'
  ]);
  return _UnmodifiableMapMixin;
});
collection._UnmodifiableMapMixin = collection._UnmodifiableMapMixin$();
dart.addTypeTests(collection._UnmodifiableMapMixin, _is__UnmodifiableMapMixin_default);
const _is_UnmodifiableMapBase_default = Symbol('_is_UnmodifiableMapBase_default');
collection.UnmodifiableMapBase$ = dart.generic((K, V) => {
  const MapBase__UnmodifiableMapMixin$36 = class MapBase__UnmodifiableMapMixin extends collection.MapBase$(K, V) {};
  (MapBase__UnmodifiableMapMixin$36.new = function() {
  }).prototype = MapBase__UnmodifiableMapMixin$36.prototype;
  dart.applyMixin(MapBase__UnmodifiableMapMixin$36, collection._UnmodifiableMapMixin$(K, V));
  class UnmodifiableMapBase extends MapBase__UnmodifiableMapMixin$36 {}
  (UnmodifiableMapBase.new = function() {
    ;
  }).prototype = UnmodifiableMapBase.prototype;
  dart.addTypeTests(UnmodifiableMapBase);
  UnmodifiableMapBase.prototype[_is_UnmodifiableMapBase_default] = true;
  dart.addTypeCaches(UnmodifiableMapBase);
  dart.setLibraryUri(UnmodifiableMapBase, L23);
  return UnmodifiableMapBase;
});
collection.UnmodifiableMapBase = collection.UnmodifiableMapBase$();
dart.addTypeTests(collection.UnmodifiableMapBase, _is_UnmodifiableMapBase_default);
const _is_ListMapView_default = Symbol('_is_ListMapView_default');
_internal.ListMapView$ = dart.generic(E => {
  var SubListIterableOfE = () => (SubListIterableOfE = dart.constFn(_internal.SubListIterable$(E)))();
  class ListMapView extends collection.UnmodifiableMapBase$(core.int, E) {
    _get(key) {
      return dart.test(this.containsKey(key)) ? this[_values$][$_get](core.int.as(key)) : null;
    }
    get length() {
      return this[_values$][$length];
    }
    get values() {
      return new (SubListIterableOfE()).new(this[_values$], 0, null);
    }
    get keys() {
      return new _internal._ListIndicesIterable.new(this[_values$]);
    }
    get isEmpty() {
      return this[_values$][$isEmpty];
    }
    get isNotEmpty() {
      return this[_values$][$isNotEmpty];
    }
    containsValue(value) {
      return this[_values$][$contains](value);
    }
    containsKey(key) {
      return core.int.is(key) && dart.notNull(key) >= 0 && dart.notNull(key) < dart.notNull(this.length);
    }
    forEach(f) {
      if (f == null) dart.nullFailed(L24, 239, 21, "f");
      let length = this[_values$][$length];
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        f(i, this[_values$][$_get](i));
        if (length != this[_values$][$length]) {
          dart.throw(new core.ConcurrentModificationError.new(this[_values$]));
        }
      }
    }
  }
  (ListMapView.new = function(_values) {
    if (_values == null) dart.nullFailed(L24, 226, 20, "_values");
    this[_values$] = _values;
    ;
  }).prototype = ListMapView.prototype;
  dart.addTypeTests(ListMapView);
  ListMapView.prototype[_is_ListMapView_default] = true;
  dart.addTypeCaches(ListMapView);
  dart.setMethodSignature(ListMapView, () => ({
    __proto__: dart.getMethods(ListMapView.__proto__),
    _get: dart.fnType(dart.nullable(E), [dart.nullable(core.Object)]),
    [$_get]: dart.fnType(dart.nullable(E), [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(ListMapView, () => ({
    __proto__: dart.getGetters(ListMapView.__proto__),
    keys: core.Iterable$(core.int),
    [$keys]: core.Iterable$(core.int)
  }));
  dart.setLibraryUri(ListMapView, L25);
  dart.setFieldSignature(ListMapView, () => ({
    __proto__: dart.getFields(ListMapView.__proto__),
    [_values$]: dart.fieldType(core.List$(E))
  }));
  dart.defineExtensionMethods(ListMapView, ['_get', 'containsValue', 'containsKey', 'forEach']);
  dart.defineExtensionAccessors(ListMapView, [
    'length',
    'values',
    'keys',
    'isEmpty',
    'isNotEmpty'
  ]);
  return ListMapView;
});
_internal.ListMapView = _internal.ListMapView$();
dart.addTypeTests(_internal.ListMapView, _is_ListMapView_default);
const _is_ReversedListIterable_default = Symbol('_is_ReversedListIterable_default');
_internal.ReversedListIterable$ = dart.generic(E => {
  class ReversedListIterable extends _internal.ListIterable$(E) {
    get length() {
      return this[_source$][$length];
    }
    elementAt(index) {
      if (index == null) dart.nullFailed(L24, 256, 19, "index");
      return this[_source$][$elementAt](dart.notNull(this[_source$][$length]) - 1 - dart.notNull(index));
    }
  }
  (ReversedListIterable.new = function(_source) {
    if (_source == null) dart.nullFailed(L24, 252, 29, "_source");
    this[_source$] = _source;
    ReversedListIterable.__proto__.new.call(this);
    ;
  }).prototype = ReversedListIterable.prototype;
  dart.addTypeTests(ReversedListIterable);
  ReversedListIterable.prototype[_is_ReversedListIterable_default] = true;
  dart.addTypeCaches(ReversedListIterable);
  dart.setLibraryUri(ReversedListIterable, L25);
  dart.setFieldSignature(ReversedListIterable, () => ({
    __proto__: dart.getFields(ReversedListIterable.__proto__),
    [_source$]: dart.fieldType(core.Iterable$(E))
  }));
  dart.defineExtensionMethods(ReversedListIterable, ['elementAt']);
  dart.defineExtensionAccessors(ReversedListIterable, ['length']);
  return ReversedListIterable;
});
_internal.ReversedListIterable = _internal.ReversedListIterable$();
dart.addTypeTests(_internal.ReversedListIterable, _is_ReversedListIterable_default);
_internal.UnmodifiableListError = class UnmodifiableListError extends core.Object {
  static add() {
    return new core.UnsupportedError.new("Cannot add to unmodifiable List");
  }
  static change() {
    return new core.UnsupportedError.new("Cannot change the content of an unmodifiable List");
  }
  static length() {
    return new core.UnsupportedError.new("Cannot change length of unmodifiable List");
  }
  static remove() {
    return new core.UnsupportedError.new("Cannot remove from unmodifiable List");
  }
};
(_internal.UnmodifiableListError.new = function() {
  ;
}).prototype = _internal.UnmodifiableListError.prototype;
dart.addTypeTests(_internal.UnmodifiableListError);
dart.addTypeCaches(_internal.UnmodifiableListError);
dart.setLibraryUri(_internal.UnmodifiableListError, L25);
_internal.NonGrowableListError = class NonGrowableListError extends core.Object {
  static add() {
    return new core.UnsupportedError.new("Cannot add to non-growable List");
  }
  static length() {
    return new core.UnsupportedError.new("Cannot change length of non-growable List");
  }
  static remove() {
    return new core.UnsupportedError.new("Cannot remove from non-growable List");
  }
};
(_internal.NonGrowableListError.new = function() {
  ;
}).prototype = _internal.NonGrowableListError.prototype;
dart.addTypeTests(_internal.NonGrowableListError);
dart.addTypeCaches(_internal.NonGrowableListError);
dart.setLibraryUri(_internal.NonGrowableListError, L25);
var _last = dart.privateName(_internal, "_last");
var _next = dart.privateName(_internal, "_next");
var _previous = dart.privateName(_internal, "_previous");
var _list = dart.privateName(_internal, "_list");
const _is_IterableBase_default = Symbol('_is_IterableBase_default');
collection.IterableBase$ = dart.generic(E => {
  class IterableBase extends core.Iterable$(E) {
    static iterableToShortString(iterable, leftDelimiter = "(", rightDelimiter = ")") {
      let t77;
      if (iterable == null) dart.nullFailed(L38, 226, 48, "iterable");
      if (leftDelimiter == null) dart.nullFailed(L38, 227, 15, "leftDelimiter");
      if (rightDelimiter == null) dart.nullFailed(L38, 227, 43, "rightDelimiter");
      if (dart.test(collection._isToStringVisiting(iterable))) {
        if (leftDelimiter === "(" && rightDelimiter === ")") {
          return "(...)";
        }
        return dart.str(leftDelimiter) + dart.str("...") + dart.str(rightDelimiter);
      }
      let parts = JSArrayOfString().of([]);
      collection._toStringVisiting[$add](iterable);
      try {
        collection._iterablePartsToStrings(iterable, parts);
      } finally {
        if (!core.identical(collection._toStringVisiting[$last], iterable)) dart.assertFailed(null, L38, 240, 14, "identical(_toStringVisiting.last, iterable)");
        collection._toStringVisiting[$removeLast]();
      }
      return (t77 = new core.StringBuffer.new(leftDelimiter), (() => {
        t77.writeAll(parts, ", ");
        t77.write(rightDelimiter);
        return t77;
      })()).toString();
    }
    static iterableToFullString(iterable, leftDelimiter = "(", rightDelimiter = ")") {
      if (iterable == null) dart.nullFailed(L38, 259, 47, "iterable");
      if (leftDelimiter == null) dart.nullFailed(L38, 260, 15, "leftDelimiter");
      if (rightDelimiter == null) dart.nullFailed(L38, 260, 43, "rightDelimiter");
      if (dart.test(collection._isToStringVisiting(iterable))) {
        return dart.str(leftDelimiter) + dart.str("...") + dart.str(rightDelimiter);
      }
      let buffer = new core.StringBuffer.new(leftDelimiter);
      collection._toStringVisiting[$add](iterable);
      try {
        buffer.writeAll(iterable, ", ");
      } finally {
        if (!core.identical(collection._toStringVisiting[$last], iterable)) dart.assertFailed(null, L38, 269, 14, "identical(_toStringVisiting.last, iterable)");
        collection._toStringVisiting[$removeLast]();
      }
      buffer.write(rightDelimiter);
      return buffer.toString();
    }
  }
  (IterableBase.new = function() {
    IterableBase.__proto__.new.call(this);
    ;
  }).prototype = IterableBase.prototype;
  dart.addTypeTests(IterableBase);
  IterableBase.prototype[_is_IterableBase_default] = true;
  dart.addTypeCaches(IterableBase);
  dart.setLibraryUri(IterableBase, L23);
  return IterableBase;
});
collection.IterableBase = collection.IterableBase$();
dart.addTypeTests(collection.IterableBase, _is_IterableBase_default);
const _is_LinkedList_default = Symbol('_is_LinkedList_default');
var length = dart.privateName(_internal, "LinkedList.length");
_internal.LinkedList$ = dart.generic(T => {
  var _LinkedListIteratorOfT = () => (_LinkedListIteratorOfT = dart.constFn(_internal._LinkedListIterator$(T)))();
  class LinkedList extends collection.IterableBase$(T) {
    get length() {
      return this[length];
    }
    set length(value) {
      this[length] = value;
    }
    get first() {
      return dart.nullCast(this[_first$], T);
    }
    get last() {
      return dart.nullCast(this[_last], T);
    }
    get isEmpty() {
      return this.length === 0;
    }
    add(newLast) {
      T.as(newLast);
      if (newLast == null) dart.nullFailed(L37, 22, 14, "newLast");
      if (!(newLast[_next] == null && newLast[_previous] == null)) dart.assertFailed(null, L37, 23, 12, "newLast._next == null && newLast._previous == null");
      if (this[_last] != null) {
        if (!(dart.nullCheck(this[_last])[_next] == null)) dart.assertFailed(null, L37, 25, 14, "_last!._next == null");
        dart.nullCheck(this[_last])[_next] = newLast;
      } else {
        this[_first$] = newLast;
      }
      newLast[_previous] = this[_last];
      this[_last] = newLast;
      dart.nullCheck(this[_last])[_list] = this;
      this.length = dart.notNull(this.length) + 1;
    }
    addFirst(newFirst) {
      T.as(newFirst);
      if (newFirst == null) dart.nullFailed(L37, 39, 19, "newFirst");
      if (this[_first$] != null) {
        if (!(dart.nullCheck(this[_first$])[_previous] == null)) dart.assertFailed(null, L37, 41, 14, "_first!._previous == null");
        dart.nullCheck(this[_first$])[_previous] = newFirst;
      } else {
        this[_last] = newFirst;
      }
      newFirst[_next] = this[_first$];
      this[_first$] = newFirst;
      dart.nullCheck(this[_first$])[_list] = this;
      this.length = dart.notNull(this.length) + 1;
    }
    remove(node) {
      T.as(node);
      if (node == null) dart.nullFailed(L37, 59, 17, "node");
      if (!dart.equals(node[_list], this)) return;
      this.length = dart.notNull(this.length) - 1;
      if (node[_previous] == null) {
        if (!(node == this[_first$])) dart.assertFailed(null, L37, 63, 14, "identical(node, _first)");
        this[_first$] = node[_next];
      } else {
        dart.nullCheck(node[_previous])[_next] = node[_next];
      }
      if (node[_next] == null) {
        if (!(node == this[_last])) dart.assertFailed(null, L37, 69, 14, "identical(node, _last)");
        this[_last] = node[_previous];
      } else {
        dart.nullCheck(node[_next])[_previous] = node[_previous];
      }
      node[_next] = node[_previous] = null;
      node[_list] = null;
    }
    get iterator() {
      return new (_LinkedListIteratorOfT()).new(this);
    }
  }
  (LinkedList.new = function() {
    this[_first$] = null;
    this[_last] = null;
    this[length] = 0;
    LinkedList.__proto__.new.call(this);
    ;
  }).prototype = LinkedList.prototype;
  dart.addTypeTests(LinkedList);
  LinkedList.prototype[_is_LinkedList_default] = true;
  dart.addTypeCaches(LinkedList);
  dart.setMethodSignature(LinkedList, () => ({
    __proto__: dart.getMethods(LinkedList.__proto__),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    addFirst: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    remove: dart.fnType(dart.void, [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(LinkedList, () => ({
    __proto__: dart.getGetters(LinkedList.__proto__),
    iterator: core.Iterator$(T),
    [$iterator]: core.Iterator$(T)
  }));
  dart.setLibraryUri(LinkedList, L25);
  dart.setFieldSignature(LinkedList, () => ({
    __proto__: dart.getFields(LinkedList.__proto__),
    [_first$]: dart.fieldType(dart.nullable(T)),
    [_last]: dart.fieldType(dart.nullable(T)),
    length: dart.fieldType(core.int)
  }));
  dart.defineExtensionAccessors(LinkedList, [
    'length',
    'first',
    'last',
    'isEmpty',
    'iterator'
  ]);
  return LinkedList;
});
_internal.LinkedList = _internal.LinkedList$();
dart.addTypeTests(_internal.LinkedList, _is_LinkedList_default);
const _is_LinkedListEntry_default = Symbol('_is_LinkedListEntry_default');
var _next$ = dart.privateName(_internal, "LinkedListEntry._next");
var _previous$ = dart.privateName(_internal, "LinkedListEntry._previous");
var _list$ = dart.privateName(_internal, "LinkedListEntry._list");
_internal.LinkedListEntry$ = dart.generic(T => {
  var TN = () => (TN = dart.constFn(dart.nullable(T)))();
  var LinkedListOfT = () => (LinkedListOfT = dart.constFn(_internal.LinkedList$(T)))();
  var LinkedListNOfT = () => (LinkedListNOfT = dart.constFn(dart.nullable(LinkedListOfT())))();
  class LinkedListEntry extends core.Object {
    get [_next]() {
      return this[_next$];
    }
    set [_next](value) {
      this[_next$] = TN().as(value);
    }
    get [_previous]() {
      return this[_previous$];
    }
    set [_previous](value) {
      this[_previous$] = TN().as(value);
    }
    get [_list]() {
      return this[_list$];
    }
    set [_list](value) {
      this[_list$] = LinkedListNOfT().as(value);
    }
    unlink() {
      let t77;
      t77 = this[_list];
      t77 == null ? null : t77.remove(T.as(this));
    }
  }
  (LinkedListEntry.new = function() {
    this[_next$] = null;
    this[_previous$] = null;
    this[_list$] = null;
    ;
  }).prototype = LinkedListEntry.prototype;
  dart.addTypeTests(LinkedListEntry);
  LinkedListEntry.prototype[_is_LinkedListEntry_default] = true;
  dart.addTypeCaches(LinkedListEntry);
  dart.setMethodSignature(LinkedListEntry, () => ({
    __proto__: dart.getMethods(LinkedListEntry.__proto__),
    unlink: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(LinkedListEntry, L25);
  dart.setFieldSignature(LinkedListEntry, () => ({
    __proto__: dart.getFields(LinkedListEntry.__proto__),
    [_next]: dart.fieldType(dart.nullable(T)),
    [_previous]: dart.fieldType(dart.nullable(T)),
    [_list]: dart.fieldType(dart.nullable(_internal.LinkedList$(T)))
  }));
  return LinkedListEntry;
});
_internal.LinkedListEntry = _internal.LinkedListEntry$();
dart.addTypeTests(_internal.LinkedListEntry, _is_LinkedListEntry_default);
const _is__LinkedListIterator_default = Symbol('_is__LinkedListIterator_default');
_internal._LinkedListIterator$ = dart.generic(T => {
  class _LinkedListIterator extends core.Object {
    get current() {
      let cur = this[_current$];
      return cur != null ? cur : dart.nullCast(cur, T);
    }
    moveNext() {
      if (this[_current$] == null) {
        let list = this[_list];
        if (list == null) return false;
        if (!(dart.notNull(list.length) > 0)) dart.assertFailed(null, L37, 126, 14, "list.length > 0");
        this[_current$] = list.first;
        this[_list] = null;
        return true;
      }
      this[_current$] = dart.nullCheck(this[_current$])[_next];
      return this[_current$] != null;
    }
  }
  (_LinkedListIterator.new = function(list) {
    if (list == null) dart.nullFailed(L37, 116, 37, "list");
    this[_current$] = null;
    this[_list] = list;
    if (list.length === 0) this[_list] = null;
  }).prototype = _LinkedListIterator.prototype;
  dart.addTypeTests(_LinkedListIterator);
  _LinkedListIterator.prototype[_is__LinkedListIterator_default] = true;
  dart.addTypeCaches(_LinkedListIterator);
  _LinkedListIterator[dart.implements] = () => [core.Iterator$(T)];
  dart.setMethodSignature(_LinkedListIterator, () => ({
    __proto__: dart.getMethods(_LinkedListIterator.__proto__),
    moveNext: dart.fnType(core.bool, [])
  }));
  dart.setGetterSignature(_LinkedListIterator, () => ({
    __proto__: dart.getGetters(_LinkedListIterator.__proto__),
    current: T
  }));
  dart.setLibraryUri(_LinkedListIterator, L25);
  dart.setFieldSignature(_LinkedListIterator, () => ({
    __proto__: dart.getFields(_LinkedListIterator.__proto__),
    [_current$]: dart.fieldType(dart.nullable(T)),
    [_list]: dart.fieldType(dart.nullable(_internal.LinkedList$(T)))
  }));
  return _LinkedListIterator;
});
_internal._LinkedListIterator = _internal._LinkedListIterator$();
dart.addTypeTests(_internal._LinkedListIterator, _is__LinkedListIterator_default);
_internal.Sort = class Sort extends core.Object {
  static sort(E, a, compare) {
    if (a == null) dart.nullFailed(L39, 32, 31, "a");
    if (compare == null) dart.nullFailed(L39, 32, 38, "compare");
    _internal.Sort._doSort(E, a, 0, dart.notNull(a[$length]) - 1, compare);
  }
  static sortRange(E, a, from, to, compare) {
    if (a == null) dart.nullFailed(L39, 45, 36, "a");
    if (from == null) dart.nullFailed(L39, 45, 43, "from");
    if (to == null) dart.nullFailed(L39, 45, 53, "to");
    if (compare == null) dart.nullFailed(L39, 45, 61, "compare");
    if (dart.notNull(from) < 0 || dart.notNull(to) > dart.notNull(a[$length]) || dart.notNull(to) < dart.notNull(from)) {
      dart.throw("OutOfRange");
    }
    _internal.Sort._doSort(E, a, from, dart.notNull(to) - 1, compare);
  }
  static _doSort(E, a, left, right, compare) {
    if (a == null) dart.nullFailed(L39, 56, 15, "a");
    if (left == null) dart.nullFailed(L39, 56, 22, "left");
    if (right == null) dart.nullFailed(L39, 56, 32, "right");
    if (compare == null) dart.nullFailed(L39, 56, 43, "compare");
    if (dart.notNull(right) - dart.notNull(left) <= 32) {
      _internal.Sort._insertionSort(E, a, left, right, compare);
    } else {
      _internal.Sort._dualPivotQuicksort(E, a, left, right, compare);
    }
  }
  static _insertionSort(E, a, left, right, compare) {
    if (a == null) dart.nullFailed(L39, 65, 15, "a");
    if (left == null) dart.nullFailed(L39, 65, 22, "left");
    if (right == null) dart.nullFailed(L39, 65, 32, "right");
    if (compare == null) dart.nullFailed(L39, 65, 43, "compare");
    for (let i = dart.notNull(left) + 1; i <= dart.notNull(right); i = i + 1) {
      let el = a[$_get](i);
      let j = i;
      while (j > dart.notNull(left) && dart.notNull(compare(a[$_get](j - 1), el)) > 0) {
        a[$_set](j, a[$_get](j - 1));
        j = j - 1;
      }
      a[$_set](j, el);
    }
  }
  static _dualPivotQuicksort(E, a, left, right, compare) {
    let t77, t77$, t77$0, t77$1, t77$2, t77$3, t77$4, t77$5, t77$6;
    if (a == null) dart.nullFailed(L39, 78, 15, "a");
    if (left == null) dart.nullFailed(L39, 78, 22, "left");
    if (right == null) dart.nullFailed(L39, 78, 32, "right");
    if (compare == null) dart.nullFailed(L39, 78, 43, "compare");
    if (!(dart.notNull(right) - dart.notNull(left) > 32)) dart.assertFailed(null, L39, 79, 12, "right - left > _INSERTION_SORT_THRESHOLD");
    let sixth = ((dart.notNull(right) - dart.notNull(left) + 1) / 6)[$truncate]();
    let index1 = dart.notNull(left) + sixth;
    let index5 = dart.notNull(right) - sixth;
    let index3 = ((dart.notNull(left) + dart.notNull(right)) / 2)[$truncate]();
    let index2 = index3 - sixth;
    let index4 = index3 + sixth;
    let el1 = a[$_get](index1);
    let el2 = a[$_get](index2);
    let el3 = a[$_get](index3);
    let el4 = a[$_get](index4);
    let el5 = a[$_get](index5);
    if (dart.notNull(compare(el1, el2)) > 0) {
      let t = el1;
      el1 = el2;
      el2 = t;
    }
    if (dart.notNull(compare(el4, el5)) > 0) {
      let t = el4;
      el4 = el5;
      el5 = t;
    }
    if (dart.notNull(compare(el1, el3)) > 0) {
      let t = el1;
      el1 = el3;
      el3 = t;
    }
    if (dart.notNull(compare(el2, el3)) > 0) {
      let t = el2;
      el2 = el3;
      el3 = t;
    }
    if (dart.notNull(compare(el1, el4)) > 0) {
      let t = el1;
      el1 = el4;
      el4 = t;
    }
    if (dart.notNull(compare(el3, el4)) > 0) {
      let t = el3;
      el3 = el4;
      el4 = t;
    }
    if (dart.notNull(compare(el2, el5)) > 0) {
      let t = el2;
      el2 = el5;
      el5 = t;
    }
    if (dart.notNull(compare(el2, el3)) > 0) {
      let t = el2;
      el2 = el3;
      el3 = t;
    }
    if (dart.notNull(compare(el4, el5)) > 0) {
      let t = el4;
      el4 = el5;
      el5 = t;
    }
    let pivot1 = el2;
    let pivot2 = el4;
    a[$_set](index1, el1);
    a[$_set](index3, el3);
    a[$_set](index5, el5);
    a[$_set](index2, a[$_get](left));
    a[$_set](index4, a[$_get](right));
    let less = dart.notNull(left) + 1;
    let great = dart.notNull(right) - 1;
    let pivots_are_equal = compare(pivot1, pivot2) === 0;
    if (pivots_are_equal) {
      let pivot = pivot1;
      for (let k = less; k <= great; k = k + 1) {
        let ak = a[$_get](k);
        let comp = compare(ak, pivot);
        if (comp === 0) continue;
        if (dart.notNull(comp) < 0) {
          if (k !== less) {
            a[$_set](k, a[$_get](less));
            a[$_set](less, ak);
          }
          less = less + 1;
        } else {
          while (true) {
            comp = compare(a[$_get](great), pivot);
            if (dart.notNull(comp) > 0) {
              great = great - 1;
              continue;
            } else if (dart.notNull(comp) < 0) {
              a[$_set](k, a[$_get](less));
              a[$_set]((t77 = less, less = t77 + 1, t77), a[$_get](great));
              a[$_set]((t77$ = great, great = t77$ - 1, t77$), ak);
              break;
            } else {
              a[$_set](k, a[$_get](great));
              a[$_set]((t77$0 = great, great = t77$0 - 1, t77$0), ak);
              break;
            }
          }
        }
      }
    } else {
      for (let k = less; k <= great; k = k + 1) {
        let ak = a[$_get](k);
        let comp_pivot1 = compare(ak, pivot1);
        if (dart.notNull(comp_pivot1) < 0) {
          if (k !== less) {
            a[$_set](k, a[$_get](less));
            a[$_set](less, ak);
          }
          less = less + 1;
        } else {
          let comp_pivot2 = compare(ak, pivot2);
          if (dart.notNull(comp_pivot2) > 0) {
            while (true) {
              let comp = compare(a[$_get](great), pivot2);
              if (dart.notNull(comp) > 0) {
                great = great - 1;
                if (great < k) break;
                continue;
              } else {
                comp = compare(a[$_get](great), pivot1);
                if (dart.notNull(comp) < 0) {
                  a[$_set](k, a[$_get](less));
                  a[$_set]((t77$1 = less, less = t77$1 + 1, t77$1), a[$_get](great));
                  a[$_set]((t77$2 = great, great = t77$2 - 1, t77$2), ak);
                } else {
                  a[$_set](k, a[$_get](great));
                  a[$_set]((t77$3 = great, great = t77$3 - 1, t77$3), ak);
                }
                break;
              }
            }
          }
        }
      }
    }
    a[$_set](left, a[$_get](less - 1));
    a[$_set](less - 1, pivot1);
    a[$_set](right, a[$_get](great + 1));
    a[$_set](great + 1, pivot2);
    _internal.Sort._doSort(E, a, left, less - 2, compare);
    _internal.Sort._doSort(E, a, great + 2, right, compare);
    if (pivots_are_equal) {
      return;
    }
    if (less < index1 && great > index5) {
      while (compare(a[$_get](less), pivot1) === 0) {
        less = less + 1;
      }
      while (compare(a[$_get](great), pivot2) === 0) {
        great = great - 1;
      }
      for (let k = less; k <= great; k = k + 1) {
        let ak = a[$_get](k);
        let comp_pivot1 = compare(ak, pivot1);
        if (comp_pivot1 === 0) {
          if (k !== less) {
            a[$_set](k, a[$_get](less));
            a[$_set](less, ak);
          }
          less = less + 1;
        } else {
          let comp_pivot2 = compare(ak, pivot2);
          if (comp_pivot2 === 0) {
            while (true) {
              let comp = compare(a[$_get](great), pivot2);
              if (comp === 0) {
                great = great - 1;
                if (great < k) break;
                continue;
              } else {
                comp = compare(a[$_get](great), pivot1);
                if (dart.notNull(comp) < 0) {
                  a[$_set](k, a[$_get](less));
                  a[$_set]((t77$4 = less, less = t77$4 + 1, t77$4), a[$_get](great));
                  a[$_set]((t77$5 = great, great = t77$5 - 1, t77$5), ak);
                } else {
                  a[$_set](k, a[$_get](great));
                  a[$_set]((t77$6 = great, great = t77$6 - 1, t77$6), ak);
                }
                break;
              }
            }
          }
        }
      }
      _internal.Sort._doSort(E, a, less, great, compare);
    } else {
      _internal.Sort._doSort(E, a, less, great, compare);
    }
  }
};
(_internal.Sort.new = function() {
  ;
}).prototype = _internal.Sort.prototype;
dart.addTypeTests(_internal.Sort);
dart.addTypeCaches(_internal.Sort);
dart.setLibraryUri(_internal.Sort, L25);
dart.defineLazy(_internal.Sort, {
  /*_internal.Sort._INSERTION_SORT_THRESHOLD*/get _INSERTION_SORT_THRESHOLD() {
    return 32;
  }
}, false);
var _name$0 = dart.privateName(_internal, "Symbol._name");
_internal.Symbol = class Symbol extends core.Object {
  get [_name$]() {
    return this[_name$0];
  }
  set [_name$](value) {
    super[_name$] = value;
  }
  _equals(other) {
    if (other == null) return false;
    return _internal.Symbol.is(other) && this[_name$] == other[_name$];
  }
  get hashCode() {
    let hash = this._hashCode;
    if (hash != null) return hash;
    hash = 536870911 & 664597 * dart.hashCode(this[_name$]);
    this._hashCode = hash;
    return hash;
  }
  toString() {
    return dart.str("Symbol(\"") + dart.str(this[_name$]) + dart.str("\")");
  }
  static getName(symbol) {
    if (symbol == null) dart.nullFailed(L41, 119, 32, "symbol");
    return symbol[_name$];
  }
  static validatePublicSymbol(name) {
    if (name == null) dart.nullFailed(L41, 121, 45, "name");
    if (name[$isEmpty] || dart.test(_internal.Symbol.publicSymbolPattern.hasMatch(name))) return name;
    if (name[$startsWith]("_")) {
      dart.throw(new core.ArgumentError.new(dart.str("\"") + dart.str(name) + dart.str("\" is a private identifier")));
    }
    dart.throw(new core.ArgumentError.new(dart.str("\"") + dart.str(name) + dart.str("\" is not a valid (qualified) symbol name")));
  }
  static isValidSymbol(name) {
    if (name == null) dart.nullFailed(L41, 137, 36, "name");
    return name[$isEmpty] || dart.test(_internal.Symbol.symbolPattern.hasMatch(name));
  }
  static computeUnmangledName(symbol) {
    if (symbol == null) dart.nullFailed(L40, 36, 45, "symbol");
    return symbol[_name$];
  }
};
(_internal.Symbol.new = function(name) {
  if (name == null) dart.nullFailed(L40, 20, 23, "name");
  this[_name$0] = name;
  ;
}).prototype = _internal.Symbol.prototype;
(_internal.Symbol.unvalidated = function(_name) {
  if (_name == null) dart.nullFailed(L41, 107, 33, "_name");
  this[_name$0] = _name;
  ;
}).prototype = _internal.Symbol.prototype;
(_internal.Symbol.validated = function(name) {
  if (name == null) dart.nullFailed(L41, 110, 27, "name");
  this[_name$0] = _internal.Symbol.validatePublicSymbol(name);
  ;
}).prototype = _internal.Symbol.prototype;
dart.addTypeTests(_internal.Symbol);
dart.addTypeCaches(_internal.Symbol);
_internal.Symbol[dart.implements] = () => [core.Symbol];
dart.setMethodSignature(_internal.Symbol, () => ({
  __proto__: dart.getMethods(_internal.Symbol.__proto__),
  toString: dart.fnType(dart.dynamic, []),
  [$toString]: dart.fnType(dart.dynamic, [])
}));
dart.setLibraryUri(_internal.Symbol, L25);
dart.setFieldSignature(_internal.Symbol, () => ({
  __proto__: dart.getFields(_internal.Symbol.__proto__),
  [_name$]: dart.finalFieldType(core.String)
}));
dart.defineExtensionMethods(_internal.Symbol, ['_equals', 'toString']);
dart.defineExtensionAccessors(_internal.Symbol, ['hashCode']);
dart.defineLazy(_internal.Symbol, {
  /*_internal.Symbol.reservedWordRE*/get reservedWordRE() {
    return "(?:assert|break|c(?:a(?:se|tch)|lass|on(?:st|tinue))|d(?:efault|o)|e(?:lse|num|xtends)|f(?:alse|inal(?:ly)?|or)|i[fns]|n(?:ew|ull)|ret(?:hrow|urn)|s(?:uper|witch)|t(?:h(?:is|row)|r(?:ue|y))|v(?:ar|oid)|w(?:hile|ith))";
  },
  /*_internal.Symbol.publicIdentifierRE*/get publicIdentifierRE() {
    return "(?!(?:assert|break|c(?:a(?:se|tch)|lass|on(?:st|tinue))|d(?:efault|o)|e(?:lse|num|xtends)|f(?:alse|inal(?:ly)?|or)|i[fns]|n(?:ew|ull)|ret(?:hrow|urn)|s(?:uper|witch)|t(?:h(?:is|row)|r(?:ue|y))|v(?:ar|oid)|w(?:hile|ith))\\b(?!\\$))[a-zA-Z$][\\w$]*";
  },
  /*_internal.Symbol.identifierRE*/get identifierRE() {
    return "(?!(?:assert|break|c(?:a(?:se|tch)|lass|on(?:st|tinue))|d(?:efault|o)|e(?:lse|num|xtends)|f(?:alse|inal(?:ly)?|or)|i[fns]|n(?:ew|ull)|ret(?:hrow|urn)|s(?:uper|witch)|t(?:h(?:is|row)|r(?:ue|y))|v(?:ar|oid)|w(?:hile|ith))\\b(?!\\$))[a-zA-Z$_][\\w$]*";
  },
  /*_internal.Symbol.operatorRE*/get operatorRE() {
    return "(?:[\\-+*/%&|^]|\\[\\]=?|==|~/?|<[<=]?|>[>=]?|unary-)";
  },
  /*_internal.Symbol.publicSymbolPattern*/get publicSymbolPattern() {
    return core.RegExp.new(dart.str("^(?:") + dart.str(_internal.Symbol.operatorRE) + dart.str("$|") + dart.str(_internal.Symbol.publicIdentifierRE) + dart.str("(?:=?$|[.](?!$)))+?$"));
  },
  /*_internal.Symbol.symbolPattern*/get symbolPattern() {
    return core.RegExp.new(dart.str("^(?:") + dart.str(_internal.Symbol.operatorRE) + dart.str("$|") + dart.str(_internal.Symbol.identifierRE) + dart.str("(?:=?$|[.](?!$)))+?$"));
  }
}, false);
_internal.typeAcceptsNull = function typeAcceptsNull(T) {
  return !false || T.is(null);
};
_internal.hexDigitValue = function hexDigitValue(char) {
  if (char == null) dart.nullFailed(L21, 100, 23, "char");
  if (!(dart.notNull(char) >= 0 && dart.notNull(char) <= 65535)) dart.assertFailed(null, L21, 101, 10, "char >= 0 && char <= 0xFFFF");
  let digit = (dart.notNull(char) ^ 48) >>> 0;
  if (digit <= 9) return digit;
  let letter = (dart.notNull(char) | 32) >>> 0;
  if (97 <= letter && letter <= 102) return letter - (97 - 10);
  return -1;
};
_internal.parseHexByte = function parseHexByte(source, index) {
  if (source == null) dart.nullFailed(L21, 115, 25, "source");
  if (index == null) dart.nullFailed(L21, 115, 37, "index");
  if (!(dart.notNull(index) + 2 <= source.length)) dart.assertFailed(null, L21, 116, 10, "index + 2 <= source.length");
  let digit1 = _internal.hexDigitValue(source[$codeUnitAt](index));
  let digit2 = _internal.hexDigitValue(source[$codeUnitAt](dart.notNull(index) + 1));
  return dart.notNull(digit1) * 16 + dart.notNull(digit2) - (dart.notNull(digit2) & 256);
};
_internal.extractTypeArguments = function extractTypeArguments$(T, instance, extract) {
  if (extract == null) dart.nullFailed(L40, 57, 54, "extract");
  return dart.extractTypeArguments(T, instance, extract);
};
_internal.checkNotNullable = function checkNotNullable(T, value, name) {
  if (value == null) dart.nullFailed(L21, 223, 40, "value");
  if (name == null) dart.nullFailed(L21, 223, 54, "name");
  if (value == null) {
    dart.throw(new (_internal.NotNullableError$(T)).new(name));
  }
  return value;
};
_internal.valueOfNonNullableParamWithDefault = function valueOfNonNullableParamWithDefault(T, value, defaultVal) {
  if (value == null) dart.nullFailed(L21, 248, 58, "value");
  if (defaultVal == null) dart.nullFailed(L21, 248, 67, "defaultVal");
  if (value == null) {
    return defaultVal;
  } else {
    return value;
  }
};
_internal._checkCount = function _checkCount(count) {
  if (count == null) dart.nullFailed(L36, 632, 21, "count");
  core.ArgumentError.checkNotNull(core.int, count, "count");
  core.RangeError.checkNotNegative(count, "count");
  return count;
};
_internal.makeListFixedLength = function makeListFixedLength(T, growableList) {
  if (growableList == null) dart.nullFailed(L40, 45, 40, "growableList");
  _interceptors.JSArray.markFixedList(growableList);
  return growableList;
};
_internal.makeFixedListUnmodifiable = function makeFixedListUnmodifiable(T, fixedLengthList) {
  if (fixedLengthList == null) dart.nullFailed(L40, 51, 46, "fixedLengthList");
  _interceptors.JSArray.markUnmodifiableList(fixedLengthList);
  return fixedLengthList;
};
_internal.printToConsole = function printToConsole(line) {
  if (line == null) dart.nullFailed(L40, 40, 28, "line");
  _js_primitives.printString(dart.str(line));
};
var C21;
dart.defineLazy(_internal, {
  /*_internal.POWERS_OF_TEN*/get POWERS_OF_TEN() {
    return C21 || CT.C21;
  },
  /*_internal.printToZone*/get printToZone() {
    return null;
  },
  set printToZone(_) {}
}, false);
var _handle = dart.privateName(_isolate_helper, "_handle");
var _tick = dart.privateName(_isolate_helper, "_tick");
var _once = dart.privateName(_isolate_helper, "_once");
_isolate_helper.TimerImpl = class TimerImpl extends core.Object {
  get tick() {
    return this[_tick];
  }
  cancel() {
    if (dart.test(_isolate_helper.hasTimer())) {
      if (this[_handle] == null) return;
      dart.removeAsyncCallback();
      if (dart.test(this[_once])) {
        _isolate_helper.global.clearTimeout(this[_handle]);
      } else {
        _isolate_helper.global.clearInterval(this[_handle]);
      }
      this[_handle] = null;
    } else {
      dart.throw(new core.UnsupportedError.new("Canceling a timer."));
    }
  }
  get isActive() {
    return this[_handle] != null;
  }
};
(_isolate_helper.TimerImpl.new = function(milliseconds, callback) {
  if (milliseconds == null) dart.nullFailed(L42, 40, 17, "milliseconds");
  if (callback == null) dart.nullFailed(L42, 40, 36, "callback");
  this[_handle] = null;
  this[_tick] = 0;
  this[_once] = true;
  if (dart.test(_isolate_helper.hasTimer())) {
    let currentHotRestartIteration = dart.hotRestartIteration;
    const internalCallback = () => {
      this[_handle] = null;
      dart.removeAsyncCallback();
      this[_tick] = 1;
      if (currentHotRestartIteration == dart.hotRestartIteration) {
        callback();
      }
    };
    dart.fn(internalCallback, VoidTovoid());
    dart.addAsyncCallback();
    this[_handle] = _isolate_helper.global.setTimeout(internalCallback, milliseconds);
  } else {
    dart.throw(new core.UnsupportedError.new("`setTimeout()` not found."));
  }
}).prototype = _isolate_helper.TimerImpl.prototype;
(_isolate_helper.TimerImpl.periodic = function(milliseconds, callback) {
  if (milliseconds == null) dart.nullFailed(L42, 61, 26, "milliseconds");
  if (callback == null) dart.nullFailed(L42, 61, 45, "callback");
  this[_handle] = null;
  this[_tick] = 0;
  this[_once] = false;
  if (dart.test(_isolate_helper.hasTimer())) {
    dart.addAsyncCallback();
    let start = Date.now();
    let currentHotRestartIteration = dart.hotRestartIteration;
    this[_handle] = _isolate_helper.global.setInterval(dart.fn(() => {
      if (currentHotRestartIteration != dart.hotRestartIteration) {
        this.cancel();
        return;
      }
      let tick = dart.notNull(this[_tick]) + 1;
      if (dart.notNull(milliseconds) > 0) {
        let duration = Date.now() - start;
        if (duration > (tick + 1) * dart.notNull(milliseconds)) {
          tick = (duration / dart.notNull(milliseconds))[$truncate]();
        }
      }
      this[_tick] = tick;
      callback(this);
    }, VoidToNullN()), milliseconds);
  } else {
    dart.throw(new core.UnsupportedError.new("Periodic timer."));
  }
}).prototype = _isolate_helper.TimerImpl.prototype;
dart.addTypeTests(_isolate_helper.TimerImpl);
dart.addTypeCaches(_isolate_helper.TimerImpl);
_isolate_helper.TimerImpl[dart.implements] = () => [async.Timer];
dart.setMethodSignature(_isolate_helper.TimerImpl, () => ({
  __proto__: dart.getMethods(_isolate_helper.TimerImpl.__proto__),
  cancel: dart.fnType(dart.void, [])
}));
dart.setGetterSignature(_isolate_helper.TimerImpl, () => ({
  __proto__: dart.getGetters(_isolate_helper.TimerImpl.__proto__),
  tick: core.int,
  isActive: core.bool
}));
dart.setLibraryUri(_isolate_helper.TimerImpl, L43);
dart.setFieldSignature(_isolate_helper.TimerImpl, () => ({
  __proto__: dart.getFields(_isolate_helper.TimerImpl.__proto__),
  [_once]: dart.finalFieldType(core.bool),
  [_handle]: dart.fieldType(dart.nullable(core.int)),
  [_tick]: dart.fieldType(core.int)
}));
_isolate_helper.startRootIsolate = function startRootIsolate(main, args) {
  if (args == null) args = JSArrayOfString().of([]);
  if (core.List.is(args)) {
    if (!ListOfString().is(args)) args = ListOfString().from(args);
    if (typeof main == "function") {
      main(args, null);
    } else {
      dart.dcall(main, [args]);
    }
  } else {
    dart.throw(new core.ArgumentError.new(dart.str("Arguments to main must be a List: ") + dart.str(args)));
  }
};
_isolate_helper.hasTimer = function hasTimer() {
  return _isolate_helper.global.setTimeout != null;
};
dart.defineLazy(_isolate_helper, {
  /*_isolate_helper.global*/get global() {
    return dart.global;
  }
}, false);
_js_helper._Patch = class _Patch extends core.Object {};
(_js_helper._Patch.new = function() {
  ;
}).prototype = _js_helper._Patch.prototype;
dart.addTypeTests(_js_helper._Patch);
dart.addTypeCaches(_js_helper._Patch);
dart.setLibraryUri(_js_helper._Patch, L44);
var _current$0 = dart.privateName(_js_helper, "_current");
var _jsIterator$ = dart.privateName(_js_helper, "_jsIterator");
const _is_DartIterator_default = Symbol('_is_DartIterator_default');
_js_helper.DartIterator$ = dart.generic(E => {
  class DartIterator extends core.Object {
    get current() {
      return E.as(this[_current$0]);
    }
    moveNext() {
      let ret = this[_jsIterator$].next();
      this[_current$0] = ret.value;
      return !ret.done;
    }
  }
  (DartIterator.new = function(_jsIterator) {
    this[_current$0] = null;
    this[_jsIterator$] = _jsIterator;
    ;
  }).prototype = DartIterator.prototype;
  dart.addTypeTests(DartIterator);
  DartIterator.prototype[_is_DartIterator_default] = true;
  dart.addTypeCaches(DartIterator);
  DartIterator[dart.implements] = () => [core.Iterator$(E)];
  dart.setMethodSignature(DartIterator, () => ({
    __proto__: dart.getMethods(DartIterator.__proto__),
    moveNext: dart.fnType(core.bool, [])
  }));
  dart.setGetterSignature(DartIterator, () => ({
    __proto__: dart.getGetters(DartIterator.__proto__),
    current: E
  }));
  dart.setLibraryUri(DartIterator, L44);
  dart.setFieldSignature(DartIterator, () => ({
    __proto__: dart.getFields(DartIterator.__proto__),
    [_jsIterator$]: dart.finalFieldType(dart.dynamic),
    [_current$0]: dart.fieldType(dart.nullable(E))
  }));
  return DartIterator;
});
_js_helper.DartIterator = _js_helper.DartIterator$();
dart.addTypeTests(_js_helper.DartIterator, _is_DartIterator_default);
var _initGenerator$ = dart.privateName(_js_helper, "_initGenerator");
const _is_SyncIterable_default = Symbol('_is_SyncIterable_default');
_js_helper.SyncIterable$ = dart.generic(E => {
  var DartIteratorOfE = () => (DartIteratorOfE = dart.constFn(_js_helper.DartIterator$(E)))();
  class SyncIterable extends collection.IterableBase$(E) {
    [Symbol.iterator]() {
      return this[_initGenerator$]();
    }
    get iterator() {
      return new (DartIteratorOfE()).new(this[_initGenerator$]());
    }
  }
  (SyncIterable.new = function(_initGenerator) {
    if (_initGenerator == null) dart.nullFailed(L45, 62, 21, "_initGenerator");
    this[_initGenerator$] = _initGenerator;
    SyncIterable.__proto__.new.call(this);
    ;
  }).prototype = SyncIterable.prototype;
  dart.addTypeTests(SyncIterable);
  SyncIterable.prototype[_is_SyncIterable_default] = true;
  dart.addTypeCaches(SyncIterable);
  dart.setMethodSignature(SyncIterable, () => ({
    __proto__: dart.getMethods(SyncIterable.__proto__),
    [Symbol.iterator]: dart.fnType(dart.dynamic, [])
  }));
  dart.setGetterSignature(SyncIterable, () => ({
    __proto__: dart.getGetters(SyncIterable.__proto__),
    iterator: core.Iterator$(E),
    [$iterator]: core.Iterator$(E)
  }));
  dart.setLibraryUri(SyncIterable, L44);
  dart.setFieldSignature(SyncIterable, () => ({
    __proto__: dart.getFields(SyncIterable.__proto__),
    [_initGenerator$]: dart.finalFieldType(dart.fnType(dart.dynamic, []))
  }));
  dart.defineExtensionAccessors(SyncIterable, ['iterator']);
  return SyncIterable;
});
_js_helper.SyncIterable = _js_helper.SyncIterable$();
dart.addTypeTests(_js_helper.SyncIterable, _is_SyncIterable_default);
var C22;
_js_helper.Primitives = class Primitives extends core.Object {
  static parseInt(source, _radix) {
    if (source == null) dart.argumentError(source);
    let re = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i;
    let match = re.exec(source);
    let digitsIndex = 1;
    let hexIndex = 2;
    let decimalIndex = 3;
    if (match == null) {
      return null;
    }
    let decimalMatch = match[$_get](decimalIndex);
    if (_radix == null) {
      if (decimalMatch != null) {
        return parseInt(source, 10);
      }
      if (match[$_get](hexIndex) != null) {
        return parseInt(source, 16);
      }
      return null;
    }
    let radix = _radix;
    if (radix < 2 || radix > 36) {
      dart.throw(new core.RangeError.range(radix, 2, 36, "radix"));
    }
    if (radix === 10 && decimalMatch != null) {
      return parseInt(source, 10);
    }
    if (radix < 10 || decimalMatch == null) {
      let maxCharCode = null;
      if (radix <= 10) {
        maxCharCode = 48 - 1 + radix;
      } else {
        maxCharCode = 97 - 10 - 1 + radix;
      }
      if (!(typeof match[$_get](digitsIndex) == 'string')) dart.assertFailed(null, L45, 127, 14, "match[digitsIndex] is String");
      let digitsPart = match[digitsIndex];
      for (let i = 0; i < digitsPart.length; i = i + 1) {
        let characterCode = (digitsPart[$codeUnitAt](i) | 32) >>> 0;
        if (characterCode > dart.notNull(maxCharCode)) {
          return null;
        }
      }
    }
    return parseInt(source, radix);
  }
  static parseDouble(source) {
    if (source == null) dart.argumentError(source);
    if (!/^\s*[+-]?(?:Infinity|NaN|(?:\.\d+|\d+(?:\.\d*)?)(?:[eE][+-]?\d+)?)\s*$/.test(source)) {
      return null;
    }
    let result = parseFloat(source);
    if (result[$isNaN]) {
      let trimmed = source[$trim]();
      if (trimmed === "NaN" || trimmed === "+NaN" || trimmed === "-NaN") {
        return result;
      }
      return null;
    }
    return result;
  }
  static dateNow() {
    return Date.now();
  }
  static initTicker() {
    if (_js_helper.Primitives.timerFrequency !== 0) return;
    _js_helper.Primitives.timerFrequency = 1000;
    if (typeof window == "undefined") return;
    let jsWindow = window;
    if (jsWindow == null) return;
    let performance = jsWindow.performance;
    if (performance == null) return;
    if (typeof performance.now != "function") return;
    _js_helper.Primitives.timerFrequency = 1000000;
    _js_helper.Primitives.timerTicks = dart.fn(() => (1000 * performance.now())[$floor](), VoidToint());
  }
  static get isD8() {
    return typeof version == "function" && typeof os == "object" && "system" in os;
  }
  static get isJsshell() {
    return typeof version == "function" && typeof system == "function";
  }
  static currentUri() {
    if (!!dart.global.location) {
      return dart.global.location.href;
    }
    return "";
  }
  static _fromCharCodeApply(array) {
    if (array == null) dart.nullFailed(L45, 214, 46, "array");
    let end = dart.notNull(array[$length]);
    if (end <= 500) {
      return String.fromCharCode.apply(null, array);
    }
    let result = "";
    for (let i = 0; i < end; i = i + 500) {
      let chunkEnd = i + 500 < end ? i + 500 : end;
      result = result + String.fromCharCode.apply(null, array.slice(i, chunkEnd));
    }
    return result;
  }
  static stringFromCodePoints(codePoints) {
    if (codePoints == null) dart.nullFailed(L45, 236, 51, "codePoints");
    let a = JSArrayOfint().of([]);
    for (let i of codePoints) {
      if (i == null) dart.argumentError(i);
      {
        if (i <= 65535) {
          a[$add](i);
        } else if (i <= 1114111) {
          a[$add](55296 + (i - 65536 >> 10 & 1023));
          a[$add](56320 + (i & 1023));
        } else {
          dart.throw(_js_helper.argumentErrorValue(i));
        }
      }
    }
    return _js_helper.Primitives._fromCharCodeApply(a);
  }
  static stringFromCharCodes(charCodes) {
    if (charCodes == null) dart.nullFailed(L45, 252, 50, "charCodes");
    for (let i of charCodes) {
      if (i == null) dart.argumentError(i);
      {
        if (i < 0) dart.throw(_js_helper.argumentErrorValue(i));
        if (i > 65535) return _js_helper.Primitives.stringFromCodePoints(charCodes);
      }
    }
    return _js_helper.Primitives._fromCharCodeApply(charCodes);
  }
  static stringFromNativeUint8List(charCodes, start, end) {
    if (charCodes == null) dart.nullFailed(L45, 263, 23, "charCodes");
    if (start == null) dart.argumentError(start);
    if (end == null) dart.argumentError(end);
    if (end <= 500 && start === 0 && end === charCodes[$length]) {
      return String.fromCharCode.apply(null, charCodes);
    }
    let result = "";
    for (let i = start; i < end; i = i + 500) {
      let chunkEnd = i + 500 < end ? i + 500 : end;
      result = result + String.fromCharCode.apply(null, charCodes.subarray(i, chunkEnd));
    }
    return result;
  }
  static stringFromCharCode(charCode) {
    if (charCode == null) dart.argumentError(charCode);
    if (0 <= charCode) {
      if (charCode <= 65535) {
        return String.fromCharCode(charCode);
      }
      if (charCode <= 1114111) {
        let bits = charCode - 65536;
        let low = 56320 | bits & 1023;
        let high = (55296 | bits[$rightShift](10)) >>> 0;
        return String.fromCharCode(high, low);
      }
    }
    dart.throw(new core.RangeError.range(charCode, 0, 1114111));
  }
  static stringConcatUnchecked(string1, string2) {
    if (string1 == null) dart.nullFailed(L45, 298, 46, "string1");
    if (string2 == null) dart.nullFailed(L45, 298, 62, "string2");
    return _foreign_helper.JS_STRING_CONCAT(string1, string2);
  }
  static flattenString(str) {
    if (str == null) dart.nullFailed(L45, 302, 38, "str");
    return str.charCodeAt(0) == 0 ? str : str;
  }
  static getTimeZoneName(receiver) {
    if (receiver == null) dart.nullFailed(L45, 306, 42, "receiver");
    let d = _js_helper.Primitives.lazyAsJsDate(receiver);
    let match = /\((.*)\)/.exec(d.toString());
    if (match != null) return core.String.as(match[$_get](1));
    match = /^[A-Z,a-z]{3}\s[A-Z,a-z]{3}\s\d+\s\d{2}:\d{2}:\d{2}\s([A-Z]{3,5})\s\d{4}$/.exec(d.toString());
    if (match != null) return core.String.as(match[$_get](1));
    match = /(?:GMT|UTC)[+-]\d{4}/.exec(d.toString());
    if (match != null) return core.String.as(match[$_get](0));
    return "";
  }
  static getTimeZoneOffsetInMinutes(receiver) {
    if (receiver == null) dart.nullFailed(L45, 341, 50, "receiver");
    return -_js_helper.Primitives.lazyAsJsDate(receiver).getTimezoneOffset();
  }
  static valueFromDecomposedDate(years, month, day, hours, minutes, seconds, milliseconds, isUtc) {
    if (years == null) dart.argumentError(years);
    if (month == null) dart.argumentError(month);
    if (day == null) dart.argumentError(day);
    if (hours == null) dart.argumentError(hours);
    if (minutes == null) dart.argumentError(minutes);
    if (seconds == null) dart.argumentError(seconds);
    if (milliseconds == null) dart.argumentError(milliseconds);
    if (isUtc == null) dart.argumentError(isUtc);
    let MAX_MILLISECONDS_SINCE_EPOCH = 8640000000000000;
    let jsMonth = month - 1;
    let value = null;
    if (isUtc) {
      value = Date.UTC(years, jsMonth, day, hours, minutes, seconds, milliseconds);
    } else {
      value = new Date(years, jsMonth, day, hours, minutes, seconds, milliseconds).valueOf();
    }
    if (value[$isNaN] || dart.notNull(value) < -MAX_MILLISECONDS_SINCE_EPOCH || dart.notNull(value) > MAX_MILLISECONDS_SINCE_EPOCH) {
      return null;
    }
    if (years <= 0 || years < 100) return _js_helper.Primitives.patchUpY2K(value, years, isUtc);
    return value;
  }
  static patchUpY2K(value, years, isUtc) {
    let date = new Date(value);
    if (dart.dtest(isUtc)) {
      date.setUTCFullYear(years);
    } else {
      date.setFullYear(years);
    }
    return date.valueOf();
  }
  static lazyAsJsDate(receiver) {
    if (receiver == null) dart.nullFailed(L45, 385, 32, "receiver");
    if (receiver.date === void 0) {
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    }
    return receiver.date;
  }
  static getYear(receiver) {
    if (receiver == null) dart.nullFailed(L45, 397, 31, "receiver");
    return dart.test(receiver.isUtc) ? _js_helper.Primitives.lazyAsJsDate(receiver).getUTCFullYear() + 0 : _js_helper.Primitives.lazyAsJsDate(receiver).getFullYear() + 0;
  }
  static getMonth(receiver) {
    if (receiver == null) dart.nullFailed(L45, 403, 32, "receiver");
    return dart.test(receiver.isUtc) ? _js_helper.Primitives.lazyAsJsDate(receiver).getUTCMonth() + 1 : _js_helper.Primitives.lazyAsJsDate(receiver).getMonth() + 1;
  }
  static getDay(receiver) {
    if (receiver == null) dart.nullFailed(L45, 409, 30, "receiver");
    return dart.test(receiver.isUtc) ? _js_helper.Primitives.lazyAsJsDate(receiver).getUTCDate() + 0 : _js_helper.Primitives.lazyAsJsDate(receiver).getDate() + 0;
  }
  static getHours(receiver) {
    if (receiver == null) dart.nullFailed(L45, 415, 32, "receiver");
    return dart.test(receiver.isUtc) ? _js_helper.Primitives.lazyAsJsDate(receiver).getUTCHours() + 0 : _js_helper.Primitives.lazyAsJsDate(receiver).getHours() + 0;
  }
  static getMinutes(receiver) {
    if (receiver == null) dart.nullFailed(L45, 421, 34, "receiver");
    return dart.test(receiver.isUtc) ? _js_helper.Primitives.lazyAsJsDate(receiver).getUTCMinutes() + 0 : _js_helper.Primitives.lazyAsJsDate(receiver).getMinutes() + 0;
  }
  static getSeconds(receiver) {
    if (receiver == null) dart.nullFailed(L45, 427, 34, "receiver");
    return dart.test(receiver.isUtc) ? _js_helper.Primitives.lazyAsJsDate(receiver).getUTCSeconds() + 0 : _js_helper.Primitives.lazyAsJsDate(receiver).getSeconds() + 0;
  }
  static getMilliseconds(receiver) {
    if (receiver == null) dart.nullFailed(L45, 433, 39, "receiver");
    return dart.test(receiver.isUtc) ? _js_helper.Primitives.lazyAsJsDate(receiver).getUTCMilliseconds() + 0 : _js_helper.Primitives.lazyAsJsDate(receiver).getMilliseconds() + 0;
  }
  static getWeekday(receiver) {
    if (receiver == null) dart.nullFailed(L45, 439, 34, "receiver");
    let weekday = dart.test(receiver.isUtc) ? _js_helper.Primitives.lazyAsJsDate(receiver).getUTCDay() + 0 : _js_helper.Primitives.lazyAsJsDate(receiver).getDay() + 0;
    return (weekday + 6)[$modulo](7) + 1;
  }
  static valueFromDateString(str) {
    if (!(typeof str == 'string')) dart.throw(_js_helper.argumentErrorValue(str));
    let value = Date.parse(str);
    if (value[$isNaN]) dart.throw(_js_helper.argumentErrorValue(str));
    return value;
  }
  static getProperty(object, key) {
    if (key == null) dart.nullFailed(L45, 454, 53, "key");
    if (object == null || typeof object == 'boolean' || typeof object == 'number' || typeof object == 'string') {
      dart.throw(_js_helper.argumentErrorValue(object));
    }
    return object[key];
  }
  static setProperty(object, key, value) {
    if (object == null || typeof object == 'boolean' || typeof object == 'number' || typeof object == 'string') {
      dart.throw(_js_helper.argumentErrorValue(object));
    }
    object[key] = value;
  }
};
(_js_helper.Primitives.new = function() {
  ;
}).prototype = _js_helper.Primitives.prototype;
dart.addTypeTests(_js_helper.Primitives);
dart.addTypeCaches(_js_helper.Primitives);
dart.setLibraryUri(_js_helper.Primitives, L44);
dart.defineLazy(_js_helper.Primitives, {
  /*_js_helper.Primitives.DOLLAR_CHAR_VALUE*/get DOLLAR_CHAR_VALUE() {
    return 36;
  },
  /*_js_helper.Primitives.timerFrequency*/get timerFrequency() {
    return 0;
  },
  set timerFrequency(_) {},
  /*_js_helper.Primitives.timerTicks*/get timerTicks() {
    return C22 || CT.C22;
  },
  set timerTicks(_) {}
}, false);
var _message$0 = dart.privateName(_js_helper, "_message");
var _method = dart.privateName(_js_helper, "_method");
var _receiver$0 = dart.privateName(_js_helper, "_receiver");
var C23;
var _arguments$0 = dart.privateName(_js_helper, "_arguments");
var C24;
var _memberName$0 = dart.privateName(_js_helper, "_memberName");
var C25;
var _invocation$0 = dart.privateName(_js_helper, "_invocation");
var C26;
var _namedArguments$0 = dart.privateName(_js_helper, "_namedArguments");
var C27;
var _receiver$1 = dart.privateName(_js_helper, "JsNoSuchMethodError._receiver");
_js_helper.JsNoSuchMethodError = class JsNoSuchMethodError extends core.Error {
  get [_receiver$0]() {
    return this[_receiver$1];
  }
  set [_receiver$0](value) {
    super[_receiver$0] = value;
  }
  toString() {
    if (this[_method] == null) return dart.str("NoSuchMethodError: ") + dart.str(this[_message$0]);
    if (this[_receiver$0] == null) {
      return dart.str("NoSuchMethodError: method not found: '") + dart.str(this[_method]) + dart.str("' (") + dart.str(this[_message$0]) + dart.str(")");
    }
    return dart.str("NoSuchMethodError: ") + dart.str("method not found: '") + dart.str(this[_method]) + dart.str("' on '") + dart.str(this[_receiver$0]) + dart.str("' (") + dart.str(this[_message$0]) + dart.str(")");
  }
  get [_receiver$]() {
    return this[$noSuchMethod](new core._Invocation.getter(C23 || CT.C23));
  }
  get [_arguments$]() {
    return ListN().as(this[$noSuchMethod](new core._Invocation.getter(C24 || CT.C24)));
  }
  get [_memberName$]() {
    return core.Symbol.as(this[$noSuchMethod](new core._Invocation.getter(C25 || CT.C25)));
  }
  get [_invocation$]() {
    return InvocationN().as(this[$noSuchMethod](new core._Invocation.getter(C26 || CT.C26)));
  }
  get [_namedArguments$]() {
    return MapNOfSymbol$dynamic().as(this[$noSuchMethod](new core._Invocation.getter(C27 || CT.C27)));
  }
};
(_js_helper.JsNoSuchMethodError.new = function(_message, match) {
  this[_message$0] = _message;
  this[_method] = match == null ? null : match.method;
  this[_receiver$1] = match == null ? null : match.receiver;
  _js_helper.JsNoSuchMethodError.__proto__.new.call(this);
  ;
}).prototype = _js_helper.JsNoSuchMethodError.prototype;
dart.addTypeTests(_js_helper.JsNoSuchMethodError);
dart.addTypeCaches(_js_helper.JsNoSuchMethodError);
_js_helper.JsNoSuchMethodError[dart.implements] = () => [core.NoSuchMethodError];
dart.setGetterSignature(_js_helper.JsNoSuchMethodError, () => ({
  __proto__: dart.getGetters(_js_helper.JsNoSuchMethodError.__proto__),
  [_receiver$]: dart.nullable(core.Object),
  [_arguments$]: dart.nullable(core.List),
  [_memberName$]: core.Symbol,
  [_invocation$]: dart.nullable(core.Invocation),
  [_namedArguments$]: dart.nullable(core.Map$(core.Symbol, dart.dynamic))
}));
dart.setLibraryUri(_js_helper.JsNoSuchMethodError, L44);
dart.setFieldSignature(_js_helper.JsNoSuchMethodError, () => ({
  __proto__: dart.getFields(_js_helper.JsNoSuchMethodError.__proto__),
  [_message$0]: dart.finalFieldType(dart.nullable(core.String)),
  [_method]: dart.finalFieldType(dart.nullable(core.String)),
  [_receiver$0]: dart.finalFieldType(dart.nullable(core.String))
}));
dart.defineExtensionMethods(_js_helper.JsNoSuchMethodError, ['toString']);
_js_helper.UnknownJsTypeError = class UnknownJsTypeError extends core.Error {
  toString() {
    return this[_message$0][$isEmpty] ? "Error" : dart.str("Error: ") + dart.str(this[_message$0]);
  }
};
(_js_helper.UnknownJsTypeError.new = function(_message) {
  if (_message == null) dart.nullFailed(L45, 561, 27, "_message");
  this[_message$0] = _message;
  _js_helper.UnknownJsTypeError.__proto__.new.call(this);
  ;
}).prototype = _js_helper.UnknownJsTypeError.prototype;
dart.addTypeTests(_js_helper.UnknownJsTypeError);
dart.addTypeCaches(_js_helper.UnknownJsTypeError);
dart.setLibraryUri(_js_helper.UnknownJsTypeError, L44);
dart.setFieldSignature(_js_helper.UnknownJsTypeError, () => ({
  __proto__: dart.getFields(_js_helper.UnknownJsTypeError.__proto__),
  [_message$0]: dart.finalFieldType(core.String)
}));
dart.defineExtensionMethods(_js_helper.UnknownJsTypeError, ['toString']);
var types$0 = dart.privateName(_js_helper, "Creates.types");
_js_helper.Creates = class Creates extends core.Object {
  get types() {
    return this[types$0];
  }
  set types(value) {
    super.types = value;
  }
};
(_js_helper.Creates.new = function(types) {
  if (types == null) dart.nullFailed(L45, 635, 22, "types");
  this[types$0] = types;
  ;
}).prototype = _js_helper.Creates.prototype;
dart.addTypeTests(_js_helper.Creates);
dart.addTypeCaches(_js_helper.Creates);
dart.setLibraryUri(_js_helper.Creates, L44);
dart.setFieldSignature(_js_helper.Creates, () => ({
  __proto__: dart.getFields(_js_helper.Creates.__proto__),
  types: dart.finalFieldType(core.String)
}));
var types$1 = dart.privateName(_js_helper, "Returns.types");
_js_helper.Returns = class Returns extends core.Object {
  get types() {
    return this[types$1];
  }
  set types(value) {
    super.types = value;
  }
};
(_js_helper.Returns.new = function(types) {
  if (types == null) dart.nullFailed(L45, 661, 22, "types");
  this[types$1] = types;
  ;
}).prototype = _js_helper.Returns.prototype;
dart.addTypeTests(_js_helper.Returns);
dart.addTypeCaches(_js_helper.Returns);
dart.setLibraryUri(_js_helper.Returns, L44);
dart.setFieldSignature(_js_helper.Returns, () => ({
  __proto__: dart.getFields(_js_helper.Returns.__proto__),
  types: dart.finalFieldType(core.String)
}));
var name$6 = dart.privateName(_js_helper, "JSName.name");
_js_helper.JSName = class JSName extends core.Object {
  get name() {
    return this[name$6];
  }
  set name(value) {
    super.name = value;
  }
};
(_js_helper.JSName.new = function(name) {
  if (name == null) dart.nullFailed(L45, 678, 21, "name");
  this[name$6] = name;
  ;
}).prototype = _js_helper.JSName.prototype;
dart.addTypeTests(_js_helper.JSName);
dart.addTypeCaches(_js_helper.JSName);
dart.setLibraryUri(_js_helper.JSName, L44);
dart.setFieldSignature(_js_helper.JSName, () => ({
  __proto__: dart.getFields(_js_helper.JSName.__proto__),
  name: dart.finalFieldType(core.String)
}));
const _is_JavaScriptIndexingBehavior_default = Symbol('_is_JavaScriptIndexingBehavior_default');
_js_helper.JavaScriptIndexingBehavior$ = dart.generic(E => {
  class JavaScriptIndexingBehavior extends core.Object {}
  (JavaScriptIndexingBehavior.new = function() {
    ;
  }).prototype = JavaScriptIndexingBehavior.prototype;
  dart.addTypeTests(JavaScriptIndexingBehavior);
  JavaScriptIndexingBehavior.prototype[_is_JavaScriptIndexingBehavior_default] = true;
  dart.addTypeCaches(JavaScriptIndexingBehavior);
  dart.setLibraryUri(JavaScriptIndexingBehavior, L44);
  return JavaScriptIndexingBehavior;
});
_js_helper.JavaScriptIndexingBehavior = _js_helper.JavaScriptIndexingBehavior$();
dart.addTypeTests(_js_helper.JavaScriptIndexingBehavior, _is_JavaScriptIndexingBehavior_default);
_js_helper.TypeErrorImpl = class TypeErrorImpl extends core.Error {
  toString() {
    return this[_message$0];
  }
};
(_js_helper.TypeErrorImpl.new = function(_message) {
  if (_message == null) dart.nullFailed(L45, 692, 22, "_message");
  this[_message$0] = _message;
  _js_helper.TypeErrorImpl.__proto__.new.call(this);
  ;
}).prototype = _js_helper.TypeErrorImpl.prototype;
dart.addTypeTests(_js_helper.TypeErrorImpl);
dart.addTypeCaches(_js_helper.TypeErrorImpl);
_js_helper.TypeErrorImpl[dart.implements] = () => [core.TypeError, core.CastError];
dart.setLibraryUri(_js_helper.TypeErrorImpl, L44);
dart.setFieldSignature(_js_helper.TypeErrorImpl, () => ({
  __proto__: dart.getFields(_js_helper.TypeErrorImpl.__proto__),
  [_message$0]: dart.finalFieldType(core.String)
}));
dart.defineExtensionMethods(_js_helper.TypeErrorImpl, ['toString']);
_js_helper.CastErrorImpl = class CastErrorImpl extends core.Error {
  toString() {
    return this[_message$0];
  }
};
(_js_helper.CastErrorImpl.new = function(_message) {
  if (_message == null) dart.nullFailed(L45, 701, 22, "_message");
  this[_message$0] = _message;
  _js_helper.CastErrorImpl.__proto__.new.call(this);
  ;
}).prototype = _js_helper.CastErrorImpl.prototype;
dart.addTypeTests(_js_helper.CastErrorImpl);
dart.addTypeCaches(_js_helper.CastErrorImpl);
_js_helper.CastErrorImpl[dart.implements] = () => [core.CastError, core.TypeError];
dart.setLibraryUri(_js_helper.CastErrorImpl, L44);
dart.setFieldSignature(_js_helper.CastErrorImpl, () => ({
  __proto__: dart.getFields(_js_helper.CastErrorImpl.__proto__),
  [_message$0]: dart.finalFieldType(core.String)
}));
dart.defineExtensionMethods(_js_helper.CastErrorImpl, ['toString']);
core.FallThroughError = class FallThroughError extends core.Error {
  toString() {
    return super[$toString]();
  }
};
(core.FallThroughError.new = function() {
  core.FallThroughError.__proto__.new.call(this);
  ;
}).prototype = core.FallThroughError.prototype;
(core.FallThroughError._create = function(url, line) {
  if (url == null) dart.nullFailed(L7, 292, 35, "url");
  if (line == null) dart.nullFailed(L7, 292, 44, "line");
  core.FallThroughError.__proto__.new.call(this);
  ;
}).prototype = core.FallThroughError.prototype;
dart.addTypeTests(core.FallThroughError);
dart.addTypeCaches(core.FallThroughError);
dart.setLibraryUri(core.FallThroughError, L8$);
dart.defineExtensionMethods(core.FallThroughError, ['toString']);
_js_helper.FallThroughErrorImplementation = class FallThroughErrorImplementation extends core.FallThroughError {
  toString() {
    return "Switch case fall-through.";
  }
};
(_js_helper.FallThroughErrorImplementation.new = function() {
  _js_helper.FallThroughErrorImplementation.__proto__.new.call(this);
  ;
}).prototype = _js_helper.FallThroughErrorImplementation.prototype;
dart.addTypeTests(_js_helper.FallThroughErrorImplementation);
dart.addTypeCaches(_js_helper.FallThroughErrorImplementation);
dart.setLibraryUri(_js_helper.FallThroughErrorImplementation, L44);
dart.defineExtensionMethods(_js_helper.FallThroughErrorImplementation, ['toString']);
var message$ = dart.privateName(_js_helper, "RuntimeError.message");
_js_helper.RuntimeError = class RuntimeError extends core.Error {
  get message() {
    return this[message$];
  }
  set message(value) {
    super.message = value;
  }
  toString() {
    return dart.str("RuntimeError: ") + dart.str(this.message);
  }
};
(_js_helper.RuntimeError.new = function(message) {
  this[message$] = message;
  _js_helper.RuntimeError.__proto__.new.call(this);
  ;
}).prototype = _js_helper.RuntimeError.prototype;
dart.addTypeTests(_js_helper.RuntimeError);
dart.addTypeCaches(_js_helper.RuntimeError);
dart.setLibraryUri(_js_helper.RuntimeError, L44);
dart.setFieldSignature(_js_helper.RuntimeError, () => ({
  __proto__: dart.getFields(_js_helper.RuntimeError.__proto__),
  message: dart.finalFieldType(dart.dynamic)
}));
dart.defineExtensionMethods(_js_helper.RuntimeError, ['toString']);
var _fileUri$ = dart.privateName(_js_helper, "_fileUri");
var _line$ = dart.privateName(_js_helper, "_line");
var _column$ = dart.privateName(_js_helper, "_column");
var _conditionSource$ = dart.privateName(_js_helper, "_conditionSource");
var message$0 = dart.privateName(core, "AssertionError.message");
core.AssertionError = class AssertionError extends core.Error {
  get message() {
    return this[message$0];
  }
  set message(value) {
    super.message = value;
  }
  toString() {
    if (this.message != null) {
      return dart.str("Assertion failed: ") + dart.str(core.Error.safeToString(this.message));
    }
    return "Assertion failed";
  }
};
(core.AssertionError.new = function(message = null) {
  this[message$0] = message;
  core.AssertionError.__proto__.new.call(this);
  ;
}).prototype = core.AssertionError.prototype;
dart.addTypeTests(core.AssertionError);
dart.addTypeCaches(core.AssertionError);
dart.setLibraryUri(core.AssertionError, L8$);
dart.setFieldSignature(core.AssertionError, () => ({
  __proto__: dart.getFields(core.AssertionError.__proto__),
  message: dart.finalFieldType(dart.nullable(core.Object))
}));
dart.defineExtensionMethods(core.AssertionError, ['toString']);
_js_helper.AssertionErrorImpl = class AssertionErrorImpl extends core.AssertionError {
  toString() {
    let failureMessage = "";
    if (this[_fileUri$] != null && this[_line$] != null && this[_column$] != null && this[_conditionSource$] != null) {
      failureMessage = failureMessage + (dart.str(this[_fileUri$]) + dart.str(":") + dart.str(this[_line$]) + dart.str(":") + dart.str(this[_column$]) + dart.str("\n") + dart.str(this[_conditionSource$]) + dart.str("\n"));
    }
    failureMessage = failureMessage + dart.notNull(this.message != null ? core.Error.safeToString(this.message) : "is not true");
    return dart.str("Assertion failed: ") + dart.str(failureMessage);
  }
};
(_js_helper.AssertionErrorImpl.new = function(message, _fileUri = null, _line = null, _column = null, _conditionSource = null) {
  this[_fileUri$] = _fileUri;
  this[_line$] = _line;
  this[_column$] = _column;
  this[_conditionSource$] = _conditionSource;
  _js_helper.AssertionErrorImpl.__proto__.new.call(this, message);
  ;
}).prototype = _js_helper.AssertionErrorImpl.prototype;
dart.addTypeTests(_js_helper.AssertionErrorImpl);
dart.addTypeCaches(_js_helper.AssertionErrorImpl);
dart.setLibraryUri(_js_helper.AssertionErrorImpl, L44);
dart.setFieldSignature(_js_helper.AssertionErrorImpl, () => ({
  __proto__: dart.getFields(_js_helper.AssertionErrorImpl.__proto__),
  [_fileUri$]: dart.finalFieldType(dart.nullable(core.String)),
  [_line$]: dart.finalFieldType(dart.nullable(core.int)),
  [_column$]: dart.finalFieldType(dart.nullable(core.int)),
  [_conditionSource$]: dart.finalFieldType(dart.nullable(core.String))
}));
dart.defineExtensionMethods(_js_helper.AssertionErrorImpl, ['toString']);
_js_helper.BooleanConversionAssertionError = class BooleanConversionAssertionError extends core.AssertionError {
  toString() {
    return "Failed assertion: boolean expression must not be null";
  }
};
(_js_helper.BooleanConversionAssertionError.new = function() {
  _js_helper.BooleanConversionAssertionError.__proto__.new.call(this);
  ;
}).prototype = _js_helper.BooleanConversionAssertionError.prototype;
dart.addTypeTests(_js_helper.BooleanConversionAssertionError);
dart.addTypeCaches(_js_helper.BooleanConversionAssertionError);
dart.setLibraryUri(_js_helper.BooleanConversionAssertionError, L44);
dart.defineExtensionMethods(_js_helper.BooleanConversionAssertionError, ['toString']);
var _name = dart.privateName(_js_helper, "_name");
var _nativeSymbol = dart.privateName(_js_helper, "_nativeSymbol");
var _name$1 = dart.privateName(_js_helper, "PrivateSymbol._name");
var _nativeSymbol$ = dart.privateName(_js_helper, "PrivateSymbol._nativeSymbol");
_js_helper.PrivateSymbol = class PrivateSymbol extends core.Object {
  get [_name]() {
    return this[_name$1];
  }
  set [_name](value) {
    super[_name] = value;
  }
  get [_nativeSymbol]() {
    return this[_nativeSymbol$];
  }
  set [_nativeSymbol](value) {
    super[_nativeSymbol] = value;
  }
  static getName(symbol) {
    if (symbol == null) dart.nullFailed(L45, 790, 32, "symbol");
    return _js_helper.PrivateSymbol.as(symbol)[_name];
  }
  static getNativeSymbol(symbol) {
    if (symbol == null) dart.nullFailed(L45, 792, 41, "symbol");
    if (_js_helper.PrivateSymbol.is(symbol)) return symbol[_nativeSymbol];
    return null;
  }
  _equals(other) {
    if (other == null) return false;
    return _js_helper.PrivateSymbol.is(other) && this[_name] == other[_name] && core.identical(this[_nativeSymbol], other[_nativeSymbol]);
  }
  get hashCode() {
    return dart.hashCode(this[_name]);
  }
  toString() {
    return dart.str("Symbol(\"") + dart.str(this[_name]) + dart.str("\")");
  }
};
(_js_helper.PrivateSymbol.new = function(_name, _nativeSymbol) {
  if (_name == null) dart.nullFailed(L45, 788, 28, "_name");
  if (_nativeSymbol == null) dart.nullFailed(L45, 788, 40, "_nativeSymbol");
  this[_name$1] = _name;
  this[_nativeSymbol$] = _nativeSymbol;
  ;
}).prototype = _js_helper.PrivateSymbol.prototype;
dart.addTypeTests(_js_helper.PrivateSymbol);
dart.addTypeCaches(_js_helper.PrivateSymbol);
_js_helper.PrivateSymbol[dart.implements] = () => [core.Symbol];
dart.setLibraryUri(_js_helper.PrivateSymbol, L44);
dart.setFieldSignature(_js_helper.PrivateSymbol, () => ({
  __proto__: dart.getFields(_js_helper.PrivateSymbol.__proto__),
  [_name]: dart.finalFieldType(core.String),
  [_nativeSymbol]: dart.finalFieldType(core.Object)
}));
dart.defineExtensionMethods(_js_helper.PrivateSymbol, ['_equals', 'toString']);
dart.defineExtensionAccessors(_js_helper.PrivateSymbol, ['hashCode']);
_js_helper.ForceInline = class ForceInline extends core.Object {};
(_js_helper.ForceInline.new = function() {
  ;
}).prototype = _js_helper.ForceInline.prototype;
dart.addTypeTests(_js_helper.ForceInline);
dart.addTypeCaches(_js_helper.ForceInline);
dart.setLibraryUri(_js_helper.ForceInline, L44);
_js_helper._NotNull = class _NotNull extends core.Object {};
(_js_helper._NotNull.new = function() {
  ;
}).prototype = _js_helper._NotNull.prototype;
dart.addTypeTests(_js_helper._NotNull);
dart.addTypeCaches(_js_helper._NotNull);
dart.setLibraryUri(_js_helper._NotNull, L44);
_js_helper.NoReifyGeneric = class NoReifyGeneric extends core.Object {};
(_js_helper.NoReifyGeneric.new = function() {
  ;
}).prototype = _js_helper.NoReifyGeneric.prototype;
dart.addTypeTests(_js_helper.NoReifyGeneric);
dart.addTypeCaches(_js_helper.NoReifyGeneric);
dart.setLibraryUri(_js_helper.NoReifyGeneric, L44);
var value$1 = dart.privateName(_js_helper, "ReifyFunctionTypes.value");
_js_helper.ReifyFunctionTypes = class ReifyFunctionTypes extends core.Object {
  get value() {
    return this[value$1];
  }
  set value(value) {
    super.value = value;
  }
};
(_js_helper.ReifyFunctionTypes.new = function(value) {
  if (value == null) dart.nullFailed(L46, 39, 33, "value");
  this[value$1] = value;
  ;
}).prototype = _js_helper.ReifyFunctionTypes.prototype;
dart.addTypeTests(_js_helper.ReifyFunctionTypes);
dart.addTypeCaches(_js_helper.ReifyFunctionTypes);
dart.setLibraryUri(_js_helper.ReifyFunctionTypes, L44);
dart.setFieldSignature(_js_helper.ReifyFunctionTypes, () => ({
  __proto__: dart.getFields(_js_helper.ReifyFunctionTypes.__proto__),
  value: dart.finalFieldType(core.bool)
}));
_js_helper._NullCheck = class _NullCheck extends core.Object {};
(_js_helper._NullCheck.new = function() {
  ;
}).prototype = _js_helper._NullCheck.prototype;
dart.addTypeTests(_js_helper._NullCheck);
dart.addTypeCaches(_js_helper._NullCheck);
dart.setLibraryUri(_js_helper._NullCheck, L44);
_js_helper._Undefined = class _Undefined extends core.Object {};
(_js_helper._Undefined.new = function() {
  ;
}).prototype = _js_helper._Undefined.prototype;
dart.addTypeTests(_js_helper._Undefined);
dart.addTypeCaches(_js_helper._Undefined);
dart.setLibraryUri(_js_helper._Undefined, L44);
_js_helper.NoThrows = class NoThrows extends core.Object {};
(_js_helper.NoThrows.new = function() {
  ;
}).prototype = _js_helper.NoThrows.prototype;
dart.addTypeTests(_js_helper.NoThrows);
dart.addTypeCaches(_js_helper.NoThrows);
dart.setLibraryUri(_js_helper.NoThrows, L44);
_js_helper.NoInline = class NoInline extends core.Object {};
(_js_helper.NoInline.new = function() {
  ;
}).prototype = _js_helper.NoInline.prototype;
dart.addTypeTests(_js_helper.NoInline);
dart.addTypeCaches(_js_helper.NoInline);
dart.setLibraryUri(_js_helper.NoInline, L44);
var name$7 = dart.privateName(_js_helper, "Native.name");
_js_helper.Native = class Native extends core.Object {
  get name() {
    return this[name$7];
  }
  set name(value) {
    super.name = value;
  }
};
(_js_helper.Native.new = function(name) {
  if (name == null) dart.nullFailed(L46, 76, 21, "name");
  this[name$7] = name;
  ;
}).prototype = _js_helper.Native.prototype;
dart.addTypeTests(_js_helper.Native);
dart.addTypeCaches(_js_helper.Native);
dart.setLibraryUri(_js_helper.Native, L44);
dart.setFieldSignature(_js_helper.Native, () => ({
  __proto__: dart.getFields(_js_helper.Native.__proto__),
  name: dart.finalFieldType(core.String)
}));
var name$8 = dart.privateName(_js_helper, "JsPeerInterface.name");
_js_helper.JsPeerInterface = class JsPeerInterface extends core.Object {
  get name() {
    return this[name$8];
  }
  set name(value) {
    super.name = value;
  }
};
(_js_helper.JsPeerInterface.new = function(opts) {
  let name = opts && 'name' in opts ? opts.name : null;
  if (name == null) dart.nullFailed(L46, 84, 40, "name");
  this[name$8] = name;
  ;
}).prototype = _js_helper.JsPeerInterface.prototype;
dart.addTypeTests(_js_helper.JsPeerInterface);
dart.addTypeCaches(_js_helper.JsPeerInterface);
dart.setLibraryUri(_js_helper.JsPeerInterface, L44);
dart.setFieldSignature(_js_helper.JsPeerInterface, () => ({
  __proto__: dart.getFields(_js_helper.JsPeerInterface.__proto__),
  name: dart.finalFieldType(core.String)
}));
_js_helper.SupportJsExtensionMethods = class SupportJsExtensionMethods extends core.Object {};
(_js_helper.SupportJsExtensionMethods.new = function() {
  ;
}).prototype = _js_helper.SupportJsExtensionMethods.prototype;
dart.addTypeTests(_js_helper.SupportJsExtensionMethods);
dart.addTypeCaches(_js_helper.SupportJsExtensionMethods);
dart.setLibraryUri(_js_helper.SupportJsExtensionMethods, L44);
var _modifications = dart.privateName(_js_helper, "_modifications");
var _map$ = dart.privateName(_js_helper, "_map");
const _is_InternalMap_default = Symbol('_is_InternalMap_default');
_js_helper.InternalMap$ = dart.generic((K, V) => {
  class InternalMap extends collection.MapBase$(K, V) {
    forEach(action) {
      if (action == null) dart.nullFailed(L47, 18, 21, "action");
      let modifications = this[_modifications];
      for (let entry of this[_map$].entries()) {
        action(entry[0], entry[1]);
        if (modifications !== this[_modifications]) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
    }
  }
  (InternalMap.new = function() {
    ;
  }).prototype = InternalMap.prototype;
  dart.addTypeTests(InternalMap);
  InternalMap.prototype[_is_InternalMap_default] = true;
  dart.addTypeCaches(InternalMap);
  InternalMap[dart.implements] = () => [collection.LinkedHashMap$(K, V), collection.HashMap$(K, V)];
  dart.setLibraryUri(InternalMap, L44);
  dart.defineExtensionMethods(InternalMap, ['forEach']);
  return InternalMap;
});
_js_helper.InternalMap = _js_helper.InternalMap$();
dart.addTypeTests(_js_helper.InternalMap, _is_InternalMap_default);
var _keyMap = dart.privateName(_js_helper, "_keyMap");
const _is_LinkedMap_default = Symbol('_is_LinkedMap_default');
var _map = dart.privateName(_js_helper, "LinkedMap._map");
var _modifications$ = dart.privateName(_js_helper, "LinkedMap._modifications");
_js_helper.LinkedMap$ = dart.generic((K, V) => {
  var _JSMapIterableOfK = () => (_JSMapIterableOfK = dart.constFn(_js_helper._JSMapIterable$(K)))();
  var MapOfK$V = () => (MapOfK$V = dart.constFn(core.Map$(K, V)))();
  var KAndVToNullN = () => (KAndVToNullN = dart.constFn(dart.fnType(core.Null, [K, V])))();
  var _JSMapIterableOfV = () => (_JSMapIterableOfV = dart.constFn(_js_helper._JSMapIterable$(V)))();
  var VoidToV = () => (VoidToV = dart.constFn(dart.fnType(V, [])))();
  class LinkedMap extends _js_helper.InternalMap$(K, V) {
    get [_map$]() {
      return this[_map];
    }
    set [_map$](value) {
      super[_map$] = value;
    }
    get [_modifications]() {
      return this[_modifications$];
    }
    set [_modifications](value) {
      this[_modifications$] = value;
    }
    get length() {
      return this[_map$].size;
    }
    get isEmpty() {
      return this[_map$].size == 0;
    }
    get isNotEmpty() {
      return this[_map$].size != 0;
    }
    get keys() {
      return new (_JSMapIterableOfK()).new(this, true);
    }
    get values() {
      return new (_JSMapIterableOfV()).new(this, false);
    }
    containsKey(key) {
      if (key == null) {
        key = null;
      } else if (key[$_equals] !== dart.identityEquals) {
        let buckets = this[_keyMap].get(dart.hashCode(key) & 0x3ffffff);
        if (buckets != null) {
          for (let i = 0, n = buckets.length; i < n; i = i + 1) {
            let k = buckets[i];
            if (dart.equals(k, key)) return true;
          }
        }
        return false;
      }
      return this[_map$].has(key);
    }
    containsValue(value) {
      for (let v of this[_map$].values()) {
        if (dart.equals(v, value)) return true;
      }
      return false;
    }
    addAll(other) {
      MapOfK$V().as(other);
      if (other == null) dart.nullFailed(L47, 121, 25, "other");
      let map = this[_map$];
      let length = map.size;
      other[$forEach](dart.fn((key, value) => {
        if (key == null) {
          key = null;
        } else if (key[$_equals] !== dart.identityEquals) {
          key = _js_helper.putLinkedMapKey(key, this[_keyMap]);
        }
        this[_map$].set(key, value);
      }, KAndVToNullN()));
      if (length !== map.size) {
        this[_modifications] = this[_modifications] + 1 & 67108863;
      }
    }
    _get(key) {
      if (key == null) {
        key = null;
      } else if (key[$_equals] !== dart.identityEquals) {
        let buckets = this[_keyMap].get(dart.hashCode(key) & 0x3ffffff);
        if (buckets != null) {
          for (let i = 0, n = buckets.length; i < n; i = i + 1) {
            let k = buckets[i];
            if (dart.equals(k, key)) return this[_map$].get(k);
          }
        }
        return null;
      }
      let value = this[_map$].get(key);
      return value == null ? null : value;
    }
    _set(key, value$) {
      let value = value$;
      K.as(key);
      V.as(value);
      if (key == null) {
        key = null;
      } else if (key[$_equals] !== dart.identityEquals) {
        key = _js_helper.putLinkedMapKey(key, this[_keyMap]);
      }
      let map = this[_map$];
      let length = map.size;
      map.set(key, value);
      if (length !== map.size) {
        this[_modifications] = this[_modifications] + 1 & 67108863;
      }
      return value$;
    }
    putIfAbsent(key, ifAbsent) {
      K.as(key);
      VoidToV().as(ifAbsent);
      if (ifAbsent == null) dart.nullFailed(L47, 171, 26, "ifAbsent");
      let map = this[_map$];
      if (key == null) {
        key = null;
        if (map.has(null)) return map.get(null);
      } else if (key[$_equals] !== dart.identityEquals) {
        let k = key;
        let hash = dart.hashCode(k) & 0x3ffffff;
        let buckets = this[_keyMap].get(hash);
        if (buckets == null) {
          this[_keyMap].set(hash, [key]);
        } else {
          for (let i = 0, n = buckets.length; i < n; i = i + 1) {
            k = buckets[i];
            if (dart.equals(k, key)) return map.get(k);
          }
          buckets.push(key);
        }
      } else if (map.has(key)) {
        return map.get(key);
      }
      let value = ifAbsent();
      if (value == null) {
        value = null;
      }
      map.set(key, value);
      this[_modifications] = this[_modifications] + 1 & 67108863;
      return value;
    }
    remove(key) {
      if (key == null) {
        key = null;
      } else if (key[$_equals] !== dart.identityEquals) {
        let hash = dart.hashCode(key) & 0x3ffffff;
        let buckets = this[_keyMap].get(hash);
        if (buckets == null) return null;
        for (let i = 0, n = buckets.length;;) {
          let k = buckets[i];
          if (dart.equals(k, key)) {
            key = k;
            if (n === 1) {
              this[_keyMap].delete(hash);
            } else {
              buckets.splice(i, 1);
            }
            break;
          }
          if ((i = i + 1) >= n) return null;
        }
      }
      let map = this[_map$];
      let value = map.get(key);
      if (map.delete(key)) {
        this[_modifications] = this[_modifications] + 1 & 67108863;
      }
      return value == null ? null : value;
    }
    clear() {
      let map = this[_map$];
      if (map.size > 0) {
        map.clear();
        this[_keyMap].clear();
        this[_modifications] = this[_modifications] + 1 & 67108863;
      }
    }
  }
  (LinkedMap.new = function() {
    this[_map] = new Map();
    this[_keyMap] = new Map();
    this[_modifications$] = 0;
    ;
  }).prototype = LinkedMap.prototype;
  (LinkedMap.from = function(entries) {
    if (entries == null) dart.nullFailed(L47, 68, 26, "entries");
    this[_map] = new Map();
    this[_keyMap] = new Map();
    this[_modifications$] = 0;
    let map = this[_map$];
    let keyMap = this[_keyMap];
    for (let i = 0, n = entries.length; i < n; i = i + 2) {
      let key = entries[i];
      let value = entries[i + 1];
      if (key == null) {
        key = null;
      } else if (key[$_equals] !== dart.identityEquals) {
        key = _js_helper.putLinkedMapKey(key, keyMap);
      }
      map.set(key, value);
    }
  }).prototype = LinkedMap.prototype;
  dart.addTypeTests(LinkedMap);
  LinkedMap.prototype[_is_LinkedMap_default] = true;
  dart.addTypeCaches(LinkedMap);
  dart.setMethodSignature(LinkedMap, () => ({
    __proto__: dart.getMethods(LinkedMap.__proto__),
    _get: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
    [$_get]: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
    _set: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
    [$_set]: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
    remove: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
    [$remove]: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
    clear: dart.fnType(dart.void, []),
    [$clear]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(LinkedMap, () => ({
    __proto__: dart.getGetters(LinkedMap.__proto__),
    keys: core.Iterable$(K),
    [$keys]: core.Iterable$(K)
  }));
  dart.setLibraryUri(LinkedMap, L44);
  dart.setFieldSignature(LinkedMap, () => ({
    __proto__: dart.getFields(LinkedMap.__proto__),
    [_map$]: dart.finalFieldType(dart.dynamic),
    [_keyMap]: dart.finalFieldType(dart.nullable(core.Object)),
    [_modifications]: dart.fieldType(core.int)
  }));
  dart.defineExtensionMethods(LinkedMap, [
    'containsKey',
    'containsValue',
    'addAll',
    '_get',
    '_set',
    'putIfAbsent',
    'remove',
    'clear'
  ]);
  dart.defineExtensionAccessors(LinkedMap, [
    'length',
    'isEmpty',
    'isNotEmpty',
    'keys',
    'values'
  ]);
  return LinkedMap;
});
_js_helper.LinkedMap = _js_helper.LinkedMap$();
dart.addTypeTests(_js_helper.LinkedMap, _is_LinkedMap_default);
const _is_ImmutableMap_default = Symbol('_is_ImmutableMap_default');
_js_helper.ImmutableMap$ = dart.generic((K, V) => {
  var VoidToV = () => (VoidToV = dart.constFn(dart.fnType(V, [])))();
  class ImmutableMap extends _js_helper.LinkedMap$(K, V) {
    _set(key, value$) {
      let value = value$;
      K.as(key);
      V.as(value);
      dart.throw(_js_helper.ImmutableMap._unsupported());
      return value$;
    }
    addAll(other) {
      core.Object.as(other);
      if (other == null) dart.nullFailed(L47, 268, 22, "other");
      return dart.throw(_js_helper.ImmutableMap._unsupported());
    }
    clear() {
      return dart.throw(_js_helper.ImmutableMap._unsupported());
    }
    remove(key) {
      return dart.throw(_js_helper.ImmutableMap._unsupported());
    }
    putIfAbsent(key, ifAbsent) {
      K.as(key);
      VoidToV().as(ifAbsent);
      if (ifAbsent == null) dart.nullFailed(L47, 271, 26, "ifAbsent");
      return dart.throw(_js_helper.ImmutableMap._unsupported());
    }
    static _unsupported() {
      return new core.UnsupportedError.new("Cannot modify unmodifiable map");
    }
  }
  (ImmutableMap.from = function(entries) {
    if (entries == null) dart.nullFailed(L47, 262, 29, "entries");
    ImmutableMap.__proto__.from.call(this, entries);
    ;
  }).prototype = ImmutableMap.prototype;
  dart.addTypeTests(ImmutableMap);
  ImmutableMap.prototype[_is_ImmutableMap_default] = true;
  dart.addTypeCaches(ImmutableMap);
  dart.setLibraryUri(ImmutableMap, L44);
  dart.defineExtensionMethods(ImmutableMap, [
    '_set',
    'addAll',
    'clear',
    'remove',
    'putIfAbsent'
  ]);
  return ImmutableMap;
});
_js_helper.ImmutableMap = _js_helper.ImmutableMap$();
dart.addTypeTests(_js_helper.ImmutableMap, _is_ImmutableMap_default);
const _is_IdentityMap_default = Symbol('_is_IdentityMap_default');
var _map$0 = dart.privateName(_js_helper, "IdentityMap._map");
var _modifications$0 = dart.privateName(_js_helper, "IdentityMap._modifications");
_js_helper.IdentityMap$ = dart.generic((K, V) => {
  var _JSMapIterableOfK = () => (_JSMapIterableOfK = dart.constFn(_js_helper._JSMapIterable$(K)))();
  var MapOfK$V = () => (MapOfK$V = dart.constFn(core.Map$(K, V)))();
  var KAndVToNullN = () => (KAndVToNullN = dart.constFn(dart.fnType(core.Null, [K, V])))();
  var _JSMapIterableOfV = () => (_JSMapIterableOfV = dart.constFn(_js_helper._JSMapIterable$(V)))();
  var VoidToV = () => (VoidToV = dart.constFn(dart.fnType(V, [])))();
  class IdentityMap extends _js_helper.InternalMap$(K, V) {
    get [_map$]() {
      return this[_map$0];
    }
    set [_map$](value) {
      super[_map$] = value;
    }
    get [_modifications]() {
      return this[_modifications$0];
    }
    set [_modifications](value) {
      this[_modifications$0] = value;
    }
    get length() {
      return this[_map$].size;
    }
    get isEmpty() {
      return this[_map$].size == 0;
    }
    get isNotEmpty() {
      return this[_map$].size != 0;
    }
    get keys() {
      return new (_JSMapIterableOfK()).new(this, true);
    }
    get values() {
      return new (_JSMapIterableOfV()).new(this, false);
    }
    containsKey(key) {
      return this[_map$].has(key);
    }
    containsValue(value) {
      for (let v of this[_map$].values()) {
        if (dart.equals(v, value)) return true;
      }
      return false;
    }
    addAll(other) {
      MapOfK$V().as(other);
      if (other == null) dart.nullFailed(L48, 47, 25, "other");
      if (dart.test(other[$isNotEmpty])) {
        let map = this[_map$];
        other[$forEach](dart.fn((key, value) => {
          map.set(key, value);
        }, KAndVToNullN()));
        this[_modifications] = this[_modifications] + 1 & 67108863;
      }
    }
    _get(key) {
      let value = this[_map$].get(key);
      return value == null ? null : value;
    }
    _set(key, value$) {
      let value = value$;
      K.as(key);
      V.as(value);
      let map = this[_map$];
      let length = map.size;
      map.set(key, value);
      if (length !== map.size) {
        this[_modifications] = this[_modifications] + 1 & 67108863;
      }
      return value$;
    }
    putIfAbsent(key, ifAbsent) {
      K.as(key);
      VoidToV().as(ifAbsent);
      if (ifAbsent == null) dart.nullFailed(L48, 71, 26, "ifAbsent");
      if (this[_map$].has(key)) {
        return this[_map$].get(key);
      }
      let value = ifAbsent();
      if (value == null) value = null;
      this[_map$].set(key, value);
      this[_modifications] = this[_modifications] + 1 & 67108863;
      return value;
    }
    remove(key) {
      let value = this[_map$].get(key);
      if (this[_map$].delete(key)) {
        this[_modifications] = this[_modifications] + 1 & 67108863;
      }
      return value == null ? null : value;
    }
    clear() {
      if (this[_map$].size > 0) {
        this[_map$].clear();
        this[_modifications] = this[_modifications] + 1 & 67108863;
      }
    }
  }
  (IdentityMap.new = function() {
    this[_map$0] = new Map();
    this[_modifications$0] = 0;
    ;
  }).prototype = IdentityMap.prototype;
  (IdentityMap.from = function(entries) {
    if (entries == null) dart.nullFailed(L48, 22, 28, "entries");
    this[_map$0] = new Map();
    this[_modifications$0] = 0;
    let map = this[_map$];
    for (let i = 0, n = entries.length; i < n; i = i + 2) {
      map.set(entries[i], entries[i + 1]);
    }
  }).prototype = IdentityMap.prototype;
  dart.addTypeTests(IdentityMap);
  IdentityMap.prototype[_is_IdentityMap_default] = true;
  dart.addTypeCaches(IdentityMap);
  dart.setMethodSignature(IdentityMap, () => ({
    __proto__: dart.getMethods(IdentityMap.__proto__),
    _get: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
    [$_get]: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
    _set: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
    [$_set]: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
    remove: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
    [$remove]: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
    clear: dart.fnType(dart.void, []),
    [$clear]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(IdentityMap, () => ({
    __proto__: dart.getGetters(IdentityMap.__proto__),
    keys: core.Iterable$(K),
    [$keys]: core.Iterable$(K)
  }));
  dart.setLibraryUri(IdentityMap, L44);
  dart.setFieldSignature(IdentityMap, () => ({
    __proto__: dart.getFields(IdentityMap.__proto__),
    [_map$]: dart.finalFieldType(dart.dynamic),
    [_modifications]: dart.fieldType(core.int)
  }));
  dart.defineExtensionMethods(IdentityMap, [
    'containsKey',
    'containsValue',
    'addAll',
    '_get',
    '_set',
    'putIfAbsent',
    'remove',
    'clear'
  ]);
  dart.defineExtensionAccessors(IdentityMap, [
    'length',
    'isEmpty',
    'isNotEmpty',
    'keys',
    'values'
  ]);
  return IdentityMap;
});
_js_helper.IdentityMap = _js_helper.IdentityMap$();
dart.addTypeTests(_js_helper.IdentityMap, _is_IdentityMap_default);
var _isKeys$ = dart.privateName(_js_helper, "_isKeys");
const _is__JSMapIterable_default = Symbol('_is__JSMapIterable_default');
_js_helper._JSMapIterable$ = dart.generic(E => {
  var DartIteratorOfE = () => (DartIteratorOfE = dart.constFn(_js_helper.DartIterator$(E)))();
  class _JSMapIterable extends _internal.EfficientLengthIterable$(E) {
    get length() {
      return this[_map$][$length];
    }
    get isEmpty() {
      return this[_map$][$isEmpty];
    }
    [Symbol.iterator]() {
      let map = this[_map$];
      let iterator = this[_isKeys$] ? map[_map$].keys() : map[_map$].values();
      let modifications = map[_modifications];
      return {
        next() {
          if (modifications != map[_modifications]) {
            throw new core.ConcurrentModificationError.new(map);
          }
          return iterator.next();
        }
      };
    }
    get iterator() {
      return new (DartIteratorOfE()).new(this[Symbol.iterator]());
    }
    contains(element) {
      return this[_isKeys$] ? this[_map$][$containsKey](element) : this[_map$][$containsValue](element);
    }
    forEach(f) {
      if (f == null) dart.nullFailed(L48, 134, 33, "f");
      for (let entry of this)
        f(entry);
    }
  }
  (_JSMapIterable.new = function(_map, _isKeys) {
    if (_map == null) dart.nullFailed(L48, 102, 23, "_map");
    if (_isKeys == null) dart.nullFailed(L48, 102, 34, "_isKeys");
    this[_map$] = _map;
    this[_isKeys$] = _isKeys;
    _JSMapIterable.__proto__.new.call(this);
    ;
  }).prototype = _JSMapIterable.prototype;
  dart.addTypeTests(_JSMapIterable);
  _JSMapIterable.prototype[_is__JSMapIterable_default] = true;
  dart.addTypeCaches(_JSMapIterable);
  dart.setMethodSignature(_JSMapIterable, () => ({
    __proto__: dart.getMethods(_JSMapIterable.__proto__),
    [Symbol.iterator]: dart.fnType(dart.dynamic, [])
  }));
  dart.setGetterSignature(_JSMapIterable, () => ({
    __proto__: dart.getGetters(_JSMapIterable.__proto__),
    iterator: core.Iterator$(E),
    [$iterator]: core.Iterator$(E)
  }));
  dart.setLibraryUri(_JSMapIterable, L44);
  dart.setFieldSignature(_JSMapIterable, () => ({
    __proto__: dart.getFields(_JSMapIterable.__proto__),
    [_map$]: dart.finalFieldType(_js_helper.InternalMap),
    [_isKeys$]: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(_JSMapIterable, ['contains', 'forEach']);
  dart.defineExtensionAccessors(_JSMapIterable, ['length', 'isEmpty', 'iterator']);
  return _JSMapIterable;
});
_js_helper._JSMapIterable = _js_helper._JSMapIterable$();
dart.addTypeTests(_js_helper._JSMapIterable, _is__JSMapIterable_default);
var _validKey$ = dart.privateName(_js_helper, "_validKey");
var _equals$ = dart.privateName(_js_helper, "_equals");
var _hashCode$ = dart.privateName(_js_helper, "_hashCode");
const _is_CustomHashMap_default = Symbol('_is_CustomHashMap_default');
var _map$1 = dart.privateName(_js_helper, "CustomHashMap._map");
var _modifications$1 = dart.privateName(_js_helper, "CustomHashMap._modifications");
_js_helper.CustomHashMap$ = dart.generic((K, V) => {
  var _JSMapIterableOfK = () => (_JSMapIterableOfK = dart.constFn(_js_helper._JSMapIterable$(K)))();
  var MapOfK$V = () => (MapOfK$V = dart.constFn(core.Map$(K, V)))();
  var KAndVToNullN = () => (KAndVToNullN = dart.constFn(dart.fnType(core.Null, [K, V])))();
  var _JSMapIterableOfV = () => (_JSMapIterableOfV = dart.constFn(_js_helper._JSMapIterable$(V)))();
  var VoidToV = () => (VoidToV = dart.constFn(dart.fnType(V, [])))();
  class CustomHashMap extends _js_helper.InternalMap$(K, V) {
    get [_map$]() {
      return this[_map$1];
    }
    set [_map$](value) {
      super[_map$] = value;
    }
    get [_modifications]() {
      return this[_modifications$1];
    }
    set [_modifications](value) {
      this[_modifications$1] = value;
    }
    get length() {
      return this[_map$].size;
    }
    get isEmpty() {
      return this[_map$].size == 0;
    }
    get isNotEmpty() {
      return this[_map$].size != 0;
    }
    get keys() {
      return new (_JSMapIterableOfK()).new(this, true);
    }
    get values() {
      return new (_JSMapIterableOfV()).new(this, false);
    }
    containsKey(key) {
      let t77;
      if (K.is(key)) {
        let buckets = this[_keyMap].get((t77 = key, this[_hashCode$](t77)) & 0x3ffffff);
        if (buckets != null) {
          let equals = this[_equals$];
          for (let i = 0, n = buckets.length; i < n; i = i + 1) {
            let k = buckets[i];
            if (dart.test(equals(k, key))) return true;
          }
        }
      }
      return false;
    }
    containsValue(value) {
      for (let v of this[_map$].values()) {
        if (dart.equals(value, v)) return true;
      }
      return false;
    }
    addAll(other) {
      MapOfK$V().as(other);
      if (other == null) dart.nullFailed(L49, 91, 25, "other");
      other[$forEach](dart.fn((key, value) => {
        this._set(key, value);
      }, KAndVToNullN()));
    }
    _get(key) {
      let t77;
      if (K.is(key)) {
        let buckets = this[_keyMap].get((t77 = key, this[_hashCode$](t77)) & 0x3ffffff);
        if (buckets != null) {
          let equals = this[_equals$];
          for (let i = 0, n = buckets.length; i < n; i = i + 1) {
            let k = buckets[i];
            if (dart.test(equals(k, key))) {
              let value = this[_map$].get(k);
              return value == null ? null : value;
            }
          }
        }
      }
      return null;
    }
    _set(key, value$) {
      let value = value$;
      let t77;
      K.as(key);
      V.as(value);
      let keyMap = this[_keyMap];
      let hash = (t77 = key, this[_hashCode$](t77)) & 0x3ffffff;
      let buckets = keyMap.get(hash);
      if (buckets == null) {
        keyMap.set(hash, [key]);
      } else {
        let equals = this[_equals$];
        for (let i = 0, n = buckets.length;;) {
          let k = buckets[i];
          if (dart.test(equals(k, key))) {
            key = k;
            break;
          }
          if ((i = i + 1) >= n) {
            buckets.push(key);
            break;
          }
        }
      }
      this[_map$].set(key, value);
      this[_modifications] = this[_modifications] + 1 & 67108863;
      return value$;
    }
    putIfAbsent(key, ifAbsent) {
      let t77;
      K.as(key);
      VoidToV().as(ifAbsent);
      if (ifAbsent == null) dart.nullFailed(L49, 138, 26, "ifAbsent");
      let keyMap = this[_keyMap];
      let hash = (t77 = key, this[_hashCode$](t77)) & 0x3ffffff;
      let buckets = keyMap.get(hash);
      if (buckets == null) {
        keyMap.set(hash, [key]);
      } else {
        let equals = this[_equals$];
        for (let i = 0, n = buckets.length; i < n; i = i + 1) {
          let k = buckets[i];
          if (dart.test(equals(k, key))) return this[_map$].get(k);
        }
        buckets.push(key);
      }
      let value = ifAbsent();
      if (value == null) value = null;
      this[_map$].set(key, value);
      this[_modifications] = this[_modifications] + 1 & 67108863;
      return value;
    }
    remove(key) {
      let t77;
      if (K.is(key)) {
        let hash = (t77 = key, this[_hashCode$](t77)) & 0x3ffffff;
        let keyMap = this[_keyMap];
        let buckets = keyMap.get(hash);
        if (buckets == null) return null;
        let equals = this[_equals$];
        for (let i = 0, n = buckets.length; i < n; i = i + 1) {
          let k = buckets[i];
          if (dart.test(equals(k, key))) {
            if (n === 1) {
              keyMap.delete(hash);
            } else {
              buckets.splice(i, 1);
            }
            let map = this[_map$];
            let value = map.get(k);
            map.delete(k);
            this[_modifications] = this[_modifications] + 1 & 67108863;
            return value == null ? null : value;
          }
        }
      }
      return null;
    }
    clear() {
      let map = this[_map$];
      if (map.size > 0) {
        map.clear();
        this[_keyMap].clear();
        this[_modifications] = this[_modifications] + 1 & 67108863;
      }
    }
  }
  (CustomHashMap.new = function(_equals, _hashCode) {
    if (_equals == null) dart.nullFailed(L49, 55, 22, "_equals");
    if (_hashCode == null) dart.nullFailed(L49, 55, 36, "_hashCode");
    this[_map$1] = new Map();
    this[_keyMap] = new Map();
    this[_modifications$1] = 0;
    this[_equals$] = _equals;
    this[_hashCode$] = _hashCode;
    ;
  }).prototype = CustomHashMap.prototype;
  dart.addTypeTests(CustomHashMap);
  CustomHashMap.prototype[_is_CustomHashMap_default] = true;
  dart.addTypeCaches(CustomHashMap);
  dart.setMethodSignature(CustomHashMap, () => ({
    __proto__: dart.getMethods(CustomHashMap.__proto__),
    _get: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
    [$_get]: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
    _set: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
    [$_set]: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
    remove: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
    [$remove]: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
    clear: dart.fnType(dart.void, []),
    [$clear]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(CustomHashMap, () => ({
    __proto__: dart.getGetters(CustomHashMap.__proto__),
    keys: core.Iterable$(K),
    [$keys]: core.Iterable$(K)
  }));
  dart.setLibraryUri(CustomHashMap, L44);
  dart.setFieldSignature(CustomHashMap, () => ({
    __proto__: dart.getFields(CustomHashMap.__proto__),
    [_map$]: dart.finalFieldType(dart.dynamic),
    [_keyMap]: dart.finalFieldType(dart.nullable(core.Object)),
    [_modifications]: dart.fieldType(core.int),
    [_equals$]: dart.finalFieldType(dart.fnType(core.bool, [K, K])),
    [_hashCode$]: dart.finalFieldType(dart.fnType(core.int, [K]))
  }));
  dart.defineExtensionMethods(CustomHashMap, [
    'containsKey',
    'containsValue',
    'addAll',
    '_get',
    '_set',
    'putIfAbsent',
    'remove',
    'clear'
  ]);
  dart.defineExtensionAccessors(CustomHashMap, [
    'length',
    'isEmpty',
    'isNotEmpty',
    'keys',
    'values'
  ]);
  return CustomHashMap;
});
_js_helper.CustomHashMap = _js_helper.CustomHashMap$();
dart.addTypeTests(_js_helper.CustomHashMap, _is_CustomHashMap_default);
const _is_CustomKeyHashMap_default = Symbol('_is_CustomKeyHashMap_default');
_js_helper.CustomKeyHashMap$ = dart.generic((K, V) => {
  class CustomKeyHashMap extends _js_helper.CustomHashMap$(K, V) {
    containsKey(key) {
      let t77;
      if (!dart.test((t77 = key, this[_validKey$](t77)))) return false;
      return super.containsKey(key);
    }
    _get(key) {
      let t77;
      if (!dart.test((t77 = key, this[_validKey$](t77)))) return null;
      return super._get(key);
    }
    remove(key) {
      let t77;
      if (!dart.test((t77 = key, this[_validKey$](t77)))) return null;
      return super.remove(key);
    }
  }
  (CustomKeyHashMap.new = function(equals, hashCode, _validKey) {
    if (equals == null) dart.nullFailed(L49, 9, 33, "equals");
    if (hashCode == null) dart.nullFailed(L49, 9, 52, "hashCode");
    if (_validKey == null) dart.nullFailed(L49, 9, 67, "_validKey");
    this[_validKey$] = _validKey;
    CustomKeyHashMap.__proto__.new.call(this, equals, hashCode);
    ;
  }).prototype = CustomKeyHashMap.prototype;
  dart.addTypeTests(CustomKeyHashMap);
  CustomKeyHashMap.prototype[_is_CustomKeyHashMap_default] = true;
  dart.addTypeCaches(CustomKeyHashMap);
  dart.setLibraryUri(CustomKeyHashMap, L44);
  dart.setFieldSignature(CustomKeyHashMap, () => ({
    __proto__: dart.getFields(CustomKeyHashMap.__proto__),
    [_validKey$]: dart.finalFieldType(dart.fnType(core.bool, [dart.nullable(core.Object)]))
  }));
  dart.defineExtensionMethods(CustomKeyHashMap, ['containsKey', '_get', 'remove']);
  return CustomKeyHashMap;
});
_js_helper.CustomKeyHashMap = _js_helper.CustomKeyHashMap$();
dart.addTypeTests(_js_helper.CustomKeyHashMap, _is_CustomKeyHashMap_default);
var _nativeGlobalRegExp = dart.privateName(_js_helper, "_nativeGlobalRegExp");
var _nativeAnchoredRegExp = dart.privateName(_js_helper, "_nativeAnchoredRegExp");
var _nativeRegExp = dart.privateName(_js_helper, "_nativeRegExp");
var _isMultiLine = dart.privateName(_js_helper, "_isMultiLine");
var _isCaseSensitive = dart.privateName(_js_helper, "_isCaseSensitive");
var _isUnicode = dart.privateName(_js_helper, "_isUnicode");
var _isDotAll = dart.privateName(_js_helper, "_isDotAll");
var _nativeGlobalVersion = dart.privateName(_js_helper, "_nativeGlobalVersion");
var _nativeAnchoredVersion = dart.privateName(_js_helper, "_nativeAnchoredVersion");
var _execGlobal = dart.privateName(_js_helper, "_execGlobal");
var _execAnchored = dart.privateName(_js_helper, "_execAnchored");
var pattern = dart.privateName(_js_helper, "JSSyntaxRegExp.pattern");
_js_helper.JSSyntaxRegExp = class JSSyntaxRegExp extends core.Object {
  get pattern() {
    return this[pattern];
  }
  set pattern(value) {
    super.pattern = value;
  }
  toString() {
    return dart.str("RegExp/") + dart.str(this.pattern) + dart.str("/") + this[_nativeRegExp].flags;
  }
  get [_nativeGlobalVersion]() {
    if (this[_nativeGlobalRegExp] != null) return this[_nativeGlobalRegExp];
    return this[_nativeGlobalRegExp] = _js_helper.JSSyntaxRegExp.makeNative(this.pattern, this[_isMultiLine], this[_isCaseSensitive], this[_isUnicode], this[_isDotAll], true);
  }
  get [_nativeAnchoredVersion]() {
    if (this[_nativeAnchoredRegExp] != null) return this[_nativeAnchoredRegExp];
    return this[_nativeAnchoredRegExp] = _js_helper.JSSyntaxRegExp.makeNative(dart.str(this.pattern) + dart.str("|()"), this[_isMultiLine], this[_isCaseSensitive], this[_isUnicode], this[_isDotAll], true);
  }
  get [_isMultiLine]() {
    return this[_nativeRegExp].multiline;
  }
  get [_isCaseSensitive]() {
    return !this[_nativeRegExp].ignoreCase;
  }
  get [_isUnicode]() {
    return this[_nativeRegExp].unicode;
  }
  get [_isDotAll]() {
    return this[_nativeRegExp].dotAll == true;
  }
  static makeNative(source, multiLine, caseSensitive, unicode, dotAll, global) {
    if (source == null) dart.argumentError(source);
    if (multiLine == null) dart.nullFailed(L50, 86, 52, "multiLine");
    if (caseSensitive == null) dart.nullFailed(L50, 87, 12, "caseSensitive");
    if (unicode == null) dart.nullFailed(L50, 87, 32, "unicode");
    if (dotAll == null) dart.nullFailed(L50, 87, 46, "dotAll");
    if (global == null) dart.nullFailed(L50, 87, 59, "global");
    let m = dart.test(multiLine) ? "m" : "";
    let i = dart.test(caseSensitive) ? "" : "i";
    let u = dart.test(unicode) ? "u" : "";
    let s = dart.test(dotAll) ? "s" : "";
    let g = dart.test(global) ? "g" : "";
    let regexp = (function() {
      try {
        return new RegExp(source, m + i + u + s + g);
      } catch (e) {
        return e;
      }
    })();
    if (regexp instanceof RegExp) return regexp;
    let errorMessage = String(regexp);
    dart.throw(new core.FormatException.new(dart.str("Illegal RegExp pattern: ") + dart.str(source) + dart.str(", ") + dart.str(errorMessage)));
  }
  firstMatch(string) {
    if (string == null) dart.argumentError(string);
    let m = this[_nativeRegExp].exec(string);
    if (m == null) return null;
    return new _js_helper._MatchImplementation.new(this, m);
  }
  hasMatch(string) {
    if (string == null) dart.argumentError(string);
    return this[_nativeRegExp].test(string);
  }
  stringMatch(string) {
    if (string == null) dart.nullFailed(L50, 130, 30, "string");
    let match = this.firstMatch(string);
    if (match != null) return match.group(0);
    return null;
  }
  allMatches(string, start = 0) {
    if (string == null) dart.argumentError(string);
    if (start == null) dart.argumentError(start);
    if (start < 0 || start > string.length) {
      dart.throw(new core.RangeError.range(start, 0, string.length));
    }
    return new _js_helper._AllMatchesIterable.new(this, string, start);
  }
  [_execGlobal](string, start) {
    if (string == null) dart.nullFailed(L50, 144, 35, "string");
    if (start == null) dart.nullFailed(L50, 144, 47, "start");
    let regexp = core.Object.as(this[_nativeGlobalVersion]);
    regexp.lastIndex = start;
    let match = regexp.exec(string);
    if (match == null) return null;
    return new _js_helper._MatchImplementation.new(this, match);
  }
  [_execAnchored](string, start) {
    let t77;
    if (string == null) dart.nullFailed(L50, 153, 37, "string");
    if (start == null) dart.nullFailed(L50, 153, 49, "start");
    let regexp = core.Object.as(this[_nativeAnchoredVersion]);
    regexp.lastIndex = start;
    let match = regexp.exec(string);
    if (match == null) return null;
    if (match[$_get](dart.notNull(match[$length]) - 1) != null) return null;
    t77 = match;
    t77[$length] = dart.notNull(t77[$length]) - 1;
    return new _js_helper._MatchImplementation.new(this, match);
  }
  matchAsPrefix(string, start = 0) {
    if (string == null) dart.nullFailed(L50, 166, 31, "string");
    if (start == null) dart.nullFailed(L50, 166, 44, "start");
    if (dart.notNull(start) < 0 || dart.notNull(start) > string.length) {
      dart.throw(new core.RangeError.range(start, 0, string.length));
    }
    return this[_execAnchored](string, start);
  }
  get isMultiLine() {
    return this[_isMultiLine];
  }
  get isCaseSensitive() {
    return this[_isCaseSensitive];
  }
  get isUnicode() {
    return this[_isUnicode];
  }
  get isDotAll() {
    return this[_isDotAll];
  }
};
(_js_helper.JSSyntaxRegExp.new = function(source, opts) {
  if (source == null) dart.nullFailed(L50, 53, 25, "source");
  let multiLine = opts && 'multiLine' in opts ? opts.multiLine : false;
  if (multiLine == null) dart.nullFailed(L50, 54, 13, "multiLine");
  let caseSensitive = opts && 'caseSensitive' in opts ? opts.caseSensitive : true;
  if (caseSensitive == null) dart.nullFailed(L50, 55, 12, "caseSensitive");
  let unicode = opts && 'unicode' in opts ? opts.unicode : false;
  if (unicode == null) dart.nullFailed(L50, 56, 12, "unicode");
  let dotAll = opts && 'dotAll' in opts ? opts.dotAll : false;
  if (dotAll == null) dart.nullFailed(L50, 57, 12, "dotAll");
  this[_nativeGlobalRegExp] = null;
  this[_nativeAnchoredRegExp] = null;
  this[pattern] = source;
  this[_nativeRegExp] = _js_helper.JSSyntaxRegExp.makeNative(source, multiLine, caseSensitive, unicode, dotAll, false);
  ;
}).prototype = _js_helper.JSSyntaxRegExp.prototype;
dart.addTypeTests(_js_helper.JSSyntaxRegExp);
dart.addTypeCaches(_js_helper.JSSyntaxRegExp);
_js_helper.JSSyntaxRegExp[dart.implements] = () => [core.RegExp];
dart.setMethodSignature(_js_helper.JSSyntaxRegExp, () => ({
  __proto__: dart.getMethods(_js_helper.JSSyntaxRegExp.__proto__),
  firstMatch: dart.fnType(dart.nullable(core.RegExpMatch), [core.String]),
  hasMatch: dart.fnType(core.bool, [core.String]),
  stringMatch: dart.fnType(dart.nullable(core.String), [core.String]),
  allMatches: dart.fnType(core.Iterable$(core.RegExpMatch), [core.String], [core.int]),
  [$allMatches]: dart.fnType(core.Iterable$(core.RegExpMatch), [core.String], [core.int]),
  [_execGlobal]: dart.fnType(dart.nullable(core.RegExpMatch), [core.String, core.int]),
  [_execAnchored]: dart.fnType(dart.nullable(core.RegExpMatch), [core.String, core.int]),
  matchAsPrefix: dart.fnType(dart.nullable(core.Match), [core.String], [core.int]),
  [$matchAsPrefix]: dart.fnType(dart.nullable(core.Match), [core.String], [core.int])
}));
dart.setGetterSignature(_js_helper.JSSyntaxRegExp, () => ({
  __proto__: dart.getGetters(_js_helper.JSSyntaxRegExp.__proto__),
  [_nativeGlobalVersion]: dart.dynamic,
  [_nativeAnchoredVersion]: dart.dynamic,
  [_isMultiLine]: core.bool,
  [_isCaseSensitive]: core.bool,
  [_isUnicode]: core.bool,
  [_isDotAll]: core.bool,
  isMultiLine: core.bool,
  isCaseSensitive: core.bool,
  isUnicode: core.bool,
  isDotAll: core.bool
}));
dart.setLibraryUri(_js_helper.JSSyntaxRegExp, L44);
dart.setFieldSignature(_js_helper.JSSyntaxRegExp, () => ({
  __proto__: dart.getFields(_js_helper.JSSyntaxRegExp.__proto__),
  pattern: dart.finalFieldType(core.String),
  [_nativeRegExp]: dart.finalFieldType(dart.dynamic),
  [_nativeGlobalRegExp]: dart.fieldType(dart.dynamic),
  [_nativeAnchoredRegExp]: dart.fieldType(dart.dynamic)
}));
dart.defineExtensionMethods(_js_helper.JSSyntaxRegExp, ['toString', 'allMatches', 'matchAsPrefix']);
var _match$ = dart.privateName(_js_helper, "_match");
_js_helper._MatchImplementation = class _MatchImplementation extends core.Object {
  get input() {
    return this[_match$].input;
  }
  get start() {
    return this[_match$].index;
  }
  get end() {
    return dart.notNull(this.start) + this[_match$][$_get](0).length;
  }
  group(index) {
    if (index == null) dart.nullFailed(L50, 194, 21, "index");
    return this[_match$][$_get](index);
  }
  _get(index) {
    if (index == null) dart.nullFailed(L50, 195, 27, "index");
    return this.group(index);
  }
  get groupCount() {
    return dart.notNull(this[_match$][$length]) - 1;
  }
  groups(groups) {
    if (groups == null) dart.nullFailed(L50, 198, 34, "groups");
    let out = JSArrayOfStringN().of([]);
    for (let i of groups) {
      out[$add](this.group(i));
    }
    return out;
  }
  namedGroup(name) {
    if (name == null) dart.nullFailed(L50, 206, 29, "name");
    let groups = this[_match$].groups;
    if (groups != null) {
      let result = groups[name];
      if (result != null || name in groups) {
        return result;
      }
    }
    dart.throw(new core.ArgumentError.value(name, "name", "Not a capture group name"));
  }
  get groupNames() {
    let groups = this[_match$].groups;
    if (groups != null) {
      let keys = JSArrayOfString().of(Object.keys(groups));
      return new (SubListIterableOfString()).new(keys, 0, null);
    }
    return new (EmptyIterableOfString()).new();
  }
};
(_js_helper._MatchImplementation.new = function(pattern, _match) {
  if (pattern == null) dart.nullFailed(L50, 185, 29, "pattern");
  if (_match == null) dart.nullFailed(L50, 185, 43, "_match");
  this.pattern = pattern;
  this[_match$] = _match;
  if (!(typeof this[_match$].input == 'string')) dart.assertFailed(null, L50, 186, 12, "JS(\"var\", \"#.input\", _match) is String");
  if (!core.int.is(this[_match$].index)) dart.assertFailed(null, L50, 187, 12, "JS(\"var\", \"#.index\", _match) is int");
}).prototype = _js_helper._MatchImplementation.prototype;
dart.addTypeTests(_js_helper._MatchImplementation);
dart.addTypeCaches(_js_helper._MatchImplementation);
_js_helper._MatchImplementation[dart.implements] = () => [core.RegExpMatch];
dart.setMethodSignature(_js_helper._MatchImplementation, () => ({
  __proto__: dart.getMethods(_js_helper._MatchImplementation.__proto__),
  group: dart.fnType(dart.nullable(core.String), [core.int]),
  _get: dart.fnType(dart.nullable(core.String), [core.int]),
  groups: dart.fnType(core.List$(dart.nullable(core.String)), [core.List$(core.int)]),
  namedGroup: dart.fnType(dart.nullable(core.String), [core.String])
}));
dart.setGetterSignature(_js_helper._MatchImplementation, () => ({
  __proto__: dart.getGetters(_js_helper._MatchImplementation.__proto__),
  input: core.String,
  start: core.int,
  end: core.int,
  groupCount: core.int,
  groupNames: core.Iterable$(core.String)
}));
dart.setLibraryUri(_js_helper._MatchImplementation, L44);
dart.setFieldSignature(_js_helper._MatchImplementation, () => ({
  __proto__: dart.getFields(_js_helper._MatchImplementation.__proto__),
  pattern: dart.finalFieldType(core.Pattern),
  [_match$]: dart.finalFieldType(core.List$(core.String))
}));
var _re$ = dart.privateName(_js_helper, "_re");
var _string$0 = dart.privateName(_js_helper, "_string");
var _start$0 = dart.privateName(_js_helper, "_start");
core.RegExpMatch = class RegExpMatch extends core.Object {};
(core.RegExpMatch.new = function() {
  ;
}).prototype = core.RegExpMatch.prototype;
dart.addTypeTests(core.RegExpMatch);
dart.addTypeCaches(core.RegExpMatch);
core.RegExpMatch[dart.implements] = () => [core.Match];
dart.setLibraryUri(core.RegExpMatch, L8$);
_js_helper._AllMatchesIterable = class _AllMatchesIterable extends collection.IterableBase$(core.RegExpMatch) {
  get iterator() {
    return new _js_helper._AllMatchesIterator.new(this[_re$], this[_string$0], this[_start$0]);
  }
};
(_js_helper._AllMatchesIterable.new = function(_re, _string, _start) {
  if (_re == null) dart.nullFailed(L50, 232, 28, "_re");
  if (_string == null) dart.nullFailed(L50, 232, 38, "_string");
  if (_start == null) dart.nullFailed(L50, 232, 52, "_start");
  this[_re$] = _re;
  this[_string$0] = _string;
  this[_start$0] = _start;
  _js_helper._AllMatchesIterable.__proto__.new.call(this);
  ;
}).prototype = _js_helper._AllMatchesIterable.prototype;
dart.addTypeTests(_js_helper._AllMatchesIterable);
dart.addTypeCaches(_js_helper._AllMatchesIterable);
dart.setGetterSignature(_js_helper._AllMatchesIterable, () => ({
  __proto__: dart.getGetters(_js_helper._AllMatchesIterable.__proto__),
  iterator: core.Iterator$(core.RegExpMatch),
  [$iterator]: core.Iterator$(core.RegExpMatch)
}));
dart.setLibraryUri(_js_helper._AllMatchesIterable, L44);
dart.setFieldSignature(_js_helper._AllMatchesIterable, () => ({
  __proto__: dart.getFields(_js_helper._AllMatchesIterable.__proto__),
  [_re$]: dart.finalFieldType(_js_helper.JSSyntaxRegExp),
  [_string$0]: dart.finalFieldType(core.String),
  [_start$0]: dart.finalFieldType(core.int)
}));
dart.defineExtensionAccessors(_js_helper._AllMatchesIterable, ['iterator']);
var _regExp$ = dart.privateName(_js_helper, "_regExp");
var _nextIndex$ = dart.privateName(_js_helper, "_nextIndex");
_js_helper._AllMatchesIterator = class _AllMatchesIterator extends core.Object {
  get current() {
    return dart.nullCast(this[_current$0], core.RegExpMatch);
  }
  static _isLeadSurrogate(c) {
    if (c == null) dart.nullFailed(L50, 248, 36, "c");
    return dart.notNull(c) >= 55296 && dart.notNull(c) <= 56319;
  }
  static _isTrailSurrogate(c) {
    if (c == null) dart.nullFailed(L50, 252, 37, "c");
    return dart.notNull(c) >= 56320 && dart.notNull(c) <= 57343;
  }
  moveNext() {
    let string = this[_string$0];
    if (string == null) return false;
    if (dart.notNull(this[_nextIndex$]) <= string.length) {
      let match = this[_regExp$][_execGlobal](string, this[_nextIndex$]);
      if (match != null) {
        this[_current$0] = match;
        let nextIndex = match.end;
        if (match.start == nextIndex) {
          if (dart.test(this[_regExp$].isUnicode) && dart.notNull(this[_nextIndex$]) + 1 < string.length && dart.test(_js_helper._AllMatchesIterator._isLeadSurrogate(string[$codeUnitAt](this[_nextIndex$]))) && dart.test(_js_helper._AllMatchesIterator._isTrailSurrogate(string[$codeUnitAt](dart.notNull(this[_nextIndex$]) + 1)))) {
            nextIndex = dart.notNull(nextIndex) + 1;
          }
          nextIndex = dart.notNull(nextIndex) + 1;
        }
        this[_nextIndex$] = nextIndex;
        return true;
      }
    }
    this[_current$0] = null;
    this[_string$0] = null;
    return false;
  }
};
(_js_helper._AllMatchesIterator.new = function(_regExp, _string, _nextIndex) {
  if (_regExp == null) dart.nullFailed(L50, 244, 28, "_regExp");
  if (_nextIndex == null) dart.nullFailed(L50, 244, 56, "_nextIndex");
  this[_current$0] = null;
  this[_regExp$] = _regExp;
  this[_string$0] = _string;
  this[_nextIndex$] = _nextIndex;
  ;
}).prototype = _js_helper._AllMatchesIterator.prototype;
dart.addTypeTests(_js_helper._AllMatchesIterator);
dart.addTypeCaches(_js_helper._AllMatchesIterator);
_js_helper._AllMatchesIterator[dart.implements] = () => [core.Iterator$(core.RegExpMatch)];
dart.setMethodSignature(_js_helper._AllMatchesIterator, () => ({
  __proto__: dart.getMethods(_js_helper._AllMatchesIterator.__proto__),
  moveNext: dart.fnType(core.bool, [])
}));
dart.setGetterSignature(_js_helper._AllMatchesIterator, () => ({
  __proto__: dart.getGetters(_js_helper._AllMatchesIterator.__proto__),
  current: core.RegExpMatch
}));
dart.setLibraryUri(_js_helper._AllMatchesIterator, L44);
dart.setFieldSignature(_js_helper._AllMatchesIterator, () => ({
  __proto__: dart.getFields(_js_helper._AllMatchesIterator.__proto__),
  [_regExp$]: dart.finalFieldType(_js_helper.JSSyntaxRegExp),
  [_string$0]: dart.fieldType(dart.nullable(core.String)),
  [_nextIndex$]: dart.fieldType(core.int),
  [_current$0]: dart.fieldType(dart.nullable(core.RegExpMatch))
}));
var start$0 = dart.privateName(_js_helper, "StringMatch.start");
var input$ = dart.privateName(_js_helper, "StringMatch.input");
var pattern$ = dart.privateName(_js_helper, "StringMatch.pattern");
_js_helper.StringMatch = class StringMatch extends core.Object {
  get start() {
    return this[start$0];
  }
  set start(value) {
    super.start = value;
  }
  get input() {
    return this[input$];
  }
  set input(value) {
    super.input = value;
  }
  get pattern() {
    return this[pattern$];
  }
  set pattern(value) {
    super.pattern = value;
  }
  get end() {
    return dart.notNull(this.start) + this.pattern.length;
  }
  _get(g) {
    if (g == null) dart.nullFailed(L51, 31, 26, "g");
    return this.group(g);
  }
  get groupCount() {
    return 0;
  }
  group(group_) {
    if (group_ == null) dart.nullFailed(L51, 34, 20, "group_");
    if (group_ !== 0) {
      dart.throw(new core.RangeError.value(group_));
    }
    return this.pattern;
  }
  groups(groups_) {
    if (groups_ == null) dart.nullFailed(L51, 41, 33, "groups_");
    let result = JSArrayOfString().of([]);
    for (let g of groups_) {
      result[$add](this.group(g));
    }
    return result;
  }
};
(_js_helper.StringMatch.new = function(start, input, pattern) {
  if (start == null) dart.nullFailed(L51, 28, 30, "start");
  if (input == null) dart.nullFailed(L51, 28, 49, "input");
  if (pattern == null) dart.nullFailed(L51, 28, 68, "pattern");
  this[start$0] = start;
  this[input$] = input;
  this[pattern$] = pattern;
  ;
}).prototype = _js_helper.StringMatch.prototype;
dart.addTypeTests(_js_helper.StringMatch);
dart.addTypeCaches(_js_helper.StringMatch);
_js_helper.StringMatch[dart.implements] = () => [core.Match];
dart.setMethodSignature(_js_helper.StringMatch, () => ({
  __proto__: dart.getMethods(_js_helper.StringMatch.__proto__),
  _get: dart.fnType(core.String, [core.int]),
  group: dart.fnType(core.String, [core.int]),
  groups: dart.fnType(core.List$(core.String), [core.List$(core.int)])
}));
dart.setGetterSignature(_js_helper.StringMatch, () => ({
  __proto__: dart.getGetters(_js_helper.StringMatch.__proto__),
  end: core.int,
  groupCount: core.int
}));
dart.setLibraryUri(_js_helper.StringMatch, L44);
dart.setFieldSignature(_js_helper.StringMatch, () => ({
  __proto__: dart.getFields(_js_helper.StringMatch.__proto__),
  start: dart.finalFieldType(core.int),
  input: dart.finalFieldType(core.String),
  pattern: dart.finalFieldType(core.String)
}));
var _input$ = dart.privateName(_js_helper, "_input");
var _pattern$ = dart.privateName(_js_helper, "_pattern");
var _index$0 = dart.privateName(_js_helper, "_index");
core.Match = class Match extends core.Object {};
(core.Match.new = function() {
  ;
}).prototype = core.Match.prototype;
dart.addTypeTests(core.Match);
dart.addTypeCaches(core.Match);
dart.setLibraryUri(core.Match, L8$);
_js_helper._StringAllMatchesIterable = class _StringAllMatchesIterable extends core.Iterable$(core.Match) {
  get iterator() {
    return new _js_helper._StringAllMatchesIterator.new(this[_input$], this[_pattern$], this[_index$0]);
  }
  get first() {
    let index = _js_helper.stringIndexOfStringUnchecked(this[_input$], this[_pattern$], this[_index$0]);
    if (index >= 0) {
      return new _js_helper.StringMatch.new(index, this[_input$], this[_pattern$]);
    }
    dart.throw(_internal.IterableElementError.noElement());
  }
};
(_js_helper._StringAllMatchesIterable.new = function(_input, _pattern, _index) {
  if (_input == null) dart.nullFailed(L51, 64, 34, "_input");
  if (_pattern == null) dart.nullFailed(L51, 64, 47, "_pattern");
  if (_index == null) dart.nullFailed(L51, 64, 62, "_index");
  this[_input$] = _input;
  this[_pattern$] = _pattern;
  this[_index$0] = _index;
  _js_helper._StringAllMatchesIterable.__proto__.new.call(this);
  ;
}).prototype = _js_helper._StringAllMatchesIterable.prototype;
dart.addTypeTests(_js_helper._StringAllMatchesIterable);
dart.addTypeCaches(_js_helper._StringAllMatchesIterable);
dart.setGetterSignature(_js_helper._StringAllMatchesIterable, () => ({
  __proto__: dart.getGetters(_js_helper._StringAllMatchesIterable.__proto__),
  iterator: core.Iterator$(core.Match),
  [$iterator]: core.Iterator$(core.Match)
}));
dart.setLibraryUri(_js_helper._StringAllMatchesIterable, L44);
dart.setFieldSignature(_js_helper._StringAllMatchesIterable, () => ({
  __proto__: dart.getFields(_js_helper._StringAllMatchesIterable.__proto__),
  [_input$]: dart.finalFieldType(core.String),
  [_pattern$]: dart.finalFieldType(core.String),
  [_index$0]: dart.finalFieldType(core.int)
}));
dart.defineExtensionAccessors(_js_helper._StringAllMatchesIterable, ['iterator', 'first']);
_js_helper._StringAllMatchesIterator = class _StringAllMatchesIterator extends core.Object {
  moveNext() {
    if (dart.notNull(this[_index$0]) + this[_pattern$].length > this[_input$].length) {
      this[_current$0] = null;
      return false;
    }
    let index = _js_helper.stringIndexOfStringUnchecked(this[_input$], this[_pattern$], this[_index$0]);
    if (index < 0) {
      this[_index$0] = this[_input$].length + 1;
      this[_current$0] = null;
      return false;
    }
    let end = index + this[_pattern$].length;
    this[_current$0] = new _js_helper.StringMatch.new(index, this[_input$], this[_pattern$]);
    if (end === this[_index$0]) end = end + 1;
    this[_index$0] = end;
    return true;
  }
  get current() {
    return dart.nullCheck(this[_current$0]);
  }
};
(_js_helper._StringAllMatchesIterator.new = function(_input, _pattern, _index) {
  if (_input == null) dart.nullFailed(L51, 84, 34, "_input");
  if (_pattern == null) dart.nullFailed(L51, 84, 47, "_pattern");
  if (_index == null) dart.nullFailed(L51, 84, 62, "_index");
  this[_current$0] = null;
  this[_input$] = _input;
  this[_pattern$] = _pattern;
  this[_index$0] = _index;
  ;
}).prototype = _js_helper._StringAllMatchesIterator.prototype;
dart.addTypeTests(_js_helper._StringAllMatchesIterator);
dart.addTypeCaches(_js_helper._StringAllMatchesIterator);
_js_helper._StringAllMatchesIterator[dart.implements] = () => [core.Iterator$(core.Match)];
dart.setMethodSignature(_js_helper._StringAllMatchesIterator, () => ({
  __proto__: dart.getMethods(_js_helper._StringAllMatchesIterator.__proto__),
  moveNext: dart.fnType(core.bool, [])
}));
dart.setGetterSignature(_js_helper._StringAllMatchesIterator, () => ({
  __proto__: dart.getGetters(_js_helper._StringAllMatchesIterator.__proto__),
  current: core.Match
}));
dart.setLibraryUri(_js_helper._StringAllMatchesIterator, L44);
dart.setFieldSignature(_js_helper._StringAllMatchesIterator, () => ({
  __proto__: dart.getFields(_js_helper._StringAllMatchesIterator.__proto__),
  [_input$]: dart.finalFieldType(core.String),
  [_pattern$]: dart.finalFieldType(core.String),
  [_index$0]: dart.fieldType(core.int),
  [_current$0]: dart.fieldType(dart.nullable(core.Match))
}));
var C28;
var C29;
_js_helper.diagnoseIndexError = function diagnoseIndexError(indexable, index) {
  if (index == null) dart.nullFailed(L45, 474, 41, "index");
  let length = core.int.as(dart.dload(indexable, 'length'));
  if (dart.notNull(index) < 0 || dart.notNull(index) >= dart.notNull(length)) {
    return new core.IndexError.new(index, indexable, "index", null, length);
  }
  return new core.RangeError.value(index, "index");
};
_js_helper.diagnoseRangeError = function diagnoseRangeError(start, end, length) {
  if (length == null) dart.nullFailed(L45, 490, 52, "length");
  if (start == null) {
    return new core.ArgumentError.value(start, "start");
  }
  if (dart.notNull(start) < 0 || dart.notNull(start) > dart.notNull(length)) {
    return new core.RangeError.range(start, 0, length, "start");
  }
  if (end != null) {
    if (dart.notNull(end) < dart.notNull(start) || dart.notNull(end) > dart.notNull(length)) {
      return new core.RangeError.range(end, start, length, "end");
    }
  }
  return new core.ArgumentError.value(end, "end");
};
_js_helper.stringLastIndexOfUnchecked = function stringLastIndexOfUnchecked(receiver, element, start) {
  return receiver.lastIndexOf(element, start);
};
_js_helper.argumentErrorValue = function argumentErrorValue(object) {
  return new core.ArgumentError.value(object);
};
_js_helper.throwArgumentErrorValue = function throwArgumentErrorValue(value) {
  dart.throw(_js_helper.argumentErrorValue(value));
};
_js_helper.checkInt = function checkInt(value) {
  if (!core.int.is(value)) dart.throw(_js_helper.argumentErrorValue(value));
  return value;
};
_js_helper.throwRuntimeError = function throwRuntimeError(message) {
  dart.throw(new _js_helper.RuntimeError.new(message));
};
_js_helper.throwAbstractClassInstantiationError = function throwAbstractClassInstantiationError(className) {
  dart.throw(new core.AbstractClassInstantiationError.new(core.String.as(className)));
};
_js_helper.throwConcurrentModificationError = function throwConcurrentModificationError(collection) {
  dart.throw(new core.ConcurrentModificationError.new(collection));
};
_js_helper.fillLiteralMap = function fillLiteralMap(keyValuePairs, result) {
  let t77, t77$;
  if (result == null) dart.nullFailed(L45, 570, 35, "result");
  let index = 0;
  let length = _js_helper.getLength(keyValuePairs);
  while (index < dart.notNull(length)) {
    let key = _js_helper.getIndex(keyValuePairs, (t77 = index, index = t77 + 1, t77));
    let value = _js_helper.getIndex(keyValuePairs, (t77$ = index, index = t77$ + 1, t77$));
    result[$_set](key, value);
  }
  return result;
};
_js_helper.jsHasOwnProperty = function jsHasOwnProperty(jsObject, property) {
  if (property == null) dart.nullFailed(L45, 583, 40, "property");
  return jsObject.hasOwnProperty(property);
};
_js_helper.jsPropertyAccess = function jsPropertyAccess(jsObject, property) {
  if (property == null) dart.nullFailed(L45, 587, 35, "property");
  return jsObject[property];
};
_js_helper.getFallThroughError = function getFallThroughError() {
  return new _js_helper.FallThroughErrorImplementation.new();
};
_js_helper.random64 = function random64() {
  let int32a = Math.random() * 0x100000000 >>> 0;
  let int32b = Math.random() * 0x100000000 >>> 0;
  return int32a + int32b * 4294967296;
};
_js_helper.registerGlobalObject = function registerGlobalObject(object) {
  try {
    if (dart.test(dart.polyfill(object))) {
      dart.applyAllExtensions(object);
    }
  } catch (e$) {
    let e = dart.getThrown(e$);
    if (core.Object.is(e)) {
    } else
      throw e$;
  }
};
_js_helper.applyExtension = function applyExtension$(name, nativeObject) {
  dart.applyExtension(name, nativeObject);
};
_js_helper.getRuntimeType = function getRuntimeType(object) {
  return dart.getReifiedType(object);
};
_js_helper.getIndex = function getIndex(array, index) {
  if (index == null) dart.nullFailed(L52, 13, 21, "index");
  if (!dart.test(_js_helper.isJsArray(array))) dart.assertFailed(null, L52, 14, 10, "isJsArray(array)");
  return array[index];
};
_js_helper.getLength = function getLength(array) {
  if (!dart.test(_js_helper.isJsArray(array))) dart.assertFailed(null, L52, 20, 10, "isJsArray(array)");
  return array.length;
};
_js_helper.isJsArray = function isJsArray(value) {
  return _interceptors.JSArray.is(value);
};
_js_helper.putLinkedMapKey = function putLinkedMapKey(key, keyMap) {
  let hash = key[$hashCode] & 0x3ffffff;
  let buckets = keyMap.get(hash);
  if (buckets == null) {
    keyMap.set(hash, [key]);
    return key;
  }
  for (let i = 0, n = buckets.length; i < n; i = i + 1) {
    let k = buckets[i];
    if (k[$_equals](key)) return k;
  }
  buckets.push(key);
  return key;
};
_js_helper.convertDartClosureToJS = function convertDartClosureToJS(F, closure, arity) {
  if (arity == null) dart.nullFailed(L53, 9, 44, "arity");
  return closure;
};
_js_helper.setNativeSubclassDispatchRecord = function setNativeSubclassDispatchRecord(proto, interceptor) {
};
_js_helper.findDispatchTagForInterceptorClass = function findDispatchTagForInterceptorClass(interceptorClassConstructor) {
};
_js_helper.makeLeafDispatchRecord = function makeLeafDispatchRecord(interceptor) {
};
_js_helper.regExpGetNative = function regExpGetNative(regexp) {
  if (regexp == null) dart.nullFailed(L50, 8, 32, "regexp");
  return regexp[_nativeRegExp];
};
_js_helper.regExpGetGlobalNative = function regExpGetGlobalNative(regexp) {
  if (regexp == null) dart.nullFailed(L50, 19, 38, "regexp");
  let nativeRegexp = regexp[_nativeGlobalVersion];
  nativeRegexp.lastIndex = 0;
  return nativeRegexp;
};
_js_helper.regExpCaptureCount = function regExpCaptureCount(regexp) {
  if (regexp == null) dart.nullFailed(L50, 35, 39, "regexp");
  let nativeAnchoredRegExp = regexp[_nativeAnchoredVersion];
  let match = nativeAnchoredRegExp.exec('');
  return match[$length] - 2;
};
_js_helper.firstMatchAfter = function firstMatchAfter(regExp, string, start) {
  if (regExp == null) dart.nullFailed(L50, 287, 45, "regExp");
  if (string == null) dart.nullFailed(L50, 287, 60, "string");
  if (start == null) dart.nullFailed(L50, 287, 72, "start");
  return regExp[_execGlobal](string, start);
};
_js_helper.stringIndexOfStringUnchecked = function stringIndexOfStringUnchecked(receiver, other, startIndex) {
  return receiver.indexOf(other, startIndex);
};
_js_helper.substring1Unchecked = function substring1Unchecked(receiver, startIndex) {
  return receiver.substring(startIndex);
};
_js_helper.substring2Unchecked = function substring2Unchecked(receiver, startIndex, endIndex) {
  return receiver.substring(startIndex, endIndex);
};
_js_helper.stringContainsStringUnchecked = function stringContainsStringUnchecked(receiver, other, startIndex) {
  return _js_helper.stringIndexOfStringUnchecked(receiver, other, startIndex) >= 0;
};
_js_helper.allMatchesInStringUnchecked = function allMatchesInStringUnchecked(pattern, string, startIndex) {
  if (pattern == null) dart.nullFailed(L51, 55, 12, "pattern");
  if (string == null) dart.nullFailed(L51, 55, 28, "string");
  if (startIndex == null) dart.nullFailed(L51, 55, 40, "startIndex");
  return new _js_helper._StringAllMatchesIterable.new(string, pattern, startIndex);
};
_js_helper.stringContainsUnchecked = function stringContainsUnchecked(receiver, other, startIndex) {
  if (startIndex == null) dart.nullFailed(L51, 110, 51, "startIndex");
  if (typeof other == 'string') {
    return _js_helper.stringContainsStringUnchecked(receiver, other, startIndex);
  } else if (_js_helper.JSSyntaxRegExp.is(other)) {
    return other.hasMatch(receiver[$substring](startIndex));
  } else {
    let substr = receiver[$substring](startIndex);
    return core.bool.as(dart.dload(dart.dsend(other, 'allMatches', [substr]), 'isNotEmpty'));
  }
};
_js_helper.stringReplaceJS = function stringReplaceJS(receiver, replacer, replacement) {
  if (receiver == null) dart.nullFailed(L51, 122, 31, "receiver");
  if (replacement == null) dart.nullFailed(L51, 122, 58, "replacement");
  replacement = replacement.replace(/\$/g, "$$$$");
  return receiver.replace(replacer, replacement);
};
_js_helper.stringReplaceFirstRE = function stringReplaceFirstRE(receiver, regexp, replacement, startIndex) {
  if (regexp == null) dart.nullFailed(L51, 131, 70, "regexp");
  if (replacement == null) dart.nullFailed(L51, 132, 12, "replacement");
  if (startIndex == null) dart.nullFailed(L51, 132, 29, "startIndex");
  let match = regexp[_execGlobal](receiver, startIndex);
  if (match == null) return receiver;
  let start = match.start;
  let end = match.end;
  return _js_helper.stringReplaceRangeUnchecked(receiver, start, end, replacement);
};
_js_helper.quoteStringForRegExp = function quoteStringForRegExp(string) {
  return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
};
_js_helper.stringReplaceAllUnchecked = function stringReplaceAllUnchecked(receiver, pattern, replacement) {
  if (pattern == null) dart.argumentError(pattern);
  if (replacement == null) dart.argumentError(replacement);
  if (typeof pattern == 'string') {
    if (pattern === "") {
      if (receiver === "") {
        return replacement;
      } else {
        let result = new core.StringBuffer.new();
        let length = receiver.length;
        result.write(replacement);
        for (let i = 0; i < length; i = i + 1) {
          result.write(receiver[$_get](i));
          result.write(replacement);
        }
        return result.toString();
      }
    } else {
      return receiver.split(pattern).join(replacement);
    }
  } else if (_js_helper.JSSyntaxRegExp.is(pattern)) {
    let re = _js_helper.regExpGetGlobalNative(pattern);
    return _js_helper.stringReplaceJS(receiver, re, replacement);
  } else {
    dart.throw("String.replaceAll(Pattern) UNIMPLEMENTED");
  }
};
_js_helper._matchString = function _matchString(match) {
  if (match == null) dart.nullFailed(L51, 177, 27, "match");
  return dart.nullCheck(match._get(0));
};
_js_helper._stringIdentity = function _stringIdentity(string) {
  if (string == null) dart.nullFailed(L51, 178, 31, "string");
  return string;
};
_js_helper.stringReplaceAllFuncUnchecked = function stringReplaceAllFuncUnchecked(receiver, pattern, onMatch, onNonMatch) {
  if (receiver == null) dart.nullFailed(L51, 182, 12, "receiver");
  if (pattern == null) dart.argumentError(pattern);
  if (onMatch == null) onMatch = C28 || CT.C28;
  if (onNonMatch == null) onNonMatch = C29 || CT.C29;
  if (typeof pattern == 'string') {
    return _js_helper.stringReplaceAllStringFuncUnchecked(receiver, pattern, onMatch, onNonMatch);
  }
  let buffer = new core.StringBuffer.new();
  let startIndex = 0;
  for (let match of pattern[$allMatches](receiver)) {
    buffer.write(onNonMatch(receiver[$substring](startIndex, match.start)));
    buffer.write(onMatch(match));
    startIndex = match.end;
  }
  buffer.write(onNonMatch(receiver[$substring](startIndex)));
  return buffer.toString();
};
_js_helper.stringReplaceAllEmptyFuncUnchecked = function stringReplaceAllEmptyFuncUnchecked(receiver, onMatch, onNonMatch) {
  if (receiver == null) dart.nullFailed(L51, 204, 50, "receiver");
  if (onMatch == null) dart.nullFailed(L51, 205, 12, "onMatch");
  if (onNonMatch == null) dart.nullFailed(L51, 205, 41, "onNonMatch");
  let buffer = new core.StringBuffer.new();
  let length = receiver.length;
  let i = 0;
  buffer.write(onNonMatch(""));
  while (i < length) {
    buffer.write(onMatch(new _js_helper.StringMatch.new(i, receiver, "")));
    let code = receiver[$codeUnitAt](i);
    if ((code & ~1023 >>> 0) === 55296 && length > i + 1) {
      code = receiver[$codeUnitAt](i + 1);
      if ((code & ~1023 >>> 0) === 56320) {
        buffer.write(onNonMatch(receiver[$substring](i, i + 2)));
        i = i + 2;
        continue;
      }
    }
    buffer.write(onNonMatch(receiver[$_get](i)));
    i = i + 1;
  }
  buffer.write(onMatch(new _js_helper.StringMatch.new(i, receiver, "")));
  buffer.write(onNonMatch(""));
  return buffer.toString();
};
_js_helper.stringReplaceAllStringFuncUnchecked = function stringReplaceAllStringFuncUnchecked(receiver, pattern, onMatch, onNonMatch) {
  if (receiver == null) dart.nullFailed(L51, 234, 51, "receiver");
  if (pattern == null) dart.nullFailed(L51, 234, 68, "pattern");
  if (onMatch == null) dart.nullFailed(L51, 235, 12, "onMatch");
  if (onNonMatch == null) dart.nullFailed(L51, 235, 41, "onNonMatch");
  let patternLength = pattern.length;
  if (patternLength === 0) {
    return _js_helper.stringReplaceAllEmptyFuncUnchecked(receiver, onMatch, onNonMatch);
  }
  let length = receiver.length;
  let buffer = new core.StringBuffer.new();
  let startIndex = 0;
  while (startIndex < length) {
    let position = _js_helper.stringIndexOfStringUnchecked(receiver, pattern, startIndex);
    if (position === -1) {
      break;
    }
    buffer.write(onNonMatch(receiver[$substring](startIndex, position)));
    buffer.write(onMatch(new _js_helper.StringMatch.new(position, receiver, pattern)));
    startIndex = position + patternLength;
  }
  buffer.write(onNonMatch(receiver[$substring](startIndex)));
  return buffer.toString();
};
_js_helper.stringReplaceFirstUnchecked = function stringReplaceFirstUnchecked(receiver, pattern, replacement, startIndex) {
  if (pattern == null) dart.argumentError(pattern);
  if (replacement == null) dart.nullFailed(L51, 258, 40, "replacement");
  if (startIndex == null) dart.nullFailed(L51, 258, 57, "startIndex");
  if (typeof pattern == 'string') {
    let index = _js_helper.stringIndexOfStringUnchecked(receiver, pattern, startIndex);
    if (index < 0) return receiver;
    let end = index + pattern.length;
    return _js_helper.stringReplaceRangeUnchecked(receiver, index, end, replacement);
  }
  if (_js_helper.JSSyntaxRegExp.is(pattern)) {
    return startIndex === 0 ? _js_helper.stringReplaceJS(receiver, _js_helper.regExpGetNative(pattern), replacement) : _js_helper.stringReplaceFirstRE(receiver, pattern, replacement, startIndex);
  }
  let matches = pattern[$allMatches](receiver, startIndex)[$iterator];
  if (!dart.test(matches.moveNext())) return receiver;
  let match = matches.current;
  return receiver[$replaceRange](match.start, match.end, replacement);
};
_js_helper.stringReplaceFirstMappedUnchecked = function stringReplaceFirstMappedUnchecked(receiver, pattern, replace, startIndex) {
  if (receiver == null) dart.nullFailed(L51, 277, 49, "receiver");
  if (pattern == null) dart.nullFailed(L51, 277, 67, "pattern");
  if (replace == null) dart.nullFailed(L51, 278, 12, "replace");
  if (startIndex == null) dart.nullFailed(L51, 278, 40, "startIndex");
  let matches = pattern[$allMatches](receiver, startIndex)[$iterator];
  if (!dart.test(matches.moveNext())) return receiver;
  let match = matches.current;
  let replacement = dart.str(replace(match));
  return receiver[$replaceRange](match.start, match.end, replacement);
};
_js_helper.stringJoinUnchecked = function stringJoinUnchecked(array, separator) {
  return array.join(separator);
};
_js_helper.stringReplaceRangeUnchecked = function stringReplaceRangeUnchecked(receiver, start, end, replacement) {
  if (receiver == null) dart.nullFailed(L51, 293, 12, "receiver");
  if (start == null) dart.nullFailed(L51, 293, 26, "start");
  if (end == null) dart.nullFailed(L51, 293, 37, "end");
  if (replacement == null) dart.nullFailed(L51, 293, 49, "replacement");
  let prefix = receiver.substring(0, start);
  let suffix = receiver.substring(end);
  return dart.str(prefix) + dart.str(replacement) + dart.str(suffix);
};
var C30;
var C31;
var C32;
var C33;
dart.defineLazy(_js_helper, {
  /*_js_helper.patch*/get patch() {
    return C30 || CT.C30;
  },
  /*_js_helper.notNull*/get notNull() {
    return C31 || CT.C31;
  },
  /*_js_helper.undefined*/get undefined() {
    return C32 || CT.C32;
  },
  /*_js_helper.nullCheck*/get nullCheck() {
    return C33 || CT.C33;
  }
}, false);
_js_primitives.printString = function printString(string) {
  if (string == null) dart.nullFailed(L54, 20, 25, "string");
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof console == "object" && typeof console.log != "undefined") {
    console.log(string);
    return;
  }
  if (typeof window == "object") {
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw "Unable to print message: " + String(string);
};
var browserName$ = dart.privateName(_metadata, "SupportedBrowser.browserName");
var minimumVersion$ = dart.privateName(_metadata, "SupportedBrowser.minimumVersion");
_metadata.SupportedBrowser = class SupportedBrowser extends core.Object {
  get browserName() {
    return this[browserName$];
  }
  set browserName(value) {
    super.browserName = value;
  }
  get minimumVersion() {
    return this[minimumVersion$];
  }
  set minimumVersion(value) {
    super.minimumVersion = value;
  }
};
(_metadata.SupportedBrowser.new = function(browserName, minimumVersion = null) {
  if (browserName == null) dart.nullFailed(L55, 28, 31, "browserName");
  this[browserName$] = browserName;
  this[minimumVersion$] = minimumVersion;
  ;
}).prototype = _metadata.SupportedBrowser.prototype;
dart.addTypeTests(_metadata.SupportedBrowser);
dart.addTypeCaches(_metadata.SupportedBrowser);
dart.setLibraryUri(_metadata.SupportedBrowser, L56);
dart.setFieldSignature(_metadata.SupportedBrowser, () => ({
  __proto__: dart.getFields(_metadata.SupportedBrowser.__proto__),
  browserName: dart.finalFieldType(core.String),
  minimumVersion: dart.finalFieldType(dart.nullable(core.String))
}));
dart.defineLazy(_metadata.SupportedBrowser, {
  /*_metadata.SupportedBrowser.CHROME*/get CHROME() {
    return "Chrome";
  },
  /*_metadata.SupportedBrowser.FIREFOX*/get FIREFOX() {
    return "Firefox";
  },
  /*_metadata.SupportedBrowser.IE*/get IE() {
    return "Internet Explorer";
  },
  /*_metadata.SupportedBrowser.OPERA*/get OPERA() {
    return "Opera";
  },
  /*_metadata.SupportedBrowser.SAFARI*/get SAFARI() {
    return "Safari";
  }
}, false);
_metadata.Experimental = class Experimental extends core.Object {};
(_metadata.Experimental.new = function() {
  ;
}).prototype = _metadata.Experimental.prototype;
dart.addTypeTests(_metadata.Experimental);
dart.addTypeCaches(_metadata.Experimental);
dart.setLibraryUri(_metadata.Experimental, L56);
var name$9 = dart.privateName(_metadata, "DomName.name");
_metadata.DomName = class DomName extends core.Object {
  get name() {
    return this[name$9];
  }
  set name(value) {
    super.name = value;
  }
};
(_metadata.DomName.new = function(name) {
  if (name == null) dart.nullFailed(L55, 54, 22, "name");
  this[name$9] = name;
  ;
}).prototype = _metadata.DomName.prototype;
dart.addTypeTests(_metadata.DomName);
dart.addTypeCaches(_metadata.DomName);
dart.setLibraryUri(_metadata.DomName, L56);
dart.setFieldSignature(_metadata.DomName, () => ({
  __proto__: dart.getFields(_metadata.DomName.__proto__),
  name: dart.finalFieldType(core.String)
}));
_metadata.DocsEditable = class DocsEditable extends core.Object {};
(_metadata.DocsEditable.new = function() {
  ;
}).prototype = _metadata.DocsEditable.prototype;
dart.addTypeTests(_metadata.DocsEditable);
dart.addTypeCaches(_metadata.DocsEditable);
dart.setLibraryUri(_metadata.DocsEditable, L56);
_metadata.Unstable = class Unstable extends core.Object {};
(_metadata.Unstable.new = function() {
  ;
}).prototype = _metadata.Unstable.prototype;
dart.addTypeTests(_metadata.Unstable);
dart.addTypeCaches(_metadata.Unstable);
dart.setLibraryUri(_metadata.Unstable, L56);
_native_typed_data.NativeByteBuffer = class NativeByteBuffer extends core.Object {
  get [$lengthInBytes]() {
    return this.byteLength;
  }
  get [$runtimeType]() {
    return dart.wrapType(typed_data.ByteBuffer);
  }
  [$asUint8List](offsetInBytes = 0, length = null) {
    if (offsetInBytes == null) dart.nullFailed(L57, 33, 30, "offsetInBytes");
    return _native_typed_data.NativeUint8List.view(this, offsetInBytes, length);
  }
  [$asInt8List](offsetInBytes = 0, length = null) {
    if (offsetInBytes == null) dart.nullFailed(L57, 37, 28, "offsetInBytes");
    return _native_typed_data.NativeInt8List.view(this, offsetInBytes, length);
  }
  [$asUint8ClampedList](offsetInBytes = 0, length = null) {
    if (offsetInBytes == null) dart.nullFailed(L57, 41, 44, "offsetInBytes");
    return _native_typed_data.NativeUint8ClampedList.view(this, offsetInBytes, length);
  }
  [$asUint16List](offsetInBytes = 0, length = null) {
    if (offsetInBytes == null) dart.nullFailed(L57, 45, 32, "offsetInBytes");
    return _native_typed_data.NativeUint16List.view(this, offsetInBytes, length);
  }
  [$asInt16List](offsetInBytes = 0, length = null) {
    if (offsetInBytes == null) dart.nullFailed(L57, 49, 30, "offsetInBytes");
    return _native_typed_data.NativeInt16List.view(this, offsetInBytes, length);
  }
  [$asUint32List](offsetInBytes = 0, length = null) {
    if (offsetInBytes == null) dart.nullFailed(L57, 53, 32, "offsetInBytes");
    return _native_typed_data.NativeUint32List.view(this, offsetInBytes, length);
  }
  [$asInt32List](offsetInBytes = 0, length = null) {
    if (offsetInBytes == null) dart.nullFailed(L57, 57, 30, "offsetInBytes");
    return _native_typed_data.NativeInt32List.view(this, offsetInBytes, length);
  }
  [$asUint64List](offsetInBytes = 0, length = null) {
    if (offsetInBytes == null) dart.nullFailed(L57, 61, 32, "offsetInBytes");
    dart.throw(new core.UnsupportedError.new("Uint64List not supported by dart2js."));
  }
  [$asInt64List](offsetInBytes = 0, length = null) {
    if (offsetInBytes == null) dart.nullFailed(L57, 65, 30, "offsetInBytes");
    dart.throw(new core.UnsupportedError.new("Int64List not supported by dart2js."));
  }
  [$asInt32x4List](offsetInBytes = 0, length = null) {
    if (offsetInBytes == null) dart.nullFailed(L57, 69, 34, "offsetInBytes");
    let storage = this[$asInt32List](offsetInBytes, length != null ? dart.notNull(length) * 4 : null);
    return new _native_typed_data.NativeInt32x4List._externalStorage(storage);
  }
  [$asFloat32List](offsetInBytes = 0, length = null) {
    if (offsetInBytes == null) dart.nullFailed(L57, 75, 34, "offsetInBytes");
    return _native_typed_data.NativeFloat32List.view(this, offsetInBytes, length);
  }
  [$asFloat64List](offsetInBytes = 0, length = null) {
    if (offsetInBytes == null) dart.nullFailed(L57, 79, 34, "offsetInBytes");
    return _native_typed_data.NativeFloat64List.view(this, offsetInBytes, length);
  }
  [$asFloat32x4List](offsetInBytes = 0, length = null) {
    if (offsetInBytes == null) dart.nullFailed(L57, 83, 38, "offsetInBytes");
    let storage = this[$asFloat32List](offsetInBytes, length != null ? dart.notNull(length) * 4 : null);
    return new _native_typed_data.NativeFloat32x4List._externalStorage(storage);
  }
  [$asFloat64x2List](offsetInBytes = 0, length = null) {
    if (offsetInBytes == null) dart.nullFailed(L57, 89, 38, "offsetInBytes");
    let storage = this[$asFloat64List](offsetInBytes, length != null ? dart.notNull(length) * 2 : null);
    return new _native_typed_data.NativeFloat64x2List._externalStorage(storage);
  }
  [$asByteData](offsetInBytes = 0, length = null) {
    if (offsetInBytes == null) dart.nullFailed(L57, 95, 28, "offsetInBytes");
    return _native_typed_data.NativeByteData.view(this, offsetInBytes, length);
  }
};
(_native_typed_data.NativeByteBuffer.new = function() {
  ;
}).prototype = _native_typed_data.NativeByteBuffer.prototype;
dart.addTypeTests(_native_typed_data.NativeByteBuffer);
dart.addTypeCaches(_native_typed_data.NativeByteBuffer);
_native_typed_data.NativeByteBuffer[dart.implements] = () => [typed_data.ByteBuffer];
dart.setMethodSignature(_native_typed_data.NativeByteBuffer, () => ({
  __proto__: dart.getMethods(_native_typed_data.NativeByteBuffer.__proto__),
  [$asUint8List]: dart.fnType(typed_data.Uint8List, [], [core.int, dart.nullable(core.int)]),
  [$asInt8List]: dart.fnType(typed_data.Int8List, [], [core.int, dart.nullable(core.int)]),
  [$asUint8ClampedList]: dart.fnType(typed_data.Uint8ClampedList, [], [core.int, dart.nullable(core.int)]),
  [$asUint16List]: dart.fnType(typed_data.Uint16List, [], [core.int, dart.nullable(core.int)]),
  [$asInt16List]: dart.fnType(typed_data.Int16List, [], [core.int, dart.nullable(core.int)]),
  [$asUint32List]: dart.fnType(typed_data.Uint32List, [], [core.int, dart.nullable(core.int)]),
  [$asInt32List]: dart.fnType(typed_data.Int32List, [], [core.int, dart.nullable(core.int)]),
  [$asUint64List]: dart.fnType(typed_data.Uint64List, [], [core.int, dart.nullable(core.int)]),
  [$asInt64List]: dart.fnType(typed_data.Int64List, [], [core.int, dart.nullable(core.int)]),
  [$asInt32x4List]: dart.fnType(typed_data.Int32x4List, [], [core.int, dart.nullable(core.int)]),
  [$asFloat32List]: dart.fnType(typed_data.Float32List, [], [core.int, dart.nullable(core.int)]),
  [$asFloat64List]: dart.fnType(typed_data.Float64List, [], [core.int, dart.nullable(core.int)]),
  [$asFloat32x4List]: dart.fnType(typed_data.Float32x4List, [], [core.int, dart.nullable(core.int)]),
  [$asFloat64x2List]: dart.fnType(typed_data.Float64x2List, [], [core.int, dart.nullable(core.int)]),
  [$asByteData]: dart.fnType(typed_data.ByteData, [], [core.int, dart.nullable(core.int)])
}));
dart.setGetterSignature(_native_typed_data.NativeByteBuffer, () => ({
  __proto__: dart.getGetters(_native_typed_data.NativeByteBuffer.__proto__),
  [$lengthInBytes]: core.int
}));
dart.setLibraryUri(_native_typed_data.NativeByteBuffer, L58);
dart.registerExtension("ArrayBuffer", _native_typed_data.NativeByteBuffer);
var _storage$ = dart.privateName(_native_typed_data, "_storage");
typed_data.Float32x4 = class Float32x4 extends core.Object {};
(typed_data.Float32x4[dart.mixinNew] = function() {
}).prototype = typed_data.Float32x4.prototype;
dart.addTypeTests(typed_data.Float32x4);
dart.addTypeCaches(typed_data.Float32x4);
dart.setLibraryUri(typed_data.Float32x4, L59);
dart.defineLazy(typed_data.Float32x4, {
  /*typed_data.Float32x4.xxxx*/get xxxx() {
    return 0;
  },
  /*typed_data.Float32x4.xxxy*/get xxxy() {
    return 64;
  },
  /*typed_data.Float32x4.xxxz*/get xxxz() {
    return 128;
  },
  /*typed_data.Float32x4.xxxw*/get xxxw() {
    return 192;
  },
  /*typed_data.Float32x4.xxyx*/get xxyx() {
    return 16;
  },
  /*typed_data.Float32x4.xxyy*/get xxyy() {
    return 80;
  },
  /*typed_data.Float32x4.xxyz*/get xxyz() {
    return 144;
  },
  /*typed_data.Float32x4.xxyw*/get xxyw() {
    return 208;
  },
  /*typed_data.Float32x4.xxzx*/get xxzx() {
    return 32;
  },
  /*typed_data.Float32x4.xxzy*/get xxzy() {
    return 96;
  },
  /*typed_data.Float32x4.xxzz*/get xxzz() {
    return 160;
  },
  /*typed_data.Float32x4.xxzw*/get xxzw() {
    return 224;
  },
  /*typed_data.Float32x4.xxwx*/get xxwx() {
    return 48;
  },
  /*typed_data.Float32x4.xxwy*/get xxwy() {
    return 112;
  },
  /*typed_data.Float32x4.xxwz*/get xxwz() {
    return 176;
  },
  /*typed_data.Float32x4.xxww*/get xxww() {
    return 240;
  },
  /*typed_data.Float32x4.xyxx*/get xyxx() {
    return 4;
  },
  /*typed_data.Float32x4.xyxy*/get xyxy() {
    return 68;
  },
  /*typed_data.Float32x4.xyxz*/get xyxz() {
    return 132;
  },
  /*typed_data.Float32x4.xyxw*/get xyxw() {
    return 196;
  },
  /*typed_data.Float32x4.xyyx*/get xyyx() {
    return 20;
  },
  /*typed_data.Float32x4.xyyy*/get xyyy() {
    return 84;
  },
  /*typed_data.Float32x4.xyyz*/get xyyz() {
    return 148;
  },
  /*typed_data.Float32x4.xyyw*/get xyyw() {
    return 212;
  },
  /*typed_data.Float32x4.xyzx*/get xyzx() {
    return 36;
  },
  /*typed_data.Float32x4.xyzy*/get xyzy() {
    return 100;
  },
  /*typed_data.Float32x4.xyzz*/get xyzz() {
    return 164;
  },
  /*typed_data.Float32x4.xyzw*/get xyzw() {
    return 228;
  },
  /*typed_data.Float32x4.xywx*/get xywx() {
    return 52;
  },
  /*typed_data.Float32x4.xywy*/get xywy() {
    return 116;
  },
  /*typed_data.Float32x4.xywz*/get xywz() {
    return 180;
  },
  /*typed_data.Float32x4.xyww*/get xyww() {
    return 244;
  },
  /*typed_data.Float32x4.xzxx*/get xzxx() {
    return 8;
  },
  /*typed_data.Float32x4.xzxy*/get xzxy() {
    return 72;
  },
  /*typed_data.Float32x4.xzxz*/get xzxz() {
    return 136;
  },
  /*typed_data.Float32x4.xzxw*/get xzxw() {
    return 200;
  },
  /*typed_data.Float32x4.xzyx*/get xzyx() {
    return 24;
  },
  /*typed_data.Float32x4.xzyy*/get xzyy() {
    return 88;
  },
  /*typed_data.Float32x4.xzyz*/get xzyz() {
    return 152;
  },
  /*typed_data.Float32x4.xzyw*/get xzyw() {
    return 216;
  },
  /*typed_data.Float32x4.xzzx*/get xzzx() {
    return 40;
  },
  /*typed_data.Float32x4.xzzy*/get xzzy() {
    return 104;
  },
  /*typed_data.Float32x4.xzzz*/get xzzz() {
    return 168;
  },
  /*typed_data.Float32x4.xzzw*/get xzzw() {
    return 232;
  },
  /*typed_data.Float32x4.xzwx*/get xzwx() {
    return 56;
  },
  /*typed_data.Float32x4.xzwy*/get xzwy() {
    return 120;
  },
  /*typed_data.Float32x4.xzwz*/get xzwz() {
    return 184;
  },
  /*typed_data.Float32x4.xzww*/get xzww() {
    return 248;
  },
  /*typed_data.Float32x4.xwxx*/get xwxx() {
    return 12;
  },
  /*typed_data.Float32x4.xwxy*/get xwxy() {
    return 76;
  },
  /*typed_data.Float32x4.xwxz*/get xwxz() {
    return 140;
  },
  /*typed_data.Float32x4.xwxw*/get xwxw() {
    return 204;
  },
  /*typed_data.Float32x4.xwyx*/get xwyx() {
    return 28;
  },
  /*typed_data.Float32x4.xwyy*/get xwyy() {
    return 92;
  },
  /*typed_data.Float32x4.xwyz*/get xwyz() {
    return 156;
  },
  /*typed_data.Float32x4.xwyw*/get xwyw() {
    return 220;
  },
  /*typed_data.Float32x4.xwzx*/get xwzx() {
    return 44;
  },
  /*typed_data.Float32x4.xwzy*/get xwzy() {
    return 108;
  },
  /*typed_data.Float32x4.xwzz*/get xwzz() {
    return 172;
  },
  /*typed_data.Float32x4.xwzw*/get xwzw() {
    return 236;
  },
  /*typed_data.Float32x4.xwwx*/get xwwx() {
    return 60;
  },
  /*typed_data.Float32x4.xwwy*/get xwwy() {
    return 124;
  },
  /*typed_data.Float32x4.xwwz*/get xwwz() {
    return 188;
  },
  /*typed_data.Float32x4.xwww*/get xwww() {
    return 252;
  },
  /*typed_data.Float32x4.yxxx*/get yxxx() {
    return 1;
  },
  /*typed_data.Float32x4.yxxy*/get yxxy() {
    return 65;
  },
  /*typed_data.Float32x4.yxxz*/get yxxz() {
    return 129;
  },
  /*typed_data.Float32x4.yxxw*/get yxxw() {
    return 193;
  },
  /*typed_data.Float32x4.yxyx*/get yxyx() {
    return 17;
  },
  /*typed_data.Float32x4.yxyy*/get yxyy() {
    return 81;
  },
  /*typed_data.Float32x4.yxyz*/get yxyz() {
    return 145;
  },
  /*typed_data.Float32x4.yxyw*/get yxyw() {
    return 209;
  },
  /*typed_data.Float32x4.yxzx*/get yxzx() {
    return 33;
  },
  /*typed_data.Float32x4.yxzy*/get yxzy() {
    return 97;
  },
  /*typed_data.Float32x4.yxzz*/get yxzz() {
    return 161;
  },
  /*typed_data.Float32x4.yxzw*/get yxzw() {
    return 225;
  },
  /*typed_data.Float32x4.yxwx*/get yxwx() {
    return 49;
  },
  /*typed_data.Float32x4.yxwy*/get yxwy() {
    return 113;
  },
  /*typed_data.Float32x4.yxwz*/get yxwz() {
    return 177;
  },
  /*typed_data.Float32x4.yxww*/get yxww() {
    return 241;
  },
  /*typed_data.Float32x4.yyxx*/get yyxx() {
    return 5;
  },
  /*typed_data.Float32x4.yyxy*/get yyxy() {
    return 69;
  },
  /*typed_data.Float32x4.yyxz*/get yyxz() {
    return 133;
  },
  /*typed_data.Float32x4.yyxw*/get yyxw() {
    return 197;
  },
  /*typed_data.Float32x4.yyyx*/get yyyx() {
    return 21;
  },
  /*typed_data.Float32x4.yyyy*/get yyyy() {
    return 85;
  },
  /*typed_data.Float32x4.yyyz*/get yyyz() {
    return 149;
  },
  /*typed_data.Float32x4.yyyw*/get yyyw() {
    return 213;
  },
  /*typed_data.Float32x4.yyzx*/get yyzx() {
    return 37;
  },
  /*typed_data.Float32x4.yyzy*/get yyzy() {
    return 101;
  },
  /*typed_data.Float32x4.yyzz*/get yyzz() {
    return 165;
  },
  /*typed_data.Float32x4.yyzw*/get yyzw() {
    return 229;
  },
  /*typed_data.Float32x4.yywx*/get yywx() {
    return 53;
  },
  /*typed_data.Float32x4.yywy*/get yywy() {
    return 117;
  },
  /*typed_data.Float32x4.yywz*/get yywz() {
    return 181;
  },
  /*typed_data.Float32x4.yyww*/get yyww() {
    return 245;
  },
  /*typed_data.Float32x4.yzxx*/get yzxx() {
    return 9;
  },
  /*typed_data.Float32x4.yzxy*/get yzxy() {
    return 73;
  },
  /*typed_data.Float32x4.yzxz*/get yzxz() {
    return 137;
  },
  /*typed_data.Float32x4.yzxw*/get yzxw() {
    return 201;
  },
  /*typed_data.Float32x4.yzyx*/get yzyx() {
    return 25;
  },
  /*typed_data.Float32x4.yzyy*/get yzyy() {
    return 89;
  },
  /*typed_data.Float32x4.yzyz*/get yzyz() {
    return 153;
  },
  /*typed_data.Float32x4.yzyw*/get yzyw() {
    return 217;
  },
  /*typed_data.Float32x4.yzzx*/get yzzx() {
    return 41;
  },
  /*typed_data.Float32x4.yzzy*/get yzzy() {
    return 105;
  },
  /*typed_data.Float32x4.yzzz*/get yzzz() {
    return 169;
  },
  /*typed_data.Float32x4.yzzw*/get yzzw() {
    return 233;
  },
  /*typed_data.Float32x4.yzwx*/get yzwx() {
    return 57;
  },
  /*typed_data.Float32x4.yzwy*/get yzwy() {
    return 121;
  },
  /*typed_data.Float32x4.yzwz*/get yzwz() {
    return 185;
  },
  /*typed_data.Float32x4.yzww*/get yzww() {
    return 249;
  },
  /*typed_data.Float32x4.ywxx*/get ywxx() {
    return 13;
  },
  /*typed_data.Float32x4.ywxy*/get ywxy() {
    return 77;
  },
  /*typed_data.Float32x4.ywxz*/get ywxz() {
    return 141;
  },
  /*typed_data.Float32x4.ywxw*/get ywxw() {
    return 205;
  },
  /*typed_data.Float32x4.ywyx*/get ywyx() {
    return 29;
  },
  /*typed_data.Float32x4.ywyy*/get ywyy() {
    return 93;
  },
  /*typed_data.Float32x4.ywyz*/get ywyz() {
    return 157;
  },
  /*typed_data.Float32x4.ywyw*/get ywyw() {
    return 221;
  },
  /*typed_data.Float32x4.ywzx*/get ywzx() {
    return 45;
  },
  /*typed_data.Float32x4.ywzy*/get ywzy() {
    return 109;
  },
  /*typed_data.Float32x4.ywzz*/get ywzz() {
    return 173;
  },
  /*typed_data.Float32x4.ywzw*/get ywzw() {
    return 237;
  },
  /*typed_data.Float32x4.ywwx*/get ywwx() {
    return 61;
  },
  /*typed_data.Float32x4.ywwy*/get ywwy() {
    return 125;
  },
  /*typed_data.Float32x4.ywwz*/get ywwz() {
    return 189;
  },
  /*typed_data.Float32x4.ywww*/get ywww() {
    return 253;
  },
  /*typed_data.Float32x4.zxxx*/get zxxx() {
    return 2;
  },
  /*typed_data.Float32x4.zxxy*/get zxxy() {
    return 66;
  },
  /*typed_data.Float32x4.zxxz*/get zxxz() {
    return 130;
  },
  /*typed_data.Float32x4.zxxw*/get zxxw() {
    return 194;
  },
  /*typed_data.Float32x4.zxyx*/get zxyx() {
    return 18;
  },
  /*typed_data.Float32x4.zxyy*/get zxyy() {
    return 82;
  },
  /*typed_data.Float32x4.zxyz*/get zxyz() {
    return 146;
  },
  /*typed_data.Float32x4.zxyw*/get zxyw() {
    return 210;
  },
  /*typed_data.Float32x4.zxzx*/get zxzx() {
    return 34;
  },
  /*typed_data.Float32x4.zxzy*/get zxzy() {
    return 98;
  },
  /*typed_data.Float32x4.zxzz*/get zxzz() {
    return 162;
  },
  /*typed_data.Float32x4.zxzw*/get zxzw() {
    return 226;
  },
  /*typed_data.Float32x4.zxwx*/get zxwx() {
    return 50;
  },
  /*typed_data.Float32x4.zxwy*/get zxwy() {
    return 114;
  },
  /*typed_data.Float32x4.zxwz*/get zxwz() {
    return 178;
  },
  /*typed_data.Float32x4.zxww*/get zxww() {
    return 242;
  },
  /*typed_data.Float32x4.zyxx*/get zyxx() {
    return 6;
  },
  /*typed_data.Float32x4.zyxy*/get zyxy() {
    return 70;
  },
  /*typed_data.Float32x4.zyxz*/get zyxz() {
    return 134;
  },
  /*typed_data.Float32x4.zyxw*/get zyxw() {
    return 198;
  },
  /*typed_data.Float32x4.zyyx*/get zyyx() {
    return 22;
  },
  /*typed_data.Float32x4.zyyy*/get zyyy() {
    return 86;
  },
  /*typed_data.Float32x4.zyyz*/get zyyz() {
    return 150;
  },
  /*typed_data.Float32x4.zyyw*/get zyyw() {
    return 214;
  },
  /*typed_data.Float32x4.zyzx*/get zyzx() {
    return 38;
  },
  /*typed_data.Float32x4.zyzy*/get zyzy() {
    return 102;
  },
  /*typed_data.Float32x4.zyzz*/get zyzz() {
    return 166;
  },
  /*typed_data.Float32x4.zyzw*/get zyzw() {
    return 230;
  },
  /*typed_data.Float32x4.zywx*/get zywx() {
    return 54;
  },
  /*typed_data.Float32x4.zywy*/get zywy() {
    return 118;
  },
  /*typed_data.Float32x4.zywz*/get zywz() {
    return 182;
  },
  /*typed_data.Float32x4.zyww*/get zyww() {
    return 246;
  },
  /*typed_data.Float32x4.zzxx*/get zzxx() {
    return 10;
  },
  /*typed_data.Float32x4.zzxy*/get zzxy() {
    return 74;
  },
  /*typed_data.Float32x4.zzxz*/get zzxz() {
    return 138;
  },
  /*typed_data.Float32x4.zzxw*/get zzxw() {
    return 202;
  },
  /*typed_data.Float32x4.zzyx*/get zzyx() {
    return 26;
  },
  /*typed_data.Float32x4.zzyy*/get zzyy() {
    return 90;
  },
  /*typed_data.Float32x4.zzyz*/get zzyz() {
    return 154;
  },
  /*typed_data.Float32x4.zzyw*/get zzyw() {
    return 218;
  },
  /*typed_data.Float32x4.zzzx*/get zzzx() {
    return 42;
  },
  /*typed_data.Float32x4.zzzy*/get zzzy() {
    return 106;
  },
  /*typed_data.Float32x4.zzzz*/get zzzz() {
    return 170;
  },
  /*typed_data.Float32x4.zzzw*/get zzzw() {
    return 234;
  },
  /*typed_data.Float32x4.zzwx*/get zzwx() {
    return 58;
  },
  /*typed_data.Float32x4.zzwy*/get zzwy() {
    return 122;
  },
  /*typed_data.Float32x4.zzwz*/get zzwz() {
    return 186;
  },
  /*typed_data.Float32x4.zzww*/get zzww() {
    return 250;
  },
  /*typed_data.Float32x4.zwxx*/get zwxx() {
    return 14;
  },
  /*typed_data.Float32x4.zwxy*/get zwxy() {
    return 78;
  },
  /*typed_data.Float32x4.zwxz*/get zwxz() {
    return 142;
  },
  /*typed_data.Float32x4.zwxw*/get zwxw() {
    return 206;
  },
  /*typed_data.Float32x4.zwyx*/get zwyx() {
    return 30;
  },
  /*typed_data.Float32x4.zwyy*/get zwyy() {
    return 94;
  },
  /*typed_data.Float32x4.zwyz*/get zwyz() {
    return 158;
  },
  /*typed_data.Float32x4.zwyw*/get zwyw() {
    return 222;
  },
  /*typed_data.Float32x4.zwzx*/get zwzx() {
    return 46;
  },
  /*typed_data.Float32x4.zwzy*/get zwzy() {
    return 110;
  },
  /*typed_data.Float32x4.zwzz*/get zwzz() {
    return 174;
  },
  /*typed_data.Float32x4.zwzw*/get zwzw() {
    return 238;
  },
  /*typed_data.Float32x4.zwwx*/get zwwx() {
    return 62;
  },
  /*typed_data.Float32x4.zwwy*/get zwwy() {
    return 126;
  },
  /*typed_data.Float32x4.zwwz*/get zwwz() {
    return 190;
  },
  /*typed_data.Float32x4.zwww*/get zwww() {
    return 254;
  },
  /*typed_data.Float32x4.wxxx*/get wxxx() {
    return 3;
  },
  /*typed_data.Float32x4.wxxy*/get wxxy() {
    return 67;
  },
  /*typed_data.Float32x4.wxxz*/get wxxz() {
    return 131;
  },
  /*typed_data.Float32x4.wxxw*/get wxxw() {
    return 195;
  },
  /*typed_data.Float32x4.wxyx*/get wxyx() {
    return 19;
  },
  /*typed_data.Float32x4.wxyy*/get wxyy() {
    return 83;
  },
  /*typed_data.Float32x4.wxyz*/get wxyz() {
    return 147;
  },
  /*typed_data.Float32x4.wxyw*/get wxyw() {
    return 211;
  },
  /*typed_data.Float32x4.wxzx*/get wxzx() {
    return 35;
  },
  /*typed_data.Float32x4.wxzy*/get wxzy() {
    return 99;
  },
  /*typed_data.Float32x4.wxzz*/get wxzz() {
    return 163;
  },
  /*typed_data.Float32x4.wxzw*/get wxzw() {
    return 227;
  },
  /*typed_data.Float32x4.wxwx*/get wxwx() {
    return 51;
  },
  /*typed_data.Float32x4.wxwy*/get wxwy() {
    return 115;
  },
  /*typed_data.Float32x4.wxwz*/get wxwz() {
    return 179;
  },
  /*typed_data.Float32x4.wxww*/get wxww() {
    return 243;
  },
  /*typed_data.Float32x4.wyxx*/get wyxx() {
    return 7;
  },
  /*typed_data.Float32x4.wyxy*/get wyxy() {
    return 71;
  },
  /*typed_data.Float32x4.wyxz*/get wyxz() {
    return 135;
  },
  /*typed_data.Float32x4.wyxw*/get wyxw() {
    return 199;
  },
  /*typed_data.Float32x4.wyyx*/get wyyx() {
    return 23;
  },
  /*typed_data.Float32x4.wyyy*/get wyyy() {
    return 87;
  },
  /*typed_data.Float32x4.wyyz*/get wyyz() {
    return 151;
  },
  /*typed_data.Float32x4.wyyw*/get wyyw() {
    return 215;
  },
  /*typed_data.Float32x4.wyzx*/get wyzx() {
    return 39;
  },
  /*typed_data.Float32x4.wyzy*/get wyzy() {
    return 103;
  },
  /*typed_data.Float32x4.wyzz*/get wyzz() {
    return 167;
  },
  /*typed_data.Float32x4.wyzw*/get wyzw() {
    return 231;
  },
  /*typed_data.Float32x4.wywx*/get wywx() {
    return 55;
  },
  /*typed_data.Float32x4.wywy*/get wywy() {
    return 119;
  },
  /*typed_data.Float32x4.wywz*/get wywz() {
    return 183;
  },
  /*typed_data.Float32x4.wyww*/get wyww() {
    return 247;
  },
  /*typed_data.Float32x4.wzxx*/get wzxx() {
    return 11;
  },
  /*typed_data.Float32x4.wzxy*/get wzxy() {
    return 75;
  },
  /*typed_data.Float32x4.wzxz*/get wzxz() {
    return 139;
  },
  /*typed_data.Float32x4.wzxw*/get wzxw() {
    return 203;
  },
  /*typed_data.Float32x4.wzyx*/get wzyx() {
    return 27;
  },
  /*typed_data.Float32x4.wzyy*/get wzyy() {
    return 91;
  },
  /*typed_data.Float32x4.wzyz*/get wzyz() {
    return 155;
  },
  /*typed_data.Float32x4.wzyw*/get wzyw() {
    return 219;
  },
  /*typed_data.Float32x4.wzzx*/get wzzx() {
    return 43;
  },
  /*typed_data.Float32x4.wzzy*/get wzzy() {
    return 107;
  },
  /*typed_data.Float32x4.wzzz*/get wzzz() {
    return 171;
  },
  /*typed_data.Float32x4.wzzw*/get wzzw() {
    return 235;
  },
  /*typed_data.Float32x4.wzwx*/get wzwx() {
    return 59;
  },
  /*typed_data.Float32x4.wzwy*/get wzwy() {
    return 123;
  },
  /*typed_data.Float32x4.wzwz*/get wzwz() {
    return 187;
  },
  /*typed_data.Float32x4.wzww*/get wzww() {
    return 251;
  },
  /*typed_data.Float32x4.wwxx*/get wwxx() {
    return 15;
  },
  /*typed_data.Float32x4.wwxy*/get wwxy() {
    return 79;
  },
  /*typed_data.Float32x4.wwxz*/get wwxz() {
    return 143;
  },
  /*typed_data.Float32x4.wwxw*/get wwxw() {
    return 207;
  },
  /*typed_data.Float32x4.wwyx*/get wwyx() {
    return 31;
  },
  /*typed_data.Float32x4.wwyy*/get wwyy() {
    return 95;
  },
  /*typed_data.Float32x4.wwyz*/get wwyz() {
    return 159;
  },
  /*typed_data.Float32x4.wwyw*/get wwyw() {
    return 223;
  },
  /*typed_data.Float32x4.wwzx*/get wwzx() {
    return 47;
  },
  /*typed_data.Float32x4.wwzy*/get wwzy() {
    return 111;
  },
  /*typed_data.Float32x4.wwzz*/get wwzz() {
    return 175;
  },
  /*typed_data.Float32x4.wwzw*/get wwzw() {
    return 239;
  },
  /*typed_data.Float32x4.wwwx*/get wwwx() {
    return 63;
  },
  /*typed_data.Float32x4.wwwy*/get wwwy() {
    return 127;
  },
  /*typed_data.Float32x4.wwwz*/get wwwz() {
    return 191;
  },
  /*typed_data.Float32x4.wwww*/get wwww() {
    return 255;
  }
}, false);
const Object_ListMixin$36 = class Object_ListMixin extends core.Object {};
(Object_ListMixin$36.new = function() {
}).prototype = Object_ListMixin$36.prototype;
dart.applyMixin(Object_ListMixin$36, collection.ListMixin$(typed_data.Float32x4));
const Object_FixedLengthListMixin$36 = class Object_FixedLengthListMixin extends Object_ListMixin$36 {};
(Object_FixedLengthListMixin$36.new = function() {
}).prototype = Object_FixedLengthListMixin$36.prototype;
dart.applyMixin(Object_FixedLengthListMixin$36, _internal.FixedLengthListMixin$(typed_data.Float32x4));
_native_typed_data.NativeFloat32x4List = class NativeFloat32x4List extends Object_FixedLengthListMixin$36 {
  get runtimeType() {
    return dart.wrapType(typed_data.Float32x4List);
  }
  static fromList(list) {
    if (list == null) dart.nullFailed(L57, 129, 56, "list");
    if (_native_typed_data.NativeFloat32x4List.is(list)) {
      return new _native_typed_data.NativeFloat32x4List._externalStorage(_native_typed_data.NativeFloat32List.fromList(list[_storage$]));
    } else {
      return new _native_typed_data.NativeFloat32x4List._slowFromList(list);
    }
  }
  get buffer() {
    return this[_storage$][$buffer];
  }
  get lengthInBytes() {
    return this[_storage$][$lengthInBytes];
  }
  get offsetInBytes() {
    return this[_storage$][$offsetInBytes];
  }
  get elementSizeInBytes() {
    return 16;
  }
  get length() {
    return (dart.notNull(this[_storage$][$length]) / 4)[$truncate]();
  }
  set length(value) {
    super.length = value;
  }
  _get(index) {
    if (index == null) dart.nullFailed(L57, 148, 29, "index");
    _native_typed_data._checkValidIndex(index, this, this.length);
    let _x = this[_storage$][$_get](dart.notNull(index) * 4 + 0);
    let _y = this[_storage$][$_get](dart.notNull(index) * 4 + 1);
    let _z = this[_storage$][$_get](dart.notNull(index) * 4 + 2);
    let _w = this[_storage$][$_get](dart.notNull(index) * 4 + 3);
    return new _native_typed_data.NativeFloat32x4._truncated(_x, _y, _z, _w);
  }
  _set(index, value$) {
    let value = value$;
    if (index == null) dart.nullFailed(L57, 157, 25, "index");
    typed_data.Float32x4.as(value);
    if (value == null) dart.nullFailed(L57, 157, 42, "value");
    _native_typed_data._checkValidIndex(index, this, this.length);
    this[_storage$][$_set](dart.notNull(index) * 4 + 0, value.x);
    this[_storage$][$_set](dart.notNull(index) * 4 + 1, value.y);
    this[_storage$][$_set](dart.notNull(index) * 4 + 2, value.z);
    this[_storage$][$_set](dart.notNull(index) * 4 + 3, value.w);
    return value$;
  }
  sublist(start, end = null) {
    if (start == null) dart.nullFailed(L57, 165, 29, "start");
    let stop = _native_typed_data._checkValidRange(start, end, this.length);
    return new _native_typed_data.NativeFloat32x4List._externalStorage(this[_storage$][$sublist](dart.notNull(start) * 4, dart.notNull(stop) * 4));
  }
};
(_native_typed_data.NativeFloat32x4List.new = function(length) {
  if (length == null) dart.nullFailed(L57, 110, 27, "length");
  this[_storage$] = _native_typed_data.NativeFloat32List.new(dart.notNull(length) * 4);
  ;
}).prototype = _native_typed_data.NativeFloat32x4List.prototype;
(_native_typed_data.NativeFloat32x4List._externalStorage = function(_storage) {
  if (_storage == null) dart.nullFailed(L57, 112, 45, "_storage");
  this[_storage$] = _storage;
  ;
}).prototype = _native_typed_data.NativeFloat32x4List.prototype;
(_native_typed_data.NativeFloat32x4List._slowFromList = function(list) {
  if (list == null) dart.nullFailed(L57, 114, 53, "list");
  this[_storage$] = _native_typed_data.NativeFloat32List.new(dart.notNull(list[$length]) * 4);
  for (let i = 0; i < dart.notNull(list[$length]); i = i + 1) {
    let e = list[$_get](i);
    this[_storage$][$_set](i * 4 + 0, e.x);
    this[_storage$][$_set](i * 4 + 1, e.y);
    this[_storage$][$_set](i * 4 + 2, e.z);
    this[_storage$][$_set](i * 4 + 3, e.w);
  }
}).prototype = _native_typed_data.NativeFloat32x4List.prototype;
dart.addTypeTests(_native_typed_data.NativeFloat32x4List);
dart.addTypeCaches(_native_typed_data.NativeFloat32x4List);
_native_typed_data.NativeFloat32x4List[dart.implements] = () => [typed_data.Float32x4List];
dart.setMethodSignature(_native_typed_data.NativeFloat32x4List, () => ({
  __proto__: dart.getMethods(_native_typed_data.NativeFloat32x4List.__proto__),
  _get: dart.fnType(typed_data.Float32x4, [core.int]),
  [$_get]: dart.fnType(typed_data.Float32x4, [core.int]),
  _set: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
  [$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
  sublist: dart.fnType(typed_data.Float32x4List, [core.int], [dart.nullable(core.int)]),
  [$sublist]: dart.fnType(typed_data.Float32x4List, [core.int], [dart.nullable(core.int)])
}));
dart.setGetterSignature(_native_typed_data.NativeFloat32x4List, () => ({
  __proto__: dart.getGetters(_native_typed_data.NativeFloat32x4List.__proto__),
  buffer: typed_data.ByteBuffer,
  [$buffer]: typed_data.ByteBuffer,
  lengthInBytes: core.int,
  [$lengthInBytes]: core.int,
  offsetInBytes: core.int,
  [$offsetInBytes]: core.int,
  elementSizeInBytes: core.int,
  [$elementSizeInBytes]: core.int,
  length: core.int,
  [$length]: core.int
}));
dart.setLibraryUri(_native_typed_data.NativeFloat32x4List, L58);
dart.setFieldSignature(_native_typed_data.NativeFloat32x4List, () => ({
  __proto__: dart.getFields(_native_typed_data.NativeFloat32x4List.__proto__),
  [_storage$]: dart.finalFieldType(typed_data.Float32List)
}));
dart.defineExtensionMethods(_native_typed_data.NativeFloat32x4List, ['_get', '_set', 'sublist']);
dart.defineExtensionAccessors(_native_typed_data.NativeFloat32x4List, [
  'runtimeType',
  'buffer',
  'lengthInBytes',
  'offsetInBytes',
  'elementSizeInBytes',
  'length'
]);
typed_data.Int32x4 = class Int32x4 extends core.Object {};
(typed_data.Int32x4[dart.mixinNew] = function() {
}).prototype = typed_data.Int32x4.prototype;
dart.addTypeTests(typed_data.Int32x4);
dart.addTypeCaches(typed_data.Int32x4);
dart.setLibraryUri(typed_data.Int32x4, L59);
dart.defineLazy(typed_data.Int32x4, {
  /*typed_data.Int32x4.xxxx*/get xxxx() {
    return 0;
  },
  /*typed_data.Int32x4.xxxy*/get xxxy() {
    return 64;
  },
  /*typed_data.Int32x4.xxxz*/get xxxz() {
    return 128;
  },
  /*typed_data.Int32x4.xxxw*/get xxxw() {
    return 192;
  },
  /*typed_data.Int32x4.xxyx*/get xxyx() {
    return 16;
  },
  /*typed_data.Int32x4.xxyy*/get xxyy() {
    return 80;
  },
  /*typed_data.Int32x4.xxyz*/get xxyz() {
    return 144;
  },
  /*typed_data.Int32x4.xxyw*/get xxyw() {
    return 208;
  },
  /*typed_data.Int32x4.xxzx*/get xxzx() {
    return 32;
  },
  /*typed_data.Int32x4.xxzy*/get xxzy() {
    return 96;
  },
  /*typed_data.Int32x4.xxzz*/get xxzz() {
    return 160;
  },
  /*typed_data.Int32x4.xxzw*/get xxzw() {
    return 224;
  },
  /*typed_data.Int32x4.xxwx*/get xxwx() {
    return 48;
  },
  /*typed_data.Int32x4.xxwy*/get xxwy() {
    return 112;
  },
  /*typed_data.Int32x4.xxwz*/get xxwz() {
    return 176;
  },
  /*typed_data.Int32x4.xxww*/get xxww() {
    return 240;
  },
  /*typed_data.Int32x4.xyxx*/get xyxx() {
    return 4;
  },
  /*typed_data.Int32x4.xyxy*/get xyxy() {
    return 68;
  },
  /*typed_data.Int32x4.xyxz*/get xyxz() {
    return 132;
  },
  /*typed_data.Int32x4.xyxw*/get xyxw() {
    return 196;
  },
  /*typed_data.Int32x4.xyyx*/get xyyx() {
    return 20;
  },
  /*typed_data.Int32x4.xyyy*/get xyyy() {
    return 84;
  },
  /*typed_data.Int32x4.xyyz*/get xyyz() {
    return 148;
  },
  /*typed_data.Int32x4.xyyw*/get xyyw() {
    return 212;
  },
  /*typed_data.Int32x4.xyzx*/get xyzx() {
    return 36;
  },
  /*typed_data.Int32x4.xyzy*/get xyzy() {
    return 100;
  },
  /*typed_data.Int32x4.xyzz*/get xyzz() {
    return 164;
  },
  /*typed_data.Int32x4.xyzw*/get xyzw() {
    return 228;
  },
  /*typed_data.Int32x4.xywx*/get xywx() {
    return 52;
  },
  /*typed_data.Int32x4.xywy*/get xywy() {
    return 116;
  },
  /*typed_data.Int32x4.xywz*/get xywz() {
    return 180;
  },
  /*typed_data.Int32x4.xyww*/get xyww() {
    return 244;
  },
  /*typed_data.Int32x4.xzxx*/get xzxx() {
    return 8;
  },
  /*typed_data.Int32x4.xzxy*/get xzxy() {
    return 72;
  },
  /*typed_data.Int32x4.xzxz*/get xzxz() {
    return 136;
  },
  /*typed_data.Int32x4.xzxw*/get xzxw() {
    return 200;
  },
  /*typed_data.Int32x4.xzyx*/get xzyx() {
    return 24;
  },
  /*typed_data.Int32x4.xzyy*/get xzyy() {
    return 88;
  },
  /*typed_data.Int32x4.xzyz*/get xzyz() {
    return 152;
  },
  /*typed_data.Int32x4.xzyw*/get xzyw() {
    return 216;
  },
  /*typed_data.Int32x4.xzzx*/get xzzx() {
    return 40;
  },
  /*typed_data.Int32x4.xzzy*/get xzzy() {
    return 104;
  },
  /*typed_data.Int32x4.xzzz*/get xzzz() {
    return 168;
  },
  /*typed_data.Int32x4.xzzw*/get xzzw() {
    return 232;
  },
  /*typed_data.Int32x4.xzwx*/get xzwx() {
    return 56;
  },
  /*typed_data.Int32x4.xzwy*/get xzwy() {
    return 120;
  },
  /*typed_data.Int32x4.xzwz*/get xzwz() {
    return 184;
  },
  /*typed_data.Int32x4.xzww*/get xzww() {
    return 248;
  },
  /*typed_data.Int32x4.xwxx*/get xwxx() {
    return 12;
  },
  /*typed_data.Int32x4.xwxy*/get xwxy() {
    return 76;
  },
  /*typed_data.Int32x4.xwxz*/get xwxz() {
    return 140;
  },
  /*typed_data.Int32x4.xwxw*/get xwxw() {
    return 204;
  },
  /*typed_data.Int32x4.xwyx*/get xwyx() {
    return 28;
  },
  /*typed_data.Int32x4.xwyy*/get xwyy() {
    return 92;
  },
  /*typed_data.Int32x4.xwyz*/get xwyz() {
    return 156;
  },
  /*typed_data.Int32x4.xwyw*/get xwyw() {
    return 220;
  },
  /*typed_data.Int32x4.xwzx*/get xwzx() {
    return 44;
  },
  /*typed_data.Int32x4.xwzy*/get xwzy() {
    return 108;
  },
  /*typed_data.Int32x4.xwzz*/get xwzz() {
    return 172;
  },
  /*typed_data.Int32x4.xwzw*/get xwzw() {
    return 236;
  },
  /*typed_data.Int32x4.xwwx*/get xwwx() {
    return 60;
  },
  /*typed_data.Int32x4.xwwy*/get xwwy() {
    return 124;
  },
  /*typed_data.Int32x4.xwwz*/get xwwz() {
    return 188;
  },
  /*typed_data.Int32x4.xwww*/get xwww() {
    return 252;
  },
  /*typed_data.Int32x4.yxxx*/get yxxx() {
    return 1;
  },
  /*typed_data.Int32x4.yxxy*/get yxxy() {
    return 65;
  },
  /*typed_data.Int32x4.yxxz*/get yxxz() {
    return 129;
  },
  /*typed_data.Int32x4.yxxw*/get yxxw() {
    return 193;
  },
  /*typed_data.Int32x4.yxyx*/get yxyx() {
    return 17;
  },
  /*typed_data.Int32x4.yxyy*/get yxyy() {
    return 81;
  },
  /*typed_data.Int32x4.yxyz*/get yxyz() {
    return 145;
  },
  /*typed_data.Int32x4.yxyw*/get yxyw() {
    return 209;
  },
  /*typed_data.Int32x4.yxzx*/get yxzx() {
    return 33;
  },
  /*typed_data.Int32x4.yxzy*/get yxzy() {
    return 97;
  },
  /*typed_data.Int32x4.yxzz*/get yxzz() {
    return 161;
  },
  /*typed_data.Int32x4.yxzw*/get yxzw() {
    return 225;
  },
  /*typed_data.Int32x4.yxwx*/get yxwx() {
    return 49;
  },
  /*typed_data.Int32x4.yxwy*/get yxwy() {
    return 113;
  },
  /*typed_data.Int32x4.yxwz*/get yxwz() {
    return 177;
  },
  /*typed_data.Int32x4.yxww*/get yxww() {
    return 241;
  },
  /*typed_data.Int32x4.yyxx*/get yyxx() {
    return 5;
  },
  /*typed_data.Int32x4.yyxy*/get yyxy() {
    return 69;
  },
  /*typed_data.Int32x4.yyxz*/get yyxz() {
    return 133;
  },
  /*typed_data.Int32x4.yyxw*/get yyxw() {
    return 197;
  },
  /*typed_data.Int32x4.yyyx*/get yyyx() {
    return 21;
  },
  /*typed_data.Int32x4.yyyy*/get yyyy() {
    return 85;
  },
  /*typed_data.Int32x4.yyyz*/get yyyz() {
    return 149;
  },
  /*typed_data.Int32x4.yyyw*/get yyyw() {
    return 213;
  },
  /*typed_data.Int32x4.yyzx*/get yyzx() {
    return 37;
  },
  /*typed_data.Int32x4.yyzy*/get yyzy() {
    return 101;
  },
  /*typed_data.Int32x4.yyzz*/get yyzz() {
    return 165;
  },
  /*typed_data.Int32x4.yyzw*/get yyzw() {
    return 229;
  },
  /*typed_data.Int32x4.yywx*/get yywx() {
    return 53;
  },
  /*typed_data.Int32x4.yywy*/get yywy() {
    return 117;
  },
  /*typed_data.Int32x4.yywz*/get yywz() {
    return 181;
  },
  /*typed_data.Int32x4.yyww*/get yyww() {
    return 245;
  },
  /*typed_data.Int32x4.yzxx*/get yzxx() {
    return 9;
  },
  /*typed_data.Int32x4.yzxy*/get yzxy() {
    return 73;
  },
  /*typed_data.Int32x4.yzxz*/get yzxz() {
    return 137;
  },
  /*typed_data.Int32x4.yzxw*/get yzxw() {
    return 201;
  },
  /*typed_data.Int32x4.yzyx*/get yzyx() {
    return 25;
  },
  /*typed_data.Int32x4.yzyy*/get yzyy() {
    return 89;
  },
  /*typed_data.Int32x4.yzyz*/get yzyz() {
    return 153;
  },
  /*typed_data.Int32x4.yzyw*/get yzyw() {
    return 217;
  },
  /*typed_data.Int32x4.yzzx*/get yzzx() {
    return 41;
  },
  /*typed_data.Int32x4.yzzy*/get yzzy() {
    return 105;
  },
  /*typed_data.Int32x4.yzzz*/get yzzz() {
    return 169;
  },
  /*typed_data.Int32x4.yzzw*/get yzzw() {
    return 233;
  },
  /*typed_data.Int32x4.yzwx*/get yzwx() {
    return 57;
  },
  /*typed_data.Int32x4.yzwy*/get yzwy() {
    return 121;
  },
  /*typed_data.Int32x4.yzwz*/get yzwz() {
    return 185;
  },
  /*typed_data.Int32x4.yzww*/get yzww() {
    return 249;
  },
  /*typed_data.Int32x4.ywxx*/get ywxx() {
    return 13;
  },
  /*typed_data.Int32x4.ywxy*/get ywxy() {
    return 77;
  },
  /*typed_data.Int32x4.ywxz*/get ywxz() {
    return 141;
  },
  /*typed_data.Int32x4.ywxw*/get ywxw() {
    return 205;
  },
  /*typed_data.Int32x4.ywyx*/get ywyx() {
    return 29;
  },
  /*typed_data.Int32x4.ywyy*/get ywyy() {
    return 93;
  },
  /*typed_data.Int32x4.ywyz*/get ywyz() {
    return 157;
  },
  /*typed_data.Int32x4.ywyw*/get ywyw() {
    return 221;
  },
  /*typed_data.Int32x4.ywzx*/get ywzx() {
    return 45;
  },
  /*typed_data.Int32x4.ywzy*/get ywzy() {
    return 109;
  },
  /*typed_data.Int32x4.ywzz*/get ywzz() {
    return 173;
  },
  /*typed_data.Int32x4.ywzw*/get ywzw() {
    return 237;
  },
  /*typed_data.Int32x4.ywwx*/get ywwx() {
    return 61;
  },
  /*typed_data.Int32x4.ywwy*/get ywwy() {
    return 125;
  },
  /*typed_data.Int32x4.ywwz*/get ywwz() {
    return 189;
  },
  /*typed_data.Int32x4.ywww*/get ywww() {
    return 253;
  },
  /*typed_data.Int32x4.zxxx*/get zxxx() {
    return 2;
  },
  /*typed_data.Int32x4.zxxy*/get zxxy() {
    return 66;
  },
  /*typed_data.Int32x4.zxxz*/get zxxz() {
    return 130;
  },
  /*typed_data.Int32x4.zxxw*/get zxxw() {
    return 194;
  },
  /*typed_data.Int32x4.zxyx*/get zxyx() {
    return 18;
  },
  /*typed_data.Int32x4.zxyy*/get zxyy() {
    return 82;
  },
  /*typed_data.Int32x4.zxyz*/get zxyz() {
    return 146;
  },
  /*typed_data.Int32x4.zxyw*/get zxyw() {
    return 210;
  },
  /*typed_data.Int32x4.zxzx*/get zxzx() {
    return 34;
  },
  /*typed_data.Int32x4.zxzy*/get zxzy() {
    return 98;
  },
  /*typed_data.Int32x4.zxzz*/get zxzz() {
    return 162;
  },
  /*typed_data.Int32x4.zxzw*/get zxzw() {
    return 226;
  },
  /*typed_data.Int32x4.zxwx*/get zxwx() {
    return 50;
  },
  /*typed_data.Int32x4.zxwy*/get zxwy() {
    return 114;
  },
  /*typed_data.Int32x4.zxwz*/get zxwz() {
    return 178;
  },
  /*typed_data.Int32x4.zxww*/get zxww() {
    return 242;
  },
  /*typed_data.Int32x4.zyxx*/get zyxx() {
    return 6;
  },
  /*typed_data.Int32x4.zyxy*/get zyxy() {
    return 70;
  },
  /*typed_data.Int32x4.zyxz*/get zyxz() {
    return 134;
  },
  /*typed_data.Int32x4.zyxw*/get zyxw() {
    return 198;
  },
  /*typed_data.Int32x4.zyyx*/get zyyx() {
    return 22;
  },
  /*typed_data.Int32x4.zyyy*/get zyyy() {
    return 86;
  },
  /*typed_data.Int32x4.zyyz*/get zyyz() {
    return 150;
  },
  /*typed_data.Int32x4.zyyw*/get zyyw() {
    return 214;
  },
  /*typed_data.Int32x4.zyzx*/get zyzx() {
    return 38;
  },
  /*typed_data.Int32x4.zyzy*/get zyzy() {
    return 102;
  },
  /*typed_data.Int32x4.zyzz*/get zyzz() {
    return 166;
  },
  /*typed_data.Int32x4.zyzw*/get zyzw() {
    return 230;
  },
  /*typed_data.Int32x4.zywx*/get zywx() {
    return 54;
  },
  /*typed_data.Int32x4.zywy*/get zywy() {
    return 118;
  },
  /*typed_data.Int32x4.zywz*/get zywz() {
    return 182;
  },
  /*typed_data.Int32x4.zyww*/get zyww() {
    return 246;
  },
  /*typed_data.Int32x4.zzxx*/get zzxx() {
    return 10;
  },
  /*typed_data.Int32x4.zzxy*/get zzxy() {
    return 74;
  },
  /*typed_data.Int32x4.zzxz*/get zzxz() {
    return 138;
  },
  /*typed_data.Int32x4.zzxw*/get zzxw() {
    return 202;
  },
  /*typed_data.Int32x4.zzyx*/get zzyx() {
    return 26;
  },
  /*typed_data.Int32x4.zzyy*/get zzyy() {
    return 90;
  },
  /*typed_data.Int32x4.zzyz*/get zzyz() {
    return 154;
  },
  /*typed_data.Int32x4.zzyw*/get zzyw() {
    return 218;
  },
  /*typed_data.Int32x4.zzzx*/get zzzx() {
    return 42;
  },
  /*typed_data.Int32x4.zzzy*/get zzzy() {
    return 106;
  },
  /*typed_data.Int32x4.zzzz*/get zzzz() {
    return 170;
  },
  /*typed_data.Int32x4.zzzw*/get zzzw() {
    return 234;
  },
  /*typed_data.Int32x4.zzwx*/get zzwx() {
    return 58;
  },
  /*typed_data.Int32x4.zzwy*/get zzwy() {
    return 122;
  },
  /*typed_data.Int32x4.zzwz*/get zzwz() {
    return 186;
  },
  /*typed_data.Int32x4.zzww*/get zzww() {
    return 250;
  },
  /*typed_data.Int32x4.zwxx*/get zwxx() {
    return 14;
  },
  /*typed_data.Int32x4.zwxy*/get zwxy() {
    return 78;
  },
  /*typed_data.Int32x4.zwxz*/get zwxz() {
    return 142;
  },
  /*typed_data.Int32x4.zwxw*/get zwxw() {
    return 206;
  },
  /*typed_data.Int32x4.zwyx*/get zwyx() {
    return 30;
  },
  /*typed_data.Int32x4.zwyy*/get zwyy() {
    return 94;
  },
  /*typed_data.Int32x4.zwyz*/get zwyz() {
    return 158;
  },
  /*typed_data.Int32x4.zwyw*/get zwyw() {
    return 222;
  },
  /*typed_data.Int32x4.zwzx*/get zwzx() {
    return 46;
  },
  /*typed_data.Int32x4.zwzy*/get zwzy() {
    return 110;
  },
  /*typed_data.Int32x4.zwzz*/get zwzz() {
    return 174;
  },
  /*typed_data.Int32x4.zwzw*/get zwzw() {
    return 238;
  },
  /*typed_data.Int32x4.zwwx*/get zwwx() {
    return 62;
  },
  /*typed_data.Int32x4.zwwy*/get zwwy() {
    return 126;
  },
  /*typed_data.Int32x4.zwwz*/get zwwz() {
    return 190;
  },
  /*typed_data.Int32x4.zwww*/get zwww() {
    return 254;
  },
  /*typed_data.Int32x4.wxxx*/get wxxx() {
    return 3;
  },
  /*typed_data.Int32x4.wxxy*/get wxxy() {
    return 67;
  },
  /*typed_data.Int32x4.wxxz*/get wxxz() {
    return 131;
  },
  /*typed_data.Int32x4.wxxw*/get wxxw() {
    return 195;
  },
  /*typed_data.Int32x4.wxyx*/get wxyx() {
    return 19;
  },
  /*typed_data.Int32x4.wxyy*/get wxyy() {
    return 83;
  },
  /*typed_data.Int32x4.wxyz*/get wxyz() {
    return 147;
  },
  /*typed_data.Int32x4.wxyw*/get wxyw() {
    return 211;
  },
  /*typed_data.Int32x4.wxzx*/get wxzx() {
    return 35;
  },
  /*typed_data.Int32x4.wxzy*/get wxzy() {
    return 99;
  },
  /*typed_data.Int32x4.wxzz*/get wxzz() {
    return 163;
  },
  /*typed_data.Int32x4.wxzw*/get wxzw() {
    return 227;
  },
  /*typed_data.Int32x4.wxwx*/get wxwx() {
    return 51;
  },
  /*typed_data.Int32x4.wxwy*/get wxwy() {
    return 115;
  },
  /*typed_data.Int32x4.wxwz*/get wxwz() {
    return 179;
  },
  /*typed_data.Int32x4.wxww*/get wxww() {
    return 243;
  },
  /*typed_data.Int32x4.wyxx*/get wyxx() {
    return 7;
  },
  /*typed_data.Int32x4.wyxy*/get wyxy() {
    return 71;
  },
  /*typed_data.Int32x4.wyxz*/get wyxz() {
    return 135;
  },
  /*typed_data.Int32x4.wyxw*/get wyxw() {
    return 199;
  },
  /*typed_data.Int32x4.wyyx*/get wyyx() {
    return 23;
  },
  /*typed_data.Int32x4.wyyy*/get wyyy() {
    return 87;
  },
  /*typed_data.Int32x4.wyyz*/get wyyz() {
    return 151;
  },
  /*typed_data.Int32x4.wyyw*/get wyyw() {
    return 215;
  },
  /*typed_data.Int32x4.wyzx*/get wyzx() {
    return 39;
  },
  /*typed_data.Int32x4.wyzy*/get wyzy() {
    return 103;
  },
  /*typed_data.Int32x4.wyzz*/get wyzz() {
    return 167;
  },
  /*typed_data.Int32x4.wyzw*/get wyzw() {
    return 231;
  },
  /*typed_data.Int32x4.wywx*/get wywx() {
    return 55;
  },
  /*typed_data.Int32x4.wywy*/get wywy() {
    return 119;
  },
  /*typed_data.Int32x4.wywz*/get wywz() {
    return 183;
  },
  /*typed_data.Int32x4.wyww*/get wyww() {
    return 247;
  },
  /*typed_data.Int32x4.wzxx*/get wzxx() {
    return 11;
  },
  /*typed_data.Int32x4.wzxy*/get wzxy() {
    return 75;
  },
  /*typed_data.Int32x4.wzxz*/get wzxz() {
    return 139;
  },
  /*typed_data.Int32x4.wzxw*/get wzxw() {
    return 203;
  },
  /*typed_data.Int32x4.wzyx*/get wzyx() {
    return 27;
  },
  /*typed_data.Int32x4.wzyy*/get wzyy() {
    return 91;
  },
  /*typed_data.Int32x4.wzyz*/get wzyz() {
    return 155;
  },
  /*typed_data.Int32x4.wzyw*/get wzyw() {
    return 219;
  },
  /*typed_data.Int32x4.wzzx*/get wzzx() {
    return 43;
  },
  /*typed_data.Int32x4.wzzy*/get wzzy() {
    return 107;
  },
  /*typed_data.Int32x4.wzzz*/get wzzz() {
    return 171;
  },
  /*typed_data.Int32x4.wzzw*/get wzzw() {
    return 235;
  },
  /*typed_data.Int32x4.wzwx*/get wzwx() {
    return 59;
  },
  /*typed_data.Int32x4.wzwy*/get wzwy() {
    return 123;
  },
  /*typed_data.Int32x4.wzwz*/get wzwz() {
    return 187;
  },
  /*typed_data.Int32x4.wzww*/get wzww() {
    return 251;
  },
  /*typed_data.Int32x4.wwxx*/get wwxx() {
    return 15;
  },
  /*typed_data.Int32x4.wwxy*/get wwxy() {
    return 79;
  },
  /*typed_data.Int32x4.wwxz*/get wwxz() {
    return 143;
  },
  /*typed_data.Int32x4.wwxw*/get wwxw() {
    return 207;
  },
  /*typed_data.Int32x4.wwyx*/get wwyx() {
    return 31;
  },
  /*typed_data.Int32x4.wwyy*/get wwyy() {
    return 95;
  },
  /*typed_data.Int32x4.wwyz*/get wwyz() {
    return 159;
  },
  /*typed_data.Int32x4.wwyw*/get wwyw() {
    return 223;
  },
  /*typed_data.Int32x4.wwzx*/get wwzx() {
    return 47;
  },
  /*typed_data.Int32x4.wwzy*/get wwzy() {
    return 111;
  },
  /*typed_data.Int32x4.wwzz*/get wwzz() {
    return 175;
  },
  /*typed_data.Int32x4.wwzw*/get wwzw() {
    return 239;
  },
  /*typed_data.Int32x4.wwwx*/get wwwx() {
    return 63;
  },
  /*typed_data.Int32x4.wwwy*/get wwwy() {
    return 127;
  },
  /*typed_data.Int32x4.wwwz*/get wwwz() {
    return 191;
  },
  /*typed_data.Int32x4.wwww*/get wwww() {
    return 255;
  }
}, false);
const Object_ListMixin$36$ = class Object_ListMixin extends core.Object {};
(Object_ListMixin$36$.new = function() {
}).prototype = Object_ListMixin$36$.prototype;
dart.applyMixin(Object_ListMixin$36$, collection.ListMixin$(typed_data.Int32x4));
const Object_FixedLengthListMixin$36$ = class Object_FixedLengthListMixin extends Object_ListMixin$36$ {};
(Object_FixedLengthListMixin$36$.new = function() {
}).prototype = Object_FixedLengthListMixin$36$.prototype;
dart.applyMixin(Object_FixedLengthListMixin$36$, _internal.FixedLengthListMixin$(typed_data.Int32x4));
_native_typed_data.NativeInt32x4List = class NativeInt32x4List extends Object_FixedLengthListMixin$36$ {
  get runtimeType() {
    return dart.wrapType(typed_data.Int32x4List);
  }
  static fromList(list) {
    if (list == null) dart.nullFailed(L57, 201, 52, "list");
    if (_native_typed_data.NativeInt32x4List.is(list)) {
      return new _native_typed_data.NativeInt32x4List._externalStorage(_native_typed_data.NativeInt32List.fromList(list[_storage$]));
    } else {
      return new _native_typed_data.NativeInt32x4List._slowFromList(list);
    }
  }
  get buffer() {
    return this[_storage$][$buffer];
  }
  get lengthInBytes() {
    return this[_storage$][$lengthInBytes];
  }
  get offsetInBytes() {
    return this[_storage$][$offsetInBytes];
  }
  get elementSizeInBytes() {
    return 16;
  }
  get length() {
    return (dart.notNull(this[_storage$][$length]) / 4)[$truncate]();
  }
  set length(value) {
    super.length = value;
  }
  _get(index) {
    if (index == null) dart.nullFailed(L57, 220, 27, "index");
    _native_typed_data._checkValidIndex(index, this, this.length);
    let _x = this[_storage$][$_get](dart.notNull(index) * 4 + 0);
    let _y = this[_storage$][$_get](dart.notNull(index) * 4 + 1);
    let _z = this[_storage$][$_get](dart.notNull(index) * 4 + 2);
    let _w = this[_storage$][$_get](dart.notNull(index) * 4 + 3);
    return new _native_typed_data.NativeInt32x4._truncated(_x, _y, _z, _w);
  }
  _set(index, value$) {
    let value = value$;
    if (index == null) dart.nullFailed(L57, 229, 25, "index");
    typed_data.Int32x4.as(value);
    if (value == null) dart.nullFailed(L57, 229, 40, "value");
    _native_typed_data._checkValidIndex(index, this, this.length);
    this[_storage$][$_set](dart.notNull(index) * 4 + 0, value.x);
    this[_storage$][$_set](dart.notNull(index) * 4 + 1, value.y);
    this[_storage$][$_set](dart.notNull(index) * 4 + 2, value.z);
    this[_storage$][$_set](dart.notNull(index) * 4 + 3, value.w);
    return value$;
  }
  sublist(start, end = null) {
    if (start == null) dart.nullFailed(L57, 237, 27, "start");
    let stop = _native_typed_data._checkValidRange(start, end, this.length);
    return new _native_typed_data.NativeInt32x4List._externalStorage(this[_storage$][$sublist](dart.notNull(start) * 4, dart.notNull(stop) * 4));
  }
};
(_native_typed_data.NativeInt32x4List.new = function(length) {
  if (length == null) dart.nullFailed(L57, 182, 25, "length");
  this[_storage$] = _native_typed_data.NativeInt32List.new(dart.notNull(length) * 4);
  ;
}).prototype = _native_typed_data.NativeInt32x4List.prototype;
(_native_typed_data.NativeInt32x4List._externalStorage = function(storage) {
  if (storage == null) dart.nullFailed(L57, 184, 48, "storage");
  this[_storage$] = storage;
  ;
}).prototype = _native_typed_data.NativeInt32x4List.prototype;
(_native_typed_data.NativeInt32x4List._slowFromList = function(list) {
  if (list == null) dart.nullFailed(L57, 186, 49, "list");
  this[_storage$] = _native_typed_data.NativeInt32List.new(dart.notNull(list[$length]) * 4);
  for (let i = 0; i < dart.notNull(list[$length]); i = i + 1) {
    let e = list[$_get](i);
    this[_storage$][$_set](i * 4 + 0, e.x);
    this[_storage$][$_set](i * 4 + 1, e.y);
    this[_storage$][$_set](i * 4 + 2, e.z);
    this[_storage$][$_set](i * 4 + 3, e.w);
  }
}).prototype = _native_typed_data.NativeInt32x4List.prototype;
dart.addTypeTests(_native_typed_data.NativeInt32x4List);
dart.addTypeCaches(_native_typed_data.NativeInt32x4List);
_native_typed_data.NativeInt32x4List[dart.implements] = () => [typed_data.Int32x4List];
dart.setMethodSignature(_native_typed_data.NativeInt32x4List, () => ({
  __proto__: dart.getMethods(_native_typed_data.NativeInt32x4List.__proto__),
  _get: dart.fnType(typed_data.Int32x4, [core.int]),
  [$_get]: dart.fnType(typed_data.Int32x4, [core.int]),
  _set: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
  [$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
  sublist: dart.fnType(typed_data.Int32x4List, [core.int], [dart.nullable(core.int)]),
  [$sublist]: dart.fnType(typed_data.Int32x4List, [core.int], [dart.nullable(core.int)])
}));
dart.setGetterSignature(_native_typed_data.NativeInt32x4List, () => ({
  __proto__: dart.getGetters(_native_typed_data.NativeInt32x4List.__proto__),
  buffer: typed_data.ByteBuffer,
  [$buffer]: typed_data.ByteBuffer,
  lengthInBytes: core.int,
  [$lengthInBytes]: core.int,
  offsetInBytes: core.int,
  [$offsetInBytes]: core.int,
  elementSizeInBytes: core.int,
  [$elementSizeInBytes]: core.int,
  length: core.int,
  [$length]: core.int
}));
dart.setLibraryUri(_native_typed_data.NativeInt32x4List, L58);
dart.setFieldSignature(_native_typed_data.NativeInt32x4List, () => ({
  __proto__: dart.getFields(_native_typed_data.NativeInt32x4List.__proto__),
  [_storage$]: dart.finalFieldType(typed_data.Int32List)
}));
dart.defineExtensionMethods(_native_typed_data.NativeInt32x4List, ['_get', '_set', 'sublist']);
dart.defineExtensionAccessors(_native_typed_data.NativeInt32x4List, [
  'runtimeType',
  'buffer',
  'lengthInBytes',
  'offsetInBytes',
  'elementSizeInBytes',
  'length'
]);
typed_data.Float64x2 = class Float64x2 extends core.Object {};
(typed_data.Float64x2[dart.mixinNew] = function() {
}).prototype = typed_data.Float64x2.prototype;
dart.addTypeTests(typed_data.Float64x2);
dart.addTypeCaches(typed_data.Float64x2);
dart.setLibraryUri(typed_data.Float64x2, L59);
const Object_ListMixin$36$0 = class Object_ListMixin extends core.Object {};
(Object_ListMixin$36$0.new = function() {
}).prototype = Object_ListMixin$36$0.prototype;
dart.applyMixin(Object_ListMixin$36$0, collection.ListMixin$(typed_data.Float64x2));
const Object_FixedLengthListMixin$36$0 = class Object_FixedLengthListMixin extends Object_ListMixin$36$0 {};
(Object_FixedLengthListMixin$36$0.new = function() {
}).prototype = Object_FixedLengthListMixin$36$0.prototype;
dart.applyMixin(Object_FixedLengthListMixin$36$0, _internal.FixedLengthListMixin$(typed_data.Float64x2));
_native_typed_data.NativeFloat64x2List = class NativeFloat64x2List extends Object_FixedLengthListMixin$36$0 {
  static fromList(list) {
    if (list == null) dart.nullFailed(L57, 269, 56, "list");
    if (_native_typed_data.NativeFloat64x2List.is(list)) {
      return new _native_typed_data.NativeFloat64x2List._externalStorage(_native_typed_data.NativeFloat64List.fromList(list[_storage$]));
    } else {
      return new _native_typed_data.NativeFloat64x2List._slowFromList(list);
    }
  }
  get runtimeType() {
    return dart.wrapType(typed_data.Float64x2List);
  }
  get buffer() {
    return this[_storage$][$buffer];
  }
  get lengthInBytes() {
    return this[_storage$][$lengthInBytes];
  }
  get offsetInBytes() {
    return this[_storage$][$offsetInBytes];
  }
  get elementSizeInBytes() {
    return 16;
  }
  get length() {
    return (dart.notNull(this[_storage$][$length]) / 2)[$truncate]();
  }
  set length(value) {
    super.length = value;
  }
  _get(index) {
    if (index == null) dart.nullFailed(L57, 290, 29, "index");
    _native_typed_data._checkValidIndex(index, this, this.length);
    let _x = this[_storage$][$_get](dart.notNull(index) * 2 + 0);
    let _y = this[_storage$][$_get](dart.notNull(index) * 2 + 1);
    return new _native_typed_data.NativeFloat64x2.new(_x, _y);
  }
  _set(index, value$) {
    let value = value$;
    if (index == null) dart.nullFailed(L57, 297, 25, "index");
    typed_data.Float64x2.as(value);
    if (value == null) dart.nullFailed(L57, 297, 42, "value");
    _native_typed_data._checkValidIndex(index, this, this.length);
    this[_storage$][$_set](dart.notNull(index) * 2 + 0, value.x);
    this[_storage$][$_set](dart.notNull(index) * 2 + 1, value.y);
    return value$;
  }
  sublist(start, end = null) {
    if (start == null) dart.nullFailed(L57, 303, 29, "start");
    let stop = _native_typed_data._checkValidRange(start, end, this.length);
    return new _native_typed_data.NativeFloat64x2List._externalStorage(this[_storage$][$sublist](dart.notNull(start) * 2, dart.notNull(stop) * 2));
  }
};
(_native_typed_data.NativeFloat64x2List.new = function(length) {
  if (length == null) dart.nullFailed(L57, 254, 27, "length");
  this[_storage$] = _native_typed_data.NativeFloat64List.new(dart.notNull(length) * 2);
  ;
}).prototype = _native_typed_data.NativeFloat64x2List.prototype;
(_native_typed_data.NativeFloat64x2List._externalStorage = function(_storage) {
  if (_storage == null) dart.nullFailed(L57, 256, 45, "_storage");
  this[_storage$] = _storage;
  ;
}).prototype = _native_typed_data.NativeFloat64x2List.prototype;
(_native_typed_data.NativeFloat64x2List._slowFromList = function(list) {
  if (list == null) dart.nullFailed(L57, 258, 53, "list");
  this[_storage$] = _native_typed_data.NativeFloat64List.new(dart.notNull(list[$length]) * 2);
  for (let i = 0; i < dart.notNull(list[$length]); i = i + 1) {
    let e = list[$_get](i);
    this[_storage$][$_set](i * 2 + 0, e.x);
    this[_storage$][$_set](i * 2 + 1, e.y);
  }
}).prototype = _native_typed_data.NativeFloat64x2List.prototype;
dart.addTypeTests(_native_typed_data.NativeFloat64x2List);
dart.addTypeCaches(_native_typed_data.NativeFloat64x2List);
_native_typed_data.NativeFloat64x2List[dart.implements] = () => [typed_data.Float64x2List];
dart.setMethodSignature(_native_typed_data.NativeFloat64x2List, () => ({
  __proto__: dart.getMethods(_native_typed_data.NativeFloat64x2List.__proto__),
  _get: dart.fnType(typed_data.Float64x2, [core.int]),
  [$_get]: dart.fnType(typed_data.Float64x2, [core.int]),
  _set: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
  [$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
  sublist: dart.fnType(typed_data.Float64x2List, [core.int], [dart.nullable(core.int)]),
  [$sublist]: dart.fnType(typed_data.Float64x2List, [core.int], [dart.nullable(core.int)])
}));
dart.setGetterSignature(_native_typed_data.NativeFloat64x2List, () => ({
  __proto__: dart.getGetters(_native_typed_data.NativeFloat64x2List.__proto__),
  buffer: typed_data.ByteBuffer,
  [$buffer]: typed_data.ByteBuffer,
  lengthInBytes: core.int,
  [$lengthInBytes]: core.int,
  offsetInBytes: core.int,
  [$offsetInBytes]: core.int,
  elementSizeInBytes: core.int,
  [$elementSizeInBytes]: core.int,
  length: core.int,
  [$length]: core.int
}));
dart.setLibraryUri(_native_typed_data.NativeFloat64x2List, L58);
dart.setFieldSignature(_native_typed_data.NativeFloat64x2List, () => ({
  __proto__: dart.getFields(_native_typed_data.NativeFloat64x2List.__proto__),
  [_storage$]: dart.finalFieldType(typed_data.Float64List)
}));
dart.defineExtensionMethods(_native_typed_data.NativeFloat64x2List, ['_get', '_set', 'sublist']);
dart.defineExtensionAccessors(_native_typed_data.NativeFloat64x2List, [
  'runtimeType',
  'buffer',
  'lengthInBytes',
  'offsetInBytes',
  'elementSizeInBytes',
  'length'
]);
var _invalidPosition = dart.privateName(_native_typed_data, "_invalidPosition");
var _checkPosition = dart.privateName(_native_typed_data, "_checkPosition");
_native_typed_data.NativeTypedData = class NativeTypedData extends core.Object {
  get [$buffer]() {
    return this.buffer;
  }
  get [$lengthInBytes]() {
    return this.byteLength;
  }
  get [$offsetInBytes]() {
    return this.byteOffset;
  }
  get [$elementSizeInBytes]() {
    return this.BYTES_PER_ELEMENT;
  }
  [_invalidPosition](position, length, name) {
    if (position == null) dart.nullFailed(L57, 330, 29, "position");
    if (length == null) dart.nullFailed(L57, 330, 43, "length");
    if (name == null) dart.nullFailed(L57, 330, 58, "name");
    if (!core.int.is(position)) {
      dart.throw(new core.ArgumentError.value(position, name, "Invalid list position"));
    } else {
      dart.throw(new core.RangeError.range(position, 0, length, name));
    }
  }
  [_checkPosition](position, length, name) {
    if (position == null) dart.nullFailed(L57, 338, 27, "position");
    if (length == null) dart.nullFailed(L57, 338, 41, "length");
    if (name == null) dart.nullFailed(L57, 338, 56, "name");
    if (position >>> 0 !== position || position > dart.notNull(length)) {
      this[_invalidPosition](position, length, name);
    }
  }
};
(_native_typed_data.NativeTypedData.new = function() {
  ;
}).prototype = _native_typed_data.NativeTypedData.prototype;
dart.addTypeTests(_native_typed_data.NativeTypedData);
dart.addTypeCaches(_native_typed_data.NativeTypedData);
_native_typed_data.NativeTypedData[dart.implements] = () => [typed_data.TypedData];
dart.setMethodSignature(_native_typed_data.NativeTypedData, () => ({
  __proto__: dart.getMethods(_native_typed_data.NativeTypedData.__proto__),
  [_invalidPosition]: dart.fnType(dart.void, [core.int, core.int, core.String]),
  [_checkPosition]: dart.fnType(dart.void, [core.int, core.int, core.String])
}));
dart.setGetterSignature(_native_typed_data.NativeTypedData, () => ({
  __proto__: dart.getGetters(_native_typed_data.NativeTypedData.__proto__),
  [$buffer]: typed_data.ByteBuffer,
  [$lengthInBytes]: core.int,
  [$offsetInBytes]: core.int,
  [$elementSizeInBytes]: core.int
}));
dart.setLibraryUri(_native_typed_data.NativeTypedData, L58);
dart.registerExtension("ArrayBufferView", _native_typed_data.NativeTypedData);
var Endian__littleEndian = dart.privateName(typed_data, "Endian._littleEndian");
var C34;
var _getFloat32 = dart.privateName(_native_typed_data, "_getFloat32");
var _getFloat64 = dart.privateName(_native_typed_data, "_getFloat64");
var _getInt16 = dart.privateName(_native_typed_data, "_getInt16");
var _getInt32 = dart.privateName(_native_typed_data, "_getInt32");
var _getUint16 = dart.privateName(_native_typed_data, "_getUint16");
var _getUint32 = dart.privateName(_native_typed_data, "_getUint32");
var _setFloat32 = dart.privateName(_native_typed_data, "_setFloat32");
var _setFloat64 = dart.privateName(_native_typed_data, "_setFloat64");
var _setInt16 = dart.privateName(_native_typed_data, "_setInt16");
var _setInt32 = dart.privateName(_native_typed_data, "_setInt32");
var _setUint16 = dart.privateName(_native_typed_data, "_setUint16");
var _setUint32 = dart.privateName(_native_typed_data, "_setUint32");
_native_typed_data.NativeByteData = class NativeByteData extends _native_typed_data.NativeTypedData {
  static new(length) {
    if (length == null) dart.nullFailed(L57, 386, 30, "length");
    return _native_typed_data.NativeByteData._create1(_native_typed_data._checkLength(length));
  }
  static view(buffer, offsetInBytes, length) {
    if (buffer == null) dart.nullFailed(L57, 399, 18, "buffer");
    if (offsetInBytes == null) dart.nullFailed(L57, 399, 30, "offsetInBytes");
    _native_typed_data._checkViewArguments(buffer, offsetInBytes, length);
    return length == null ? _native_typed_data.NativeByteData._create2(buffer, offsetInBytes) : _native_typed_data.NativeByteData._create3(buffer, offsetInBytes, length);
  }
  get [$runtimeType]() {
    return dart.wrapType(typed_data.ByteData);
  }
  get [$elementSizeInBytes]() {
    return 1;
  }
  [$getFloat32](byteOffset, endian = C34 || CT.C34) {
    if (byteOffset == null) dart.nullFailed(L57, 416, 25, "byteOffset");
    if (endian == null) dart.nullFailed(L57, 416, 45, "endian");
    return this[_getFloat32](byteOffset, dart.equals(typed_data.Endian.little, endian));
  }
  [_getFloat32](...args) {
    return this.getFloat32.apply(this, args);
  }
  [$getFloat64](byteOffset, endian = C34 || CT.C34) {
    if (byteOffset == null) dart.nullFailed(L57, 429, 25, "byteOffset");
    if (endian == null) dart.nullFailed(L57, 429, 45, "endian");
    return this[_getFloat64](byteOffset, dart.equals(typed_data.Endian.little, endian));
  }
  [_getFloat64](...args) {
    return this.getFloat64.apply(this, args);
  }
  [$getInt16](byteOffset, endian = C34 || CT.C34) {
    if (byteOffset == null) dart.nullFailed(L57, 444, 20, "byteOffset");
    if (endian == null) dart.nullFailed(L57, 444, 40, "endian");
    return this[_getInt16](byteOffset, dart.equals(typed_data.Endian.little, endian));
  }
  [_getInt16](...args) {
    return this.getInt16.apply(this, args);
  }
  [$getInt32](byteOffset, endian = C34 || CT.C34) {
    if (byteOffset == null) dart.nullFailed(L57, 459, 20, "byteOffset");
    if (endian == null) dart.nullFailed(L57, 459, 40, "endian");
    return this[_getInt32](byteOffset, dart.equals(typed_data.Endian.little, endian));
  }
  [_getInt32](...args) {
    return this.getInt32.apply(this, args);
  }
  [$getInt64](byteOffset, endian = C34 || CT.C34) {
    if (byteOffset == null) dart.nullFailed(L57, 474, 20, "byteOffset");
    if (endian == null) dart.nullFailed(L57, 474, 40, "endian");
    dart.throw(new core.UnsupportedError.new("Int64 accessor not supported by dart2js."));
  }
  [$getInt8](...args) {
    return this.getInt8.apply(this, args);
  }
  [$getUint16](byteOffset, endian = C34 || CT.C34) {
    if (byteOffset == null) dart.nullFailed(L57, 493, 21, "byteOffset");
    if (endian == null) dart.nullFailed(L57, 493, 41, "endian");
    return this[_getUint16](byteOffset, dart.equals(typed_data.Endian.little, endian));
  }
  [_getUint16](...args) {
    return this.getUint16.apply(this, args);
  }
  [$getUint32](byteOffset, endian = C34 || CT.C34) {
    if (byteOffset == null) dart.nullFailed(L57, 507, 21, "byteOffset");
    if (endian == null) dart.nullFailed(L57, 507, 41, "endian");
    return this[_getUint32](byteOffset, dart.equals(typed_data.Endian.little, endian));
  }
  [_getUint32](...args) {
    return this.getUint32.apply(this, args);
  }
  [$getUint64](byteOffset, endian = C34 || CT.C34) {
    if (byteOffset == null) dart.nullFailed(L57, 521, 21, "byteOffset");
    if (endian == null) dart.nullFailed(L57, 521, 41, "endian");
    dart.throw(new core.UnsupportedError.new("Uint64 accessor not supported by dart2js."));
  }
  [$getUint8](...args) {
    return this.getUint8.apply(this, args);
  }
  [$setFloat32](byteOffset, value, endian = C34 || CT.C34) {
    if (byteOffset == null) dart.nullFailed(L57, 548, 23, "byteOffset");
    if (value == null) dart.nullFailed(L57, 548, 39, "value");
    if (endian == null) dart.nullFailed(L57, 548, 54, "endian");
    return this[_setFloat32](byteOffset, value, dart.equals(typed_data.Endian.little, endian));
  }
  [_setFloat32](...args) {
    return this.setFloat32.apply(this, args);
  }
  [$setFloat64](byteOffset, value, endian = C34 || CT.C34) {
    if (byteOffset == null) dart.nullFailed(L57, 560, 23, "byteOffset");
    if (value == null) dart.nullFailed(L57, 560, 39, "value");
    if (endian == null) dart.nullFailed(L57, 560, 54, "endian");
    return this[_setFloat64](byteOffset, value, dart.equals(typed_data.Endian.little, endian));
  }
  [_setFloat64](...args) {
    return this.setFloat64.apply(this, args);
  }
  [$setInt16](byteOffset, value, endian = C34 || CT.C34) {
    if (byteOffset == null) dart.nullFailed(L57, 573, 21, "byteOffset");
    if (value == null) dart.nullFailed(L57, 573, 37, "value");
    if (endian == null) dart.nullFailed(L57, 573, 52, "endian");
    return this[_setInt16](byteOffset, value, dart.equals(typed_data.Endian.little, endian));
  }
  [_setInt16](...args) {
    return this.setInt16.apply(this, args);
  }
  [$setInt32](byteOffset, value, endian = C34 || CT.C34) {
    if (byteOffset == null) dart.nullFailed(L57, 586, 21, "byteOffset");
    if (value == null) dart.nullFailed(L57, 586, 37, "value");
    if (endian == null) dart.nullFailed(L57, 586, 52, "endian");
    return this[_setInt32](byteOffset, value, dart.equals(typed_data.Endian.little, endian));
  }
  [_setInt32](...args) {
    return this.setInt32.apply(this, args);
  }
  [$setInt64](byteOffset, value, endian = C34 || CT.C34) {
    if (byteOffset == null) dart.nullFailed(L57, 599, 21, "byteOffset");
    if (value == null) dart.nullFailed(L57, 599, 37, "value");
    if (endian == null) dart.nullFailed(L57, 599, 52, "endian");
    dart.throw(new core.UnsupportedError.new("Int64 accessor not supported by dart2js."));
  }
  [$setInt8](...args) {
    return this.setInt8.apply(this, args);
  }
  [$setUint16](byteOffset, value, endian = C34 || CT.C34) {
    if (byteOffset == null) dart.nullFailed(L57, 619, 22, "byteOffset");
    if (value == null) dart.nullFailed(L57, 619, 38, "value");
    if (endian == null) dart.nullFailed(L57, 619, 53, "endian");
    return this[_setUint16](byteOffset, value, dart.equals(typed_data.Endian.little, endian));
  }
  [_setUint16](...args) {
    return this.setUint16.apply(this, args);
  }
  [$setUint32](byteOffset, value, endian = C34 || CT.C34) {
    if (byteOffset == null) dart.nullFailed(L57, 632, 22, "byteOffset");
    if (value == null) dart.nullFailed(L57, 632, 38, "value");
    if (endian == null) dart.nullFailed(L57, 632, 53, "endian");
    return this[_setUint32](byteOffset, value, dart.equals(typed_data.Endian.little, endian));
  }
  [_setUint32](...args) {
    return this.setUint32.apply(this, args);
  }
  [$setUint64](byteOffset, value, endian = C34 || CT.C34) {
    if (byteOffset == null) dart.nullFailed(L57, 645, 22, "byteOffset");
    if (value == null) dart.nullFailed(L57, 645, 38, "value");
    if (endian == null) dart.nullFailed(L57, 645, 53, "endian");
    dart.throw(new core.UnsupportedError.new("Uint64 accessor not supported by dart2js."));
  }
  [$setUint8](...args) {
    return this.setUint8.apply(this, args);
  }
  static _create1(arg) {
    return new DataView(new ArrayBuffer(arg));
  }
  static _create2(arg1, arg2) {
    return new DataView(arg1, arg2);
  }
  static _create3(arg1, arg2, arg3) {
    return new DataView(arg1, arg2, arg3);
  }
};
dart.addTypeTests(_native_typed_data.NativeByteData);
dart.addTypeCaches(_native_typed_data.NativeByteData);
_native_typed_data.NativeByteData[dart.implements] = () => [typed_data.ByteData];
dart.setMethodSignature(_native_typed_data.NativeByteData, () => ({
  __proto__: dart.getMethods(_native_typed_data.NativeByteData.__proto__),
  [$getFloat32]: dart.fnType(core.double, [core.int], [typed_data.Endian]),
  [_getFloat32]: dart.fnType(core.double, [core.int], [dart.nullable(core.bool)]),
  [$getFloat64]: dart.fnType(core.double, [core.int], [typed_data.Endian]),
  [_getFloat64]: dart.fnType(core.double, [core.int], [dart.nullable(core.bool)]),
  [$getInt16]: dart.fnType(core.int, [core.int], [typed_data.Endian]),
  [_getInt16]: dart.fnType(core.int, [core.int], [dart.nullable(core.bool)]),
  [$getInt32]: dart.fnType(core.int, [core.int], [typed_data.Endian]),
  [_getInt32]: dart.fnType(core.int, [core.int], [dart.nullable(core.bool)]),
  [$getInt64]: dart.fnType(core.int, [core.int], [typed_data.Endian]),
  [$getInt8]: dart.fnType(core.int, [core.int]),
  [$getUint16]: dart.fnType(core.int, [core.int], [typed_data.Endian]),
  [_getUint16]: dart.fnType(core.int, [core.int], [dart.nullable(core.bool)]),
  [$getUint32]: dart.fnType(core.int, [core.int], [typed_data.Endian]),
  [_getUint32]: dart.fnType(core.int, [core.int], [dart.nullable(core.bool)]),
  [$getUint64]: dart.fnType(core.int, [core.int], [typed_data.Endian]),
  [$getUint8]: dart.fnType(core.int, [core.int]),
  [$setFloat32]: dart.fnType(dart.void, [core.int, core.num], [typed_data.Endian]),
  [_setFloat32]: dart.fnType(dart.void, [core.int, core.num], [dart.nullable(core.bool)]),
  [$setFloat64]: dart.fnType(dart.void, [core.int, core.num], [typed_data.Endian]),
  [_setFloat64]: dart.fnType(dart.void, [core.int, core.num], [dart.nullable(core.bool)]),
  [$setInt16]: dart.fnType(dart.void, [core.int, core.int], [typed_data.Endian]),
  [_setInt16]: dart.fnType(dart.void, [core.int, core.int], [dart.nullable(core.bool)]),
  [$setInt32]: dart.fnType(dart.void, [core.int, core.int], [typed_data.Endian]),
  [_setInt32]: dart.fnType(dart.void, [core.int, core.int], [dart.nullable(core.bool)]),
  [$setInt64]: dart.fnType(dart.void, [core.int, core.int], [typed_data.Endian]),
  [$setInt8]: dart.fnType(dart.void, [core.int, core.int]),
  [$setUint16]: dart.fnType(dart.void, [core.int, core.int], [typed_data.Endian]),
  [_setUint16]: dart.fnType(dart.void, [core.int, core.int], [dart.nullable(core.bool)]),
  [$setUint32]: dart.fnType(dart.void, [core.int, core.int], [typed_data.Endian]),
  [_setUint32]: dart.fnType(dart.void, [core.int, core.int], [dart.nullable(core.bool)]),
  [$setUint64]: dart.fnType(dart.void, [core.int, core.int], [typed_data.Endian]),
  [$setUint8]: dart.fnType(dart.void, [core.int, core.int])
}));
dart.setLibraryUri(_native_typed_data.NativeByteData, L58);
dart.registerExtension("DataView", _native_typed_data.NativeByteData);
var _setRangeFast = dart.privateName(_native_typed_data, "_setRangeFast");
_native_typed_data.NativeTypedArray = class NativeTypedArray extends _native_typed_data.NativeTypedData {
  [_setRangeFast](start, end, source, skipCount) {
    if (start == null) dart.nullFailed(L57, 673, 11, "start");
    if (end == null) dart.nullFailed(L57, 673, 22, "end");
    if (source == null) dart.nullFailed(L57, 673, 44, "source");
    if (skipCount == null) dart.nullFailed(L57, 673, 56, "skipCount");
    let targetLength = this[$length];
    this[_checkPosition](start, targetLength, "start");
    this[_checkPosition](end, targetLength, "end");
    if (dart.notNull(start) > dart.notNull(end)) dart.throw(new core.RangeError.range(start, 0, end));
    let count = dart.notNull(end) - dart.notNull(start);
    if (dart.notNull(skipCount) < 0) dart.throw(new core.ArgumentError.new(skipCount));
    let sourceLength = source[$length];
    if (dart.notNull(sourceLength) - dart.notNull(skipCount) < count) {
      dart.throw(new core.StateError.new("Not enough elements"));
    }
    if (skipCount !== 0 || sourceLength !== count) {
      source = source.subarray(skipCount, dart.notNull(skipCount) + count);
    }
    this.set(source, start);
  }
};
(_native_typed_data.NativeTypedArray.new = function() {
  ;
}).prototype = _native_typed_data.NativeTypedArray.prototype;
dart.addTypeTests(_native_typed_data.NativeTypedArray);
dart.addTypeCaches(_native_typed_data.NativeTypedArray);
_native_typed_data.NativeTypedArray[dart.implements] = () => [_js_helper.JavaScriptIndexingBehavior];
dart.setMethodSignature(_native_typed_data.NativeTypedArray, () => ({
  __proto__: dart.getMethods(_native_typed_data.NativeTypedArray.__proto__),
  [_setRangeFast]: dart.fnType(dart.void, [core.int, core.int, _native_typed_data.NativeTypedArray, core.int])
}));
dart.setLibraryUri(_native_typed_data.NativeTypedArray, L58);
core.double = class double extends core.num {
  static is(o) {
    return typeof o == "number";
  }
  static as(o) {
    if (typeof o == "number") return o;
    return dart.as(o, core.double);
  }
  static parse(source, onError = null) {
    if (source == null) dart.nullFailed(L7, 211, 30, "source");
    let value = core.double.tryParse(source);
    if (value != null) return value;
    if (onError != null) return onError(source);
    dart.throw(new core.FormatException.new("Invalid double", source));
  }
  static tryParse(source) {
    if (source == null) dart.nullFailed(L7, 220, 34, "source");
    return _js_helper.Primitives.parseDouble(source);
  }
};
(core.double.new = function() {
  ;
}).prototype = core.double.prototype;
dart.addTypeCaches(core.double);
dart.setLibraryUri(core.double, L8$);
dart.defineLazy(core.double, {
  /*core.double.nan*/get nan() {
    return 0 / 0;
  },
  /*core.double.infinity*/get infinity() {
    return 1 / 0;
  },
  /*core.double.negativeInfinity*/get negativeInfinity() {
    return -1 / 0;
  },
  /*core.double.minPositive*/get minPositive() {
    return 5e-324;
  },
  /*core.double.maxFinite*/get maxFinite() {
    return 1.7976931348623157e+308;
  }
}, false);
const NativeTypedArray_ListMixin$36 = class NativeTypedArray_ListMixin extends _native_typed_data.NativeTypedArray {};
(NativeTypedArray_ListMixin$36.new = function() {
}).prototype = NativeTypedArray_ListMixin$36.prototype;
dart.applyMixin(NativeTypedArray_ListMixin$36, collection.ListMixin$(core.double));
const NativeTypedArray_FixedLengthListMixin$36 = class NativeTypedArray_FixedLengthListMixin extends NativeTypedArray_ListMixin$36 {};
(NativeTypedArray_FixedLengthListMixin$36.new = function() {
}).prototype = NativeTypedArray_FixedLengthListMixin$36.prototype;
dart.applyMixin(NativeTypedArray_FixedLengthListMixin$36, _internal.FixedLengthListMixin$(core.double));
_native_typed_data.NativeTypedArrayOfDouble = class NativeTypedArrayOfDouble extends NativeTypedArray_FixedLengthListMixin$36 {
  get length() {
    return this.length;
  }
  set length(value) {
    super.length = value;
  }
  _get(index) {
    if (index == null) dart.nullFailed(L57, 699, 26, "index");
    _native_typed_data._checkValidIndex(index, this, this[$length]);
    return this[index];
  }
  _set(index, value$) {
    let value = value$;
    if (index == null) dart.nullFailed(L57, 704, 25, "index");
    core.num.as(value);
    if (value == null) dart.nullFailed(L57, 704, 36, "value");
    _native_typed_data._checkValidIndex(index, this, this[$length]);
    this[index] = value;
    return value$;
  }
  setRange(start, end, iterable, skipCount = 0) {
    if (start == null) dart.nullFailed(L57, 709, 21, "start");
    if (end == null) dart.nullFailed(L57, 709, 32, "end");
    IterableOfdouble().as(iterable);
    if (iterable == null) dart.nullFailed(L57, 709, 54, "iterable");
    if (skipCount == null) dart.nullFailed(L57, 710, 12, "skipCount");
    if (_native_typed_data.NativeTypedArrayOfDouble.is(iterable)) {
      this[_setRangeFast](start, end, iterable, skipCount);
      return;
    }
    super[$setRange](start, end, iterable, skipCount);
  }
};
(_native_typed_data.NativeTypedArrayOfDouble.new = function() {
  ;
}).prototype = _native_typed_data.NativeTypedArrayOfDouble.prototype;
dart.addTypeTests(_native_typed_data.NativeTypedArrayOfDouble);
dart.addTypeCaches(_native_typed_data.NativeTypedArrayOfDouble);
dart.setMethodSignature(_native_typed_data.NativeTypedArrayOfDouble, () => ({
  __proto__: dart.getMethods(_native_typed_data.NativeTypedArrayOfDouble.__proto__),
  _get: dart.fnType(core.double, [core.int]),
  [$_get]: dart.fnType(core.double, [core.int]),
  _set: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
  [$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)])
}));
dart.setGetterSignature(_native_typed_data.NativeTypedArrayOfDouble, () => ({
  __proto__: dart.getGetters(_native_typed_data.NativeTypedArrayOfDouble.__proto__),
  length: core.int,
  [$length]: core.int
}));
dart.setLibraryUri(_native_typed_data.NativeTypedArrayOfDouble, L58);
dart.defineExtensionMethods(_native_typed_data.NativeTypedArrayOfDouble, ['_get', '_set', 'setRange']);
dart.defineExtensionAccessors(_native_typed_data.NativeTypedArrayOfDouble, ['length']);
const NativeTypedArray_ListMixin$36$ = class NativeTypedArray_ListMixin extends _native_typed_data.NativeTypedArray {};
(NativeTypedArray_ListMixin$36$.new = function() {
}).prototype = NativeTypedArray_ListMixin$36$.prototype;
dart.applyMixin(NativeTypedArray_ListMixin$36$, collection.ListMixin$(core.int));
const NativeTypedArray_FixedLengthListMixin$36$ = class NativeTypedArray_FixedLengthListMixin extends NativeTypedArray_ListMixin$36$ {};
(NativeTypedArray_FixedLengthListMixin$36$.new = function() {
}).prototype = NativeTypedArray_FixedLengthListMixin$36$.prototype;
dart.applyMixin(NativeTypedArray_FixedLengthListMixin$36$, _internal.FixedLengthListMixin$(core.int));
_native_typed_data.NativeTypedArrayOfInt = class NativeTypedArrayOfInt extends NativeTypedArray_FixedLengthListMixin$36$ {
  get length() {
    return this.length;
  }
  set length(value) {
    super.length = value;
  }
  _set(index, value$) {
    let value = value$;
    if (index == null) dart.nullFailed(L57, 727, 25, "index");
    core.int.as(value);
    if (value == null) dart.nullFailed(L57, 727, 36, "value");
    _native_typed_data._checkValidIndex(index, this, this[$length]);
    this[index] = value;
    return value$;
  }
  setRange(start, end, iterable, skipCount = 0) {
    if (start == null) dart.nullFailed(L57, 732, 21, "start");
    if (end == null) dart.nullFailed(L57, 732, 32, "end");
    IterableOfint().as(iterable);
    if (iterable == null) dart.nullFailed(L57, 732, 51, "iterable");
    if (skipCount == null) dart.nullFailed(L57, 733, 12, "skipCount");
    if (_native_typed_data.NativeTypedArrayOfInt.is(iterable)) {
      this[_setRangeFast](start, end, iterable, skipCount);
      return;
    }
    super[$setRange](start, end, iterable, skipCount);
  }
};
(_native_typed_data.NativeTypedArrayOfInt.new = function() {
  ;
}).prototype = _native_typed_data.NativeTypedArrayOfInt.prototype;
_native_typed_data.NativeTypedArrayOfInt.prototype[dart.isList] = true;
dart.addTypeTests(_native_typed_data.NativeTypedArrayOfInt);
dart.addTypeCaches(_native_typed_data.NativeTypedArrayOfInt);
_native_typed_data.NativeTypedArrayOfInt[dart.implements] = () => [core.List$(core.int)];
dart.setMethodSignature(_native_typed_data.NativeTypedArrayOfInt, () => ({
  __proto__: dart.getMethods(_native_typed_data.NativeTypedArrayOfInt.__proto__),
  _set: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
  [$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)])
}));
dart.setGetterSignature(_native_typed_data.NativeTypedArrayOfInt, () => ({
  __proto__: dart.getGetters(_native_typed_data.NativeTypedArrayOfInt.__proto__),
  length: core.int,
  [$length]: core.int
}));
dart.setLibraryUri(_native_typed_data.NativeTypedArrayOfInt, L58);
dart.defineExtensionMethods(_native_typed_data.NativeTypedArrayOfInt, ['_set', 'setRange']);
dart.defineExtensionAccessors(_native_typed_data.NativeTypedArrayOfInt, ['length']);
_native_typed_data.NativeFloat32List = class NativeFloat32List extends _native_typed_data.NativeTypedArrayOfDouble {
  static new(length) {
    if (length == null) dart.nullFailed(L57, 745, 33, "length");
    return _native_typed_data.NativeFloat32List._create1(_native_typed_data._checkLength(length));
  }
  static fromList(elements) {
    if (elements == null) dart.nullFailed(L57, 747, 51, "elements");
    return _native_typed_data.NativeFloat32List._create1(_native_typed_data._ensureNativeList(elements));
  }
  static view(buffer, offsetInBytes, length) {
    if (buffer == null) dart.nullFailed(L57, 751, 18, "buffer");
    if (offsetInBytes == null) dart.nullFailed(L57, 751, 30, "offsetInBytes");
    _native_typed_data._checkViewArguments(buffer, offsetInBytes, length);
    return length == null ? _native_typed_data.NativeFloat32List._create2(buffer, offsetInBytes) : _native_typed_data.NativeFloat32List._create3(buffer, offsetInBytes, length);
  }
  get [$runtimeType]() {
    return dart.wrapType(typed_data.Float32List);
  }
  [$sublist](start, end = null) {
    if (start == null) dart.nullFailed(L57, 760, 27, "start");
    let stop = _native_typed_data._checkValidRange(start, end, this[$length]);
    let source = this.subarray(start, stop);
    return _native_typed_data.NativeFloat32List._create1(source);
  }
  static _create1(arg) {
    return new Float32Array(arg);
  }
  static _create2(arg1, arg2) {
    return new Float32Array(arg1, arg2);
  }
  static _create3(arg1, arg2, arg3) {
    return new Float32Array(arg1, arg2, arg3);
  }
};
dart.addTypeTests(_native_typed_data.NativeFloat32List);
dart.addTypeCaches(_native_typed_data.NativeFloat32List);
_native_typed_data.NativeFloat32List[dart.implements] = () => [typed_data.Float32List];
dart.setMethodSignature(_native_typed_data.NativeFloat32List, () => ({
  __proto__: dart.getMethods(_native_typed_data.NativeFloat32List.__proto__),
  [$sublist]: dart.fnType(typed_data.Float32List, [core.int], [dart.nullable(core.int)])
}));
dart.setLibraryUri(_native_typed_data.NativeFloat32List, L58);
dart.registerExtension("Float32Array", _native_typed_data.NativeFloat32List);
_native_typed_data.NativeFloat64List = class NativeFloat64List extends _native_typed_data.NativeTypedArrayOfDouble {
  static new(length) {
    if (length == null) dart.nullFailed(L57, 780, 33, "length");
    return _native_typed_data.NativeFloat64List._create1(_native_typed_data._checkLength(length));
  }
  static fromList(elements) {
    if (elements == null) dart.nullFailed(L57, 782, 51, "elements");
    return _native_typed_data.NativeFloat64List._create1(_native_typed_data._ensureNativeList(elements));
  }
  static view(buffer, offsetInBytes, length) {
    if (buffer == null) dart.nullFailed(L57, 786, 18, "buffer");
    if (offsetInBytes == null) dart.nullFailed(L57, 786, 30, "offsetInBytes");
    _native_typed_data._checkViewArguments(buffer, offsetInBytes, length);
    return length == null ? _native_typed_data.NativeFloat64List._create2(buffer, offsetInBytes) : _native_typed_data.NativeFloat64List._create3(buffer, offsetInBytes, length);
  }
  get [$runtimeType]() {
    return dart.wrapType(typed_data.Float64List);
  }
  [$sublist](start, end = null) {
    if (start == null) dart.nullFailed(L57, 795, 27, "start");
    let stop = _native_typed_data._checkValidRange(start, end, this[$length]);
    let source = this.subarray(start, stop);
    return _native_typed_data.NativeFloat64List._create1(source);
  }
  static _create1(arg) {
    return new Float64Array(arg);
  }
  static _create2(arg1, arg2) {
    return new Float64Array(arg1, arg2);
  }
  static _create3(arg1, arg2, arg3) {
    return new Float64Array(arg1, arg2, arg3);
  }
};
dart.addTypeTests(_native_typed_data.NativeFloat64List);
dart.addTypeCaches(_native_typed_data.NativeFloat64List);
_native_typed_data.NativeFloat64List[dart.implements] = () => [typed_data.Float64List];
dart.setMethodSignature(_native_typed_data.NativeFloat64List, () => ({
  __proto__: dart.getMethods(_native_typed_data.NativeFloat64List.__proto__),
  [$sublist]: dart.fnType(typed_data.Float64List, [core.int], [dart.nullable(core.int)])
}));
dart.setLibraryUri(_native_typed_data.NativeFloat64List, L58);
dart.registerExtension("Float64Array", _native_typed_data.NativeFloat64List);
_native_typed_data.NativeInt16List = class NativeInt16List extends _native_typed_data.NativeTypedArrayOfInt {
  static new(length) {
    if (length == null) dart.nullFailed(L57, 813, 31, "length");
    return _native_typed_data.NativeInt16List._create1(_native_typed_data._checkLength(length));
  }
  static fromList(elements) {
    if (elements == null) dart.nullFailed(L57, 815, 46, "elements");
    return _native_typed_data.NativeInt16List._create1(_native_typed_data._ensureNativeList(elements));
  }
  static view(buffer, offsetInBytes, length) {
    if (buffer == null) dart.nullFailed(L57, 819, 24, "buffer");
    if (offsetInBytes == null) dart.nullFailed(L57, 819, 36, "offsetInBytes");
    _native_typed_data._checkViewArguments(buffer, offsetInBytes, length);
    return length == null ? _native_typed_data.NativeInt16List._create2(buffer, offsetInBytes) : _native_typed_data.NativeInt16List._create3(buffer, offsetInBytes, length);
  }
  get [$runtimeType]() {
    return dart.wrapType(typed_data.Int16List);
  }
  [$_get](index) {
    if (index == null) dart.nullFailed(L57, 828, 23, "index");
    _native_typed_data._checkValidIndex(index, this, this[$length]);
    return this[index];
  }
  [$sublist](start, end = null) {
    if (start == null) dart.nullFailed(L57, 833, 25, "start");
    let stop = _native_typed_data._checkValidRange(start, end, this[$length]);
    let source = this.subarray(start, stop);
    return _native_typed_data.NativeInt16List._create1(source);
  }
  static _create1(arg) {
    return new Int16Array(arg);
  }
  static _create2(arg1, arg2) {
    return new Int16Array(arg1, arg2);
  }
  static _create3(arg1, arg2, arg3) {
    return new Int16Array(arg1, arg2, arg3);
  }
};
dart.addTypeTests(_native_typed_data.NativeInt16List);
dart.addTypeCaches(_native_typed_data.NativeInt16List);
_native_typed_data.NativeInt16List[dart.implements] = () => [typed_data.Int16List];
dart.setMethodSignature(_native_typed_data.NativeInt16List, () => ({
  __proto__: dart.getMethods(_native_typed_data.NativeInt16List.__proto__),
  [$_get]: dart.fnType(core.int, [core.int]),
  [$sublist]: dart.fnType(typed_data.Int16List, [core.int], [dart.nullable(core.int)])
}));
dart.setLibraryUri(_native_typed_data.NativeInt16List, L58);
dart.registerExtension("Int16Array", _native_typed_data.NativeInt16List);
_native_typed_data.NativeInt32List = class NativeInt32List extends _native_typed_data.NativeTypedArrayOfInt {
  static new(length) {
    if (length == null) dart.nullFailed(L57, 851, 31, "length");
    return _native_typed_data.NativeInt32List._create1(_native_typed_data._checkLength(length));
  }
  static fromList(elements) {
    if (elements == null) dart.nullFailed(L57, 853, 46, "elements");
    return _native_typed_data.NativeInt32List._create1(_native_typed_data._ensureNativeList(elements));
  }
  static view(buffer, offsetInBytes, length) {
    if (buffer == null) dart.nullFailed(L57, 857, 18, "buffer");
    if (offsetInBytes == null) dart.nullFailed(L57, 857, 30, "offsetInBytes");
    _native_typed_data._checkViewArguments(buffer, offsetInBytes, length);
    return length == null ? _native_typed_data.NativeInt32List._create2(buffer, offsetInBytes) : _native_typed_data.NativeInt32List._create3(buffer, offsetInBytes, length);
  }
  get [$runtimeType]() {
    return dart.wrapType(typed_data.Int32List);
  }
  [$_get](index) {
    if (index == null) dart.nullFailed(L57, 866, 23, "index");
    _native_typed_data._checkValidIndex(index, this, this[$length]);
    return this[index];
  }
  [$sublist](start, end = null) {
    if (start == null) dart.nullFailed(L57, 871, 25, "start");
    let stop = _native_typed_data._checkValidRange(start, end, this[$length]);
    let source = this.subarray(start, stop);
    return _native_typed_data.NativeInt32List._create1(source);
  }
  static _create1(arg) {
    return new Int32Array(arg);
  }
  static _create2(arg1, arg2) {
    return new Int32Array(arg1, arg2);
  }
  static _create3(arg1, arg2, arg3) {
    return new Int32Array(arg1, arg2, arg3);
  }
};
dart.addTypeTests(_native_typed_data.NativeInt32List);
dart.addTypeCaches(_native_typed_data.NativeInt32List);
_native_typed_data.NativeInt32List[dart.implements] = () => [typed_data.Int32List];
dart.setMethodSignature(_native_typed_data.NativeInt32List, () => ({
  __proto__: dart.getMethods(_native_typed_data.NativeInt32List.__proto__),
  [$_get]: dart.fnType(core.int, [core.int]),
  [$sublist]: dart.fnType(typed_data.Int32List, [core.int], [dart.nullable(core.int)])
}));
dart.setLibraryUri(_native_typed_data.NativeInt32List, L58);
dart.registerExtension("Int32Array", _native_typed_data.NativeInt32List);
_native_typed_data.NativeInt8List = class NativeInt8List extends _native_typed_data.NativeTypedArrayOfInt {
  static new(length) {
    if (length == null) dart.nullFailed(L57, 890, 30, "length");
    return _native_typed_data.NativeInt8List._create1(_native_typed_data._checkLength(length));
  }
  static fromList(elements) {
    if (elements == null) dart.nullFailed(L57, 892, 45, "elements");
    return _native_typed_data.NativeInt8List._create1(_native_typed_data._ensureNativeList(elements));
  }
  static view(buffer, offsetInBytes, length) {
    if (buffer == null) dart.nullFailed(L57, 896, 18, "buffer");
    if (offsetInBytes == null) dart.nullFailed(L57, 896, 30, "offsetInBytes");
    _native_typed_data._checkViewArguments(buffer, offsetInBytes, length);
    return length == null ? _native_typed_data.NativeInt8List._create2(buffer, offsetInBytes) : _native_typed_data.NativeInt8List._create3(buffer, offsetInBytes, length);
  }
  get [$runtimeType]() {
    return dart.wrapType(typed_data.Int8List);
  }
  [$_get](index) {
    if (index == null) dart.nullFailed(L57, 905, 23, "index");
    _native_typed_data._checkValidIndex(index, this, this[$length]);
    return this[index];
  }
  [$sublist](start, end = null) {
    if (start == null) dart.nullFailed(L57, 910, 24, "start");
    let stop = _native_typed_data._checkValidRange(start, end, this[$length]);
    let source = this.subarray(start, stop);
    return _native_typed_data.NativeInt8List._create1(source);
  }
  static _create1(arg) {
    return new Int8Array(arg);
  }
  static _create2(arg1, arg2) {
    return new Int8Array(arg1, arg2);
  }
  static _create3(arg1, arg2, arg3) {
    return new Int8Array(arg1, arg2, arg3);
  }
};
dart.addTypeTests(_native_typed_data.NativeInt8List);
dart.addTypeCaches(_native_typed_data.NativeInt8List);
_native_typed_data.NativeInt8List[dart.implements] = () => [typed_data.Int8List];
dart.setMethodSignature(_native_typed_data.NativeInt8List, () => ({
  __proto__: dart.getMethods(_native_typed_data.NativeInt8List.__proto__),
  [$_get]: dart.fnType(core.int, [core.int]),
  [$sublist]: dart.fnType(typed_data.Int8List, [core.int], [dart.nullable(core.int)])
}));
dart.setLibraryUri(_native_typed_data.NativeInt8List, L58);
dart.registerExtension("Int8Array", _native_typed_data.NativeInt8List);
_native_typed_data.NativeUint16List = class NativeUint16List extends _native_typed_data.NativeTypedArrayOfInt {
  static new(length) {
    if (length == null) dart.nullFailed(L57, 928, 32, "length");
    return _native_typed_data.NativeUint16List._create1(_native_typed_data._checkLength(length));
  }
  static fromList(list) {
    if (list == null) dart.nullFailed(L57, 930, 47, "list");
    return _native_typed_data.NativeUint16List._create1(_native_typed_data._ensureNativeList(list));
  }
  static view(buffer, offsetInBytes, length) {
    if (buffer == null) dart.nullFailed(L57, 934, 18, "buffer");
    if (offsetInBytes == null) dart.nullFailed(L57, 934, 30, "offsetInBytes");
    _native_typed_data._checkViewArguments(buffer, offsetInBytes, length);
    return length == null ? _native_typed_data.NativeUint16List._create2(buffer, offsetInBytes) : _native_typed_data.NativeUint16List._create3(buffer, offsetInBytes, length);
  }
  get [$runtimeType]() {
    return dart.wrapType(typed_data.Uint16List);
  }
  [$_get](index) {
    if (index == null) dart.nullFailed(L57, 943, 23, "index");
    _native_typed_data._checkValidIndex(index, this, this[$length]);
    return this[index];
  }
  [$sublist](start, end = null) {
    if (start == null) dart.nullFailed(L57, 948, 26, "start");
    let stop = _native_typed_data._checkValidRange(start, end, this[$length]);
    let source = this.subarray(start, stop);
    return _native_typed_data.NativeUint16List._create1(source);
  }
  static _create1(arg) {
    return new Uint16Array(arg);
  }
  static _create2(arg1, arg2) {
    return new Uint16Array(arg1, arg2);
  }
  static _create3(arg1, arg2, arg3) {
    return new Uint16Array(arg1, arg2, arg3);
  }
};
dart.addTypeTests(_native_typed_data.NativeUint16List);
dart.addTypeCaches(_native_typed_data.NativeUint16List);
_native_typed_data.NativeUint16List[dart.implements] = () => [typed_data.Uint16List];
dart.setMethodSignature(_native_typed_data.NativeUint16List, () => ({
  __proto__: dart.getMethods(_native_typed_data.NativeUint16List.__proto__),
  [$_get]: dart.fnType(core.int, [core.int]),
  [$sublist]: dart.fnType(typed_data.Uint16List, [core.int], [dart.nullable(core.int)])
}));
dart.setLibraryUri(_native_typed_data.NativeUint16List, L58);
dart.registerExtension("Uint16Array", _native_typed_data.NativeUint16List);
_native_typed_data.NativeUint32List = class NativeUint32List extends _native_typed_data.NativeTypedArrayOfInt {
  static new(length) {
    if (length == null) dart.nullFailed(L57, 967, 32, "length");
    return _native_typed_data.NativeUint32List._create1(_native_typed_data._checkLength(length));
  }
  static fromList(elements) {
    if (elements == null) dart.nullFailed(L57, 969, 47, "elements");
    return _native_typed_data.NativeUint32List._create1(_native_typed_data._ensureNativeList(elements));
  }
  static view(buffer, offsetInBytes, length) {
    if (buffer == null) dart.nullFailed(L57, 973, 18, "buffer");
    if (offsetInBytes == null) dart.nullFailed(L57, 973, 30, "offsetInBytes");
    _native_typed_data._checkViewArguments(buffer, offsetInBytes, length);
    return length == null ? _native_typed_data.NativeUint32List._create2(buffer, offsetInBytes) : _native_typed_data.NativeUint32List._create3(buffer, offsetInBytes, length);
  }
  get [$runtimeType]() {
    return dart.wrapType(typed_data.Uint32List);
  }
  [$_get](index) {
    if (index == null) dart.nullFailed(L57, 982, 23, "index");
    _native_typed_data._checkValidIndex(index, this, this[$length]);
    return this[index];
  }
  [$sublist](start, end = null) {
    if (start == null) dart.nullFailed(L57, 987, 26, "start");
    let stop = _native_typed_data._checkValidRange(start, end, this[$length]);
    let source = this.subarray(start, stop);
    return _native_typed_data.NativeUint32List._create1(source);
  }
  static _create1(arg) {
    return new Uint32Array(arg);
  }
  static _create2(arg1, arg2) {
    return new Uint32Array(arg1, arg2);
  }
  static _create3(arg1, arg2, arg3) {
    return new Uint32Array(arg1, arg2, arg3);
  }
};
dart.addTypeTests(_native_typed_data.NativeUint32List);
dart.addTypeCaches(_native_typed_data.NativeUint32List);
_native_typed_data.NativeUint32List[dart.implements] = () => [typed_data.Uint32List];
dart.setMethodSignature(_native_typed_data.NativeUint32List, () => ({
  __proto__: dart.getMethods(_native_typed_data.NativeUint32List.__proto__),
  [$_get]: dart.fnType(core.int, [core.int]),
  [$sublist]: dart.fnType(typed_data.Uint32List, [core.int], [dart.nullable(core.int)])
}));
dart.setLibraryUri(_native_typed_data.NativeUint32List, L58);
dart.registerExtension("Uint32Array", _native_typed_data.NativeUint32List);
_native_typed_data.NativeUint8ClampedList = class NativeUint8ClampedList extends _native_typed_data.NativeTypedArrayOfInt {
  static new(length) {
    if (length == null) dart.nullFailed(L57, 1007, 38, "length");
    return _native_typed_data.NativeUint8ClampedList._create1(_native_typed_data._checkLength(length));
  }
  static fromList(elements) {
    if (elements == null) dart.nullFailed(L57, 1009, 53, "elements");
    return _native_typed_data.NativeUint8ClampedList._create1(_native_typed_data._ensureNativeList(elements));
  }
  static view(buffer, offsetInBytes, length) {
    if (buffer == null) dart.nullFailed(L57, 1013, 18, "buffer");
    if (offsetInBytes == null) dart.nullFailed(L57, 1013, 30, "offsetInBytes");
    _native_typed_data._checkViewArguments(buffer, offsetInBytes, length);
    return length == null ? _native_typed_data.NativeUint8ClampedList._create2(buffer, offsetInBytes) : _native_typed_data.NativeUint8ClampedList._create3(buffer, offsetInBytes, length);
  }
  get [$runtimeType]() {
    return dart.wrapType(typed_data.Uint8ClampedList);
  }
  get [$length]() {
    return this.length;
  }
  set [$length](value) {
    super[$length] = value;
  }
  [$_get](index) {
    if (index == null) dart.nullFailed(L57, 1024, 23, "index");
    _native_typed_data._checkValidIndex(index, this, this[$length]);
    return this[index];
  }
  [$sublist](start, end = null) {
    if (start == null) dart.nullFailed(L57, 1029, 32, "start");
    let stop = _native_typed_data._checkValidRange(start, end, this[$length]);
    let source = this.subarray(start, stop);
    return _native_typed_data.NativeUint8ClampedList._create1(source);
  }
  static _create1(arg) {
    return new Uint8ClampedArray(arg);
  }
  static _create2(arg1, arg2) {
    return new Uint8ClampedArray(arg1, arg2);
  }
  static _create3(arg1, arg2, arg3) {
    return new Uint8ClampedArray(arg1, arg2, arg3);
  }
};
dart.addTypeTests(_native_typed_data.NativeUint8ClampedList);
dart.addTypeCaches(_native_typed_data.NativeUint8ClampedList);
_native_typed_data.NativeUint8ClampedList[dart.implements] = () => [typed_data.Uint8ClampedList];
dart.setMethodSignature(_native_typed_data.NativeUint8ClampedList, () => ({
  __proto__: dart.getMethods(_native_typed_data.NativeUint8ClampedList.__proto__),
  [$_get]: dart.fnType(core.int, [core.int]),
  [$sublist]: dart.fnType(typed_data.Uint8ClampedList, [core.int], [dart.nullable(core.int)])
}));
dart.setLibraryUri(_native_typed_data.NativeUint8ClampedList, L58);
dart.registerExtension("Uint8ClampedArray", _native_typed_data.NativeUint8ClampedList);
dart.registerExtension("CanvasPixelArray", _native_typed_data.NativeUint8ClampedList);
_native_typed_data.NativeUint8List = class NativeUint8List extends _native_typed_data.NativeTypedArrayOfInt {
  static new(length) {
    if (length == null) dart.nullFailed(L57, 1057, 31, "length");
    return _native_typed_data.NativeUint8List._create1(_native_typed_data._checkLength(length));
  }
  static fromList(elements) {
    if (elements == null) dart.nullFailed(L57, 1059, 46, "elements");
    return _native_typed_data.NativeUint8List._create1(_native_typed_data._ensureNativeList(elements));
  }
  static view(buffer, offsetInBytes, length) {
    if (buffer == null) dart.nullFailed(L57, 1063, 18, "buffer");
    if (offsetInBytes == null) dart.nullFailed(L57, 1063, 30, "offsetInBytes");
    _native_typed_data._checkViewArguments(buffer, offsetInBytes, length);
    return length == null ? _native_typed_data.NativeUint8List._create2(buffer, offsetInBytes) : _native_typed_data.NativeUint8List._create3(buffer, offsetInBytes, length);
  }
  get [$runtimeType]() {
    return dart.wrapType(typed_data.Uint8List);
  }
  get [$length]() {
    return this.length;
  }
  set [$length](value) {
    super[$length] = value;
  }
  [$_get](index) {
    if (index == null) dart.nullFailed(L57, 1074, 23, "index");
    _native_typed_data._checkValidIndex(index, this, this[$length]);
    return this[index];
  }
  [$sublist](start, end = null) {
    if (start == null) dart.nullFailed(L57, 1079, 25, "start");
    let stop = _native_typed_data._checkValidRange(start, end, this[$length]);
    let source = this.subarray(start, stop);
    return _native_typed_data.NativeUint8List._create1(source);
  }
  static _create1(arg) {
    return new Uint8Array(arg);
  }
  static _create2(arg1, arg2) {
    return new Uint8Array(arg1, arg2);
  }
  static _create3(arg1, arg2, arg3) {
    return new Uint8Array(arg1, arg2, arg3);
  }
};
dart.addTypeTests(_native_typed_data.NativeUint8List);
dart.addTypeCaches(_native_typed_data.NativeUint8List);
_native_typed_data.NativeUint8List[dart.implements] = () => [typed_data.Uint8List];
dart.setMethodSignature(_native_typed_data.NativeUint8List, () => ({
  __proto__: dart.getMethods(_native_typed_data.NativeUint8List.__proto__),
  [$_get]: dart.fnType(core.int, [core.int]),
  [$sublist]: dart.fnType(typed_data.Uint8List, [core.int], [dart.nullable(core.int)])
}));
dart.setLibraryUri(_native_typed_data.NativeUint8List, L58);
dart.registerExtension("Uint8Array", _native_typed_data.NativeUint8List);
var x$ = dart.privateName(_native_typed_data, "NativeFloat32x4.x");
var y$ = dart.privateName(_native_typed_data, "NativeFloat32x4.y");
var z$ = dart.privateName(_native_typed_data, "NativeFloat32x4.z");
var w$ = dart.privateName(_native_typed_data, "NativeFloat32x4.w");
_native_typed_data.NativeFloat32x4 = class NativeFloat32x4 extends core.Object {
  get x() {
    return this[x$];
  }
  set x(value) {
    super.x = value;
  }
  get y() {
    return this[y$];
  }
  set y(value) {
    super.y = value;
  }
  get z() {
    return this[z$];
  }
  set z(value) {
    super.z = value;
  }
  get w() {
    return this[w$];
  }
  set w(value) {
    super.w = value;
  }
  static _truncate(x) {
    _native_typed_data.NativeFloat32x4._list[$_set](0, core.num.as(x));
    return _native_typed_data.NativeFloat32x4._list[$_get](0);
  }
  static fromInt32x4Bits(i) {
    if (i == null) dart.nullFailed(L57, 1130, 51, "i");
    _native_typed_data.NativeFloat32x4._uint32view[$_set](0, i.x);
    _native_typed_data.NativeFloat32x4._uint32view[$_set](1, i.y);
    _native_typed_data.NativeFloat32x4._uint32view[$_set](2, i.z);
    _native_typed_data.NativeFloat32x4._uint32view[$_set](3, i.w);
    return new _native_typed_data.NativeFloat32x4._truncated(_native_typed_data.NativeFloat32x4._list[$_get](0), _native_typed_data.NativeFloat32x4._list[$_get](1), _native_typed_data.NativeFloat32x4._list[$_get](2), _native_typed_data.NativeFloat32x4._list[$_get](3));
  }
  toString() {
    return dart.str("[") + dart.str(this.x) + dart.str(", ") + dart.str(this.y) + dart.str(", ") + dart.str(this.z) + dart.str(", ") + dart.str(this.w) + dart.str("]");
  }
  ['+'](other) {
    if (other == null) dart.nullFailed(L57, 1162, 34, "other");
    let _x = dart.notNull(this.x) + dart.notNull(other.x);
    let _y = dart.notNull(this.y) + dart.notNull(other.y);
    let _z = dart.notNull(this.z) + dart.notNull(other.z);
    let _w = dart.notNull(this.w) + dart.notNull(other.w);
    return new _native_typed_data.NativeFloat32x4._doubles(_x, _y, _z, _w);
  }
  _negate() {
    return new _native_typed_data.NativeFloat32x4._truncated(-dart.notNull(this.x), -dart.notNull(this.y), -dart.notNull(this.z), -dart.notNull(this.w));
  }
  ['-'](other) {
    if (other == null) dart.nullFailed(L57, 1176, 34, "other");
    let _x = dart.notNull(this.x) - dart.notNull(other.x);
    let _y = dart.notNull(this.y) - dart.notNull(other.y);
    let _z = dart.notNull(this.z) - dart.notNull(other.z);
    let _w = dart.notNull(this.w) - dart.notNull(other.w);
    return new _native_typed_data.NativeFloat32x4._doubles(_x, _y, _z, _w);
  }
  ['*'](other) {
    if (other == null) dart.nullFailed(L57, 1185, 34, "other");
    let _x = dart.notNull(this.x) * dart.notNull(other.x);
    let _y = dart.notNull(this.y) * dart.notNull(other.y);
    let _z = dart.notNull(this.z) * dart.notNull(other.z);
    let _w = dart.notNull(this.w) * dart.notNull(other.w);
    return new _native_typed_data.NativeFloat32x4._doubles(_x, _y, _z, _w);
  }
  ['/'](other) {
    if (other == null) dart.nullFailed(L57, 1194, 34, "other");
    let _x = dart.notNull(this.x) / dart.notNull(other.x);
    let _y = dart.notNull(this.y) / dart.notNull(other.y);
    let _z = dart.notNull(this.z) / dart.notNull(other.z);
    let _w = dart.notNull(this.w) / dart.notNull(other.w);
    return new _native_typed_data.NativeFloat32x4._doubles(_x, _y, _z, _w);
  }
  lessThan(other) {
    if (other == null) dart.nullFailed(L57, 1203, 30, "other");
    let _cx = dart.notNull(this.x) < dart.notNull(other.x);
    let _cy = dart.notNull(this.y) < dart.notNull(other.y);
    let _cz = dart.notNull(this.z) < dart.notNull(other.z);
    let _cw = dart.notNull(this.w) < dart.notNull(other.w);
    return new _native_typed_data.NativeInt32x4._truncated(_cx ? -1 : 0, _cy ? -1 : 0, _cz ? -1 : 0, _cw ? -1 : 0);
  }
  lessThanOrEqual(other) {
    if (other == null) dart.nullFailed(L57, 1213, 37, "other");
    let _cx = dart.notNull(this.x) <= dart.notNull(other.x);
    let _cy = dart.notNull(this.y) <= dart.notNull(other.y);
    let _cz = dart.notNull(this.z) <= dart.notNull(other.z);
    let _cw = dart.notNull(this.w) <= dart.notNull(other.w);
    return new _native_typed_data.NativeInt32x4._truncated(_cx ? -1 : 0, _cy ? -1 : 0, _cz ? -1 : 0, _cw ? -1 : 0);
  }
  greaterThan(other) {
    if (other == null) dart.nullFailed(L57, 1223, 33, "other");
    let _cx = dart.notNull(this.x) > dart.notNull(other.x);
    let _cy = dart.notNull(this.y) > dart.notNull(other.y);
    let _cz = dart.notNull(this.z) > dart.notNull(other.z);
    let _cw = dart.notNull(this.w) > dart.notNull(other.w);
    return new _native_typed_data.NativeInt32x4._truncated(_cx ? -1 : 0, _cy ? -1 : 0, _cz ? -1 : 0, _cw ? -1 : 0);
  }
  greaterThanOrEqual(other) {
    if (other == null) dart.nullFailed(L57, 1233, 40, "other");
    let _cx = dart.notNull(this.x) >= dart.notNull(other.x);
    let _cy = dart.notNull(this.y) >= dart.notNull(other.y);
    let _cz = dart.notNull(this.z) >= dart.notNull(other.z);
    let _cw = dart.notNull(this.w) >= dart.notNull(other.w);
    return new _native_typed_data.NativeInt32x4._truncated(_cx ? -1 : 0, _cy ? -1 : 0, _cz ? -1 : 0, _cw ? -1 : 0);
  }
  equal(other) {
    if (other == null) dart.nullFailed(L57, 1243, 27, "other");
    let _cx = this.x == other.x;
    let _cy = this.y == other.y;
    let _cz = this.z == other.z;
    let _cw = this.w == other.w;
    return new _native_typed_data.NativeInt32x4._truncated(_cx ? -1 : 0, _cy ? -1 : 0, _cz ? -1 : 0, _cw ? -1 : 0);
  }
  notEqual(other) {
    if (other == null) dart.nullFailed(L57, 1253, 30, "other");
    let _cx = this.x != other.x;
    let _cy = this.y != other.y;
    let _cz = this.z != other.z;
    let _cw = this.w != other.w;
    return new _native_typed_data.NativeInt32x4._truncated(_cx ? -1 : 0, _cy ? -1 : 0, _cz ? -1 : 0, _cw ? -1 : 0);
  }
  scale(s) {
    if (s == null) dart.nullFailed(L57, 1263, 26, "s");
    let _x = dart.notNull(s) * dart.notNull(this.x);
    let _y = dart.notNull(s) * dart.notNull(this.y);
    let _z = dart.notNull(s) * dart.notNull(this.z);
    let _w = dart.notNull(s) * dart.notNull(this.w);
    return new _native_typed_data.NativeFloat32x4._doubles(_x, _y, _z, _w);
  }
  abs() {
    let _x = this.x[$abs]();
    let _y = this.y[$abs]();
    let _z = this.z[$abs]();
    let _w = this.w[$abs]();
    return new _native_typed_data.NativeFloat32x4._truncated(_x, _y, _z, _w);
  }
  clamp(lowerLimit, upperLimit) {
    if (lowerLimit == null) dart.nullFailed(L57, 1281, 29, "lowerLimit");
    if (upperLimit == null) dart.nullFailed(L57, 1281, 51, "upperLimit");
    let _lx = lowerLimit.x;
    let _ly = lowerLimit.y;
    let _lz = lowerLimit.z;
    let _lw = lowerLimit.w;
    let _ux = upperLimit.x;
    let _uy = upperLimit.y;
    let _uz = upperLimit.z;
    let _uw = upperLimit.w;
    let _x = this.x;
    let _y = this.y;
    let _z = this.z;
    let _w = this.w;
    _x = dart.notNull(_x) > dart.notNull(_ux) ? _ux : _x;
    _y = dart.notNull(_y) > dart.notNull(_uy) ? _uy : _y;
    _z = dart.notNull(_z) > dart.notNull(_uz) ? _uz : _z;
    _w = dart.notNull(_w) > dart.notNull(_uw) ? _uw : _w;
    _x = dart.notNull(_x) < dart.notNull(_lx) ? _lx : _x;
    _y = dart.notNull(_y) < dart.notNull(_ly) ? _ly : _y;
    _z = dart.notNull(_z) < dart.notNull(_lz) ? _lz : _z;
    _w = dart.notNull(_w) < dart.notNull(_lw) ? _lw : _w;
    return new _native_typed_data.NativeFloat32x4._truncated(_x, _y, _z, _w);
  }
  get signMask() {
    let view = _native_typed_data.NativeFloat32x4._uint32view;
    let mx = null;
    let my = null;
    let mz = null;
    let mw = null;
    _native_typed_data.NativeFloat32x4._list[$_set](0, this.x);
    _native_typed_data.NativeFloat32x4._list[$_set](1, this.y);
    _native_typed_data.NativeFloat32x4._list[$_set](2, this.z);
    _native_typed_data.NativeFloat32x4._list[$_set](3, this.w);
    mx = (dart.notNull(view[$_get](0)) & 2147483648) >>> 31;
    my = (dart.notNull(view[$_get](1)) & 2147483648) >>> 30;
    mz = (dart.notNull(view[$_get](2)) & 2147483648) >>> 29;
    mw = (dart.notNull(view[$_get](3)) & 2147483648) >>> 28;
    return (dart.notNull(mx) | dart.notNull(my) | dart.notNull(mz) | dart.notNull(mw)) >>> 0;
  }
  shuffle(mask) {
    if (mask == null) dart.nullFailed(L57, 1323, 25, "mask");
    if (dart.notNull(mask) < 0 || dart.notNull(mask) > 255) {
      dart.throw(new core.RangeError.range(mask, 0, 255, "mask"));
    }
    _native_typed_data.NativeFloat32x4._list[$_set](0, this.x);
    _native_typed_data.NativeFloat32x4._list[$_set](1, this.y);
    _native_typed_data.NativeFloat32x4._list[$_set](2, this.z);
    _native_typed_data.NativeFloat32x4._list[$_set](3, this.w);
    let _x = _native_typed_data.NativeFloat32x4._list[$_get](dart.notNull(mask) & 3);
    let _y = _native_typed_data.NativeFloat32x4._list[$_get](dart.notNull(mask) >> 2 & 3);
    let _z = _native_typed_data.NativeFloat32x4._list[$_get](dart.notNull(mask) >> 4 & 3);
    let _w = _native_typed_data.NativeFloat32x4._list[$_get](dart.notNull(mask) >> 6 & 3);
    return new _native_typed_data.NativeFloat32x4._truncated(_x, _y, _z, _w);
  }
  shuffleMix(other, mask) {
    if (other == null) dart.nullFailed(L57, 1342, 34, "other");
    if (mask == null) dart.nullFailed(L57, 1342, 45, "mask");
    if (dart.notNull(mask) < 0 || dart.notNull(mask) > 255) {
      dart.throw(new core.RangeError.range(mask, 0, 255, "mask"));
    }
    _native_typed_data.NativeFloat32x4._list[$_set](0, this.x);
    _native_typed_data.NativeFloat32x4._list[$_set](1, this.y);
    _native_typed_data.NativeFloat32x4._list[$_set](2, this.z);
    _native_typed_data.NativeFloat32x4._list[$_set](3, this.w);
    let _x = _native_typed_data.NativeFloat32x4._list[$_get](dart.notNull(mask) & 3);
    let _y = _native_typed_data.NativeFloat32x4._list[$_get](dart.notNull(mask) >> 2 & 3);
    _native_typed_data.NativeFloat32x4._list[$_set](0, other.x);
    _native_typed_data.NativeFloat32x4._list[$_set](1, other.y);
    _native_typed_data.NativeFloat32x4._list[$_set](2, other.z);
    _native_typed_data.NativeFloat32x4._list[$_set](3, other.w);
    let _z = _native_typed_data.NativeFloat32x4._list[$_get](dart.notNull(mask) >> 4 & 3);
    let _w = _native_typed_data.NativeFloat32x4._list[$_get](dart.notNull(mask) >> 6 & 3);
    return new _native_typed_data.NativeFloat32x4._truncated(_x, _y, _z, _w);
  }
  withX(newX) {
    if (newX == null) dart.nullFailed(L57, 1363, 26, "newX");
    core.ArgumentError.checkNotNull(core.double, newX);
    return new _native_typed_data.NativeFloat32x4._truncated(core.double.as(_native_typed_data.NativeFloat32x4._truncate(newX)), this.y, this.z, this.w);
  }
  withY(newY) {
    if (newY == null) dart.nullFailed(L57, 1369, 26, "newY");
    core.ArgumentError.checkNotNull(core.double, newY);
    return new _native_typed_data.NativeFloat32x4._truncated(this.x, core.double.as(_native_typed_data.NativeFloat32x4._truncate(newY)), this.z, this.w);
  }
  withZ(newZ) {
    if (newZ == null) dart.nullFailed(L57, 1375, 26, "newZ");
    core.ArgumentError.checkNotNull(core.double, newZ);
    return new _native_typed_data.NativeFloat32x4._truncated(this.x, this.y, core.double.as(_native_typed_data.NativeFloat32x4._truncate(newZ)), this.w);
  }
  withW(newW) {
    if (newW == null) dart.nullFailed(L57, 1381, 26, "newW");
    core.ArgumentError.checkNotNull(core.double, newW);
    return new _native_typed_data.NativeFloat32x4._truncated(this.x, this.y, this.z, core.double.as(_native_typed_data.NativeFloat32x4._truncate(newW)));
  }
  min(other) {
    if (other == null) dart.nullFailed(L57, 1387, 27, "other");
    let _x = dart.notNull(this.x) < dart.notNull(other.x) ? this.x : other.x;
    let _y = dart.notNull(this.y) < dart.notNull(other.y) ? this.y : other.y;
    let _z = dart.notNull(this.z) < dart.notNull(other.z) ? this.z : other.z;
    let _w = dart.notNull(this.w) < dart.notNull(other.w) ? this.w : other.w;
    return new _native_typed_data.NativeFloat32x4._truncated(_x, _y, _z, _w);
  }
  max(other) {
    if (other == null) dart.nullFailed(L57, 1396, 27, "other");
    let _x = dart.notNull(this.x) > dart.notNull(other.x) ? this.x : other.x;
    let _y = dart.notNull(this.y) > dart.notNull(other.y) ? this.y : other.y;
    let _z = dart.notNull(this.z) > dart.notNull(other.z) ? this.z : other.z;
    let _w = dart.notNull(this.w) > dart.notNull(other.w) ? this.w : other.w;
    return new _native_typed_data.NativeFloat32x4._truncated(_x, _y, _z, _w);
  }
  sqrt() {
    let _x = math.sqrt(this.x);
    let _y = math.sqrt(this.y);
    let _z = math.sqrt(this.z);
    let _w = math.sqrt(this.w);
    return new _native_typed_data.NativeFloat32x4._doubles(_x, _y, _z, _w);
  }
  reciprocal() {
    let _x = 1.0 / dart.notNull(this.x);
    let _y = 1.0 / dart.notNull(this.y);
    let _z = 1.0 / dart.notNull(this.z);
    let _w = 1.0 / dart.notNull(this.w);
    return new _native_typed_data.NativeFloat32x4._doubles(_x, _y, _z, _w);
  }
  reciprocalSqrt() {
    let _x = math.sqrt(1.0 / dart.notNull(this.x));
    let _y = math.sqrt(1.0 / dart.notNull(this.y));
    let _z = math.sqrt(1.0 / dart.notNull(this.z));
    let _w = math.sqrt(1.0 / dart.notNull(this.w));
    return new _native_typed_data.NativeFloat32x4._doubles(_x, _y, _z, _w);
  }
};
(_native_typed_data.NativeFloat32x4.new = function(x, y, z, w) {
  if (x == null) dart.nullFailed(L57, 1113, 26, "x");
  if (y == null) dart.nullFailed(L57, 1113, 36, "y");
  if (z == null) dart.nullFailed(L57, 1113, 46, "z");
  if (w == null) dart.nullFailed(L57, 1113, 56, "w");
  this[x$] = core.double.as(_native_typed_data.NativeFloat32x4._truncate(x));
  this[y$] = core.double.as(_native_typed_data.NativeFloat32x4._truncate(y));
  this[z$] = core.double.as(_native_typed_data.NativeFloat32x4._truncate(z));
  this[w$] = core.double.as(_native_typed_data.NativeFloat32x4._truncate(w));
  if (!(typeof x == 'number')) dart.throw(new core.ArgumentError.new(x));
  if (!(typeof y == 'number')) dart.throw(new core.ArgumentError.new(y));
  if (!(typeof z == 'number')) dart.throw(new core.ArgumentError.new(z));
  if (!(typeof w == 'number')) dart.throw(new core.ArgumentError.new(w));
}).prototype = _native_typed_data.NativeFloat32x4.prototype;
(_native_typed_data.NativeFloat32x4.splat = function(v) {
  if (v == null) dart.nullFailed(L57, 1126, 32, "v");
  _native_typed_data.NativeFloat32x4.new.call(this, v, v, v, v);
}).prototype = _native_typed_data.NativeFloat32x4.prototype;
(_native_typed_data.NativeFloat32x4.zero = function() {
  _native_typed_data.NativeFloat32x4._truncated.call(this, 0.0, 0.0, 0.0, 0.0);
}).prototype = _native_typed_data.NativeFloat32x4.prototype;
(_native_typed_data.NativeFloat32x4.fromFloat64x2 = function(v) {
  if (v == null) dart.nullFailed(L57, 1138, 43, "v");
  _native_typed_data.NativeFloat32x4._truncated.call(this, core.double.as(_native_typed_data.NativeFloat32x4._truncate(v.x)), core.double.as(_native_typed_data.NativeFloat32x4._truncate(v.y)), 0.0, 0.0);
}).prototype = _native_typed_data.NativeFloat32x4.prototype;
(_native_typed_data.NativeFloat32x4._doubles = function(x, y, z, w) {
  if (x == null) dart.nullFailed(L57, 1144, 35, "x");
  if (y == null) dart.nullFailed(L57, 1144, 45, "y");
  if (z == null) dart.nullFailed(L57, 1144, 55, "z");
  if (w == null) dart.nullFailed(L57, 1144, 65, "w");
  this[x$] = core.double.as(_native_typed_data.NativeFloat32x4._truncate(x));
  this[y$] = core.double.as(_native_typed_data.NativeFloat32x4._truncate(y));
  this[z$] = core.double.as(_native_typed_data.NativeFloat32x4._truncate(z));
  this[w$] = core.double.as(_native_typed_data.NativeFloat32x4._truncate(w));
  ;
}).prototype = _native_typed_data.NativeFloat32x4.prototype;
(_native_typed_data.NativeFloat32x4._truncated = function(x, y, z, w) {
  if (x == null) dart.nullFailed(L57, 1155, 35, "x");
  if (y == null) dart.nullFailed(L57, 1155, 43, "y");
  if (z == null) dart.nullFailed(L57, 1155, 51, "z");
  if (w == null) dart.nullFailed(L57, 1155, 59, "w");
  this[x$] = x;
  this[y$] = y;
  this[z$] = z;
  this[w$] = w;
  ;
}).prototype = _native_typed_data.NativeFloat32x4.prototype;
dart.addTypeTests(_native_typed_data.NativeFloat32x4);
dart.addTypeCaches(_native_typed_data.NativeFloat32x4);
_native_typed_data.NativeFloat32x4[dart.implements] = () => [typed_data.Float32x4];
dart.setMethodSignature(_native_typed_data.NativeFloat32x4, () => ({
  __proto__: dart.getMethods(_native_typed_data.NativeFloat32x4.__proto__),
  '+': dart.fnType(typed_data.Float32x4, [typed_data.Float32x4]),
  _negate: dart.fnType(typed_data.Float32x4, []),
  '-': dart.fnType(typed_data.Float32x4, [typed_data.Float32x4]),
  '*': dart.fnType(typed_data.Float32x4, [typed_data.Float32x4]),
  '/': dart.fnType(typed_data.Float32x4, [typed_data.Float32x4]),
  lessThan: dart.fnType(typed_data.Int32x4, [typed_data.Float32x4]),
  lessThanOrEqual: dart.fnType(typed_data.Int32x4, [typed_data.Float32x4]),
  greaterThan: dart.fnType(typed_data.Int32x4, [typed_data.Float32x4]),
  greaterThanOrEqual: dart.fnType(typed_data.Int32x4, [typed_data.Float32x4]),
  equal: dart.fnType(typed_data.Int32x4, [typed_data.Float32x4]),
  notEqual: dart.fnType(typed_data.Int32x4, [typed_data.Float32x4]),
  scale: dart.fnType(typed_data.Float32x4, [core.double]),
  abs: dart.fnType(typed_data.Float32x4, []),
  clamp: dart.fnType(typed_data.Float32x4, [typed_data.Float32x4, typed_data.Float32x4]),
  shuffle: dart.fnType(typed_data.Float32x4, [core.int]),
  shuffleMix: dart.fnType(typed_data.Float32x4, [typed_data.Float32x4, core.int]),
  withX: dart.fnType(typed_data.Float32x4, [core.double]),
  withY: dart.fnType(typed_data.Float32x4, [core.double]),
  withZ: dart.fnType(typed_data.Float32x4, [core.double]),
  withW: dart.fnType(typed_data.Float32x4, [core.double]),
  min: dart.fnType(typed_data.Float32x4, [typed_data.Float32x4]),
  max: dart.fnType(typed_data.Float32x4, [typed_data.Float32x4]),
  sqrt: dart.fnType(typed_data.Float32x4, []),
  reciprocal: dart.fnType(typed_data.Float32x4, []),
  reciprocalSqrt: dart.fnType(typed_data.Float32x4, [])
}));
dart.setGetterSignature(_native_typed_data.NativeFloat32x4, () => ({
  __proto__: dart.getGetters(_native_typed_data.NativeFloat32x4.__proto__),
  signMask: core.int
}));
dart.setLibraryUri(_native_typed_data.NativeFloat32x4, L58);
dart.setFieldSignature(_native_typed_data.NativeFloat32x4, () => ({
  __proto__: dart.getFields(_native_typed_data.NativeFloat32x4.__proto__),
  x: dart.finalFieldType(core.double),
  y: dart.finalFieldType(core.double),
  z: dart.finalFieldType(core.double),
  w: dart.finalFieldType(core.double)
}));
dart.defineExtensionMethods(_native_typed_data.NativeFloat32x4, ['toString']);
dart.defineLazy(_native_typed_data.NativeFloat32x4, {
  /*_native_typed_data.NativeFloat32x4._list*/get _list() {
    return _native_typed_data.NativeFloat32List.new(4);
  },
  /*_native_typed_data.NativeFloat32x4._uint32view*/get _uint32view() {
    return _native_typed_data.NativeFloat32x4._list.buffer[$asUint32List]();
  }
}, false);
var x$0 = dart.privateName(_native_typed_data, "NativeInt32x4.x");
var y$0 = dart.privateName(_native_typed_data, "NativeInt32x4.y");
var z$0 = dart.privateName(_native_typed_data, "NativeInt32x4.z");
var w$0 = dart.privateName(_native_typed_data, "NativeInt32x4.w");
_native_typed_data.NativeInt32x4 = class NativeInt32x4 extends core.Object {
  get x() {
    return this[x$0];
  }
  set x(value) {
    super.x = value;
  }
  get y() {
    return this[y$0];
  }
  set y(value) {
    super.y = value;
  }
  get z() {
    return this[z$0];
  }
  set z(value) {
    super.z = value;
  }
  get w() {
    return this[w$0];
  }
  set w(value) {
    super.w = value;
  }
  static _truncate(x) {
    _native_typed_data.NativeInt32x4._list[$_set](0, core.int.as(x));
    return _native_typed_data.NativeInt32x4._list[$_get](0);
  }
  static fromFloat32x4Bits(f) {
    if (f == null) dart.nullFailed(L57, 1466, 53, "f");
    let floatList = _native_typed_data.NativeFloat32x4._list;
    floatList[$_set](0, f.x);
    floatList[$_set](1, f.y);
    floatList[$_set](2, f.z);
    floatList[$_set](3, f.w);
    let view = floatList.buffer[$asInt32List]();
    return new _native_typed_data.NativeInt32x4._truncated(view[$_get](0), view[$_get](1), view[$_get](2), view[$_get](3));
  }
  toString() {
    return dart.str("[") + dart.str(this.x) + dart.str(", ") + dart.str(this.y) + dart.str(", ") + dart.str(this.z) + dart.str(", ") + dart.str(this.w) + dart.str("]");
  }
  ['|'](other) {
    if (other == null) dart.nullFailed(L57, 1481, 30, "other");
    return new _native_typed_data.NativeInt32x4._truncated(this.x | other.x, this.y | other.y, this.z | other.z, this.w | other.w);
  }
  ['&'](other) {
    if (other == null) dart.nullFailed(L57, 1492, 30, "other");
    return new _native_typed_data.NativeInt32x4._truncated(this.x & other.x, this.y & other.y, this.z & other.z, this.w & other.w);
  }
  ['^'](other) {
    if (other == null) dart.nullFailed(L57, 1503, 30, "other");
    return new _native_typed_data.NativeInt32x4._truncated(this.x ^ other.x, this.y ^ other.y, this.z ^ other.z, this.w ^ other.w);
  }
  ['+'](other) {
    if (other == null) dart.nullFailed(L57, 1513, 30, "other");
    return new _native_typed_data.NativeInt32x4._truncated(this.x + other.x | 0, this.y + other.y | 0, this.z + other.z | 0, this.w + other.w | 0);
  }
  ['-'](other) {
    if (other == null) dart.nullFailed(L57, 1522, 30, "other");
    return new _native_typed_data.NativeInt32x4._truncated(this.x - other.x | 0, this.y - other.y | 0, this.z - other.z | 0, this.w - other.w | 0);
  }
  _negate() {
    return new _native_typed_data.NativeInt32x4._truncated(-this.x | 0, -this.y | 0, -this.z | 0, -this.w | 0);
  }
  get signMask() {
    let mx = (dart.notNull(this.x) & 2147483648) >>> 31;
    let my = (dart.notNull(this.y) & 2147483648) >>> 31;
    let mz = (dart.notNull(this.z) & 2147483648) >>> 31;
    let mw = (dart.notNull(this.w) & 2147483648) >>> 31;
    return (mx | my << 1 >>> 0 | mz << 2 >>> 0 | mw << 3 >>> 0) >>> 0;
  }
  shuffle(mask) {
    if (mask == null) dart.nullFailed(L57, 1550, 23, "mask");
    if (dart.notNull(mask) < 0 || dart.notNull(mask) > 255) {
      dart.throw(new core.RangeError.range(mask, 0, 255, "mask"));
    }
    _native_typed_data.NativeInt32x4._list[$_set](0, this.x);
    _native_typed_data.NativeInt32x4._list[$_set](1, this.y);
    _native_typed_data.NativeInt32x4._list[$_set](2, this.z);
    _native_typed_data.NativeInt32x4._list[$_set](3, this.w);
    let _x = _native_typed_data.NativeInt32x4._list[$_get](dart.notNull(mask) & 3);
    let _y = _native_typed_data.NativeInt32x4._list[$_get](dart.notNull(mask) >> 2 & 3);
    let _z = _native_typed_data.NativeInt32x4._list[$_get](dart.notNull(mask) >> 4 & 3);
    let _w = _native_typed_data.NativeInt32x4._list[$_get](dart.notNull(mask) >> 6 & 3);
    return new _native_typed_data.NativeInt32x4._truncated(_x, _y, _z, _w);
  }
  shuffleMix(other, mask) {
    if (other == null) dart.nullFailed(L57, 1568, 30, "other");
    if (mask == null) dart.nullFailed(L57, 1568, 41, "mask");
    if (dart.notNull(mask) < 0 || dart.notNull(mask) > 255) {
      dart.throw(new core.RangeError.range(mask, 0, 255, "mask"));
    }
    _native_typed_data.NativeInt32x4._list[$_set](0, this.x);
    _native_typed_data.NativeInt32x4._list[$_set](1, this.y);
    _native_typed_data.NativeInt32x4._list[$_set](2, this.z);
    _native_typed_data.NativeInt32x4._list[$_set](3, this.w);
    let _x = _native_typed_data.NativeInt32x4._list[$_get](dart.notNull(mask) & 3);
    let _y = _native_typed_data.NativeInt32x4._list[$_get](dart.notNull(mask) >> 2 & 3);
    _native_typed_data.NativeInt32x4._list[$_set](0, other.x);
    _native_typed_data.NativeInt32x4._list[$_set](1, other.y);
    _native_typed_data.NativeInt32x4._list[$_set](2, other.z);
    _native_typed_data.NativeInt32x4._list[$_set](3, other.w);
    let _z = _native_typed_data.NativeInt32x4._list[$_get](dart.notNull(mask) >> 4 & 3);
    let _w = _native_typed_data.NativeInt32x4._list[$_get](dart.notNull(mask) >> 6 & 3);
    return new _native_typed_data.NativeInt32x4._truncated(_x, _y, _z, _w);
  }
  withX(x) {
    if (x == null) dart.nullFailed(L57, 1589, 21, "x");
    core.ArgumentError.checkNotNull(core.int, x);
    let _x = core.int.as(_native_typed_data.NativeInt32x4._truncate(x));
    return new _native_typed_data.NativeInt32x4._truncated(_x, this.y, this.z, this.w);
  }
  withY(y) {
    if (y == null) dart.nullFailed(L57, 1596, 21, "y");
    core.ArgumentError.checkNotNull(core.int, y);
    let _y = core.int.as(_native_typed_data.NativeInt32x4._truncate(y));
    return new _native_typed_data.NativeInt32x4._truncated(this.x, _y, this.z, this.w);
  }
  withZ(z) {
    if (z == null) dart.nullFailed(L57, 1603, 21, "z");
    core.ArgumentError.checkNotNull(core.int, z);
    let _z = core.int.as(_native_typed_data.NativeInt32x4._truncate(z));
    return new _native_typed_data.NativeInt32x4._truncated(this.x, this.y, _z, this.w);
  }
  withW(w) {
    if (w == null) dart.nullFailed(L57, 1610, 21, "w");
    core.ArgumentError.checkNotNull(core.int, w);
    let _w = core.int.as(_native_typed_data.NativeInt32x4._truncate(w));
    return new _native_typed_data.NativeInt32x4._truncated(this.x, this.y, this.z, _w);
  }
  get flagX() {
    return this.x !== 0;
  }
  get flagY() {
    return this.y !== 0;
  }
  get flagZ() {
    return this.z !== 0;
  }
  get flagW() {
    return this.w !== 0;
  }
  withFlagX(flagX) {
    if (flagX == null) dart.nullFailed(L57, 1629, 26, "flagX");
    let _x = dart.test(flagX) ? -1 : 0;
    return new _native_typed_data.NativeInt32x4._truncated(_x, this.y, this.z, this.w);
  }
  withFlagY(flagY) {
    if (flagY == null) dart.nullFailed(L57, 1635, 26, "flagY");
    let _y = dart.test(flagY) ? -1 : 0;
    return new _native_typed_data.NativeInt32x4._truncated(this.x, _y, this.z, this.w);
  }
  withFlagZ(flagZ) {
    if (flagZ == null) dart.nullFailed(L57, 1641, 26, "flagZ");
    let _z = dart.test(flagZ) ? -1 : 0;
    return new _native_typed_data.NativeInt32x4._truncated(this.x, this.y, _z, this.w);
  }
  withFlagW(flagW) {
    if (flagW == null) dart.nullFailed(L57, 1647, 26, "flagW");
    let _w = dart.test(flagW) ? -1 : 0;
    return new _native_typed_data.NativeInt32x4._truncated(this.x, this.y, this.z, _w);
  }
  select(trueValue, falseValue) {
    if (trueValue == null) dart.nullFailed(L57, 1655, 30, "trueValue");
    if (falseValue == null) dart.nullFailed(L57, 1655, 51, "falseValue");
    let floatList = _native_typed_data.NativeFloat32x4._list;
    let intView = _native_typed_data.NativeFloat32x4._uint32view;
    floatList[$_set](0, trueValue.x);
    floatList[$_set](1, trueValue.y);
    floatList[$_set](2, trueValue.z);
    floatList[$_set](3, trueValue.w);
    let stx = intView[$_get](0);
    let sty = intView[$_get](1);
    let stz = intView[$_get](2);
    let stw = intView[$_get](3);
    floatList[$_set](0, falseValue.x);
    floatList[$_set](1, falseValue.y);
    floatList[$_set](2, falseValue.z);
    floatList[$_set](3, falseValue.w);
    let sfx = intView[$_get](0);
    let sfy = intView[$_get](1);
    let sfz = intView[$_get](2);
    let sfw = intView[$_get](3);
    let _x = (dart.notNull(this.x) & dart.notNull(stx) | (~dart.notNull(this.x) & dart.notNull(sfx)) >>> 0) >>> 0;
    let _y = (dart.notNull(this.y) & dart.notNull(sty) | (~dart.notNull(this.y) & dart.notNull(sfy)) >>> 0) >>> 0;
    let _z = (dart.notNull(this.z) & dart.notNull(stz) | (~dart.notNull(this.z) & dart.notNull(sfz)) >>> 0) >>> 0;
    let _w = (dart.notNull(this.w) & dart.notNull(stw) | (~dart.notNull(this.w) & dart.notNull(sfw)) >>> 0) >>> 0;
    intView[$_set](0, _x);
    intView[$_set](1, _y);
    intView[$_set](2, _z);
    intView[$_set](3, _w);
    return new _native_typed_data.NativeFloat32x4._truncated(floatList[$_get](0), floatList[$_get](1), floatList[$_get](2), floatList[$_get](3));
  }
};
(_native_typed_data.NativeInt32x4.new = function(x, y, z, w) {
  if (x == null) dart.nullFailed(L57, 1448, 21, "x");
  if (y == null) dart.nullFailed(L57, 1448, 28, "y");
  if (z == null) dart.nullFailed(L57, 1448, 35, "z");
  if (w == null) dart.nullFailed(L57, 1448, 42, "w");
  this[x$0] = core.int.as(_native_typed_data.NativeInt32x4._truncate(x));
  this[y$0] = core.int.as(_native_typed_data.NativeInt32x4._truncate(y));
  this[z$0] = core.int.as(_native_typed_data.NativeInt32x4._truncate(z));
  this[w$0] = core.int.as(_native_typed_data.NativeInt32x4._truncate(w));
  if (x != this.x && !core.int.is(x)) dart.throw(new core.ArgumentError.new(x));
  if (y != this.y && !core.int.is(y)) dart.throw(new core.ArgumentError.new(y));
  if (z != this.z && !core.int.is(z)) dart.throw(new core.ArgumentError.new(z));
  if (w != this.w && !core.int.is(w)) dart.throw(new core.ArgumentError.new(w));
}).prototype = _native_typed_data.NativeInt32x4.prototype;
(_native_typed_data.NativeInt32x4.bool = function(x, y, z, w) {
  if (x == null) dart.nullFailed(L57, 1459, 27, "x");
  if (y == null) dart.nullFailed(L57, 1459, 35, "y");
  if (z == null) dart.nullFailed(L57, 1459, 43, "z");
  if (w == null) dart.nullFailed(L57, 1459, 51, "w");
  this[x$0] = dart.test(x) ? -1 : 0;
  this[y$0] = dart.test(y) ? -1 : 0;
  this[z$0] = dart.test(z) ? -1 : 0;
  this[w$0] = dart.test(w) ? -1 : 0;
  ;
}).prototype = _native_typed_data.NativeInt32x4.prototype;
(_native_typed_data.NativeInt32x4._truncated = function(x, y, z, w) {
  if (x == null) dart.nullFailed(L57, 1476, 33, "x");
  if (y == null) dart.nullFailed(L57, 1476, 41, "y");
  if (z == null) dart.nullFailed(L57, 1476, 49, "z");
  if (w == null) dart.nullFailed(L57, 1476, 57, "w");
  this[x$0] = x;
  this[y$0] = y;
  this[z$0] = z;
  this[w$0] = w;
  ;
}).prototype = _native_typed_data.NativeInt32x4.prototype;
dart.addTypeTests(_native_typed_data.NativeInt32x4);
dart.addTypeCaches(_native_typed_data.NativeInt32x4);
_native_typed_data.NativeInt32x4[dart.implements] = () => [typed_data.Int32x4];
dart.setMethodSignature(_native_typed_data.NativeInt32x4, () => ({
  __proto__: dart.getMethods(_native_typed_data.NativeInt32x4.__proto__),
  '|': dart.fnType(typed_data.Int32x4, [typed_data.Int32x4]),
  '&': dart.fnType(typed_data.Int32x4, [typed_data.Int32x4]),
  '^': dart.fnType(typed_data.Int32x4, [typed_data.Int32x4]),
  '+': dart.fnType(typed_data.Int32x4, [typed_data.Int32x4]),
  '-': dart.fnType(typed_data.Int32x4, [typed_data.Int32x4]),
  _negate: dart.fnType(typed_data.Int32x4, []),
  shuffle: dart.fnType(typed_data.Int32x4, [core.int]),
  shuffleMix: dart.fnType(typed_data.Int32x4, [typed_data.Int32x4, core.int]),
  withX: dart.fnType(typed_data.Int32x4, [core.int]),
  withY: dart.fnType(typed_data.Int32x4, [core.int]),
  withZ: dart.fnType(typed_data.Int32x4, [core.int]),
  withW: dart.fnType(typed_data.Int32x4, [core.int]),
  withFlagX: dart.fnType(typed_data.Int32x4, [core.bool]),
  withFlagY: dart.fnType(typed_data.Int32x4, [core.bool]),
  withFlagZ: dart.fnType(typed_data.Int32x4, [core.bool]),
  withFlagW: dart.fnType(typed_data.Int32x4, [core.bool]),
  select: dart.fnType(typed_data.Float32x4, [typed_data.Float32x4, typed_data.Float32x4])
}));
dart.setGetterSignature(_native_typed_data.NativeInt32x4, () => ({
  __proto__: dart.getGetters(_native_typed_data.NativeInt32x4.__proto__),
  signMask: core.int,
  flagX: core.bool,
  flagY: core.bool,
  flagZ: core.bool,
  flagW: core.bool
}));
dart.setLibraryUri(_native_typed_data.NativeInt32x4, L58);
dart.setFieldSignature(_native_typed_data.NativeInt32x4, () => ({
  __proto__: dart.getFields(_native_typed_data.NativeInt32x4.__proto__),
  x: dart.finalFieldType(core.int),
  y: dart.finalFieldType(core.int),
  z: dart.finalFieldType(core.int),
  w: dart.finalFieldType(core.int)
}));
dart.defineExtensionMethods(_native_typed_data.NativeInt32x4, ['toString']);
dart.defineLazy(_native_typed_data.NativeInt32x4, {
  /*_native_typed_data.NativeInt32x4._list*/get _list() {
    return _native_typed_data.NativeInt32List.new(4);
  }
}, false);
var x$1 = dart.privateName(_native_typed_data, "NativeFloat64x2.x");
var y$1 = dart.privateName(_native_typed_data, "NativeFloat64x2.y");
_native_typed_data.NativeFloat64x2 = class NativeFloat64x2 extends core.Object {
  get x() {
    return this[x$1];
  }
  set x(value) {
    super.x = value;
  }
  get y() {
    return this[y$1];
  }
  set y(value) {
    super.y = value;
  }
  toString() {
    return dart.str("[") + dart.str(this.x) + dart.str(", ") + dart.str(this.y) + dart.str("]");
  }
  ['+'](other) {
    if (other == null) dart.nullFailed(L57, 1713, 34, "other");
    return new _native_typed_data.NativeFloat64x2._doubles(dart.notNull(this.x) + dart.notNull(other.x), dart.notNull(this.y) + dart.notNull(other.y));
  }
  _negate() {
    return new _native_typed_data.NativeFloat64x2._doubles(-dart.notNull(this.x), -dart.notNull(this.y));
  }
  ['-'](other) {
    if (other == null) dart.nullFailed(L57, 1723, 34, "other");
    return new _native_typed_data.NativeFloat64x2._doubles(dart.notNull(this.x) - dart.notNull(other.x), dart.notNull(this.y) - dart.notNull(other.y));
  }
  ['*'](other) {
    if (other == null) dart.nullFailed(L57, 1728, 34, "other");
    return new _native_typed_data.NativeFloat64x2._doubles(dart.notNull(this.x) * dart.notNull(other.x), dart.notNull(this.y) * dart.notNull(other.y));
  }
  ['/'](other) {
    if (other == null) dart.nullFailed(L57, 1733, 34, "other");
    return new _native_typed_data.NativeFloat64x2._doubles(dart.notNull(this.x) / dart.notNull(other.x), dart.notNull(this.y) / dart.notNull(other.y));
  }
  scale(s) {
    if (s == null) dart.nullFailed(L57, 1738, 26, "s");
    return new _native_typed_data.NativeFloat64x2._doubles(dart.notNull(this.x) * dart.notNull(s), dart.notNull(this.y) * dart.notNull(s));
  }
  abs() {
    return new _native_typed_data.NativeFloat64x2._doubles(this.x[$abs](), this.y[$abs]());
  }
  clamp(lowerLimit, upperLimit) {
    if (lowerLimit == null) dart.nullFailed(L57, 1748, 29, "lowerLimit");
    if (upperLimit == null) dart.nullFailed(L57, 1748, 51, "upperLimit");
    let _lx = lowerLimit.x;
    let _ly = lowerLimit.y;
    let _ux = upperLimit.x;
    let _uy = upperLimit.y;
    let _x = this.x;
    let _y = this.y;
    _x = dart.notNull(_x) > dart.notNull(_ux) ? _ux : _x;
    _y = dart.notNull(_y) > dart.notNull(_uy) ? _uy : _y;
    _x = dart.notNull(_x) < dart.notNull(_lx) ? _lx : _x;
    _y = dart.notNull(_y) < dart.notNull(_ly) ? _ly : _y;
    return new _native_typed_data.NativeFloat64x2._doubles(_x, _y);
  }
  get signMask() {
    let view = _native_typed_data.NativeFloat64x2._uint32View;
    _native_typed_data.NativeFloat64x2._list[$_set](0, this.x);
    _native_typed_data.NativeFloat64x2._list[$_set](1, this.y);
    let mx = (dart.notNull(view[$_get](1)) & 2147483648) >>> 31;
    let my = (dart.notNull(view[$_get](3)) & 2147483648) >>> 31;
    return (mx | my << 1 >>> 0) >>> 0;
  }
  withX(x) {
    if (x == null) dart.nullFailed(L57, 1774, 26, "x");
    if (!(typeof x == 'number')) dart.throw(new core.ArgumentError.new(x));
    return new _native_typed_data.NativeFloat64x2._doubles(x, this.y);
  }
  withY(y) {
    if (y == null) dart.nullFailed(L57, 1780, 26, "y");
    if (!(typeof y == 'number')) dart.throw(new core.ArgumentError.new(y));
    return new _native_typed_data.NativeFloat64x2._doubles(this.x, y);
  }
  min(other) {
    if (other == null) dart.nullFailed(L57, 1786, 27, "other");
    return new _native_typed_data.NativeFloat64x2._doubles(dart.notNull(this.x) < dart.notNull(other.x) ? this.x : other.x, dart.notNull(this.y) < dart.notNull(other.y) ? this.y : other.y);
  }
  max(other) {
    if (other == null) dart.nullFailed(L57, 1792, 27, "other");
    return new _native_typed_data.NativeFloat64x2._doubles(dart.notNull(this.x) > dart.notNull(other.x) ? this.x : other.x, dart.notNull(this.y) > dart.notNull(other.y) ? this.y : other.y);
  }
  sqrt() {
    return new _native_typed_data.NativeFloat64x2._doubles(math.sqrt(this.x), math.sqrt(this.y));
  }
};
(_native_typed_data.NativeFloat64x2.new = function(x, y) {
  if (x == null) dart.nullFailed(L57, 1696, 24, "x");
  if (y == null) dart.nullFailed(L57, 1696, 32, "y");
  this[x$1] = x;
  this[y$1] = y;
  if (!(typeof this.x == 'number')) dart.throw(new core.ArgumentError.new(this.x));
  if (!(typeof this.y == 'number')) dart.throw(new core.ArgumentError.new(this.y));
}).prototype = _native_typed_data.NativeFloat64x2.prototype;
(_native_typed_data.NativeFloat64x2.splat = function(v) {
  if (v == null) dart.nullFailed(L57, 1701, 32, "v");
  _native_typed_data.NativeFloat64x2.new.call(this, v, v);
}).prototype = _native_typed_data.NativeFloat64x2.prototype;
(_native_typed_data.NativeFloat64x2.zero = function() {
  _native_typed_data.NativeFloat64x2.splat.call(this, 0.0);
}).prototype = _native_typed_data.NativeFloat64x2.prototype;
(_native_typed_data.NativeFloat64x2.fromFloat32x4 = function(v) {
  if (v == null) dart.nullFailed(L57, 1705, 43, "v");
  _native_typed_data.NativeFloat64x2.new.call(this, v.x, v.y);
}).prototype = _native_typed_data.NativeFloat64x2.prototype;
(_native_typed_data.NativeFloat64x2._doubles = function(x, y) {
  if (x == null) dart.nullFailed(L57, 1708, 33, "x");
  if (y == null) dart.nullFailed(L57, 1708, 41, "y");
  this[x$1] = x;
  this[y$1] = y;
  ;
}).prototype = _native_typed_data.NativeFloat64x2.prototype;
dart.addTypeTests(_native_typed_data.NativeFloat64x2);
dart.addTypeCaches(_native_typed_data.NativeFloat64x2);
_native_typed_data.NativeFloat64x2[dart.implements] = () => [typed_data.Float64x2];
dart.setMethodSignature(_native_typed_data.NativeFloat64x2, () => ({
  __proto__: dart.getMethods(_native_typed_data.NativeFloat64x2.__proto__),
  '+': dart.fnType(typed_data.Float64x2, [typed_data.Float64x2]),
  _negate: dart.fnType(typed_data.Float64x2, []),
  '-': dart.fnType(typed_data.Float64x2, [typed_data.Float64x2]),
  '*': dart.fnType(typed_data.Float64x2, [typed_data.Float64x2]),
  '/': dart.fnType(typed_data.Float64x2, [typed_data.Float64x2]),
  scale: dart.fnType(typed_data.Float64x2, [core.double]),
  abs: dart.fnType(typed_data.Float64x2, []),
  clamp: dart.fnType(typed_data.Float64x2, [typed_data.Float64x2, typed_data.Float64x2]),
  withX: dart.fnType(typed_data.Float64x2, [core.double]),
  withY: dart.fnType(typed_data.Float64x2, [core.double]),
  min: dart.fnType(typed_data.Float64x2, [typed_data.Float64x2]),
  max: dart.fnType(typed_data.Float64x2, [typed_data.Float64x2]),
  sqrt: dart.fnType(typed_data.Float64x2, [])
}));
dart.setGetterSignature(_native_typed_data.NativeFloat64x2, () => ({
  __proto__: dart.getGetters(_native_typed_data.NativeFloat64x2.__proto__),
  signMask: core.int
}));
dart.setLibraryUri(_native_typed_data.NativeFloat64x2, L58);
dart.setFieldSignature(_native_typed_data.NativeFloat64x2, () => ({
  __proto__: dart.getFields(_native_typed_data.NativeFloat64x2.__proto__),
  x: dart.finalFieldType(core.double),
  y: dart.finalFieldType(core.double)
}));
dart.defineExtensionMethods(_native_typed_data.NativeFloat64x2, ['toString']);
dart.defineLazy(_native_typed_data.NativeFloat64x2, {
  /*_native_typed_data.NativeFloat64x2._list*/get _list() {
    return _native_typed_data.NativeFloat64List.new(2);
  },
  set _list(_) {},
  /*_native_typed_data.NativeFloat64x2._uint32View*/get _uint32View() {
    return _native_typed_data.NativeFloat64x2._list.buffer[$asUint32List]();
  },
  set _uint32View(_) {}
}, false);
_native_typed_data._checkLength = function _checkLength(length) {
  if (!core.int.is(length)) dart.throw(new core.ArgumentError.new(dart.str("Invalid length ") + dart.str(length)));
  return length;
};
_native_typed_data._checkViewArguments = function _checkViewArguments(buffer, offsetInBytes, length) {
  if (!_native_typed_data.NativeByteBuffer.is(buffer)) {
    dart.throw(new core.ArgumentError.new("Invalid view buffer"));
  }
  if (!core.int.is(offsetInBytes)) {
    dart.throw(new core.ArgumentError.new(dart.str("Invalid view offsetInBytes ") + dart.str(offsetInBytes)));
  }
  if (!intN().is(length)) {
    dart.throw(new core.ArgumentError.new(dart.str("Invalid view length ") + dart.str(length)));
  }
};
_native_typed_data._ensureNativeList = function _ensureNativeList(list) {
  if (list == null) dart.nullFailed(L57, 373, 29, "list");
  if (_interceptors.JSIndexable.is(list)) return list;
  let result = core.List.filled(list[$length], null);
  for (let i = 0; i < dart.notNull(list[$length]); i = i + 1) {
    result[$_set](i, list[$_get](i));
  }
  return result;
};
_native_typed_data._isInvalidArrayIndex = function _isInvalidArrayIndex(index) {
  if (index == null) dart.nullFailed(L57, 1805, 31, "index");
  return index >>> 0 !== index;
};
_native_typed_data._checkValidIndex = function _checkValidIndex(index, list, length) {
  if (index == null) dart.nullFailed(L57, 1812, 27, "index");
  if (list == null) dart.nullFailed(L57, 1812, 39, "list");
  if (length == null) dart.nullFailed(L57, 1812, 49, "length");
  if (dart.test(_native_typed_data._isInvalidArrayIndex(index)) || index >= dart.notNull(length)) {
    dart.throw(_js_helper.diagnoseIndexError(list, index));
  }
};
_native_typed_data._checkValidRange = function _checkValidRange(start, end, length) {
  if (start == null) dart.nullFailed(L57, 1825, 26, "start");
  if (length == null) dart.nullFailed(L57, 1825, 47, "length");
  if (dart.test(_native_typed_data._isInvalidArrayIndex(start)) || (end == null ? dart.notNull(start) > dart.notNull(length) : dart.test(_native_typed_data._isInvalidArrayIndex(end)) || dart.notNull(start) > dart.notNull(end) || dart.notNull(end) > dart.notNull(length))) {
    dart.throw(_js_helper.diagnoseRangeError(start, end, length));
  }
  if (end == null) return length;
  return end;
};
var ___AsyncStarImpl_controller = dart.privateName(async, "_#_AsyncStarImpl#controller");
var ___AsyncStarImpl_jsIterator = dart.privateName(async, "_#_AsyncStarImpl#jsIterator");
var _handleErrorCallback = dart.privateName(async, "_handleErrorCallback");
var _runBodyCallback = dart.privateName(async, "_runBodyCallback");
var _thenAwait = dart.privateName(async, "_thenAwait");
var _fatal = dart.privateName(async, "_fatal");
const _is__AsyncStarImpl_default = Symbol('_is__AsyncStarImpl_default');
async._AsyncStarImpl$ = dart.generic(T => {
  var StreamControllerOfT = () => (StreamControllerOfT = dart.constFn(async.StreamController$(T)))();
  var StreamOfT = () => (StreamOfT = dart.constFn(async.Stream$(T)))();
  class _AsyncStarImpl extends core.Object {
    get controller() {
      let t78;
      t78 = this[___AsyncStarImpl_controller];
      return t78 == null ? dart.throw(new _internal.LateInitializationErrorImpl.new("Field 'controller' has not been initialized.")) : t78;
    }
    set controller(t78) {
      StreamControllerOfT().as(t78);
      if (t78 == null) dart.nullFailed(L60, 229, 28, "null");
      this[___AsyncStarImpl_controller] = t78;
    }
    get jsIterator() {
      let t79;
      t79 = this[___AsyncStarImpl_jsIterator];
      return t79 == null ? dart.throw(new _internal.LateInitializationErrorImpl.new("Field 'jsIterator' has not been initialized.")) : t79;
    }
    set jsIterator(t79) {
      if (t79 == null) dart.nullFailed(L60, 245, 15, "null");
      this[___AsyncStarImpl_jsIterator] = t79;
    }
    get stream() {
      return this.controller.stream;
    }
    get handleError() {
      if (this[_handleErrorCallback] == null) {
        this[_handleErrorCallback] = dart.fn((error, stackTrace) => {
          if (error == null) dart.nullFailed(L60, 282, 31, "error");
          if (stackTrace == null) dart.nullFailed(L60, 282, 49, "stackTrace");
          try {
            this.jsIterator.throw(dart.createErrorWithStack(error, stackTrace));
          } catch (e$) {
            let e = dart.getThrown(e$);
            let newStack = dart.stackTrace(e$);
            if (core.Object.is(e)) {
              this.addError(e, newStack);
            } else
              throw e$;
          }
        }, ObjectAndStackTraceToNullN());
        let zone = async.Zone.current;
        if (zone != async.Zone.root) {
          this[_handleErrorCallback] = zone.bindBinaryCallback(core.Null, core.Object, core.StackTrace, dart.nullCheck(this[_handleErrorCallback]));
        }
      }
      return dart.nullCheck(this[_handleErrorCallback]);
    }
    scheduleGenerator() {
      if (this.isScheduled || dart.test(this.controller.isPaused) || this.isSuspendedAtYieldStar) {
        return;
      }
      this.isScheduled = true;
      let zone = async.Zone.current;
      if (this[_runBodyCallback] == null) {
        this[_runBodyCallback] = this.runBody.bind(this);
        if (zone != async.Zone.root) {
          let registered = zone.registerUnaryCallback(dart.void, ObjectN(), dart.nullCheck(this[_runBodyCallback]));
          this[_runBodyCallback] = dart.fn((arg = null) => zone.runUnaryGuarded(ObjectN(), registered, arg), ObjectNTovoid());
        }
      }
      zone.scheduleMicrotask(dart.nullCheck(this[_runBodyCallback]));
    }
    runBody(awaitValue) {
      this.isScheduled = false;
      this.isSuspendedAtYield = false;
      this.isSuspendedAtAwait = false;
      let iterResult = null;
      try {
        iterResult = this.jsIterator.next(awaitValue);
      } catch (e$) {
        let e = dart.getThrown(e$);
        let s = dart.stackTrace(e$);
        if (core.Object.is(e)) {
          this.addError(e, s);
          return;
        } else
          throw e$;
      }
      if (iterResult.done) {
        this.close();
        return;
      }
      if (this.isSuspendedAtYield || this.isSuspendedAtYieldStar) return;
      this.isSuspendedAtAwait = true;
      let value = iterResult.value;
      let f = null;
      if (async._Future.is(value)) {
        f = value;
      } else if (async.Future.is(value)) {
        f = new (_FutureOfObjectN()).new();
        async._Future._chainForeignFuture(value, f);
      } else {
        f = new (_FutureOfObjectN()).value(value);
      }
      f[_thenAwait](dart.void, dart.nullCheck(this[_runBodyCallback]), this.handleError);
    }
    add(event) {
      T.as(event);
      if (!this.onListenReceived) this[_fatal]("yield before stream is listened to");
      if (this.isSuspendedAtYield) this[_fatal]("unexpected yield");
      if (!dart.test(this.controller.hasListener)) {
        return true;
      }
      this.controller.add(event);
      this.scheduleGenerator();
      this.isSuspendedAtYield = true;
      return false;
    }
    addStream(stream) {
      StreamOfT().as(stream);
      if (stream == null) dart.nullFailed(L60, 402, 28, "stream");
      if (!this.onListenReceived) this[_fatal]("yield* before stream is listened to");
      if (!dart.test(this.controller.hasListener)) return true;
      this.isSuspendedAtYieldStar = true;
      let whenDoneAdding = this.controller.addStream(stream, {cancelOnError: false});
      whenDoneAdding.then(core.Null, dart.fn(_ => {
        this.isSuspendedAtYieldStar = false;
        this.scheduleGenerator();
        if (!this.isScheduled) this.isSuspendedAtYield = true;
      }, dynamicToNullN()), {onError: this.handleError});
      return false;
    }
    addError(error, stackTrace) {
      if (error == null) dart.nullFailed(L60, 416, 24, "error");
      if (stackTrace == null) dart.nullFailed(L60, 416, 42, "stackTrace");
      core.ArgumentError.checkNotNull(core.Object, error, "error");
      let completer = this.cancellationCompleter;
      if (completer != null && !dart.test(completer.isCompleted)) {
        completer.completeError(error, stackTrace);
      } else if (dart.test(this.controller.hasListener)) {
        this.controller.addError(error, stackTrace);
      }
      this.close();
    }
    close() {
      let completer = this.cancellationCompleter;
      if (completer != null && !dart.test(completer.isCompleted)) {
        completer.complete();
      }
      this.controller.close();
    }
    onListen() {
      if (!!this.onListenReceived) dart.assertFailed(null, L60, 444, 12, "!onListenReceived");
      this.onListenReceived = true;
      this.scheduleGenerator();
    }
    onResume() {
      if (this.isSuspendedAtYield) {
        this.scheduleGenerator();
      }
    }
    onCancel() {
      if (dart.test(this.controller.isClosed)) {
        return null;
      }
      if (this.cancellationCompleter == null) {
        this.cancellationCompleter = async.Completer.new();
        if (this.isSuspendedAtYield) {
          this.scheduleGenerator();
        }
      }
      return dart.nullCheck(this.cancellationCompleter).future;
    }
    [_fatal](message) {
      if (message == null) dart.nullFailed(L60, 471, 17, "message");
      return dart.throw(new core.StateError.new(message));
    }
  }
  (_AsyncStarImpl.new = function(initGenerator) {
    if (initGenerator == null) dart.nullFailed(L60, 250, 23, "initGenerator");
    this[___AsyncStarImpl_controller] = null;
    this.isSuspendedAtYieldStar = false;
    this.onListenReceived = false;
    this.isScheduled = false;
    this.isSuspendedAtYield = false;
    this.isSuspendedAtAwait = false;
    this.cancellationCompleter = null;
    this[___AsyncStarImpl_jsIterator] = null;
    this[_handleErrorCallback] = null;
    this[_runBodyCallback] = null;
    this.initGenerator = initGenerator;
    this.controller = StreamControllerOfT().new({onListen: this.onListen.bind(this), onResume: this.onResume.bind(this), onCancel: this.onCancel.bind(this)});
    this.jsIterator = this.initGenerator(this)[Symbol.iterator]();
  }).prototype = _AsyncStarImpl.prototype;
  dart.addTypeTests(_AsyncStarImpl);
  _AsyncStarImpl.prototype[_is__AsyncStarImpl_default] = true;
  dart.addTypeCaches(_AsyncStarImpl);
  dart.setMethodSignature(_AsyncStarImpl, () => ({
    __proto__: dart.getMethods(_AsyncStarImpl.__proto__),
    scheduleGenerator: dart.fnType(dart.void, []),
    runBody: dart.fnType(dart.void, [dart.dynamic]),
    add: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    addStream: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    addError: dart.fnType(dart.void, [core.Object, core.StackTrace]),
    close: dart.fnType(dart.void, []),
    onListen: dart.fnType(dart.dynamic, []),
    onResume: dart.fnType(dart.dynamic, []),
    onCancel: dart.fnType(dart.dynamic, []),
    [_fatal]: dart.fnType(dart.dynamic, [core.String])
  }));
  dart.setGetterSignature(_AsyncStarImpl, () => ({
    __proto__: dart.getGetters(_AsyncStarImpl.__proto__),
    controller: async.StreamController$(T),
    jsIterator: core.Object,
    stream: async.Stream$(T),
    handleError: dart.fnType(core.Null, [core.Object, core.StackTrace])
  }));
  dart.setSetterSignature(_AsyncStarImpl, () => ({
    __proto__: dart.getSetters(_AsyncStarImpl.__proto__),
    controller: dart.nullable(core.Object),
    jsIterator: core.Object
  }));
  dart.setLibraryUri(_AsyncStarImpl, L29);
  dart.setFieldSignature(_AsyncStarImpl, () => ({
    __proto__: dart.getFields(_AsyncStarImpl.__proto__),
    [___AsyncStarImpl_controller]: dart.fieldType(dart.nullable(async.StreamController$(T))),
    initGenerator: dart.fieldType(dart.fnType(core.Object, [async._AsyncStarImpl$(T)])),
    isSuspendedAtYieldStar: dart.fieldType(core.bool),
    onListenReceived: dart.fieldType(core.bool),
    isScheduled: dart.fieldType(core.bool),
    isSuspendedAtYield: dart.fieldType(core.bool),
    isSuspendedAtAwait: dart.fieldType(core.bool),
    cancellationCompleter: dart.fieldType(dart.nullable(async.Completer)),
    [___AsyncStarImpl_jsIterator]: dart.fieldType(dart.nullable(core.Object)),
    [_handleErrorCallback]: dart.fieldType(dart.nullable(dart.fnType(core.Null, [core.Object, core.StackTrace]))),
    [_runBodyCallback]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [], [dart.nullable(core.Object)])))
  }));
  return _AsyncStarImpl;
});
async._AsyncStarImpl = async._AsyncStarImpl$();
dart.addTypeTests(async._AsyncStarImpl, _is__AsyncStarImpl_default);
var _controller$ = dart.privateName(async, "_controller");
var _subscribe = dart.privateName(async, "_subscribe");
var _createSubscription = dart.privateName(async, "_createSubscription");
var _onListen$ = dart.privateName(async, "_onListen");
const _is__StreamImpl_default = Symbol('_is__StreamImpl_default');
async._StreamImpl$ = dart.generic(T => {
  var _BufferingStreamSubscriptionOfT = () => (_BufferingStreamSubscriptionOfT = dart.constFn(async._BufferingStreamSubscription$(T)))();
  class _StreamImpl extends async.Stream$(T) {
    listen(onData, opts) {
      let onError = opts && 'onError' in opts ? opts.onError : null;
      let onDone = opts && 'onDone' in opts ? opts.onDone : null;
      let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
      cancelOnError == null ? cancelOnError = false : null;
      let subscription = this[_createSubscription](onData, onError, onDone, cancelOnError);
      this[_onListen$](subscription);
      return subscription;
    }
    [_createSubscription](onData, onError, onDone, cancelOnError) {
      if (cancelOnError == null) dart.nullFailed(L63, 501, 47, "cancelOnError");
      return new (_BufferingStreamSubscriptionOfT()).new(onData, onError, onDone, cancelOnError);
    }
    [_onListen$](subscription) {
      if (subscription == null) dart.nullFailed(L63, 507, 37, "subscription");
    }
  }
  (_StreamImpl.new = function() {
    _StreamImpl.__proto__.new.call(this);
    ;
  }).prototype = _StreamImpl.prototype;
  dart.addTypeTests(_StreamImpl);
  _StreamImpl.prototype[_is__StreamImpl_default] = true;
  dart.addTypeCaches(_StreamImpl);
  dart.setMethodSignature(_StreamImpl, () => ({
    __proto__: dart.getMethods(_StreamImpl.__proto__),
    listen: dart.fnType(async.StreamSubscription$(T), [dart.nullable(dart.fnType(dart.void, [T]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {}),
    [_createSubscription]: dart.fnType(async.StreamSubscription$(T), [dart.nullable(dart.fnType(dart.void, [T])), dart.nullable(core.Function), dart.nullable(dart.fnType(dart.void, [])), core.bool]),
    [_onListen$]: dart.fnType(dart.void, [async.StreamSubscription])
  }));
  dart.setLibraryUri(_StreamImpl, L29);
  return _StreamImpl;
});
async._StreamImpl = async._StreamImpl$();
dart.addTypeTests(async._StreamImpl, _is__StreamImpl_default);
const _is__ControllerStream_default = Symbol('_is__ControllerStream_default');
async._ControllerStream$ = dart.generic(T => {
  class _ControllerStream extends async._StreamImpl$(T) {
    [_createSubscription](onData, onError, onDone, cancelOnError) {
      if (cancelOnError == null) dart.nullFailed(L62, 859, 51, "cancelOnError");
      return this[_controller$][_subscribe](onData, onError, onDone, cancelOnError);
    }
    get hashCode() {
      return (dart.notNull(dart.hashCode(this[_controller$])) ^ 892482866) >>> 0;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      return async._ControllerStream.is(other) && other[_controller$] == this[_controller$];
    }
  }
  (_ControllerStream.new = function(_controller) {
    if (_controller == null) dart.nullFailed(L62, 856, 26, "_controller");
    this[_controller$] = _controller;
    _ControllerStream.__proto__.new.call(this);
    ;
  }).prototype = _ControllerStream.prototype;
  dart.addTypeTests(_ControllerStream);
  _ControllerStream.prototype[_is__ControllerStream_default] = true;
  dart.addTypeCaches(_ControllerStream);
  dart.setLibraryUri(_ControllerStream, L29);
  dart.setFieldSignature(_ControllerStream, () => ({
    __proto__: dart.getFields(_ControllerStream.__proto__),
    [_controller$]: dart.fieldType(async._StreamControllerLifecycle$(T))
  }));
  dart.defineExtensionMethods(_ControllerStream, ['_equals']);
  dart.defineExtensionAccessors(_ControllerStream, ['hashCode']);
  return _ControllerStream;
});
async._ControllerStream = async._ControllerStream$();
dart.addTypeTests(async._ControllerStream, _is__ControllerStream_default);
const _is__BroadcastStream_default = Symbol('_is__BroadcastStream_default');
async._BroadcastStream$ = dart.generic(T => {
  class _BroadcastStream extends async._ControllerStream$(T) {
    get isBroadcast() {
      return true;
    }
  }
  (_BroadcastStream.new = function(controller) {
    if (controller == null) dart.nullFailed(L61, 8, 50, "controller");
    _BroadcastStream.__proto__.new.call(this, controller);
    ;
  }).prototype = _BroadcastStream.prototype;
  dart.addTypeTests(_BroadcastStream);
  _BroadcastStream.prototype[_is__BroadcastStream_default] = true;
  dart.addTypeCaches(_BroadcastStream);
  dart.setLibraryUri(_BroadcastStream, L29);
  return _BroadcastStream;
});
async._BroadcastStream = async._BroadcastStream$();
dart.addTypeTests(async._BroadcastStream, _is__BroadcastStream_default);
var _eventState = dart.privateName(async, "_eventState");
var _next$0 = dart.privateName(async, "_next");
var _previous$0 = dart.privateName(async, "_previous");
var _expectsEvent = dart.privateName(async, "_expectsEvent");
var _toggleEventId = dart.privateName(async, "_toggleEventId");
var _isFiring = dart.privateName(async, "_isFiring");
var _setRemoveAfterFiring = dart.privateName(async, "_setRemoveAfterFiring");
var _removeAfterFiring = dart.privateName(async, "_removeAfterFiring");
var _onPause = dart.privateName(async, "_onPause");
var _onResume = dart.privateName(async, "_onResume");
var _recordCancel = dart.privateName(async, "_recordCancel");
var _onCancel = dart.privateName(async, "_onCancel");
var _recordPause = dart.privateName(async, "_recordPause");
var _recordResume = dart.privateName(async, "_recordResume");
var _cancelFuture = dart.privateName(async, "_cancelFuture");
var _pending$ = dart.privateName(async, "_pending");
var _zone$ = dart.privateName(async, "_zone");
var _state = dart.privateName(async, "_state");
var _onData$ = dart.privateName(async, "_onData");
var _onError = dart.privateName(async, "_onError");
var _onDone$ = dart.privateName(async, "_onDone");
var _setPendingEvents = dart.privateName(async, "_setPendingEvents");
var C35;
var C36;
var C37;
var _isCanceled = dart.privateName(async, "_isCanceled");
var _isPaused = dart.privateName(async, "_isPaused");
var _isInputPaused = dart.privateName(async, "_isInputPaused");
var _inCallback = dart.privateName(async, "_inCallback");
var _guardCallback = dart.privateName(async, "_guardCallback");
var _decrementPauseCount = dart.privateName(async, "_decrementPauseCount");
var _hasPending = dart.privateName(async, "_hasPending");
var _mayResumeInput = dart.privateName(async, "_mayResumeInput");
var _cancel = dart.privateName(async, "_cancel");
var _isClosed = dart.privateName(async, "_isClosed");
var _waitsForCancel = dart.privateName(async, "_waitsForCancel");
var _canFire = dart.privateName(async, "_canFire");
var _cancelOnError = dart.privateName(async, "_cancelOnError");
var _sendData = dart.privateName(async, "_sendData");
var _addPending = dart.privateName(async, "_addPending");
var _sendError = dart.privateName(async, "_sendError");
var _sendDone = dart.privateName(async, "_sendDone");
var C38;
var _close = dart.privateName(async, "_close");
var _checkState = dart.privateName(async, "_checkState");
const _is__BufferingStreamSubscription_default = Symbol('_is__BufferingStreamSubscription_default');
async._BufferingStreamSubscription$ = dart.generic(T => {
  var _PendingEventsOfT = () => (_PendingEventsOfT = dart.constFn(async._PendingEvents$(T)))();
  var _PendingEventsNOfT = () => (_PendingEventsNOfT = dart.constFn(dart.nullable(_PendingEventsOfT())))();
  var _DelayedDataOfT = () => (_DelayedDataOfT = dart.constFn(async._DelayedData$(T)))();
  var _StreamImplEventsOfT = () => (_StreamImplEventsOfT = dart.constFn(async._StreamImplEvents$(T)))();
  var _StreamImplEventsNOfT = () => (_StreamImplEventsNOfT = dart.constFn(dart.nullable(_StreamImplEventsOfT())))();
  class _BufferingStreamSubscription extends core.Object {
    [_setPendingEvents](pendingEvents) {
      _PendingEventsNOfT().as(pendingEvents);
      if (!(this[_pending$] == null)) dart.assertFailed(null, L63, 129, 12, "_pending == null");
      if (pendingEvents == null) return;
      this[_pending$] = pendingEvents;
      if (!dart.test(pendingEvents.isEmpty)) {
        this[_state] = (dart.notNull(this[_state]) | 64) >>> 0;
        pendingEvents.schedule(this);
      }
    }
    onData(handleData) {
      this[_onData$] = async._BufferingStreamSubscription._registerDataHandler(T, this[_zone$], handleData);
    }
    static _registerDataHandler(T, zone, handleData) {
      let t82;
      if (zone == null) dart.nullFailed(L63, 145, 12, "zone");
      return zone.registerUnaryCallback(dart.void, T, (t82 = handleData, t82 == null ? C35 || CT.C35 : t82));
    }
    onError(handleError) {
      this[_onError] = async._BufferingStreamSubscription._registerErrorHandler(this[_zone$], handleError);
    }
    static _registerErrorHandler(zone, handleError) {
      if (zone == null) dart.nullFailed(L63, 153, 46, "zone");
      handleError == null ? handleError = C36 || CT.C36 : null;
      if (ObjectAndStackTraceTovoid().is(handleError)) {
        return zone.registerBinaryCallback(dart.dynamic, core.Object, core.StackTrace, handleError);
      }
      if (ObjectTovoid().is(handleError)) {
        return zone.registerUnaryCallback(dart.dynamic, core.Object, handleError);
      }
      dart.throw(new core.ArgumentError.new(dart.str("handleError callback must take either an Object ") + dart.str("(the error), or both an Object (the error) and a StackTrace.")));
    }
    onDone(handleDone) {
      this[_onDone$] = async._BufferingStreamSubscription._registerDoneHandler(this[_zone$], handleDone);
    }
    static _registerDoneHandler(zone, handleDone) {
      let t82;
      if (zone == null) dart.nullFailed(L63, 172, 12, "zone");
      return zone.registerCallback(dart.void, (t82 = handleDone, t82 == null ? C37 || CT.C37 : t82));
    }
    pause(resumeSignal = null) {
      let t82, t82$;
      if (dart.test(this[_isCanceled])) return;
      let wasPaused = this[_isPaused];
      let wasInputPaused = this[_isInputPaused];
      this[_state] = (dart.notNull(this[_state]) + 128 | 4) >>> 0;
      t82 = resumeSignal;
      t82 == null ? null : t82.whenComplete(dart.bind(this, 'resume'));
      if (!dart.test(wasPaused)) {
        t82$ = this[_pending$];
        t82$ == null ? null : t82$.cancelSchedule();
      }
      if (!dart.test(wasInputPaused) && !dart.test(this[_inCallback])) this[_guardCallback](dart.bind(this, _onPause));
    }
    resume() {
      if (dart.test(this[_isCanceled])) return;
      if (dart.test(this[_isPaused])) {
        this[_decrementPauseCount]();
        if (!dart.test(this[_isPaused])) {
          if (dart.test(this[_hasPending]) && !dart.test(dart.nullCheck(this[_pending$]).isEmpty)) {
            dart.nullCheck(this[_pending$]).schedule(this);
          } else {
            if (!dart.test(this[_mayResumeInput])) dart.assertFailed(null, L63, 196, 18, "_mayResumeInput");
            this[_state] = (dart.notNull(this[_state]) & ~4 >>> 0) >>> 0;
            if (!dart.test(this[_inCallback])) this[_guardCallback](dart.bind(this, _onResume));
          }
        }
      }
    }
    cancel() {
      let t82;
      this[_state] = (dart.notNull(this[_state]) & ~16 >>> 0) >>> 0;
      if (!dart.test(this[_isCanceled])) {
        this[_cancel]();
      }
      t82 = this[_cancelFuture];
      return t82 == null ? async.Future._nullFuture : t82;
    }
    asFuture(E, futureValue = null) {
      let resultValue = null;
      if (futureValue == null) {
        if (!dart.test(_internal.typeAcceptsNull(E))) {
          dart.throw(new core.ArgumentError.notNull("futureValue"));
        }
        resultValue = E.as(futureValue);
      } else {
        resultValue = futureValue;
      }
      let result = new (async._Future$(E)).new();
      this[_onDone$] = dart.fn(() => {
        result[_complete](resultValue);
      }, VoidToNullN());
      this[_onError] = dart.fn((error, stackTrace) => {
        if (error == null) dart.nullFailed(L63, 230, 24, "error");
        if (stackTrace == null) dart.nullFailed(L63, 230, 42, "stackTrace");
        let cancelFuture = this.cancel();
        if (cancelFuture != async.Future._nullFuture) {
          cancelFuture.whenComplete(dart.fn(() => {
            result[_completeError](error, stackTrace);
          }, VoidToNullN()));
        } else {
          result[_completeError](error, stackTrace);
        }
      }, ObjectAndStackTraceToNullN());
      return result;
    }
    get [_isInputPaused]() {
      return (dart.notNull(this[_state]) & 4) !== 0;
    }
    get [_isClosed]() {
      return (dart.notNull(this[_state]) & 2) !== 0;
    }
    get [_isCanceled]() {
      return (dart.notNull(this[_state]) & 8) !== 0;
    }
    get [_waitsForCancel]() {
      return (dart.notNull(this[_state]) & 16) !== 0;
    }
    get [_inCallback]() {
      return (dart.notNull(this[_state]) & 32) !== 0;
    }
    get [_hasPending]() {
      return (dart.notNull(this[_state]) & 64) !== 0;
    }
    get [_isPaused]() {
      return dart.notNull(this[_state]) >= 128;
    }
    get [_canFire]() {
      return dart.notNull(this[_state]) < 32;
    }
    get [_mayResumeInput]() {
      let t82, t82$;
      return !dart.test(this[_isPaused]) && dart.test((t82$ = (t82 = this[_pending$], t82 == null ? null : t82.isEmpty), t82$ == null ? true : t82$));
    }
    get [_cancelOnError]() {
      return (dart.notNull(this[_state]) & 1) !== 0;
    }
    get isPaused() {
      return this[_isPaused];
    }
    [_cancel]() {
      this[_state] = (dart.notNull(this[_state]) | 8) >>> 0;
      if (dart.test(this[_hasPending])) {
        dart.nullCheck(this[_pending$]).cancelSchedule();
      }
      if (!dart.test(this[_inCallback])) this[_pending$] = null;
      this[_cancelFuture] = this[_onCancel]();
    }
    [_decrementPauseCount]() {
      if (!dart.test(this[_isPaused])) dart.assertFailed(null, L63, 275, 12, "_isPaused");
      this[_state] = dart.notNull(this[_state]) - 128;
    }
    [_add](data) {
      T.as(data);
      if (!!dart.test(this[_isClosed])) dart.assertFailed(null, L63, 282, 12, "!_isClosed");
      if (dart.test(this[_isCanceled])) return;
      if (dart.test(this[_canFire])) {
        this[_sendData](data);
      } else {
        this[_addPending](new (_DelayedDataOfT()).new(data));
      }
    }
    [_addError](error, stackTrace) {
      if (error == null) dart.nullFailed(L63, 291, 25, "error");
      if (stackTrace == null) dart.nullFailed(L63, 291, 43, "stackTrace");
      if (dart.test(this[_isCanceled])) return;
      if (dart.test(this[_canFire])) {
        this[_sendError](error, stackTrace);
      } else {
        this[_addPending](new async._DelayedError.new(error, stackTrace));
      }
    }
    [_close]() {
      if (!!dart.test(this[_isClosed])) dart.assertFailed(null, L63, 301, 12, "!_isClosed");
      if (dart.test(this[_isCanceled])) return;
      this[_state] = (dart.notNull(this[_state]) | 2) >>> 0;
      if (dart.test(this[_canFire])) {
        this[_sendDone]();
      } else {
        this[_addPending](C38 || CT.C38);
      }
    }
    [_onPause]() {
      if (!dart.test(this[_isInputPaused])) dart.assertFailed(null, L63, 316, 12, "_isInputPaused");
    }
    [_onResume]() {
      if (!!dart.test(this[_isInputPaused])) dart.assertFailed(null, L63, 320, 12, "!_isInputPaused");
    }
    [_onCancel]() {
      if (!dart.test(this[_isCanceled])) dart.assertFailed(null, L63, 324, 12, "_isCanceled");
      return null;
    }
    [_addPending](event) {
      if (event == null) dart.nullFailed(L63, 336, 34, "event");
      let pending = _StreamImplEventsNOfT().as(this[_pending$]);
      pending == null ? pending = new (_StreamImplEventsOfT()).new() : null;
      this[_pending$] = pending;
      pending.add(event);
      if (!dart.test(this[_hasPending])) {
        this[_state] = (dart.notNull(this[_state]) | 64) >>> 0;
        if (!dart.test(this[_isPaused])) {
          pending.schedule(this);
        }
      }
    }
    [_sendData](data) {
      if (!!dart.test(this[_isCanceled])) dart.assertFailed(null, L63, 352, 12, "!_isCanceled");
      if (!!dart.test(this[_isPaused])) dart.assertFailed(null, L63, 353, 12, "!_isPaused");
      if (!!dart.test(this[_inCallback])) dart.assertFailed(null, L63, 354, 12, "!_inCallback");
      let wasInputPaused = this[_isInputPaused];
      this[_state] = (dart.notNull(this[_state]) | 32) >>> 0;
      this[_zone$].runUnaryGuarded(T, this[_onData$], data);
      this[_state] = (dart.notNull(this[_state]) & ~32 >>> 0) >>> 0;
      this[_checkState](wasInputPaused);
    }
    [_sendError](error, stackTrace) {
      if (error == null) dart.nullFailed(L63, 362, 26, "error");
      if (stackTrace == null) dart.nullFailed(L63, 362, 44, "stackTrace");
      if (!!dart.test(this[_isCanceled])) dart.assertFailed(null, L63, 363, 12, "!_isCanceled");
      if (!!dart.test(this[_isPaused])) dart.assertFailed(null, L63, 364, 12, "!_isPaused");
      if (!!dart.test(this[_inCallback])) dart.assertFailed(null, L63, 365, 12, "!_inCallback");
      let wasInputPaused = this[_isInputPaused];
      const sendError = () => {
        if (dart.test(this[_isCanceled]) && !dart.test(this[_waitsForCancel])) return;
        this[_state] = (dart.notNull(this[_state]) | 32) >>> 0;
        let onError = this[_onError];
        if (ObjectAndStackTraceTovoid().is(onError)) {
          this[_zone$].runBinaryGuarded(core.Object, core.StackTrace, onError, error, stackTrace);
        } else {
          this[_zone$].runUnaryGuarded(core.Object, ObjectTovoid().as(this[_onError]), error);
        }
        this[_state] = (dart.notNull(this[_state]) & ~32 >>> 0) >>> 0;
      };
      dart.fn(sendError, VoidTovoid());
      if (dart.test(this[_cancelOnError])) {
        this[_state] = (dart.notNull(this[_state]) | 16) >>> 0;
        this[_cancel]();
        let cancelFuture = this[_cancelFuture];
        if (cancelFuture != null && cancelFuture != async.Future._nullFuture) {
          cancelFuture.whenComplete(sendError);
        } else {
          sendError();
        }
      } else {
        sendError();
        this[_checkState](wasInputPaused);
      }
    }
    [_sendDone]() {
      if (!!dart.test(this[_isCanceled])) dart.assertFailed(null, L63, 401, 12, "!_isCanceled");
      if (!!dart.test(this[_isPaused])) dart.assertFailed(null, L63, 402, 12, "!_isPaused");
      if (!!dart.test(this[_inCallback])) dart.assertFailed(null, L63, 403, 12, "!_inCallback");
      const sendDone = () => {
        if (!dart.test(this[_waitsForCancel])) return;
        this[_state] = (dart.notNull(this[_state]) | (8 | 2 | 32) >>> 0) >>> 0;
        this[_zone$].runGuarded(this[_onDone$]);
        this[_state] = (dart.notNull(this[_state]) & ~32 >>> 0) >>> 0;
      };
      dart.fn(sendDone, VoidTovoid());
      this[_cancel]();
      this[_state] = (dart.notNull(this[_state]) | 16) >>> 0;
      let cancelFuture = this[_cancelFuture];
      if (cancelFuture != null && cancelFuture != async.Future._nullFuture) {
        cancelFuture.whenComplete(sendDone);
      } else {
        sendDone();
      }
    }
    [_guardCallback](callback) {
      if (callback == null) dart.nullFailed(L63, 431, 39, "callback");
      if (!!dart.test(this[_inCallback])) dart.assertFailed(null, L63, 432, 12, "!_inCallback");
      let wasInputPaused = this[_isInputPaused];
      this[_state] = (dart.notNull(this[_state]) | 32) >>> 0;
      callback();
      this[_state] = (dart.notNull(this[_state]) & ~32 >>> 0) >>> 0;
      this[_checkState](wasInputPaused);
    }
    [_checkState](wasInputPaused) {
      if (wasInputPaused == null) dart.nullFailed(L63, 450, 25, "wasInputPaused");
      if (!!dart.test(this[_inCallback])) dart.assertFailed(null, L63, 451, 12, "!_inCallback");
      if (dart.test(this[_hasPending]) && dart.test(dart.nullCheck(this[_pending$]).isEmpty)) {
        this[_state] = (dart.notNull(this[_state]) & ~64 >>> 0) >>> 0;
        if (dart.test(this[_isInputPaused]) && dart.test(this[_mayResumeInput])) {
          this[_state] = (dart.notNull(this[_state]) & ~4 >>> 0) >>> 0;
        }
      }
      while (true) {
        if (dart.test(this[_isCanceled])) {
          this[_pending$] = null;
          return;
        }
        let isInputPaused = this[_isInputPaused];
        if (dart.equals(wasInputPaused, isInputPaused)) break;
        this[_state] = (dart.notNull(this[_state]) ^ 32) >>> 0;
        if (dart.test(isInputPaused)) {
          this[_onPause]();
        } else {
          this[_onResume]();
        }
        this[_state] = (dart.notNull(this[_state]) & ~32 >>> 0) >>> 0;
        wasInputPaused = isInputPaused;
      }
      if (dart.test(this[_hasPending]) && !dart.test(this[_isPaused])) {
        dart.nullCheck(this[_pending$]).schedule(this);
      }
    }
  }
  (_BufferingStreamSubscription.new = function(onData, onError, onDone, cancelOnError) {
    if (cancelOnError == null) dart.nullFailed(L63, 112, 28, "cancelOnError");
    _BufferingStreamSubscription.zoned.call(this, async.Zone.current, onData, onError, onDone, cancelOnError);
  }).prototype = _BufferingStreamSubscription.prototype;
  (_BufferingStreamSubscription.zoned = function(_zone, onData, onError, onDone, cancelOnError) {
    if (_zone == null) dart.nullFailed(L63, 115, 43, "_zone");
    if (cancelOnError == null) dart.nullFailed(L63, 116, 47, "cancelOnError");
    this[_cancelFuture] = null;
    this[_pending$] = null;
    this[_zone$] = _zone;
    this[_state] = dart.test(cancelOnError) ? 1 : 0;
    this[_onData$] = async._BufferingStreamSubscription._registerDataHandler(T, _zone, onData);
    this[_onError] = async._BufferingStreamSubscription._registerErrorHandler(_zone, onError);
    this[_onDone$] = async._BufferingStreamSubscription._registerDoneHandler(_zone, onDone);
    ;
  }).prototype = _BufferingStreamSubscription.prototype;
  _BufferingStreamSubscription.prototype[dart.isStreamSubscription] = true;
  dart.addTypeTests(_BufferingStreamSubscription);
  _BufferingStreamSubscription.prototype[_is__BufferingStreamSubscription_default] = true;
  dart.addTypeCaches(_BufferingStreamSubscription);
  _BufferingStreamSubscription[dart.implements] = () => [async.StreamSubscription$(T), async._EventSink$(T), async._EventDispatch$(T)];
  dart.setMethodSignature(_BufferingStreamSubscription, () => ({
    __proto__: dart.getMethods(_BufferingStreamSubscription.__proto__),
    [_setPendingEvents]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    onData: dart.fnType(dart.void, [dart.nullable(dart.fnType(dart.void, [T]))]),
    onError: dart.fnType(dart.void, [dart.nullable(core.Function)]),
    onDone: dart.fnType(dart.void, [dart.nullable(dart.fnType(dart.void, []))]),
    pause: dart.fnType(dart.void, [], [dart.nullable(async.Future$(dart.void))]),
    resume: dart.fnType(dart.void, []),
    cancel: dart.fnType(async.Future, []),
    asFuture: dart.gFnType(E => [async.Future$(E), [], [dart.nullable(E)]], E => [dart.nullable(core.Object)]),
    [_cancel]: dart.fnType(dart.void, []),
    [_decrementPauseCount]: dart.fnType(dart.void, []),
    [_add]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    [_addError]: dart.fnType(dart.void, [core.Object, core.StackTrace]),
    [_close]: dart.fnType(dart.void, []),
    [_onPause]: dart.fnType(dart.void, []),
    [_onResume]: dart.fnType(dart.void, []),
    [_onCancel]: dart.fnType(dart.nullable(async.Future$(dart.void)), []),
    [_addPending]: dart.fnType(dart.void, [async._DelayedEvent]),
    [_sendData]: dart.fnType(dart.void, [T]),
    [_sendError]: dart.fnType(dart.void, [core.Object, core.StackTrace]),
    [_sendDone]: dart.fnType(dart.void, []),
    [_guardCallback]: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
    [_checkState]: dart.fnType(dart.void, [core.bool])
  }));
  dart.setGetterSignature(_BufferingStreamSubscription, () => ({
    __proto__: dart.getGetters(_BufferingStreamSubscription.__proto__),
    [_isInputPaused]: core.bool,
    [_isClosed]: core.bool,
    [_isCanceled]: core.bool,
    [_waitsForCancel]: core.bool,
    [_inCallback]: core.bool,
    [_hasPending]: core.bool,
    [_isPaused]: core.bool,
    [_canFire]: core.bool,
    [_mayResumeInput]: core.bool,
    [_cancelOnError]: core.bool,
    isPaused: core.bool
  }));
  dart.setLibraryUri(_BufferingStreamSubscription, L29);
  dart.setFieldSignature(_BufferingStreamSubscription, () => ({
    __proto__: dart.getFields(_BufferingStreamSubscription.__proto__),
    [_onData$]: dart.fieldType(dart.fnType(dart.void, [T])),
    [_onError]: dart.fieldType(core.Function),
    [_onDone$]: dart.fieldType(dart.fnType(dart.void, [])),
    [_zone$]: dart.finalFieldType(async.Zone),
    [_state]: dart.fieldType(core.int),
    [_cancelFuture]: dart.fieldType(dart.nullable(async.Future)),
    [_pending$]: dart.fieldType(dart.nullable(async._PendingEvents$(T)))
  }));
  return _BufferingStreamSubscription;
});
async._BufferingStreamSubscription = async._BufferingStreamSubscription$();
dart.defineLazy(async._BufferingStreamSubscription, {
  /*async._BufferingStreamSubscription._STATE_CANCEL_ON_ERROR*/get _STATE_CANCEL_ON_ERROR() {
    return 1;
  },
  /*async._BufferingStreamSubscription._STATE_CLOSED*/get _STATE_CLOSED() {
    return 2;
  },
  /*async._BufferingStreamSubscription._STATE_INPUT_PAUSED*/get _STATE_INPUT_PAUSED() {
    return 4;
  },
  /*async._BufferingStreamSubscription._STATE_CANCELED*/get _STATE_CANCELED() {
    return 8;
  },
  /*async._BufferingStreamSubscription._STATE_WAIT_FOR_CANCEL*/get _STATE_WAIT_FOR_CANCEL() {
    return 16;
  },
  /*async._BufferingStreamSubscription._STATE_IN_CALLBACK*/get _STATE_IN_CALLBACK() {
    return 32;
  },
  /*async._BufferingStreamSubscription._STATE_HAS_PENDING*/get _STATE_HAS_PENDING() {
    return 64;
  },
  /*async._BufferingStreamSubscription._STATE_PAUSE_COUNT*/get _STATE_PAUSE_COUNT() {
    return 128;
  }
}, false);
dart.addTypeTests(async._BufferingStreamSubscription, _is__BufferingStreamSubscription_default);
const _is__ControllerSubscription_default = Symbol('_is__ControllerSubscription_default');
async._ControllerSubscription$ = dart.generic(T => {
  class _ControllerSubscription extends async._BufferingStreamSubscription$(T) {
    [_onCancel]() {
      return this[_controller$][_recordCancel](this);
    }
    [_onPause]() {
      this[_controller$][_recordPause](this);
    }
    [_onResume]() {
      this[_controller$][_recordResume](this);
    }
  }
  (_ControllerSubscription.new = function(_controller, onData, onError, onDone, cancelOnError) {
    if (_controller == null) dart.nullFailed(L62, 878, 32, "_controller");
    if (cancelOnError == null) dart.nullFailed(L62, 879, 47, "cancelOnError");
    this[_controller$] = _controller;
    _ControllerSubscription.__proto__.new.call(this, onData, onError, onDone, cancelOnError);
    ;
  }).prototype = _ControllerSubscription.prototype;
  dart.addTypeTests(_ControllerSubscription);
  _ControllerSubscription.prototype[_is__ControllerSubscription_default] = true;
  dart.addTypeCaches(_ControllerSubscription);
  dart.setLibraryUri(_ControllerSubscription, L29);
  dart.setFieldSignature(_ControllerSubscription, () => ({
    __proto__: dart.getFields(_ControllerSubscription.__proto__),
    [_controller$]: dart.finalFieldType(async._StreamControllerLifecycle$(T))
  }));
  return _ControllerSubscription;
});
async._ControllerSubscription = async._ControllerSubscription$();
dart.addTypeTests(async._ControllerSubscription, _is__ControllerSubscription_default);
const _is__BroadcastSubscription_default = Symbol('_is__BroadcastSubscription_default');
var _next$1 = dart.privateName(async, "_BroadcastSubscription._next");
var _previous$1 = dart.privateName(async, "_BroadcastSubscription._previous");
async._BroadcastSubscription$ = dart.generic(T => {
  var _BroadcastSubscriptionOfT = () => (_BroadcastSubscriptionOfT = dart.constFn(async._BroadcastSubscription$(T)))();
  var _BroadcastSubscriptionNOfT = () => (_BroadcastSubscriptionNOfT = dart.constFn(dart.nullable(_BroadcastSubscriptionOfT())))();
  class _BroadcastSubscription extends async._ControllerSubscription$(T) {
    get [_next$0]() {
      return this[_next$1];
    }
    set [_next$0](value) {
      this[_next$1] = _BroadcastSubscriptionNOfT().as(value);
    }
    get [_previous$0]() {
      return this[_previous$1];
    }
    set [_previous$0](value) {
      this[_previous$1] = _BroadcastSubscriptionNOfT().as(value);
    }
    [_expectsEvent](eventId) {
      if (eventId == null) dart.nullFailed(L61, 36, 26, "eventId");
      return (dart.notNull(this[_eventState]) & 1) >>> 0 === eventId;
    }
    [_toggleEventId]() {
      this[_eventState] = (dart.notNull(this[_eventState]) ^ 1) >>> 0;
    }
    get [_isFiring]() {
      return (dart.notNull(this[_eventState]) & 2) !== 0;
    }
    [_setRemoveAfterFiring]() {
      if (!dart.test(this[_isFiring])) dart.assertFailed(null, L61, 45, 12, "_isFiring");
      this[_eventState] = (dart.notNull(this[_eventState]) | 4) >>> 0;
    }
    get [_removeAfterFiring]() {
      return (dart.notNull(this[_eventState]) & 4) !== 0;
    }
    [_onPause]() {
    }
    [_onResume]() {
    }
  }
  (_BroadcastSubscription.new = function(controller, onData, onError, onDone, cancelOnError) {
    if (controller == null) dart.nullFailed(L61, 27, 37, "controller");
    if (cancelOnError == null) dart.nullFailed(L61, 31, 12, "cancelOnError");
    this[_eventState] = 0;
    this[_next$1] = null;
    this[_previous$1] = null;
    _BroadcastSubscription.__proto__.new.call(this, controller, onData, onError, onDone, cancelOnError);
    this[_next$0] = this[_previous$0] = this;
  }).prototype = _BroadcastSubscription.prototype;
  dart.addTypeTests(_BroadcastSubscription);
  _BroadcastSubscription.prototype[_is__BroadcastSubscription_default] = true;
  dart.addTypeCaches(_BroadcastSubscription);
  dart.setMethodSignature(_BroadcastSubscription, () => ({
    __proto__: dart.getMethods(_BroadcastSubscription.__proto__),
    [_expectsEvent]: dart.fnType(core.bool, [core.int]),
    [_toggleEventId]: dart.fnType(dart.void, []),
    [_setRemoveAfterFiring]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(_BroadcastSubscription, () => ({
    __proto__: dart.getGetters(_BroadcastSubscription.__proto__),
    [_isFiring]: core.bool,
    [_removeAfterFiring]: core.bool
  }));
  dart.setLibraryUri(_BroadcastSubscription, L29);
  dart.setFieldSignature(_BroadcastSubscription, () => ({
    __proto__: dart.getFields(_BroadcastSubscription.__proto__),
    [_eventState]: dart.fieldType(core.int),
    [_next$0]: dart.fieldType(dart.nullable(async._BroadcastSubscription$(T))),
    [_previous$0]: dart.fieldType(dart.nullable(async._BroadcastSubscription$(T)))
  }));
  return _BroadcastSubscription;
});
async._BroadcastSubscription = async._BroadcastSubscription$();
dart.defineLazy(async._BroadcastSubscription, {
  /*async._BroadcastSubscription._STATE_EVENT_ID*/get _STATE_EVENT_ID() {
    return 1;
  },
  /*async._BroadcastSubscription._STATE_FIRING*/get _STATE_FIRING() {
    return 2;
  },
  /*async._BroadcastSubscription._STATE_REMOVE_AFTER_FIRING*/get _STATE_REMOVE_AFTER_FIRING() {
    return 4;
  }
}, false);
dart.addTypeTests(async._BroadcastSubscription, _is__BroadcastSubscription_default);
var _firstSubscription = dart.privateName(async, "_firstSubscription");
var _lastSubscription = dart.privateName(async, "_lastSubscription");
var _addStreamState = dart.privateName(async, "_addStreamState");
var _doneFuture = dart.privateName(async, "_doneFuture");
var _isEmpty = dart.privateName(async, "_isEmpty");
var _hasOneListener = dart.privateName(async, "_hasOneListener");
var _isAddingStream = dart.privateName(async, "_isAddingStream");
var _mayAddEvent = dart.privateName(async, "_mayAddEvent");
var _ensureDoneFuture = dart.privateName(async, "_ensureDoneFuture");
var _addListener = dart.privateName(async, "_addListener");
var _removeListener = dart.privateName(async, "_removeListener");
var _callOnCancel = dart.privateName(async, "_callOnCancel");
var _addEventError = dart.privateName(async, "_addEventError");
var _forEachListener = dart.privateName(async, "_forEachListener");
var _mayComplete = dart.privateName(async, "_mayComplete");
var _asyncComplete = dart.privateName(async, "_asyncComplete");
const _is__BroadcastStreamController_default = Symbol('_is__BroadcastStreamController_default');
async._BroadcastStreamController$ = dart.generic(T => {
  var _BroadcastStreamOfT = () => (_BroadcastStreamOfT = dart.constFn(async._BroadcastStream$(T)))();
  var _StreamSinkWrapperOfT = () => (_StreamSinkWrapperOfT = dart.constFn(async._StreamSinkWrapper$(T)))();
  var _DoneStreamSubscriptionOfT = () => (_DoneStreamSubscriptionOfT = dart.constFn(async._DoneStreamSubscription$(T)))();
  var _BroadcastSubscriptionOfT = () => (_BroadcastSubscriptionOfT = dart.constFn(async._BroadcastSubscription$(T)))();
  var StreamOfT = () => (StreamOfT = dart.constFn(async.Stream$(T)))();
  var _AddStreamStateOfT = () => (_AddStreamStateOfT = dart.constFn(async._AddStreamState$(T)))();
  class _BroadcastStreamController extends core.Object {
    get onPause() {
      dart.throw(new core.UnsupportedError.new("Broadcast stream controllers do not support pause callbacks"));
    }
    set onPause(onPauseHandler) {
      dart.throw(new core.UnsupportedError.new("Broadcast stream controllers do not support pause callbacks"));
    }
    get onResume() {
      dart.throw(new core.UnsupportedError.new("Broadcast stream controllers do not support pause callbacks"));
    }
    set onResume(onResumeHandler) {
      dart.throw(new core.UnsupportedError.new("Broadcast stream controllers do not support pause callbacks"));
    }
    get stream() {
      return new (_BroadcastStreamOfT()).new(this);
    }
    get sink() {
      return new (_StreamSinkWrapperOfT()).new(this);
    }
    get isClosed() {
      return (dart.notNull(this[_state]) & 4) !== 0;
    }
    get isPaused() {
      return false;
    }
    get hasListener() {
      return !dart.test(this[_isEmpty]);
    }
    get [_hasOneListener]() {
      if (!!dart.test(this[_isEmpty])) dart.assertFailed(null, L61, 147, 12, "!_isEmpty");
      return this[_firstSubscription] == this[_lastSubscription];
    }
    get [_isFiring]() {
      return (dart.notNull(this[_state]) & 2) !== 0;
    }
    get [_isAddingStream]() {
      return (dart.notNull(this[_state]) & 8) !== 0;
    }
    get [_mayAddEvent]() {
      return dart.notNull(this[_state]) < 4;
    }
    [_ensureDoneFuture]() {
      let t82;
      t82 = this[_doneFuture];
      return t82 == null ? this[_doneFuture] = new (_FutureOfvoid()).new() : t82;
    }
    get [_isEmpty]() {
      return this[_firstSubscription] == null;
    }
    [_addListener](subscription) {
      if (subscription == null) dart.nullFailed(L61, 165, 47, "subscription");
      if (!(subscription[_next$0] == subscription)) dart.assertFailed(null, L61, 166, 12, "identical(subscription._next, subscription)");
      subscription[_eventState] = (dart.notNull(this[_state]) & 1) >>> 0;
      let oldLast = this[_lastSubscription];
      this[_lastSubscription] = subscription;
      subscription[_next$0] = null;
      subscription[_previous$0] = oldLast;
      if (oldLast == null) {
        this[_firstSubscription] = subscription;
      } else {
        oldLast[_next$0] = subscription;
      }
    }
    [_removeListener](subscription) {
      if (subscription == null) dart.nullFailed(L61, 180, 50, "subscription");
      if (!(subscription[_controller$] === this)) dart.assertFailed(null, L61, 181, 12, "identical(subscription._controller, this)");
      if (!(subscription[_next$0] != subscription)) dart.assertFailed(null, L61, 182, 12, "!identical(subscription._next, subscription)");
      let previous = subscription[_previous$0];
      let next = subscription[_next$0];
      if (previous == null) {
        this[_firstSubscription] = next;
      } else {
        previous[_next$0] = next;
      }
      if (next == null) {
        this[_lastSubscription] = previous;
      } else {
        next[_previous$0] = previous;
      }
      subscription[_next$0] = subscription[_previous$0] = subscription;
    }
    [_subscribe](onData, onError, onDone, cancelOnError) {
      if (cancelOnError == null) dart.nullFailed(L61, 204, 28, "cancelOnError");
      if (dart.test(this.isClosed)) {
        return new (_DoneStreamSubscriptionOfT()).new(onDone);
      }
      let subscription = new (_BroadcastSubscriptionOfT()).new(this, onData, onError, onDone, cancelOnError);
      this[_addListener](subscription);
      if (this[_firstSubscription] == this[_lastSubscription]) {
        async._runGuarded(this.onListen);
      }
      return subscription;
    }
    [_recordCancel](sub) {
      if (sub == null) dart.nullFailed(L61, 218, 53, "sub");
      let subscription = _BroadcastSubscriptionOfT().as(sub);
      if (subscription[_next$0] == subscription) return null;
      if (dart.test(subscription[_isFiring])) {
        subscription[_setRemoveAfterFiring]();
      } else {
        this[_removeListener](subscription);
        if (!dart.test(this[_isFiring]) && dart.test(this[_isEmpty])) {
          this[_callOnCancel]();
        }
      }
      return null;
    }
    [_recordPause](subscription) {
      if (subscription == null) dart.nullFailed(L61, 235, 43, "subscription");
    }
    [_recordResume](subscription) {
      if (subscription == null) dart.nullFailed(L61, 236, 44, "subscription");
    }
    [_addEventError]() {
      if (dart.test(this.isClosed)) {
        return new core.StateError.new("Cannot add new events after calling close");
      }
      if (!dart.test(this[_isAddingStream])) dart.assertFailed(null, L61, 244, 12, "_isAddingStream");
      return new core.StateError.new("Cannot add new events while doing an addStream");
    }
    add(data) {
      T.as(data);
      if (!dart.test(this[_mayAddEvent])) dart.throw(this[_addEventError]());
      this[_sendData](data);
    }
    addError(error, stackTrace = null) {
      if (error == null) dart.nullFailed(L61, 253, 24, "error");
      core.ArgumentError.checkNotNull(core.Object, error, "error");
      if (!dart.test(this[_mayAddEvent])) dart.throw(this[_addEventError]());
      let replacement = async.Zone.current.errorCallback(error, stackTrace);
      if (replacement != null) {
        error = replacement.error;
        stackTrace = replacement.stackTrace;
      } else {
        stackTrace == null ? stackTrace = async.AsyncError.defaultStackTrace(error) : null;
      }
      if (stackTrace == null) dart.throw("unreachable");
      this[_sendError](error, stackTrace);
    }
    close() {
      if (dart.test(this.isClosed)) {
        if (!(this[_doneFuture] != null)) dart.assertFailed(null, L61, 270, 14, "_doneFuture != null");
        return dart.nullCheck(this[_doneFuture]);
      }
      if (!dart.test(this[_mayAddEvent])) dart.throw(this[_addEventError]());
      this[_state] = (dart.notNull(this[_state]) | 4) >>> 0;
      let doneFuture = this[_ensureDoneFuture]();
      this[_sendDone]();
      return doneFuture;
    }
    get done() {
      return this[_ensureDoneFuture]();
    }
    addStream(stream, opts) {
      let t82;
      StreamOfT().as(stream);
      if (stream == null) dart.nullFailed(L61, 282, 30, "stream");
      let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
      if (!dart.test(this[_mayAddEvent])) dart.throw(this[_addEventError]());
      this[_state] = (dart.notNull(this[_state]) | 8) >>> 0;
      let addStreamState = new (_AddStreamStateOfT()).new(this, stream, (t82 = cancelOnError, t82 == null ? false : t82));
      this[_addStreamState] = addStreamState;
      return addStreamState.addStreamFuture;
    }
    [_add](data) {
      this[_sendData](data);
    }
    [_addError](error, stackTrace) {
      if (error == null) dart.nullFailed(L61, 296, 25, "error");
      if (stackTrace == null) dart.nullFailed(L61, 296, 43, "stackTrace");
      this[_sendError](error, stackTrace);
    }
    [_close]() {
      if (!dart.test(this[_isAddingStream])) dart.assertFailed(null, L61, 301, 12, "_isAddingStream");
      let addState = dart.nullCheck(this[_addStreamState]);
      this[_addStreamState] = null;
      this[_state] = (dart.notNull(this[_state]) & ~8 >>> 0) >>> 0;
      addState.complete();
    }
    [_forEachListener](action) {
      let t82, t82$;
      if (action == null) dart.nullFailed(L61, 310, 12, "action");
      if (dart.test(this[_isFiring])) {
        dart.throw(new core.StateError.new("Cannot fire new event. Controller is already firing an event"));
      }
      if (dart.test(this[_isEmpty])) return;
      let id = (dart.notNull(this[_state]) & 1) >>> 0;
      this[_state] = (dart.notNull(this[_state]) ^ (1 | 2) >>> 0) >>> 0;
      let subscription = this[_firstSubscription];
      while (subscription != null) {
        if (dart.test(subscription[_expectsEvent](id))) {
          t82 = subscription;
          t82[_eventState] = (dart.notNull(t82[_eventState]) | 2) >>> 0;
          action(subscription);
          subscription[_toggleEventId]();
          let next = subscription[_next$0];
          if (dart.test(subscription[_removeAfterFiring])) {
            this[_removeListener](subscription);
          }
          t82$ = subscription;
          t82$[_eventState] = (dart.notNull(t82$[_eventState]) & ~2 >>> 0) >>> 0;
          subscription = next;
        } else {
          subscription = subscription[_next$0];
        }
      }
      this[_state] = (dart.notNull(this[_state]) & ~2 >>> 0) >>> 0;
      if (dart.test(this[_isEmpty])) {
        this[_callOnCancel]();
      }
    }
    [_callOnCancel]() {
      if (!dart.test(this[_isEmpty])) dart.assertFailed(null, L61, 350, 12, "_isEmpty");
      if (dart.test(this.isClosed)) {
        let doneFuture = dart.nullCheck(this[_doneFuture]);
        if (dart.test(doneFuture[_mayComplete])) {
          doneFuture[_asyncComplete](null);
        }
      }
      async._runGuarded(this.onCancel);
    }
  }
  (_BroadcastStreamController.new = function(onListen, onCancel) {
    this[_firstSubscription] = null;
    this[_lastSubscription] = null;
    this[_addStreamState] = null;
    this[_doneFuture] = null;
    this.onListen = onListen;
    this.onCancel = onCancel;
    this[_state] = 0;
    ;
  }).prototype = _BroadcastStreamController.prototype;
  dart.addTypeTests(_BroadcastStreamController);
  _BroadcastStreamController.prototype[_is__BroadcastStreamController_default] = true;
  dart.addTypeCaches(_BroadcastStreamController);
  _BroadcastStreamController[dart.implements] = () => [async._StreamControllerBase$(T)];
  dart.setMethodSignature(_BroadcastStreamController, () => ({
    __proto__: dart.getMethods(_BroadcastStreamController.__proto__),
    [_ensureDoneFuture]: dart.fnType(async._Future$(dart.void), []),
    [_addListener]: dart.fnType(dart.void, [async._BroadcastSubscription$(T)]),
    [_removeListener]: dart.fnType(dart.void, [async._BroadcastSubscription$(T)]),
    [_subscribe]: dart.fnType(async.StreamSubscription$(T), [dart.nullable(dart.fnType(dart.void, [T])), dart.nullable(core.Function), dart.nullable(dart.fnType(dart.void, [])), core.bool]),
    [_recordCancel]: dart.fnType(dart.nullable(async.Future$(dart.void)), [async.StreamSubscription$(T)]),
    [_recordPause]: dart.fnType(dart.void, [async.StreamSubscription$(T)]),
    [_recordResume]: dart.fnType(dart.void, [async.StreamSubscription$(T)]),
    [_addEventError]: dart.fnType(core.Error, []),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
    close: dart.fnType(async.Future, []),
    addStream: dart.fnType(async.Future, [dart.nullable(core.Object)], {cancelOnError: dart.nullable(core.bool)}, {}),
    [_add]: dart.fnType(dart.void, [T]),
    [_addError]: dart.fnType(dart.void, [core.Object, core.StackTrace]),
    [_close]: dart.fnType(dart.void, []),
    [_forEachListener]: dart.fnType(dart.void, [dart.fnType(dart.void, [async._BufferingStreamSubscription$(T)])]),
    [_callOnCancel]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(_BroadcastStreamController, () => ({
    __proto__: dart.getGetters(_BroadcastStreamController.__proto__),
    onPause: dart.fnType(dart.void, []),
    onResume: dart.fnType(dart.void, []),
    stream: async.Stream$(T),
    sink: async.StreamSink$(T),
    isClosed: core.bool,
    isPaused: core.bool,
    hasListener: core.bool,
    [_hasOneListener]: core.bool,
    [_isFiring]: core.bool,
    [_isAddingStream]: core.bool,
    [_mayAddEvent]: core.bool,
    [_isEmpty]: core.bool,
    done: async.Future$(dart.void)
  }));
  dart.setSetterSignature(_BroadcastStreamController, () => ({
    __proto__: dart.getSetters(_BroadcastStreamController.__proto__),
    onPause: dart.nullable(dart.fnType(dart.void, [])),
    onResume: dart.nullable(dart.fnType(dart.void, []))
  }));
  dart.setLibraryUri(_BroadcastStreamController, L29);
  dart.setFieldSignature(_BroadcastStreamController, () => ({
    __proto__: dart.getFields(_BroadcastStreamController.__proto__),
    onListen: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
    onCancel: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
    [_state]: dart.fieldType(core.int),
    [_firstSubscription]: dart.fieldType(dart.nullable(async._BroadcastSubscription$(T))),
    [_lastSubscription]: dart.fieldType(dart.nullable(async._BroadcastSubscription$(T))),
    [_addStreamState]: dart.fieldType(dart.nullable(async._AddStreamState$(T))),
    [_doneFuture]: dart.fieldType(dart.nullable(async._Future$(dart.void)))
  }));
  return _BroadcastStreamController;
});
async._BroadcastStreamController = async._BroadcastStreamController$();
dart.defineLazy(async._BroadcastStreamController, {
  /*async._BroadcastStreamController._STATE_INITIAL*/get _STATE_INITIAL() {
    return 0;
  },
  /*async._BroadcastStreamController._STATE_EVENT_ID*/get _STATE_EVENT_ID() {
    return 1;
  },
  /*async._BroadcastStreamController._STATE_FIRING*/get _STATE_FIRING() {
    return 2;
  },
  /*async._BroadcastStreamController._STATE_CLOSED*/get _STATE_CLOSED() {
    return 4;
  },
  /*async._BroadcastStreamController._STATE_ADDSTREAM*/get _STATE_ADDSTREAM() {
    return 8;
  }
}, false);
dart.addTypeTests(async._BroadcastStreamController, _is__BroadcastStreamController_default);
const _is__SyncBroadcastStreamController_default = Symbol('_is__SyncBroadcastStreamController_default');
async._SyncBroadcastStreamController$ = dart.generic(T => {
  var _BroadcastSubscriptionOfT = () => (_BroadcastSubscriptionOfT = dart.constFn(async._BroadcastSubscription$(T)))();
  var _BufferingStreamSubscriptionOfT = () => (_BufferingStreamSubscriptionOfT = dart.constFn(async._BufferingStreamSubscription$(T)))();
  var _BufferingStreamSubscriptionOfTToNullN = () => (_BufferingStreamSubscriptionOfTToNullN = dart.constFn(dart.fnType(core.Null, [_BufferingStreamSubscriptionOfT()])))();
  class _SyncBroadcastStreamController extends async._BroadcastStreamController$(T) {
    get [_mayAddEvent]() {
      return dart.test(super[_mayAddEvent]) && !dart.test(this[_isFiring]);
    }
    [_addEventError]() {
      if (dart.test(this[_isFiring])) {
        return new core.StateError.new("Cannot fire new event. Controller is already firing an event");
      }
      return super[_addEventError]();
    }
    [_sendData](data) {
      if (dart.test(this[_isEmpty])) return;
      if (dart.test(this[_hasOneListener])) {
        this[_state] = (dart.notNull(this[_state]) | 2) >>> 0;
        let firstSubscription = _BroadcastSubscriptionOfT().as(this[_firstSubscription]);
        firstSubscription[_add](data);
        this[_state] = (dart.notNull(this[_state]) & ~2 >>> 0) >>> 0;
        if (dart.test(this[_isEmpty])) {
          this[_callOnCancel]();
        }
        return;
      }
      this[_forEachListener](dart.fn(subscription => {
        if (subscription == null) dart.nullFailed(L61, 392, 55, "subscription");
        subscription[_add](data);
      }, _BufferingStreamSubscriptionOfTToNullN()));
    }
    [_sendError](error, stackTrace) {
      if (error == null) dart.nullFailed(L61, 397, 26, "error");
      if (stackTrace == null) dart.nullFailed(L61, 397, 44, "stackTrace");
      if (dart.test(this[_isEmpty])) return;
      this[_forEachListener](dart.fn(subscription => {
        if (subscription == null) dart.nullFailed(L61, 399, 55, "subscription");
        subscription[_addError](error, stackTrace);
      }, _BufferingStreamSubscriptionOfTToNullN()));
    }
    [_sendDone]() {
      if (!dart.test(this[_isEmpty])) {
        this[_forEachListener](dart.fn(subscription => {
          if (subscription == null) dart.nullFailed(L61, 406, 57, "subscription");
          subscription[_close]();
        }, _BufferingStreamSubscriptionOfTToNullN()));
      } else {
        if (!(this[_doneFuture] != null && dart.test(dart.nullCheck(this[_doneFuture])[_mayComplete]))) dart.assertFailed(null, L61, 410, 14, "_doneFuture != null && _doneFuture!._mayComplete");
        dart.nullCheck(this[_doneFuture])[_asyncComplete](null);
      }
    }
  }
  (_SyncBroadcastStreamController.new = function(onListen, onCancel) {
    _SyncBroadcastStreamController.__proto__.new.call(this, onListen, onCancel);
    ;
  }).prototype = _SyncBroadcastStreamController.prototype;
  dart.addTypeTests(_SyncBroadcastStreamController);
  _SyncBroadcastStreamController.prototype[_is__SyncBroadcastStreamController_default] = true;
  dart.addTypeCaches(_SyncBroadcastStreamController);
  _SyncBroadcastStreamController[dart.implements] = () => [async.SynchronousStreamController$(T)];
  dart.setMethodSignature(_SyncBroadcastStreamController, () => ({
    __proto__: dart.getMethods(_SyncBroadcastStreamController.__proto__),
    [_sendData]: dart.fnType(dart.void, [T]),
    [_sendError]: dart.fnType(dart.void, [core.Object, core.StackTrace]),
    [_sendDone]: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(_SyncBroadcastStreamController, L29);
  return _SyncBroadcastStreamController;
});
async._SyncBroadcastStreamController = async._SyncBroadcastStreamController$();
dart.addTypeTests(async._SyncBroadcastStreamController, _is__SyncBroadcastStreamController_default);
const _is__AsyncBroadcastStreamController_default = Symbol('_is__AsyncBroadcastStreamController_default');
async._AsyncBroadcastStreamController$ = dart.generic(T => {
  var _DelayedDataOfT = () => (_DelayedDataOfT = dart.constFn(async._DelayedData$(T)))();
  class _AsyncBroadcastStreamController extends async._BroadcastStreamController$(T) {
    [_sendData](data) {
      for (let subscription = this[_firstSubscription]; subscription != null; subscription = subscription[_next$0]) {
        subscription[_addPending](new (_DelayedDataOfT()).new(data));
      }
    }
    [_sendError](error, stackTrace) {
      if (error == null) dart.nullFailed(L61, 430, 26, "error");
      if (stackTrace == null) dart.nullFailed(L61, 430, 44, "stackTrace");
      for (let subscription = this[_firstSubscription]; subscription != null; subscription = subscription[_next$0]) {
        subscription[_addPending](new async._DelayedError.new(error, stackTrace));
      }
    }
    [_sendDone]() {
      if (!dart.test(this[_isEmpty])) {
        for (let subscription = this[_firstSubscription]; subscription != null; subscription = subscription[_next$0]) {
          subscription[_addPending](C38 || CT.C38);
        }
      } else {
        if (!(this[_doneFuture] != null && dart.test(dart.nullCheck(this[_doneFuture])[_mayComplete]))) dart.assertFailed(null, L61, 446, 14, "_doneFuture != null && _doneFuture!._mayComplete");
        dart.nullCheck(this[_doneFuture])[_asyncComplete](null);
      }
    }
  }
  (_AsyncBroadcastStreamController.new = function(onListen, onCancel) {
    _AsyncBroadcastStreamController.__proto__.new.call(this, onListen, onCancel);
    ;
  }).prototype = _AsyncBroadcastStreamController.prototype;
  dart.addTypeTests(_AsyncBroadcastStreamController);
  _AsyncBroadcastStreamController.prototype[_is__AsyncBroadcastStreamController_default] = true;
  dart.addTypeCaches(_AsyncBroadcastStreamController);
  dart.setMethodSignature(_AsyncBroadcastStreamController, () => ({
    __proto__: dart.getMethods(_AsyncBroadcastStreamController.__proto__),
    [_sendData]: dart.fnType(dart.void, [T]),
    [_sendError]: dart.fnType(dart.void, [core.Object, core.StackTrace]),
    [_sendDone]: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(_AsyncBroadcastStreamController, L29);
  return _AsyncBroadcastStreamController;
});
async._AsyncBroadcastStreamController = async._AsyncBroadcastStreamController$();
dart.addTypeTests(async._AsyncBroadcastStreamController, _is__AsyncBroadcastStreamController_default);
var _addPendingEvent = dart.privateName(async, "_addPendingEvent");
var _flushPending = dart.privateName(async, "_flushPending");
const _is__AsBroadcastStreamController_default = Symbol('_is__AsBroadcastStreamController_default');
async._AsBroadcastStreamController$ = dart.generic(T => {
  var _StreamImplEventsOfT = () => (_StreamImplEventsOfT = dart.constFn(async._StreamImplEvents$(T)))();
  var _DelayedDataOfT = () => (_DelayedDataOfT = dart.constFn(async._DelayedData$(T)))();
  class _AsBroadcastStreamController extends async._SyncBroadcastStreamController$(T) {
    get [_hasPending]() {
      let pending = this[_pending$];
      return pending != null && !dart.test(pending.isEmpty);
    }
    [_addPendingEvent](event) {
      let t82;
      if (event == null) dart.nullFailed(L61, 475, 39, "event");
      (t82 = this[_pending$], t82 == null ? this[_pending$] = new (_StreamImplEventsOfT()).new() : t82).add(event);
    }
    add(data) {
      T.as(data);
      if (!dart.test(this.isClosed) && dart.test(this[_isFiring])) {
        this[_addPendingEvent](new (_DelayedDataOfT()).new(data));
        return;
      }
      super.add(data);
      this[_flushPending]();
    }
    addError(error, stackTrace = null) {
      if (error == null) dart.nullFailed(L61, 488, 24, "error");
      core.ArgumentError.checkNotNull(core.Object, error, "error");
      stackTrace == null ? stackTrace = async.AsyncError.defaultStackTrace(error) : null;
      if (!dart.test(this.isClosed) && dart.test(this[_isFiring])) {
        this[_addPendingEvent](new async._DelayedError.new(error, stackTrace));
        return;
      }
      if (!dart.test(this[_mayAddEvent])) dart.throw(this[_addEventError]());
      this[_sendError](error, stackTrace);
      this[_flushPending]();
    }
    [_flushPending]() {
      let pending = this[_pending$];
      while (pending != null && !dart.test(pending.isEmpty)) {
        pending.handleNext(this);
        pending = this[_pending$];
      }
    }
    close() {
      if (!dart.test(this.isClosed) && dart.test(this[_isFiring])) {
        this[_addPendingEvent](C38 || CT.C38);
        this[_state] = (dart.notNull(this[_state]) | 4) >>> 0;
        return super.done;
      }
      let result = super.close();
      if (!!dart.test(this[_hasPending])) dart.assertFailed(null, L61, 516, 12, "!_hasPending");
      return result;
    }
    [_callOnCancel]() {
      let pending = this[_pending$];
      if (pending != null) {
        pending.clear();
        this[_pending$] = null;
      }
      super[_callOnCancel]();
    }
  }
  (_AsBroadcastStreamController.new = function(onListen, onCancel) {
    this[_pending$] = null;
    _AsBroadcastStreamController.__proto__.new.call(this, onListen, onCancel);
    ;
  }).prototype = _AsBroadcastStreamController.prototype;
  dart.addTypeTests(_AsBroadcastStreamController);
  _AsBroadcastStreamController.prototype[_is__AsBroadcastStreamController_default] = true;
  dart.addTypeCaches(_AsBroadcastStreamController);
  _AsBroadcastStreamController[dart.implements] = () => [async._EventDispatch$(T)];
  dart.setMethodSignature(_AsBroadcastStreamController, () => ({
    __proto__: dart.getMethods(_AsBroadcastStreamController.__proto__),
    [_addPendingEvent]: dart.fnType(dart.void, [async._DelayedEvent]),
    [_flushPending]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(_AsBroadcastStreamController, () => ({
    __proto__: dart.getGetters(_AsBroadcastStreamController.__proto__),
    [_hasPending]: core.bool
  }));
  dart.setLibraryUri(_AsBroadcastStreamController, L29);
  dart.setFieldSignature(_AsBroadcastStreamController, () => ({
    __proto__: dart.getFields(_AsBroadcastStreamController.__proto__),
    [_pending$]: dart.fieldType(dart.nullable(async._StreamImplEvents$(T)))
  }));
  return _AsBroadcastStreamController;
});
async._AsBroadcastStreamController = async._AsBroadcastStreamController$();
dart.addTypeTests(async._AsBroadcastStreamController, _is__AsBroadcastStreamController_default);
var libraryName$ = dart.privateName(async, "DeferredLibrary.libraryName");
var uri$ = dart.privateName(async, "DeferredLibrary.uri");
async.DeferredLibrary = class DeferredLibrary extends core.Object {
  get libraryName() {
    return this[libraryName$];
  }
  set libraryName(value) {
    super.libraryName = value;
  }
  get uri() {
    return this[uri$];
  }
  set uri(value) {
    super.uri = value;
  }
  load() {
    dart.throw(dart.str("DeferredLibrary not supported. ") + dart.str("please use the `import \"lib.dart\" deferred as lib` syntax."));
  }
};
(async.DeferredLibrary.new = function(libraryName, opts) {
  if (libraryName == null) dart.nullFailed(L64, 18, 30, "libraryName");
  let uri = opts && 'uri' in opts ? opts.uri : null;
  this[libraryName$] = libraryName;
  this[uri$] = uri;
  ;
}).prototype = async.DeferredLibrary.prototype;
dart.addTypeTests(async.DeferredLibrary);
dart.addTypeCaches(async.DeferredLibrary);
dart.setMethodSignature(async.DeferredLibrary, () => ({
  __proto__: dart.getMethods(async.DeferredLibrary.__proto__),
  load: dart.fnType(async.Future$(core.Null), [])
}));
dart.setLibraryUri(async.DeferredLibrary, L29);
dart.setFieldSignature(async.DeferredLibrary, () => ({
  __proto__: dart.getFields(async.DeferredLibrary.__proto__),
  libraryName: dart.finalFieldType(core.String),
  uri: dart.finalFieldType(dart.nullable(core.String))
}));
var _s = dart.privateName(async, "_s");
async.DeferredLoadException = class DeferredLoadException extends core.Object {
  toString() {
    return dart.str("DeferredLoadException: '") + dart.str(this[_s]) + dart.str("'");
  }
};
(async.DeferredLoadException.new = function(message) {
  if (message == null) dart.nullFailed(L64, 33, 32, "message");
  this[_s] = message;
  ;
}).prototype = async.DeferredLoadException.prototype;
dart.addTypeTests(async.DeferredLoadException);
dart.addTypeCaches(async.DeferredLoadException);
async.DeferredLoadException[dart.implements] = () => [core.Exception];
dart.setLibraryUri(async.DeferredLoadException, L29);
dart.setFieldSignature(async.DeferredLoadException, () => ({
  __proto__: dart.getFields(async.DeferredLoadException.__proto__),
  [_s]: dart.finalFieldType(core.String)
}));
dart.defineExtensionMethods(async.DeferredLoadException, ['toString']);
async.FutureOr$ = dart.normalizeFutureOr(T => {
  var FutureOfT = () => (FutureOfT = dart.constFn(async.Future$(T)))();
  class FutureOr extends core.Object {}
  (FutureOr.__ = function() {
    dart.throw(new core.UnsupportedError.new("FutureOr can't be instantiated"));
  }).prototype = FutureOr.prototype;
  FutureOr.is = function is_FutureOr(o) {
    return T.is(o) || FutureOfT().is(o);
  };
  FutureOr.as = function as_FutureOr(o) {
    if (T.is(o) || FutureOfT().is(o)) return o;
    return dart.as(o, this);
  };
  dart.addTypeCaches(FutureOr);
  dart.setLibraryUri(FutureOr, L29);
  return FutureOr;
});
async.FutureOr = async.FutureOr$();
var _asyncCompleteError = dart.privateName(async, "_asyncCompleteError");
var _completeWithValue = dart.privateName(async, "_completeWithValue");
var C39;
var C40;
async.Future$ = dart.generic(T => {
  class Future extends core.Object {
    static new(computation) {
      if (computation == null) dart.nullFailed(L65, 171, 30, "computation");
      let result = new (async._Future$(T)).new();
      async.Timer.run(dart.fn(() => {
        try {
          result[_complete](computation());
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            async._completeWithErrorCallback(result, e, s);
          } else
            throw e$;
        }
      }, VoidToNullN()));
      return result;
    }
    static microtask(computation) {
      if (computation == null) dart.nullFailed(L65, 197, 40, "computation");
      let result = new (async._Future$(T)).new();
      async.scheduleMicrotask(dart.fn(() => {
        try {
          result[_complete](computation());
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            async._completeWithErrorCallback(result, e, s);
          } else
            throw e$;
        }
      }, VoidToNullN()));
      return result;
    }
    static sync(computation) {
      if (computation == null) dart.nullFailed(L65, 221, 35, "computation");
      try {
        let result = computation();
        if (async.Future$(T).is(result)) {
          return result;
        } else {
          return new (async._Future$(T)).value(T.as(result));
        }
      } catch (e) {
        let error = dart.getThrown(e);
        let stackTrace = dart.stackTrace(e);
        if (core.Object.is(error)) {
          let future = new (async._Future$(T)).new();
          let replacement = async.Zone.current.errorCallback(error, stackTrace);
          if (replacement != null) {
            future[_asyncCompleteError](replacement.error, replacement.stackTrace);
          } else {
            future[_asyncCompleteError](error, stackTrace);
          }
          return future;
        } else
          throw e;
      }
    }
    static value(value = null) {
      return new (async._Future$(T)).immediate(value == null ? T.as(value) : value);
    }
    static error(error, stackTrace = null) {
      if (error == null) dart.nullFailed(L65, 276, 31, "error");
      core.ArgumentError.checkNotNull(core.Object, error, "error");
      if (async.Zone.current != async._rootZone) {
        let replacement = async.Zone.current.errorCallback(error, stackTrace);
        if (replacement != null) {
          error = replacement.error;
          stackTrace = replacement.stackTrace;
        }
      }
      stackTrace == null ? stackTrace = async.AsyncError.defaultStackTrace(error) : null;
      return new (async._Future$(T)).immediateError(error, stackTrace);
    }
    static delayed(duration, computation = null) {
      if (duration == null) dart.nullFailed(L65, 315, 35, "duration");
      if (computation == null && !dart.test(_internal.typeAcceptsNull(T))) {
        dart.throw(new core.ArgumentError.value(null, "computation", "The type parameter is not nullable"));
      }
      let result = new (async._Future$(T)).new();
      async.Timer.new(duration, dart.fn(() => {
        if (computation == null) {
          result[_complete](T.as(null));
        } else {
          try {
            result[_complete](computation());
          } catch (e$) {
            let e = dart.getThrown(e$);
            let s = dart.stackTrace(e$);
            if (core.Object.is(e)) {
              async._completeWithErrorCallback(result, e, s);
            } else
              throw e$;
          }
        }
      }, VoidToNullN()));
      return result;
    }
    static wait(T, futures, opts) {
      if (futures == null) dart.nullFailed(L65, 365, 54, "futures");
      let eagerError = opts && 'eagerError' in opts ? opts.eagerError : false;
      if (eagerError == null) dart.nullFailed(L65, 366, 13, "eagerError");
      let cleanUp = opts && 'cleanUp' in opts ? opts.cleanUp : null;
      let _future = new (async._Future$(core.List$(T))).new();
      let values = null;
      let remaining = 0;
      let error = null;
      function error$35get() {
        let t86;
        t86 = error;
        return t86 == null ? dart.throw(new _internal.LateInitializationErrorImpl.new("Local 'error' has not been initialized.")) : t86;
      }
      dart.fn(error$35get, VoidToObject());
      function error$35set(t87) {
        if (t87 == null) dart.nullFailed(L65, 372, 17, "null");
        return error = t87;
      }
      dart.fn(error$35set, ObjectTodynamic());
      let stackTrace = null;
      function stackTrace$35get() {
        let t89;
        t89 = stackTrace;
        return t89 == null ? dart.throw(new _internal.LateInitializationErrorImpl.new("Local 'stackTrace' has not been initialized.")) : t89;
      }
      dart.fn(stackTrace$35get, VoidToStackTrace());
      function stackTrace$35set(t90) {
        if (t90 == null) dart.nullFailed(L65, 373, 21, "null");
        return stackTrace = t90;
      }
      dart.fn(stackTrace$35set, StackTraceTodynamic());
      function handleError(theError, theStackTrace) {
        if (theError == null) dart.nullFailed(L65, 376, 29, "theError");
        if (theStackTrace == null) dart.nullFailed(L65, 376, 50, "theStackTrace");
        remaining = remaining - 1;
        let valueList = values;
        if (valueList != null) {
          if (cleanUp != null) {
            for (let value of valueList) {
              if (value != null) {
                let cleanUpValue = value;
                FutureOfNullN().sync(dart.fn(() => {
                  cleanUp(cleanUpValue);
                }, VoidToNullN()));
              }
            }
          }
          values = null;
          if (remaining === 0 || dart.test(eagerError)) {
            _future[_completeError](theError, theStackTrace);
          } else {
            error$35set(theError);
            stackTrace$35set(theStackTrace);
          }
        } else if (remaining === 0 && !dart.test(eagerError)) {
          _future[_completeError](error$35get(), stackTrace$35get());
        }
      }
      dart.fn(handleError, ObjectAndStackTraceTovoid());
      try {
        for (let future of futures) {
          let pos = remaining;
          future.then(core.Null, dart.fn(value => {
            remaining = remaining - 1;
            let valueList = values;
            if (valueList != null) {
              valueList[$_set](pos, value);
              if (remaining === 0) {
                _future[_completeWithValue](core.List$(T).from(valueList));
              }
            } else {
              if (cleanUp != null && value != null) {
                FutureOfNullN().sync(dart.fn(() => {
                  cleanUp(value);
                }, VoidToNullN()));
              }
              if (remaining === 0 && !dart.test(eagerError)) {
                _future[_completeError](error$35get(), stackTrace$35get());
              }
            }
          }, dart.fnType(core.Null, [T])), {onError: handleError});
          remaining = remaining + 1;
        }
        if (remaining === 0) {
          return async.Future$(core.List$(T)).value(C39 || CT.C39);
        }
        values = core.List$(dart.nullable(T)).filled(remaining, null);
      } catch (e$) {
        let e = dart.getThrown(e$);
        let st = dart.stackTrace(e$);
        if (core.Object.is(e)) {
          if (remaining === 0 || dart.test(eagerError)) {
            return async.Future$(core.List$(T)).error(e, st);
          } else {
            error$35set(e);
            stackTrace$35set(st);
          }
        } else
          throw e$;
      }
      return _future;
    }
    static any(T, futures) {
      if (futures == null) dart.nullFailed(L65, 474, 47, "futures");
      let completer = async.Completer$(T).sync();
      function onValue(value) {
        if (!dart.test(completer.isCompleted)) completer.complete(value);
      }
      dart.fn(onValue, dart.fnType(dart.void, [T]));
      function onError(error, stack) {
        if (error == null) dart.nullFailed(L65, 480, 25, "error");
        if (stack == null) dart.nullFailed(L65, 480, 43, "stack");
        if (!dart.test(completer.isCompleted)) completer.completeError(error, stack);
      }
      dart.fn(onError, ObjectAndStackTraceTovoid());
      for (let future of futures) {
        future.then(dart.void, onValue, {onError: onError});
      }
      return completer.future;
    }
    static forEach(T, elements, action) {
      if (elements == null) dart.nullFailed(L65, 508, 40, "elements");
      if (action == null) dart.nullFailed(L65, 508, 59, "action");
      let iterator = elements[$iterator];
      return async.Future.doWhile(dart.fn(() => {
        if (!dart.test(iterator.moveNext())) return false;
        let result = action(iterator.current);
        if (async.Future.is(result)) return result.then(core.bool, C40 || CT.C40);
        return true;
      }, VoidToFutureOrOfbool()));
    }
    static _kTrue(_) {
      return true;
    }
    static doWhile(action) {
      if (action == null) dart.nullFailed(L65, 543, 40, "action");
      let doneSignal = new (_FutureOfvoid()).new();
      let nextIteration = null;
      function nextIteration$35get() {
        let t93;
        t93 = nextIteration;
        return t93 == null ? dart.throw(new _internal.LateInitializationErrorImpl.new("Local 'nextIteration' has not been initialized.")) : t93;
      }
      dart.fn(nextIteration$35get, VoidToFn());
      function nextIteration$35set(t94) {
        if (t94 == null) dart.nullFailed(L65, 545, 30, "null");
        return nextIteration = t94;
      }
      dart.fn(nextIteration$35set, FnTodynamic());
      nextIteration$35set(async.Zone.current.bindUnaryCallbackGuarded(core.bool, dart.fn(keepGoing => {
        if (keepGoing == null) dart.nullFailed(L65, 550, 65, "keepGoing");
        while (dart.test(keepGoing)) {
          let result = null;
          try {
            result = action();
          } catch (e) {
            let error = dart.getThrown(e);
            let stackTrace = dart.stackTrace(e);
            if (core.Object.is(error)) {
              async._asyncCompleteWithErrorCallback(doneSignal, error, stackTrace);
              return;
            } else
              throw e;
          }
          if (FutureOfbool().is(result)) {
            result.then(dart.void, nextIteration$35get(), {onError: dart.bind(doneSignal, _completeError)});
            return;
          }
          keepGoing = result;
        }
        doneSignal[_complete](null);
      }, boolToNullN())));
      nextIteration$35get()(true);
      return doneSignal;
    }
  }
  (Future[dart.mixinNew] = function() {
  }).prototype = Future.prototype;
  dart.addTypeTests(Future);
  Future.prototype[dart.isFuture] = true;
  dart.addTypeCaches(Future);
  dart.setLibraryUri(Future, L29);
  return Future;
});
async.Future = async.Future$();
dart.defineLazy(async.Future, {
  /*async.Future._nullFuture*/get _nullFuture() {
    return new (_FutureOfNullN()).zoneValue(null, async._rootZone);
  },
  /*async.Future._falseFuture*/get _falseFuture() {
    return new (_FutureOfbool()).zoneValue(false, async._rootZone);
  }
}, false);
dart.addTypeTests(async.Future, dart.isFuture);
var message$1 = dart.privateName(async, "TimeoutException.message");
var duration$ = dart.privateName(async, "TimeoutException.duration");
async.TimeoutException = class TimeoutException extends core.Object {
  get message() {
    return this[message$1];
  }
  set message(value) {
    super.message = value;
  }
  get duration() {
    return this[duration$];
  }
  set duration(value) {
    super.duration = value;
  }
  toString() {
    let result = "TimeoutException";
    if (this.duration != null) result = dart.str("TimeoutException after ") + dart.str(this.duration);
    if (this.message != null) result = dart.str(result) + dart.str(": ") + dart.str(this.message);
    return result;
  }
};
(async.TimeoutException.new = function(message, duration = null) {
  this[message$1] = message;
  this[duration$] = duration;
  ;
}).prototype = async.TimeoutException.prototype;
dart.addTypeTests(async.TimeoutException);
dart.addTypeCaches(async.TimeoutException);
async.TimeoutException[dart.implements] = () => [core.Exception];
dart.setLibraryUri(async.TimeoutException, L29);
dart.setFieldSignature(async.TimeoutException, () => ({
  __proto__: dart.getFields(async.TimeoutException.__proto__),
  message: dart.finalFieldType(dart.nullable(core.String)),
  duration: dart.finalFieldType(dart.nullable(core.Duration))
}));
dart.defineExtensionMethods(async.TimeoutException, ['toString']);
const _is_Completer_default = Symbol('_is_Completer_default');
async.Completer$ = dart.generic(T => {
  class Completer extends core.Object {
    static new() {
      return new (async._AsyncCompleter$(T)).new();
    }
    static sync() {
      return new (async._SyncCompleter$(T)).new();
    }
  }
  (Completer[dart.mixinNew] = function() {
  }).prototype = Completer.prototype;
  dart.addTypeTests(Completer);
  Completer.prototype[_is_Completer_default] = true;
  dart.addTypeCaches(Completer);
  dart.setLibraryUri(Completer, L29);
  return Completer;
});
async.Completer = async.Completer$();
dart.addTypeTests(async.Completer, _is_Completer_default);
const _is__Completer_default = Symbol('_is__Completer_default');
async._Completer$ = dart.generic(T => {
  var _FutureOfT = () => (_FutureOfT = dart.constFn(async._Future$(T)))();
  class _Completer extends core.Object {
    completeError(error, stackTrace = null) {
      if (error == null) dart.nullFailed(L66, 19, 29, "error");
      core.ArgumentError.checkNotNull(core.Object, error, "error");
      if (!dart.test(this.future[_mayComplete])) dart.throw(new core.StateError.new("Future already completed"));
      let replacement = async.Zone.current.errorCallback(error, stackTrace);
      if (replacement != null) {
        error = replacement.error;
        stackTrace = replacement.stackTrace;
      } else {
        stackTrace == null ? stackTrace = async.AsyncError.defaultStackTrace(error) : null;
      }
      if (stackTrace == null) dart.throw("unreachable");
      this[_completeError](error, stackTrace);
    }
    get isCompleted() {
      return !dart.test(this.future[_mayComplete]);
    }
  }
  (_Completer.new = function() {
    this.future = new (_FutureOfT()).new();
    ;
  }).prototype = _Completer.prototype;
  dart.addTypeTests(_Completer);
  _Completer.prototype[_is__Completer_default] = true;
  dart.addTypeCaches(_Completer);
  _Completer[dart.implements] = () => [async.Completer$(T)];
  dart.setMethodSignature(_Completer, () => ({
    __proto__: dart.getMethods(_Completer.__proto__),
    completeError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)])
  }));
  dart.setGetterSignature(_Completer, () => ({
    __proto__: dart.getGetters(_Completer.__proto__),
    isCompleted: core.bool
  }));
  dart.setLibraryUri(_Completer, L29);
  dart.setFieldSignature(_Completer, () => ({
    __proto__: dart.getFields(_Completer.__proto__),
    future: dart.finalFieldType(async._Future$(T))
  }));
  return _Completer;
});
async._Completer = async._Completer$();
dart.addTypeTests(async._Completer, _is__Completer_default);
const _is__AsyncCompleter_default = Symbol('_is__AsyncCompleter_default');
async._AsyncCompleter$ = dart.generic(T => {
  var FutureOrOfT = () => (FutureOrOfT = dart.constFn(async.FutureOr$(T)))();
  var FutureOrNOfT = () => (FutureOrNOfT = dart.constFn(dart.nullable(FutureOrOfT())))();
  class _AsyncCompleter extends async._Completer$(T) {
    complete(value = null) {
      FutureOrNOfT().as(value);
      if (!dart.test(this.future[_mayComplete])) dart.throw(new core.StateError.new("Future already completed"));
      this.future[_asyncComplete](FutureOrOfT().as(value == null ? value : value));
    }
    [_completeError](error, stackTrace) {
      if (error == null) dart.nullFailed(L66, 47, 30, "error");
      if (stackTrace == null) dart.nullFailed(L66, 47, 48, "stackTrace");
      this.future[_asyncCompleteError](error, stackTrace);
    }
  }
  (_AsyncCompleter.new = function() {
    _AsyncCompleter.__proto__.new.call(this);
    ;
  }).prototype = _AsyncCompleter.prototype;
  dart.addTypeTests(_AsyncCompleter);
  _AsyncCompleter.prototype[_is__AsyncCompleter_default] = true;
  dart.addTypeCaches(_AsyncCompleter);
  dart.setMethodSignature(_AsyncCompleter, () => ({
    __proto__: dart.getMethods(_AsyncCompleter.__proto__),
    complete: dart.fnType(dart.void, [], [dart.nullable(core.Object)]),
    [_completeError]: dart.fnType(dart.void, [core.Object, core.StackTrace])
  }));
  dart.setLibraryUri(_AsyncCompleter, L29);
  return _AsyncCompleter;
});
async._AsyncCompleter = async._AsyncCompleter$();
dart.addTypeTests(async._AsyncCompleter, _is__AsyncCompleter_default);
const _is__SyncCompleter_default = Symbol('_is__SyncCompleter_default');
async._SyncCompleter$ = dart.generic(T => {
  var FutureOrOfT = () => (FutureOrOfT = dart.constFn(async.FutureOr$(T)))();
  var FutureOrNOfT = () => (FutureOrNOfT = dart.constFn(dart.nullable(FutureOrOfT())))();
  class _SyncCompleter extends async._Completer$(T) {
    complete(value = null) {
      FutureOrNOfT().as(value);
      if (!dart.test(this.future[_mayComplete])) dart.throw(new core.StateError.new("Future already completed"));
      this.future[_complete](FutureOrOfT().as(value == null ? value : value));
    }
    [_completeError](error, stackTrace) {
      if (error == null) dart.nullFailed(L66, 58, 30, "error");
      if (stackTrace == null) dart.nullFailed(L66, 58, 48, "stackTrace");
      this.future[_completeError](error, stackTrace);
    }
  }
  (_SyncCompleter.new = function() {
    _SyncCompleter.__proto__.new.call(this);
    ;
  }).prototype = _SyncCompleter.prototype;
  dart.addTypeTests(_SyncCompleter);
  _SyncCompleter.prototype[_is__SyncCompleter_default] = true;
  dart.addTypeCaches(_SyncCompleter);
  dart.setMethodSignature(_SyncCompleter, () => ({
    __proto__: dart.getMethods(_SyncCompleter.__proto__),
    complete: dart.fnType(dart.void, [], [dart.nullable(core.Object)]),
    [_completeError]: dart.fnType(dart.void, [core.Object, core.StackTrace])
  }));
  dart.setLibraryUri(_SyncCompleter, L29);
  return _SyncCompleter;
});
async._SyncCompleter = async._SyncCompleter$();
dart.addTypeTests(async._SyncCompleter, _is__SyncCompleter_default);
var _nextListener = dart.privateName(async, "_nextListener");
var _onValue = dart.privateName(async, "_onValue");
var _errorTest = dart.privateName(async, "_errorTest");
var _whenCompleteAction = dart.privateName(async, "_whenCompleteAction");
const _is__FutureListener_default = Symbol('_is__FutureListener_default');
async._FutureListener$ = dart.generic((S, T) => {
  var SToFutureOrOfT = () => (SToFutureOrOfT = dart.constFn(dart.fnType(FutureOrOfT(), [S])))();
  var FutureOrOfT = () => (FutureOrOfT = dart.constFn(async.FutureOr$(T)))();
  class _FutureListener extends core.Object {
    get [_zone$]() {
      return this.result[_zone$];
    }
    get handlesValue() {
      return (dart.notNull(this.state) & 1) !== 0;
    }
    get handlesError() {
      return (dart.notNull(this.state) & 2) !== 0;
    }
    get hasErrorTest() {
      return (dart.notNull(this.state) & 15) >>> 0 === 6;
    }
    get handlesComplete() {
      return (dart.notNull(this.state) & 15) >>> 0 === 8;
    }
    get isAwait() {
      return (dart.notNull(this.state) & 16) !== 0;
    }
    get [_onValue]() {
      if (!dart.test(this.handlesValue)) dart.assertFailed(null, L66, 118, 12, "handlesValue");
      return SToFutureOrOfT().as(this.callback);
    }
    get [_onError]() {
      return this.errorCallback;
    }
    get [_errorTest]() {
      if (!dart.test(this.hasErrorTest)) dart.assertFailed(null, L66, 125, 12, "hasErrorTest");
      return ObjectTobool().as(this.callback);
    }
    get [_whenCompleteAction]() {
      if (!dart.test(this.handlesComplete)) dart.assertFailed(null, L66, 130, 12, "handlesComplete");
      return VoidTodynamic().as(this.callback);
    }
    get hasErrorCallback() {
      if (!dart.test(this.handlesError)) dart.assertFailed(null, L66, 138, 12, "handlesError");
      return this[_onError] != null;
    }
    handleValue(sourceResult) {
      S.as(sourceResult);
      return this[_zone$].runUnary(FutureOrOfT(), S, this[_onValue], sourceResult);
    }
    matchesErrorTest(asyncError) {
      if (asyncError == null) dart.nullFailed(L66, 146, 36, "asyncError");
      if (!dart.test(this.hasErrorTest)) return true;
      return this[_zone$].runUnary(core.bool, core.Object, this[_errorTest], asyncError.error);
    }
    handleError(asyncError) {
      if (asyncError == null) dart.nullFailed(L66, 151, 38, "asyncError");
      if (!(dart.test(this.handlesError) && dart.test(this.hasErrorCallback))) dart.assertFailed(null, L66, 152, 12, "handlesError && hasErrorCallback");
      let errorCallback = this.errorCallback;
      if (ObjectAndStackTraceTodynamic().is(errorCallback)) {
        return FutureOrOfT().as(this[_zone$].runBinary(dart.dynamic, core.Object, core.StackTrace, errorCallback, asyncError.error, asyncError.stackTrace));
      } else {
        return FutureOrOfT().as(this[_zone$].runUnary(dart.dynamic, core.Object, ObjectTodynamic().as(errorCallback), asyncError.error));
      }
    }
    handleWhenComplete() {
      if (!!dart.test(this.handlesError)) dart.assertFailed(null, L66, 166, 12, "!handlesError");
      return this[_zone$].run(dart.dynamic, this[_whenCompleteAction]);
    }
  }
  (_FutureListener.then = function(result, onValue, errorCallback) {
    if (result == null) dart.nullFailed(L66, 90, 12, "result");
    if (onValue == null) dart.nullFailed(L66, 90, 44, "onValue");
    this[_nextListener] = null;
    this.result = result;
    this.callback = onValue;
    this.errorCallback = errorCallback;
    this.state = errorCallback == null ? 1 : 3;
    ;
  }).prototype = _FutureListener.prototype;
  (_FutureListener.thenAwait = function(result, onValue, errorCallback) {
    if (result == null) dart.nullFailed(L66, 96, 12, "result");
    if (onValue == null) dart.nullFailed(L66, 96, 41, "onValue");
    if (errorCallback == null) dart.nullFailed(L66, 96, 59, "errorCallback");
    this[_nextListener] = null;
    this.result = result;
    this.callback = onValue;
    this.errorCallback = errorCallback;
    this.state = ((errorCallback == null ? 1 : 3) | 16) >>> 0;
    ;
  }).prototype = _FutureListener.prototype;
  (_FutureListener.catchError = function(result, errorCallback, callback) {
    if (result == null) dart.nullFailed(L66, 102, 35, "result");
    this[_nextListener] = null;
    this.result = result;
    this.errorCallback = errorCallback;
    this.callback = callback;
    this.state = callback == null ? 2 : 6;
    ;
  }).prototype = _FutureListener.prototype;
  (_FutureListener.whenComplete = function(result, callback) {
    if (result == null) dart.nullFailed(L66, 105, 37, "result");
    this[_nextListener] = null;
    this.result = result;
    this.callback = callback;
    this.errorCallback = null;
    this.state = 8;
    ;
  }).prototype = _FutureListener.prototype;
  dart.addTypeTests(_FutureListener);
  _FutureListener.prototype[_is__FutureListener_default] = true;
  dart.addTypeCaches(_FutureListener);
  dart.setMethodSignature(_FutureListener, () => ({
    __proto__: dart.getMethods(_FutureListener.__proto__),
    handleValue: dart.fnType(async.FutureOr$(T), [dart.nullable(core.Object)]),
    matchesErrorTest: dart.fnType(core.bool, [async.AsyncError]),
    handleError: dart.fnType(async.FutureOr$(T), [async.AsyncError]),
    handleWhenComplete: dart.fnType(dart.dynamic, [])
  }));
  dart.setGetterSignature(_FutureListener, () => ({
    __proto__: dart.getGetters(_FutureListener.__proto__),
    [_zone$]: async._Zone,
    handlesValue: core.bool,
    handlesError: core.bool,
    hasErrorTest: core.bool,
    handlesComplete: core.bool,
    isAwait: core.bool,
    [_onValue]: dart.fnType(async.FutureOr$(T), [S]),
    [_onError]: dart.nullable(core.Function),
    [_errorTest]: dart.fnType(core.bool, [core.Object]),
    [_whenCompleteAction]: dart.fnType(dart.dynamic, []),
    hasErrorCallback: core.bool
  }));
  dart.setLibraryUri(_FutureListener, L29);
  dart.setFieldSignature(_FutureListener, () => ({
    __proto__: dart.getFields(_FutureListener.__proto__),
    [_nextListener]: dart.fieldType(dart.nullable(async._FutureListener)),
    result: dart.finalFieldType(async._Future$(T)),
    state: dart.finalFieldType(core.int),
    callback: dart.finalFieldType(dart.nullable(core.Function)),
    errorCallback: dart.finalFieldType(dart.nullable(core.Function))
  }));
  return _FutureListener;
});
async._FutureListener = async._FutureListener$();
dart.defineLazy(async._FutureListener, {
  /*async._FutureListener.maskValue*/get maskValue() {
    return 1;
  },
  /*async._FutureListener.maskError*/get maskError() {
    return 2;
  },
  /*async._FutureListener.maskTestError*/get maskTestError() {
    return 4;
  },
  /*async._FutureListener.maskWhencomplete*/get maskWhencomplete() {
    return 8;
  },
  /*async._FutureListener.stateChain*/get stateChain() {
    return 0;
  },
  /*async._FutureListener.stateThen*/get stateThen() {
    return 1;
  },
  /*async._FutureListener.stateThenOnerror*/get stateThenOnerror() {
    return 3;
  },
  /*async._FutureListener.stateCatcherror*/get stateCatcherror() {
    return 2;
  },
  /*async._FutureListener.stateCatcherrorTest*/get stateCatcherrorTest() {
    return 6;
  },
  /*async._FutureListener.stateWhencomplete*/get stateWhencomplete() {
    return 8;
  },
  /*async._FutureListener.maskType*/get maskType() {
    return 15;
  },
  /*async._FutureListener.stateIsAwait*/get stateIsAwait() {
    return 16;
  }
}, false);
dart.addTypeTests(async._FutureListener, _is__FutureListener_default);
var _resultOrListeners = dart.privateName(async, "_resultOrListeners");
var _setValue = dart.privateName(async, "_setValue");
var _isPendingComplete = dart.privateName(async, "_isPendingComplete");
var _mayAddListener = dart.privateName(async, "_mayAddListener");
var _isChained = dart.privateName(async, "_isChained");
var _isComplete = dart.privateName(async, "_isComplete");
var _hasError = dart.privateName(async, "_hasError");
var _setChained = dart.privateName(async, "_setChained");
var _setPendingComplete = dart.privateName(async, "_setPendingComplete");
var _clearPendingComplete = dart.privateName(async, "_clearPendingComplete");
var _error = dart.privateName(async, "_error");
var _chainSource = dart.privateName(async, "_chainSource");
var _setErrorObject = dart.privateName(async, "_setErrorObject");
var _setError = dart.privateName(async, "_setError");
var _cloneResult = dart.privateName(async, "_cloneResult");
var _prependListeners = dart.privateName(async, "_prependListeners");
var _reverseListeners = dart.privateName(async, "_reverseListeners");
var _removeListeners = dart.privateName(async, "_removeListeners");
var _chainFuture = dart.privateName(async, "_chainFuture");
var _asyncCompleteWithValue = dart.privateName(async, "_asyncCompleteWithValue");
const _is__Future_default = Symbol('_is__Future_default');
async._Future$ = dart.generic(T => {
  var _FutureOfT = () => (_FutureOfT = dart.constFn(async._Future$(T)))();
  var _FutureListenerOfT$T = () => (_FutureListenerOfT$T = dart.constFn(async._FutureListener$(T, T)))();
  var StreamOfT = () => (StreamOfT = dart.constFn(async.Stream$(T)))();
  var FutureOrOfT = () => (FutureOrOfT = dart.constFn(async.FutureOr$(T)))();
  var FutureOfT = () => (FutureOfT = dart.constFn(async.Future$(T)))();
  var VoidToFutureOrOfT = () => (VoidToFutureOrOfT = dart.constFn(dart.fnType(FutureOrOfT(), [])))();
  var VoidToNFutureOrOfT = () => (VoidToNFutureOrOfT = dart.constFn(dart.nullable(VoidToFutureOrOfT())))();
  var TToNullN = () => (TToNullN = dart.constFn(dart.fnType(core.Null, [T])))();
  class _Future extends core.Object {
    get [_mayComplete]() {
      return this[_state] === 0;
    }
    get [_isPendingComplete]() {
      return this[_state] === 1;
    }
    get [_mayAddListener]() {
      return dart.notNull(this[_state]) <= 1;
    }
    get [_isChained]() {
      return this[_state] === 2;
    }
    get [_isComplete]() {
      return dart.notNull(this[_state]) >= 4;
    }
    get [_hasError]() {
      return this[_state] === 8;
    }
    static _continuationFunctions(future) {
      let t97;
      if (future == null) dart.nullFailed(L66, 250, 65, "future");
      let result = null;
      while (true) {
        if (dart.test(future[_mayAddListener])) return result;
        if (!!dart.test(future[_isComplete])) dart.assertFailed(null, L66, 254, 14, "!future._isComplete");
        if (!!dart.test(future[_isChained])) dart.assertFailed(null, L66, 255, 14, "!future._isChained");
        let listener = _FutureListenerNOfObject$Object().as(future[_resultOrListeners]);
        if (listener != null && listener[_nextListener] == null && dart.test(listener.isAwait)) {
          (t97 = result, t97 == null ? result = JSArrayOfFunction().of([]) : t97)[$add](dart.bind(listener, 'handleValue'));
          future = listener.result;
          if (!!dart.test(future[_isComplete])) dart.assertFailed(null, L66, 263, 16, "!future._isComplete");
        } else {
          break;
        }
      }
      return result;
    }
    [_setChained](source) {
      if (source == null) dart.nullFailed(L66, 271, 28, "source");
      if (!dart.test(this[_mayAddListener])) dart.assertFailed(null, L66, 272, 12, "_mayAddListener");
      this[_state] = 2;
      this[_resultOrListeners] = source;
    }
    then(R, f, opts) {
      if (f == null) dart.nullFailed(L66, 277, 33, "f");
      let onError = opts && 'onError' in opts ? opts.onError : null;
      let currentZone = async.Zone.current;
      if (currentZone != async._rootZone) {
        f = currentZone.registerUnaryCallback(async.FutureOr$(R), T, f);
        if (onError != null) {
          onError = async._registerErrorHandler(onError, currentZone);
        }
      }
      let result = new (async._Future$(R)).new();
      this[_addListener](new (async._FutureListener$(T, R)).then(result, f, onError));
      return result;
    }
    [_thenAwait](E, f, onError) {
      if (f == null) dart.nullFailed(L66, 299, 39, "f");
      if (onError == null) dart.nullFailed(L66, 299, 60, "onError");
      let result = new (async._Future$(E)).new();
      this[_addListener](new (async._FutureListener$(T, E)).thenAwait(result, f, onError));
      return result;
    }
    catchError(onError, opts) {
      if (onError == null) dart.nullFailed(L66, 305, 33, "onError");
      let test = opts && 'test' in opts ? opts.test : null;
      let result = new (_FutureOfT()).new();
      if (result[_zone$] != async._rootZone) {
        onError = async._registerErrorHandler(onError, result[_zone$]);
        if (test != null) test = result[_zone$].registerUnaryCallback(core.bool, core.Object, test);
      }
      this[_addListener](new (_FutureListenerOfT$T()).catchError(result, onError, test));
      return result;
    }
    whenComplete(action) {
      if (action == null) dart.nullFailed(L66, 315, 34, "action");
      let result = new (_FutureOfT()).new();
      if (result[_zone$] != async._rootZone) {
        action = result[_zone$].registerCallback(dart.dynamic, action);
      }
      this[_addListener](new (_FutureListenerOfT$T()).whenComplete(result, action));
      return result;
    }
    asStream() {
      return StreamOfT().fromFuture(this);
    }
    [_setPendingComplete]() {
      if (!dart.test(this[_mayComplete])) dart.assertFailed(null, L66, 327, 12, "_mayComplete");
      this[_state] = 1;
    }
    [_clearPendingComplete]() {
      if (!dart.test(this[_isPendingComplete])) dart.assertFailed(null, L66, 332, 12, "_isPendingComplete");
      this[_state] = 0;
    }
    get [_error]() {
      if (!dart.test(this[_hasError])) dart.assertFailed(null, L66, 337, 12, "_hasError");
      return async.AsyncError.as(this[_resultOrListeners]);
    }
    get [_chainSource]() {
      if (!dart.test(this[_isChained])) dart.assertFailed(null, L66, 342, 12, "_isChained");
      return async._Future.as(this[_resultOrListeners]);
    }
    [_setValue](value) {
      T.as(value);
      if (!!dart.test(this[_isComplete])) dart.assertFailed(null, L66, 348, 12, "!_isComplete");
      this[_state] = 4;
      this[_resultOrListeners] = value;
    }
    [_setErrorObject](error) {
      if (error == null) dart.nullFailed(L66, 353, 35, "error");
      if (!!dart.test(this[_isComplete])) dart.assertFailed(null, L66, 354, 12, "!_isComplete");
      this[_state] = 8;
      this[_resultOrListeners] = error;
    }
    [_setError](error, stackTrace) {
      if (error == null) dart.nullFailed(L66, 359, 25, "error");
      if (stackTrace == null) dart.nullFailed(L66, 359, 43, "stackTrace");
      this[_setErrorObject](new async.AsyncError.new(error, stackTrace));
    }
    [_cloneResult](source) {
      if (source == null) dart.nullFailed(L66, 366, 29, "source");
      if (!!dart.test(this[_isComplete])) dart.assertFailed(null, L66, 367, 12, "!_isComplete");
      if (!dart.test(source[_isComplete])) dart.assertFailed(null, L66, 368, 12, "source._isComplete");
      this[_state] = source[_state];
      this[_resultOrListeners] = source[_resultOrListeners];
    }
    [_addListener](listener) {
      if (listener == null) dart.nullFailed(L66, 373, 37, "listener");
      if (!(listener[_nextListener] == null)) dart.assertFailed(null, L66, 374, 12, "listener._nextListener == null");
      if (dart.test(this[_mayAddListener])) {
        listener[_nextListener] = _FutureListenerN().as(this[_resultOrListeners]);
        this[_resultOrListeners] = listener;
      } else {
        if (dart.test(this[_isChained])) {
          let source = this[_chainSource];
          if (!dart.test(source[_isComplete])) {
            source[_addListener](listener);
            return;
          }
          this[_cloneResult](source);
        }
        if (!dart.test(this[_isComplete])) dart.assertFailed(null, L66, 390, 14, "_isComplete");
        this[_zone$].scheduleMicrotask(dart.fn(() => {
          async._Future._propagateToListeners(this, listener);
        }, VoidToNullN()));
      }
    }
    [_prependListeners](listeners) {
      if (listeners == null) return;
      if (dart.test(this[_mayAddListener])) {
        let existingListeners = _FutureListenerN().as(this[_resultOrListeners]);
        this[_resultOrListeners] = listeners;
        if (existingListeners != null) {
          let cursor = listeners;
          let next = cursor[_nextListener];
          while (next != null) {
            cursor = next;
            next = cursor[_nextListener];
          }
          cursor[_nextListener] = existingListeners;
        }
      } else {
        if (dart.test(this[_isChained])) {
          let source = this[_chainSource];
          if (!dart.test(source[_isComplete])) {
            source[_prependListeners](listeners);
            return;
          }
          this[_cloneResult](source);
        }
        if (!dart.test(this[_isComplete])) dart.assertFailed(null, L66, 424, 14, "_isComplete");
        listeners = this[_reverseListeners](listeners);
        this[_zone$].scheduleMicrotask(dart.fn(() => {
          async._Future._propagateToListeners(this, listeners);
        }, VoidToNullN()));
      }
    }
    [_removeListeners]() {
      if (!!dart.test(this[_isComplete])) dart.assertFailed(null, L66, 435, 12, "!_isComplete");
      let current = _FutureListenerN().as(this[_resultOrListeners]);
      this[_resultOrListeners] = null;
      return this[_reverseListeners](current);
    }
    [_reverseListeners](listeners) {
      let prev = null;
      let current = listeners;
      while (current != null) {
        let next = current[_nextListener];
        current[_nextListener] = prev;
        prev = current;
        current = next;
      }
      return prev;
    }
    static _chainForeignFuture(source, target) {
      if (source == null) dart.nullFailed(L66, 457, 42, "source");
      if (target == null) dart.nullFailed(L66, 457, 58, "target");
      if (!!dart.test(target[_isComplete])) dart.assertFailed(null, L66, 458, 12, "!target._isComplete");
      if (!!async._Future.is(source)) dart.assertFailed(null, L66, 459, 12, "source is! _Future");
      target[_setPendingComplete]();
      try {
        source.then(core.Null, dart.fn(value => {
          if (!dart.test(target[_isPendingComplete])) dart.assertFailed(null, L66, 465, 16, "target._isPendingComplete");
          target[_clearPendingComplete]();
          target[_complete](value);
        }, dynamicToNullN()), {onError: dart.fn((error, stackTrace) => {
            if (error == null) dart.nullFailed(L66, 471, 27, "error");
            if (stackTrace == null) dart.nullFailed(L66, 471, 45, "stackTrace");
            if (!dart.test(target[_isPendingComplete])) dart.assertFailed(null, L66, 472, 16, "target._isPendingComplete");
            target[_completeError](error, stackTrace);
          }, ObjectAndStackTraceToNullN())});
      } catch (e$) {
        let e = dart.getThrown(e$);
        let s = dart.stackTrace(e$);
        if (core.Object.is(e)) {
          async.scheduleMicrotask(dart.fn(() => {
            target[_completeError](e, s);
          }, VoidToNullN()));
        } else
          throw e$;
      }
    }
    static _chainCoreFuture(source, target) {
      if (source == null) dart.nullFailed(L66, 488, 40, "source");
      if (target == null) dart.nullFailed(L66, 488, 56, "target");
      if (!dart.test(target[_mayAddListener])) dart.assertFailed(null, L66, 489, 12, "target._mayAddListener");
      while (dart.test(source[_isChained])) {
        source = source[_chainSource];
      }
      if (dart.test(source[_isComplete])) {
        let listeners = target[_removeListeners]();
        target[_cloneResult](source);
        async._Future._propagateToListeners(target, listeners);
      } else {
        let listeners = _FutureListenerN().as(target[_resultOrListeners]);
        target[_setChained](source);
        source[_prependListeners](listeners);
      }
    }
    [_complete](value) {
      FutureOrOfT().as(value);
      if (!!dart.test(this[_isComplete])) dart.assertFailed(null, L66, 505, 12, "!_isComplete");
      if (FutureOfT().is(value)) {
        if (_FutureOfT().is(value)) {
          async._Future._chainCoreFuture(value, this);
        } else {
          async._Future._chainForeignFuture(value, this);
        }
      } else {
        let listeners = this[_removeListeners]();
        this[_setValue](T.as(value));
        async._Future._propagateToListeners(this, listeners);
      }
    }
    [_completeWithValue](value) {
      T.as(value);
      if (!!dart.test(this[_isComplete])) dart.assertFailed(null, L66, 524, 12, "!_isComplete");
      if (!!FutureOfT().is(value)) dart.assertFailed(null, L66, 525, 12, "value is! Future<T>");
      let listeners = this[_removeListeners]();
      this[_setValue](value);
      async._Future._propagateToListeners(this, listeners);
    }
    [_completeError](error, stackTrace) {
      if (error == null) dart.nullFailed(L66, 532, 30, "error");
      if (stackTrace == null) dart.nullFailed(L66, 532, 48, "stackTrace");
      if (!!dart.test(this[_isComplete])) dart.assertFailed(null, L66, 533, 12, "!_isComplete");
      let listeners = this[_removeListeners]();
      this[_setError](error, stackTrace);
      async._Future._propagateToListeners(this, listeners);
    }
    [_asyncComplete](value) {
      FutureOrOfT().as(value);
      if (!!dart.test(this[_isComplete])) dart.assertFailed(null, L66, 541, 12, "!_isComplete");
      if (FutureOfT().is(value)) {
        this[_chainFuture](value);
        return;
      }
      this[_asyncCompleteWithValue](T.as(value));
    }
    [_asyncCompleteWithValue](value) {
      this[_setPendingComplete]();
      this[_zone$].scheduleMicrotask(dart.fn(() => {
        this[_completeWithValue](value);
      }, VoidToNullN()));
    }
    [_chainFuture](value) {
      if (value == null) dart.nullFailed(L66, 571, 31, "value");
      if (_FutureOfT().is(value)) {
        if (dart.test(value[_hasError])) {
          this[_setPendingComplete]();
          this[_zone$].scheduleMicrotask(dart.fn(() => {
            async._Future._chainCoreFuture(value, this);
          }, VoidToNullN()));
        } else {
          async._Future._chainCoreFuture(value, this);
        }
        return;
      }
      async._Future._chainForeignFuture(value, this);
    }
    [_asyncCompleteError](error, stackTrace) {
      if (error == null) dart.nullFailed(L66, 588, 35, "error");
      if (stackTrace == null) dart.nullFailed(L66, 588, 53, "stackTrace");
      if (!!dart.test(this[_isComplete])) dart.assertFailed(null, L66, 589, 12, "!_isComplete");
      this[_setPendingComplete]();
      this[_zone$].scheduleMicrotask(dart.fn(() => {
        this[_completeError](error, stackTrace);
      }, VoidToNullN()));
    }
    static _propagateToListeners(source, listeners) {
      if (source == null) dart.nullFailed(L66, 602, 15, "source");
      while (true) {
        if (!dart.test(source[_isComplete])) dart.assertFailed(null, L66, 604, 14, "source._isComplete");
        let hasError = source[_hasError];
        if (listeners == null) {
          if (dart.test(hasError)) {
            let asyncError = source[_error];
            source[_zone$].handleUncaughtError(asyncError.error, asyncError.stackTrace);
          }
          return;
        }
        let listener = listeners;
        let nextListener = listener[_nextListener];
        while (nextListener != null) {
          listener[_nextListener] = null;
          async._Future._propagateToListeners(source, listener);
          listener = nextListener;
          nextListener = listener[_nextListener];
        }
        let sourceResult = source[_resultOrListeners];
        let listenerHasError = hasError;
        let listenerValueOrError = sourceResult;
        if (dart.test(hasError) || dart.test(listener.handlesValue) || dart.test(listener.handlesComplete)) {
          let zone = listener[_zone$];
          if (dart.test(hasError) && !dart.test(source[_zone$].inSameErrorZone(zone))) {
            let asyncError = source[_error];
            source[_zone$].handleUncaughtError(asyncError.error, asyncError.stackTrace);
            return;
          }
          let oldZone = null;
          if (async.Zone._current != zone) {
            oldZone = async.Zone._enter(zone);
          }
          function handleWhenCompleteCallback() {
            if (!!dart.test(listener.handlesValue)) dart.assertFailed(null, L66, 662, 18, "!listener.handlesValue");
            if (!!dart.test(listener.handlesError)) dart.assertFailed(null, L66, 663, 18, "!listener.handlesError");
            let completeResult = null;
            try {
              completeResult = listener.handleWhenComplete();
            } catch (e$) {
              let e = dart.getThrown(e$);
              let s = dart.stackTrace(e$);
              if (core.Object.is(e)) {
                if (dart.test(hasError) && core.identical(source[_error].error, e)) {
                  listenerValueOrError = source[_error];
                } else {
                  listenerValueOrError = new async.AsyncError.new(e, s);
                }
                listenerHasError = true;
                return;
              } else
                throw e$;
            }
            if (async._Future.is(completeResult) && dart.test(completeResult[_isComplete])) {
              if (dart.test(completeResult[_hasError])) {
                listenerValueOrError = completeResult[_error];
                listenerHasError = true;
              }
              return;
            }
            if (async.Future.is(completeResult)) {
              let originalSource = source;
              listenerValueOrError = completeResult.then(dart.dynamic, dart.fn(_ => originalSource, dynamicTo_Future()));
              listenerHasError = false;
            }
          }
          dart.fn(handleWhenCompleteCallback, VoidTovoid());
          function handleValueCallback() {
            try {
              listenerValueOrError = listener.handleValue(sourceResult);
            } catch (e$) {
              let e = dart.getThrown(e$);
              let s = dart.stackTrace(e$);
              if (core.Object.is(e)) {
                listenerValueOrError = new async.AsyncError.new(e, s);
                listenerHasError = true;
              } else
                throw e$;
            }
          }
          dart.fn(handleValueCallback, VoidTovoid());
          function handleError() {
            try {
              let asyncError = source[_error];
              if (dart.test(listener.matchesErrorTest(asyncError)) && dart.test(listener.hasErrorCallback)) {
                listenerValueOrError = listener.handleError(asyncError);
                listenerHasError = false;
              }
            } catch (e$) {
              let e = dart.getThrown(e$);
              let s = dart.stackTrace(e$);
              if (core.Object.is(e)) {
                if (core.identical(source[_error].error, e)) {
                  listenerValueOrError = source[_error];
                } else {
                  listenerValueOrError = new async.AsyncError.new(e, s);
                }
                listenerHasError = true;
              } else
                throw e$;
            }
          }
          dart.fn(handleError, VoidTovoid());
          if (dart.test(listener.handlesComplete)) {
            handleWhenCompleteCallback();
          } else if (!dart.test(hasError)) {
            if (dart.test(listener.handlesValue)) {
              handleValueCallback();
            }
          } else {
            if (dart.test(listener.handlesError)) {
              handleError();
            }
          }
          if (oldZone != null) async.Zone._leave(oldZone);
          if (async.Future.is(listenerValueOrError)) {
            let chainSource = async.Future.as(listenerValueOrError);
            let result = listener.result;
            if (async._Future.is(chainSource)) {
              if (dart.test(chainSource[_isComplete])) {
                listeners = result[_removeListeners]();
                result[_cloneResult](chainSource);
                source = chainSource;
                continue;
              } else {
                async._Future._chainCoreFuture(chainSource, result);
              }
            } else {
              async._Future._chainForeignFuture(chainSource, result);
            }
            return;
          }
        }
        let result = listener.result;
        listeners = result[_removeListeners]();
        if (!dart.test(listenerHasError)) {
          result[_setValue](listenerValueOrError);
        } else {
          let asyncError = async.AsyncError.as(listenerValueOrError);
          result[_setErrorObject](asyncError);
        }
        source = result;
      }
    }
    timeout(timeLimit, opts) {
      if (timeLimit == null) dart.nullFailed(L66, 772, 30, "timeLimit");
      let onTimeout = opts && 'onTimeout' in opts ? opts.onTimeout : null;
      VoidToNFutureOrOfT().as(onTimeout);
      if (dart.test(this[_isComplete])) return new (_FutureOfT()).immediate(this);
      let _future = new (_FutureOfT()).new();
      let timer = null;
      if (onTimeout == null) {
        timer = async.Timer.new(timeLimit, dart.fn(() => {
          _future[_completeError](new async.TimeoutException.new("Future not completed", timeLimit), core.StackTrace.empty);
        }, VoidToNullN()));
      } else {
        let zone = async.Zone.current;
        let onTimeoutHandler = zone.registerCallback(FutureOrOfT(), onTimeout);
        timer = async.Timer.new(timeLimit, dart.fn(() => {
          try {
            _future[_complete](zone.run(FutureOrOfT(), onTimeoutHandler));
          } catch (e$) {
            let e = dart.getThrown(e$);
            let s = dart.stackTrace(e$);
            if (core.Object.is(e)) {
              _future[_completeError](e, s);
            } else
              throw e$;
          }
        }, VoidToNullN()));
      }
      this.then(core.Null, dart.fn(v => {
        if (dart.test(timer.isActive)) {
          timer.cancel();
          _future[_completeWithValue](v);
        }
      }, TToNullN()), {onError: dart.fn((e, s) => {
          if (e == null) dart.nullFailed(L66, 802, 25, "e");
          if (s == null) dart.nullFailed(L66, 802, 39, "s");
          if (dart.test(timer.isActive)) {
            timer.cancel();
            _future[_completeError](e, s);
          }
        }, ObjectAndStackTraceToNullN())});
      return _future;
    }
  }
  (_Future.new = function() {
    this[_state] = 0;
    this[_resultOrListeners] = null;
    this[_zone$] = async.Zone._current;
    ;
  }).prototype = _Future.prototype;
  (_Future.immediate = function(result) {
    this[_state] = 0;
    this[_resultOrListeners] = null;
    this[_zone$] = async.Zone._current;
    this[_asyncComplete](result);
  }).prototype = _Future.prototype;
  (_Future.zoneValue = function(value, _zone) {
    if (_zone == null) dart.nullFailed(L66, 231, 35, "_zone");
    this[_state] = 0;
    this[_resultOrListeners] = null;
    this[_zone$] = _zone;
    this[_setValue](value);
  }).prototype = _Future.prototype;
  (_Future.immediateError = function(error, stackTrace) {
    if (stackTrace == null) dart.nullFailed(L66, 235, 48, "stackTrace");
    this[_state] = 0;
    this[_resultOrListeners] = null;
    this[_zone$] = async.Zone._current;
    this[_asyncCompleteError](core.Object.as(error), stackTrace);
  }).prototype = _Future.prototype;
  (_Future.value = function(value) {
    _Future.zoneValue.call(this, value, async.Zone._current);
  }).prototype = _Future.prototype;
  _Future.prototype[dart.isFuture] = true;
  dart.addTypeTests(_Future);
  _Future.prototype[_is__Future_default] = true;
  dart.addTypeCaches(_Future);
  _Future[dart.implements] = () => [async.Future$(T)];
  dart.setMethodSignature(_Future, () => ({
    __proto__: dart.getMethods(_Future.__proto__),
    [_setChained]: dart.fnType(dart.void, [async._Future]),
    then: dart.gFnType(R => [async.Future$(R), [dart.fnType(async.FutureOr$(R), [T])], {onError: dart.nullable(core.Function)}, {}], R => [dart.nullable(core.Object)]),
    [_thenAwait]: dart.gFnType(E => [async.Future$(E), [dart.fnType(async.FutureOr$(E), [T]), core.Function]], E => [dart.nullable(core.Object)]),
    catchError: dart.fnType(async.Future$(T), [core.Function], {test: dart.nullable(dart.fnType(core.bool, [core.Object]))}, {}),
    whenComplete: dart.fnType(async.Future$(T), [dart.fnType(dart.dynamic, [])]),
    asStream: dart.fnType(async.Stream$(T), []),
    [_setPendingComplete]: dart.fnType(dart.void, []),
    [_clearPendingComplete]: dart.fnType(dart.void, []),
    [_setValue]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    [_setErrorObject]: dart.fnType(dart.void, [async.AsyncError]),
    [_setError]: dart.fnType(dart.void, [core.Object, core.StackTrace]),
    [_cloneResult]: dart.fnType(dart.void, [async._Future]),
    [_addListener]: dart.fnType(dart.void, [async._FutureListener]),
    [_prependListeners]: dart.fnType(dart.void, [dart.nullable(async._FutureListener)]),
    [_removeListeners]: dart.fnType(dart.nullable(async._FutureListener), []),
    [_reverseListeners]: dart.fnType(dart.nullable(async._FutureListener), [dart.nullable(async._FutureListener)]),
    [_complete]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    [_completeWithValue]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    [_completeError]: dart.fnType(dart.void, [core.Object, core.StackTrace]),
    [_asyncComplete]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    [_asyncCompleteWithValue]: dart.fnType(dart.void, [T]),
    [_chainFuture]: dart.fnType(dart.void, [async.Future$(T)]),
    [_asyncCompleteError]: dart.fnType(dart.void, [core.Object, core.StackTrace]),
    timeout: dart.fnType(async.Future$(T), [core.Duration], {onTimeout: dart.nullable(core.Object)}, {})
  }));
  dart.setGetterSignature(_Future, () => ({
    __proto__: dart.getGetters(_Future.__proto__),
    [_mayComplete]: core.bool,
    [_isPendingComplete]: core.bool,
    [_mayAddListener]: core.bool,
    [_isChained]: core.bool,
    [_isComplete]: core.bool,
    [_hasError]: core.bool,
    [_error]: async.AsyncError,
    [_chainSource]: async._Future
  }));
  dart.setLibraryUri(_Future, L29);
  dart.setFieldSignature(_Future, () => ({
    __proto__: dart.getFields(_Future.__proto__),
    [_state]: dart.fieldType(core.int),
    [_zone$]: dart.finalFieldType(async._Zone),
    [_resultOrListeners]: dart.fieldType(dart.dynamic)
  }));
  return _Future;
});
async._Future = async._Future$();
dart.defineLazy(async._Future, {
  /*async._Future._stateIncomplete*/get _stateIncomplete() {
    return 0;
  },
  /*async._Future._statePendingComplete*/get _statePendingComplete() {
    return 1;
  },
  /*async._Future._stateChained*/get _stateChained() {
    return 2;
  },
  /*async._Future._stateValue*/get _stateValue() {
    return 4;
  },
  /*async._Future._stateError*/get _stateError() {
    return 8;
  }
}, false);
dart.addTypeTests(async._Future, _is__Future_default);
async._AsyncCallbackEntry = class _AsyncCallbackEntry extends core.Object {};
(async._AsyncCallbackEntry.new = function(callback) {
  if (callback == null) dart.nullFailed(L67, 12, 28, "callback");
  this.next = null;
  this.callback = callback;
  ;
}).prototype = async._AsyncCallbackEntry.prototype;
dart.addTypeTests(async._AsyncCallbackEntry);
dart.addTypeCaches(async._AsyncCallbackEntry);
dart.setLibraryUri(async._AsyncCallbackEntry, L29);
dart.setFieldSignature(async._AsyncCallbackEntry, () => ({
  __proto__: dart.getFields(async._AsyncCallbackEntry.__proto__),
  callback: dart.finalFieldType(dart.fnType(dart.void, [])),
  next: dart.fieldType(dart.nullable(async._AsyncCallbackEntry))
}));
var C41;
var C42;
async._AsyncRun = class _AsyncRun extends core.Object {
  static _initializeScheduleImmediate() {
    if (dart.global.scheduleImmediate != null) {
      return C41 || CT.C41;
    }
    return C42 || CT.C42;
  }
  static _scheduleImmediateJSOverride(callback) {
    if (callback == null) dart.nullFailed(L60, 153, 60, "callback");
    dart.addAsyncCallback();
    dart.global.scheduleImmediate(() => {
      dart.removeAsyncCallback();
      callback();
    });
  }
  static _scheduleImmediateWithPromise(callback) {
    if (callback == null) dart.nullFailed(L60, 162, 61, "callback");
    dart.addAsyncCallback();
    dart.global.Promise.resolve(null).then(() => {
      dart.removeAsyncCallback();
      callback();
    });
  }
  static _scheduleImmediate(callback) {
    if (callback == null) dart.nullFailed(L60, 135, 50, "callback");
    async._AsyncRun._scheduleImmediateClosure(callback);
  }
};
(async._AsyncRun.new = function() {
  ;
}).prototype = async._AsyncRun.prototype;
dart.addTypeTests(async._AsyncRun);
dart.addTypeCaches(async._AsyncRun);
dart.setLibraryUri(async._AsyncRun, L29);
dart.defineLazy(async._AsyncRun, {
  /*async._AsyncRun._scheduleImmediateClosure*/get _scheduleImmediateClosure() {
    return async._AsyncRun._initializeScheduleImmediate();
  }
}, false);
async.StreamSubscription$ = dart.generic(T => {
  class StreamSubscription extends core.Object {}
  (StreamSubscription.new = function() {
    ;
  }).prototype = StreamSubscription.prototype;
  dart.addTypeTests(StreamSubscription);
  StreamSubscription.prototype[dart.isStreamSubscription] = true;
  dart.addTypeCaches(StreamSubscription);
  dart.setLibraryUri(StreamSubscription, L29);
  return StreamSubscription;
});
async.StreamSubscription = async.StreamSubscription$();
dart.addTypeTests(async.StreamSubscription, dart.isStreamSubscription);
const _is_EventSink_default = Symbol('_is_EventSink_default');
async.EventSink$ = dart.generic(T => {
  class EventSink extends core.Object {}
  (EventSink.new = function() {
    ;
  }).prototype = EventSink.prototype;
  dart.addTypeTests(EventSink);
  EventSink.prototype[_is_EventSink_default] = true;
  dart.addTypeCaches(EventSink);
  EventSink[dart.implements] = () => [core.Sink$(T)];
  dart.setLibraryUri(EventSink, L29);
  return EventSink;
});
async.EventSink = async.EventSink$();
dart.addTypeTests(async.EventSink, _is_EventSink_default);
var _stream$ = dart.privateName(async, "_stream");
const _is_StreamView_default = Symbol('_is_StreamView_default');
var _stream = dart.privateName(async, "StreamView._stream");
async.StreamView$ = dart.generic(T => {
  class StreamView extends async.Stream$(T) {
    get [_stream$]() {
      return this[_stream];
    }
    set [_stream$](value) {
      super[_stream$] = value;
    }
    get isBroadcast() {
      return this[_stream$].isBroadcast;
    }
    asBroadcastStream(opts) {
      let onListen = opts && 'onListen' in opts ? opts.onListen : null;
      let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
      return this[_stream$].asBroadcastStream({onListen: onListen, onCancel: onCancel});
    }
    listen(onData, opts) {
      let onError = opts && 'onError' in opts ? opts.onError : null;
      let onDone = opts && 'onDone' in opts ? opts.onDone : null;
      let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
      return this[_stream$].listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
    }
  }
  (StreamView.new = function(stream) {
    if (stream == null) dart.nullFailed(L28, 1858, 30, "stream");
    this[_stream] = stream;
    StreamView.__proto__._internal.call(this);
    ;
  }).prototype = StreamView.prototype;
  dart.addTypeTests(StreamView);
  StreamView.prototype[_is_StreamView_default] = true;
  dart.addTypeCaches(StreamView);
  dart.setMethodSignature(StreamView, () => ({
    __proto__: dart.getMethods(StreamView.__proto__),
    listen: dart.fnType(async.StreamSubscription$(T), [dart.nullable(dart.fnType(dart.void, [T]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {})
  }));
  dart.setLibraryUri(StreamView, L29);
  dart.setFieldSignature(StreamView, () => ({
    __proto__: dart.getFields(StreamView.__proto__),
    [_stream$]: dart.finalFieldType(async.Stream$(T))
  }));
  return StreamView;
});
async.StreamView = async.StreamView$();
dart.addTypeTests(async.StreamView, _is_StreamView_default);
const _is_StreamConsumer_default = Symbol('_is_StreamConsumer_default');
async.StreamConsumer$ = dart.generic(S => {
  class StreamConsumer extends core.Object {}
  (StreamConsumer.new = function() {
    ;
  }).prototype = StreamConsumer.prototype;
  dart.addTypeTests(StreamConsumer);
  StreamConsumer.prototype[_is_StreamConsumer_default] = true;
  dart.addTypeCaches(StreamConsumer);
  dart.setLibraryUri(StreamConsumer, L29);
  return StreamConsumer;
});
async.StreamConsumer = async.StreamConsumer$();
dart.addTypeTests(async.StreamConsumer, _is_StreamConsumer_default);
const _is_StreamSink_default = Symbol('_is_StreamSink_default');
async.StreamSink$ = dart.generic(S => {
  class StreamSink extends core.Object {}
  (StreamSink.new = function() {
    ;
  }).prototype = StreamSink.prototype;
  dart.addTypeTests(StreamSink);
  StreamSink.prototype[_is_StreamSink_default] = true;
  dart.addTypeCaches(StreamSink);
  StreamSink[dart.implements] = () => [async.EventSink$(S), async.StreamConsumer$(S)];
  dart.setLibraryUri(StreamSink, L29);
  return StreamSink;
});
async.StreamSink = async.StreamSink$();
dart.addTypeTests(async.StreamSink, _is_StreamSink_default);
const _is_StreamTransformer_default = Symbol('_is_StreamTransformer_default');
async.StreamTransformer$ = dart.generic((S, T) => {
  class StreamTransformer extends core.Object {
    static castFrom(SS, ST, TS, TT, source) {
      if (source == null) dart.nullFailed(L28, 2154, 33, "source");
      return new (_internal.CastStreamTransformer$(SS, ST, TS, TT)).new(source);
    }
  }
  (StreamTransformer[dart.mixinNew] = function() {
  }).prototype = StreamTransformer.prototype;
  dart.addTypeTests(StreamTransformer);
  StreamTransformer.prototype[_is_StreamTransformer_default] = true;
  dart.addTypeCaches(StreamTransformer);
  dart.setLibraryUri(StreamTransformer, L29);
  return StreamTransformer;
});
async.StreamTransformer = async.StreamTransformer$();
dart.addTypeTests(async.StreamTransformer, _is_StreamTransformer_default);
const _is_StreamIterator_default = Symbol('_is_StreamIterator_default');
async.StreamIterator$ = dart.generic(T => {
  class StreamIterator extends core.Object {
    static new(stream) {
      if (stream == null) dart.nullFailed(L28, 2223, 36, "stream");
      return new (async._StreamIterator$(T)).new(stream);
    }
  }
  (StreamIterator[dart.mixinNew] = function() {
  }).prototype = StreamIterator.prototype;
  dart.addTypeTests(StreamIterator);
  StreamIterator.prototype[_is_StreamIterator_default] = true;
  dart.addTypeCaches(StreamIterator);
  dart.setLibraryUri(StreamIterator, L29);
  return StreamIterator;
});
async.StreamIterator = async.StreamIterator$();
dart.addTypeTests(async.StreamIterator, _is_StreamIterator_default);
var _ensureSink = dart.privateName(async, "_ensureSink");
const _is__ControllerEventSinkWrapper_default = Symbol('_is__ControllerEventSinkWrapper_default');
async._ControllerEventSinkWrapper$ = dart.generic(T => {
  class _ControllerEventSinkWrapper extends core.Object {
    [_ensureSink]() {
      let sink = this[_sink$];
      if (sink == null) dart.throw(new core.StateError.new("Sink not available"));
      return sink;
    }
    add(data) {
      T.as(data);
      this[_ensureSink]().add(data);
    }
    addError(error, stackTrace = null) {
      if (error == null) dart.nullFailed(L28, 2296, 17, "error");
      this[_ensureSink]().addError(error, stackTrace);
    }
    close() {
      this[_ensureSink]().close();
    }
  }
  (_ControllerEventSinkWrapper.new = function(_sink) {
    this[_sink$] = _sink;
    ;
  }).prototype = _ControllerEventSinkWrapper.prototype;
  dart.addTypeTests(_ControllerEventSinkWrapper);
  _ControllerEventSinkWrapper.prototype[_is__ControllerEventSinkWrapper_default] = true;
  dart.addTypeCaches(_ControllerEventSinkWrapper);
  _ControllerEventSinkWrapper[dart.implements] = () => [async.EventSink$(T)];
  dart.setMethodSignature(_ControllerEventSinkWrapper, () => ({
    __proto__: dart.getMethods(_ControllerEventSinkWrapper.__proto__),
    [_ensureSink]: dart.fnType(async.EventSink, []),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
    close: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(_ControllerEventSinkWrapper, L29);
  dart.setFieldSignature(_ControllerEventSinkWrapper, () => ({
    __proto__: dart.getFields(_ControllerEventSinkWrapper.__proto__),
    [_sink$]: dart.fieldType(dart.nullable(async.EventSink))
  }));
  return _ControllerEventSinkWrapper;
});
async._ControllerEventSinkWrapper = async._ControllerEventSinkWrapper$();
dart.addTypeTests(async._ControllerEventSinkWrapper, _is__ControllerEventSinkWrapper_default);
const _is_MultiStreamController_default = Symbol('_is_MultiStreamController_default');
async.MultiStreamController$ = dart.generic(T => {
  class MultiStreamController extends core.Object {}
  (MultiStreamController.new = function() {
    ;
  }).prototype = MultiStreamController.prototype;
  dart.addTypeTests(MultiStreamController);
  MultiStreamController.prototype[_is_MultiStreamController_default] = true;
  dart.addTypeCaches(MultiStreamController);
  MultiStreamController[dart.implements] = () => [async.StreamController$(T)];
  dart.setLibraryUri(MultiStreamController, L29);
  return MultiStreamController;
});
async.MultiStreamController = async.MultiStreamController$();
dart.addTypeTests(async.MultiStreamController, _is_MultiStreamController_default);
const _is_StreamController_default = Symbol('_is_StreamController_default');
async.StreamController$ = dart.generic(T => {
  class StreamController extends core.Object {
    static new(opts) {
      let onListen = opts && 'onListen' in opts ? opts.onListen : null;
      let onPause = opts && 'onPause' in opts ? opts.onPause : null;
      let onResume = opts && 'onResume' in opts ? opts.onResume : null;
      let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
      let sync = opts && 'sync' in opts ? opts.sync : false;
      if (sync == null) dart.nullFailed(L62, 81, 12, "sync");
      return dart.test(sync) ? new (async._SyncStreamController$(T)).new(onListen, onPause, onResume, onCancel) : new (async._AsyncStreamController$(T)).new(onListen, onPause, onResume, onCancel);
    }
    static broadcast(opts) {
      let onListen = opts && 'onListen' in opts ? opts.onListen : null;
      let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
      let sync = opts && 'sync' in opts ? opts.sync : false;
      if (sync == null) dart.nullFailed(L62, 139, 49, "sync");
      return dart.test(sync) ? new (async._SyncBroadcastStreamController$(T)).new(onListen, onCancel) : new (async._AsyncBroadcastStreamController$(T)).new(onListen, onCancel);
    }
  }
  (StreamController[dart.mixinNew] = function() {
  }).prototype = StreamController.prototype;
  dart.addTypeTests(StreamController);
  StreamController.prototype[_is_StreamController_default] = true;
  dart.addTypeCaches(StreamController);
  StreamController[dart.implements] = () => [async.StreamSink$(T)];
  dart.setLibraryUri(StreamController, L29);
  return StreamController;
});
async.StreamController = async.StreamController$();
dart.addTypeTests(async.StreamController, _is_StreamController_default);
const _is_SynchronousStreamController_default = Symbol('_is_SynchronousStreamController_default');
async.SynchronousStreamController$ = dart.generic(T => {
  class SynchronousStreamController extends core.Object {}
  (SynchronousStreamController.new = function() {
    ;
  }).prototype = SynchronousStreamController.prototype;
  dart.addTypeTests(SynchronousStreamController);
  SynchronousStreamController.prototype[_is_SynchronousStreamController_default] = true;
  dart.addTypeCaches(SynchronousStreamController);
  SynchronousStreamController[dart.implements] = () => [async.StreamController$(T)];
  dart.setLibraryUri(SynchronousStreamController, L29);
  return SynchronousStreamController;
});
async.SynchronousStreamController = async.SynchronousStreamController$();
dart.addTypeTests(async.SynchronousStreamController, _is_SynchronousStreamController_default);
const _is__StreamControllerLifecycle_default = Symbol('_is__StreamControllerLifecycle_default');
async._StreamControllerLifecycle$ = dart.generic(T => {
  var StreamSubscriptionOfT = () => (StreamSubscriptionOfT = dart.constFn(async.StreamSubscription$(T)))();
  class _StreamControllerLifecycle extends core.Object {
    [_recordPause](subscription) {
      StreamSubscriptionOfT().as(subscription);
      if (subscription == null) dart.nullFailed(L62, 404, 43, "subscription");
    }
    [_recordResume](subscription) {
      StreamSubscriptionOfT().as(subscription);
      if (subscription == null) dart.nullFailed(L62, 405, 44, "subscription");
    }
    [_recordCancel](subscription) {
      StreamSubscriptionOfT().as(subscription);
      if (subscription == null) dart.nullFailed(L62, 406, 53, "subscription");
      return null;
    }
  }
  (_StreamControllerLifecycle.new = function() {
    ;
  }).prototype = _StreamControllerLifecycle.prototype;
  dart.addTypeTests(_StreamControllerLifecycle);
  _StreamControllerLifecycle.prototype[_is__StreamControllerLifecycle_default] = true;
  dart.addTypeCaches(_StreamControllerLifecycle);
  dart.setMethodSignature(_StreamControllerLifecycle, () => ({
    __proto__: dart.getMethods(_StreamControllerLifecycle.__proto__),
    [_recordPause]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    [_recordResume]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    [_recordCancel]: dart.fnType(dart.nullable(async.Future$(dart.void)), [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(_StreamControllerLifecycle, L29);
  return _StreamControllerLifecycle;
});
async._StreamControllerLifecycle = async._StreamControllerLifecycle$();
dart.addTypeTests(async._StreamControllerLifecycle, _is__StreamControllerLifecycle_default);
const _is__StreamControllerBase_default = Symbol('_is__StreamControllerBase_default');
async._StreamControllerBase$ = dart.generic(T => {
  class _StreamControllerBase extends core.Object {}
  (_StreamControllerBase.new = function() {
    ;
  }).prototype = _StreamControllerBase.prototype;
  dart.addTypeTests(_StreamControllerBase);
  _StreamControllerBase.prototype[_is__StreamControllerBase_default] = true;
  dart.addTypeCaches(_StreamControllerBase);
  _StreamControllerBase[dart.implements] = () => [async.StreamController$(T), async._StreamControllerLifecycle$(T), async._EventSink$(T), async._EventDispatch$(T)];
  dart.setLibraryUri(_StreamControllerBase, L29);
  return _StreamControllerBase;
});
async._StreamControllerBase = async._StreamControllerBase$();
dart.addTypeTests(async._StreamControllerBase, _is__StreamControllerBase_default);
var _varData = dart.privateName(async, "_varData");
var _isInitialState = dart.privateName(async, "_isInitialState");
var _subscription = dart.privateName(async, "_subscription");
var _pendingEvents = dart.privateName(async, "_pendingEvents");
var _ensurePendingEvents = dart.privateName(async, "_ensurePendingEvents");
var _badEventState = dart.privateName(async, "_badEventState");
const _is__StreamController_default = Symbol('_is__StreamController_default');
async._StreamController$ = dart.generic(T => {
  var _ControllerStreamOfT = () => (_ControllerStreamOfT = dart.constFn(async._ControllerStream$(T)))();
  var _StreamSinkWrapperOfT = () => (_StreamSinkWrapperOfT = dart.constFn(async._StreamSinkWrapper$(T)))();
  var _PendingEventsOfT = () => (_PendingEventsOfT = dart.constFn(async._PendingEvents$(T)))();
  var _PendingEventsNOfT = () => (_PendingEventsNOfT = dart.constFn(dart.nullable(_PendingEventsOfT())))();
  var _StreamControllerAddStreamStateOfT = () => (_StreamControllerAddStreamStateOfT = dart.constFn(async._StreamControllerAddStreamState$(T)))();
  var _StreamImplEventsOfT = () => (_StreamImplEventsOfT = dart.constFn(async._StreamImplEvents$(T)))();
  var _ControllerSubscriptionOfT = () => (_ControllerSubscriptionOfT = dart.constFn(async._ControllerSubscription$(T)))();
  var StreamOfT = () => (StreamOfT = dart.constFn(async.Stream$(T)))();
  var _DelayedDataOfT = () => (_DelayedDataOfT = dart.constFn(async._DelayedData$(T)))();
  class _StreamController extends core.Object {
    get stream() {
      return new (_ControllerStreamOfT()).new(this);
    }
    get sink() {
      return new (_StreamSinkWrapperOfT()).new(this);
    }
    get [_isCanceled]() {
      return (dart.notNull(this[_state]) & 2) !== 0;
    }
    get hasListener() {
      return (dart.notNull(this[_state]) & 1) !== 0;
    }
    get [_isInitialState]() {
      return (dart.notNull(this[_state]) & 3) >>> 0 === 0;
    }
    get isClosed() {
      return (dart.notNull(this[_state]) & 4) !== 0;
    }
    get isPaused() {
      return dart.test(this.hasListener) ? this[_subscription][_isInputPaused] : !dart.test(this[_isCanceled]);
    }
    get [_isAddingStream]() {
      return (dart.notNull(this[_state]) & 8) !== 0;
    }
    get [_mayAddEvent]() {
      return dart.notNull(this[_state]) < 4;
    }
    get [_pendingEvents]() {
      if (!dart.test(this[_isInitialState])) dart.assertFailed(null, L62, 543, 12, "_isInitialState");
      if (!dart.test(this[_isAddingStream])) {
        return _PendingEventsNOfT().as(this[_varData]);
      }
      let state = _StreamControllerAddStreamStateOfT().as(this[_varData]);
      return _PendingEventsNOfT().as(state.varData);
    }
    [_ensurePendingEvents]() {
      if (!dart.test(this[_isInitialState])) dart.assertFailed(null, L62, 553, 12, "_isInitialState");
      if (!dart.test(this[_isAddingStream])) {
        let events = this[_varData];
        if (events == null) {
          this[_varData] = events = new (_StreamImplEventsOfT()).new();
        }
        return _StreamImplEventsOfT().as(events);
      }
      let state = _StreamControllerAddStreamStateOfT().as(this[_varData]);
      let events = state.varData;
      if (events == null) {
        state.varData = events = new (_StreamImplEventsOfT()).new();
      }
      return _StreamImplEventsOfT().as(events);
    }
    get [_subscription]() {
      if (!dart.test(this.hasListener)) dart.assertFailed(null, L62, 573, 12, "hasListener");
      let varData = this[_varData];
      if (dart.test(this[_isAddingStream])) {
        let streamState = _StreamControllerAddStreamStateOfObjectN().as(varData);
        varData = streamState.varData;
      }
      return _ControllerSubscriptionOfT().as(varData);
    }
    [_badEventState]() {
      if (dart.test(this.isClosed)) {
        return new core.StateError.new("Cannot add event after closing");
      }
      if (!dart.test(this[_isAddingStream])) dart.assertFailed(null, L62, 591, 12, "_isAddingStream");
      return new core.StateError.new("Cannot add event while adding a stream");
    }
    addStream(source, opts) {
      let t102;
      StreamOfT().as(source);
      if (source == null) dart.nullFailed(L62, 596, 30, "source");
      let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
      if (!dart.test(this[_mayAddEvent])) dart.throw(this[_badEventState]());
      if (dart.test(this[_isCanceled])) return new async._Future.immediate(null);
      let addState = new (_StreamControllerAddStreamStateOfT()).new(this, this[_varData], source, (t102 = cancelOnError, t102 == null ? false : t102));
      this[_varData] = addState;
      this[_state] = (dart.notNull(this[_state]) | 8) >>> 0;
      return addState.addStreamFuture;
    }
    get done() {
      return this[_ensureDoneFuture]();
    }
    [_ensureDoneFuture]() {
      let t102;
      t102 = this[_doneFuture];
      return t102 == null ? this[_doneFuture] = dart.test(this[_isCanceled]) ? async.Future._nullFuture : new (_FutureOfvoid()).new() : t102;
    }
    add(value) {
      T.as(value);
      if (!dart.test(this[_mayAddEvent])) dart.throw(this[_badEventState]());
      this[_add](value);
    }
    addError(error, stackTrace = null) {
      if (error == null) dart.nullFailed(L62, 630, 24, "error");
      core.ArgumentError.checkNotNull(core.Object, error, "error");
      if (!dart.test(this[_mayAddEvent])) dart.throw(this[_badEventState]());
      let replacement = async.Zone.current.errorCallback(error, stackTrace);
      if (replacement != null) {
        error = replacement.error;
        stackTrace = replacement.stackTrace;
      } else {
        stackTrace == null ? stackTrace = async.AsyncError.defaultStackTrace(error) : null;
      }
      if (stackTrace == null) dart.throw("unreachable");
      this[_addError](error, stackTrace);
    }
    close() {
      if (dart.test(this.isClosed)) {
        return this[_ensureDoneFuture]();
      }
      if (!dart.test(this[_mayAddEvent])) dart.throw(this[_badEventState]());
      this[_closeUnchecked]();
      return this[_ensureDoneFuture]();
    }
    [_closeUnchecked]() {
      this[_state] = (dart.notNull(this[_state]) | 4) >>> 0;
      if (dart.test(this.hasListener)) {
        this[_sendDone]();
      } else if (dart.test(this[_isInitialState])) {
        this[_ensurePendingEvents]().add(C38 || CT.C38);
      }
    }
    [_add](value) {
      T.as(value);
      if (dart.test(this.hasListener)) {
        this[_sendData](value);
      } else if (dart.test(this[_isInitialState])) {
        this[_ensurePendingEvents]().add(new (_DelayedDataOfT()).new(value));
      }
    }
    [_addError](error, stackTrace) {
      if (error == null) dart.nullFailed(L62, 688, 25, "error");
      if (stackTrace == null) dart.nullFailed(L62, 688, 43, "stackTrace");
      if (dart.test(this.hasListener)) {
        this[_sendError](error, stackTrace);
      } else if (dart.test(this[_isInitialState])) {
        this[_ensurePendingEvents]().add(new async._DelayedError.new(error, stackTrace));
      }
    }
    [_close]() {
      if (!dart.test(this[_isAddingStream])) dart.assertFailed(null, L62, 698, 12, "_isAddingStream");
      let addState = _StreamControllerAddStreamStateOfT().as(this[_varData]);
      this[_varData] = addState.varData;
      this[_state] = (dart.notNull(this[_state]) & ~8 >>> 0) >>> 0;
      addState.complete();
    }
    [_subscribe](onData, onError, onDone, cancelOnError) {
      if (cancelOnError == null) dart.nullFailed(L62, 708, 28, "cancelOnError");
      if (!dart.test(this[_isInitialState])) {
        dart.throw(new core.StateError.new("Stream has already been listened to."));
      }
      let subscription = new (_ControllerSubscriptionOfT()).new(this, onData, onError, onDone, cancelOnError);
      let pendingEvents = this[_pendingEvents];
      this[_state] = (dart.notNull(this[_state]) | 1) >>> 0;
      if (dart.test(this[_isAddingStream])) {
        let addState = _StreamControllerAddStreamStateOfT().as(this[_varData]);
        addState.varData = subscription;
        addState.resume();
      } else {
        this[_varData] = subscription;
      }
      subscription[_setPendingEvents](pendingEvents);
      subscription[_guardCallback](dart.fn(() => {
        async._runGuarded(this.onListen);
      }, VoidToNullN()));
      return subscription;
    }
    [_recordCancel](subscription) {
      let t103;
      if (subscription == null) dart.nullFailed(L62, 732, 53, "subscription");
      let result = null;
      if (dart.test(this[_isAddingStream])) {
        let addState = _StreamControllerAddStreamStateOfT().as(this[_varData]);
        result = addState.cancel();
      }
      this[_varData] = null;
      this[_state] = (dart.notNull(this[_state]) & ~(1 | 8) >>> 0 | 2) >>> 0;
      let onCancel = this.onCancel;
      if (onCancel != null) {
        if (result == null) {
          try {
            let cancelResult = onCancel();
            if (FutureOfvoid().is(cancelResult)) {
              result = cancelResult;
            }
          } catch (e$) {
            let e = dart.getThrown(e$);
            let s = dart.stackTrace(e$);
            if (core.Object.is(e)) {
              result = (t103 = new (_FutureOfvoid()).new(), (() => {
                t103[_asyncCompleteError](e, s);
                return t103;
              })());
            } else
              throw e$;
          }
        } else {
          result = result.whenComplete(onCancel);
        }
      }
      const complete = () => {
        let doneFuture = this[_doneFuture];
        if (doneFuture != null && dart.test(doneFuture[_mayComplete])) {
          doneFuture[_asyncComplete](null);
        }
      };
      dart.fn(complete, VoidTovoid());
      if (result != null) {
        result = result.whenComplete(complete);
      } else {
        complete();
      }
      return result;
    }
    [_recordPause](subscription) {
      if (subscription == null) dart.nullFailed(L62, 788, 43, "subscription");
      if (dart.test(this[_isAddingStream])) {
        let addState = _StreamControllerAddStreamStateOfT().as(this[_varData]);
        addState.pause();
      }
      async._runGuarded(this.onPause);
    }
    [_recordResume](subscription) {
      if (subscription == null) dart.nullFailed(L62, 796, 44, "subscription");
      if (dart.test(this[_isAddingStream])) {
        let addState = _StreamControllerAddStreamStateOfT().as(this[_varData]);
        addState.resume();
      }
      async._runGuarded(this.onResume);
    }
  }
  (_StreamController.new = function(onListen, onPause, onResume, onCancel) {
    this[_varData] = null;
    this[_state] = 0;
    this[_doneFuture] = null;
    this.onListen = onListen;
    this.onPause = onPause;
    this.onResume = onResume;
    this.onCancel = onCancel;
    ;
  }).prototype = _StreamController.prototype;
  dart.addTypeTests(_StreamController);
  _StreamController.prototype[_is__StreamController_default] = true;
  dart.addTypeCaches(_StreamController);
  _StreamController[dart.implements] = () => [async._StreamControllerBase$(T)];
  dart.setMethodSignature(_StreamController, () => ({
    __proto__: dart.getMethods(_StreamController.__proto__),
    [_ensurePendingEvents]: dart.fnType(async._StreamImplEvents$(T), []),
    [_badEventState]: dart.fnType(core.Error, []),
    addStream: dart.fnType(async.Future, [dart.nullable(core.Object)], {cancelOnError: dart.nullable(core.bool)}, {}),
    [_ensureDoneFuture]: dart.fnType(async.Future$(dart.void), []),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
    close: dart.fnType(async.Future, []),
    [_closeUnchecked]: dart.fnType(dart.void, []),
    [_add]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    [_addError]: dart.fnType(dart.void, [core.Object, core.StackTrace]),
    [_close]: dart.fnType(dart.void, []),
    [_subscribe]: dart.fnType(async.StreamSubscription$(T), [dart.nullable(dart.fnType(dart.void, [T])), dart.nullable(core.Function), dart.nullable(dart.fnType(dart.void, [])), core.bool]),
    [_recordCancel]: dart.fnType(dart.nullable(async.Future$(dart.void)), [async.StreamSubscription$(T)]),
    [_recordPause]: dart.fnType(dart.void, [async.StreamSubscription$(T)]),
    [_recordResume]: dart.fnType(dart.void, [async.StreamSubscription$(T)])
  }));
  dart.setGetterSignature(_StreamController, () => ({
    __proto__: dart.getGetters(_StreamController.__proto__),
    stream: async.Stream$(T),
    sink: async.StreamSink$(T),
    [_isCanceled]: core.bool,
    hasListener: core.bool,
    [_isInitialState]: core.bool,
    isClosed: core.bool,
    isPaused: core.bool,
    [_isAddingStream]: core.bool,
    [_mayAddEvent]: core.bool,
    [_pendingEvents]: dart.nullable(async._PendingEvents$(T)),
    [_subscription]: async._ControllerSubscription$(T),
    done: async.Future$(dart.void)
  }));
  dart.setLibraryUri(_StreamController, L29);
  dart.setFieldSignature(_StreamController, () => ({
    __proto__: dart.getFields(_StreamController.__proto__),
    [_varData]: dart.fieldType(dart.nullable(core.Object)),
    [_state]: dart.fieldType(core.int),
    [_doneFuture]: dart.fieldType(dart.nullable(async._Future$(dart.void))),
    onListen: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
    onPause: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
    onResume: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
    onCancel: dart.fieldType(dart.nullable(dart.fnType(dart.void, [])))
  }));
  return _StreamController;
});
async._StreamController = async._StreamController$();
dart.defineLazy(async._StreamController, {
  /*async._StreamController._STATE_INITIAL*/get _STATE_INITIAL() {
    return 0;
  },
  /*async._StreamController._STATE_SUBSCRIBED*/get _STATE_SUBSCRIBED() {
    return 1;
  },
  /*async._StreamController._STATE_CANCELED*/get _STATE_CANCELED() {
    return 2;
  },
  /*async._StreamController._STATE_SUBSCRIPTION_MASK*/get _STATE_SUBSCRIPTION_MASK() {
    return 3;
  },
  /*async._StreamController._STATE_CLOSED*/get _STATE_CLOSED() {
    return 4;
  },
  /*async._StreamController._STATE_ADDSTREAM*/get _STATE_ADDSTREAM() {
    return 8;
  }
}, false);
dart.addTypeTests(async._StreamController, _is__StreamController_default);
const _is__SyncStreamControllerDispatch_default = Symbol('_is__SyncStreamControllerDispatch_default');
async._SyncStreamControllerDispatch$ = dart.generic(T => {
  class _SyncStreamControllerDispatch extends core.Object {
    [_sendData](data) {
      this[_subscription][_add](data);
    }
    [_sendError](error, stackTrace) {
      if (error == null) dart.nullFailed(L62, 811, 26, "error");
      if (stackTrace == null) dart.nullFailed(L62, 811, 44, "stackTrace");
      this[_subscription][_addError](error, stackTrace);
    }
    [_sendDone]() {
      this[_subscription][_close]();
    }
  }
  (_SyncStreamControllerDispatch.new = function() {
    ;
  }).prototype = _SyncStreamControllerDispatch.prototype;
  dart.addTypeTests(_SyncStreamControllerDispatch);
  _SyncStreamControllerDispatch.prototype[_is__SyncStreamControllerDispatch_default] = true;
  dart.addTypeCaches(_SyncStreamControllerDispatch);
  _SyncStreamControllerDispatch[dart.implements] = () => [async._StreamController$(T), async.SynchronousStreamController$(T)];
  dart.setMethodSignature(_SyncStreamControllerDispatch, () => ({
    __proto__: dart.getMethods(_SyncStreamControllerDispatch.__proto__),
    [_sendData]: dart.fnType(dart.void, [T]),
    [_sendError]: dart.fnType(dart.void, [core.Object, core.StackTrace]),
    [_sendDone]: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(_SyncStreamControllerDispatch, L29);
  return _SyncStreamControllerDispatch;
});
async._SyncStreamControllerDispatch = async._SyncStreamControllerDispatch$();
dart.addTypeTests(async._SyncStreamControllerDispatch, _is__SyncStreamControllerDispatch_default);
const _is__AsyncStreamControllerDispatch_default = Symbol('_is__AsyncStreamControllerDispatch_default');
async._AsyncStreamControllerDispatch$ = dart.generic(T => {
  var _DelayedDataOfT = () => (_DelayedDataOfT = dart.constFn(async._DelayedData$(T)))();
  class _AsyncStreamControllerDispatch extends core.Object {
    [_sendData](data) {
      this[_subscription][_addPending](new (_DelayedDataOfT()).new(data));
    }
    [_sendError](error, stackTrace) {
      if (error == null) dart.nullFailed(L62, 826, 26, "error");
      if (stackTrace == null) dart.nullFailed(L62, 826, 44, "stackTrace");
      this[_subscription][_addPending](new async._DelayedError.new(error, stackTrace));
    }
    [_sendDone]() {
      this[_subscription][_addPending](C38 || CT.C38);
    }
  }
  (_AsyncStreamControllerDispatch.new = function() {
    ;
  }).prototype = _AsyncStreamControllerDispatch.prototype;
  dart.addTypeTests(_AsyncStreamControllerDispatch);
  _AsyncStreamControllerDispatch.prototype[_is__AsyncStreamControllerDispatch_default] = true;
  dart.addTypeCaches(_AsyncStreamControllerDispatch);
  _AsyncStreamControllerDispatch[dart.implements] = () => [async._StreamController$(T)];
  dart.setMethodSignature(_AsyncStreamControllerDispatch, () => ({
    __proto__: dart.getMethods(_AsyncStreamControllerDispatch.__proto__),
    [_sendData]: dart.fnType(dart.void, [T]),
    [_sendError]: dart.fnType(dart.void, [core.Object, core.StackTrace]),
    [_sendDone]: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(_AsyncStreamControllerDispatch, L29);
  return _AsyncStreamControllerDispatch;
});
async._AsyncStreamControllerDispatch = async._AsyncStreamControllerDispatch$();
dart.addTypeTests(async._AsyncStreamControllerDispatch, _is__AsyncStreamControllerDispatch_default);
const _is__AsyncStreamController_default = Symbol('_is__AsyncStreamController_default');
async._AsyncStreamController$ = dart.generic(T => {
  const _StreamController__AsyncStreamControllerDispatch$36 = class _StreamController__AsyncStreamControllerDispatch extends async._StreamController$(T) {};
  (_StreamController__AsyncStreamControllerDispatch$36.new = function(onListen, onPause, onResume, onCancel) {
    _StreamController__AsyncStreamControllerDispatch$36.__proto__.new.call(this, onListen, onPause, onResume, onCancel);
  }).prototype = _StreamController__AsyncStreamControllerDispatch$36.prototype;
  dart.applyMixin(_StreamController__AsyncStreamControllerDispatch$36, async._AsyncStreamControllerDispatch$(T));
  class _AsyncStreamController extends _StreamController__AsyncStreamControllerDispatch$36 {}
  (_AsyncStreamController.new = function(onListen, onPause, onResume, onCancel) {
    _AsyncStreamController.__proto__.new.call(this, onListen, onPause, onResume, onCancel);
    ;
  }).prototype = _AsyncStreamController.prototype;
  dart.addTypeTests(_AsyncStreamController);
  _AsyncStreamController.prototype[_is__AsyncStreamController_default] = true;
  dart.addTypeCaches(_AsyncStreamController);
  dart.setLibraryUri(_AsyncStreamController, L29);
  return _AsyncStreamController;
});
async._AsyncStreamController = async._AsyncStreamController$();
dart.addTypeTests(async._AsyncStreamController, _is__AsyncStreamController_default);
const _is__SyncStreamController_default = Symbol('_is__SyncStreamController_default');
async._SyncStreamController$ = dart.generic(T => {
  const _StreamController__SyncStreamControllerDispatch$36 = class _StreamController__SyncStreamControllerDispatch extends async._StreamController$(T) {};
  (_StreamController__SyncStreamControllerDispatch$36.new = function(onListen, onPause, onResume, onCancel) {
    _StreamController__SyncStreamControllerDispatch$36.__proto__.new.call(this, onListen, onPause, onResume, onCancel);
  }).prototype = _StreamController__SyncStreamControllerDispatch$36.prototype;
  dart.applyMixin(_StreamController__SyncStreamControllerDispatch$36, async._SyncStreamControllerDispatch$(T));
  class _SyncStreamController extends _StreamController__SyncStreamControllerDispatch$36 {}
  (_SyncStreamController.new = function(onListen, onPause, onResume, onCancel) {
    _SyncStreamController.__proto__.new.call(this, onListen, onPause, onResume, onCancel);
    ;
  }).prototype = _SyncStreamController.prototype;
  dart.addTypeTests(_SyncStreamController);
  _SyncStreamController.prototype[_is__SyncStreamController_default] = true;
  dart.addTypeCaches(_SyncStreamController);
  dart.setLibraryUri(_SyncStreamController, L29);
  return _SyncStreamController;
});
async._SyncStreamController = async._SyncStreamController$();
dart.addTypeTests(async._SyncStreamController, _is__SyncStreamController_default);
var _target$ = dart.privateName(async, "_target");
const _is__StreamSinkWrapper_default = Symbol('_is__StreamSinkWrapper_default');
async._StreamSinkWrapper$ = dart.generic(T => {
  var StreamOfT = () => (StreamOfT = dart.constFn(async.Stream$(T)))();
  class _StreamSinkWrapper extends core.Object {
    add(data) {
      T.as(data);
      this[_target$].add(data);
    }
    addError(error, stackTrace = null) {
      if (error == null) dart.nullFailed(L62, 903, 24, "error");
      this[_target$].addError(error, stackTrace);
    }
    close() {
      return this[_target$].close();
    }
    addStream(source) {
      StreamOfT().as(source);
      if (source == null) dart.nullFailed(L62, 909, 30, "source");
      return this[_target$].addStream(source);
    }
    get done() {
      return this[_target$].done;
    }
  }
  (_StreamSinkWrapper.new = function(_target) {
    if (_target == null) dart.nullFailed(L62, 898, 27, "_target");
    this[_target$] = _target;
    ;
  }).prototype = _StreamSinkWrapper.prototype;
  dart.addTypeTests(_StreamSinkWrapper);
  _StreamSinkWrapper.prototype[_is__StreamSinkWrapper_default] = true;
  dart.addTypeCaches(_StreamSinkWrapper);
  _StreamSinkWrapper[dart.implements] = () => [async.StreamSink$(T)];
  dart.setMethodSignature(_StreamSinkWrapper, () => ({
    __proto__: dart.getMethods(_StreamSinkWrapper.__proto__),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
    close: dart.fnType(async.Future, []),
    addStream: dart.fnType(async.Future, [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(_StreamSinkWrapper, () => ({
    __proto__: dart.getGetters(_StreamSinkWrapper.__proto__),
    done: async.Future
  }));
  dart.setLibraryUri(_StreamSinkWrapper, L29);
  dart.setFieldSignature(_StreamSinkWrapper, () => ({
    __proto__: dart.getFields(_StreamSinkWrapper.__proto__),
    [_target$]: dart.finalFieldType(async.StreamController)
  }));
  return _StreamSinkWrapper;
});
async._StreamSinkWrapper = async._StreamSinkWrapper$();
dart.addTypeTests(async._StreamSinkWrapper, _is__StreamSinkWrapper_default);
const _is__AddStreamState_default = Symbol('_is__AddStreamState_default');
async._AddStreamState$ = dart.generic(T => {
  class _AddStreamState extends core.Object {
    static makeErrorHandler(controller) {
      if (controller == null) dart.nullFailed(L62, 934, 38, "controller");
      return dart.fn((e, s) => {
        if (e == null) dart.nullFailed(L62, 934, 61, "e");
        if (s == null) dart.nullFailed(L62, 934, 75, "s");
        controller[_addError](e, s);
        controller[_close]();
      }, ObjectAndStackTraceToNullN());
    }
    pause() {
      this.addSubscription.pause();
    }
    resume() {
      this.addSubscription.resume();
    }
    cancel() {
      let cancel = this.addSubscription.cancel();
      if (cancel == null) {
        this.addStreamFuture[_asyncComplete](null);
        return async.Future._nullFuture;
      }
      return cancel.whenComplete(dart.fn(() => {
        this.addStreamFuture[_asyncComplete](null);
      }, VoidToNullN()));
    }
    complete() {
      this.addStreamFuture[_asyncComplete](null);
    }
  }
  (_AddStreamState.new = function(controller, source, cancelOnError) {
    if (controller == null) dart.nullFailed(L62, 925, 21, "controller");
    if (source == null) dart.nullFailed(L62, 925, 43, "source");
    if (cancelOnError == null) dart.nullFailed(L62, 925, 56, "cancelOnError");
    this.addStreamFuture = new async._Future.new();
    this.addSubscription = source.listen(dart.bind(controller, _add), {onError: FunctionN().as(dart.test(cancelOnError) ? async._AddStreamState.makeErrorHandler(controller) : dart.bind(controller, _addError)), onDone: dart.bind(controller, _close), cancelOnError: cancelOnError});
    ;
  }).prototype = _AddStreamState.prototype;
  dart.addTypeTests(_AddStreamState);
  _AddStreamState.prototype[_is__AddStreamState_default] = true;
  dart.addTypeCaches(_AddStreamState);
  dart.setMethodSignature(_AddStreamState, () => ({
    __proto__: dart.getMethods(_AddStreamState.__proto__),
    pause: dart.fnType(dart.void, []),
    resume: dart.fnType(dart.void, []),
    cancel: dart.fnType(async.Future$(dart.void), []),
    complete: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(_AddStreamState, L29);
  dart.setFieldSignature(_AddStreamState, () => ({
    __proto__: dart.getFields(_AddStreamState.__proto__),
    addStreamFuture: dart.finalFieldType(async._Future),
    addSubscription: dart.finalFieldType(async.StreamSubscription)
  }));
  return _AddStreamState;
});
async._AddStreamState = async._AddStreamState$();
dart.addTypeTests(async._AddStreamState, _is__AddStreamState_default);
const _is__StreamControllerAddStreamState_default = Symbol('_is__StreamControllerAddStreamState_default');
async._StreamControllerAddStreamState$ = dart.generic(T => {
  class _StreamControllerAddStreamState extends async._AddStreamState$(T) {}
  (_StreamControllerAddStreamState.new = function(controller, varData, source, cancelOnError) {
    if (controller == null) dart.nullFailed(L62, 977, 56, "controller");
    if (source == null) dart.nullFailed(L62, 978, 17, "source");
    if (cancelOnError == null) dart.nullFailed(L62, 978, 30, "cancelOnError");
    this.varData = varData;
    _StreamControllerAddStreamState.__proto__.new.call(this, controller, source, cancelOnError);
    if (dart.test(controller.isPaused)) {
      this.addSubscription.pause();
    }
  }).prototype = _StreamControllerAddStreamState.prototype;
  dart.addTypeTests(_StreamControllerAddStreamState);
  _StreamControllerAddStreamState.prototype[_is__StreamControllerAddStreamState_default] = true;
  dart.addTypeCaches(_StreamControllerAddStreamState);
  dart.setLibraryUri(_StreamControllerAddStreamState, L29);
  dart.setFieldSignature(_StreamControllerAddStreamState, () => ({
    __proto__: dart.getFields(_StreamControllerAddStreamState.__proto__),
    varData: dart.fieldType(dart.dynamic)
  }));
  return _StreamControllerAddStreamState;
});
async._StreamControllerAddStreamState = async._StreamControllerAddStreamState$();
dart.addTypeTests(async._StreamControllerAddStreamState, _is__StreamControllerAddStreamState_default);
const _is__EventSink_default = Symbol('_is__EventSink_default');
async._EventSink$ = dart.generic(T => {
  class _EventSink extends core.Object {}
  (_EventSink.new = function() {
    ;
  }).prototype = _EventSink.prototype;
  dart.addTypeTests(_EventSink);
  _EventSink.prototype[_is__EventSink_default] = true;
  dart.addTypeCaches(_EventSink);
  dart.setLibraryUri(_EventSink, L29);
  return _EventSink;
});
async._EventSink = async._EventSink$();
dart.addTypeTests(async._EventSink, _is__EventSink_default);
const _is__EventDispatch_default = Symbol('_is__EventDispatch_default');
async._EventDispatch$ = dart.generic(T => {
  class _EventDispatch extends core.Object {}
  (_EventDispatch.new = function() {
    ;
  }).prototype = _EventDispatch.prototype;
  dart.addTypeTests(_EventDispatch);
  _EventDispatch.prototype[_is__EventDispatch_default] = true;
  dart.addTypeCaches(_EventDispatch);
  dart.setLibraryUri(_EventDispatch, L29);
  return _EventDispatch;
});
async._EventDispatch = async._EventDispatch$();
dart.addTypeTests(async._EventDispatch, _is__EventDispatch_default);
var _isUsed = dart.privateName(async, "_isUsed");
const _is__GeneratedStreamImpl_default = Symbol('_is__GeneratedStreamImpl_default');
async._GeneratedStreamImpl$ = dart.generic(T => {
  var _BufferingStreamSubscriptionOfT = () => (_BufferingStreamSubscriptionOfT = dart.constFn(async._BufferingStreamSubscription$(T)))();
  class _GeneratedStreamImpl extends async._StreamImpl$(T) {
    [_createSubscription](onData, onError, onDone, cancelOnError) {
      let t103;
      if (cancelOnError == null) dart.nullFailed(L63, 525, 47, "cancelOnError");
      if (dart.test(this[_isUsed])) dart.throw(new core.StateError.new("Stream has already been listened to."));
      this[_isUsed] = true;
      t103 = new (_BufferingStreamSubscriptionOfT()).new(onData, onError, onDone, cancelOnError);
      return (() => {
        t103[_setPendingEvents](this[_pending$]());
        return t103;
      })();
    }
  }
  (_GeneratedStreamImpl.new = function(_pending) {
    if (_pending == null) dart.nullFailed(L63, 522, 29, "_pending");
    this[_isUsed] = false;
    this[_pending$] = _pending;
    _GeneratedStreamImpl.__proto__.new.call(this);
    ;
  }).prototype = _GeneratedStreamImpl.prototype;
  dart.addTypeTests(_GeneratedStreamImpl);
  _GeneratedStreamImpl.prototype[_is__GeneratedStreamImpl_default] = true;
  dart.addTypeCaches(_GeneratedStreamImpl);
  dart.setLibraryUri(_GeneratedStreamImpl, L29);
  dart.setFieldSignature(_GeneratedStreamImpl, () => ({
    __proto__: dart.getFields(_GeneratedStreamImpl.__proto__),
    [_pending$]: dart.finalFieldType(dart.fnType(async._PendingEvents$(T), [])),
    [_isUsed]: dart.fieldType(core.bool)
  }));
  return _GeneratedStreamImpl;
});
async._GeneratedStreamImpl = async._GeneratedStreamImpl$();
dart.addTypeTests(async._GeneratedStreamImpl, _is__GeneratedStreamImpl_default);
var _iterator = dart.privateName(async, "_iterator");
var _eventScheduled = dart.privateName(async, "_eventScheduled");
const _is__PendingEvents_default = Symbol('_is__PendingEvents_default');
async._PendingEvents$ = dart.generic(T => {
  var _EventDispatchOfT = () => (_EventDispatchOfT = dart.constFn(async._EventDispatch$(T)))();
  class _PendingEvents extends core.Object {
    get isScheduled() {
      return this[_state] === 1;
    }
    get [_eventScheduled]() {
      return dart.notNull(this[_state]) >= 1;
    }
    schedule(dispatch) {
      _EventDispatchOfT().as(dispatch);
      if (dispatch == null) dart.nullFailed(L63, 675, 35, "dispatch");
      if (dart.test(this.isScheduled)) return;
      if (!!dart.test(this.isEmpty)) dart.assertFailed(null, L63, 677, 12, "!isEmpty");
      if (dart.test(this[_eventScheduled])) {
        if (!(this[_state] === 3)) dart.assertFailed(null, L63, 679, 14, "_state == _STATE_CANCELED");
        this[_state] = 1;
        return;
      }
      async.scheduleMicrotask(dart.fn(() => {
        let oldState = this[_state];
        this[_state] = 0;
        if (oldState === 3) return;
        this.handleNext(dispatch);
      }, VoidToNullN()));
      this[_state] = 1;
    }
    cancelSchedule() {
      if (dart.test(this.isScheduled)) this[_state] = 3;
    }
  }
  (_PendingEvents.new = function() {
    this[_state] = 0;
    ;
  }).prototype = _PendingEvents.prototype;
  dart.addTypeTests(_PendingEvents);
  _PendingEvents.prototype[_is__PendingEvents_default] = true;
  dart.addTypeCaches(_PendingEvents);
  dart.setMethodSignature(_PendingEvents, () => ({
    __proto__: dart.getMethods(_PendingEvents.__proto__),
    schedule: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    cancelSchedule: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(_PendingEvents, () => ({
    __proto__: dart.getGetters(_PendingEvents.__proto__),
    isScheduled: core.bool,
    [_eventScheduled]: core.bool
  }));
  dart.setLibraryUri(_PendingEvents, L29);
  dart.setFieldSignature(_PendingEvents, () => ({
    __proto__: dart.getFields(_PendingEvents.__proto__),
    [_state]: dart.fieldType(core.int)
  }));
  return _PendingEvents;
});
async._PendingEvents = async._PendingEvents$();
dart.defineLazy(async._PendingEvents, {
  /*async._PendingEvents._STATE_UNSCHEDULED*/get _STATE_UNSCHEDULED() {
    return 0;
  },
  /*async._PendingEvents._STATE_SCHEDULED*/get _STATE_SCHEDULED() {
    return 1;
  },
  /*async._PendingEvents._STATE_CANCELED*/get _STATE_CANCELED() {
    return 3;
  }
}, false);
dart.addTypeTests(async._PendingEvents, _is__PendingEvents_default);
const _is__IterablePendingEvents_default = Symbol('_is__IterablePendingEvents_default');
async._IterablePendingEvents$ = dart.generic(T => {
  var _EventDispatchOfT = () => (_EventDispatchOfT = dart.constFn(async._EventDispatch$(T)))();
  class _IterablePendingEvents extends async._PendingEvents$(T) {
    get isEmpty() {
      return this[_iterator] == null;
    }
    handleNext(dispatch) {
      _EventDispatchOfT().as(dispatch);
      if (dispatch == null) dart.nullFailed(L63, 544, 37, "dispatch");
      let iterator = this[_iterator];
      if (iterator == null) {
        dart.throw(new core.StateError.new("No events pending."));
      }
      let movedNext = false;
      try {
        if (dart.test(iterator.moveNext())) {
          movedNext = true;
          dispatch[_sendData](iterator.current);
        } else {
          this[_iterator] = null;
          dispatch[_sendDone]();
        }
      } catch (e$) {
        let e = dart.getThrown(e$);
        let s = dart.stackTrace(e$);
        if (core.Object.is(e)) {
          if (!movedNext) {
            this[_iterator] = C20 || CT.C20;
          }
          dispatch[_sendError](e, s);
        } else
          throw e$;
      }
    }
    clear() {
      if (dart.test(this.isScheduled)) this.cancelSchedule();
      this[_iterator] = null;
    }
  }
  (_IterablePendingEvents.new = function(data) {
    if (data == null) dart.nullFailed(L63, 540, 38, "data");
    this[_iterator] = data[$iterator];
    _IterablePendingEvents.__proto__.new.call(this);
    ;
  }).prototype = _IterablePendingEvents.prototype;
  dart.addTypeTests(_IterablePendingEvents);
  _IterablePendingEvents.prototype[_is__IterablePendingEvents_default] = true;
  dart.addTypeCaches(_IterablePendingEvents);
  dart.setMethodSignature(_IterablePendingEvents, () => ({
    __proto__: dart.getMethods(_IterablePendingEvents.__proto__),
    handleNext: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    clear: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(_IterablePendingEvents, () => ({
    __proto__: dart.getGetters(_IterablePendingEvents.__proto__),
    isEmpty: core.bool
  }));
  dart.setLibraryUri(_IterablePendingEvents, L29);
  dart.setFieldSignature(_IterablePendingEvents, () => ({
    __proto__: dart.getFields(_IterablePendingEvents.__proto__),
    [_iterator]: dart.fieldType(dart.nullable(core.Iterator$(T)))
  }));
  return _IterablePendingEvents;
});
async._IterablePendingEvents = async._IterablePendingEvents$();
dart.addTypeTests(async._IterablePendingEvents, _is__IterablePendingEvents_default);
const _is__DelayedEvent_default = Symbol('_is__DelayedEvent_default');
async._DelayedEvent$ = dart.generic(T => {
  class _DelayedEvent extends core.Object {}
  (_DelayedEvent.new = function() {
    this.next = null;
    ;
  }).prototype = _DelayedEvent.prototype;
  dart.addTypeTests(_DelayedEvent);
  _DelayedEvent.prototype[_is__DelayedEvent_default] = true;
  dart.addTypeCaches(_DelayedEvent);
  dart.setLibraryUri(_DelayedEvent, L29);
  dart.setFieldSignature(_DelayedEvent, () => ({
    __proto__: dart.getFields(_DelayedEvent.__proto__),
    next: dart.fieldType(dart.nullable(async._DelayedEvent))
  }));
  return _DelayedEvent;
});
async._DelayedEvent = async._DelayedEvent$();
dart.addTypeTests(async._DelayedEvent, _is__DelayedEvent_default);
const _is__DelayedData_default = Symbol('_is__DelayedData_default');
async._DelayedData$ = dart.generic(T => {
  var _EventDispatchOfT = () => (_EventDispatchOfT = dart.constFn(async._EventDispatch$(T)))();
  class _DelayedData extends async._DelayedEvent$(T) {
    perform(dispatch) {
      _EventDispatchOfT().as(dispatch);
      if (dispatch == null) dart.nullFailed(L63, 610, 34, "dispatch");
      dispatch[_sendData](this.value);
    }
  }
  (_DelayedData.new = function(value) {
    this.value = value;
    _DelayedData.__proto__.new.call(this);
    ;
  }).prototype = _DelayedData.prototype;
  dart.addTypeTests(_DelayedData);
  _DelayedData.prototype[_is__DelayedData_default] = true;
  dart.addTypeCaches(_DelayedData);
  dart.setMethodSignature(_DelayedData, () => ({
    __proto__: dart.getMethods(_DelayedData.__proto__),
    perform: dart.fnType(dart.void, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(_DelayedData, L29);
  dart.setFieldSignature(_DelayedData, () => ({
    __proto__: dart.getFields(_DelayedData.__proto__),
    value: dart.finalFieldType(T)
  }));
  return _DelayedData;
});
async._DelayedData = async._DelayedData$();
dart.addTypeTests(async._DelayedData, _is__DelayedData_default);
async._DelayedError = class _DelayedError extends async._DelayedEvent {
  perform(dispatch) {
    async._EventDispatch.as(dispatch);
    if (dispatch == null) dart.nullFailed(L63, 621, 31, "dispatch");
    dispatch[_sendError](this.error, this.stackTrace);
  }
};
(async._DelayedError.new = function(error, stackTrace) {
  if (error == null) dart.nullFailed(L63, 620, 22, "error");
  if (stackTrace == null) dart.nullFailed(L63, 620, 34, "stackTrace");
  this.error = error;
  this.stackTrace = stackTrace;
  async._DelayedError.__proto__.new.call(this);
  ;
}).prototype = async._DelayedError.prototype;
dart.addTypeTests(async._DelayedError);
dart.addTypeCaches(async._DelayedError);
dart.setMethodSignature(async._DelayedError, () => ({
  __proto__: dart.getMethods(async._DelayedError.__proto__),
  perform: dart.fnType(dart.void, [dart.nullable(core.Object)])
}));
dart.setLibraryUri(async._DelayedError, L29);
dart.setFieldSignature(async._DelayedError, () => ({
  __proto__: dart.getFields(async._DelayedError.__proto__),
  error: dart.finalFieldType(core.Object),
  stackTrace: dart.finalFieldType(core.StackTrace)
}));
async._DelayedDone = class _DelayedDone extends core.Object {
  perform(dispatch) {
    async._EventDispatch.as(dispatch);
    if (dispatch == null) dart.nullFailed(L63, 629, 31, "dispatch");
    dispatch[_sendDone]();
  }
  get next() {
    return null;
  }
  set next(_) {
    dart.throw(new core.StateError.new("No events after a done."));
  }
};
(async._DelayedDone.new = function() {
  ;
}).prototype = async._DelayedDone.prototype;
dart.addTypeTests(async._DelayedDone);
dart.addTypeCaches(async._DelayedDone);
async._DelayedDone[dart.implements] = () => [async._DelayedEvent];
dart.setMethodSignature(async._DelayedDone, () => ({
  __proto__: dart.getMethods(async._DelayedDone.__proto__),
  perform: dart.fnType(dart.void, [dart.nullable(core.Object)])
}));
dart.setGetterSignature(async._DelayedDone, () => ({
  __proto__: dart.getGetters(async._DelayedDone.__proto__),
  next: dart.nullable(async._DelayedEvent)
}));
dart.setSetterSignature(async._DelayedDone, () => ({
  __proto__: dart.getSetters(async._DelayedDone.__proto__),
  next: dart.nullable(async._DelayedEvent)
}));
dart.setLibraryUri(async._DelayedDone, L29);
const _is__StreamImplEvents_default = Symbol('_is__StreamImplEvents_default');
async._StreamImplEvents$ = dart.generic(T => {
  var _EventDispatchOfT = () => (_EventDispatchOfT = dart.constFn(async._EventDispatch$(T)))();
  class _StreamImplEvents extends async._PendingEvents$(T) {
    get isEmpty() {
      return this.lastPendingEvent == null;
    }
    add(event) {
      if (event == null) dart.nullFailed(L63, 712, 26, "event");
      let lastEvent = this.lastPendingEvent;
      if (lastEvent == null) {
        this.firstPendingEvent = this.lastPendingEvent = event;
      } else {
        this.lastPendingEvent = lastEvent.next = event;
      }
    }
    handleNext(dispatch) {
      _EventDispatchOfT().as(dispatch);
      if (dispatch == null) dart.nullFailed(L63, 721, 37, "dispatch");
      if (!!dart.test(this.isScheduled)) dart.assertFailed(null, L63, 722, 12, "!isScheduled");
      if (!!dart.test(this.isEmpty)) dart.assertFailed(null, L63, 723, 12, "!isEmpty");
      let event = dart.nullCheck(this.firstPendingEvent);
      let nextEvent = event.next;
      this.firstPendingEvent = nextEvent;
      if (nextEvent == null) {
        this.lastPendingEvent = null;
      }
      event.perform(dispatch);
    }
    clear() {
      if (dart.test(this.isScheduled)) this.cancelSchedule();
      this.firstPendingEvent = this.lastPendingEvent = null;
    }
  }
  (_StreamImplEvents.new = function() {
    this.firstPendingEvent = null;
    this.lastPendingEvent = null;
    _StreamImplEvents.__proto__.new.call(this);
    ;
  }).prototype = _StreamImplEvents.prototype;
  dart.addTypeTests(_StreamImplEvents);
  _StreamImplEvents.prototype[_is__StreamImplEvents_default] = true;
  dart.addTypeCaches(_StreamImplEvents);
  dart.setMethodSignature(_StreamImplEvents, () => ({
    __proto__: dart.getMethods(_StreamImplEvents.__proto__),
    add: dart.fnType(dart.void, [async._DelayedEvent]),
    handleNext: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    clear: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(_StreamImplEvents, () => ({
    __proto__: dart.getGetters(_StreamImplEvents.__proto__),
    isEmpty: core.bool
  }));
  dart.setLibraryUri(_StreamImplEvents, L29);
  dart.setFieldSignature(_StreamImplEvents, () => ({
    __proto__: dart.getFields(_StreamImplEvents.__proto__),
    firstPendingEvent: dart.fieldType(dart.nullable(async._DelayedEvent)),
    lastPendingEvent: dart.fieldType(dart.nullable(async._DelayedEvent))
  }));
  return _StreamImplEvents;
});
async._StreamImplEvents = async._StreamImplEvents$();
dart.addTypeTests(async._StreamImplEvents, _is__StreamImplEvents_default);
var _schedule = dart.privateName(async, "_schedule");
var _isSent = dart.privateName(async, "_isSent");
var _isScheduled = dart.privateName(async, "_isScheduled");
const _is__DoneStreamSubscription_default = Symbol('_is__DoneStreamSubscription_default');
async._DoneStreamSubscription$ = dart.generic(T => {
  class _DoneStreamSubscription extends core.Object {
    get [_isSent]() {
      return (dart.notNull(this[_state]) & 1) !== 0;
    }
    get [_isScheduled]() {
      return (dart.notNull(this[_state]) & 2) !== 0;
    }
    get isPaused() {
      return dart.notNull(this[_state]) >= 4;
    }
    [_schedule]() {
      if (dart.test(this[_isScheduled])) return;
      this[_zone$].scheduleMicrotask(dart.bind(this, _sendDone));
      this[_state] = (dart.notNull(this[_state]) | 2) >>> 0;
    }
    onData(handleData) {
    }
    onError(handleError) {
    }
    onDone(handleDone) {
      this[_onDone$] = handleDone;
    }
    pause(resumeSignal = null) {
      this[_state] = dart.notNull(this[_state]) + 4;
      if (resumeSignal != null) resumeSignal.whenComplete(dart.bind(this, 'resume'));
    }
    resume() {
      if (dart.test(this.isPaused)) {
        this[_state] = dart.notNull(this[_state]) - 4;
        if (!dart.test(this.isPaused) && !dart.test(this[_isSent])) {
          this[_schedule]();
        }
      }
    }
    cancel() {
      return async.Future._nullFuture;
    }
    asFuture(E, futureValue = null) {
      let resultValue = null;
      if (futureValue == null) {
        if (!dart.test(_internal.typeAcceptsNull(E))) {
          dart.throw(new core.ArgumentError.notNull("futureValue"));
        }
        resultValue = E.as(futureValue);
      } else {
        resultValue = futureValue;
      }
      let result = new (async._Future$(E)).new();
      this[_onDone$] = dart.fn(() => {
        result[_completeWithValue](resultValue);
      }, VoidToNullN());
      return result;
    }
    [_sendDone]() {
      this[_state] = (dart.notNull(this[_state]) & ~2 >>> 0) >>> 0;
      if (dart.test(this.isPaused)) return;
      this[_state] = (dart.notNull(this[_state]) | 1) >>> 0;
      let doneHandler = this[_onDone$];
      if (doneHandler != null) this[_zone$].runGuarded(doneHandler);
    }
  }
  (_DoneStreamSubscription.new = function(_onDone) {
    this[_state] = 0;
    this[_onDone$] = _onDone;
    this[_zone$] = async.Zone.current;
    this[_schedule]();
  }).prototype = _DoneStreamSubscription.prototype;
  _DoneStreamSubscription.prototype[dart.isStreamSubscription] = true;
  dart.addTypeTests(_DoneStreamSubscription);
  _DoneStreamSubscription.prototype[_is__DoneStreamSubscription_default] = true;
  dart.addTypeCaches(_DoneStreamSubscription);
  _DoneStreamSubscription[dart.implements] = () => [async.StreamSubscription$(T)];
  dart.setMethodSignature(_DoneStreamSubscription, () => ({
    __proto__: dart.getMethods(_DoneStreamSubscription.__proto__),
    [_schedule]: dart.fnType(dart.void, []),
    onData: dart.fnType(dart.void, [dart.nullable(dart.fnType(dart.void, [T]))]),
    onError: dart.fnType(dart.void, [dart.nullable(core.Function)]),
    onDone: dart.fnType(dart.void, [dart.nullable(dart.fnType(dart.void, []))]),
    pause: dart.fnType(dart.void, [], [dart.nullable(async.Future$(dart.void))]),
    resume: dart.fnType(dart.void, []),
    cancel: dart.fnType(async.Future, []),
    asFuture: dart.gFnType(E => [async.Future$(E), [], [dart.nullable(E)]], E => [dart.nullable(core.Object)]),
    [_sendDone]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(_DoneStreamSubscription, () => ({
    __proto__: dart.getGetters(_DoneStreamSubscription.__proto__),
    [_isSent]: core.bool,
    [_isScheduled]: core.bool,
    isPaused: core.bool
  }));
  dart.setLibraryUri(_DoneStreamSubscription, L29);
  dart.setFieldSignature(_DoneStreamSubscription, () => ({
    __proto__: dart.getFields(_DoneStreamSubscription.__proto__),
    [_zone$]: dart.finalFieldType(async.Zone),
    [_state]: dart.fieldType(core.int),
    [_onDone$]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [])))
  }));
  return _DoneStreamSubscription;
});
async._DoneStreamSubscription = async._DoneStreamSubscription$();
dart.defineLazy(async._DoneStreamSubscription, {
  /*async._DoneStreamSubscription._DONE_SENT*/get _DONE_SENT() {
    return 1;
  },
  /*async._DoneStreamSubscription._SCHEDULED*/get _SCHEDULED() {
    return 2;
  },
  /*async._DoneStreamSubscription._PAUSED*/get _PAUSED() {
    return 4;
  }
}, false);
dart.addTypeTests(async._DoneStreamSubscription, _is__DoneStreamSubscription_default);
var _source$4 = dart.privateName(async, "_source");
var _onListenHandler = dart.privateName(async, "_onListenHandler");
var _onCancelHandler = dart.privateName(async, "_onCancelHandler");
var _cancelSubscription = dart.privateName(async, "_cancelSubscription");
var _pauseSubscription = dart.privateName(async, "_pauseSubscription");
var _resumeSubscription = dart.privateName(async, "_resumeSubscription");
var _isSubscriptionPaused = dart.privateName(async, "_isSubscriptionPaused");
const _is__AsBroadcastStream_default = Symbol('_is__AsBroadcastStream_default');
async._AsBroadcastStream$ = dart.generic(T => {
  var StreamSubscriptionOfT = () => (StreamSubscriptionOfT = dart.constFn(async.StreamSubscription$(T)))();
  var _AsBroadcastStreamControllerOfT = () => (_AsBroadcastStreamControllerOfT = dart.constFn(async._AsBroadcastStreamController$(T)))();
  var _DoneStreamSubscriptionOfT = () => (_DoneStreamSubscriptionOfT = dart.constFn(async._DoneStreamSubscription$(T)))();
  var _BroadcastSubscriptionWrapperOfT = () => (_BroadcastSubscriptionWrapperOfT = dart.constFn(async._BroadcastSubscriptionWrapper$(T)))();
  class _AsBroadcastStream extends async.Stream$(T) {
    get isBroadcast() {
      return true;
    }
    listen(onData, opts) {
      let t104;
      let onError = opts && 'onError' in opts ? opts.onError : null;
      let onDone = opts && 'onDone' in opts ? opts.onDone : null;
      let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
      let controller = this[_controller$];
      if (controller == null || dart.test(controller.isClosed)) {
        return new (_DoneStreamSubscriptionOfT()).new(onDone);
      }
      this[_subscription] == null ? this[_subscription] = this[_source$4].listen(dart.bind(controller, 'add'), {onError: dart.bind(controller, 'addError'), onDone: dart.bind(controller, 'close')}) : null;
      return controller[_subscribe](onData, onError, onDone, (t104 = cancelOnError, t104 == null ? false : t104));
    }
    [_onCancel]() {
      let controller = this[_controller$];
      let shutdown = controller == null || dart.test(controller.isClosed);
      let cancelHandler = this[_onCancelHandler];
      if (cancelHandler != null) {
        this[_zone$].runUnary(dart.void, _BroadcastSubscriptionWrapperOfT(), cancelHandler, new (_BroadcastSubscriptionWrapperOfT()).new(this));
      }
      if (shutdown) {
        let subscription = this[_subscription];
        if (subscription != null) {
          subscription.cancel();
          this[_subscription] = null;
        }
      }
    }
    [_onListen$]() {
      let listenHandler = this[_onListenHandler];
      if (listenHandler != null) {
        this[_zone$].runUnary(dart.void, _BroadcastSubscriptionWrapperOfT(), listenHandler, new (_BroadcastSubscriptionWrapperOfT()).new(this));
      }
    }
    [_cancelSubscription]() {
      let subscription = this[_subscription];
      if (subscription != null) {
        this[_subscription] = null;
        this[_controller$] = null;
        subscription.cancel();
      }
    }
    [_pauseSubscription](resumeSignal) {
      let t104;
      t104 = this[_subscription];
      t104 == null ? null : t104.pause(resumeSignal);
    }
    [_resumeSubscription]() {
      let t104;
      t104 = this[_subscription];
      t104 == null ? null : t104.resume();
    }
    get [_isSubscriptionPaused]() {
      let t104, t104$;
      t104$ = (t104 = this[_subscription], t104 == null ? null : t104.isPaused);
      return t104$ == null ? false : t104$;
    }
  }
  (_AsBroadcastStream.new = function(_source, onListenHandler, onCancelHandler) {
    if (_source == null) dart.nullFailed(L63, 825, 12, "_source");
    this[_controller$] = null;
    this[_subscription] = null;
    this[_source$4] = _source;
    this[_onListenHandler] = onListenHandler == null ? null : async.Zone.current.registerUnaryCallback(dart.void, StreamSubscriptionOfT(), onListenHandler);
    this[_onCancelHandler] = onCancelHandler == null ? null : async.Zone.current.registerUnaryCallback(dart.void, StreamSubscriptionOfT(), onCancelHandler);
    this[_zone$] = async.Zone.current;
    _AsBroadcastStream.__proto__.new.call(this);
    this[_controller$] = new (_AsBroadcastStreamControllerOfT()).new(dart.bind(this, _onListen$), dart.bind(this, _onCancel));
  }).prototype = _AsBroadcastStream.prototype;
  dart.addTypeTests(_AsBroadcastStream);
  _AsBroadcastStream.prototype[_is__AsBroadcastStream_default] = true;
  dart.addTypeCaches(_AsBroadcastStream);
  dart.setMethodSignature(_AsBroadcastStream, () => ({
    __proto__: dart.getMethods(_AsBroadcastStream.__proto__),
    listen: dart.fnType(async.StreamSubscription$(T), [dart.nullable(dart.fnType(dart.void, [T]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {}),
    [_onCancel]: dart.fnType(dart.void, []),
    [_onListen$]: dart.fnType(dart.void, []),
    [_cancelSubscription]: dart.fnType(dart.void, []),
    [_pauseSubscription]: dart.fnType(dart.void, [dart.nullable(async.Future$(dart.void))]),
    [_resumeSubscription]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(_AsBroadcastStream, () => ({
    __proto__: dart.getGetters(_AsBroadcastStream.__proto__),
    [_isSubscriptionPaused]: core.bool
  }));
  dart.setLibraryUri(_AsBroadcastStream, L29);
  dart.setFieldSignature(_AsBroadcastStream, () => ({
    __proto__: dart.getFields(_AsBroadcastStream.__proto__),
    [_source$4]: dart.finalFieldType(async.Stream$(T)),
    [_onListenHandler]: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [async.StreamSubscription$(T)]))),
    [_onCancelHandler]: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [async.StreamSubscription$(T)]))),
    [_zone$]: dart.finalFieldType(async.Zone),
    [_controller$]: dart.fieldType(dart.nullable(async._AsBroadcastStreamController$(T))),
    [_subscription]: dart.fieldType(dart.nullable(async.StreamSubscription$(T)))
  }));
  return _AsBroadcastStream;
});
async._AsBroadcastStream = async._AsBroadcastStream$();
dart.addTypeTests(async._AsBroadcastStream, _is__AsBroadcastStream_default);
const _is__BroadcastSubscriptionWrapper_default = Symbol('_is__BroadcastSubscriptionWrapper_default');
async._BroadcastSubscriptionWrapper$ = dart.generic(T => {
  class _BroadcastSubscriptionWrapper extends core.Object {
    onData(handleData) {
      dart.throw(new core.UnsupportedError.new("Cannot change handlers of asBroadcastStream source subscription."));
    }
    onError(handleError) {
      dart.throw(new core.UnsupportedError.new("Cannot change handlers of asBroadcastStream source subscription."));
    }
    onDone(handleDone) {
      dart.throw(new core.UnsupportedError.new("Cannot change handlers of asBroadcastStream source subscription."));
    }
    pause(resumeSignal = null) {
      this[_stream$][_pauseSubscription](resumeSignal);
    }
    resume() {
      this[_stream$][_resumeSubscription]();
    }
    cancel() {
      this[_stream$][_cancelSubscription]();
      return async.Future._nullFuture;
    }
    get isPaused() {
      return this[_stream$][_isSubscriptionPaused];
    }
    asFuture(E, futureValue = null) {
      dart.throw(new core.UnsupportedError.new("Cannot change handlers of asBroadcastStream source subscription."));
    }
  }
  (_BroadcastSubscriptionWrapper.new = function(_stream) {
    if (_stream == null) dart.nullFailed(L63, 909, 38, "_stream");
    this[_stream$] = _stream;
    ;
  }).prototype = _BroadcastSubscriptionWrapper.prototype;
  _BroadcastSubscriptionWrapper.prototype[dart.isStreamSubscription] = true;
  dart.addTypeTests(_BroadcastSubscriptionWrapper);
  _BroadcastSubscriptionWrapper.prototype[_is__BroadcastSubscriptionWrapper_default] = true;
  dart.addTypeCaches(_BroadcastSubscriptionWrapper);
  _BroadcastSubscriptionWrapper[dart.implements] = () => [async.StreamSubscription$(T)];
  dart.setMethodSignature(_BroadcastSubscriptionWrapper, () => ({
    __proto__: dart.getMethods(_BroadcastSubscriptionWrapper.__proto__),
    onData: dart.fnType(dart.void, [dart.nullable(dart.fnType(dart.void, [T]))]),
    onError: dart.fnType(dart.void, [dart.nullable(core.Function)]),
    onDone: dart.fnType(dart.void, [dart.nullable(dart.fnType(dart.void, []))]),
    pause: dart.fnType(dart.void, [], [dart.nullable(async.Future$(dart.void))]),
    resume: dart.fnType(dart.void, []),
    cancel: dart.fnType(async.Future, []),
    asFuture: dart.gFnType(E => [async.Future$(E), [], [dart.nullable(E)]], E => [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(_BroadcastSubscriptionWrapper, () => ({
    __proto__: dart.getGetters(_BroadcastSubscriptionWrapper.__proto__),
    isPaused: core.bool
  }));
  dart.setLibraryUri(_BroadcastSubscriptionWrapper, L29);
  dart.setFieldSignature(_BroadcastSubscriptionWrapper, () => ({
    __proto__: dart.getFields(_BroadcastSubscriptionWrapper.__proto__),
    [_stream$]: dart.finalFieldType(async._AsBroadcastStream)
  }));
  return _BroadcastSubscriptionWrapper;
});
async._BroadcastSubscriptionWrapper = async._BroadcastSubscriptionWrapper$();
dart.addTypeTests(async._BroadcastSubscriptionWrapper, _is__BroadcastSubscriptionWrapper_default);
var _stateData = dart.privateName(async, "_stateData");
var _initializeOrDone = dart.privateName(async, "_initializeOrDone");
const _is__StreamIterator_default = Symbol('_is__StreamIterator_default');
async._StreamIterator$ = dart.generic(T => {
  var StreamOfT = () => (StreamOfT = dart.constFn(async.Stream$(T)))();
  class _StreamIterator extends core.Object {
    get current() {
      if (this[_subscription] != null && dart.test(this[_isPaused])) {
        return T.as(this[_stateData]);
      }
      return T.as(null);
    }
    moveNext() {
      let subscription = this[_subscription];
      if (subscription != null) {
        if (dart.test(this[_isPaused])) {
          let future = new (_FutureOfbool()).new();
          this[_stateData] = future;
          this[_isPaused] = false;
          subscription.resume();
          return future;
        }
        dart.throw(new core.StateError.new("Already waiting for next."));
      }
      return this[_initializeOrDone]();
    }
    [_initializeOrDone]() {
      if (!(this[_subscription] == null)) dart.assertFailed(null, L63, 1037, 12, "_subscription == null");
      let stateData = this[_stateData];
      if (stateData != null) {
        let stream = StreamOfT().as(stateData);
        this[_subscription] = stream.listen(dart.bind(this, _onData$), {onError: dart.bind(this, _onError), onDone: dart.bind(this, _onDone$), cancelOnError: true});
        let future = new (_FutureOfbool()).new();
        this[_stateData] = future;
        return future;
      }
      return async.Future._falseFuture;
    }
    cancel() {
      let subscription = this[_subscription];
      let stateData = this[_stateData];
      this[_stateData] = null;
      if (subscription != null) {
        this[_subscription] = null;
        if (!dart.test(this[_isPaused])) {
          let future = _FutureOfbool().as(stateData);
          future[_asyncComplete](false);
        }
        return subscription.cancel();
      }
      return async.Future._nullFuture;
    }
    [_onData$](data) {
      let t104;
      T.as(data);
      if (!(this[_subscription] != null && !dart.test(this[_isPaused]))) dart.assertFailed(null, L63, 1066, 12, "_subscription != null && !_isPaused");
      let moveNextFuture = _FutureOfbool().as(this[_stateData]);
      this[_stateData] = data;
      this[_isPaused] = true;
      moveNextFuture[_complete](true);
      if (dart.test(this[_isPaused])) {
        t104 = this[_subscription];
        t104 == null ? null : t104.pause();
      }
    }
    [_onError](error, stackTrace) {
      if (error == null) dart.nullFailed(L63, 1074, 24, "error");
      if (stackTrace == null) dart.nullFailed(L63, 1074, 42, "stackTrace");
      if (!(this[_subscription] != null && !dart.test(this[_isPaused]))) dart.assertFailed(null, L63, 1075, 12, "_subscription != null && !_isPaused");
      let moveNextFuture = _FutureOfbool().as(this[_stateData]);
      this[_subscription] = null;
      this[_stateData] = null;
      moveNextFuture[_completeError](error, stackTrace);
    }
    [_onDone$]() {
      if (!(this[_subscription] != null && !dart.test(this[_isPaused]))) dart.assertFailed(null, L63, 1083, 12, "_subscription != null && !_isPaused");
      let moveNextFuture = _FutureOfbool().as(this[_stateData]);
      this[_subscription] = null;
      this[_stateData] = null;
      moveNextFuture[_complete](false);
    }
  }
  (_StreamIterator.new = function(stream) {
    if (stream == null) dart.nullFailed(L63, 1005, 35, "stream");
    this[_subscription] = null;
    this[_isPaused] = false;
    this[_stateData] = stream;
    core.ArgumentError.checkNotNull(StreamOfT(), stream, "stream");
  }).prototype = _StreamIterator.prototype;
  dart.addTypeTests(_StreamIterator);
  _StreamIterator.prototype[_is__StreamIterator_default] = true;
  dart.addTypeCaches(_StreamIterator);
  _StreamIterator[dart.implements] = () => [async.StreamIterator$(T)];
  dart.setMethodSignature(_StreamIterator, () => ({
    __proto__: dart.getMethods(_StreamIterator.__proto__),
    moveNext: dart.fnType(async.Future$(core.bool), []),
    [_initializeOrDone]: dart.fnType(async.Future$(core.bool), []),
    cancel: dart.fnType(async.Future, []),
    [_onData$]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    [_onError]: dart.fnType(dart.void, [core.Object, core.StackTrace]),
    [_onDone$]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(_StreamIterator, () => ({
    __proto__: dart.getGetters(_StreamIterator.__proto__),
    current: T
  }));
  dart.setLibraryUri(_StreamIterator, L29);
  dart.setFieldSignature(_StreamIterator, () => ({
    __proto__: dart.getFields(_StreamIterator.__proto__),
    [_subscription]: dart.fieldType(dart.nullable(async.StreamSubscription$(T))),
    [_stateData]: dart.fieldType(dart.nullable(core.Object)),
    [_isPaused]: dart.fieldType(core.bool)
  }));
  return _StreamIterator;
});
async._StreamIterator = async._StreamIterator$();
dart.addTypeTests(async._StreamIterator, _is__StreamIterator_default);
const _is__EmptyStream_default = Symbol('_is__EmptyStream_default');
async._EmptyStream$ = dart.generic(T => {
  var _DoneStreamSubscriptionOfT = () => (_DoneStreamSubscriptionOfT = dart.constFn(async._DoneStreamSubscription$(T)))();
  class _EmptyStream extends async.Stream$(T) {
    get isBroadcast() {
      return true;
    }
    listen(onData, opts) {
      let onError = opts && 'onError' in opts ? opts.onError : null;
      let onDone = opts && 'onDone' in opts ? opts.onDone : null;
      let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
      return new (_DoneStreamSubscriptionOfT()).new(onDone);
    }
  }
  (_EmptyStream.new = function() {
    _EmptyStream.__proto__._internal.call(this);
    ;
  }).prototype = _EmptyStream.prototype;
  dart.addTypeTests(_EmptyStream);
  _EmptyStream.prototype[_is__EmptyStream_default] = true;
  dart.addTypeCaches(_EmptyStream);
  dart.setMethodSignature(_EmptyStream, () => ({
    __proto__: dart.getMethods(_EmptyStream.__proto__),
    listen: dart.fnType(async.StreamSubscription$(T), [dart.nullable(dart.fnType(dart.void, [T]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {})
  }));
  dart.setLibraryUri(_EmptyStream, L29);
  return _EmptyStream;
});
async._EmptyStream = async._EmptyStream$();
dart.addTypeTests(async._EmptyStream, _is__EmptyStream_default);
const _is__MultiStream_default = Symbol('_is__MultiStream_default');
var isBroadcast$ = dart.privateName(async, "_MultiStream.isBroadcast");
async._MultiStream$ = dart.generic(T => {
  var _MultiStreamControllerOfT = () => (_MultiStreamControllerOfT = dart.constFn(async._MultiStreamController$(T)))();
  class _MultiStream extends async.Stream$(T) {
    get isBroadcast() {
      return this[isBroadcast$];
    }
    set isBroadcast(value) {
      super.isBroadcast = value;
    }
    listen(onData, opts) {
      let t104;
      let onError = opts && 'onError' in opts ? opts.onError : null;
      let onDone = opts && 'onDone' in opts ? opts.onDone : null;
      let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
      let controller = new (_MultiStreamControllerOfT()).new();
      controller.onListen = dart.fn(() => {
        let t104;
        t104 = controller;
        this[_onListen$](t104);
      }, VoidToNullN());
      return controller[_subscribe](onData, onError, onDone, (t104 = cancelOnError, t104 == null ? false : t104));
    }
  }
  (_MultiStream.new = function(_onListen, isBroadcast) {
    if (_onListen == null) dart.nullFailed(L63, 1107, 21, "_onListen");
    if (isBroadcast == null) dart.nullFailed(L63, 1107, 37, "isBroadcast");
    this[_onListen$] = _onListen;
    this[isBroadcast$] = isBroadcast;
    _MultiStream.__proto__.new.call(this);
    ;
  }).prototype = _MultiStream.prototype;
  dart.addTypeTests(_MultiStream);
  _MultiStream.prototype[_is__MultiStream_default] = true;
  dart.addTypeCaches(_MultiStream);
  dart.setMethodSignature(_MultiStream, () => ({
    __proto__: dart.getMethods(_MultiStream.__proto__),
    listen: dart.fnType(async.StreamSubscription$(T), [dart.nullable(dart.fnType(dart.void, [T]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {})
  }));
  dart.setLibraryUri(_MultiStream, L29);
  dart.setFieldSignature(_MultiStream, () => ({
    __proto__: dart.getFields(_MultiStream.__proto__),
    isBroadcast: dart.finalFieldType(core.bool),
    [_onListen$]: dart.finalFieldType(dart.fnType(dart.void, [async.MultiStreamController$(T)]))
  }));
  return _MultiStream;
});
async._MultiStream = async._MultiStream$();
dart.addTypeTests(async._MultiStream, _is__MultiStream_default);
const _is__MultiStreamController_default = Symbol('_is__MultiStreamController_default');
async._MultiStreamController$ = dart.generic(T => {
  class _MultiStreamController extends async._AsyncStreamController$(T) {
    addSync(data) {
      T.as(data);
      if (!dart.test(this[_mayAddEvent])) dart.throw(this[_badEventState]());
      if (dart.test(this.hasListener)) this[_subscription][_add](data);
    }
    addErrorSync(error, stackTrace = null) {
      let t104;
      if (error == null) dart.nullFailed(L63, 1129, 28, "error");
      if (!dart.test(this[_mayAddEvent])) dart.throw(this[_badEventState]());
      if (dart.test(this.hasListener)) {
        this[_subscription][_addError](error, (t104 = stackTrace, t104 == null ? core.StackTrace.empty : t104));
      }
    }
    closeSync() {
      if (dart.test(this.isClosed)) return;
      if (!dart.test(this[_mayAddEvent])) dart.throw(this[_badEventState]());
      this[_state] = (dart.notNull(this[_state]) | 4) >>> 0;
      if (dart.test(this.hasListener)) this[_subscription][_close]();
    }
    get stream() {
      dart.throw(new core.UnsupportedError.new("Not available"));
    }
  }
  (_MultiStreamController.new = function() {
    _MultiStreamController.__proto__.new.call(this, null, null, null, null);
    ;
  }).prototype = _MultiStreamController.prototype;
  dart.addTypeTests(_MultiStreamController);
  _MultiStreamController.prototype[_is__MultiStreamController_default] = true;
  dart.addTypeCaches(_MultiStreamController);
  _MultiStreamController[dart.implements] = () => [async.MultiStreamController$(T)];
  dart.setMethodSignature(_MultiStreamController, () => ({
    __proto__: dart.getMethods(_MultiStreamController.__proto__),
    addSync: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    addErrorSync: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
    closeSync: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(_MultiStreamController, L29);
  return _MultiStreamController;
});
async._MultiStreamController = async._MultiStreamController$();
dart.addTypeTests(async._MultiStreamController, _is__MultiStreamController_default);
var _handleError$ = dart.privateName(async, "_handleError");
var _handleDone$ = dart.privateName(async, "_handleDone");
const _is__ForwardingStream_default = Symbol('_is__ForwardingStream_default');
async._ForwardingStream$ = dart.generic((S, T) => {
  var _ForwardingStreamSubscriptionOfS$T = () => (_ForwardingStreamSubscriptionOfS$T = dart.constFn(async._ForwardingStreamSubscription$(S, T)))();
  var _EventSinkOfT = () => (_EventSinkOfT = dart.constFn(async._EventSink$(T)))();
  class _ForwardingStream extends async.Stream$(T) {
    get isBroadcast() {
      return this[_source$4].isBroadcast;
    }
    listen(onData, opts) {
      let t104;
      let onError = opts && 'onError' in opts ? opts.onError : null;
      let onDone = opts && 'onDone' in opts ? opts.onDone : null;
      let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
      return this[_createSubscription](onData, onError, onDone, (t104 = cancelOnError, t104 == null ? false : t104));
    }
    [_createSubscription](onData, onError, onDone, cancelOnError) {
      if (cancelOnError == null) dart.nullFailed(L68, 87, 47, "cancelOnError");
      return new (_ForwardingStreamSubscriptionOfS$T()).new(this, onData, onError, onDone, cancelOnError);
    }
    [_handleError$](error, stackTrace, sink) {
      if (error == null) dart.nullFailed(L68, 96, 28, "error");
      if (stackTrace == null) dart.nullFailed(L68, 96, 46, "stackTrace");
      _EventSinkOfT().as(sink);
      if (sink == null) dart.nullFailed(L68, 96, 72, "sink");
      sink[_addError](error, stackTrace);
    }
    [_handleDone$](sink) {
      _EventSinkOfT().as(sink);
      if (sink == null) dart.nullFailed(L68, 100, 34, "sink");
      sink[_close]();
    }
  }
  (_ForwardingStream.new = function(_source) {
    if (_source == null) dart.nullFailed(L68, 77, 26, "_source");
    this[_source$4] = _source;
    _ForwardingStream.__proto__.new.call(this);
    ;
  }).prototype = _ForwardingStream.prototype;
  dart.addTypeTests(_ForwardingStream);
  _ForwardingStream.prototype[_is__ForwardingStream_default] = true;
  dart.addTypeCaches(_ForwardingStream);
  dart.setMethodSignature(_ForwardingStream, () => ({
    __proto__: dart.getMethods(_ForwardingStream.__proto__),
    listen: dart.fnType(async.StreamSubscription$(T), [dart.nullable(dart.fnType(dart.void, [T]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {}),
    [_createSubscription]: dart.fnType(async.StreamSubscription$(T), [dart.nullable(dart.fnType(dart.void, [T])), dart.nullable(core.Function), dart.nullable(dart.fnType(dart.void, [])), core.bool]),
    [_handleError$]: dart.fnType(dart.void, [core.Object, core.StackTrace, dart.nullable(core.Object)]),
    [_handleDone$]: dart.fnType(dart.void, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(_ForwardingStream, L29);
  dart.setFieldSignature(_ForwardingStream, () => ({
    __proto__: dart.getFields(_ForwardingStream.__proto__),
    [_source$4]: dart.finalFieldType(async.Stream$(S))
  }));
  return _ForwardingStream;
});
async._ForwardingStream = async._ForwardingStream$();
dart.addTypeTests(async._ForwardingStream, _is__ForwardingStream_default);
var _handleData$ = dart.privateName(async, "_handleData");
const _is__ForwardingStreamSubscription_default = Symbol('_is__ForwardingStreamSubscription_default');
async._ForwardingStreamSubscription$ = dart.generic((S, T) => {
  class _ForwardingStreamSubscription extends async._BufferingStreamSubscription$(T) {
    [_add](data) {
      T.as(data);
      if (dart.test(this[_isClosed])) return;
      super[_add](data);
    }
    [_addError](error, stackTrace) {
      if (error == null) dart.nullFailed(L68, 130, 25, "error");
      if (stackTrace == null) dart.nullFailed(L68, 130, 43, "stackTrace");
      if (dart.test(this[_isClosed])) return;
      super[_addError](error, stackTrace);
    }
    [_onPause]() {
      let t104;
      t104 = this[_subscription];
      t104 == null ? null : t104.pause();
    }
    [_onResume]() {
      let t104;
      t104 = this[_subscription];
      t104 == null ? null : t104.resume();
    }
    [_onCancel]() {
      let subscription = this[_subscription];
      if (subscription != null) {
        this[_subscription] = null;
        return subscription.cancel();
      }
      return null;
    }
    [_handleData$](data) {
      S.as(data);
      this[_stream$][_handleData$](data, this);
    }
    [_handleError$](error, stackTrace) {
      if (stackTrace == null) dart.nullFailed(L68, 160, 39, "stackTrace");
      this[_stream$][_handleError$](core.Object.as(error), stackTrace, this);
    }
    [_handleDone$]() {
      this[_stream$][_handleDone$](this);
    }
  }
  (_ForwardingStreamSubscription.new = function(_stream, onData, onError, onDone, cancelOnError) {
    if (_stream == null) dart.nullFailed(L68, 114, 38, "_stream");
    if (cancelOnError == null) dart.nullFailed(L68, 115, 47, "cancelOnError");
    this[_subscription] = null;
    this[_stream$] = _stream;
    _ForwardingStreamSubscription.__proto__.new.call(this, onData, onError, onDone, cancelOnError);
    this[_subscription] = this[_stream$][_source$4].listen(dart.bind(this, _handleData$), {onError: dart.bind(this, _handleError$), onDone: dart.bind(this, _handleDone$)});
  }).prototype = _ForwardingStreamSubscription.prototype;
  dart.addTypeTests(_ForwardingStreamSubscription);
  _ForwardingStreamSubscription.prototype[_is__ForwardingStreamSubscription_default] = true;
  dart.addTypeCaches(_ForwardingStreamSubscription);
  dart.setMethodSignature(_ForwardingStreamSubscription, () => ({
    __proto__: dart.getMethods(_ForwardingStreamSubscription.__proto__),
    [_handleData$]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    [_handleError$]: dart.fnType(dart.void, [dart.dynamic, core.StackTrace]),
    [_handleDone$]: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(_ForwardingStreamSubscription, L29);
  dart.setFieldSignature(_ForwardingStreamSubscription, () => ({
    __proto__: dart.getFields(_ForwardingStreamSubscription.__proto__),
    [_stream$]: dart.finalFieldType(async._ForwardingStream$(S, T)),
    [_subscription]: dart.fieldType(dart.nullable(async.StreamSubscription$(S)))
  }));
  return _ForwardingStreamSubscription;
});
async._ForwardingStreamSubscription = async._ForwardingStreamSubscription$();
dart.addTypeTests(async._ForwardingStreamSubscription, _is__ForwardingStreamSubscription_default);
var _test = dart.privateName(async, "_test");
const _is__WhereStream_default = Symbol('_is__WhereStream_default');
async._WhereStream$ = dart.generic(T => {
  class _WhereStream extends async._ForwardingStream$(T, T) {
    [_handleData$](inputEvent, sink) {
      let t104;
      if (sink == null) dart.nullFailed(L68, 190, 48, "sink");
      let satisfies = null;
      try {
        satisfies = (t104 = inputEvent, this[_test](t104));
      } catch (e$) {
        let e = dart.getThrown(e$);
        let s = dart.stackTrace(e$);
        if (core.Object.is(e)) {
          async._addErrorWithReplacement(sink, e, s);
          return;
        } else
          throw e$;
      }
      if (dart.test(satisfies)) {
        sink[_add](inputEvent);
      }
    }
  }
  (_WhereStream.new = function(source, test) {
    if (source == null) dart.nullFailed(L68, 186, 26, "source");
    if (test == null) dart.nullFailed(L68, 186, 39, "test");
    this[_test] = test;
    _WhereStream.__proto__.new.call(this, source);
    ;
  }).prototype = _WhereStream.prototype;
  dart.addTypeTests(_WhereStream);
  _WhereStream.prototype[_is__WhereStream_default] = true;
  dart.addTypeCaches(_WhereStream);
  dart.setMethodSignature(_WhereStream, () => ({
    __proto__: dart.getMethods(_WhereStream.__proto__),
    [_handleData$]: dart.fnType(dart.void, [T, async._EventSink$(T)])
  }));
  dart.setLibraryUri(_WhereStream, L29);
  dart.setFieldSignature(_WhereStream, () => ({
    __proto__: dart.getFields(_WhereStream.__proto__),
    [_test]: dart.finalFieldType(dart.fnType(core.bool, [T]))
  }));
  return _WhereStream;
});
async._WhereStream = async._WhereStream$();
dart.addTypeTests(async._WhereStream, _is__WhereStream_default);
var _transform = dart.privateName(async, "_transform");
const _is__MapStream_default = Symbol('_is__MapStream_default');
async._MapStream$ = dart.generic((S, T) => {
  class _MapStream extends async._ForwardingStream$(S, T) {
    [_handleData$](inputEvent, sink) {
      let t105;
      if (sink == null) dart.nullFailed(L68, 216, 48, "sink");
      let outputEvent = null;
      try {
        outputEvent = (t105 = inputEvent, this[_transform](t105));
      } catch (e$) {
        let e = dart.getThrown(e$);
        let s = dart.stackTrace(e$);
        if (core.Object.is(e)) {
          async._addErrorWithReplacement(sink, e, s);
          return;
        } else
          throw e$;
      }
      sink[_add](outputEvent);
    }
  }
  (_MapStream.new = function(source, transform) {
    if (source == null) dart.nullFailed(L68, 212, 24, "source");
    if (transform == null) dart.nullFailed(L68, 212, 34, "transform");
    this[_transform] = transform;
    _MapStream.__proto__.new.call(this, source);
    ;
  }).prototype = _MapStream.prototype;
  dart.addTypeTests(_MapStream);
  _MapStream.prototype[_is__MapStream_default] = true;
  dart.addTypeCaches(_MapStream);
  dart.setMethodSignature(_MapStream, () => ({
    __proto__: dart.getMethods(_MapStream.__proto__),
    [_handleData$]: dart.fnType(dart.void, [S, async._EventSink$(T)])
  }));
  dart.setLibraryUri(_MapStream, L29);
  dart.setFieldSignature(_MapStream, () => ({
    __proto__: dart.getFields(_MapStream.__proto__),
    [_transform]: dart.finalFieldType(dart.fnType(T, [S]))
  }));
  return _MapStream;
});
async._MapStream = async._MapStream$();
dart.addTypeTests(async._MapStream, _is__MapStream_default);
var _expand = dart.privateName(async, "_expand");
const _is__ExpandStream_default = Symbol('_is__ExpandStream_default');
async._ExpandStream$ = dart.generic((S, T) => {
  class _ExpandStream extends async._ForwardingStream$(S, T) {
    [_handleData$](inputEvent, sink) {
      let t106;
      if (sink == null) dart.nullFailed(L68, 238, 48, "sink");
      try {
        for (let value of (t106 = inputEvent, this[_expand](t106))) {
          sink[_add](value);
        }
      } catch (e$) {
        let e = dart.getThrown(e$);
        let s = dart.stackTrace(e$);
        if (core.Object.is(e)) {
          async._addErrorWithReplacement(sink, e, s);
        } else
          throw e$;
      }
    }
  }
  (_ExpandStream.new = function(source, expand) {
    if (source == null) dart.nullFailed(L68, 234, 27, "source");
    if (expand == null) dart.nullFailed(L68, 234, 47, "expand");
    this[_expand] = expand;
    _ExpandStream.__proto__.new.call(this, source);
    ;
  }).prototype = _ExpandStream.prototype;
  dart.addTypeTests(_ExpandStream);
  _ExpandStream.prototype[_is__ExpandStream_default] = true;
  dart.addTypeCaches(_ExpandStream);
  dart.setMethodSignature(_ExpandStream, () => ({
    __proto__: dart.getMethods(_ExpandStream.__proto__),
    [_handleData$]: dart.fnType(dart.void, [S, async._EventSink$(T)])
  }));
  dart.setLibraryUri(_ExpandStream, L29);
  dart.setFieldSignature(_ExpandStream, () => ({
    __proto__: dart.getFields(_ExpandStream.__proto__),
    [_expand]: dart.finalFieldType(dart.fnType(core.Iterable$(T), [S]))
  }));
  return _ExpandStream;
});
async._ExpandStream = async._ExpandStream$();
dart.addTypeTests(async._ExpandStream, _is__ExpandStream_default);
const _is__HandleErrorStream_default = Symbol('_is__HandleErrorStream_default');
async._HandleErrorStream$ = dart.generic(T => {
  class _HandleErrorStream extends async._ForwardingStream$(T, T) {
    [_handleData$](data, sink) {
      if (sink == null) dart.nullFailed(L68, 265, 42, "sink");
      sink[_add](data);
    }
    [_handleError$](error, stackTrace, sink) {
      if (error == null) dart.nullFailed(L68, 269, 28, "error");
      if (stackTrace == null) dart.nullFailed(L68, 269, 46, "stackTrace");
      if (sink == null) dart.nullFailed(L68, 269, 72, "sink");
      let matches = true;
      let test = this[_test];
      if (test != null) {
        try {
          matches = test(error);
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            async._addErrorWithReplacement(sink, e, s);
            return;
          } else
            throw e$;
        }
      }
      if (dart.test(matches)) {
        try {
          async._invokeErrorHandler(this[_transform], error, stackTrace);
        } catch (e$0) {
          let e = dart.getThrown(e$0);
          let s = dart.stackTrace(e$0);
          if (core.Object.is(e)) {
            if (core.identical(e, error)) {
              sink[_addError](error, stackTrace);
            } else {
              async._addErrorWithReplacement(sink, e, s);
            }
            return;
          } else
            throw e$0;
        }
      } else {
        sink[_addError](error, stackTrace);
      }
    }
  }
  (_HandleErrorStream.new = function(source, onError, test) {
    if (source == null) dart.nullFailed(L68, 260, 17, "source");
    if (onError == null) dart.nullFailed(L68, 260, 34, "onError");
    this[_transform] = onError;
    this[_test] = test;
    _HandleErrorStream.__proto__.new.call(this, source);
    ;
  }).prototype = _HandleErrorStream.prototype;
  dart.addTypeTests(_HandleErrorStream);
  _HandleErrorStream.prototype[_is__HandleErrorStream_default] = true;
  dart.addTypeCaches(_HandleErrorStream);
  dart.setMethodSignature(_HandleErrorStream, () => ({
    __proto__: dart.getMethods(_HandleErrorStream.__proto__),
    [_handleData$]: dart.fnType(dart.void, [T, async._EventSink$(T)]),
    [_handleError$]: dart.fnType(dart.void, [core.Object, core.StackTrace, async._EventSink$(T)])
  }));
  dart.setLibraryUri(_HandleErrorStream, L29);
  dart.setFieldSignature(_HandleErrorStream, () => ({
    __proto__: dart.getFields(_HandleErrorStream.__proto__),
    [_transform]: dart.finalFieldType(core.Function),
    [_test]: dart.finalFieldType(dart.nullable(dart.fnType(core.bool, [core.Object])))
  }));
  return _HandleErrorStream;
});
async._HandleErrorStream = async._HandleErrorStream$();
dart.addTypeTests(async._HandleErrorStream, _is__HandleErrorStream_default);
var _count = dart.privateName(async, "_count");
var _subState = dart.privateName(async, "_subState");
const _is__TakeStream_default = Symbol('_is__TakeStream_default');
async._TakeStream$ = dart.generic(T => {
  var _DoneStreamSubscriptionOfT = () => (_DoneStreamSubscriptionOfT = dart.constFn(async._DoneStreamSubscription$(T)))();
  var _StateStreamSubscriptionOfint$T = () => (_StateStreamSubscriptionOfint$T = dart.constFn(async._StateStreamSubscription$(core.int, T)))();
  class _TakeStream extends async._ForwardingStream$(T, T) {
    [_createSubscription](onData, onError, onDone, cancelOnError) {
      if (cancelOnError == null) dart.nullFailed(L68, 305, 47, "cancelOnError");
      if (this[_count] === 0) {
        this[_source$4].listen(null).cancel();
        return new (_DoneStreamSubscriptionOfT()).new(onDone);
      }
      return new (_StateStreamSubscriptionOfint$T()).new(this, onData, onError, onDone, cancelOnError, this[_count]);
    }
    [_handleData$](inputEvent, sink) {
      if (sink == null) dart.nullFailed(L68, 314, 48, "sink");
      let subscription = _StateStreamSubscriptionOfint$T().as(sink);
      let count = subscription[_subState];
      if (dart.notNull(count) > 0) {
        sink[_add](inputEvent);
        count = dart.notNull(count) - 1;
        subscription[_subState] = count;
        if (count === 0) {
          sink[_close]();
        }
      }
    }
  }
  (_TakeStream.new = function(source, count) {
    if (source == null) dart.nullFailed(L68, 300, 25, "source");
    if (count == null) dart.nullFailed(L68, 300, 37, "count");
    this[_count] = count;
    _TakeStream.__proto__.new.call(this, source);
    ;
  }).prototype = _TakeStream.prototype;
  dart.addTypeTests(_TakeStream);
  _TakeStream.prototype[_is__TakeStream_default] = true;
  dart.addTypeCaches(_TakeStream);
  dart.setMethodSignature(_TakeStream, () => ({
    __proto__: dart.getMethods(_TakeStream.__proto__),
    [_handleData$]: dart.fnType(dart.void, [T, async._EventSink$(T)])
  }));
  dart.setLibraryUri(_TakeStream, L29);
  dart.setFieldSignature(_TakeStream, () => ({
    __proto__: dart.getFields(_TakeStream.__proto__),
    [_count]: dart.finalFieldType(core.int)
  }));
  return _TakeStream;
});
async._TakeStream = async._TakeStream$();
dart.addTypeTests(async._TakeStream, _is__TakeStream_default);
const _is__StateStreamSubscription_default = Symbol('_is__StateStreamSubscription_default');
var _subState$ = dart.privateName(async, "_StateStreamSubscription._subState");
async._StateStreamSubscription$ = dart.generic((S, T) => {
  class _StateStreamSubscription extends async._ForwardingStreamSubscription$(T, T) {
    get [_subState]() {
      return this[_subState$];
    }
    set [_subState](value) {
      this[_subState$] = S.as(value);
    }
  }
  (_StateStreamSubscription.new = function(stream, onData, onError, onDone, cancelOnError, _subState) {
    if (stream == null) dart.nullFailed(L68, 339, 52, "stream");
    if (cancelOnError == null) dart.nullFailed(L68, 340, 47, "cancelOnError");
    this[_subState$] = _subState;
    _StateStreamSubscription.__proto__.new.call(this, stream, onData, onError, onDone, cancelOnError);
    ;
  }).prototype = _StateStreamSubscription.prototype;
  dart.addTypeTests(_StateStreamSubscription);
  _StateStreamSubscription.prototype[_is__StateStreamSubscription_default] = true;
  dart.addTypeCaches(_StateStreamSubscription);
  dart.setLibraryUri(_StateStreamSubscription, L29);
  dart.setFieldSignature(_StateStreamSubscription, () => ({
    __proto__: dart.getFields(_StateStreamSubscription.__proto__),
    [_subState]: dart.fieldType(S)
  }));
  return _StateStreamSubscription;
});
async._StateStreamSubscription = async._StateStreamSubscription$();
dart.addTypeTests(async._StateStreamSubscription, _is__StateStreamSubscription_default);
const _is__TakeWhileStream_default = Symbol('_is__TakeWhileStream_default');
async._TakeWhileStream$ = dart.generic(T => {
  class _TakeWhileStream extends async._ForwardingStream$(T, T) {
    [_handleData$](inputEvent, sink) {
      let t109;
      if (sink == null) dart.nullFailed(L68, 351, 48, "sink");
      let satisfies = null;
      try {
        satisfies = (t109 = inputEvent, this[_test](t109));
      } catch (e$) {
        let e = dart.getThrown(e$);
        let s = dart.stackTrace(e$);
        if (core.Object.is(e)) {
          async._addErrorWithReplacement(sink, e, s);
          sink[_close]();
          return;
        } else
          throw e$;
      }
      if (dart.test(satisfies)) {
        sink[_add](inputEvent);
      } else {
        sink[_close]();
      }
    }
  }
  (_TakeWhileStream.new = function(source, test) {
    if (source == null) dart.nullFailed(L68, 347, 30, "source");
    if (test == null) dart.nullFailed(L68, 347, 43, "test");
    this[_test] = test;
    _TakeWhileStream.__proto__.new.call(this, source);
    ;
  }).prototype = _TakeWhileStream.prototype;
  dart.addTypeTests(_TakeWhileStream);
  _TakeWhileStream.prototype[_is__TakeWhileStream_default] = true;
  dart.addTypeCaches(_TakeWhileStream);
  dart.setMethodSignature(_TakeWhileStream, () => ({
    __proto__: dart.getMethods(_TakeWhileStream.__proto__),
    [_handleData$]: dart.fnType(dart.void, [T, async._EventSink$(T)])
  }));
  dart.setLibraryUri(_TakeWhileStream, L29);
  dart.setFieldSignature(_TakeWhileStream, () => ({
    __proto__: dart.getFields(_TakeWhileStream.__proto__),
    [_test]: dart.finalFieldType(dart.fnType(core.bool, [T]))
  }));
  return _TakeWhileStream;
});
async._TakeWhileStream = async._TakeWhileStream$();
dart.addTypeTests(async._TakeWhileStream, _is__TakeWhileStream_default);
const _is__SkipStream_default = Symbol('_is__SkipStream_default');
async._SkipStream$ = dart.generic(T => {
  var _StateStreamSubscriptionOfint$T = () => (_StateStreamSubscriptionOfint$T = dart.constFn(async._StateStreamSubscription$(core.int, T)))();
  class _SkipStream extends async._ForwardingStream$(T, T) {
    [_createSubscription](onData, onError, onDone, cancelOnError) {
      if (cancelOnError == null) dart.nullFailed(L68, 381, 47, "cancelOnError");
      return new (_StateStreamSubscriptionOfint$T()).new(this, onData, onError, onDone, cancelOnError, this[_count]);
    }
    [_handleData$](inputEvent, sink) {
      if (sink == null) dart.nullFailed(L68, 386, 48, "sink");
      let subscription = _StateStreamSubscriptionOfint$T().as(sink);
      let count = subscription[_subState];
      if (dart.notNull(count) > 0) {
        subscription[_subState] = dart.notNull(count) - 1;
        return;
      }
      sink[_add](inputEvent);
    }
  }
  (_SkipStream.new = function(source, count) {
    if (source == null) dart.nullFailed(L68, 372, 25, "source");
    if (count == null) dart.nullFailed(L68, 372, 37, "count");
    this[_count] = count;
    _SkipStream.__proto__.new.call(this, source);
    core.RangeError.checkNotNegative(count, "count");
  }).prototype = _SkipStream.prototype;
  dart.addTypeTests(_SkipStream);
  _SkipStream.prototype[_is__SkipStream_default] = true;
  dart.addTypeCaches(_SkipStream);
  dart.setMethodSignature(_SkipStream, () => ({
    __proto__: dart.getMethods(_SkipStream.__proto__),
    [_handleData$]: dart.fnType(dart.void, [T, async._EventSink$(T)])
  }));
  dart.setLibraryUri(_SkipStream, L29);
  dart.setFieldSignature(_SkipStream, () => ({
    __proto__: dart.getFields(_SkipStream.__proto__),
    [_count]: dart.finalFieldType(core.int)
  }));
  return _SkipStream;
});
async._SkipStream = async._SkipStream$();
dart.addTypeTests(async._SkipStream, _is__SkipStream_default);
const _is__SkipWhileStream_default = Symbol('_is__SkipWhileStream_default');
async._SkipWhileStream$ = dart.generic(T => {
  var _StateStreamSubscriptionOfbool$T = () => (_StateStreamSubscriptionOfbool$T = dart.constFn(async._StateStreamSubscription$(core.bool, T)))();
  class _SkipWhileStream extends async._ForwardingStream$(T, T) {
    [_createSubscription](onData, onError, onDone, cancelOnError) {
      if (cancelOnError == null) dart.nullFailed(L68, 405, 47, "cancelOnError");
      return new (_StateStreamSubscriptionOfbool$T()).new(this, onData, onError, onDone, cancelOnError, false);
    }
    [_handleData$](inputEvent, sink) {
      let t110;
      if (sink == null) dart.nullFailed(L68, 410, 48, "sink");
      let subscription = _StateStreamSubscriptionOfbool$T().as(sink);
      let hasFailed = subscription[_subState];
      if (dart.test(hasFailed)) {
        sink[_add](inputEvent);
        return;
      }
      let satisfies = null;
      try {
        satisfies = (t110 = inputEvent, this[_test](t110));
      } catch (e$) {
        let e = dart.getThrown(e$);
        let s = dart.stackTrace(e$);
        if (core.Object.is(e)) {
          async._addErrorWithReplacement(sink, e, s);
          subscription[_subState] = true;
          return;
        } else
          throw e$;
      }
      if (!dart.test(satisfies)) {
        subscription[_subState] = true;
        sink[_add](inputEvent);
      }
    }
  }
  (_SkipWhileStream.new = function(source, test) {
    if (source == null) dart.nullFailed(L68, 400, 30, "source");
    if (test == null) dart.nullFailed(L68, 400, 43, "test");
    this[_test] = test;
    _SkipWhileStream.__proto__.new.call(this, source);
    ;
  }).prototype = _SkipWhileStream.prototype;
  dart.addTypeTests(_SkipWhileStream);
  _SkipWhileStream.prototype[_is__SkipWhileStream_default] = true;
  dart.addTypeCaches(_SkipWhileStream);
  dart.setMethodSignature(_SkipWhileStream, () => ({
    __proto__: dart.getMethods(_SkipWhileStream.__proto__),
    [_handleData$]: dart.fnType(dart.void, [T, async._EventSink$(T)])
  }));
  dart.setLibraryUri(_SkipWhileStream, L29);
  dart.setFieldSignature(_SkipWhileStream, () => ({
    __proto__: dart.getFields(_SkipWhileStream.__proto__),
    [_test]: dart.finalFieldType(dart.fnType(core.bool, [T]))
  }));
  return _SkipWhileStream;
});
async._SkipWhileStream = async._SkipWhileStream$();
dart.addTypeTests(async._SkipWhileStream, _is__SkipWhileStream_default);
var _equals = dart.privateName(async, "_equals");
const _is__DistinctStream_default = Symbol('_is__DistinctStream_default');
async._DistinctStream$ = dart.generic(T => {
  var _StateStreamSubscriptionOfObjectN$T = () => (_StateStreamSubscriptionOfObjectN$T = dart.constFn(async._StateStreamSubscription$(ObjectN(), T)))();
  class _DistinctStream extends async._ForwardingStream$(T, T) {
    [_createSubscription](onData, onError, onDone, cancelOnError) {
      if (cancelOnError == null) dart.nullFailed(L68, 443, 47, "cancelOnError");
      return new (_StateStreamSubscriptionOfObjectN$T()).new(this, onData, onError, onDone, cancelOnError, async._DistinctStream._SENTINEL);
    }
    [_handleData$](inputEvent, sink) {
      if (sink == null) dart.nullFailed(L68, 448, 48, "sink");
      let subscription = _StateStreamSubscriptionOfObjectN$T().as(sink);
      let previous = subscription[_subState];
      if (core.identical(previous, async._DistinctStream._SENTINEL)) {
        subscription[_subState] = inputEvent;
        sink[_add](inputEvent);
      } else {
        let previousEvent = T.as(previous);
        let equals = this[_equals];
        let isEqual = null;
        try {
          if (equals == null) {
            isEqual = dart.equals(previousEvent, inputEvent);
          } else {
            isEqual = equals(previousEvent, inputEvent);
          }
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            async._addErrorWithReplacement(sink, e, s);
            return;
          } else
            throw e$;
        }
        if (!dart.test(isEqual)) {
          sink[_add](inputEvent);
          subscription[_subState] = inputEvent;
        }
      }
    }
  }
  (_DistinctStream.new = function(source, equals) {
    if (source == null) dart.nullFailed(L68, 438, 29, "source");
    this[_equals] = equals;
    _DistinctStream.__proto__.new.call(this, source);
    ;
  }).prototype = _DistinctStream.prototype;
  dart.addTypeTests(_DistinctStream);
  _DistinctStream.prototype[_is__DistinctStream_default] = true;
  dart.addTypeCaches(_DistinctStream);
  dart.setMethodSignature(_DistinctStream, () => ({
    __proto__: dart.getMethods(_DistinctStream.__proto__),
    [_handleData$]: dart.fnType(dart.void, [T, async._EventSink$(T)])
  }));
  dart.setLibraryUri(_DistinctStream, L29);
  dart.setFieldSignature(_DistinctStream, () => ({
    __proto__: dart.getFields(_DistinctStream.__proto__),
    [_equals]: dart.finalFieldType(dart.nullable(dart.fnType(core.bool, [T, T])))
  }));
  return _DistinctStream;
});
async._DistinctStream = async._DistinctStream$();
dart.defineLazy(async._DistinctStream, {
  /*async._DistinctStream._SENTINEL*/get _SENTINEL() {
    return new core.Object.new();
  }
}, false);
dart.addTypeTests(async._DistinctStream, _is__DistinctStream_default);
const _is__EventSinkWrapper_default = Symbol('_is__EventSinkWrapper_default');
async._EventSinkWrapper$ = dart.generic(T => {
  class _EventSinkWrapper extends core.Object {
    add(data) {
      T.as(data);
      this[_sink$][_add](data);
    }
    addError(error, stackTrace = null) {
      let t112;
      if (error == null) dart.nullFailed(L69, 18, 24, "error");
      this[_sink$][_addError](error, (t112 = stackTrace, t112 == null ? async.AsyncError.defaultStackTrace(error) : t112));
    }
    close() {
      this[_sink$][_close]();
    }
  }
  (_EventSinkWrapper.new = function(_sink) {
    if (_sink == null) dart.nullFailed(L69, 12, 26, "_sink");
    this[_sink$] = _sink;
    ;
  }).prototype = _EventSinkWrapper.prototype;
  dart.addTypeTests(_EventSinkWrapper);
  _EventSinkWrapper.prototype[_is__EventSinkWrapper_default] = true;
  dart.addTypeCaches(_EventSinkWrapper);
  _EventSinkWrapper[dart.implements] = () => [async.EventSink$(T)];
  dart.setMethodSignature(_EventSinkWrapper, () => ({
    __proto__: dart.getMethods(_EventSinkWrapper.__proto__),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
    close: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(_EventSinkWrapper, L29);
  dart.setFieldSignature(_EventSinkWrapper, () => ({
    __proto__: dart.getFields(_EventSinkWrapper.__proto__),
    [_sink$]: dart.fieldType(async._EventSink$(T))
  }));
  return _EventSinkWrapper;
});
async._EventSinkWrapper = async._EventSinkWrapper$();
dart.addTypeTests(async._EventSinkWrapper, _is__EventSinkWrapper_default);
var ___SinkTransformerStreamSubscription__transformerSink = dart.privateName(async, "_#_SinkTransformerStreamSubscription#_transformerSink");
var _transformerSink = dart.privateName(async, "_transformerSink");
const _is__SinkTransformerStreamSubscription_default = Symbol('_is__SinkTransformerStreamSubscription_default');
async._SinkTransformerStreamSubscription$ = dart.generic((S, T) => {
  var _EventSinkWrapperOfT = () => (_EventSinkWrapperOfT = dart.constFn(async._EventSinkWrapper$(T)))();
  class _SinkTransformerStreamSubscription extends async._BufferingStreamSubscription$(T) {
    get [_transformerSink]() {
      let t112;
      t112 = this[___SinkTransformerStreamSubscription__transformerSink];
      return t112 == null ? dart.throw(new _internal.LateInitializationErrorImpl.new("Field '_transformerSink' has not been initialized.")) : t112;
    }
    set [_transformerSink](t112) {
      if (t112 == null) dart.nullFailed(L69, 37, 21, "null");
      this[___SinkTransformerStreamSubscription__transformerSink] = t112;
    }
    [_add](data) {
      if (dart.test(this[_isClosed])) {
        dart.throw(new core.StateError.new("Stream is already closed"));
      }
      super[_add](data);
    }
    [_addError](error, stackTrace) {
      if (error == null) dart.nullFailed(L69, 79, 25, "error");
      if (stackTrace == null) dart.nullFailed(L69, 79, 43, "stackTrace");
      if (dart.test(this[_isClosed])) {
        dart.throw(new core.StateError.new("Stream is already closed"));
      }
      super[_addError](error, stackTrace);
    }
    [_close]() {
      if (dart.test(this[_isClosed])) {
        dart.throw(new core.StateError.new("Stream is already closed"));
      }
      super[_close]();
    }
    [_onPause]() {
      let t113;
      t113 = this[_subscription];
      t113 == null ? null : t113.pause();
    }
    [_onResume]() {
      let t113;
      t113 = this[_subscription];
      t113 == null ? null : t113.resume();
    }
    [_onCancel]() {
      let subscription = this[_subscription];
      if (subscription != null) {
        this[_subscription] = null;
        return subscription.cancel();
      }
      return null;
    }
    [_handleData$](data) {
      S.as(data);
      try {
        this[_transformerSink].add(data);
      } catch (e$) {
        let e = dart.getThrown(e$);
        let s = dart.stackTrace(e$);
        if (core.Object.is(e)) {
          this[_addError](e, s);
        } else
          throw e$;
      }
    }
    [_handleError$](error, stackTrace) {
      if (error == null) dart.nullFailed(L69, 127, 28, "error");
      if (stackTrace == null) dart.nullFailed(L69, 127, 46, "stackTrace");
      try {
        this[_transformerSink].addError(error, stackTrace);
      } catch (e$) {
        let e = dart.getThrown(e$);
        let s = dart.stackTrace(e$);
        if (core.Object.is(e)) {
          if (core.identical(e, error)) {
            this[_addError](error, stackTrace);
          } else {
            this[_addError](e, s);
          }
        } else
          throw e$;
      }
    }
    [_handleDone$]() {
      try {
        this[_subscription] = null;
        this[_transformerSink].close();
      } catch (e$) {
        let e = dart.getThrown(e$);
        let s = dart.stackTrace(e$);
        if (core.Object.is(e)) {
          this[_addError](e, s);
        } else
          throw e$;
      }
    }
  }
  (_SinkTransformerStreamSubscription.new = function(source, mapper, onData, onError, onDone, cancelOnError) {
    if (source == null) dart.nullFailed(L69, 43, 17, "source");
    if (mapper == null) dart.nullFailed(L69, 44, 25, "mapper");
    if (cancelOnError == null) dart.nullFailed(L69, 48, 12, "cancelOnError");
    this[___SinkTransformerStreamSubscription__transformerSink] = null;
    this[_subscription] = null;
    _SinkTransformerStreamSubscription.__proto__.new.call(this, onData, onError, onDone, cancelOnError);
    this[_transformerSink] = mapper(new (_EventSinkWrapperOfT()).new(this));
    this[_subscription] = source.listen(dart.bind(this, _handleData$), {onError: dart.bind(this, _handleError$), onDone: dart.bind(this, _handleDone$)});
  }).prototype = _SinkTransformerStreamSubscription.prototype;
  dart.addTypeTests(_SinkTransformerStreamSubscription);
  _SinkTransformerStreamSubscription.prototype[_is__SinkTransformerStreamSubscription_default] = true;
  dart.addTypeCaches(_SinkTransformerStreamSubscription);
  dart.setMethodSignature(_SinkTransformerStreamSubscription, () => ({
    __proto__: dart.getMethods(_SinkTransformerStreamSubscription.__proto__),
    [_add]: dart.fnType(dart.void, [T]),
    [_handleData$]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    [_handleError$]: dart.fnType(dart.void, [core.Object, core.StackTrace]),
    [_handleDone$]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(_SinkTransformerStreamSubscription, () => ({
    __proto__: dart.getGetters(_SinkTransformerStreamSubscription.__proto__),
    [_transformerSink]: async.EventSink$(S)
  }));
  dart.setSetterSignature(_SinkTransformerStreamSubscription, () => ({
    __proto__: dart.getSetters(_SinkTransformerStreamSubscription.__proto__),
    [_transformerSink]: async.EventSink$(S)
  }));
  dart.setLibraryUri(_SinkTransformerStreamSubscription, L29);
  dart.setFieldSignature(_SinkTransformerStreamSubscription, () => ({
    __proto__: dart.getFields(_SinkTransformerStreamSubscription.__proto__),
    [___SinkTransformerStreamSubscription__transformerSink]: dart.fieldType(dart.nullable(async.EventSink$(S))),
    [_subscription]: dart.fieldType(dart.nullable(async.StreamSubscription$(S)))
  }));
  return _SinkTransformerStreamSubscription;
});
async._SinkTransformerStreamSubscription = async._SinkTransformerStreamSubscription$();
dart.addTypeTests(async._SinkTransformerStreamSubscription, _is__SinkTransformerStreamSubscription_default);
var _sinkMapper$ = dart.privateName(async, "_sinkMapper");
const _is__StreamSinkTransformer_default = Symbol('_is__StreamSinkTransformer_default');
var _sinkMapper$0 = dart.privateName(async, "_StreamSinkTransformer._sinkMapper");
async._StreamSinkTransformer$ = dart.generic((S, T) => {
  var StreamOfS = () => (StreamOfS = dart.constFn(async.Stream$(S)))();
  var _BoundSinkStreamOfS$T = () => (_BoundSinkStreamOfS$T = dart.constFn(async._BoundSinkStream$(S, T)))();
  class _StreamSinkTransformer extends async.StreamTransformerBase$(S, T) {
    get [_sinkMapper$]() {
      return this[_sinkMapper$0];
    }
    set [_sinkMapper$](value) {
      super[_sinkMapper$] = value;
    }
    bind(stream) {
      StreamOfS().as(stream);
      if (stream == null) dart.nullFailed(L69, 163, 28, "stream");
      return new (_BoundSinkStreamOfS$T()).new(stream, this[_sinkMapper$]);
    }
  }
  (_StreamSinkTransformer.new = function(_sinkMapper) {
    if (_sinkMapper == null) dart.nullFailed(L69, 161, 37, "_sinkMapper");
    this[_sinkMapper$0] = _sinkMapper;
    _StreamSinkTransformer.__proto__.new.call(this);
    ;
  }).prototype = _StreamSinkTransformer.prototype;
  dart.addTypeTests(_StreamSinkTransformer);
  _StreamSinkTransformer.prototype[_is__StreamSinkTransformer_default] = true;
  dart.addTypeCaches(_StreamSinkTransformer);
  dart.setMethodSignature(_StreamSinkTransformer, () => ({
    __proto__: dart.getMethods(_StreamSinkTransformer.__proto__),
    bind: dart.fnType(async.Stream$(T), [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(_StreamSinkTransformer, L29);
  dart.setFieldSignature(_StreamSinkTransformer, () => ({
    __proto__: dart.getFields(_StreamSinkTransformer.__proto__),
    [_sinkMapper$]: dart.finalFieldType(dart.fnType(async.EventSink$(S), [async.EventSink$(T)]))
  }));
  return _StreamSinkTransformer;
});
async._StreamSinkTransformer = async._StreamSinkTransformer$();
dart.addTypeTests(async._StreamSinkTransformer, _is__StreamSinkTransformer_default);
const _is__BoundSinkStream_default = Symbol('_is__BoundSinkStream_default');
async._BoundSinkStream$ = dart.generic((S, T) => {
  var _SinkTransformerStreamSubscriptionOfS$T = () => (_SinkTransformerStreamSubscriptionOfS$T = dart.constFn(async._SinkTransformerStreamSubscription$(S, T)))();
  class _BoundSinkStream extends async.Stream$(T) {
    get isBroadcast() {
      return this[_stream$].isBroadcast;
    }
    listen(onData, opts) {
      let t116;
      let onError = opts && 'onError' in opts ? opts.onError : null;
      let onDone = opts && 'onDone' in opts ? opts.onDone : null;
      let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
      let subscription = new (_SinkTransformerStreamSubscriptionOfS$T()).new(this[_stream$], this[_sinkMapper$], onData, onError, onDone, (t116 = cancelOnError, t116 == null ? false : t116));
      return subscription;
    }
  }
  (_BoundSinkStream.new = function(_stream, _sinkMapper) {
    if (_stream == null) dart.nullFailed(L69, 180, 25, "_stream");
    if (_sinkMapper == null) dart.nullFailed(L69, 180, 39, "_sinkMapper");
    this[_stream$] = _stream;
    this[_sinkMapper$] = _sinkMapper;
    _BoundSinkStream.__proto__.new.call(this);
    ;
  }).prototype = _BoundSinkStream.prototype;
  dart.addTypeTests(_BoundSinkStream);
  _BoundSinkStream.prototype[_is__BoundSinkStream_default] = true;
  dart.addTypeCaches(_BoundSinkStream);
  dart.setMethodSignature(_BoundSinkStream, () => ({
    __proto__: dart.getMethods(_BoundSinkStream.__proto__),
    listen: dart.fnType(async.StreamSubscription$(T), [dart.nullable(dart.fnType(dart.void, [T]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {})
  }));
  dart.setLibraryUri(_BoundSinkStream, L29);
  dart.setFieldSignature(_BoundSinkStream, () => ({
    __proto__: dart.getFields(_BoundSinkStream.__proto__),
    [_sinkMapper$]: dart.finalFieldType(dart.fnType(async.EventSink$(S), [async.EventSink$(T)])),
    [_stream$]: dart.finalFieldType(async.Stream$(S))
  }));
  return _BoundSinkStream;
});
async._BoundSinkStream = async._BoundSinkStream$();
dart.addTypeTests(async._BoundSinkStream, _is__BoundSinkStream_default);
const _is__HandlerEventSink_default = Symbol('_is__HandlerEventSink_default');
async._HandlerEventSink$ = dart.generic((S, T) => {
  class _HandlerEventSink extends core.Object {
    add(data) {
      S.as(data);
      let sink = this[_sink$];
      if (sink == null) {
        dart.throw(new core.StateError.new("Sink is closed"));
      }
      let handleData = this[_handleData$];
      if (handleData != null) {
        handleData(data, sink);
      } else {
        sink.add(T.as(data));
      }
    }
    addError(error, stackTrace = null) {
      if (error == null) dart.nullFailed(L69, 231, 24, "error");
      core.ArgumentError.checkNotNull(core.Object, error, "error");
      let sink = this[_sink$];
      if (sink == null) {
        dart.throw(new core.StateError.new("Sink is closed"));
      }
      let handleError = this[_handleError$];
      stackTrace == null ? stackTrace = async.AsyncError.defaultStackTrace(error) : null;
      if (handleError != null) {
        handleError(error, stackTrace, sink);
      } else {
        sink.addError(error, stackTrace);
      }
    }
    close() {
      let sink = this[_sink$];
      if (sink == null) return;
      this[_sink$] = null;
      let handleDone = this[_handleDone$];
      if (handleDone != null) {
        handleDone(sink);
      } else {
        sink.close();
      }
    }
  }
  (_HandlerEventSink.new = function(_handleData, _handleError, _handleDone, _sink) {
    if (_sink == null) dart.nullFailed(L69, 216, 25, "_sink");
    this[_handleData$] = _handleData;
    this[_handleError$] = _handleError;
    this[_handleDone$] = _handleDone;
    this[_sink$] = _sink;
    ;
  }).prototype = _HandlerEventSink.prototype;
  dart.addTypeTests(_HandlerEventSink);
  _HandlerEventSink.prototype[_is__HandlerEventSink_default] = true;
  dart.addTypeCaches(_HandlerEventSink);
  _HandlerEventSink[dart.implements] = () => [async.EventSink$(S)];
  dart.setMethodSignature(_HandlerEventSink, () => ({
    __proto__: dart.getMethods(_HandlerEventSink.__proto__),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
    close: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(_HandlerEventSink, L29);
  dart.setFieldSignature(_HandlerEventSink, () => ({
    __proto__: dart.getFields(_HandlerEventSink.__proto__),
    [_handleData$]: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [S, async.EventSink$(T)]))),
    [_handleError$]: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.Object, core.StackTrace, async.EventSink$(T)]))),
    [_handleDone$]: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [async.EventSink$(T)]))),
    [_sink$]: dart.fieldType(dart.nullable(async.EventSink$(T)))
  }));
  return _HandlerEventSink;
});
async._HandlerEventSink = async._HandlerEventSink$();
dart.addTypeTests(async._HandlerEventSink, _is__HandlerEventSink_default);
const _is__StreamHandlerTransformer_default = Symbol('_is__StreamHandlerTransformer_default');
async._StreamHandlerTransformer$ = dart.generic((S, T) => {
  var _HandlerEventSinkOfS$T = () => (_HandlerEventSinkOfS$T = dart.constFn(async._HandlerEventSink$(S, T)))();
  var EventSinkOfTTo_HandlerEventSinkOfS$T = () => (EventSinkOfTTo_HandlerEventSinkOfS$T = dart.constFn(dart.fnType(_HandlerEventSinkOfS$T(), [EventSinkOfT()])))();
  var StreamOfS = () => (StreamOfS = dart.constFn(async.Stream$(S)))();
  var EventSinkOfT = () => (EventSinkOfT = dart.constFn(async.EventSink$(T)))();
  class _StreamHandlerTransformer extends async._StreamSinkTransformer$(S, T) {
    bind(stream) {
      StreamOfS().as(stream);
      if (stream == null) dart.nullFailed(L69, 275, 28, "stream");
      return super.bind(stream);
    }
  }
  (_StreamHandlerTransformer.new = function(opts) {
    let handleData = opts && 'handleData' in opts ? opts.handleData : null;
    let handleError = opts && 'handleError' in opts ? opts.handleError : null;
    let handleDone = opts && 'handleDone' in opts ? opts.handleDone : null;
    _StreamHandlerTransformer.__proto__.new.call(this, dart.fn(outputSink => {
      if (outputSink == null) dart.nullFailed(L69, 270, 29, "outputSink");
      return new (_HandlerEventSinkOfS$T()).new(handleData, handleError, handleDone, outputSink);
    }, EventSinkOfTTo_HandlerEventSinkOfS$T()));
    ;
  }).prototype = _StreamHandlerTransformer.prototype;
  dart.addTypeTests(_StreamHandlerTransformer);
  _StreamHandlerTransformer.prototype[_is__StreamHandlerTransformer_default] = true;
  dart.addTypeCaches(_StreamHandlerTransformer);
  dart.setLibraryUri(_StreamHandlerTransformer, L29);
  return _StreamHandlerTransformer;
});
async._StreamHandlerTransformer = async._StreamHandlerTransformer$();
dart.addTypeTests(async._StreamHandlerTransformer, _is__StreamHandlerTransformer_default);
var _bind$ = dart.privateName(async, "_bind");
const _is__StreamBindTransformer_default = Symbol('_is__StreamBindTransformer_default');
async._StreamBindTransformer$ = dart.generic((S, T) => {
  var StreamOfS = () => (StreamOfS = dart.constFn(async.Stream$(S)))();
  class _StreamBindTransformer extends async.StreamTransformerBase$(S, T) {
    bind(stream) {
      let t116;
      StreamOfS().as(stream);
      if (stream == null) dart.nullFailed(L69, 287, 28, "stream");
      t116 = stream;
      return this[_bind$](t116);
    }
  }
  (_StreamBindTransformer.new = function(_bind) {
    if (_bind == null) dart.nullFailed(L69, 285, 31, "_bind");
    this[_bind$] = _bind;
    _StreamBindTransformer.__proto__.new.call(this);
    ;
  }).prototype = _StreamBindTransformer.prototype;
  dart.addTypeTests(_StreamBindTransformer);
  _StreamBindTransformer.prototype[_is__StreamBindTransformer_default] = true;
  dart.addTypeCaches(_StreamBindTransformer);
  dart.setMethodSignature(_StreamBindTransformer, () => ({
    __proto__: dart.getMethods(_StreamBindTransformer.__proto__),
    bind: dart.fnType(async.Stream$(T), [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(_StreamBindTransformer, L29);
  dart.setFieldSignature(_StreamBindTransformer, () => ({
    __proto__: dart.getFields(_StreamBindTransformer.__proto__),
    [_bind$]: dart.finalFieldType(dart.fnType(async.Stream$(T), [async.Stream$(S)]))
  }));
  return _StreamBindTransformer;
});
async._StreamBindTransformer = async._StreamBindTransformer$();
dart.addTypeTests(async._StreamBindTransformer, _is__StreamBindTransformer_default);
const _is__StreamSubscriptionTransformer_default = Symbol('_is__StreamSubscriptionTransformer_default');
var _onListen$0 = dart.privateName(async, "_StreamSubscriptionTransformer._onListen");
async._StreamSubscriptionTransformer$ = dart.generic((S, T) => {
  var StreamOfS = () => (StreamOfS = dart.constFn(async.Stream$(S)))();
  var _BoundSubscriptionStreamOfS$T = () => (_BoundSubscriptionStreamOfS$T = dart.constFn(async._BoundSubscriptionStream$(S, T)))();
  class _StreamSubscriptionTransformer extends async.StreamTransformerBase$(S, T) {
    get [_onListen$]() {
      return this[_onListen$0];
    }
    set [_onListen$](value) {
      super[_onListen$] = value;
    }
    bind(stream) {
      StreamOfS().as(stream);
      if (stream == null) dart.nullFailed(L69, 311, 28, "stream");
      return new (_BoundSubscriptionStreamOfS$T()).new(stream, this[_onListen$]);
    }
  }
  (_StreamSubscriptionTransformer.new = function(_onListen) {
    if (_onListen == null) dart.nullFailed(L69, 309, 45, "_onListen");
    this[_onListen$0] = _onListen;
    _StreamSubscriptionTransformer.__proto__.new.call(this);
    ;
  }).prototype = _StreamSubscriptionTransformer.prototype;
  dart.addTypeTests(_StreamSubscriptionTransformer);
  _StreamSubscriptionTransformer.prototype[_is__StreamSubscriptionTransformer_default] = true;
  dart.addTypeCaches(_StreamSubscriptionTransformer);
  dart.setMethodSignature(_StreamSubscriptionTransformer, () => ({
    __proto__: dart.getMethods(_StreamSubscriptionTransformer.__proto__),
    bind: dart.fnType(async.Stream$(T), [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(_StreamSubscriptionTransformer, L29);
  dart.setFieldSignature(_StreamSubscriptionTransformer, () => ({
    __proto__: dart.getFields(_StreamSubscriptionTransformer.__proto__),
    [_onListen$]: dart.finalFieldType(dart.fnType(async.StreamSubscription$(T), [async.Stream$(S), core.bool]))
  }));
  return _StreamSubscriptionTransformer;
});
async._StreamSubscriptionTransformer = async._StreamSubscriptionTransformer$();
dart.addTypeTests(async._StreamSubscriptionTransformer, _is__StreamSubscriptionTransformer_default);
const _is__BoundSubscriptionStream_default = Symbol('_is__BoundSubscriptionStream_default');
async._BoundSubscriptionStream$ = dart.generic((S, T) => {
  class _BoundSubscriptionStream extends async.Stream$(T) {
    get isBroadcast() {
      return this[_stream$].isBroadcast;
    }
    listen(onData, opts) {
      let t116, t117, t116$;
      let onError = opts && 'onError' in opts ? opts.onError : null;
      let onDone = opts && 'onDone' in opts ? opts.onDone : null;
      let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
      let result = (t116$ = this[_stream$], t117 = (t116 = cancelOnError, t116 == null ? false : t116), this[_onListen$](t116$, t117));
      result.onData(onData);
      result.onError(onError);
      result.onDone(onDone);
      return result;
    }
  }
  (_BoundSubscriptionStream.new = function(_stream, _onListen) {
    if (_stream == null) dart.nullFailed(L69, 328, 33, "_stream");
    if (_onListen == null) dart.nullFailed(L69, 328, 47, "_onListen");
    this[_stream$] = _stream;
    this[_onListen$] = _onListen;
    _BoundSubscriptionStream.__proto__.new.call(this);
    ;
  }).prototype = _BoundSubscriptionStream.prototype;
  dart.addTypeTests(_BoundSubscriptionStream);
  _BoundSubscriptionStream.prototype[_is__BoundSubscriptionStream_default] = true;
  dart.addTypeCaches(_BoundSubscriptionStream);
  dart.setMethodSignature(_BoundSubscriptionStream, () => ({
    __proto__: dart.getMethods(_BoundSubscriptionStream.__proto__),
    listen: dart.fnType(async.StreamSubscription$(T), [dart.nullable(dart.fnType(dart.void, [T]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {})
  }));
  dart.setLibraryUri(_BoundSubscriptionStream, L29);
  dart.setFieldSignature(_BoundSubscriptionStream, () => ({
    __proto__: dart.getFields(_BoundSubscriptionStream.__proto__),
    [_onListen$]: dart.finalFieldType(dart.fnType(async.StreamSubscription$(T), [async.Stream$(S), core.bool])),
    [_stream$]: dart.finalFieldType(async.Stream$(S))
  }));
  return _BoundSubscriptionStream;
});
async._BoundSubscriptionStream = async._BoundSubscriptionStream$();
dart.addTypeTests(async._BoundSubscriptionStream, _is__BoundSubscriptionStream_default);
async.Timer = class Timer extends core.Object {
  static new(duration, callback) {
    if (duration == null) dart.nullFailed(L70, 45, 26, "duration");
    if (callback == null) dart.nullFailed(L70, 45, 52, "callback");
    if (dart.equals(async.Zone.current, async.Zone.root)) {
      return async.Zone.current.createTimer(duration, callback);
    }
    return async.Zone.current.createTimer(duration, async.Zone.current.bindCallbackGuarded(callback));
  }
  static periodic(duration, callback) {
    if (duration == null) dart.nullFailed(L70, 73, 35, "duration");
    if (callback == null) dart.nullFailed(L70, 73, 50, "callback");
    if (dart.equals(async.Zone.current, async.Zone.root)) {
      return async.Zone.current.createPeriodicTimer(duration, callback);
    }
    let boundCallback = async.Zone.current.bindUnaryCallbackGuarded(async.Timer, callback);
    return async.Zone.current.createPeriodicTimer(duration, boundCallback);
  }
  static run(callback) {
    if (callback == null) dart.nullFailed(L70, 88, 35, "callback");
    async.Timer.new(core.Duration.zero, callback);
  }
  static _createTimer(duration, callback) {
    if (duration == null) dart.nullFailed(L60, 183, 38, "duration");
    if (callback == null) dart.nullFailed(L60, 183, 64, "callback");
    let milliseconds = duration.inMilliseconds;
    if (dart.notNull(milliseconds) < 0) milliseconds = 0;
    return new _isolate_helper.TimerImpl.new(milliseconds, callback);
  }
  static _createPeriodicTimer(duration, callback) {
    if (duration == null) dart.nullFailed(L60, 191, 16, "duration");
    if (callback == null) dart.nullFailed(L60, 191, 31, "callback");
    let milliseconds = duration.inMilliseconds;
    if (dart.notNull(milliseconds) < 0) milliseconds = 0;
    return new _isolate_helper.TimerImpl.periodic(milliseconds, callback);
  }
};
(async.Timer[dart.mixinNew] = function() {
}).prototype = async.Timer.prototype;
dart.addTypeTests(async.Timer);
dart.addTypeCaches(async.Timer);
dart.setLibraryUri(async.Timer, L29);
var error$ = dart.privateName(async, "AsyncError.error");
var stackTrace$ = dart.privateName(async, "AsyncError.stackTrace");
async.AsyncError = class AsyncError extends core.Object {
  get error() {
    return this[error$];
  }
  set error(value) {
    super.error = value;
  }
  get stackTrace() {
    return this[stackTrace$];
  }
  set stackTrace(value) {
    super.stackTrace = value;
  }
  static defaultStackTrace(error) {
    if (error == null) dart.nullFailed(L71, 55, 46, "error");
    if (core.Error.is(error)) {
      let stackTrace = error[$stackTrace];
      if (stackTrace != null) return stackTrace;
    }
    return core.StackTrace.empty;
  }
  toString() {
    return dart.str(this.error);
  }
};
(async.AsyncError.new = function(error, stackTrace) {
  let t116;
  if (error == null) dart.nullFailed(L71, 44, 19, "error");
  this[error$] = error;
  this[stackTrace$] = (t116 = stackTrace, t116 == null ? async.AsyncError.defaultStackTrace(error) : t116);
  core.ArgumentError.checkNotNull(core.Object, this.error, "error");
}).prototype = async.AsyncError.prototype;
dart.addTypeTests(async.AsyncError);
dart.addTypeCaches(async.AsyncError);
async.AsyncError[dart.implements] = () => [core.Error];
dart.setLibraryUri(async.AsyncError, L29);
dart.setFieldSignature(async.AsyncError, () => ({
  __proto__: dart.getFields(async.AsyncError.__proto__),
  error: dart.finalFieldType(core.Object),
  stackTrace: dart.finalFieldType(core.StackTrace)
}));
dart.defineExtensionMethods(async.AsyncError, ['toString']);
dart.defineExtensionAccessors(async.AsyncError, ['stackTrace']);
const _is__ZoneFunction_default = Symbol('_is__ZoneFunction_default');
var zone$ = dart.privateName(async, "_ZoneFunction.zone");
var function$0 = dart.privateName(async, "_ZoneFunction.function");
async._ZoneFunction$ = dart.generic(T => {
  class _ZoneFunction extends core.Object {
    get zone() {
      return this[zone$];
    }
    set zone(value) {
      super.zone = value;
    }
    get function() {
      return this[function$0];
    }
    set function(value) {
      super.function = value;
    }
  }
  (_ZoneFunction.new = function(zone, $function) {
    if (zone == null) dart.nullFailed(L71, 69, 28, "zone");
    if ($function == null) dart.nullFailed(L71, 69, 39, "function");
    this[zone$] = zone;
    this[function$0] = $function;
    ;
  }).prototype = _ZoneFunction.prototype;
  dart.addTypeTests(_ZoneFunction);
  _ZoneFunction.prototype[_is__ZoneFunction_default] = true;
  dart.addTypeCaches(_ZoneFunction);
  dart.setLibraryUri(_ZoneFunction, L29);
  dart.setFieldSignature(_ZoneFunction, () => ({
    __proto__: dart.getFields(_ZoneFunction.__proto__),
    zone: dart.finalFieldType(async._Zone),
    function: dart.finalFieldType(T)
  }));
  return _ZoneFunction;
});
async._ZoneFunction = async._ZoneFunction$();
dart.addTypeTests(async._ZoneFunction, _is__ZoneFunction_default);
var zone$0 = dart.privateName(async, "_RunNullaryZoneFunction.zone");
var function$1 = dart.privateName(async, "_RunNullaryZoneFunction.function");
async._RunNullaryZoneFunction = class _RunNullaryZoneFunction extends core.Object {
  get zone() {
    return this[zone$0];
  }
  set zone(value) {
    super.zone = value;
  }
  get function() {
    return this[function$1];
  }
  set function(value) {
    super.function = value;
  }
};
(async._RunNullaryZoneFunction.new = function(zone, $function) {
  if (zone == null) dart.nullFailed(L71, 75, 38, "zone");
  if ($function == null) dart.nullFailed(L71, 75, 49, "function");
  this[zone$0] = zone;
  this[function$1] = $function;
  ;
}).prototype = async._RunNullaryZoneFunction.prototype;
dart.addTypeTests(async._RunNullaryZoneFunction);
dart.addTypeCaches(async._RunNullaryZoneFunction);
dart.setLibraryUri(async._RunNullaryZoneFunction, L29);
dart.setFieldSignature(async._RunNullaryZoneFunction, () => ({
  __proto__: dart.getFields(async._RunNullaryZoneFunction.__proto__),
  zone: dart.finalFieldType(async._Zone),
  function: dart.finalFieldType(dart.gFnType(R => [R, [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [])]], R => [dart.nullable(core.Object)]))
}));
var zone$1 = dart.privateName(async, "_RunUnaryZoneFunction.zone");
var function$2 = dart.privateName(async, "_RunUnaryZoneFunction.function");
async._RunUnaryZoneFunction = class _RunUnaryZoneFunction extends core.Object {
  get zone() {
    return this[zone$1];
  }
  set zone(value) {
    super.zone = value;
  }
  get function() {
    return this[function$2];
  }
  set function(value) {
    super.function = value;
  }
};
(async._RunUnaryZoneFunction.new = function(zone, $function) {
  if (zone == null) dart.nullFailed(L71, 81, 36, "zone");
  if ($function == null) dart.nullFailed(L71, 81, 47, "function");
  this[zone$1] = zone;
  this[function$2] = $function;
  ;
}).prototype = async._RunUnaryZoneFunction.prototype;
dart.addTypeTests(async._RunUnaryZoneFunction);
dart.addTypeCaches(async._RunUnaryZoneFunction);
dart.setLibraryUri(async._RunUnaryZoneFunction, L29);
dart.setFieldSignature(async._RunUnaryZoneFunction, () => ({
  __proto__: dart.getFields(async._RunUnaryZoneFunction.__proto__),
  zone: dart.finalFieldType(async._Zone),
  function: dart.finalFieldType(dart.gFnType((R, T) => [R, [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [T]), T]], (R, T) => [dart.nullable(core.Object), dart.nullable(core.Object)]))
}));
var zone$2 = dart.privateName(async, "_RunBinaryZoneFunction.zone");
var function$3 = dart.privateName(async, "_RunBinaryZoneFunction.function");
async._RunBinaryZoneFunction = class _RunBinaryZoneFunction extends core.Object {
  get zone() {
    return this[zone$2];
  }
  set zone(value) {
    super.zone = value;
  }
  get function() {
    return this[function$3];
  }
  set function(value) {
    super.function = value;
  }
};
(async._RunBinaryZoneFunction.new = function(zone, $function) {
  if (zone == null) dart.nullFailed(L71, 87, 37, "zone");
  if ($function == null) dart.nullFailed(L71, 87, 48, "function");
  this[zone$2] = zone;
  this[function$3] = $function;
  ;
}).prototype = async._RunBinaryZoneFunction.prototype;
dart.addTypeTests(async._RunBinaryZoneFunction);
dart.addTypeCaches(async._RunBinaryZoneFunction);
dart.setLibraryUri(async._RunBinaryZoneFunction, L29);
dart.setFieldSignature(async._RunBinaryZoneFunction, () => ({
  __proto__: dart.getFields(async._RunBinaryZoneFunction.__proto__),
  zone: dart.finalFieldType(async._Zone),
  function: dart.finalFieldType(dart.gFnType((R, T1, T2) => [R, [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [T1, T2]), T1, T2]], (R, T1, T2) => [dart.nullable(core.Object), dart.nullable(core.Object), dart.nullable(core.Object)]))
}));
var zone$3 = dart.privateName(async, "_RegisterNullaryZoneFunction.zone");
var function$4 = dart.privateName(async, "_RegisterNullaryZoneFunction.function");
async._RegisterNullaryZoneFunction = class _RegisterNullaryZoneFunction extends core.Object {
  get zone() {
    return this[zone$3];
  }
  set zone(value) {
    super.zone = value;
  }
  get function() {
    return this[function$4];
  }
  set function(value) {
    super.function = value;
  }
};
(async._RegisterNullaryZoneFunction.new = function(zone, $function) {
  if (zone == null) dart.nullFailed(L71, 93, 43, "zone");
  if ($function == null) dart.nullFailed(L71, 93, 54, "function");
  this[zone$3] = zone;
  this[function$4] = $function;
  ;
}).prototype = async._RegisterNullaryZoneFunction.prototype;
dart.addTypeTests(async._RegisterNullaryZoneFunction);
dart.addTypeCaches(async._RegisterNullaryZoneFunction);
dart.setLibraryUri(async._RegisterNullaryZoneFunction, L29);
dart.setFieldSignature(async._RegisterNullaryZoneFunction, () => ({
  __proto__: dart.getFields(async._RegisterNullaryZoneFunction.__proto__),
  zone: dart.finalFieldType(async._Zone),
  function: dart.finalFieldType(dart.gFnType(R => [dart.fnType(R, []), [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [])]], R => [dart.nullable(core.Object)]))
}));
var zone$4 = dart.privateName(async, "_RegisterUnaryZoneFunction.zone");
var function$5 = dart.privateName(async, "_RegisterUnaryZoneFunction.function");
async._RegisterUnaryZoneFunction = class _RegisterUnaryZoneFunction extends core.Object {
  get zone() {
    return this[zone$4];
  }
  set zone(value) {
    super.zone = value;
  }
  get function() {
    return this[function$5];
  }
  set function(value) {
    super.function = value;
  }
};
(async._RegisterUnaryZoneFunction.new = function(zone, $function) {
  if (zone == null) dart.nullFailed(L71, 99, 41, "zone");
  if ($function == null) dart.nullFailed(L71, 99, 52, "function");
  this[zone$4] = zone;
  this[function$5] = $function;
  ;
}).prototype = async._RegisterUnaryZoneFunction.prototype;
dart.addTypeTests(async._RegisterUnaryZoneFunction);
dart.addTypeCaches(async._RegisterUnaryZoneFunction);
dart.setLibraryUri(async._RegisterUnaryZoneFunction, L29);
dart.setFieldSignature(async._RegisterUnaryZoneFunction, () => ({
  __proto__: dart.getFields(async._RegisterUnaryZoneFunction.__proto__),
  zone: dart.finalFieldType(async._Zone),
  function: dart.finalFieldType(dart.gFnType((R, T) => [dart.fnType(R, [T]), [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [T])]], (R, T) => [dart.nullable(core.Object), dart.nullable(core.Object)]))
}));
var zone$5 = dart.privateName(async, "_RegisterBinaryZoneFunction.zone");
var function$6 = dart.privateName(async, "_RegisterBinaryZoneFunction.function");
async._RegisterBinaryZoneFunction = class _RegisterBinaryZoneFunction extends core.Object {
  get zone() {
    return this[zone$5];
  }
  set zone(value) {
    super.zone = value;
  }
  get function() {
    return this[function$6];
  }
  set function(value) {
    super.function = value;
  }
};
(async._RegisterBinaryZoneFunction.new = function(zone, $function) {
  if (zone == null) dart.nullFailed(L71, 105, 42, "zone");
  if ($function == null) dart.nullFailed(L71, 105, 53, "function");
  this[zone$5] = zone;
  this[function$6] = $function;
  ;
}).prototype = async._RegisterBinaryZoneFunction.prototype;
dart.addTypeTests(async._RegisterBinaryZoneFunction);
dart.addTypeCaches(async._RegisterBinaryZoneFunction);
dart.setLibraryUri(async._RegisterBinaryZoneFunction, L29);
dart.setFieldSignature(async._RegisterBinaryZoneFunction, () => ({
  __proto__: dart.getFields(async._RegisterBinaryZoneFunction.__proto__),
  zone: dart.finalFieldType(async._Zone),
  function: dart.finalFieldType(dart.gFnType((R, T1, T2) => [dart.fnType(R, [T1, T2]), [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [T1, T2])]], (R, T1, T2) => [dart.nullable(core.Object), dart.nullable(core.Object), dart.nullable(core.Object)]))
}));
async.ZoneSpecification = class ZoneSpecification extends core.Object {
  static from(other, opts) {
    let t116, t116$, t116$0, t116$1, t116$2, t116$3, t116$4, t116$5, t116$6, t116$7, t116$8, t116$9, t116$10;
    if (other == null) dart.nullFailed(L71, 150, 52, "other");
    let handleUncaughtError = opts && 'handleUncaughtError' in opts ? opts.handleUncaughtError : null;
    let run = opts && 'run' in opts ? opts.run : null;
    let runUnary = opts && 'runUnary' in opts ? opts.runUnary : null;
    let runBinary = opts && 'runBinary' in opts ? opts.runBinary : null;
    let registerCallback = opts && 'registerCallback' in opts ? opts.registerCallback : null;
    let registerUnaryCallback = opts && 'registerUnaryCallback' in opts ? opts.registerUnaryCallback : null;
    let registerBinaryCallback = opts && 'registerBinaryCallback' in opts ? opts.registerBinaryCallback : null;
    let errorCallback = opts && 'errorCallback' in opts ? opts.errorCallback : null;
    let scheduleMicrotask = opts && 'scheduleMicrotask' in opts ? opts.scheduleMicrotask : null;
    let createTimer = opts && 'createTimer' in opts ? opts.createTimer : null;
    let createPeriodicTimer = opts && 'createPeriodicTimer' in opts ? opts.createPeriodicTimer : null;
    let print = opts && 'print' in opts ? opts.print : null;
    let fork = opts && 'fork' in opts ? opts.fork : null;
    return new async._ZoneSpecification.new({handleUncaughtError: (t116 = handleUncaughtError, t116 == null ? other.handleUncaughtError : t116), run: (t116$ = run, t116$ == null ? other.run : t116$), runUnary: (t116$0 = runUnary, t116$0 == null ? other.runUnary : t116$0), runBinary: (t116$1 = runBinary, t116$1 == null ? other.runBinary : t116$1), registerCallback: (t116$2 = registerCallback, t116$2 == null ? other.registerCallback : t116$2), registerUnaryCallback: (t116$3 = registerUnaryCallback, t116$3 == null ? other.registerUnaryCallback : t116$3), registerBinaryCallback: (t116$4 = registerBinaryCallback, t116$4 == null ? other.registerBinaryCallback : t116$4), errorCallback: (t116$5 = errorCallback, t116$5 == null ? other.errorCallback : t116$5), scheduleMicrotask: (t116$6 = scheduleMicrotask, t116$6 == null ? other.scheduleMicrotask : t116$6), createTimer: (t116$7 = createTimer, t116$7 == null ? other.createTimer : t116$7), createPeriodicTimer: (t116$8 = createPeriodicTimer, t116$8 == null ? other.createPeriodicTimer : t116$8), print: (t116$9 = print, t116$9 == null ? other.print : t116$9), fork: (t116$10 = fork, t116$10 == null ? other.fork : t116$10)});
  }
};
(async.ZoneSpecification[dart.mixinNew] = function() {
}).prototype = async.ZoneSpecification.prototype;
dart.addTypeTests(async.ZoneSpecification);
dart.addTypeCaches(async.ZoneSpecification);
dart.setLibraryUri(async.ZoneSpecification, L29);
var handleUncaughtError$ = dart.privateName(async, "_ZoneSpecification.handleUncaughtError");
var run$ = dart.privateName(async, "_ZoneSpecification.run");
var runUnary$ = dart.privateName(async, "_ZoneSpecification.runUnary");
var runBinary$ = dart.privateName(async, "_ZoneSpecification.runBinary");
var registerCallback$ = dart.privateName(async, "_ZoneSpecification.registerCallback");
var registerUnaryCallback$ = dart.privateName(async, "_ZoneSpecification.registerUnaryCallback");
var registerBinaryCallback$ = dart.privateName(async, "_ZoneSpecification.registerBinaryCallback");
var errorCallback$ = dart.privateName(async, "_ZoneSpecification.errorCallback");
var scheduleMicrotask$ = dart.privateName(async, "_ZoneSpecification.scheduleMicrotask");
var createTimer$ = dart.privateName(async, "_ZoneSpecification.createTimer");
var createPeriodicTimer$ = dart.privateName(async, "_ZoneSpecification.createPeriodicTimer");
var print$ = dart.privateName(async, "_ZoneSpecification.print");
var fork$ = dart.privateName(async, "_ZoneSpecification.fork");
async._ZoneSpecification = class _ZoneSpecification extends core.Object {
  get handleUncaughtError() {
    return this[handleUncaughtError$];
  }
  set handleUncaughtError(value) {
    super.handleUncaughtError = value;
  }
  get run() {
    return this[run$];
  }
  set run(value) {
    super.run = value;
  }
  get runUnary() {
    return this[runUnary$];
  }
  set runUnary(value) {
    super.runUnary = value;
  }
  get runBinary() {
    return this[runBinary$];
  }
  set runBinary(value) {
    super.runBinary = value;
  }
  get registerCallback() {
    return this[registerCallback$];
  }
  set registerCallback(value) {
    super.registerCallback = value;
  }
  get registerUnaryCallback() {
    return this[registerUnaryCallback$];
  }
  set registerUnaryCallback(value) {
    super.registerUnaryCallback = value;
  }
  get registerBinaryCallback() {
    return this[registerBinaryCallback$];
  }
  set registerBinaryCallback(value) {
    super.registerBinaryCallback = value;
  }
  get errorCallback() {
    return this[errorCallback$];
  }
  set errorCallback(value) {
    super.errorCallback = value;
  }
  get scheduleMicrotask() {
    return this[scheduleMicrotask$];
  }
  set scheduleMicrotask(value) {
    super.scheduleMicrotask = value;
  }
  get createTimer() {
    return this[createTimer$];
  }
  set createTimer(value) {
    super.createTimer = value;
  }
  get createPeriodicTimer() {
    return this[createPeriodicTimer$];
  }
  set createPeriodicTimer(value) {
    super.createPeriodicTimer = value;
  }
  get print() {
    return this[print$];
  }
  set print(value) {
    super.print = value;
  }
  get fork() {
    return this[fork$];
  }
  set fork(value) {
    super.fork = value;
  }
};
(async._ZoneSpecification.new = function(opts) {
  let handleUncaughtError = opts && 'handleUncaughtError' in opts ? opts.handleUncaughtError : null;
  let run = opts && 'run' in opts ? opts.run : null;
  let runUnary = opts && 'runUnary' in opts ? opts.runUnary : null;
  let runBinary = opts && 'runBinary' in opts ? opts.runBinary : null;
  let registerCallback = opts && 'registerCallback' in opts ? opts.registerCallback : null;
  let registerUnaryCallback = opts && 'registerUnaryCallback' in opts ? opts.registerUnaryCallback : null;
  let registerBinaryCallback = opts && 'registerBinaryCallback' in opts ? opts.registerBinaryCallback : null;
  let errorCallback = opts && 'errorCallback' in opts ? opts.errorCallback : null;
  let scheduleMicrotask = opts && 'scheduleMicrotask' in opts ? opts.scheduleMicrotask : null;
  let createTimer = opts && 'createTimer' in opts ? opts.createTimer : null;
  let createPeriodicTimer = opts && 'createPeriodicTimer' in opts ? opts.createPeriodicTimer : null;
  let print = opts && 'print' in opts ? opts.print : null;
  let fork = opts && 'fork' in opts ? opts.fork : null;
  this[handleUncaughtError$] = handleUncaughtError;
  this[run$] = run;
  this[runUnary$] = runUnary;
  this[runBinary$] = runBinary;
  this[registerCallback$] = registerCallback;
  this[registerUnaryCallback$] = registerUnaryCallback;
  this[registerBinaryCallback$] = registerBinaryCallback;
  this[errorCallback$] = errorCallback;
  this[scheduleMicrotask$] = scheduleMicrotask;
  this[createTimer$] = createTimer;
  this[createPeriodicTimer$] = createPeriodicTimer;
  this[print$] = print;
  this[fork$] = fork;
  ;
}).prototype = async._ZoneSpecification.prototype;
dart.addTypeTests(async._ZoneSpecification);
dart.addTypeCaches(async._ZoneSpecification);
async._ZoneSpecification[dart.implements] = () => [async.ZoneSpecification];
dart.setLibraryUri(async._ZoneSpecification, L29);
dart.setFieldSignature(async._ZoneSpecification, () => ({
  __proto__: dart.getFields(async._ZoneSpecification.__proto__),
  handleUncaughtError: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.Object, core.StackTrace]))),
  run: dart.finalFieldType(dart.nullable(dart.gFnType(R => [R, [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [])]], R => [dart.nullable(core.Object)]))),
  runUnary: dart.finalFieldType(dart.nullable(dart.gFnType((R, T) => [R, [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [T]), T]], (R, T) => [dart.nullable(core.Object), dart.nullable(core.Object)]))),
  runBinary: dart.finalFieldType(dart.nullable(dart.gFnType((R, T1, T2) => [R, [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [T1, T2]), T1, T2]], (R, T1, T2) => [dart.nullable(core.Object), dart.nullable(core.Object), dart.nullable(core.Object)]))),
  registerCallback: dart.finalFieldType(dart.nullable(dart.gFnType(R => [dart.fnType(R, []), [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [])]], R => [dart.nullable(core.Object)]))),
  registerUnaryCallback: dart.finalFieldType(dart.nullable(dart.gFnType((R, T) => [dart.fnType(R, [T]), [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [T])]], (R, T) => [dart.nullable(core.Object), dart.nullable(core.Object)]))),
  registerBinaryCallback: dart.finalFieldType(dart.nullable(dart.gFnType((R, T1, T2) => [dart.fnType(R, [T1, T2]), [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [T1, T2])]], (R, T1, T2) => [dart.nullable(core.Object), dart.nullable(core.Object), dart.nullable(core.Object)]))),
  errorCallback: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(async.AsyncError), [async.Zone, async.ZoneDelegate, async.Zone, core.Object, dart.nullable(core.StackTrace)]))),
  scheduleMicrotask: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(dart.void, [])]))),
  createTimer: dart.finalFieldType(dart.nullable(dart.fnType(async.Timer, [async.Zone, async.ZoneDelegate, async.Zone, core.Duration, dart.fnType(dart.void, [])]))),
  createPeriodicTimer: dart.finalFieldType(dart.nullable(dart.fnType(async.Timer, [async.Zone, async.ZoneDelegate, async.Zone, core.Duration, dart.fnType(dart.void, [async.Timer])]))),
  print: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String]))),
  fork: dart.finalFieldType(dart.nullable(dart.fnType(async.Zone, [async.Zone, async.ZoneDelegate, async.Zone, dart.nullable(async.ZoneSpecification), dart.nullable(core.Map$(dart.nullable(core.Object), dart.nullable(core.Object)))])))
}));
async.ZoneDelegate = class ZoneDelegate extends core.Object {};
(async.ZoneDelegate.new = function() {
  ;
}).prototype = async.ZoneDelegate.prototype;
dart.addTypeTests(async.ZoneDelegate);
dart.addTypeCaches(async.ZoneDelegate);
dart.setLibraryUri(async.ZoneDelegate, L29);
var C43;
async.Zone = class Zone extends core.Object {
  static get current() {
    return async.Zone._current;
  }
  static _enter(zone) {
    if (zone == null) dart.nullFailed(L71, 711, 29, "zone");
    if (!(zone != async.Zone._current)) dart.assertFailed(null, L71, 712, 12, "!identical(zone, _current)");
    let previous = async.Zone._current;
    async.Zone._current = zone;
    return previous;
  }
  static _leave(previous) {
    if (previous == null) dart.nullFailed(L71, 723, 28, "previous");
    if (!(previous != null)) dart.assertFailed(null, L71, 724, 12, "previous != null");
    async.Zone._current = previous;
  }
};
(async.Zone.__ = function() {
  ;
}).prototype = async.Zone.prototype;
dart.addTypeTests(async.Zone);
dart.addTypeCaches(async.Zone);
dart.setLibraryUri(async.Zone, L29);
dart.defineLazy(async.Zone, {
  /*async.Zone.root*/get root() {
    return C43 || CT.C43;
  },
  /*async.Zone._current*/get _current() {
    return async._rootZone;
  },
  set _current(_) {}
}, false);
var _delegationTarget$ = dart.privateName(async, "_delegationTarget");
var _handleUncaughtError = dart.privateName(async, "_handleUncaughtError");
var _parentDelegate = dart.privateName(async, "_parentDelegate");
var _run = dart.privateName(async, "_run");
var _runUnary = dart.privateName(async, "_runUnary");
var _runBinary = dart.privateName(async, "_runBinary");
var _registerCallback = dart.privateName(async, "_registerCallback");
var _registerUnaryCallback = dart.privateName(async, "_registerUnaryCallback");
var _registerBinaryCallback = dart.privateName(async, "_registerBinaryCallback");
var _errorCallback = dart.privateName(async, "_errorCallback");
var _scheduleMicrotask = dart.privateName(async, "_scheduleMicrotask");
var _createTimer = dart.privateName(async, "_createTimer");
var _createPeriodicTimer = dart.privateName(async, "_createPeriodicTimer");
var _print = dart.privateName(async, "_print");
var _fork = dart.privateName(async, "_fork");
async._ZoneDelegate = class _ZoneDelegate extends core.Object {
  handleUncaughtError(zone, error, stackTrace) {
    if (zone == null) dart.nullFailed(L71, 747, 33, "zone");
    if (error == null) dart.nullFailed(L71, 747, 46, "error");
    if (stackTrace == null) dart.nullFailed(L71, 747, 64, "stackTrace");
    let implementation = this[_delegationTarget$][_handleUncaughtError];
    let implZone = implementation.zone;
    let handler = implementation.function;
    return handler(implZone, implZone[_parentDelegate], zone, error, stackTrace);
  }
  run(R, zone, f) {
    if (zone == null) dart.nullFailed(L71, 754, 17, "zone");
    if (f == null) dart.nullFailed(L71, 754, 25, "f");
    let implementation = this[_delegationTarget$][_run];
    let implZone = implementation.zone;
    let handler = implementation.function;
    return handler(R, implZone, implZone[_parentDelegate], zone, f);
  }
  runUnary(R, T, zone, f, arg) {
    if (zone == null) dart.nullFailed(L71, 761, 25, "zone");
    if (f == null) dart.nullFailed(L71, 761, 33, "f");
    let implementation = this[_delegationTarget$][_runUnary];
    let implZone = implementation.zone;
    let handler = implementation.function;
    return handler(R, T, implZone, implZone[_parentDelegate], zone, f, arg);
  }
  runBinary(R, T1, T2, zone, f, arg1, arg2) {
    if (zone == null) dart.nullFailed(L71, 768, 31, "zone");
    if (f == null) dart.nullFailed(L71, 768, 39, "f");
    let implementation = this[_delegationTarget$][_runBinary];
    let implZone = implementation.zone;
    let handler = implementation.function;
    return handler(R, T1, T2, implZone, implZone[_parentDelegate], zone, f, arg1, arg2);
  }
  registerCallback(R, zone, f) {
    if (zone == null) dart.nullFailed(L71, 775, 44, "zone");
    if (f == null) dart.nullFailed(L71, 775, 52, "f");
    let implementation = this[_delegationTarget$][_registerCallback];
    let implZone = implementation.zone;
    let handler = implementation.function;
    return handler(R, implZone, implZone[_parentDelegate], zone, f);
  }
  registerUnaryCallback(R, T, zone, f) {
    if (zone == null) dart.nullFailed(L71, 782, 60, "zone");
    if (f == null) dart.nullFailed(L71, 782, 68, "f");
    let implementation = this[_delegationTarget$][_registerUnaryCallback];
    let implZone = implementation.zone;
    let handler = implementation.function;
    return handler(R, T, implZone, implZone[_parentDelegate], zone, f);
  }
  registerBinaryCallback(R, T1, T2, zone, f) {
    if (zone == null) dart.nullFailed(L71, 790, 12, "zone");
    if (f == null) dart.nullFailed(L71, 790, 20, "f");
    let implementation = this[_delegationTarget$][_registerBinaryCallback];
    let implZone = implementation.zone;
    let handler = implementation.function;
    return handler(R, T1, T2, implZone, implZone[_parentDelegate], zone, f);
  }
  errorCallback(zone, error, stackTrace) {
    if (zone == null) dart.nullFailed(L71, 797, 34, "zone");
    if (error == null) dart.nullFailed(L71, 797, 47, "error");
    core.ArgumentError.checkNotNull(core.Object, error, "error");
    let implementation = this[_delegationTarget$][_errorCallback];
    let implZone = implementation.zone;
    if (implZone == async._rootZone) return null;
    let handler = implementation.function;
    return handler(implZone, implZone[_parentDelegate], zone, error, stackTrace);
  }
  scheduleMicrotask(zone, f) {
    if (zone == null) dart.nullFailed(L71, 807, 31, "zone");
    if (f == null) dart.nullFailed(L71, 807, 37, "f");
    let implementation = this[_delegationTarget$][_scheduleMicrotask];
    let implZone = implementation.zone;
    let handler = implementation.function;
    handler(implZone, implZone[_parentDelegate], zone, f);
  }
  createTimer(zone, duration, f) {
    if (zone == null) dart.nullFailed(L71, 814, 26, "zone");
    if (duration == null) dart.nullFailed(L71, 814, 41, "duration");
    if (f == null) dart.nullFailed(L71, 814, 56, "f");
    let implementation = this[_delegationTarget$][_createTimer];
    let implZone = implementation.zone;
    let handler = implementation.function;
    return handler(implZone, implZone[_parentDelegate], zone, duration, f);
  }
  createPeriodicTimer(zone, period, f) {
    if (zone == null) dart.nullFailed(L71, 821, 34, "zone");
    if (period == null) dart.nullFailed(L71, 821, 49, "period");
    if (f == null) dart.nullFailed(L71, 821, 62, "f");
    let implementation = this[_delegationTarget$][_createPeriodicTimer];
    let implZone = implementation.zone;
    let handler = implementation.function;
    return handler(implZone, implZone[_parentDelegate], zone, period, f);
  }
  print(zone, line) {
    if (zone == null) dart.nullFailed(L71, 828, 19, "zone");
    if (line == null) dart.nullFailed(L71, 828, 32, "line");
    let implementation = this[_delegationTarget$][_print];
    let implZone = implementation.zone;
    let handler = implementation.function;
    handler(implZone, implZone[_parentDelegate], zone, line);
  }
  fork(zone, specification, zoneValues) {
    if (zone == null) dart.nullFailed(L71, 835, 18, "zone");
    let implementation = this[_delegationTarget$][_fork];
    let implZone = implementation.zone;
    let handler = implementation.function;
    return handler(implZone, implZone[_parentDelegate], zone, specification, zoneValues);
  }
};
(async._ZoneDelegate.new = function(_delegationTarget) {
  if (_delegationTarget == null) dart.nullFailed(L71, 745, 22, "_delegationTarget");
  this[_delegationTarget$] = _delegationTarget;
  ;
}).prototype = async._ZoneDelegate.prototype;
dart.addTypeTests(async._ZoneDelegate);
dart.addTypeCaches(async._ZoneDelegate);
async._ZoneDelegate[dart.implements] = () => [async.ZoneDelegate];
dart.setMethodSignature(async._ZoneDelegate, () => ({
  __proto__: dart.getMethods(async._ZoneDelegate.__proto__),
  handleUncaughtError: dart.fnType(dart.void, [async.Zone, core.Object, core.StackTrace]),
  run: dart.gFnType(R => [R, [async.Zone, dart.fnType(R, [])]], R => [dart.nullable(core.Object)]),
  runUnary: dart.gFnType((R, T) => [R, [async.Zone, dart.fnType(R, [T]), T]], (R, T) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
  runBinary: dart.gFnType((R, T1, T2) => [R, [async.Zone, dart.fnType(R, [T1, T2]), T1, T2]], (R, T1, T2) => [dart.nullable(core.Object), dart.nullable(core.Object), dart.nullable(core.Object)]),
  registerCallback: dart.gFnType(R => [dart.fnType(R, []), [async.Zone, dart.fnType(R, [])]], R => [dart.nullable(core.Object)]),
  registerUnaryCallback: dart.gFnType((R, T) => [dart.fnType(R, [T]), [async.Zone, dart.fnType(R, [T])]], (R, T) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
  registerBinaryCallback: dart.gFnType((R, T1, T2) => [dart.fnType(R, [T1, T2]), [async.Zone, dart.fnType(R, [T1, T2])]], (R, T1, T2) => [dart.nullable(core.Object), dart.nullable(core.Object), dart.nullable(core.Object)]),
  errorCallback: dart.fnType(dart.nullable(async.AsyncError), [async.Zone, core.Object, dart.nullable(core.StackTrace)]),
  scheduleMicrotask: dart.fnType(dart.void, [async.Zone, dart.fnType(dart.dynamic, [])]),
  createTimer: dart.fnType(async.Timer, [async.Zone, core.Duration, dart.fnType(dart.void, [])]),
  createPeriodicTimer: dart.fnType(async.Timer, [async.Zone, core.Duration, dart.fnType(dart.void, [async.Timer])]),
  print: dart.fnType(dart.void, [async.Zone, core.String]),
  fork: dart.fnType(async.Zone, [async.Zone, dart.nullable(async.ZoneSpecification), dart.nullable(core.Map$(dart.nullable(core.Object), dart.nullable(core.Object)))])
}));
dart.setLibraryUri(async._ZoneDelegate, L29);
dart.setFieldSignature(async._ZoneDelegate, () => ({
  __proto__: dart.getFields(async._ZoneDelegate.__proto__),
  [_delegationTarget$]: dart.finalFieldType(async._Zone)
}));
async._Zone = class _Zone extends core.Object {
  inSameErrorZone(otherZone) {
    if (otherZone == null) dart.nullFailed(L71, 872, 29, "otherZone");
    return this === otherZone || this.errorZone == otherZone.errorZone;
  }
};
(async._Zone.new = function() {
  ;
}).prototype = async._Zone.prototype;
dart.addTypeTests(async._Zone);
dart.addTypeCaches(async._Zone);
async._Zone[dart.implements] = () => [async.Zone];
dart.setMethodSignature(async._Zone, () => ({
  __proto__: dart.getMethods(async._Zone.__proto__),
  inSameErrorZone: dart.fnType(core.bool, [async.Zone])
}));
dart.setLibraryUri(async._Zone, L29);
var _delegateCache = dart.privateName(async, "_delegateCache");
var _map$2 = dart.privateName(async, "_map");
var _delegate = dart.privateName(async, "_delegate");
var _run$ = dart.privateName(async, "_CustomZone._run");
var _runUnary$ = dart.privateName(async, "_CustomZone._runUnary");
var _runBinary$ = dart.privateName(async, "_CustomZone._runBinary");
var _registerCallback$ = dart.privateName(async, "_CustomZone._registerCallback");
var _registerUnaryCallback$ = dart.privateName(async, "_CustomZone._registerUnaryCallback");
var _registerBinaryCallback$ = dart.privateName(async, "_CustomZone._registerBinaryCallback");
var _errorCallback$ = dart.privateName(async, "_CustomZone._errorCallback");
var _scheduleMicrotask$ = dart.privateName(async, "_CustomZone._scheduleMicrotask");
var _createTimer$ = dart.privateName(async, "_CustomZone._createTimer");
var _createPeriodicTimer$ = dart.privateName(async, "_CustomZone._createPeriodicTimer");
var _print$ = dart.privateName(async, "_CustomZone._print");
var _fork$ = dart.privateName(async, "_CustomZone._fork");
var _handleUncaughtError$ = dart.privateName(async, "_CustomZone._handleUncaughtError");
var parent$ = dart.privateName(async, "_CustomZone.parent");
var _map$3 = dart.privateName(async, "_CustomZone._map");
async._CustomZone = class _CustomZone extends async._Zone {
  get [_run]() {
    return this[_run$];
  }
  set [_run](value) {
    this[_run$] = value;
  }
  get [_runUnary]() {
    return this[_runUnary$];
  }
  set [_runUnary](value) {
    this[_runUnary$] = value;
  }
  get [_runBinary]() {
    return this[_runBinary$];
  }
  set [_runBinary](value) {
    this[_runBinary$] = value;
  }
  get [_registerCallback]() {
    return this[_registerCallback$];
  }
  set [_registerCallback](value) {
    this[_registerCallback$] = value;
  }
  get [_registerUnaryCallback]() {
    return this[_registerUnaryCallback$];
  }
  set [_registerUnaryCallback](value) {
    this[_registerUnaryCallback$] = value;
  }
  get [_registerBinaryCallback]() {
    return this[_registerBinaryCallback$];
  }
  set [_registerBinaryCallback](value) {
    this[_registerBinaryCallback$] = value;
  }
  get [_errorCallback]() {
    return this[_errorCallback$];
  }
  set [_errorCallback](value) {
    this[_errorCallback$] = value;
  }
  get [_scheduleMicrotask]() {
    return this[_scheduleMicrotask$];
  }
  set [_scheduleMicrotask](value) {
    this[_scheduleMicrotask$] = value;
  }
  get [_createTimer]() {
    return this[_createTimer$];
  }
  set [_createTimer](value) {
    this[_createTimer$] = value;
  }
  get [_createPeriodicTimer]() {
    return this[_createPeriodicTimer$];
  }
  set [_createPeriodicTimer](value) {
    this[_createPeriodicTimer$] = value;
  }
  get [_print]() {
    return this[_print$];
  }
  set [_print](value) {
    this[_print$] = value;
  }
  get [_fork]() {
    return this[_fork$];
  }
  set [_fork](value) {
    this[_fork$] = value;
  }
  get [_handleUncaughtError]() {
    return this[_handleUncaughtError$];
  }
  set [_handleUncaughtError](value) {
    this[_handleUncaughtError$] = value;
  }
  get parent() {
    return this[parent$];
  }
  set parent(value) {
    super.parent = value;
  }
  get [_map$2]() {
    return this[_map$3];
  }
  set [_map$2](value) {
    super[_map$2] = value;
  }
  get [_delegate]() {
    let t116;
    t116 = this[_delegateCache];
    return t116 == null ? this[_delegateCache] = new async._ZoneDelegate.new(this) : t116;
  }
  get [_parentDelegate]() {
    return this.parent[_delegate];
  }
  get errorZone() {
    return this[_handleUncaughtError].zone;
  }
  runGuarded(f) {
    if (f == null) dart.nullFailed(L71, 995, 24, "f");
    try {
      this.run(dart.void, f);
    } catch (e$) {
      let e = dart.getThrown(e$);
      let s = dart.stackTrace(e$);
      if (core.Object.is(e)) {
        this.handleUncaughtError(e, s);
      } else
        throw e$;
    }
  }
  runUnaryGuarded(T, f, arg) {
    if (f == null) dart.nullFailed(L71, 1003, 32, "f");
    try {
      this.runUnary(dart.void, T, f, arg);
    } catch (e$) {
      let e = dart.getThrown(e$);
      let s = dart.stackTrace(e$);
      if (core.Object.is(e)) {
        this.handleUncaughtError(e, s);
      } else
        throw e$;
    }
  }
  runBinaryGuarded(T1, T2, f, arg1, arg2) {
    if (f == null) dart.nullFailed(L71, 1011, 38, "f");
    try {
      this.runBinary(dart.void, T1, T2, f, arg1, arg2);
    } catch (e$) {
      let e = dart.getThrown(e$);
      let s = dart.stackTrace(e$);
      if (core.Object.is(e)) {
        this.handleUncaughtError(e, s);
      } else
        throw e$;
    }
  }
  bindCallback(R, f) {
    if (f == null) dart.nullFailed(L71, 1019, 37, "f");
    let registered = this.registerCallback(R, f);
    return dart.fn(() => this.run(R, registered), dart.fnType(R, []));
  }
  bindUnaryCallback(R, T, f) {
    if (f == null) dart.nullFailed(L71, 1024, 53, "f");
    let registered = this.registerUnaryCallback(R, T, f);
    return dart.fn(arg => this.runUnary(R, T, registered, arg), dart.fnType(R, [T]));
  }
  bindBinaryCallback(R, T1, T2, f) {
    if (f == null) dart.nullFailed(L71, 1030, 9, "f");
    let registered = this.registerBinaryCallback(R, T1, T2, f);
    return dart.fn((arg1, arg2) => this.runBinary(R, T1, T2, registered, arg1, arg2), dart.fnType(R, [T1, T2]));
  }
  bindCallbackGuarded(f) {
    if (f == null) dart.nullFailed(L71, 1035, 44, "f");
    let registered = this.registerCallback(dart.void, f);
    return dart.fn(() => this.runGuarded(registered), VoidTovoid());
  }
  bindUnaryCallbackGuarded(T, f) {
    if (f == null) dart.nullFailed(L71, 1040, 53, "f");
    let registered = this.registerUnaryCallback(dart.void, T, f);
    return dart.fn(arg => this.runUnaryGuarded(T, registered, arg), dart.fnType(dart.void, [T]));
  }
  bindBinaryCallbackGuarded(T1, T2, f) {
    if (f == null) dart.nullFailed(L71, 1046, 12, "f");
    let registered = this.registerBinaryCallback(dart.void, T1, T2, f);
    return dart.fn((arg1, arg2) => this.runBinaryGuarded(T1, T2, registered, arg1, arg2), dart.fnType(dart.void, [T1, T2]));
  }
  _get(key) {
    let result = this[_map$2][$_get](key);
    if (result != null || dart.test(this[_map$2][$containsKey](key))) return result;
    if (this.parent != null) {
      let value = this.parent._get(key);
      if (value != null) {
        this[_map$2][$_set](key, value);
      }
      return value;
    }
    if (!this[$_equals](async._rootZone)) dart.assertFailed(null, L71, 1066, 12, "this == _rootZone");
    return null;
  }
  handleUncaughtError(error, stackTrace) {
    if (error == null) dart.nullFailed(L71, 1072, 35, "error");
    if (stackTrace == null) dart.nullFailed(L71, 1072, 53, "stackTrace");
    let implementation = this[_handleUncaughtError];
    let parentDelegate = implementation.zone[_parentDelegate];
    let handler = implementation.function;
    return handler(implementation.zone, parentDelegate, this, error, stackTrace);
  }
  fork(opts) {
    let specification = opts && 'specification' in opts ? opts.specification : null;
    let zoneValues = opts && 'zoneValues' in opts ? opts.zoneValues : null;
    let implementation = this[_fork];
    let parentDelegate = implementation.zone[_parentDelegate];
    let handler = implementation.function;
    return handler(implementation.zone, parentDelegate, this, specification, zoneValues);
  }
  run(R, f) {
    if (f == null) dart.nullFailed(L71, 1089, 14, "f");
    let implementation = this[_run];
    let parentDelegate = implementation.zone[_parentDelegate];
    let handler = implementation.function;
    return handler(R, implementation.zone, parentDelegate, this, f);
  }
  runUnary(R, T, f, arg) {
    if (f == null) dart.nullFailed(L71, 1096, 22, "f");
    let implementation = this[_runUnary];
    let parentDelegate = implementation.zone[_parentDelegate];
    let handler = implementation.function;
    return handler(R, T, implementation.zone, parentDelegate, this, f, arg);
  }
  runBinary(R, T1, T2, f, arg1, arg2) {
    if (f == null) dart.nullFailed(L71, 1103, 28, "f");
    let implementation = this[_runBinary];
    let parentDelegate = implementation.zone[_parentDelegate];
    let handler = implementation.function;
    return handler(R, T1, T2, implementation.zone, parentDelegate, this, f, arg1, arg2);
  }
  registerCallback(R, callback) {
    if (callback == null) dart.nullFailed(L71, 1110, 41, "callback");
    let implementation = this[_registerCallback];
    let parentDelegate = implementation.zone[_parentDelegate];
    let handler = implementation.function;
    return handler(R, implementation.zone, parentDelegate, this, callback);
  }
  registerUnaryCallback(R, T, callback) {
    if (callback == null) dart.nullFailed(L71, 1117, 57, "callback");
    let implementation = this[_registerUnaryCallback];
    let parentDelegate = implementation.zone[_parentDelegate];
    let handler = implementation.function;
    return handler(R, T, implementation.zone, parentDelegate, this, callback);
  }
  registerBinaryCallback(R, T1, T2, callback) {
    if (callback == null) dart.nullFailed(L71, 1125, 9, "callback");
    let implementation = this[_registerBinaryCallback];
    let parentDelegate = implementation.zone[_parentDelegate];
    let handler = implementation.function;
    return handler(R, T1, T2, implementation.zone, parentDelegate, this, callback);
  }
  errorCallback(error, stackTrace) {
    if (error == null) dart.nullFailed(L71, 1132, 36, "error");
    core.ArgumentError.checkNotNull(core.Object, error, "error");
    let implementation = this[_errorCallback];
    let implementationZone = implementation.zone;
    if (implementationZone == async._rootZone) return null;
    let parentDelegate = implementationZone[_parentDelegate];
    let handler = implementation.function;
    return handler(implementationZone, parentDelegate, this, error, stackTrace);
  }
  scheduleMicrotask(f) {
    if (f == null) dart.nullFailed(L71, 1143, 31, "f");
    let implementation = this[_scheduleMicrotask];
    let parentDelegate = implementation.zone[_parentDelegate];
    let handler = implementation.function;
    return handler(implementation.zone, parentDelegate, this, f);
  }
  createTimer(duration, f) {
    if (duration == null) dart.nullFailed(L71, 1150, 30, "duration");
    if (f == null) dart.nullFailed(L71, 1150, 45, "f");
    let implementation = this[_createTimer];
    let parentDelegate = implementation.zone[_parentDelegate];
    let handler = implementation.function;
    return handler(implementation.zone, parentDelegate, this, duration, f);
  }
  createPeriodicTimer(duration, f) {
    if (duration == null) dart.nullFailed(L71, 1157, 38, "duration");
    if (f == null) dart.nullFailed(L71, 1157, 53, "f");
    let implementation = this[_createPeriodicTimer];
    let parentDelegate = implementation.zone[_parentDelegate];
    let handler = implementation.function;
    return handler(implementation.zone, parentDelegate, this, duration, f);
  }
  print(line) {
    if (line == null) dart.nullFailed(L71, 1164, 21, "line");
    let implementation = this[_print];
    let parentDelegate = implementation.zone[_parentDelegate];
    let handler = implementation.function;
    return handler(implementation.zone, parentDelegate, this, line);
  }
};
(async._CustomZone.new = function(parent, specification, _map) {
  if (parent == null) dart.nullFailed(L71, 911, 20, "parent");
  if (specification == null) dart.nullFailed(L71, 911, 46, "specification");
  if (_map == null) dart.nullFailed(L71, 911, 66, "_map");
  this[_delegateCache] = null;
  this[parent$] = parent;
  this[_map$3] = _map;
  this[_run$] = parent[_run];
  this[_runUnary$] = parent[_runUnary];
  this[_runBinary$] = parent[_runBinary];
  this[_registerCallback$] = parent[_registerCallback];
  this[_registerUnaryCallback$] = parent[_registerUnaryCallback];
  this[_registerBinaryCallback$] = parent[_registerBinaryCallback];
  this[_errorCallback$] = parent[_errorCallback];
  this[_scheduleMicrotask$] = parent[_scheduleMicrotask];
  this[_createTimer$] = parent[_createTimer];
  this[_createPeriodicTimer$] = parent[_createPeriodicTimer];
  this[_print$] = parent[_print];
  this[_fork$] = parent[_fork];
  this[_handleUncaughtError$] = parent[_handleUncaughtError];
  async._CustomZone.__proto__.new.call(this);
  let run = specification.run;
  if (run != null) {
    this[_run] = new async._RunNullaryZoneFunction.new(this, run);
  }
  let runUnary = specification.runUnary;
  if (runUnary != null) {
    this[_runUnary] = new async._RunUnaryZoneFunction.new(this, runUnary);
  }
  let runBinary = specification.runBinary;
  if (runBinary != null) {
    this[_runBinary] = new async._RunBinaryZoneFunction.new(this, runBinary);
  }
  let registerCallback = specification.registerCallback;
  if (registerCallback != null) {
    this[_registerCallback] = new async._RegisterNullaryZoneFunction.new(this, registerCallback);
  }
  let registerUnaryCallback = specification.registerUnaryCallback;
  if (registerUnaryCallback != null) {
    this[_registerUnaryCallback] = new async._RegisterUnaryZoneFunction.new(this, registerUnaryCallback);
  }
  let registerBinaryCallback = specification.registerBinaryCallback;
  if (registerBinaryCallback != null) {
    this[_registerBinaryCallback] = new async._RegisterBinaryZoneFunction.new(this, registerBinaryCallback);
  }
  let errorCallback = specification.errorCallback;
  if (errorCallback != null) {
    this[_errorCallback] = new (_ZoneFunctionOfZoneAndZoneDelegateAndZone__ToAsyncErrorN()).new(this, errorCallback);
  }
  let scheduleMicrotask = specification.scheduleMicrotask;
  if (scheduleMicrotask != null) {
    this[_scheduleMicrotask] = new (_ZoneFunctionOfZoneAndZoneDelegateAndZone__Tovoid()).new(this, scheduleMicrotask);
  }
  let createTimer = specification.createTimer;
  if (createTimer != null) {
    this[_createTimer] = new (_ZoneFunctionOfZoneAndZoneDelegateAndZone__ToTimer()).new(this, createTimer);
  }
  let createPeriodicTimer = specification.createPeriodicTimer;
  if (createPeriodicTimer != null) {
    this[_createPeriodicTimer] = new (_ZoneFunctionOfZoneAndZoneDelegateAndZone__ToTimer$()).new(this, createPeriodicTimer);
  }
  let print = specification.print;
  if (print != null) {
    this[_print] = new (_ZoneFunctionOfZoneAndZoneDelegateAndZone__Tovoid$()).new(this, print);
  }
  let fork = specification.fork;
  if (fork != null) {
    this[_fork] = new (_ZoneFunctionOfZoneAndZoneDelegateAndZone__ToZone()).new(this, fork);
  }
  let handleUncaughtError = specification.handleUncaughtError;
  if (handleUncaughtError != null) {
    this[_handleUncaughtError] = new (_ZoneFunctionOfZoneAndZoneDelegateAndZone__Tovoid$0()).new(this, handleUncaughtError);
  }
}).prototype = async._CustomZone.prototype;
dart.addTypeTests(async._CustomZone);
dart.addTypeCaches(async._CustomZone);
dart.setMethodSignature(async._CustomZone, () => ({
  __proto__: dart.getMethods(async._CustomZone.__proto__),
  runGuarded: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
  runUnaryGuarded: dart.gFnType(T => [dart.void, [dart.fnType(dart.void, [T]), T]], T => [dart.nullable(core.Object)]),
  runBinaryGuarded: dart.gFnType((T1, T2) => [dart.void, [dart.fnType(dart.void, [T1, T2]), T1, T2]], (T1, T2) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
  bindCallback: dart.gFnType(R => [dart.fnType(R, []), [dart.fnType(R, [])]], R => [dart.nullable(core.Object)]),
  bindUnaryCallback: dart.gFnType((R, T) => [dart.fnType(R, [T]), [dart.fnType(R, [T])]], (R, T) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
  bindBinaryCallback: dart.gFnType((R, T1, T2) => [dart.fnType(R, [T1, T2]), [dart.fnType(R, [T1, T2])]], (R, T1, T2) => [dart.nullable(core.Object), dart.nullable(core.Object), dart.nullable(core.Object)]),
  bindCallbackGuarded: dart.fnType(dart.fnType(dart.void, []), [dart.fnType(dart.void, [])]),
  bindUnaryCallbackGuarded: dart.gFnType(T => [dart.fnType(dart.void, [T]), [dart.fnType(dart.void, [T])]], T => [dart.nullable(core.Object)]),
  bindBinaryCallbackGuarded: dart.gFnType((T1, T2) => [dart.fnType(dart.void, [T1, T2]), [dart.fnType(dart.void, [T1, T2])]], (T1, T2) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
  _get: dart.fnType(dart.dynamic, [dart.nullable(core.Object)]),
  handleUncaughtError: dart.fnType(dart.void, [core.Object, core.StackTrace]),
  fork: dart.fnType(async.Zone, [], {specification: dart.nullable(async.ZoneSpecification), zoneValues: dart.nullable(core.Map$(dart.nullable(core.Object), dart.nullable(core.Object)))}, {}),
  run: dart.gFnType(R => [R, [dart.fnType(R, [])]], R => [dart.nullable(core.Object)]),
  runUnary: dart.gFnType((R, T) => [R, [dart.fnType(R, [T]), T]], (R, T) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
  runBinary: dart.gFnType((R, T1, T2) => [R, [dart.fnType(R, [T1, T2]), T1, T2]], (R, T1, T2) => [dart.nullable(core.Object), dart.nullable(core.Object), dart.nullable(core.Object)]),
  registerCallback: dart.gFnType(R => [dart.fnType(R, []), [dart.fnType(R, [])]], R => [dart.nullable(core.Object)]),
  registerUnaryCallback: dart.gFnType((R, T) => [dart.fnType(R, [T]), [dart.fnType(R, [T])]], (R, T) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
  registerBinaryCallback: dart.gFnType((R, T1, T2) => [dart.fnType(R, [T1, T2]), [dart.fnType(R, [T1, T2])]], (R, T1, T2) => [dart.nullable(core.Object), dart.nullable(core.Object), dart.nullable(core.Object)]),
  errorCallback: dart.fnType(dart.nullable(async.AsyncError), [core.Object, dart.nullable(core.StackTrace)]),
  scheduleMicrotask: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
  createTimer: dart.fnType(async.Timer, [core.Duration, dart.fnType(dart.void, [])]),
  createPeriodicTimer: dart.fnType(async.Timer, [core.Duration, dart.fnType(dart.void, [async.Timer])]),
  print: dart.fnType(dart.void, [core.String])
}));
dart.setGetterSignature(async._CustomZone, () => ({
  __proto__: dart.getGetters(async._CustomZone.__proto__),
  [_delegate]: async.ZoneDelegate,
  [_parentDelegate]: async.ZoneDelegate,
  errorZone: async.Zone
}));
dart.setLibraryUri(async._CustomZone, L29);
dart.setFieldSignature(async._CustomZone, () => ({
  __proto__: dart.getFields(async._CustomZone.__proto__),
  [_run]: dart.fieldType(async._RunNullaryZoneFunction),
  [_runUnary]: dart.fieldType(async._RunUnaryZoneFunction),
  [_runBinary]: dart.fieldType(async._RunBinaryZoneFunction),
  [_registerCallback]: dart.fieldType(async._RegisterNullaryZoneFunction),
  [_registerUnaryCallback]: dart.fieldType(async._RegisterUnaryZoneFunction),
  [_registerBinaryCallback]: dart.fieldType(async._RegisterBinaryZoneFunction),
  [_errorCallback]: dart.fieldType(async._ZoneFunction$(dart.fnType(dart.nullable(async.AsyncError), [async.Zone, async.ZoneDelegate, async.Zone, core.Object, dart.nullable(core.StackTrace)]))),
  [_scheduleMicrotask]: dart.fieldType(async._ZoneFunction$(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(dart.void, [])]))),
  [_createTimer]: dart.fieldType(async._ZoneFunction$(dart.fnType(async.Timer, [async.Zone, async.ZoneDelegate, async.Zone, core.Duration, dart.fnType(dart.void, [])]))),
  [_createPeriodicTimer]: dart.fieldType(async._ZoneFunction$(dart.fnType(async.Timer, [async.Zone, async.ZoneDelegate, async.Zone, core.Duration, dart.fnType(dart.void, [async.Timer])]))),
  [_print]: dart.fieldType(async._ZoneFunction$(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String]))),
  [_fork]: dart.fieldType(async._ZoneFunction$(dart.fnType(async.Zone, [async.Zone, async.ZoneDelegate, async.Zone, dart.nullable(async.ZoneSpecification), dart.nullable(core.Map$(dart.nullable(core.Object), dart.nullable(core.Object)))]))),
  [_handleUncaughtError]: dart.fieldType(async._ZoneFunction$(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.Object, core.StackTrace]))),
  [_delegateCache]: dart.fieldType(dart.nullable(async.ZoneDelegate)),
  parent: dart.finalFieldType(async._Zone),
  [_map$2]: dart.finalFieldType(core.Map$(dart.nullable(core.Object), dart.nullable(core.Object)))
}));
var C45;
var C44;
var C47;
var C46;
var C49;
var C48;
var C51;
var C50;
var C53;
var C52;
var C55;
var C54;
var C57;
var C56;
var C59;
var C58;
var C61;
var C60;
var C63;
var C62;
var C65;
var C64;
var C67;
var C66;
var C69;
var C68;
async._RootZone = class _RootZone extends async._Zone {
  get [_run]() {
    return C44 || CT.C44;
  }
  get [_runUnary]() {
    return C46 || CT.C46;
  }
  get [_runBinary]() {
    return C48 || CT.C48;
  }
  get [_registerCallback]() {
    return C50 || CT.C50;
  }
  get [_registerUnaryCallback]() {
    return C52 || CT.C52;
  }
  get [_registerBinaryCallback]() {
    return C54 || CT.C54;
  }
  get [_errorCallback]() {
    return C56 || CT.C56;
  }
  get [_scheduleMicrotask]() {
    return C58 || CT.C58;
  }
  get [_createTimer]() {
    return C60 || CT.C60;
  }
  get [_createPeriodicTimer]() {
    return C62 || CT.C62;
  }
  get [_print]() {
    return C64 || CT.C64;
  }
  get [_fork]() {
    return C66 || CT.C66;
  }
  get [_handleUncaughtError]() {
    return C68 || CT.C68;
  }
  get parent() {
    return null;
  }
  get [_map$2]() {
    return async._RootZone._rootMap;
  }
  get [_delegate]() {
    let t119;
    t119 = async._RootZone._rootDelegate;
    return t119 == null ? async._RootZone._rootDelegate = new async._ZoneDelegate.new(this) : t119;
  }
  get [_parentDelegate]() {
    return this[_delegate];
  }
  get errorZone() {
    return this;
  }
  runGuarded(f) {
    if (f == null) dart.nullFailed(L71, 1369, 24, "f");
    try {
      if (async._rootZone == async.Zone._current) {
        f();
        return;
      }
      async._rootRun(dart.void, null, null, this, f);
    } catch (e$) {
      let e = dart.getThrown(e$);
      let s = dart.stackTrace(e$);
      if (core.Object.is(e)) {
        this.handleUncaughtError(e, s);
      } else
        throw e$;
    }
  }
  runUnaryGuarded(T, f, arg) {
    if (f == null) dart.nullFailed(L71, 1381, 32, "f");
    try {
      if (async._rootZone == async.Zone._current) {
        f(arg);
        return;
      }
      async._rootRunUnary(dart.void, T, null, null, this, f, arg);
    } catch (e$) {
      let e = dart.getThrown(e$);
      let s = dart.stackTrace(e$);
      if (core.Object.is(e)) {
        this.handleUncaughtError(e, s);
      } else
        throw e$;
    }
  }
  runBinaryGuarded(T1, T2, f, arg1, arg2) {
    if (f == null) dart.nullFailed(L71, 1393, 38, "f");
    try {
      if (async._rootZone == async.Zone._current) {
        f(arg1, arg2);
        return;
      }
      async._rootRunBinary(dart.void, T1, T2, null, null, this, f, arg1, arg2);
    } catch (e$) {
      let e = dart.getThrown(e$);
      let s = dart.stackTrace(e$);
      if (core.Object.is(e)) {
        this.handleUncaughtError(e, s);
      } else
        throw e$;
    }
  }
  bindCallback(R, f) {
    if (f == null) dart.nullFailed(L71, 1405, 37, "f");
    return dart.fn(() => this.run(R, f), dart.fnType(R, []));
  }
  bindUnaryCallback(R, T, f) {
    if (f == null) dart.nullFailed(L71, 1409, 53, "f");
    return dart.fn(arg => this.runUnary(R, T, f, arg), dart.fnType(R, [T]));
  }
  bindBinaryCallback(R, T1, T2, f) {
    if (f == null) dart.nullFailed(L71, 1414, 9, "f");
    return dart.fn((arg1, arg2) => this.runBinary(R, T1, T2, f, arg1, arg2), dart.fnType(R, [T1, T2]));
  }
  bindCallbackGuarded(f) {
    if (f == null) dart.nullFailed(L71, 1418, 44, "f");
    return dart.fn(() => this.runGuarded(f), VoidTovoid());
  }
  bindUnaryCallbackGuarded(T, f) {
    if (f == null) dart.nullFailed(L71, 1422, 53, "f");
    return dart.fn(arg => this.runUnaryGuarded(T, f, arg), dart.fnType(dart.void, [T]));
  }
  bindBinaryCallbackGuarded(T1, T2, f) {
    if (f == null) dart.nullFailed(L71, 1427, 12, "f");
    return dart.fn((arg1, arg2) => this.runBinaryGuarded(T1, T2, f, arg1, arg2), dart.fnType(dart.void, [T1, T2]));
  }
  _get(key) {
    return null;
  }
  handleUncaughtError(error, stackTrace) {
    if (error == null) dart.nullFailed(L71, 1435, 35, "error");
    if (stackTrace == null) dart.nullFailed(L71, 1435, 53, "stackTrace");
    async._rootHandleUncaughtError(null, null, this, error, stackTrace);
  }
  fork(opts) {
    let specification = opts && 'specification' in opts ? opts.specification : null;
    let zoneValues = opts && 'zoneValues' in opts ? opts.zoneValues : null;
    return async._rootFork(null, null, this, specification, zoneValues);
  }
  run(R, f) {
    if (f == null) dart.nullFailed(L71, 1444, 14, "f");
    if (async.Zone._current == async._rootZone) return f();
    return async._rootRun(R, null, null, this, f);
  }
  runUnary(R, T, f, arg) {
    if (f == null) dart.nullFailed(L71, 1449, 22, "f");
    if (async.Zone._current == async._rootZone) return f(arg);
    return async._rootRunUnary(R, T, null, null, this, f, arg);
  }
  runBinary(R, T1, T2, f, arg1, arg2) {
    if (f == null) dart.nullFailed(L71, 1454, 28, "f");
    if (async.Zone._current == async._rootZone) return f(arg1, arg2);
    return async._rootRunBinary(R, T1, T2, null, null, this, f, arg1, arg2);
  }
  registerCallback(R, f) {
    if (f == null) dart.nullFailed(L71, 1459, 41, "f");
    return f;
  }
  registerUnaryCallback(R, T, f) {
    if (f == null) dart.nullFailed(L71, 1461, 57, "f");
    return f;
  }
  registerBinaryCallback(R, T1, T2, f) {
    if (f == null) dart.nullFailed(L71, 1464, 13, "f");
    return f;
  }
  errorCallback(error, stackTrace) {
    if (error == null) dart.nullFailed(L71, 1467, 36, "error");
    return null;
  }
  scheduleMicrotask(f) {
    if (f == null) dart.nullFailed(L71, 1469, 31, "f");
    async._rootScheduleMicrotask(null, null, this, f);
  }
  createTimer(duration, f) {
    if (duration == null) dart.nullFailed(L71, 1473, 30, "duration");
    if (f == null) dart.nullFailed(L71, 1473, 45, "f");
    return async.Timer._createTimer(duration, f);
  }
  createPeriodicTimer(duration, f) {
    if (duration == null) dart.nullFailed(L71, 1477, 38, "duration");
    if (f == null) dart.nullFailed(L71, 1477, 53, "f");
    return async.Timer._createPeriodicTimer(duration, f);
  }
  print(line) {
    if (line == null) dart.nullFailed(L71, 1481, 21, "line");
    _internal.printToConsole(line);
  }
};
(async._RootZone.new = function() {
  async._RootZone.__proto__.new.call(this);
  ;
}).prototype = async._RootZone.prototype;
dart.addTypeTests(async._RootZone);
dart.addTypeCaches(async._RootZone);
dart.setMethodSignature(async._RootZone, () => ({
  __proto__: dart.getMethods(async._RootZone.__proto__),
  runGuarded: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
  runUnaryGuarded: dart.gFnType(T => [dart.void, [dart.fnType(dart.void, [T]), T]], T => [dart.nullable(core.Object)]),
  runBinaryGuarded: dart.gFnType((T1, T2) => [dart.void, [dart.fnType(dart.void, [T1, T2]), T1, T2]], (T1, T2) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
  bindCallback: dart.gFnType(R => [dart.fnType(R, []), [dart.fnType(R, [])]], R => [dart.nullable(core.Object)]),
  bindUnaryCallback: dart.gFnType((R, T) => [dart.fnType(R, [T]), [dart.fnType(R, [T])]], (R, T) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
  bindBinaryCallback: dart.gFnType((R, T1, T2) => [dart.fnType(R, [T1, T2]), [dart.fnType(R, [T1, T2])]], (R, T1, T2) => [dart.nullable(core.Object), dart.nullable(core.Object), dart.nullable(core.Object)]),
  bindCallbackGuarded: dart.fnType(dart.fnType(dart.void, []), [dart.fnType(dart.void, [])]),
  bindUnaryCallbackGuarded: dart.gFnType(T => [dart.fnType(dart.void, [T]), [dart.fnType(dart.void, [T])]], T => [dart.nullable(core.Object)]),
  bindBinaryCallbackGuarded: dart.gFnType((T1, T2) => [dart.fnType(dart.void, [T1, T2]), [dart.fnType(dart.void, [T1, T2])]], (T1, T2) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
  _get: dart.fnType(dart.dynamic, [dart.nullable(core.Object)]),
  handleUncaughtError: dart.fnType(dart.void, [core.Object, core.StackTrace]),
  fork: dart.fnType(async.Zone, [], {specification: dart.nullable(async.ZoneSpecification), zoneValues: dart.nullable(core.Map$(dart.nullable(core.Object), dart.nullable(core.Object)))}, {}),
  run: dart.gFnType(R => [R, [dart.fnType(R, [])]], R => [dart.nullable(core.Object)]),
  runUnary: dart.gFnType((R, T) => [R, [dart.fnType(R, [T]), T]], (R, T) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
  runBinary: dart.gFnType((R, T1, T2) => [R, [dart.fnType(R, [T1, T2]), T1, T2]], (R, T1, T2) => [dart.nullable(core.Object), dart.nullable(core.Object), dart.nullable(core.Object)]),
  registerCallback: dart.gFnType(R => [dart.fnType(R, []), [dart.fnType(R, [])]], R => [dart.nullable(core.Object)]),
  registerUnaryCallback: dart.gFnType((R, T) => [dart.fnType(R, [T]), [dart.fnType(R, [T])]], (R, T) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
  registerBinaryCallback: dart.gFnType((R, T1, T2) => [dart.fnType(R, [T1, T2]), [dart.fnType(R, [T1, T2])]], (R, T1, T2) => [dart.nullable(core.Object), dart.nullable(core.Object), dart.nullable(core.Object)]),
  errorCallback: dart.fnType(dart.nullable(async.AsyncError), [core.Object, dart.nullable(core.StackTrace)]),
  scheduleMicrotask: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
  createTimer: dart.fnType(async.Timer, [core.Duration, dart.fnType(dart.void, [])]),
  createPeriodicTimer: dart.fnType(async.Timer, [core.Duration, dart.fnType(dart.void, [async.Timer])]),
  print: dart.fnType(dart.void, [core.String])
}));
dart.setGetterSignature(async._RootZone, () => ({
  __proto__: dart.getGetters(async._RootZone.__proto__),
  [_run]: async._RunNullaryZoneFunction,
  [_runUnary]: async._RunUnaryZoneFunction,
  [_runBinary]: async._RunBinaryZoneFunction,
  [_registerCallback]: async._RegisterNullaryZoneFunction,
  [_registerUnaryCallback]: async._RegisterUnaryZoneFunction,
  [_registerBinaryCallback]: async._RegisterBinaryZoneFunction,
  [_errorCallback]: async._ZoneFunction$(dart.fnType(dart.nullable(async.AsyncError), [async.Zone, async.ZoneDelegate, async.Zone, core.Object, dart.nullable(core.StackTrace)])),
  [_scheduleMicrotask]: async._ZoneFunction$(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(dart.void, [])])),
  [_createTimer]: async._ZoneFunction$(dart.fnType(async.Timer, [async.Zone, async.ZoneDelegate, async.Zone, core.Duration, dart.fnType(dart.void, [])])),
  [_createPeriodicTimer]: async._ZoneFunction$(dart.fnType(async.Timer, [async.Zone, async.ZoneDelegate, async.Zone, core.Duration, dart.fnType(dart.void, [async.Timer])])),
  [_print]: async._ZoneFunction$(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String])),
  [_fork]: async._ZoneFunction$(dart.fnType(async.Zone, [async.Zone, async.ZoneDelegate, async.Zone, dart.nullable(async.ZoneSpecification), dart.nullable(core.Map$(dart.nullable(core.Object), dart.nullable(core.Object)))])),
  [_handleUncaughtError]: async._ZoneFunction$(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.Object, core.StackTrace])),
  parent: dart.nullable(async._Zone),
  [_map$2]: core.Map$(dart.nullable(core.Object), dart.nullable(core.Object)),
  [_delegate]: async.ZoneDelegate,
  [_parentDelegate]: async.ZoneDelegate,
  errorZone: async.Zone
}));
dart.setLibraryUri(async._RootZone, L29);
dart.defineLazy(async._RootZone, {
  /*async._RootZone._rootMap*/get _rootMap() {
    return new _js_helper.LinkedMap.new();
  },
  /*async._RootZone._rootDelegate*/get _rootDelegate() {
    return null;
  },
  set _rootDelegate(_) {}
}, false);
var C70;
var C71;
var C72;
async.async = function _async(T, initGenerator) {
  if (initGenerator == null) dart.nullFailed(L60, 25, 22, "initGenerator");
  let iter = null;
  let onValue = null;
  function onValue$35get() {
    let t122;
    t122 = onValue;
    return t122 == null ? dart.throw(new _internal.LateInitializationErrorImpl.new("Local 'onValue' has not been initialized.")) : t122;
  }
  function onValue$35set(t123) {
    if (t123 == null) dart.nullFailed(L60, 27, 34, "null");
    return onValue = t123;
  }
  let onError = null;
  function onError$35get() {
    let t125;
    t125 = onError;
    return t125 == null ? dart.throw(new _internal.LateInitializationErrorImpl.new("Local 'onError' has not been initialized.")) : t125;
  }
  function onError$35set(t126) {
    if (t126 == null) dart.nullFailed(L60, 28, 45, "null");
    return onError = t126;
  }
  function onAwait(value) {
    let f = null;
    if (async._Future.is(value)) {
      f = value;
    } else if (async.Future.is(value)) {
      f = new (_FutureOfObjectN()).new();
      async._Future._chainForeignFuture(value, f);
    } else {
      f = new (_FutureOfObjectN()).value(value);
    }
    f = f[_thenAwait](ObjectN(), onValue$35get(), onError$35get());
    return f;
  }
  onValue$35set(value => {
    let iteratorResult = iter.next(value);
    value = iteratorResult.value;
    return iteratorResult.done ? value : onAwait(value);
  });
  onError$35set((value, stackTrace) => {
    if (value == null) dart.nullFailed(L60, 58, 14, "value");
    let iteratorResult = iter.throw(dart.createErrorWithStack(value, stackTrace));
    value = iteratorResult.value;
    return iteratorResult.done ? value : onAwait(value);
  });
  let zone = async.Zone.current;
  if (zone != async._rootZone) {
    onValue$35set(zone.registerUnaryCallback(ObjectN(), ObjectN(), onValue$35get()));
    onError$35set(zone.registerBinaryCallback(core.Object, core.Object, StackTraceN(), onError$35get()));
  }
  let asyncFuture = new (async._Future$(T)).new();
  let isRunningAsEvent = false;
  function runBody() {
    try {
      iter = initGenerator()[Symbol.iterator]();
      let iteratorValue = iter.next(null);
      let value = iteratorValue.value;
      if (iteratorValue.done) {
        if (async.Future.is(value)) {
          if (async._Future.is(value)) {
            async._Future._chainCoreFuture(value, asyncFuture);
          } else {
            async._Future._chainForeignFuture(value, asyncFuture);
          }
        } else if (isRunningAsEvent) {
          asyncFuture[_completeWithValue](value);
        } else {
          asyncFuture[_asyncComplete](value);
        }
      } else {
        async._Future._chainCoreFuture(onAwait(value), asyncFuture);
      }
    } catch (e$) {
      let e = dart.getThrown(e$);
      let s = dart.stackTrace(e$);
      if (core.Object.is(e)) {
        if (isRunningAsEvent) {
          async._completeWithErrorCallback(asyncFuture, e, s);
        } else {
          async._asyncCompleteWithErrorCallback(asyncFuture, e, s);
        }
      } else
        throw e$;
    }
  }
  if (dart.test(dart.startAsyncSynchronously)) {
    runBody();
    isRunningAsEvent = true;
  } else {
    isRunningAsEvent = true;
    async.scheduleMicrotask(runBody);
  }
  return asyncFuture;
};
async._invokeErrorHandler = function _invokeErrorHandler(errorHandler, error, stackTrace) {
  if (errorHandler == null) dart.nullFailed(L72, 8, 14, "errorHandler");
  if (error == null) dart.nullFailed(L72, 8, 35, "error");
  if (stackTrace == null) dart.nullFailed(L72, 8, 53, "stackTrace");
  let handler = errorHandler;
  if (NeverAndNeverTodynamic().is(handler)) {
    return dart.dsend(errorHandler, 'call', [error, stackTrace]);
  } else {
    return dart.dsend(errorHandler, 'call', [error]);
  }
};
async._completeWithErrorCallback = function _completeWithErrorCallback(result, error, stackTrace) {
  if (result == null) dart.nullFailed(L65, 930, 13, "result");
  if (error == null) dart.nullFailed(L65, 930, 28, "error");
  let replacement = async.Zone.current.errorCallback(error, stackTrace);
  if (replacement != null) {
    error = replacement.error;
    stackTrace = replacement.stackTrace;
  } else {
    stackTrace == null ? stackTrace = async.AsyncError.defaultStackTrace(error) : null;
  }
  if (stackTrace == null) dart.throw("unreachable");
  result[_completeError](error, stackTrace);
};
async._asyncCompleteWithErrorCallback = function _asyncCompleteWithErrorCallback(result, error, stackTrace) {
  if (result == null) dart.nullFailed(L65, 944, 13, "result");
  if (error == null) dart.nullFailed(L65, 944, 28, "error");
  let replacement = async.Zone.current.errorCallback(error, stackTrace);
  if (replacement != null) {
    error = replacement.error;
    stackTrace = replacement.stackTrace;
  } else {
    stackTrace == null ? stackTrace = async.AsyncError.defaultStackTrace(error) : null;
  }
  if (stackTrace == null) {
    dart.throw("unreachable");
  }
  result[_asyncCompleteError](error, stackTrace);
};
async._registerErrorHandler = function _registerErrorHandler(errorHandler, zone) {
  if (errorHandler == null) dart.nullFailed(L66, 823, 41, "errorHandler");
  if (zone == null) dart.nullFailed(L66, 823, 60, "zone");
  if (ObjectAndStackTraceTodynamic().is(errorHandler)) {
    return zone.registerBinaryCallback(dart.dynamic, core.Object, core.StackTrace, errorHandler);
  }
  if (ObjectTodynamic().is(errorHandler)) {
    return zone.registerUnaryCallback(dart.dynamic, core.Object, errorHandler);
  }
  dart.throw(new core.ArgumentError.value(errorHandler, "onError", dart.str("Error handler must accept one Object or one Object and a StackTrace") + dart.str(" as arguments, and return a a valid result")));
};
async._microtaskLoop = function _microtaskLoop() {
  for (let entry = async._nextCallback; entry != null; entry = async._nextCallback) {
    async._lastPriorityCallback = null;
    let next = entry.next;
    async._nextCallback = next;
    if (next == null) async._lastCallback = null;
    entry.callback();
  }
};
async._startMicrotaskLoop = function _startMicrotaskLoop() {
  async._isInCallbackLoop = true;
  try {
    async._microtaskLoop();
  } finally {
    async._lastPriorityCallback = null;
    async._isInCallbackLoop = false;
    if (async._nextCallback != null) {
      async._AsyncRun._scheduleImmediate(C70 || CT.C70);
    }
  }
};
async._scheduleAsyncCallback = function _scheduleAsyncCallback(callback) {
  if (callback == null) dart.nullFailed(L67, 66, 44, "callback");
  let newEntry = new async._AsyncCallbackEntry.new(callback);
  let lastCallback = async._lastCallback;
  if (lastCallback == null) {
    async._nextCallback = async._lastCallback = newEntry;
    if (!dart.test(async._isInCallbackLoop)) {
      async._AsyncRun._scheduleImmediate(C70 || CT.C70);
    }
  } else {
    lastCallback.next = newEntry;
    async._lastCallback = newEntry;
  }
};
async._schedulePriorityAsyncCallback = function _schedulePriorityAsyncCallback(callback) {
  if (callback == null) dart.nullFailed(L67, 88, 52, "callback");
  if (async._nextCallback == null) {
    async._scheduleAsyncCallback(callback);
    async._lastPriorityCallback = async._lastCallback;
    return;
  }
  let entry = new async._AsyncCallbackEntry.new(callback);
  let lastPriorityCallback = async._lastPriorityCallback;
  if (lastPriorityCallback == null) {
    entry.next = async._nextCallback;
    async._nextCallback = async._lastPriorityCallback = entry;
  } else {
    let next = lastPriorityCallback.next;
    entry.next = next;
    lastPriorityCallback.next = entry;
    async._lastPriorityCallback = entry;
    if (next == null) {
      async._lastCallback = entry;
    }
  }
};
async.scheduleMicrotask = function scheduleMicrotask(callback) {
  if (callback == null) dart.nullFailed(L67, 135, 40, "callback");
  let currentZone = async.Zone._current;
  if (async._rootZone == currentZone) {
    async._rootScheduleMicrotask(null, null, async._rootZone, callback);
    return;
  }
  let implementation = currentZone[_scheduleMicrotask];
  if (async._rootZone == implementation.zone && dart.test(async._rootZone.inSameErrorZone(currentZone))) {
    async._rootScheduleMicrotask(null, null, currentZone, currentZone.registerCallback(dart.void, callback));
    return;
  }
  async.Zone.current.scheduleMicrotask(async.Zone.current.bindCallbackGuarded(callback));
};
async._runGuarded = function _runGuarded(notificationHandler) {
  if (notificationHandler == null) return;
  try {
    notificationHandler();
  } catch (e$) {
    let e = dart.getThrown(e$);
    let s = dart.stackTrace(e$);
    if (core.Object.is(e)) {
      async.Zone.current.handleUncaughtError(e, s);
    } else
      throw e$;
  }
};
async._nullDataHandler = function _nullDataHandler(value) {
};
async._nullErrorHandler = function _nullErrorHandler(error, stackTrace) {
  if (error == null) dart.nullFailed(L63, 591, 31, "error");
  if (stackTrace == null) dart.nullFailed(L63, 591, 49, "stackTrace");
  async.Zone.current.handleUncaughtError(error, stackTrace);
};
async._nullDoneHandler = function _nullDoneHandler() {
};
async._runUserCode = function _runUserCode(T, userCode, onSuccess, onError) {
  if (userCode == null) dart.nullFailed(L68, 8, 19, "userCode");
  if (onSuccess == null) dart.nullFailed(L68, 8, 31, "onSuccess");
  if (onError == null) dart.nullFailed(L68, 9, 5, "onError");
  try {
    onSuccess(userCode());
  } catch (e$) {
    let e = dart.getThrown(e$);
    let s = dart.stackTrace(e$);
    if (core.Object.is(e)) {
      let replacement = async.Zone.current.errorCallback(e, s);
      if (replacement == null) {
        onError(e, s);
      } else {
        let error = replacement.error;
        let stackTrace = replacement.stackTrace;
        onError(error, stackTrace);
      }
    } else
      throw e$;
  }
};
async._cancelAndError = function _cancelAndError(subscription, future, error, stackTrace) {
  if (subscription == null) dart.nullFailed(L68, 26, 41, "subscription");
  if (future == null) dart.nullFailed(L68, 26, 63, "future");
  if (error == null) dart.nullFailed(L68, 27, 12, "error");
  if (stackTrace == null) dart.nullFailed(L68, 27, 30, "stackTrace");
  let cancelFuture = subscription.cancel();
  if (cancelFuture != null && cancelFuture != async.Future._nullFuture) {
    cancelFuture.whenComplete(dart.fn(() => future[_completeError](error, stackTrace), VoidTovoid()));
  } else {
    future[_completeError](error, stackTrace);
  }
};
async._cancelAndErrorWithReplacement = function _cancelAndErrorWithReplacement(subscription, future, error, stackTrace) {
  if (subscription == null) dart.nullFailed(L68, 36, 56, "subscription");
  if (future == null) dart.nullFailed(L68, 37, 13, "future");
  if (error == null) dart.nullFailed(L68, 37, 28, "error");
  if (stackTrace == null) dart.nullFailed(L68, 37, 46, "stackTrace");
  let replacement = async.Zone.current.errorCallback(error, stackTrace);
  if (replacement != null) {
    error = replacement.error;
    stackTrace = replacement.stackTrace;
  }
  async._cancelAndError(subscription, future, error, stackTrace);
};
async._cancelAndErrorClosure = function _cancelAndErrorClosure(subscription, future) {
  if (subscription == null) dart.nullFailed(L68, 48, 24, "subscription");
  if (future == null) dart.nullFailed(L68, 48, 46, "future");
  return dart.fn((error, stackTrace) => {
    if (error == null) dart.nullFailed(L68, 49, 18, "error");
    if (stackTrace == null) dart.nullFailed(L68, 49, 36, "stackTrace");
    async._cancelAndError(subscription, future, error, stackTrace);
  }, ObjectAndStackTraceToNullN());
};
async._cancelAndValue = function _cancelAndValue(subscription, future, value) {
  if (subscription == null) dart.nullFailed(L68, 56, 41, "subscription");
  if (future == null) dart.nullFailed(L68, 56, 63, "future");
  let cancelFuture = subscription.cancel();
  if (cancelFuture != null && cancelFuture != async.Future._nullFuture) {
    cancelFuture.whenComplete(dart.fn(() => future[_complete](value), VoidTovoid()));
  } else {
    future[_complete](value);
  }
};
async._addErrorWithReplacement = function _addErrorWithReplacement(sink, error, stackTrace) {
  if (sink == null) dart.nullFailed(L68, 174, 16, "sink");
  if (error == null) dart.nullFailed(L68, 174, 29, "error");
  if (stackTrace == null) dart.nullFailed(L68, 174, 47, "stackTrace");
  let replacement = async.Zone.current.errorCallback(error, stackTrace);
  if (replacement != null) {
    error = replacement.error;
    stackTrace = replacement.stackTrace;
  }
  sink[_addError](error, stackTrace);
};
async._rootHandleUncaughtError = function _rootHandleUncaughtError(self, parent, zone, error, stackTrace) {
  if (zone == null) dart.nullFailed(L71, 1172, 70, "zone");
  if (error == null) dart.nullFailed(L71, 1173, 12, "error");
  if (stackTrace == null) dart.nullFailed(L71, 1173, 30, "stackTrace");
  async._schedulePriorityAsyncCallback(dart.fn(() => {
    async._rethrow(error, stackTrace);
  }, VoidToNullN()));
};
async._rethrow = function _rethrow(error, stackTrace) {
  if (error == null) dart.nullFailed(L60, 199, 22, "error");
  if (stackTrace == null) dart.nullFailed(L60, 199, 40, "stackTrace");
  throw dart.createErrorWithStack(error, stackTrace);
};
async._rootRun = function _rootRun(R, self, parent, zone, f) {
  if (zone == null) dart.nullFailed(L71, 1181, 54, "zone");
  if (f == null) dart.nullFailed(L71, 1181, 62, "f");
  if (async.Zone._current == zone) return f();
  if (!async._Zone.is(zone)) {
    dart.throw(new core.ArgumentError.value(zone, "zone", "Can only run in platform zones"));
  }
  let old = async.Zone._enter(zone);
  try {
    return f();
  } finally {
    async.Zone._leave(old);
  }
};
async._rootRunUnary = function _rootRunUnary(R, T, self, parent, zone, f, arg) {
  if (zone == null) dart.nullFailed(L71, 1197, 44, "zone");
  if (f == null) dart.nullFailed(L71, 1197, 52, "f");
  if (async.Zone._current == zone) return f(arg);
  if (!async._Zone.is(zone)) {
    dart.throw(new core.ArgumentError.value(zone, "zone", "Can only run in platform zones"));
  }
  let old = async.Zone._enter(zone);
  try {
    return f(arg);
  } finally {
    async.Zone._leave(old);
  }
};
async._rootRunBinary = function _rootRunBinary(R, T1, T2, self, parent, zone, f, arg1, arg2) {
  if (zone == null) dart.nullFailed(L71, 1212, 68, "zone");
  if (f == null) dart.nullFailed(L71, 1213, 7, "f");
  if (async.Zone._current == zone) return f(arg1, arg2);
  if (!async._Zone.is(zone)) {
    dart.throw(new core.ArgumentError.value(zone, "zone", "Can only run in platform zones"));
  }
  let old = async.Zone._enter(zone);
  try {
    return f(arg1, arg2);
  } finally {
    async.Zone._leave(old);
  }
};
async._rootRegisterCallback = function _rootRegisterCallback(R, self, parent, zone, f) {
  if (self == null) dart.nullFailed(L71, 1229, 10, "self");
  if (parent == null) dart.nullFailed(L71, 1229, 29, "parent");
  if (zone == null) dart.nullFailed(L71, 1229, 42, "zone");
  if (f == null) dart.nullFailed(L71, 1229, 50, "f");
  return f;
};
async._rootRegisterUnaryCallback = function _rootRegisterUnaryCallback(R, T, self, parent, zone, f) {
  if (self == null) dart.nullFailed(L71, 1234, 10, "self");
  if (parent == null) dart.nullFailed(L71, 1234, 29, "parent");
  if (zone == null) dart.nullFailed(L71, 1234, 42, "zone");
  if (f == null) dart.nullFailed(L71, 1234, 50, "f");
  return f;
};
async._rootRegisterBinaryCallback = function _rootRegisterBinaryCallback(R, T1, T2, self, parent, zone, f) {
  if (self == null) dart.nullFailed(L71, 1239, 10, "self");
  if (parent == null) dart.nullFailed(L71, 1239, 29, "parent");
  if (zone == null) dart.nullFailed(L71, 1239, 42, "zone");
  if (f == null) dart.nullFailed(L71, 1239, 50, "f");
  return f;
};
async._rootErrorCallback = function _rootErrorCallback(self, parent, zone, error, stackTrace) {
  if (self == null) dart.nullFailed(L71, 1243, 37, "self");
  if (parent == null) dart.nullFailed(L71, 1243, 56, "parent");
  if (zone == null) dart.nullFailed(L71, 1243, 69, "zone");
  if (error == null) dart.nullFailed(L71, 1244, 16, "error");
  return null;
};
async._rootScheduleMicrotask = function _rootScheduleMicrotask(self, parent, zone, f) {
  if (zone == null) dart.nullFailed(L71, 1248, 44, "zone");
  if (f == null) dart.nullFailed(L71, 1248, 55, "f");
  if (async._rootZone != zone) {
    let hasErrorHandler = !dart.test(async._rootZone.inSameErrorZone(zone));
    if (hasErrorHandler) {
      f = zone.bindCallbackGuarded(f);
    } else {
      f = zone.bindCallback(dart.void, f);
    }
  }
  async._scheduleAsyncCallback(f);
};
async._rootCreateTimer = function _rootCreateTimer(self, parent, zone, duration, callback) {
  if (self == null) dart.nullFailed(L71, 1260, 29, "self");
  if (parent == null) dart.nullFailed(L71, 1260, 48, "parent");
  if (zone == null) dart.nullFailed(L71, 1260, 61, "zone");
  if (duration == null) dart.nullFailed(L71, 1261, 14, "duration");
  if (callback == null) dart.nullFailed(L71, 1261, 40, "callback");
  if (async._rootZone != zone) {
    callback = zone.bindCallback(dart.void, callback);
  }
  return async.Timer._createTimer(duration, callback);
};
async._rootCreatePeriodicTimer = function _rootCreatePeriodicTimer(self, parent, zone, duration, callback) {
  if (self == null) dart.nullFailed(L71, 1268, 37, "self");
  if (parent == null) dart.nullFailed(L71, 1268, 56, "parent");
  if (zone == null) dart.nullFailed(L71, 1268, 69, "zone");
  if (duration == null) dart.nullFailed(L71, 1269, 14, "duration");
  if (callback == null) dart.nullFailed(L71, 1269, 29, "callback");
  if (async._rootZone != zone) {
    callback = zone.bindUnaryCallback(dart.void, async.Timer, callback);
  }
  return async.Timer._createPeriodicTimer(duration, callback);
};
async._rootPrint = function _rootPrint(self, parent, zone, line) {
  if (self == null) dart.nullFailed(L71, 1276, 22, "self");
  if (parent == null) dart.nullFailed(L71, 1276, 41, "parent");
  if (zone == null) dart.nullFailed(L71, 1276, 54, "zone");
  if (line == null) dart.nullFailed(L71, 1276, 67, "line");
  _internal.printToConsole(line);
};
async._printToZone = function _printToZone(line) {
  if (line == null) dart.nullFailed(L71, 1280, 26, "line");
  async.Zone.current.print(line);
};
async._rootFork = function _rootFork(self, parent, zone, specification, zoneValues) {
  if (zone == null) dart.nullFailed(L71, 1284, 55, "zone");
  if (!async._Zone.is(zone)) {
    dart.throw(new core.ArgumentError.value(zone, "zone", "Can only fork a platform zone"));
  }
  _internal.printToZone = C71 || CT.C71;
  if (specification == null) {
    specification = C72 || CT.C72;
  } else if (!async._ZoneSpecification.is(specification)) {
    specification = async.ZoneSpecification.from(specification);
  }
  let valueMap = null;
  if (zoneValues == null) {
    valueMap = zone[_map$2];
  } else {
    valueMap = HashMapOfObjectN$ObjectN().from(zoneValues);
  }
  if (specification == null) dart.throw("unreachable");
  return new async._CustomZone.new(zone, specification, valueMap);
};
async.runZoned = function runZoned(R, body, opts) {
  if (body == null) dart.nullFailed(L71, 1531, 17, "body");
  let zoneValues = opts && 'zoneValues' in opts ? opts.zoneValues : null;
  let zoneSpecification = opts && 'zoneSpecification' in opts ? opts.zoneSpecification : null;
  let onError = opts && 'onError' in opts ? opts.onError : null;
  core.ArgumentError.checkNotNull(dart.fnType(R, []), body, "body");
  if (onError != null) {
    if (!ObjectAndStackTraceTovoid().is(onError)) {
      if (ObjectTovoid().is(onError)) {
        let originalOnError = onError;
        onError = dart.fn((error, stack) => {
          if (error == null) dart.nullFailed(L71, 1541, 27, "error");
          if (stack == null) dart.nullFailed(L71, 1541, 45, "stack");
          return originalOnError(error);
        }, ObjectAndStackTraceTovoid());
      } else {
        dart.throw(new core.ArgumentError.value(onError, "onError", "Must be Function(Object) or Function(Object, StackTrace)"));
      }
    }
    return R.as(async.runZonedGuarded(R, body, onError, {zoneSpecification: zoneSpecification, zoneValues: zoneValues}));
  }
  return async._runZoned(R, body, zoneValues, zoneSpecification);
};
async.runZonedGuarded = function runZonedGuarded(R, body, onError, opts) {
  if (body == null) dart.nullFailed(L71, 1593, 25, "body");
  if (onError == null) dart.nullFailed(L71, 1593, 38, "onError");
  let zoneValues = opts && 'zoneValues' in opts ? opts.zoneValues : null;
  let zoneSpecification = opts && 'zoneSpecification' in opts ? opts.zoneSpecification : null;
  core.ArgumentError.checkNotNull(dart.fnType(R, []), body, "body");
  core.ArgumentError.checkNotNull(ObjectAndStackTraceTovoid(), onError, "onError");
  let parentZone = async.Zone._current;
  let errorHandler = dart.fn((self, parent, zone, error, stackTrace) => {
    if (self == null) dart.nullFailed(L71, 1598, 51, "self");
    if (parent == null) dart.nullFailed(L71, 1598, 70, "parent");
    if (zone == null) dart.nullFailed(L71, 1599, 12, "zone");
    if (error == null) dart.nullFailed(L71, 1599, 25, "error");
    if (stackTrace == null) dart.nullFailed(L71, 1599, 43, "stackTrace");
    try {
      parentZone.runBinary(dart.void, core.Object, core.StackTrace, onError, error, stackTrace);
    } catch (e$) {
      let e = dart.getThrown(e$);
      let s = dart.stackTrace(e$);
      if (core.Object.is(e)) {
        if (core.identical(e, error)) {
          parent.handleUncaughtError(zone, error, stackTrace);
        } else {
          parent.handleUncaughtError(zone, e, s);
        }
      } else
        throw e$;
    }
  }, ZoneAndZoneDelegateAndZone__ToNullN());
  if (zoneSpecification == null) {
    zoneSpecification = new async._ZoneSpecification.new({handleUncaughtError: errorHandler});
  } else {
    zoneSpecification = async.ZoneSpecification.from(zoneSpecification, {handleUncaughtError: errorHandler});
  }
  try {
    return async._runZoned(R, body, zoneValues, zoneSpecification);
  } catch (e) {
    let error = dart.getThrown(e);
    let stackTrace = dart.stackTrace(e);
    if (core.Object.is(error)) {
      onError(error, stackTrace);
    } else
      throw e;
  }
  return null;
};
async._runZoned = function _runZoned(R, body, zoneValues, specification) {
  if (body == null) dart.nullFailed(L71, 1626, 18, "body");
  return async.Zone.current.fork({specification: specification, zoneValues: zoneValues}).run(R, body);
};
dart.defineLazy(async, {
  /*async._nextCallback*/get _nextCallback() {
    return null;
  },
  set _nextCallback(_) {},
  /*async._lastCallback*/get _lastCallback() {
    return null;
  },
  set _lastCallback(_) {},
  /*async._lastPriorityCallback*/get _lastPriorityCallback() {
    return null;
  },
  set _lastPriorityCallback(_) {},
  /*async._isInCallbackLoop*/get _isInCallbackLoop() {
    return false;
  },
  set _isInCallbackLoop(_) {},
  /*async._rootZone*/get _rootZone() {
    return C43 || CT.C43;
  }
}, false);
var _keyMap$ = dart.privateName(collection, "_keyMap");
var _map$4 = dart.privateName(collection, "_map");
var _modifications$2 = dart.privateName(collection, "_modifications");
var _newSet = dart.privateName(collection, "_newSet");
var _newSimilarSet = dart.privateName(collection, "_newSimilarSet");
const _is__SetBase_default = Symbol('_is__SetBase_default');
collection._SetBase$ = dart.generic(E => {
  var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
  var FollowedByIterableOfE = () => (FollowedByIterableOfE = dart.constFn(_internal.FollowedByIterable$(E)))();
  var SetOfE = () => (SetOfE = dart.constFn(core.Set$(E)))();
  var ListOfE = () => (ListOfE = dart.constFn(core.List$(E)))();
  var WhereIterableOfE = () => (WhereIterableOfE = dart.constFn(_internal.WhereIterable$(E)))();
  var EAndEToE = () => (EAndEToE = dart.constFn(dart.fnType(E, [E, E])))();
  var TakeIterableOfE = () => (TakeIterableOfE = dart.constFn(_internal.TakeIterable$(E)))();
  var TakeWhileIterableOfE = () => (TakeWhileIterableOfE = dart.constFn(_internal.TakeWhileIterable$(E)))();
  var SkipIterableOfE = () => (SkipIterableOfE = dart.constFn(_internal.SkipIterable$(E)))();
  var SkipWhileIterableOfE = () => (SkipWhileIterableOfE = dart.constFn(_internal.SkipWhileIterable$(E)))();
  var VoidToE = () => (VoidToE = dart.constFn(dart.fnType(E, [])))();
  var VoidToNE = () => (VoidToNE = dart.constFn(dart.nullable(VoidToE())))();
  var ETodynamic = () => (ETodynamic = dart.constFn(dart.fnType(dart.dynamic, [E])))();
  class _SetBase extends core.Object {
    cast(R) {
      return core.Set.castFrom(E, R, this, {newSet: dart.bind(this, _newSimilarSet)});
    }
    difference(other) {
      if (other == null) dart.nullFailed(L74, 326, 34, "other");
      let result = this[_newSet]();
      for (let element of this) {
        if (!dart.test(other.contains(element))) result.add(element);
      }
      return result;
    }
    intersection(other) {
      if (other == null) dart.nullFailed(L74, 334, 36, "other");
      let result = this[_newSet]();
      for (let element of this) {
        if (dart.test(other.contains(element))) result.add(element);
      }
      return result;
    }
    toSet() {
      let t133;
      t133 = this[_newSet]();
      return (() => {
        t133.addAll(this);
        return t133;
      })();
    }
    get isEmpty() {
      return this[$length] === 0;
    }
    get isNotEmpty() {
      return this[$length] !== 0;
    }
    followedBy(other) {
      IterableOfE().as(other);
      if (other == null) dart.nullFailed(L74, 352, 38, "other");
      return FollowedByIterableOfE().firstEfficient(this, other);
    }
    whereType(T) {
      return new (_internal.WhereTypeIterable$(T)).new(this);
    }
    clear() {
      this.removeAll(this.toList());
    }
    addAll(elements) {
      IterableOfE().as(elements);
      if (elements == null) dart.nullFailed(L74, 361, 27, "elements");
      for (let element of elements)
        this.add(element);
    }
    removeAll(elements) {
      if (elements == null) dart.nullFailed(L74, 365, 36, "elements");
      for (let element of elements)
        this.remove(element);
    }
    retainAll(elements) {
      if (elements == null) dart.nullFailed(L74, 369, 36, "elements");
      let toRemove = this.toSet();
      for (let o of elements) {
        toRemove.remove(o);
      }
      this.removeAll(toRemove);
    }
    removeWhere(test) {
      if (test == null) dart.nullFailed(L74, 379, 25, "test");
      let toRemove = JSArrayOfObjectN().of([]);
      for (let element of this) {
        if (dart.test(test(element))) toRemove[$add](element);
      }
      this.removeAll(toRemove);
    }
    retainWhere(test) {
      if (test == null) dart.nullFailed(L74, 387, 25, "test");
      let toRemove = JSArrayOfObjectN().of([]);
      for (let element of this) {
        if (!dart.test(test(element))) toRemove[$add](element);
      }
      this.removeAll(toRemove);
    }
    containsAll(other) {
      if (other == null) dart.nullFailed(L74, 395, 38, "other");
      for (let o of other) {
        if (!dart.test(this.contains(o))) return false;
      }
      return true;
    }
    union(other) {
      let t133;
      SetOfE().as(other);
      if (other == null) dart.nullFailed(L74, 402, 23, "other");
      t133 = this.toSet();
      return (() => {
        t133.addAll(other);
        return t133;
      })();
    }
    toList(opts) {
      let growable = opts && 'growable' in opts ? opts.growable : true;
      if (growable == null) dart.nullFailed(L74, 406, 24, "growable");
      return ListOfE().of(this, {growable: growable});
    }
    map(T, f) {
      if (f == null) dart.nullFailed(L74, 409, 24, "f");
      return new (_internal.EfficientLengthMappedIterable$(E, T)).new(this, f);
    }
    get single() {
      if (dart.notNull(this[$length]) > 1) dart.throw(_internal.IterableElementError.tooMany());
      let it = this.iterator;
      if (!dart.test(it.moveNext())) dart.throw(_internal.IterableElementError.noElement());
      let result = it.current;
      return result;
    }
    toString() {
      return collection.IterableBase.iterableToFullString(this, "{", "}");
    }
    where(f) {
      if (f == null) dart.nullFailed(L74, 422, 26, "f");
      return new (WhereIterableOfE()).new(this, f);
    }
    expand(T, f) {
      if (f == null) dart.nullFailed(L74, 424, 37, "f");
      return new (_internal.ExpandIterable$(E, T)).new(this, f);
    }
    forEach(f) {
      if (f == null) dart.nullFailed(L74, 427, 21, "f");
      for (let element of this)
        f(element);
    }
    reduce(combine) {
      EAndEToE().as(combine);
      if (combine == null) dart.nullFailed(L74, 431, 14, "combine");
      let iterator = this.iterator;
      if (!dart.test(iterator.moveNext())) {
        dart.throw(_internal.IterableElementError.noElement());
      }
      let value = iterator.current;
      while (dart.test(iterator.moveNext())) {
        value = combine(value, iterator.current);
      }
      return value;
    }
    fold(T, initialValue, combine) {
      if (combine == null) dart.nullFailed(L74, 443, 31, "combine");
      let value = initialValue;
      for (let element of this)
        value = combine(value, element);
      return value;
    }
    every(f) {
      if (f == null) dart.nullFailed(L74, 449, 19, "f");
      for (let element of this) {
        if (!dart.test(f(element))) return false;
      }
      return true;
    }
    join(separator = "") {
      if (separator == null) dart.nullFailed(L74, 456, 23, "separator");
      let iterator = this.iterator;
      if (!dart.test(iterator.moveNext())) return "";
      let buffer = new core.StringBuffer.new();
      if (separator == null || separator === "") {
        do {
          buffer.write(iterator.current);
        } while (dart.test(iterator.moveNext()));
      } else {
        buffer.write(iterator.current);
        while (dart.test(iterator.moveNext())) {
          buffer.write(separator);
          buffer.write(iterator.current);
        }
      }
      return buffer.toString();
    }
    any(test) {
      if (test == null) dart.nullFailed(L74, 474, 17, "test");
      for (let element of this) {
        if (dart.test(test(element))) return true;
      }
      return false;
    }
    take(n) {
      if (n == null) dart.nullFailed(L74, 481, 24, "n");
      return TakeIterableOfE().new(this, n);
    }
    takeWhile(test) {
      if (test == null) dart.nullFailed(L74, 485, 30, "test");
      return new (TakeWhileIterableOfE()).new(this, test);
    }
    skip(n) {
      if (n == null) dart.nullFailed(L74, 489, 24, "n");
      return SkipIterableOfE().new(this, n);
    }
    skipWhile(test) {
      if (test == null) dart.nullFailed(L74, 493, 30, "test");
      return new (SkipWhileIterableOfE()).new(this, test);
    }
    get first() {
      let it = this.iterator;
      if (!dart.test(it.moveNext())) {
        dart.throw(_internal.IterableElementError.noElement());
      }
      return it.current;
    }
    get last() {
      let it = this.iterator;
      if (!dart.test(it.moveNext())) {
        dart.throw(_internal.IterableElementError.noElement());
      }
      let result = null;
      do {
        result = it.current;
      } while (dart.test(it.moveNext()));
      return result;
    }
    firstWhere(test, opts) {
      if (test == null) dart.nullFailed(L74, 517, 21, "test");
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToNE().as(orElse);
      for (let element of this) {
        if (dart.test(test(element))) return element;
      }
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    lastWhere(test, opts) {
      if (test == null) dart.nullFailed(L74, 525, 20, "test");
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToNE().as(orElse);
      let result = null;
      let result$35isSet = false;
      function result$35get() {
        return result$35isSet ? result : dart.throw(new _internal.LateInitializationErrorImpl.new("Local 'result' has not been initialized."));
      }
      dart.fn(result$35get, VoidToE());
      function result$35set(t135) {
        result$35isSet = true;
        return result = t135;
      }
      dart.fn(result$35set, ETodynamic());
      let foundMatching = false;
      for (let element of this) {
        if (dart.test(test(element))) {
          result$35set(element);
          foundMatching = true;
        }
      }
      if (foundMatching) return result$35get();
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    singleWhere(test, opts) {
      if (test == null) dart.nullFailed(L74, 539, 22, "test");
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToNE().as(orElse);
      let result = null;
      let result$35isSet = false;
      function result$35get() {
        return result$35isSet ? result : dart.throw(new _internal.LateInitializationErrorImpl.new("Local 'result' has not been initialized."));
      }
      dart.fn(result$35get, VoidToE());
      function result$35set(t139) {
        result$35isSet = true;
        return result = t139;
      }
      dart.fn(result$35set, ETodynamic());
      let foundMatching = false;
      for (let element of this) {
        if (dart.test(test(element))) {
          if (foundMatching) {
            dart.throw(_internal.IterableElementError.tooMany());
          }
          result$35set(element);
          foundMatching = true;
        }
      }
      if (foundMatching) return result$35get();
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    elementAt(index) {
      if (index == null) dart.nullFailed(L74, 556, 19, "index");
      core.ArgumentError.checkNotNull(core.int, index, "index");
      core.RangeError.checkNotNegative(index, "index");
      let elementIndex = 0;
      for (let element of this) {
        if (index === elementIndex) return element;
        elementIndex = elementIndex + 1;
      }
      dart.throw(new core.IndexError.new(index, this, "index", null, elementIndex));
    }
    [Symbol.iterator]() {
      return new dart.JsIterator(this[$iterator]);
    }
  }
  (_SetBase.new = function() {
    ;
  }).prototype = _SetBase.prototype;
  dart.addTypeTests(_SetBase);
  _SetBase.prototype[_is__SetBase_default] = true;
  dart.addTypeCaches(_SetBase);
  _SetBase[dart.implements] = () => [core.Set$(E)];
  dart.setMethodSignature(_SetBase, () => ({
    __proto__: dart.getMethods(_SetBase.__proto__),
    cast: dart.gFnType(R => [core.Set$(R), []], R => [dart.nullable(core.Object)]),
    [$cast]: dart.gFnType(R => [core.Set$(R), []], R => [dart.nullable(core.Object)]),
    difference: dart.fnType(core.Set$(E), [core.Set$(dart.nullable(core.Object))]),
    intersection: dart.fnType(core.Set$(E), [core.Set$(dart.nullable(core.Object))]),
    toSet: dart.fnType(core.Set$(E), []),
    [$toSet]: dart.fnType(core.Set$(E), []),
    followedBy: dart.fnType(core.Iterable$(E), [dart.nullable(core.Object)]),
    [$followedBy]: dart.fnType(core.Iterable$(E), [dart.nullable(core.Object)]),
    whereType: dart.gFnType(T => [core.Iterable$(T), []], T => [dart.nullable(core.Object)]),
    [$whereType]: dart.gFnType(T => [core.Iterable$(T), []], T => [dart.nullable(core.Object)]),
    clear: dart.fnType(dart.void, []),
    addAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    removeAll: dart.fnType(dart.void, [core.Iterable$(dart.nullable(core.Object))]),
    retainAll: dart.fnType(dart.void, [core.Iterable$(dart.nullable(core.Object))]),
    removeWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
    retainWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
    containsAll: dart.fnType(core.bool, [core.Iterable$(dart.nullable(core.Object))]),
    union: dart.fnType(core.Set$(E), [dart.nullable(core.Object)]),
    toList: dart.fnType(core.List$(E), [], {growable: core.bool}, {}),
    [$toList]: dart.fnType(core.List$(E), [], {growable: core.bool}, {}),
    map: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(T, [E])]], T => [dart.nullable(core.Object)]),
    [$map]: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(T, [E])]], T => [dart.nullable(core.Object)]),
    where: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
    [$where]: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
    expand: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(core.Iterable$(T), [E])]], T => [dart.nullable(core.Object)]),
    [$expand]: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(core.Iterable$(T), [E])]], T => [dart.nullable(core.Object)]),
    forEach: dart.fnType(dart.void, [dart.fnType(dart.void, [E])]),
    [$forEach]: dart.fnType(dart.void, [dart.fnType(dart.void, [E])]),
    reduce: dart.fnType(E, [dart.nullable(core.Object)]),
    [$reduce]: dart.fnType(E, [dart.nullable(core.Object)]),
    fold: dart.gFnType(T => [T, [T, dart.fnType(T, [T, E])]], T => [dart.nullable(core.Object)]),
    [$fold]: dart.gFnType(T => [T, [T, dart.fnType(T, [T, E])]], T => [dart.nullable(core.Object)]),
    every: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
    [$every]: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
    join: dart.fnType(core.String, [], [core.String]),
    [$join]: dart.fnType(core.String, [], [core.String]),
    any: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
    [$any]: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
    take: dart.fnType(core.Iterable$(E), [core.int]),
    [$take]: dart.fnType(core.Iterable$(E), [core.int]),
    takeWhile: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
    [$takeWhile]: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
    skip: dart.fnType(core.Iterable$(E), [core.int]),
    [$skip]: dart.fnType(core.Iterable$(E), [core.int]),
    skipWhile: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
    [$skipWhile]: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
    firstWhere: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
    [$firstWhere]: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
    lastWhere: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
    [$lastWhere]: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
    singleWhere: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
    [$singleWhere]: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
    elementAt: dart.fnType(E, [core.int]),
    [$elementAt]: dart.fnType(E, [core.int])
  }));
  dart.setGetterSignature(_SetBase, () => ({
    __proto__: dart.getGetters(_SetBase.__proto__),
    isEmpty: core.bool,
    [$isEmpty]: core.bool,
    isNotEmpty: core.bool,
    [$isNotEmpty]: core.bool,
    single: E,
    [$single]: E,
    first: E,
    [$first]: E,
    last: E,
    [$last]: E
  }));
  dart.setLibraryUri(_SetBase, L23);
  dart.defineExtensionMethods(_SetBase, [
    'cast',
    'toSet',
    'followedBy',
    'whereType',
    'toList',
    'map',
    'toString',
    'where',
    'expand',
    'forEach',
    'reduce',
    'fold',
    'every',
    'join',
    'any',
    'take',
    'takeWhile',
    'skip',
    'skipWhile',
    'firstWhere',
    'lastWhere',
    'singleWhere',
    'elementAt'
  ]);
  dart.defineExtensionAccessors(_SetBase, [
    'isEmpty',
    'isNotEmpty',
    'single',
    'first',
    'last'
  ]);
  return _SetBase;
});
collection._SetBase = collection._SetBase$();
dart.addTypeTests(collection._SetBase, _is__SetBase_default);
const _is__InternalSet_default = Symbol('_is__InternalSet_default');
collection._InternalSet$ = dart.generic(E => {
  var DartIteratorOfE = () => (DartIteratorOfE = dart.constFn(_js_helper.DartIterator$(E)))();
  class _InternalSet extends collection._SetBase$(E) {
    get length() {
      return this[_map$4].size;
    }
    get isEmpty() {
      return this[_map$4].size == 0;
    }
    get isNotEmpty() {
      return this[_map$4].size != 0;
    }
    get iterator() {
      return new (DartIteratorOfE()).new(this[Symbol.iterator]());
    }
    [Symbol.iterator]() {
      let self = this;
      let iterator = self[_map$4].values();
      let modifications = self[_modifications$2];
      return {
        next() {
          if (modifications != self[_modifications$2]) {
            throw new core.ConcurrentModificationError.new(self);
          }
          return iterator.next();
        }
      };
    }
  }
  (_InternalSet.new = function() {
    _InternalSet.__proto__.new.call(this);
    ;
  }).prototype = _InternalSet.prototype;
  dart.addTypeTests(_InternalSet);
  _InternalSet.prototype[_is__InternalSet_default] = true;
  dart.addTypeCaches(_InternalSet);
  dart.setMethodSignature(_InternalSet, () => ({
    __proto__: dart.getMethods(_InternalSet.__proto__),
    [Symbol.iterator]: dart.fnType(dart.dynamic, [])
  }));
  dart.setGetterSignature(_InternalSet, () => ({
    __proto__: dart.getGetters(_InternalSet.__proto__),
    length: core.int,
    [$length]: core.int,
    iterator: core.Iterator$(E),
    [$iterator]: core.Iterator$(E)
  }));
  dart.setLibraryUri(_InternalSet, L23);
  dart.defineExtensionAccessors(_InternalSet, ['length', 'isEmpty', 'isNotEmpty', 'iterator']);
  return _InternalSet;
});
collection._InternalSet = collection._InternalSet$();
dart.addTypeTests(collection._InternalSet, _is__InternalSet_default);
const _is__HashSet_default = Symbol('_is__HashSet_default');
var _map$5 = dart.privateName(collection, "_HashSet._map");
var _modifications$3 = dart.privateName(collection, "_HashSet._modifications");
collection._HashSet$ = dart.generic(E => {
  var _HashSetOfE = () => (_HashSetOfE = dart.constFn(collection._HashSet$(E)))();
  var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
  class _HashSet extends collection._InternalSet$(E) {
    get [_map$4]() {
      return this[_map$5];
    }
    set [_map$4](value) {
      super[_map$4] = value;
    }
    get [_modifications$2]() {
      return this[_modifications$3];
    }
    set [_modifications$2](value) {
      this[_modifications$3] = value;
    }
    [_newSet]() {
      return new (_HashSetOfE()).new();
    }
    [_newSimilarSet](R) {
      return new (collection._HashSet$(R)).new();
    }
    contains(key) {
      if (key == null) {
        key = null;
      } else if (key[$_equals] !== dart.identityEquals) {
        let k = key;
        let buckets = this[_keyMap$].get(dart.hashCode(k) & 0x3ffffff);
        if (buckets != null) {
          for (let i = 0, n = buckets.length; i < n; i = i + 1) {
            k = buckets[i];
            if (dart.equals(k, key)) return true;
          }
        }
        return false;
      }
      return this[_map$4].has(key);
    }
    lookup(key) {
      if (key == null) return null;
      if (key[$_equals] !== dart.identityEquals) {
        let k = key;
        let buckets = this[_keyMap$].get(dart.hashCode(k) & 0x3ffffff);
        if (buckets != null) {
          for (let i = 0, n = buckets.length; i < n; i = i + 1) {
            k = buckets[i];
            if (dart.equals(k, key)) return k;
          }
        }
        return null;
      }
      return this[_map$4].has(key) ? key : null;
    }
    add(key) {
      E.as(key);
      let map = this[_map$4];
      if (key == null) {
        if (dart.test(map.has(null))) return false;
        key = null;
      } else if (key[$_equals] !== dart.identityEquals) {
        let keyMap = this[_keyMap$];
        let k = key;
        let hash = dart.hashCode(k) & 0x3ffffff;
        let buckets = keyMap.get(hash);
        if (buckets == null) {
          keyMap.set(hash, [key]);
        } else {
          for (let i = 0, n = buckets.length; i < n; i = i + 1) {
            k = buckets[i];
            if (dart.equals(k, key)) return false;
          }
          buckets.push(key);
        }
      } else if (dart.test(map.has(key))) {
        return false;
      }
      map.add(key);
      this[_modifications$2] = this[_modifications$2] + 1 & 67108863;
      return true;
    }
    addAll(objects) {
      IterableOfE().as(objects);
      if (objects == null) dart.nullFailed(L73, 247, 27, "objects");
      let map = this[_map$4];
      let length = map.size;
      for (let key of objects) {
        if (key == null) {
          key = null;
        } else if (key[$_equals] !== dart.identityEquals) {
          key = _js_helper.putLinkedMapKey(key, this[_keyMap$]);
        }
        map.add(key);
      }
      if (length !== map.size) {
        this[_modifications$2] = this[_modifications$2] + 1 & 67108863;
      }
    }
    remove(key) {
      if (key == null) {
        key = null;
      } else if (key[$_equals] !== dart.identityEquals) {
        let k = key;
        let hash = dart.hashCode(k) & 0x3ffffff;
        let buckets = this[_keyMap$].get(hash);
        if (buckets == null) return false;
        for (let i = 0, n = buckets.length;;) {
          k = buckets[i];
          if (dart.equals(k, key)) {
            key = k;
            if (n === 1) {
              this[_keyMap$].delete(hash);
            } else {
              buckets.splice(i, 1);
            }
            break;
          }
          if ((i = i + 1) >= n) return false;
        }
      }
      let map = this[_map$4];
      if (map.delete(key)) {
        this[_modifications$2] = this[_modifications$2] + 1 & 67108863;
        return true;
      }
      return false;
    }
    clear() {
      let map = this[_map$4];
      if (map.size > 0) {
        map.clear();
        this[_keyMap$].clear();
        this[_modifications$2] = this[_modifications$2] + 1 & 67108863;
      }
    }
  }
  (_HashSet.new = function() {
    this[_map$5] = new Set();
    this[_keyMap$] = new Map();
    this[_modifications$3] = 0;
    _HashSet.__proto__.new.call(this);
    ;
  }).prototype = _HashSet.prototype;
  dart.addTypeTests(_HashSet);
  _HashSet.prototype[_is__HashSet_default] = true;
  dart.addTypeCaches(_HashSet);
  _HashSet[dart.implements] = () => [collection.HashSet$(E), collection.LinkedHashSet$(E)];
  dart.setMethodSignature(_HashSet, () => ({
    __proto__: dart.getMethods(_HashSet.__proto__),
    [_newSet]: dart.fnType(core.Set$(E), []),
    [_newSimilarSet]: dart.gFnType(R => [core.Set$(R), []], R => [dart.nullable(core.Object)]),
    contains: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    [$contains]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    lookup: dart.fnType(dart.nullable(E), [dart.nullable(core.Object)]),
    add: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    remove: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(_HashSet, L23);
  dart.setFieldSignature(_HashSet, () => ({
    __proto__: dart.getFields(_HashSet.__proto__),
    [_map$4]: dart.finalFieldType(dart.dynamic),
    [_keyMap$]: dart.finalFieldType(dart.nullable(core.Object)),
    [_modifications$2]: dart.fieldType(core.int)
  }));
  dart.defineExtensionMethods(_HashSet, ['contains']);
  return _HashSet;
});
collection._HashSet = collection._HashSet$();
dart.addTypeTests(collection._HashSet, _is__HashSet_default);
const _is__ImmutableSet_default = Symbol('_is__ImmutableSet_default');
collection._ImmutableSet$ = dart.generic(E => {
  var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
  class _ImmutableSet extends collection._HashSet$(E) {
    add(value) {
      E.as(value);
      return dart.throw(collection._ImmutableSet._unsupported());
    }
    addAll(elements) {
      IterableOfE().as(elements);
      if (elements == null) dart.nullFailed(L73, 325, 27, "elements");
      return dart.throw(collection._ImmutableSet._unsupported());
    }
    clear() {
      return dart.throw(collection._ImmutableSet._unsupported());
    }
    remove(value) {
      return dart.throw(collection._ImmutableSet._unsupported());
    }
    static _unsupported() {
      return new core.UnsupportedError.new("Cannot modify unmodifiable set");
    }
  }
  (_ImmutableSet.from = function(entries) {
    if (entries == null) dart.nullFailed(L73, 310, 33, "entries");
    _ImmutableSet.__proto__.new.call(this);
    let map = this[_map$4];
    for (let key of entries) {
      if (key == null) {
        key = null;
      } else if (key[$_equals] !== dart.identityEquals) {
        key = _js_helper.putLinkedMapKey(key, this[_keyMap$]);
      }
      map.add(key);
    }
  }).prototype = _ImmutableSet.prototype;
  dart.addTypeTests(_ImmutableSet);
  _ImmutableSet.prototype[_is__ImmutableSet_default] = true;
  dart.addTypeCaches(_ImmutableSet);
  dart.setLibraryUri(_ImmutableSet, L23);
  return _ImmutableSet;
});
collection._ImmutableSet = collection._ImmutableSet$();
dart.addTypeTests(collection._ImmutableSet, _is__ImmutableSet_default);
const _is__IdentityHashSet_default = Symbol('_is__IdentityHashSet_default');
var _map$6 = dart.privateName(collection, "_IdentityHashSet._map");
var _modifications$4 = dart.privateName(collection, "_IdentityHashSet._modifications");
collection._IdentityHashSet$ = dart.generic(E => {
  var _IdentityHashSetOfE = () => (_IdentityHashSetOfE = dart.constFn(collection._IdentityHashSet$(E)))();
  var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
  class _IdentityHashSet extends collection._InternalSet$(E) {
    get [_map$4]() {
      return this[_map$6];
    }
    set [_map$4](value) {
      super[_map$4] = value;
    }
    get [_modifications$2]() {
      return this[_modifications$4];
    }
    set [_modifications$2](value) {
      this[_modifications$4] = value;
    }
    [_newSet]() {
      return new (_IdentityHashSetOfE()).new();
    }
    [_newSimilarSet](R) {
      return new (collection._IdentityHashSet$(R)).new();
    }
    contains(element) {
      return this[_map$4].has(element);
    }
    lookup(element) {
      return E.is(element) && this[_map$4].has(element) ? element : null;
    }
    add(element) {
      E.as(element);
      let map = this[_map$4];
      if (map.has(element)) return false;
      map.add(element);
      this[_modifications$2] = this[_modifications$2] + 1 & 67108863;
      return true;
    }
    addAll(objects) {
      IterableOfE().as(objects);
      if (objects == null) dart.nullFailed(L73, 366, 27, "objects");
      let map = this[_map$4];
      let length = map.size;
      for (let key of objects) {
        map.add(key);
      }
      if (length !== map.size) {
        this[_modifications$2] = this[_modifications$2] + 1 & 67108863;
      }
    }
    remove(element) {
      if (this[_map$4].delete(element)) {
        this[_modifications$2] = this[_modifications$2] + 1 & 67108863;
        return true;
      }
      return false;
    }
    clear() {
      let map = this[_map$4];
      if (map.size > 0) {
        map.clear();
        this[_modifications$2] = this[_modifications$2] + 1 & 67108863;
      }
    }
  }
  (_IdentityHashSet.new = function() {
    this[_map$6] = new Set();
    this[_modifications$4] = 0;
    _IdentityHashSet.__proto__.new.call(this);
    ;
  }).prototype = _IdentityHashSet.prototype;
  dart.addTypeTests(_IdentityHashSet);
  _IdentityHashSet.prototype[_is__IdentityHashSet_default] = true;
  dart.addTypeCaches(_IdentityHashSet);
  _IdentityHashSet[dart.implements] = () => [collection.HashSet$(E), collection.LinkedHashSet$(E)];
  dart.setMethodSignature(_IdentityHashSet, () => ({
    __proto__: dart.getMethods(_IdentityHashSet.__proto__),
    [_newSet]: dart.fnType(core.Set$(E), []),
    [_newSimilarSet]: dart.gFnType(R => [core.Set$(R), []], R => [dart.nullable(core.Object)]),
    contains: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    [$contains]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    lookup: dart.fnType(dart.nullable(E), [dart.nullable(core.Object)]),
    add: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    remove: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(_IdentityHashSet, L23);
  dart.setFieldSignature(_IdentityHashSet, () => ({
    __proto__: dart.getFields(_IdentityHashSet.__proto__),
    [_map$4]: dart.finalFieldType(dart.dynamic),
    [_modifications$2]: dart.fieldType(core.int)
  }));
  dart.defineExtensionMethods(_IdentityHashSet, ['contains']);
  return _IdentityHashSet;
});
collection._IdentityHashSet = collection._IdentityHashSet$();
dart.addTypeTests(collection._IdentityHashSet, _is__IdentityHashSet_default);
var _validKey$0 = dart.privateName(collection, "_validKey");
var _equals$0 = dart.privateName(collection, "_equals");
var _hashCode$0 = dart.privateName(collection, "_hashCode");
const _is__CustomHashSet_default = Symbol('_is__CustomHashSet_default');
var _modifications$5 = dart.privateName(collection, "_CustomHashSet._modifications");
var _map$7 = dart.privateName(collection, "_CustomHashSet._map");
collection._CustomHashSet$ = dart.generic(E => {
  var _CustomHashSetOfE = () => (_CustomHashSetOfE = dart.constFn(collection._CustomHashSet$(E)))();
  var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
  class _CustomHashSet extends collection._InternalSet$(E) {
    get [_modifications$2]() {
      return this[_modifications$5];
    }
    set [_modifications$2](value) {
      this[_modifications$5] = value;
    }
    get [_map$4]() {
      return this[_map$7];
    }
    set [_map$4](value) {
      super[_map$4] = value;
    }
    [_newSet]() {
      return new (_CustomHashSetOfE()).new(this[_equals$0], this[_hashCode$0]);
    }
    [_newSimilarSet](R) {
      return new (collection._HashSet$(R)).new();
    }
    contains(key) {
      let t141;
      if (E.is(key)) {
        let buckets = this[_keyMap$].get((t141 = key, this[_hashCode$0](t141)) & 0x3ffffff);
        if (buckets != null) {
          let equals = this[_equals$0];
          for (let i = 0, n = buckets.length; i < n; i = i + 1) {
            let k = buckets[i];
            if (dart.test(equals(k, key))) return true;
          }
        }
      }
      return false;
    }
    lookup(key) {
      let t141;
      if (E.is(key)) {
        let buckets = this[_keyMap$].get((t141 = key, this[_hashCode$0](t141)) & 0x3ffffff);
        if (buckets != null) {
          let equals = this[_equals$0];
          for (let i = 0, n = buckets.length; i < n; i = i + 1) {
            let k = buckets[i];
            if (dart.test(equals(k, key))) return k;
          }
        }
      }
      return null;
    }
    add(key) {
      let t141;
      E.as(key);
      let keyMap = this[_keyMap$];
      let hash = (t141 = key, this[_hashCode$0](t141)) & 0x3ffffff;
      let buckets = keyMap.get(hash);
      if (buckets == null) {
        keyMap.set(hash, [key]);
      } else {
        let equals = this[_equals$0];
        for (let i = 0, n = buckets.length; i < n; i = i + 1) {
          let k = buckets[i];
          if (dart.test(equals(k, key))) return false;
        }
        buckets.push(key);
      }
      this[_map$4].add(key);
      this[_modifications$2] = this[_modifications$2] + 1 & 67108863;
      return true;
    }
    addAll(objects) {
      IterableOfE().as(objects);
      if (objects == null) dart.nullFailed(L73, 500, 27, "objects");
      for (let element of objects)
        this.add(element);
    }
    remove(key) {
      let t141;
      if (E.is(key)) {
        let hash = (t141 = key, this[_hashCode$0](t141)) & 0x3ffffff;
        let keyMap = this[_keyMap$];
        let buckets = keyMap.get(hash);
        if (buckets == null) return false;
        let equals = this[_equals$0];
        for (let i = 0, n = buckets.length; i < n; i = i + 1) {
          let k = buckets[i];
          if (dart.test(equals(k, key))) {
            if (n === 1) {
              keyMap.delete(hash);
            } else {
              buckets.splice(i, 1);
            }
            this[_map$4].delete(k);
            this[_modifications$2] = this[_modifications$2] + 1 & 67108863;
            return true;
          }
        }
      }
      return false;
    }
    clear() {
      let map = this[_map$4];
      if (map.size > 0) {
        map.clear();
        this[_keyMap$].clear();
        this[_modifications$2] = this[_modifications$2] + 1 & 67108863;
      }
    }
  }
  (_CustomHashSet.new = function(_equals, _hashCode) {
    if (_equals == null) dart.nullFailed(L73, 448, 23, "_equals");
    if (_hashCode == null) dart.nullFailed(L73, 448, 37, "_hashCode");
    this[_modifications$5] = 0;
    this[_map$7] = new Set();
    this[_keyMap$] = new Map();
    this[_equals$0] = _equals;
    this[_hashCode$0] = _hashCode;
    _CustomHashSet.__proto__.new.call(this);
    ;
  }).prototype = _CustomHashSet.prototype;
  dart.addTypeTests(_CustomHashSet);
  _CustomHashSet.prototype[_is__CustomHashSet_default] = true;
  dart.addTypeCaches(_CustomHashSet);
  _CustomHashSet[dart.implements] = () => [collection.HashSet$(E), collection.LinkedHashSet$(E)];
  dart.setMethodSignature(_CustomHashSet, () => ({
    __proto__: dart.getMethods(_CustomHashSet.__proto__),
    [_newSet]: dart.fnType(core.Set$(E), []),
    [_newSimilarSet]: dart.gFnType(R => [core.Set$(R), []], R => [dart.nullable(core.Object)]),
    contains: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    [$contains]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    lookup: dart.fnType(dart.nullable(E), [dart.nullable(core.Object)]),
    add: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    remove: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(_CustomHashSet, L23);
  dart.setFieldSignature(_CustomHashSet, () => ({
    __proto__: dart.getFields(_CustomHashSet.__proto__),
    [_equals$0]: dart.fieldType(dart.fnType(core.bool, [E, E])),
    [_hashCode$0]: dart.fieldType(dart.fnType(core.int, [E])),
    [_modifications$2]: dart.fieldType(core.int),
    [_map$4]: dart.finalFieldType(dart.dynamic),
    [_keyMap$]: dart.finalFieldType(dart.nullable(core.Object))
  }));
  dart.defineExtensionMethods(_CustomHashSet, ['contains']);
  return _CustomHashSet;
});
collection._CustomHashSet = collection._CustomHashSet$();
dart.addTypeTests(collection._CustomHashSet, _is__CustomHashSet_default);
const _is__CustomKeyHashSet_default = Symbol('_is__CustomKeyHashSet_default');
collection._CustomKeyHashSet$ = dart.generic(E => {
  var _CustomKeyHashSetOfE = () => (_CustomKeyHashSetOfE = dart.constFn(collection._CustomKeyHashSet$(E)))();
  class _CustomKeyHashSet extends collection._CustomHashSet$(E) {
    [_newSet]() {
      return new (_CustomKeyHashSetOfE()).new(this[_equals$0], this[_hashCode$0], this[_validKey$0]);
    }
    [_newSimilarSet](R) {
      return new (collection._HashSet$(R)).new();
    }
    contains(element) {
      let t141;
      if (!dart.test((t141 = element, this[_validKey$0](t141)))) return false;
      return super.contains(element);
    }
    lookup(element) {
      let t141;
      if (!dart.test((t141 = element, this[_validKey$0](t141)))) return null;
      return super.lookup(element);
    }
    remove(element) {
      let t141;
      if (!dart.test((t141 = element, this[_validKey$0](t141)))) return false;
      return super.remove(element);
    }
  }
  (_CustomKeyHashSet.new = function(equals, hashCode, _validKey) {
    if (equals == null) dart.nullFailed(L73, 396, 34, "equals");
    if (hashCode == null) dart.nullFailed(L73, 396, 53, "hashCode");
    if (_validKey == null) dart.nullFailed(L73, 396, 68, "_validKey");
    this[_validKey$0] = _validKey;
    _CustomKeyHashSet.__proto__.new.call(this, equals, hashCode);
    ;
  }).prototype = _CustomKeyHashSet.prototype;
  dart.addTypeTests(_CustomKeyHashSet);
  _CustomKeyHashSet.prototype[_is__CustomKeyHashSet_default] = true;
  dart.addTypeCaches(_CustomKeyHashSet);
  dart.setMethodSignature(_CustomKeyHashSet, () => ({
    __proto__: dart.getMethods(_CustomKeyHashSet.__proto__),
    [_newSimilarSet]: dart.gFnType(R => [core.Set$(R), []], R => [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(_CustomKeyHashSet, L23);
  dart.setFieldSignature(_CustomKeyHashSet, () => ({
    __proto__: dart.getFields(_CustomKeyHashSet.__proto__),
    [_validKey$0]: dart.fieldType(dart.fnType(core.bool, [dart.nullable(core.Object)]))
  }));
  dart.defineExtensionMethods(_CustomKeyHashSet, ['contains']);
  return _CustomKeyHashSet;
});
collection._CustomKeyHashSet = collection._CustomKeyHashSet$();
dart.addTypeTests(collection._CustomKeyHashSet, _is__CustomKeyHashSet_default);
var _source = dart.privateName(collection, "_source");
const _is_UnmodifiableListView_default = Symbol('_is_UnmodifiableListView_default');
collection.UnmodifiableListView$ = dart.generic(E => {
  class UnmodifiableListView extends _internal.UnmodifiableListBase$(E) {
    cast(R) {
      return new (collection.UnmodifiableListView$(R)).new(this[_source][$cast](R));
    }
    get length() {
      return this[_source][$length];
    }
    set length(value) {
      super.length = value;
    }
    _get(index) {
      if (index == null) dart.nullFailed(L75, 23, 21, "index");
      return this[_source][$elementAt](index);
    }
  }
  (UnmodifiableListView.new = function(source) {
    if (source == null) dart.nullFailed(L75, 18, 36, "source");
    this[_source] = source;
    ;
  }).prototype = UnmodifiableListView.prototype;
  dart.addTypeTests(UnmodifiableListView);
  UnmodifiableListView.prototype[_is_UnmodifiableListView_default] = true;
  dart.addTypeCaches(UnmodifiableListView);
  dart.setMethodSignature(UnmodifiableListView, () => ({
    __proto__: dart.getMethods(UnmodifiableListView.__proto__),
    cast: dart.gFnType(R => [core.List$(R), []], R => [dart.nullable(core.Object)]),
    [$cast]: dart.gFnType(R => [core.List$(R), []], R => [dart.nullable(core.Object)]),
    _get: dart.fnType(E, [core.int]),
    [$_get]: dart.fnType(E, [core.int])
  }));
  dart.setGetterSignature(UnmodifiableListView, () => ({
    __proto__: dart.getGetters(UnmodifiableListView.__proto__),
    length: core.int,
    [$length]: core.int
  }));
  dart.setLibraryUri(UnmodifiableListView, L23);
  dart.setFieldSignature(UnmodifiableListView, () => ({
    __proto__: dart.getFields(UnmodifiableListView.__proto__),
    [_source]: dart.finalFieldType(core.Iterable$(E))
  }));
  dart.defineExtensionMethods(UnmodifiableListView, ['cast', '_get']);
  dart.defineExtensionAccessors(UnmodifiableListView, ['length']);
  return UnmodifiableListView;
});
collection.UnmodifiableListView = collection.UnmodifiableListView$();
dart.addTypeTests(collection.UnmodifiableListView, _is_UnmodifiableListView_default);
var C73;
var C74;
var C75;
var C76;
const _is_HashMap_default = Symbol('_is_HashMap_default');
collection.HashMap$ = dart.generic((K, V) => {
  class HashMap extends core.Object {
    static new(opts) {
      let t141, t141$, t141$0;
      let equals = opts && 'equals' in opts ? opts.equals : null;
      let hashCode = opts && 'hashCode' in opts ? opts.hashCode : null;
      let isValidKey = opts && 'isValidKey' in opts ? opts.isValidKey : null;
      if (isValidKey == null) {
        if (hashCode == null) {
          if (equals == null) {
            if (dart.wrapType(K) === dart.wrapType(core.String) || dart.wrapType(K) === dart.wrapType(core.int)) {
              return new (_js_helper.IdentityMap$(K, V)).new();
            }
            return new (_js_helper.LinkedMap$(K, V)).new();
          }
          hashCode = C73 || CT.C73;
        } else if ((C74 || CT.C74) === hashCode && (C75 || CT.C75) === equals) {
          return new (_js_helper.IdentityMap$(K, V)).new();
        }
        return new (_js_helper.CustomHashMap$(K, V)).new((t141 = equals, t141 == null ? C76 || CT.C76 : t141), hashCode);
      }
      return new (_js_helper.CustomKeyHashMap$(K, V)).new((t141$ = equals, t141$ == null ? C76 || CT.C76 : t141$), (t141$0 = hashCode, t141$0 == null ? C73 || CT.C73 : t141$0), isValidKey);
    }
    static from(other) {
      if (other == null) dart.nullFailed(L76, 102, 46, "other");
      let result = new (_js_helper.LinkedMap$(K, V)).new();
      other[$forEach](dart.fn((k, v) => {
        result[$_set](K.as(k), V.as(v));
      }, dynamicAnddynamicToNullN()));
      return result;
    }
    static of(other) {
      let t141;
      if (other == null) dart.nullFailed(L76, 111, 32, "other");
      t141 = new (_js_helper.LinkedMap$(K, V)).new();
      return (() => {
        t141[$addAll](other);
        return t141;
      })();
    }
    static fromIterable(iterable, opts) {
      if (iterable == null) dart.nullFailed(L76, 124, 41, "iterable");
      let key = opts && 'key' in opts ? opts.key : null;
      let value = opts && 'value' in opts ? opts.value : null;
      let map = new (_js_helper.LinkedMap$(K, V)).new();
      collection.MapBase._fillMapWithMappedIterable(map, iterable, key, value);
      return map;
    }
    static fromIterables(keys, values) {
      if (keys == null) dart.nullFailed(L76, 140, 45, "keys");
      if (values == null) dart.nullFailed(L76, 140, 63, "values");
      let map = new (_js_helper.LinkedMap$(K, V)).new();
      collection.MapBase._fillMapWithIterables(map, keys, values);
      return map;
    }
    static fromEntries(entries) {
      let t141;
      if (entries == null) dart.nullFailed(L76, 154, 56, "entries");
      t141 = new (_js_helper.LinkedMap$(K, V)).new();
      return (() => {
        t141[$addEntries](entries);
        return t141;
      })();
    }
  }
  (HashMap[dart.mixinNew] = function() {
  }).prototype = HashMap.prototype;
  HashMap.prototype[dart.isMap] = true;
  dart.addTypeTests(HashMap);
  HashMap.prototype[_is_HashMap_default] = true;
  dart.addTypeCaches(HashMap);
  HashMap[dart.implements] = () => [core.Map$(K, V)];
  dart.setLibraryUri(HashMap, L23);
  return HashMap;
});
collection.HashMap = collection.HashMap$();
dart.addTypeTests(collection.HashMap, _is_HashMap_default);
const _is_HashSet_default = Symbol('_is_HashSet_default');
collection.HashSet$ = dart.generic(E => {
  class HashSet extends core.Object {
    static new(opts) {
      let t141, t141$, t141$0, t141$1;
      let equals = opts && 'equals' in opts ? opts.equals : null;
      let hashCode = opts && 'hashCode' in opts ? opts.hashCode : null;
      let isValidKey = opts && 'isValidKey' in opts ? opts.isValidKey : null;
      if (isValidKey == null) {
        if (hashCode == null) {
          if (equals == null) {
            if (dart.wrapType(E) === dart.wrapType(core.String) || dart.wrapType(E) === dart.wrapType(core.int)) {
              return new (collection._IdentityHashSet$(E)).new();
            }
            return new (collection._HashSet$(E)).new();
          }
        } else if ((C74 || CT.C74) === hashCode && (C75 || CT.C75) === equals) {
          return new (collection._IdentityHashSet$(E)).new();
        }
        return new (collection._CustomHashSet$(E)).new((t141 = equals, t141 == null ? C76 || CT.C76 : t141), (t141$ = hashCode, t141$ == null ? C73 || CT.C73 : t141$));
      }
      return new (collection._CustomKeyHashSet$(E)).new((t141$0 = equals, t141$0 == null ? C76 || CT.C76 : t141$0), (t141$1 = hashCode, t141$1 == null ? C73 || CT.C73 : t141$1), isValidKey);
    }
    static from(elements) {
      if (elements == null) dart.nullFailed(L77, 94, 42, "elements");
      let result = new (collection._HashSet$(E)).new();
      for (let e of elements) {
        result.add(E.as(e));
      }
      return result;
    }
    static of(elements) {
      let t141;
      if (elements == null) dart.nullFailed(L77, 108, 34, "elements");
      t141 = new (collection._HashSet$(E)).new();
      return (() => {
        t141.addAll(elements);
        return t141;
      })();
    }
    [Symbol.iterator]() {
      return new dart.JsIterator(this[$iterator]);
    }
  }
  (HashSet[dart.mixinNew] = function() {
  }).prototype = HashSet.prototype;
  dart.addTypeTests(HashSet);
  HashSet.prototype[_is_HashSet_default] = true;
  dart.addTypeCaches(HashSet);
  HashSet[dart.implements] = () => [core.Set$(E)];
  dart.setLibraryUri(HashSet, L23);
  return HashSet;
});
collection.HashSet = collection.HashSet$();
dart.addTypeTests(collection.HashSet, _is_HashSet_default);
const _is_IterableMixin_default = Symbol('_is_IterableMixin_default');
collection.IterableMixin$ = dart.generic(E => {
  var WhereIterableOfE = () => (WhereIterableOfE = dart.constFn(_internal.WhereIterable$(E)))();
  var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
  var EfficientLengthIterableOfE = () => (EfficientLengthIterableOfE = dart.constFn(_internal.EfficientLengthIterable$(E)))();
  var FollowedByIterableOfE = () => (FollowedByIterableOfE = dart.constFn(_internal.FollowedByIterable$(E)))();
  var EAndEToE = () => (EAndEToE = dart.constFn(dart.fnType(E, [E, E])))();
  var ListOfE = () => (ListOfE = dart.constFn(core.List$(E)))();
  var LinkedHashSetOfE = () => (LinkedHashSetOfE = dart.constFn(collection.LinkedHashSet$(E)))();
  var TakeIterableOfE = () => (TakeIterableOfE = dart.constFn(_internal.TakeIterable$(E)))();
  var TakeWhileIterableOfE = () => (TakeWhileIterableOfE = dart.constFn(_internal.TakeWhileIterable$(E)))();
  var SkipIterableOfE = () => (SkipIterableOfE = dart.constFn(_internal.SkipIterable$(E)))();
  var SkipWhileIterableOfE = () => (SkipWhileIterableOfE = dart.constFn(_internal.SkipWhileIterable$(E)))();
  var VoidToE = () => (VoidToE = dart.constFn(dart.fnType(E, [])))();
  var VoidToNE = () => (VoidToNE = dart.constFn(dart.nullable(VoidToE())))();
  var ETodynamic = () => (ETodynamic = dart.constFn(dart.fnType(dart.dynamic, [E])))();
  class IterableMixin extends core.Object {
    cast(R) {
      return core.Iterable.castFrom(E, R, this);
    }
    map(T, f) {
      if (f == null) dart.nullFailed(L38, 17, 24, "f");
      return _internal.MappedIterable$(E, T).new(this, f);
    }
    where(f) {
      if (f == null) dart.nullFailed(L38, 19, 26, "f");
      return new (WhereIterableOfE()).new(this, f);
    }
    whereType(T) {
      return new (_internal.WhereTypeIterable$(T)).new(this);
    }
    expand(T, f) {
      if (f == null) dart.nullFailed(L38, 23, 37, "f");
      return new (_internal.ExpandIterable$(E, T)).new(this, f);
    }
    followedBy(other) {
      IterableOfE().as(other);
      if (other == null) dart.nullFailed(L38, 26, 38, "other");
      let self = this;
      if (EfficientLengthIterableOfE().is(self)) {
        return FollowedByIterableOfE().firstEfficient(self, other);
      }
      return new (FollowedByIterableOfE()).new(this, other);
    }
    contains(element) {
      for (let e of this) {
        if (dart.equals(e, element)) return true;
      }
      return false;
    }
    forEach(f) {
      if (f == null) dart.nullFailed(L38, 43, 21, "f");
      for (let element of this)
        f(element);
    }
    reduce(combine) {
      EAndEToE().as(combine);
      if (combine == null) dart.nullFailed(L38, 47, 14, "combine");
      let iterator = this[$iterator];
      if (!dart.test(iterator.moveNext())) {
        dart.throw(_internal.IterableElementError.noElement());
      }
      let value = iterator.current;
      while (dart.test(iterator.moveNext())) {
        value = combine(value, iterator.current);
      }
      return value;
    }
    fold(T, initialValue, combine) {
      if (combine == null) dart.nullFailed(L38, 59, 31, "combine");
      let value = initialValue;
      for (let element of this)
        value = combine(value, element);
      return value;
    }
    every(f) {
      if (f == null) dart.nullFailed(L38, 65, 19, "f");
      for (let element of this) {
        if (!dart.test(f(element))) return false;
      }
      return true;
    }
    join(separator = "") {
      if (separator == null) dart.nullFailed(L38, 72, 23, "separator");
      let iterator = this[$iterator];
      if (!dart.test(iterator.moveNext())) return "";
      let buffer = new core.StringBuffer.new();
      if (separator == null || separator === "") {
        do {
          buffer.write(dart.str(iterator.current));
        } while (dart.test(iterator.moveNext()));
      } else {
        buffer.write(dart.str(iterator.current));
        while (dart.test(iterator.moveNext())) {
          buffer.write(separator);
          buffer.write(dart.str(iterator.current));
        }
      }
      return buffer.toString();
    }
    any(test) {
      if (test == null) dart.nullFailed(L38, 90, 17, "test");
      for (let element of this) {
        if (dart.test(test(element))) return true;
      }
      return false;
    }
    toList(opts) {
      let growable = opts && 'growable' in opts ? opts.growable : true;
      if (growable == null) dart.nullFailed(L38, 97, 24, "growable");
      return ListOfE().from(this, {growable: growable});
    }
    toSet() {
      return LinkedHashSetOfE().from(this);
    }
    get length() {
      if (!!_internal.EfficientLengthIterable.is(this)) dart.assertFailed(null, L38, 103, 12, "this is! EfficientLengthIterable");
      let count = 0;
      let it = this[$iterator];
      while (dart.test(it.moveNext())) {
        count = count + 1;
      }
      return count;
    }
    get isEmpty() {
      return !dart.test(this[$iterator].moveNext());
    }
    get isNotEmpty() {
      return !dart.test(this.isEmpty);
    }
    take(count) {
      if (count == null) dart.nullFailed(L38, 116, 24, "count");
      return TakeIterableOfE().new(this, count);
    }
    takeWhile(test) {
      if (test == null) dart.nullFailed(L38, 120, 30, "test");
      return new (TakeWhileIterableOfE()).new(this, test);
    }
    skip(count) {
      if (count == null) dart.nullFailed(L38, 124, 24, "count");
      return SkipIterableOfE().new(this, count);
    }
    skipWhile(test) {
      if (test == null) dart.nullFailed(L38, 128, 30, "test");
      return new (SkipWhileIterableOfE()).new(this, test);
    }
    get first() {
      let it = this[$iterator];
      if (!dart.test(it.moveNext())) {
        dart.throw(_internal.IterableElementError.noElement());
      }
      return it.current;
    }
    get last() {
      let it = this[$iterator];
      if (!dart.test(it.moveNext())) {
        dart.throw(_internal.IterableElementError.noElement());
      }
      let result = null;
      do {
        result = it.current;
      } while (dart.test(it.moveNext()));
      return result;
    }
    get single() {
      let it = this[$iterator];
      if (!dart.test(it.moveNext())) dart.throw(_internal.IterableElementError.noElement());
      let result = it.current;
      if (dart.test(it.moveNext())) dart.throw(_internal.IterableElementError.tooMany());
      return result;
    }
    firstWhere(test, opts) {
      if (test == null) dart.nullFailed(L38, 160, 21, "test");
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToNE().as(orElse);
      for (let element of this) {
        if (dart.test(test(element))) return element;
      }
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    lastWhere(test, opts) {
      if (test == null) dart.nullFailed(L38, 168, 20, "test");
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToNE().as(orElse);
      let result = null;
      let result$35isSet = false;
      function result$35get() {
        return result$35isSet ? result : dart.throw(new _internal.LateInitializationErrorImpl.new("Local 'result' has not been initialized."));
      }
      dart.fn(result$35get, VoidToE());
      function result$35set(t143) {
        result$35isSet = true;
        return result = t143;
      }
      dart.fn(result$35set, ETodynamic());
      let foundMatching = false;
      for (let element of this) {
        if (dart.test(test(element))) {
          result$35set(element);
          foundMatching = true;
        }
      }
      if (foundMatching) return result$35get();
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    singleWhere(test, opts) {
      if (test == null) dart.nullFailed(L38, 182, 22, "test");
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToNE().as(orElse);
      let result = null;
      let result$35isSet = false;
      function result$35get() {
        return result$35isSet ? result : dart.throw(new _internal.LateInitializationErrorImpl.new("Local 'result' has not been initialized."));
      }
      dart.fn(result$35get, VoidToE());
      function result$35set(t147) {
        result$35isSet = true;
        return result = t147;
      }
      dart.fn(result$35set, ETodynamic());
      let foundMatching = false;
      for (let element of this) {
        if (dart.test(test(element))) {
          if (foundMatching) {
            dart.throw(_internal.IterableElementError.tooMany());
          }
          result$35set(element);
          foundMatching = true;
        }
      }
      if (foundMatching) return result$35get();
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    elementAt(index) {
      if (index == null) dart.nullFailed(L38, 199, 19, "index");
      core.ArgumentError.checkNotNull(core.int, index, "index");
      core.RangeError.checkNotNegative(index, "index");
      let elementIndex = 0;
      for (let element of this) {
        if (index === elementIndex) return element;
        elementIndex = elementIndex + 1;
      }
      dart.throw(new core.IndexError.new(index, this, "index", null, elementIndex));
    }
    toString() {
      return collection.IterableBase.iterableToShortString(this, "(", ")");
    }
    [Symbol.iterator]() {
      return new dart.JsIterator(this[$iterator]);
    }
  }
  (IterableMixin.new = function() {
    ;
  }).prototype = IterableMixin.prototype;
  IterableMixin.prototype[dart.isIterable] = true;
  dart.addTypeTests(IterableMixin);
  IterableMixin.prototype[_is_IterableMixin_default] = true;
  dart.addTypeCaches(IterableMixin);
  IterableMixin[dart.implements] = () => [core.Iterable$(E)];
  dart.setMethodSignature(IterableMixin, () => ({
    __proto__: dart.getMethods(IterableMixin.__proto__),
    cast: dart.gFnType(R => [core.Iterable$(R), []], R => [dart.nullable(core.Object)]),
    [$cast]: dart.gFnType(R => [core.Iterable$(R), []], R => [dart.nullable(core.Object)]),
    map: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(T, [E])]], T => [dart.nullable(core.Object)]),
    [$map]: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(T, [E])]], T => [dart.nullable(core.Object)]),
    where: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
    [$where]: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
    whereType: dart.gFnType(T => [core.Iterable$(T), []], T => [dart.nullable(core.Object)]),
    [$whereType]: dart.gFnType(T => [core.Iterable$(T), []], T => [dart.nullable(core.Object)]),
    expand: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(core.Iterable$(T), [E])]], T => [dart.nullable(core.Object)]),
    [$expand]: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(core.Iterable$(T), [E])]], T => [dart.nullable(core.Object)]),
    followedBy: dart.fnType(core.Iterable$(E), [dart.nullable(core.Object)]),
    [$followedBy]: dart.fnType(core.Iterable$(E), [dart.nullable(core.Object)]),
    contains: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    [$contains]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    forEach: dart.fnType(dart.void, [dart.fnType(dart.void, [E])]),
    [$forEach]: dart.fnType(dart.void, [dart.fnType(dart.void, [E])]),
    reduce: dart.fnType(E, [dart.nullable(core.Object)]),
    [$reduce]: dart.fnType(E, [dart.nullable(core.Object)]),
    fold: dart.gFnType(T => [T, [T, dart.fnType(T, [T, E])]], T => [dart.nullable(core.Object)]),
    [$fold]: dart.gFnType(T => [T, [T, dart.fnType(T, [T, E])]], T => [dart.nullable(core.Object)]),
    every: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
    [$every]: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
    join: dart.fnType(core.String, [], [core.String]),
    [$join]: dart.fnType(core.String, [], [core.String]),
    any: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
    [$any]: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
    toList: dart.fnType(core.List$(E), [], {growable: core.bool}, {}),
    [$toList]: dart.fnType(core.List$(E), [], {growable: core.bool}, {}),
    toSet: dart.fnType(core.Set$(E), []),
    [$toSet]: dart.fnType(core.Set$(E), []),
    take: dart.fnType(core.Iterable$(E), [core.int]),
    [$take]: dart.fnType(core.Iterable$(E), [core.int]),
    takeWhile: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
    [$takeWhile]: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
    skip: dart.fnType(core.Iterable$(E), [core.int]),
    [$skip]: dart.fnType(core.Iterable$(E), [core.int]),
    skipWhile: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
    [$skipWhile]: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
    firstWhere: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
    [$firstWhere]: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
    lastWhere: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
    [$lastWhere]: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
    singleWhere: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
    [$singleWhere]: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
    elementAt: dart.fnType(E, [core.int]),
    [$elementAt]: dart.fnType(E, [core.int])
  }));
  dart.setGetterSignature(IterableMixin, () => ({
    __proto__: dart.getGetters(IterableMixin.__proto__),
    length: core.int,
    [$length]: core.int,
    isEmpty: core.bool,
    [$isEmpty]: core.bool,
    isNotEmpty: core.bool,
    [$isNotEmpty]: core.bool,
    first: E,
    [$first]: E,
    last: E,
    [$last]: E,
    single: E,
    [$single]: E
  }));
  dart.setLibraryUri(IterableMixin, L23);
  dart.defineExtensionMethods(IterableMixin, [
    'cast',
    'map',
    'where',
    'whereType',
    'expand',
    'followedBy',
    'contains',
    'forEach',
    'reduce',
    'fold',
    'every',
    'join',
    'any',
    'toList',
    'toSet',
    'take',
    'takeWhile',
    'skip',
    'skipWhile',
    'firstWhere',
    'lastWhere',
    'singleWhere',
    'elementAt',
    'toString'
  ]);
  dart.defineExtensionAccessors(IterableMixin, [
    'length',
    'isEmpty',
    'isNotEmpty',
    'first',
    'last',
    'single'
  ]);
  return IterableMixin;
});
collection.IterableMixin = collection.IterableMixin$();
dart.addTypeTests(collection.IterableMixin, _is_IterableMixin_default);
var _state$ = dart.privateName(collection, "_state");
var _iterator$0 = dart.privateName(collection, "_iterator");
var _move = dart.privateName(collection, "_move");
const _is_HasNextIterator_default = Symbol('_is_HasNextIterator_default');
collection.HasNextIterator$ = dart.generic(E => {
  class HasNextIterator extends core.Object {
    get hasNext() {
      if (this[_state$] === 2) this[_move]();
      return this[_state$] === 0;
    }
    next() {
      if (!dart.test(this.hasNext)) dart.throw(new core.StateError.new("No more elements"));
      if (!(this[_state$] === 0)) dart.assertFailed(null, L78, 30, 12, "_state == _HAS_NEXT_AND_NEXT_IN_CURRENT");
      let result = this[_iterator$0].current;
      this[_move]();
      return result;
    }
    [_move]() {
      if (dart.test(this[_iterator$0].moveNext())) {
        this[_state$] = 0;
      } else {
        this[_state$] = 1;
      }
    }
  }
  (HasNextIterator.new = function(_iterator) {
    if (_iterator == null) dart.nullFailed(L78, 19, 24, "_iterator");
    this[_state$] = 2;
    this[_iterator$0] = _iterator;
    ;
  }).prototype = HasNextIterator.prototype;
  dart.addTypeTests(HasNextIterator);
  HasNextIterator.prototype[_is_HasNextIterator_default] = true;
  dart.addTypeCaches(HasNextIterator);
  dart.setMethodSignature(HasNextIterator, () => ({
    __proto__: dart.getMethods(HasNextIterator.__proto__),
    next: dart.fnType(E, []),
    [_move]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(HasNextIterator, () => ({
    __proto__: dart.getGetters(HasNextIterator.__proto__),
    hasNext: core.bool
  }));
  dart.setLibraryUri(HasNextIterator, L23);
  dart.setFieldSignature(HasNextIterator, () => ({
    __proto__: dart.getFields(HasNextIterator.__proto__),
    [_iterator$0]: dart.fieldType(core.Iterator$(E)),
    [_state$]: dart.fieldType(core.int)
  }));
  return HasNextIterator;
});
collection.HasNextIterator = collection.HasNextIterator$();
dart.defineLazy(collection.HasNextIterator, {
  /*collection.HasNextIterator._HAS_NEXT_AND_NEXT_IN_CURRENT*/get _HAS_NEXT_AND_NEXT_IN_CURRENT() {
    return 0;
  },
  /*collection.HasNextIterator._NO_NEXT*/get _NO_NEXT() {
    return 1;
  },
  /*collection.HasNextIterator._NOT_MOVED_YET*/get _NOT_MOVED_YET() {
    return 2;
  }
}, false);
dart.addTypeTests(collection.HasNextIterator, _is_HasNextIterator_default);
const _is_LinkedHashMap_default = Symbol('_is_LinkedHashMap_default');
collection.LinkedHashMap$ = dart.generic((K, V) => {
  class LinkedHashMap extends core.Object {
    static new(opts) {
      let t149, t149$, t149$0;
      let equals = opts && 'equals' in opts ? opts.equals : null;
      let hashCode = opts && 'hashCode' in opts ? opts.hashCode : null;
      let isValidKey = opts && 'isValidKey' in opts ? opts.isValidKey : null;
      if (isValidKey == null) {
        if (hashCode == null) {
          if (equals == null) {
            if (dart.wrapType(K) === dart.wrapType(core.String) || dart.wrapType(K) === dart.wrapType(core.int)) {
              return new (_js_helper.IdentityMap$(K, V)).new();
            }
            return new (_js_helper.LinkedMap$(K, V)).new();
          }
          hashCode = C73 || CT.C73;
        } else if ((C74 || CT.C74) === hashCode && (C75 || CT.C75) === equals) {
          return new (_js_helper.IdentityMap$(K, V)).new();
        }
        return new (_js_helper.CustomHashMap$(K, V)).new((t149 = equals, t149 == null ? C76 || CT.C76 : t149), hashCode);
      }
      return new (_js_helper.CustomKeyHashMap$(K, V)).new((t149$ = equals, t149$ == null ? C76 || CT.C76 : t149$), (t149$0 = hashCode, t149$0 == null ? C73 || CT.C73 : t149$0), isValidKey);
    }
    static from(other) {
      if (other == null) dart.nullFailed(L79, 86, 52, "other");
      let result = new (_js_helper.LinkedMap$(K, V)).new();
      other[$forEach](dart.fn((k, v) => {
        result[$_set](K.as(k), V.as(v));
      }, dynamicAnddynamicToNullN()));
      return result;
    }
    static of(other) {
      let t149;
      if (other == null) dart.nullFailed(L79, 95, 38, "other");
      t149 = new (_js_helper.LinkedMap$(K, V)).new();
      return (() => {
        t149[$addAll](other);
        return t149;
      })();
    }
    static fromIterable(iterable, opts) {
      if (iterable == null) dart.nullFailed(L79, 109, 47, "iterable");
      let key = opts && 'key' in opts ? opts.key : null;
      let value = opts && 'value' in opts ? opts.value : null;
      let map = new (_js_helper.LinkedMap$(K, V)).new();
      collection.MapBase._fillMapWithMappedIterable(map, iterable, key, value);
      return map;
    }
    static fromIterables(keys, values) {
      if (keys == null) dart.nullFailed(L79, 125, 51, "keys");
      if (values == null) dart.nullFailed(L79, 125, 69, "values");
      let map = new (_js_helper.LinkedMap$(K, V)).new();
      collection.MapBase._fillMapWithIterables(map, keys, values);
      return map;
    }
    static fromEntries(entries) {
      let t149;
      if (entries == null) dart.nullFailed(L79, 139, 62, "entries");
      t149 = new (_js_helper.LinkedMap$(K, V)).new();
      return (() => {
        t149[$addEntries](entries);
        return t149;
      })();
    }
  }
  (LinkedHashMap[dart.mixinNew] = function() {
  }).prototype = LinkedHashMap.prototype;
  LinkedHashMap.prototype[dart.isMap] = true;
  dart.addTypeTests(LinkedHashMap);
  LinkedHashMap.prototype[_is_LinkedHashMap_default] = true;
  dart.addTypeCaches(LinkedHashMap);
  LinkedHashMap[dart.implements] = () => [core.Map$(K, V)];
  dart.setLibraryUri(LinkedHashMap, L23);
  return LinkedHashMap;
});
collection.LinkedHashMap = collection.LinkedHashMap$();
dart.addTypeTests(collection.LinkedHashMap, _is_LinkedHashMap_default);
const _is_LinkedHashSet_default = Symbol('_is_LinkedHashSet_default');
collection.LinkedHashSet$ = dart.generic(E => {
  class LinkedHashSet extends core.Object {
    static new(opts) {
      let t149, t149$, t149$0;
      let equals = opts && 'equals' in opts ? opts.equals : null;
      let hashCode = opts && 'hashCode' in opts ? opts.hashCode : null;
      let isValidKey = opts && 'isValidKey' in opts ? opts.isValidKey : null;
      if (isValidKey == null) {
        if (hashCode == null) {
          if (equals == null) {
            if (dart.wrapType(E) === dart.wrapType(core.String) || dart.wrapType(E) === dart.wrapType(core.int)) {
              return new (collection._IdentityHashSet$(E)).new();
            }
            return new (collection._HashSet$(E)).new();
          }
          hashCode = C73 || CT.C73;
        } else if ((C74 || CT.C74) === hashCode && (C75 || CT.C75) === equals) {
          return new (collection._IdentityHashSet$(E)).new();
        }
        return new (collection._CustomHashSet$(E)).new((t149 = equals, t149 == null ? C76 || CT.C76 : t149), hashCode);
      }
      return new (collection._CustomKeyHashSet$(E)).new((t149$ = equals, t149$ == null ? C76 || CT.C76 : t149$), (t149$0 = hashCode, t149$0 == null ? C73 || CT.C73 : t149$0), isValidKey);
    }
    static from(elements) {
      if (elements == null) dart.nullFailed(L80, 98, 48, "elements");
      let result = new (collection._HashSet$(E)).new();
      for (let element of elements) {
        result.add(E.as(element));
      }
      return result;
    }
    static of(elements) {
      let t149;
      if (elements == null) dart.nullFailed(L80, 110, 40, "elements");
      t149 = new (collection._HashSet$(E)).new();
      return (() => {
        t149.addAll(elements);
        return t149;
      })();
    }
    [Symbol.iterator]() {
      return new dart.JsIterator(this[$iterator]);
    }
  }
  (LinkedHashSet[dart.mixinNew] = function() {
  }).prototype = LinkedHashSet.prototype;
  dart.addTypeTests(LinkedHashSet);
  LinkedHashSet.prototype[_is_LinkedHashSet_default] = true;
  dart.addTypeCaches(LinkedHashSet);
  LinkedHashSet[dart.implements] = () => [core.Set$(E)];
  dart.setLibraryUri(LinkedHashSet, L23);
  return LinkedHashSet;
});
collection.LinkedHashSet = collection.LinkedHashSet$();
dart.addTypeTests(collection.LinkedHashSet, _is_LinkedHashSet_default);
var _modificationCount = dart.privateName(collection, "_modificationCount");
var _length$0 = dart.privateName(collection, "_length");
var _first = dart.privateName(collection, "_first");
var _insertBefore = dart.privateName(collection, "_insertBefore");
var _list$0 = dart.privateName(collection, "_list");
var _unlink = dart.privateName(collection, "_unlink");
var _next$2 = dart.privateName(collection, "_next");
var _previous$2 = dart.privateName(collection, "_previous");
const _is_LinkedList_default$ = Symbol('_is_LinkedList_default');
collection.LinkedList$ = dart.generic(E => {
  var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
  var _LinkedListIteratorOfE = () => (_LinkedListIteratorOfE = dart.constFn(collection._LinkedListIterator$(E)))();
  var EN = () => (EN = dart.constFn(dart.nullable(E)))();
  class LinkedList extends core.Iterable$(E) {
    addFirst(entry) {
      E.as(entry);
      if (entry == null) dart.nullFailed(L81, 37, 19, "entry");
      this[_insertBefore](this[_first], entry, {updateFirst: true});
      this[_first] = entry;
    }
    add(entry) {
      E.as(entry);
      if (entry == null) dart.nullFailed(L81, 43, 14, "entry");
      this[_insertBefore](this[_first], entry, {updateFirst: false});
    }
    addAll(entries) {
      IterableOfE().as(entries);
      if (entries == null) dart.nullFailed(L81, 48, 27, "entries");
      entries[$forEach](dart.bind(this, 'add'));
    }
    remove(entry) {
      E.as(entry);
      if (entry == null) dart.nullFailed(L81, 58, 17, "entry");
      if (!dart.equals(entry[_list$0], this)) return false;
      this[_unlink](entry);
      return true;
    }
    get iterator() {
      return new (_LinkedListIteratorOfE()).new(this);
    }
    get length() {
      return this[_length$0];
    }
    clear() {
      this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
      if (dart.test(this.isEmpty)) return;
      let next = dart.nullCheck(this[_first]);
      do {
        let entry = next;
        next = dart.nullCheck(entry[_next$2]);
        entry[_next$2] = entry[_previous$2] = entry[_list$0] = null;
      } while (next !== this[_first]);
      this[_first] = null;
      this[_length$0] = 0;
    }
    get first() {
      if (dart.test(this.isEmpty)) {
        dart.throw(new core.StateError.new("No such element"));
      }
      return dart.nullCheck(this[_first]);
    }
    get last() {
      if (dart.test(this.isEmpty)) {
        dart.throw(new core.StateError.new("No such element"));
      }
      return dart.nullCheck(dart.nullCheck(this[_first])[_previous$2]);
    }
    get single() {
      if (dart.test(this.isEmpty)) {
        dart.throw(new core.StateError.new("No such element"));
      }
      if (dart.notNull(this[_length$0]) > 1) {
        dart.throw(new core.StateError.new("Too many elements"));
      }
      return dart.nullCheck(this[_first]);
    }
    forEach(action) {
      if (action == null) dart.nullFailed(L81, 111, 21, "action");
      let modificationCount = this[_modificationCount];
      if (dart.test(this.isEmpty)) return;
      let current = dart.nullCheck(this[_first]);
      do {
        action(current);
        if (modificationCount != this[_modificationCount]) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
        current = dart.nullCheck(current[_next$2]);
      } while (current !== this[_first]);
    }
    get isEmpty() {
      return this[_length$0] === 0;
    }
    [_insertBefore](entry, newEntry, opts) {
      EN().as(entry);
      E.as(newEntry);
      if (newEntry == null) dart.nullFailed(L81, 131, 34, "newEntry");
      let updateFirst = opts && 'updateFirst' in opts ? opts.updateFirst : null;
      if (updateFirst == null) dart.nullFailed(L81, 131, 59, "updateFirst");
      if (newEntry.list != null) {
        dart.throw(new core.StateError.new("LinkedListEntry is already in a LinkedList"));
      }
      this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
      newEntry[_list$0] = this;
      if (dart.test(this.isEmpty)) {
        if (!(entry == null)) dart.assertFailed(null, L81, 139, 14, "entry == null");
        newEntry[_previous$2] = newEntry[_next$2] = newEntry;
        this[_first] = newEntry;
        this[_length$0] = dart.notNull(this[_length$0]) + 1;
        return;
      }
      let predecessor = dart.nullCheck(dart.nullCheck(entry)[_previous$2]);
      let successor = entry;
      newEntry[_previous$2] = predecessor;
      newEntry[_next$2] = successor;
      predecessor[_next$2] = newEntry;
      successor[_previous$2] = newEntry;
      if (dart.test(updateFirst) && entry == this[_first]) {
        this[_first] = newEntry;
      }
      this[_length$0] = dart.notNull(this[_length$0]) + 1;
    }
    [_unlink](entry) {
      E.as(entry);
      if (entry == null) dart.nullFailed(L81, 157, 18, "entry");
      this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
      dart.nullCheck(entry[_next$2])[_previous$2] = entry[_previous$2];
      let next = dart.nullCheck(entry[_previous$2])[_next$2] = entry[_next$2];
      this[_length$0] = dart.notNull(this[_length$0]) - 1;
      entry[_list$0] = entry[_next$2] = entry[_previous$2] = null;
      if (dart.test(this.isEmpty)) {
        this[_first] = null;
      } else if (entry == this[_first]) {
        this[_first] = next;
      }
    }
  }
  (LinkedList.new = function() {
    this[_modificationCount] = 0;
    this[_length$0] = 0;
    this[_first] = null;
    LinkedList.__proto__.new.call(this);
    ;
  }).prototype = LinkedList.prototype;
  dart.addTypeTests(LinkedList);
  LinkedList.prototype[_is_LinkedList_default$] = true;
  dart.addTypeCaches(LinkedList);
  dart.setMethodSignature(LinkedList, () => ({
    __proto__: dart.getMethods(LinkedList.__proto__),
    addFirst: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    addAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    remove: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    clear: dart.fnType(dart.void, []),
    [_insertBefore]: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)], {updateFirst: core.bool}, {}),
    [_unlink]: dart.fnType(dart.void, [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(LinkedList, () => ({
    __proto__: dart.getGetters(LinkedList.__proto__),
    iterator: core.Iterator$(E),
    [$iterator]: core.Iterator$(E)
  }));
  dart.setLibraryUri(LinkedList, L23);
  dart.setFieldSignature(LinkedList, () => ({
    __proto__: dart.getFields(LinkedList.__proto__),
    [_modificationCount]: dart.fieldType(core.int),
    [_length$0]: dart.fieldType(core.int),
    [_first]: dart.fieldType(dart.nullable(E))
  }));
  dart.defineExtensionMethods(LinkedList, ['forEach']);
  dart.defineExtensionAccessors(LinkedList, [
    'iterator',
    'length',
    'first',
    'last',
    'single',
    'isEmpty'
  ]);
  return LinkedList;
});
collection.LinkedList = collection.LinkedList$();
dart.addTypeTests(collection.LinkedList, _is_LinkedList_default$);
var _current$1 = dart.privateName(collection, "_current");
var _visitedFirst = dart.privateName(collection, "_visitedFirst");
const _is__LinkedListIterator_default$ = Symbol('_is__LinkedListIterator_default');
collection._LinkedListIterator$ = dart.generic(E => {
  class _LinkedListIterator extends core.Object {
    get current() {
      let cur = this[_current$1];
      return cur != null ? cur : dart.nullCast(cur, E);
    }
    moveNext() {
      if (this[_modificationCount] != this[_list$0][_modificationCount]) {
        dart.throw(new core.ConcurrentModificationError.new(this));
      }
      if (dart.test(this[_list$0].isEmpty) || dart.test(this[_visitedFirst]) && this[_next$2] == this[_list$0].first) {
        this[_current$1] = null;
        return false;
      }
      this[_visitedFirst] = true;
      this[_current$1] = this[_next$2];
      this[_next$2] = dart.nullCheck(this[_next$2])[_next$2];
      return true;
    }
  }
  (_LinkedListIterator.new = function(list) {
    if (list == null) dart.nullFailed(L81, 178, 37, "list");
    this[_current$1] = null;
    this[_list$0] = list;
    this[_modificationCount] = list[_modificationCount];
    this[_next$2] = list[_first];
    this[_visitedFirst] = false;
    ;
  }).prototype = _LinkedListIterator.prototype;
  dart.addTypeTests(_LinkedListIterator);
  _LinkedListIterator.prototype[_is__LinkedListIterator_default$] = true;
  dart.addTypeCaches(_LinkedListIterator);
  _LinkedListIterator[dart.implements] = () => [core.Iterator$(E)];
  dart.setMethodSignature(_LinkedListIterator, () => ({
    __proto__: dart.getMethods(_LinkedListIterator.__proto__),
    moveNext: dart.fnType(core.bool, [])
  }));
  dart.setGetterSignature(_LinkedListIterator, () => ({
    __proto__: dart.getGetters(_LinkedListIterator.__proto__),
    current: E
  }));
  dart.setLibraryUri(_LinkedListIterator, L23);
  dart.setFieldSignature(_LinkedListIterator, () => ({
    __proto__: dart.getFields(_LinkedListIterator.__proto__),
    [_list$0]: dart.finalFieldType(collection.LinkedList$(E)),
    [_modificationCount]: dart.finalFieldType(core.int),
    [_current$1]: dart.fieldType(dart.nullable(E)),
    [_next$2]: dart.fieldType(dart.nullable(E)),
    [_visitedFirst]: dart.fieldType(core.bool)
  }));
  return _LinkedListIterator;
});
collection._LinkedListIterator = collection._LinkedListIterator$();
dart.addTypeTests(collection._LinkedListIterator, _is__LinkedListIterator_default$);
const _is_LinkedListEntry_default$ = Symbol('_is_LinkedListEntry_default');
var _list$1 = dart.privateName(collection, "LinkedListEntry._list");
var _next$3 = dart.privateName(collection, "LinkedListEntry._next");
var _previous$3 = dart.privateName(collection, "LinkedListEntry._previous");
collection.LinkedListEntry$ = dart.generic(E => {
  var LinkedListOfE = () => (LinkedListOfE = dart.constFn(collection.LinkedList$(E)))();
  var LinkedListNOfE = () => (LinkedListNOfE = dart.constFn(dart.nullable(LinkedListOfE())))();
  var EN = () => (EN = dart.constFn(dart.nullable(E)))();
  class LinkedListEntry extends core.Object {
    get [_list$0]() {
      return this[_list$1];
    }
    set [_list$0](value) {
      this[_list$1] = LinkedListNOfE().as(value);
    }
    get [_next$2]() {
      return this[_next$3];
    }
    set [_next$2](value) {
      this[_next$3] = EN().as(value);
    }
    get [_previous$2]() {
      return this[_previous$3];
    }
    set [_previous$2](value) {
      this[_previous$3] = EN().as(value);
    }
    get list() {
      return this[_list$0];
    }
    unlink() {
      dart.nullCheck(this[_list$0])[_unlink](E.as(this));
    }
    get next() {
      if (this[_list$0] == null || dart.nullCheck(this[_list$0]).first == this[_next$2]) return null;
      return this[_next$2];
    }
    get previous() {
      if (this[_list$0] == null || this === dart.nullCheck(this[_list$0]).first) return null;
      return this[_previous$2];
    }
    insertAfter(entry) {
      E.as(entry);
      if (entry == null) dart.nullFailed(L81, 255, 22, "entry");
      dart.nullCheck(this[_list$0])[_insertBefore](this[_next$2], entry, {updateFirst: false});
    }
    insertBefore(entry) {
      E.as(entry);
      if (entry == null) dart.nullFailed(L81, 263, 23, "entry");
      dart.nullCheck(this[_list$0])[_insertBefore](E.as(this), entry, {updateFirst: true});
    }
  }
  (LinkedListEntry.new = function() {
    this[_list$1] = null;
    this[_next$3] = null;
    this[_previous$3] = null;
    ;
  }).prototype = LinkedListEntry.prototype;
  dart.addTypeTests(LinkedListEntry);
  LinkedListEntry.prototype[_is_LinkedListEntry_default$] = true;
  dart.addTypeCaches(LinkedListEntry);
  dart.setMethodSignature(LinkedListEntry, () => ({
    __proto__: dart.getMethods(LinkedListEntry.__proto__),
    unlink: dart.fnType(dart.void, []),
    insertAfter: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    insertBefore: dart.fnType(dart.void, [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(LinkedListEntry, () => ({
    __proto__: dart.getGetters(LinkedListEntry.__proto__),
    list: dart.nullable(collection.LinkedList$(E)),
    next: dart.nullable(E),
    previous: dart.nullable(E)
  }));
  dart.setLibraryUri(LinkedListEntry, L23);
  dart.setFieldSignature(LinkedListEntry, () => ({
    __proto__: dart.getFields(LinkedListEntry.__proto__),
    [_list$0]: dart.fieldType(dart.nullable(collection.LinkedList$(E))),
    [_next$2]: dart.fieldType(dart.nullable(E)),
    [_previous$2]: dart.fieldType(dart.nullable(E))
  }));
  return LinkedListEntry;
});
collection.LinkedListEntry = collection.LinkedListEntry$();
dart.addTypeTests(collection.LinkedListEntry, _is_LinkedListEntry_default$);
const _is__MapBaseValueIterable_default = Symbol('_is__MapBaseValueIterable_default');
collection._MapBaseValueIterable$ = dart.generic((K, V) => {
  var _MapBaseValueIteratorOfK$V = () => (_MapBaseValueIteratorOfK$V = dart.constFn(collection._MapBaseValueIterator$(K, V)))();
  class _MapBaseValueIterable extends _internal.EfficientLengthIterable$(V) {
    get length() {
      return this[_map$4][$length];
    }
    get isEmpty() {
      return this[_map$4][$isEmpty];
    }
    get isNotEmpty() {
      return this[_map$4][$isNotEmpty];
    }
    get first() {
      return V.as(this[_map$4][$_get](this[_map$4][$keys][$first]));
    }
    get single() {
      return V.as(this[_map$4][$_get](this[_map$4][$keys][$single]));
    }
    get last() {
      return V.as(this[_map$4][$_get](this[_map$4][$keys][$last]));
    }
    get iterator() {
      return new (_MapBaseValueIteratorOfK$V()).new(this[_map$4]);
    }
  }
  (_MapBaseValueIterable.new = function(_map) {
    if (_map == null) dart.nullFailed(L35, 227, 30, "_map");
    this[_map$4] = _map;
    _MapBaseValueIterable.__proto__.new.call(this);
    ;
  }).prototype = _MapBaseValueIterable.prototype;
  dart.addTypeTests(_MapBaseValueIterable);
  _MapBaseValueIterable.prototype[_is__MapBaseValueIterable_default] = true;
  dart.addTypeCaches(_MapBaseValueIterable);
  dart.setGetterSignature(_MapBaseValueIterable, () => ({
    __proto__: dart.getGetters(_MapBaseValueIterable.__proto__),
    iterator: core.Iterator$(V),
    [$iterator]: core.Iterator$(V)
  }));
  dart.setLibraryUri(_MapBaseValueIterable, L23);
  dart.setFieldSignature(_MapBaseValueIterable, () => ({
    __proto__: dart.getFields(_MapBaseValueIterable.__proto__),
    [_map$4]: dart.finalFieldType(core.Map$(K, V))
  }));
  dart.defineExtensionAccessors(_MapBaseValueIterable, [
    'length',
    'isEmpty',
    'isNotEmpty',
    'first',
    'single',
    'last',
    'iterator'
  ]);
  return _MapBaseValueIterable;
});
collection._MapBaseValueIterable = collection._MapBaseValueIterable$();
dart.addTypeTests(collection._MapBaseValueIterable, _is__MapBaseValueIterable_default);
var _keys = dart.privateName(collection, "_keys");
const _is__MapBaseValueIterator_default = Symbol('_is__MapBaseValueIterator_default');
collection._MapBaseValueIterator$ = dart.generic((K, V) => {
  class _MapBaseValueIterator extends core.Object {
    moveNext() {
      if (dart.test(this[_keys].moveNext())) {
        this[_current$1] = this[_map$4][$_get](this[_keys].current);
        return true;
      }
      this[_current$1] = null;
      return false;
    }
    get current() {
      let cur = this[_current$1];
      return cur != null ? cur : V.as(cur);
    }
  }
  (_MapBaseValueIterator.new = function(map) {
    if (map == null) dart.nullFailed(L35, 248, 35, "map");
    this[_current$1] = null;
    this[_map$4] = map;
    this[_keys] = map[$keys][$iterator];
    ;
  }).prototype = _MapBaseValueIterator.prototype;
  dart.addTypeTests(_MapBaseValueIterator);
  _MapBaseValueIterator.prototype[_is__MapBaseValueIterator_default] = true;
  dart.addTypeCaches(_MapBaseValueIterator);
  _MapBaseValueIterator[dart.implements] = () => [core.Iterator$(V)];
  dart.setMethodSignature(_MapBaseValueIterator, () => ({
    __proto__: dart.getMethods(_MapBaseValueIterator.__proto__),
    moveNext: dart.fnType(core.bool, [])
  }));
  dart.setGetterSignature(_MapBaseValueIterator, () => ({
    __proto__: dart.getGetters(_MapBaseValueIterator.__proto__),
    current: V
  }));
  dart.setLibraryUri(_MapBaseValueIterator, L23);
  dart.setFieldSignature(_MapBaseValueIterator, () => ({
    __proto__: dart.getFields(_MapBaseValueIterator.__proto__),
    [_keys]: dart.finalFieldType(core.Iterator$(K)),
    [_map$4]: dart.finalFieldType(core.Map$(K, V)),
    [_current$1]: dart.fieldType(dart.nullable(V))
  }));
  return _MapBaseValueIterator;
});
collection._MapBaseValueIterator = collection._MapBaseValueIterator$();
dart.addTypeTests(collection._MapBaseValueIterator, _is__MapBaseValueIterator_default);
const _is_MapView_default = Symbol('_is_MapView_default');
var _map$8 = dart.privateName(collection, "MapView._map");
collection.MapView$ = dart.generic((K, V) => {
  var MapOfK$V = () => (MapOfK$V = dart.constFn(core.Map$(K, V)))();
  var MapEntryOfK$V = () => (MapEntryOfK$V = dart.constFn(core.MapEntry$(K, V)))();
  var IterableOfMapEntryOfK$V = () => (IterableOfMapEntryOfK$V = dart.constFn(core.Iterable$(MapEntryOfK$V())))();
  var KAndVToV = () => (KAndVToV = dart.constFn(dart.fnType(V, [K, V])))();
  var VoidToV = () => (VoidToV = dart.constFn(dart.fnType(V, [])))();
  var VToV = () => (VToV = dart.constFn(dart.fnType(V, [V])))();
  var VoidToNV = () => (VoidToNV = dart.constFn(dart.nullable(VoidToV())))();
  class MapView extends core.Object {
    get [_map$4]() {
      return this[_map$8];
    }
    set [_map$4](value) {
      super[_map$4] = value;
    }
    cast(RK, RV) {
      return this[_map$4][$cast](RK, RV);
    }
    _get(key) {
      return this[_map$4][$_get](key);
    }
    _set(key, value$) {
      let value = value$;
      K.as(key);
      V.as(value);
      this[_map$4][$_set](key, value);
      return value$;
    }
    addAll(other) {
      MapOfK$V().as(other);
      if (other == null) dart.nullFailed(L35, 333, 25, "other");
      this[_map$4][$addAll](other);
    }
    clear() {
      this[_map$4][$clear]();
    }
    putIfAbsent(key, ifAbsent) {
      K.as(key);
      VoidToV().as(ifAbsent);
      if (ifAbsent == null) dart.nullFailed(L35, 341, 26, "ifAbsent");
      return this[_map$4][$putIfAbsent](key, ifAbsent);
    }
    containsKey(key) {
      return this[_map$4][$containsKey](key);
    }
    containsValue(value) {
      return this[_map$4][$containsValue](value);
    }
    forEach(action) {
      if (action == null) dart.nullFailed(L35, 344, 21, "action");
      this[_map$4][$forEach](action);
    }
    get isEmpty() {
      return this[_map$4][$isEmpty];
    }
    get isNotEmpty() {
      return this[_map$4][$isNotEmpty];
    }
    get length() {
      return this[_map$4][$length];
    }
    get keys() {
      return this[_map$4][$keys];
    }
    remove(key) {
      return this[_map$4][$remove](key);
    }
    toString() {
      return dart.toString(this[_map$4]);
    }
    get values() {
      return this[_map$4][$values];
    }
    get entries() {
      return this[_map$4][$entries];
    }
    addEntries(entries) {
      IterableOfMapEntryOfK$V().as(entries);
      if (entries == null) dart.nullFailed(L35, 358, 44, "entries");
      this[_map$4][$addEntries](entries);
    }
    map(K2, V2, transform) {
      if (transform == null) dart.nullFailed(L35, 362, 44, "transform");
      return this[_map$4][$map](K2, V2, transform);
    }
    update(key, update, opts) {
      K.as(key);
      VToV().as(update);
      if (update == null) dart.nullFailed(L35, 365, 21, "update");
      let ifAbsent = opts && 'ifAbsent' in opts ? opts.ifAbsent : null;
      VoidToNV().as(ifAbsent);
      return this[_map$4][$update](key, update, {ifAbsent: ifAbsent});
    }
    updateAll(update) {
      KAndVToV().as(update);
      if (update == null) dart.nullFailed(L35, 368, 20, "update");
      this[_map$4][$updateAll](update);
    }
    removeWhere(test) {
      if (test == null) dart.nullFailed(L35, 372, 25, "test");
      this[_map$4][$removeWhere](test);
    }
  }
  (MapView.new = function(map) {
    if (map == null) dart.nullFailed(L35, 325, 27, "map");
    this[_map$8] = map;
    ;
  }).prototype = MapView.prototype;
  MapView.prototype[dart.isMap] = true;
  dart.addTypeTests(MapView);
  MapView.prototype[_is_MapView_default] = true;
  dart.addTypeCaches(MapView);
  MapView[dart.implements] = () => [core.Map$(K, V)];
  dart.setMethodSignature(MapView, () => ({
    __proto__: dart.getMethods(MapView.__proto__),
    cast: dart.gFnType((RK, RV) => [core.Map$(RK, RV), []], (RK, RV) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    [$cast]: dart.gFnType((RK, RV) => [core.Map$(RK, RV), []], (RK, RV) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    _get: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
    [$_get]: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
    _set: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
    [$_set]: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
    addAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    [$addAll]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    clear: dart.fnType(dart.void, []),
    [$clear]: dart.fnType(dart.void, []),
    putIfAbsent: dart.fnType(V, [dart.nullable(core.Object), dart.nullable(core.Object)]),
    [$putIfAbsent]: dart.fnType(V, [dart.nullable(core.Object), dart.nullable(core.Object)]),
    containsKey: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    [$containsKey]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    containsValue: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    [$containsValue]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    forEach: dart.fnType(dart.void, [dart.fnType(dart.void, [K, V])]),
    [$forEach]: dart.fnType(dart.void, [dart.fnType(dart.void, [K, V])]),
    remove: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
    [$remove]: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
    addEntries: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    [$addEntries]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    map: dart.gFnType((K2, V2) => [core.Map$(K2, V2), [dart.fnType(core.MapEntry$(K2, V2), [K, V])]], (K2, V2) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    [$map]: dart.gFnType((K2, V2) => [core.Map$(K2, V2), [dart.fnType(core.MapEntry$(K2, V2), [K, V])]], (K2, V2) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    update: dart.fnType(V, [dart.nullable(core.Object), dart.nullable(core.Object)], {ifAbsent: dart.nullable(core.Object)}, {}),
    [$update]: dart.fnType(V, [dart.nullable(core.Object), dart.nullable(core.Object)], {ifAbsent: dart.nullable(core.Object)}, {}),
    updateAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    [$updateAll]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    removeWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [K, V])]),
    [$removeWhere]: dart.fnType(dart.void, [dart.fnType(core.bool, [K, V])])
  }));
  dart.setGetterSignature(MapView, () => ({
    __proto__: dart.getGetters(MapView.__proto__),
    isEmpty: core.bool,
    [$isEmpty]: core.bool,
    isNotEmpty: core.bool,
    [$isNotEmpty]: core.bool,
    length: core.int,
    [$length]: core.int,
    keys: core.Iterable$(K),
    [$keys]: core.Iterable$(K),
    values: core.Iterable$(V),
    [$values]: core.Iterable$(V),
    entries: core.Iterable$(core.MapEntry$(K, V)),
    [$entries]: core.Iterable$(core.MapEntry$(K, V))
  }));
  dart.setLibraryUri(MapView, L23);
  dart.setFieldSignature(MapView, () => ({
    __proto__: dart.getFields(MapView.__proto__),
    [_map$4]: dart.finalFieldType(core.Map$(K, V))
  }));
  dart.defineExtensionMethods(MapView, [
    'cast',
    '_get',
    '_set',
    'addAll',
    'clear',
    'putIfAbsent',
    'containsKey',
    'containsValue',
    'forEach',
    'remove',
    'toString',
    'addEntries',
    'map',
    'update',
    'updateAll',
    'removeWhere'
  ]);
  dart.defineExtensionAccessors(MapView, [
    'isEmpty',
    'isNotEmpty',
    'length',
    'keys',
    'values',
    'entries'
  ]);
  return MapView;
});
collection.MapView = collection.MapView$();
dart.addTypeTests(collection.MapView, _is_MapView_default);
const _is_UnmodifiableMapView_default = Symbol('_is_UnmodifiableMapView_default');
collection.UnmodifiableMapView$ = dart.generic((K, V) => {
  const MapView__UnmodifiableMapMixin$36 = class MapView__UnmodifiableMapMixin extends collection.MapView$(K, V) {};
  (MapView__UnmodifiableMapMixin$36.new = function(map) {
    MapView__UnmodifiableMapMixin$36.__proto__.new.call(this, map);
  }).prototype = MapView__UnmodifiableMapMixin$36.prototype;
  dart.applyMixin(MapView__UnmodifiableMapMixin$36, collection._UnmodifiableMapMixin$(K, V));
  class UnmodifiableMapView extends MapView__UnmodifiableMapMixin$36 {
    cast(RK, RV) {
      return new (collection.UnmodifiableMapView$(RK, RV)).new(this[_map$4][$cast](RK, RV));
    }
  }
  (UnmodifiableMapView.new = function(map) {
    if (map == null) dart.nullFailed(L35, 384, 33, "map");
    UnmodifiableMapView.__proto__.new.call(this, map);
    ;
  }).prototype = UnmodifiableMapView.prototype;
  dart.addTypeTests(UnmodifiableMapView);
  UnmodifiableMapView.prototype[_is_UnmodifiableMapView_default] = true;
  dart.addTypeCaches(UnmodifiableMapView);
  dart.setMethodSignature(UnmodifiableMapView, () => ({
    __proto__: dart.getMethods(UnmodifiableMapView.__proto__),
    cast: dart.gFnType((RK, RV) => [core.Map$(RK, RV), []], (RK, RV) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    [$cast]: dart.gFnType((RK, RV) => [core.Map$(RK, RV), []], (RK, RV) => [dart.nullable(core.Object), dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(UnmodifiableMapView, L23);
  dart.defineExtensionMethods(UnmodifiableMapView, ['cast']);
  return UnmodifiableMapView;
});
collection.UnmodifiableMapView = collection.UnmodifiableMapView$();
dart.addTypeTests(collection.UnmodifiableMapView, _is_UnmodifiableMapView_default);
const _is_Queue_default = Symbol('_is_Queue_default');
collection.Queue$ = dart.generic(E => {
  class Queue extends core.Object {
    static castFrom(S, T, source) {
      if (source == null) dart.nullFailed(L82, 55, 43, "source");
      return new (_internal.CastQueue$(S, T)).new(source);
    }
    [Symbol.iterator]() {
      return new dart.JsIterator(this[$iterator]);
    }
  }
  (Queue[dart.mixinNew] = function() {
  }).prototype = Queue.prototype;
  dart.addTypeTests(Queue);
  Queue.prototype[_is_Queue_default] = true;
  dart.addTypeCaches(Queue);
  Queue[dart.implements] = () => [_internal.EfficientLengthIterable$(E)];
  dart.setLibraryUri(Queue, L23);
  return Queue;
});
collection.Queue = collection.Queue$();
dart.addTypeTests(collection.Queue, _is_Queue_default);
var _previousLink = dart.privateName(collection, "_previousLink");
var _nextLink = dart.privateName(collection, "_nextLink");
var _link = dart.privateName(collection, "_link");
const _is__DoubleLink_default = Symbol('_is__DoubleLink_default');
var _previousLink$ = dart.privateName(collection, "_DoubleLink._previousLink");
var _nextLink$ = dart.privateName(collection, "_DoubleLink._nextLink");
collection._DoubleLink$ = dart.generic(Link => {
  var LinkN = () => (LinkN = dart.constFn(dart.nullable(Link)))();
  class _DoubleLink extends core.Object {
    get [_previousLink]() {
      return this[_previousLink$];
    }
    set [_previousLink](value) {
      this[_previousLink$] = LinkN().as(value);
    }
    get [_nextLink]() {
      return this[_nextLink$];
    }
    set [_nextLink](value) {
      this[_nextLink$] = LinkN().as(value);
    }
    [_link](previous, next) {
      this[_nextLink] = next;
      this[_previousLink] = previous;
      if (previous != null) previous[_nextLink] = Link.as(this);
      if (next != null) next[_previousLink] = Link.as(this);
    }
    [_unlink]() {
      if (this[_previousLink] != null) dart.nullCheck(this[_previousLink])[_nextLink] = this[_nextLink];
      if (this[_nextLink] != null) dart.nullCheck(this[_nextLink])[_previousLink] = this[_previousLink];
      this[_nextLink] = null;
      this[_previousLink] = null;
    }
  }
  (_DoubleLink.new = function() {
    this[_previousLink$] = null;
    this[_nextLink$] = null;
    ;
  }).prototype = _DoubleLink.prototype;
  dart.addTypeTests(_DoubleLink);
  _DoubleLink.prototype[_is__DoubleLink_default] = true;
  dart.addTypeCaches(_DoubleLink);
  dart.setMethodSignature(_DoubleLink, () => ({
    __proto__: dart.getMethods(_DoubleLink.__proto__),
    [_link]: dart.fnType(dart.void, [dart.nullable(Link), dart.nullable(Link)]),
    [_unlink]: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(_DoubleLink, L23);
  dart.setFieldSignature(_DoubleLink, () => ({
    __proto__: dart.getFields(_DoubleLink.__proto__),
    [_previousLink]: dart.fieldType(dart.nullable(Link)),
    [_nextLink]: dart.fieldType(dart.nullable(Link))
  }));
  return _DoubleLink;
});
collection._DoubleLink = collection._DoubleLink$();
dart.addTypeTests(collection._DoubleLink, _is__DoubleLink_default);
var _element = dart.privateName(collection, "_element");
const _is_DoubleLinkedQueueEntry_default = Symbol('_is_DoubleLinkedQueueEntry_default');
var _element$ = dart.privateName(collection, "DoubleLinkedQueueEntry._element");
collection.DoubleLinkedQueueEntry$ = dart.generic(E => {
  var DoubleLinkedQueueEntryOfE = () => (DoubleLinkedQueueEntryOfE = dart.constFn(collection.DoubleLinkedQueueEntry$(E)))();
  class DoubleLinkedQueueEntry extends collection._DoubleLink {
    get [_element]() {
      return this[_element$];
    }
    set [_element](value) {
      this[_element$] = value;
    }
    get element() {
      return E.as(this[_element]);
    }
    set element(element) {
      E.as(element);
      this[_element] = element;
    }
    append(e) {
      E.as(e);
      new (DoubleLinkedQueueEntryOfE()).new(e)[_link](this, this[_nextLink]);
    }
    prepend(e) {
      E.as(e);
      new (DoubleLinkedQueueEntryOfE()).new(e)[_link](this[_previousLink], this);
    }
    remove() {
      this[_unlink]();
      return this.element;
    }
    previousEntry() {
      return this[_previousLink];
    }
    nextEntry() {
      return this[_nextLink];
    }
  }
  (DoubleLinkedQueueEntry.new = function(_element) {
    this[_element$] = _element;
    DoubleLinkedQueueEntry.__proto__.new.call(this);
    ;
  }).prototype = DoubleLinkedQueueEntry.prototype;
  dart.addTypeTests(DoubleLinkedQueueEntry);
  DoubleLinkedQueueEntry.prototype[_is_DoubleLinkedQueueEntry_default] = true;
  dart.addTypeCaches(DoubleLinkedQueueEntry);
  dart.setMethodSignature(DoubleLinkedQueueEntry, () => ({
    __proto__: dart.getMethods(DoubleLinkedQueueEntry.__proto__),
    append: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    prepend: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    remove: dart.fnType(E, []),
    previousEntry: dart.fnType(dart.nullable(collection.DoubleLinkedQueueEntry$(E)), []),
    nextEntry: dart.fnType(dart.nullable(collection.DoubleLinkedQueueEntry$(E)), [])
  }));
  dart.setGetterSignature(DoubleLinkedQueueEntry, () => ({
    __proto__: dart.getGetters(DoubleLinkedQueueEntry.__proto__),
    element: E
  }));
  dart.setSetterSignature(DoubleLinkedQueueEntry, () => ({
    __proto__: dart.getSetters(DoubleLinkedQueueEntry.__proto__),
    element: dart.nullable(core.Object)
  }));
  dart.setLibraryUri(DoubleLinkedQueueEntry, L23);
  dart.setFieldSignature(DoubleLinkedQueueEntry, () => ({
    __proto__: dart.getFields(DoubleLinkedQueueEntry.__proto__),
    [_element]: dart.fieldType(dart.nullable(E))
  }));
  return DoubleLinkedQueueEntry;
}, E => {
  dart.setBaseClass(collection.DoubleLinkedQueueEntry$(E), collection._DoubleLink$(collection.DoubleLinkedQueueEntry$(E)));
});
collection.DoubleLinkedQueueEntry = collection.DoubleLinkedQueueEntry$();
dart.addTypeTests(collection.DoubleLinkedQueueEntry, _is_DoubleLinkedQueueEntry_default);
var _queue$ = dart.privateName(collection, "_queue");
var _append = dart.privateName(collection, "_append");
var _prepend = dart.privateName(collection, "_prepend");
var _asNonSentinelEntry = dart.privateName(collection, "_asNonSentinelEntry");
const _is__DoubleLinkedQueueEntry_default = Symbol('_is__DoubleLinkedQueueEntry_default');
collection._DoubleLinkedQueueEntry$ = dart.generic(E => {
  var _DoubleLinkedQueueElementOfE = () => (_DoubleLinkedQueueElementOfE = dart.constFn(collection._DoubleLinkedQueueElement$(E)))();
  var _DoubleLinkedQueueEntryOfE = () => (_DoubleLinkedQueueEntryOfE = dart.constFn(collection._DoubleLinkedQueueEntry$(E)))();
  class _DoubleLinkedQueueEntry extends collection.DoubleLinkedQueueEntry$(E) {
    [_append](e) {
      E.as(e);
      new (_DoubleLinkedQueueElementOfE()).new(e, this[_queue$])[_link](this, this[_nextLink]);
    }
    [_prepend](e) {
      E.as(e);
      new (_DoubleLinkedQueueElementOfE()).new(e, this[_queue$])[_link](this[_previousLink], this);
    }
    get [_element]() {
      return E.as(super[_element]);
    }
    set [_element](value) {
      super[_element] = value;
    }
    nextEntry() {
      let entry = _DoubleLinkedQueueEntryOfE().as(this[_nextLink]);
      return entry[_asNonSentinelEntry]();
    }
    previousEntry() {
      let entry = _DoubleLinkedQueueEntryOfE().as(this[_previousLink]);
      return entry[_asNonSentinelEntry]();
    }
  }
  (_DoubleLinkedQueueEntry.new = function(element, _queue) {
    this[_queue$] = _queue;
    _DoubleLinkedQueueEntry.__proto__.new.call(this, element);
    ;
  }).prototype = _DoubleLinkedQueueEntry.prototype;
  dart.addTypeTests(_DoubleLinkedQueueEntry);
  _DoubleLinkedQueueEntry.prototype[_is__DoubleLinkedQueueEntry_default] = true;
  dart.addTypeCaches(_DoubleLinkedQueueEntry);
  dart.setMethodSignature(_DoubleLinkedQueueEntry, () => ({
    __proto__: dart.getMethods(_DoubleLinkedQueueEntry.__proto__),
    [_append]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    [_prepend]: dart.fnType(dart.void, [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(_DoubleLinkedQueueEntry, () => ({
    __proto__: dart.getGetters(_DoubleLinkedQueueEntry.__proto__),
    [_element]: E
  }));
  dart.setLibraryUri(_DoubleLinkedQueueEntry, L23);
  dart.setFieldSignature(_DoubleLinkedQueueEntry, () => ({
    __proto__: dart.getFields(_DoubleLinkedQueueEntry.__proto__),
    [_queue$]: dart.fieldType(dart.nullable(collection.DoubleLinkedQueue$(E)))
  }));
  return _DoubleLinkedQueueEntry;
});
collection._DoubleLinkedQueueEntry = collection._DoubleLinkedQueueEntry$();
dart.addTypeTests(collection._DoubleLinkedQueueEntry, _is__DoubleLinkedQueueEntry_default);
var _elementCount = dart.privateName(collection, "_elementCount");
var _remove = dart.privateName(collection, "_remove");
const _is__DoubleLinkedQueueElement_default = Symbol('_is__DoubleLinkedQueueElement_default');
collection._DoubleLinkedQueueElement$ = dart.generic(E => {
  class _DoubleLinkedQueueElement extends collection._DoubleLinkedQueueEntry$(E) {
    append(e) {
      let t149;
      E.as(e);
      this[_append](e);
      if (this[_queue$] != null) {
        t149 = dart.nullCheck(this[_queue$]);
        t149[_elementCount] = dart.notNull(t149[_elementCount]) + 1;
      }
    }
    prepend(e) {
      let t149;
      E.as(e);
      this[_prepend](e);
      if (this[_queue$] != null) {
        t149 = dart.nullCheck(this[_queue$]);
        t149[_elementCount] = dart.notNull(t149[_elementCount]) + 1;
      }
    }
    [_remove]() {
      this[_queue$] = null;
      this[_unlink]();
      return this.element;
    }
    remove() {
      let t149;
      if (this[_queue$] != null) {
        t149 = dart.nullCheck(this[_queue$]);
        t149[_elementCount] = dart.notNull(t149[_elementCount]) - 1;
      }
      return this[_remove]();
    }
    [_asNonSentinelEntry]() {
      return this;
    }
  }
  (_DoubleLinkedQueueElement.new = function(element, queue) {
    _DoubleLinkedQueueElement.__proto__.new.call(this, element, queue);
    ;
  }).prototype = _DoubleLinkedQueueElement.prototype;
  dart.addTypeTests(_DoubleLinkedQueueElement);
  _DoubleLinkedQueueElement.prototype[_is__DoubleLinkedQueueElement_default] = true;
  dart.addTypeCaches(_DoubleLinkedQueueElement);
  dart.setMethodSignature(_DoubleLinkedQueueElement, () => ({
    __proto__: dart.getMethods(_DoubleLinkedQueueElement.__proto__),
    [_remove]: dart.fnType(E, []),
    [_asNonSentinelEntry]: dart.fnType(dart.nullable(collection._DoubleLinkedQueueElement$(E)), [])
  }));
  dart.setLibraryUri(_DoubleLinkedQueueElement, L23);
  return _DoubleLinkedQueueElement;
});
collection._DoubleLinkedQueueElement = collection._DoubleLinkedQueueElement$();
dart.addTypeTests(collection._DoubleLinkedQueueElement, _is__DoubleLinkedQueueElement_default);
const _is__DoubleLinkedQueueSentinel_default = Symbol('_is__DoubleLinkedQueueSentinel_default');
collection._DoubleLinkedQueueSentinel$ = dart.generic(E => {
  class _DoubleLinkedQueueSentinel extends collection._DoubleLinkedQueueEntry$(E) {
    [_asNonSentinelEntry]() {
      return null;
    }
    [_remove]() {
      dart.throw(_internal.IterableElementError.noElement());
    }
    get [_element]() {
      dart.throw(_internal.IterableElementError.noElement());
    }
    set [_element](value) {
      super[_element] = value;
    }
  }
  (_DoubleLinkedQueueSentinel.new = function(queue) {
    if (queue == null) dart.nullFailed(L82, 247, 51, "queue");
    _DoubleLinkedQueueSentinel.__proto__.new.call(this, null, queue);
    this[_previousLink] = this;
    this[_nextLink] = this;
  }).prototype = _DoubleLinkedQueueSentinel.prototype;
  dart.addTypeTests(_DoubleLinkedQueueSentinel);
  _DoubleLinkedQueueSentinel.prototype[_is__DoubleLinkedQueueSentinel_default] = true;
  dart.addTypeCaches(_DoubleLinkedQueueSentinel);
  dart.setMethodSignature(_DoubleLinkedQueueSentinel, () => ({
    __proto__: dart.getMethods(_DoubleLinkedQueueSentinel.__proto__),
    [_asNonSentinelEntry]: dart.fnType(dart.nullable(collection.DoubleLinkedQueueEntry$(E)), []),
    [_remove]: dart.fnType(E, [])
  }));
  dart.setLibraryUri(_DoubleLinkedQueueSentinel, L23);
  return _DoubleLinkedQueueSentinel;
});
collection._DoubleLinkedQueueSentinel = collection._DoubleLinkedQueueSentinel$();
dart.addTypeTests(collection._DoubleLinkedQueueSentinel, _is__DoubleLinkedQueueSentinel_default);
var __DoubleLinkedQueue__sentinel = dart.privateName(collection, "_#DoubleLinkedQueue#_sentinel");
var _sentinel = dart.privateName(collection, "_sentinel");
const _is_DoubleLinkedQueue_default = Symbol('_is_DoubleLinkedQueue_default');
collection.DoubleLinkedQueue$ = dart.generic(E => {
  var _DoubleLinkedQueueSentinelOfE = () => (_DoubleLinkedQueueSentinelOfE = dart.constFn(collection._DoubleLinkedQueueSentinel$(E)))();
  var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
  var _DoubleLinkedQueueEntryOfE = () => (_DoubleLinkedQueueEntryOfE = dart.constFn(collection._DoubleLinkedQueueEntry$(E)))();
  var _DoubleLinkedQueueElementOfE = () => (_DoubleLinkedQueueElementOfE = dart.constFn(collection._DoubleLinkedQueueElement$(E)))();
  var _DoubleLinkedQueueIteratorOfE = () => (_DoubleLinkedQueueIteratorOfE = dart.constFn(collection._DoubleLinkedQueueIterator$(E)))();
  class DoubleLinkedQueue extends core.Iterable$(E) {
    get [_sentinel]() {
      let t149;
      t149 = this[__DoubleLinkedQueue__sentinel];
      return t149 == null ? this[__DoubleLinkedQueue__sentinel] = new (_DoubleLinkedQueueSentinelOfE()).new(this) : t149;
    }
    set [_sentinel](t149) {
      if (t149 == null) dart.nullFailed(L82, 271, 38, "null");
      this[__DoubleLinkedQueue__sentinel] = t149;
    }
    static from(elements) {
      if (elements == null) dart.nullFailed(L82, 291, 52, "elements");
      let list = new (collection.DoubleLinkedQueue$(E)).new();
      for (let e of elements) {
        list.addLast(E.as(e));
      }
      return list;
    }
    static of(elements) {
      let t150;
      if (elements == null) dart.nullFailed(L82, 303, 44, "elements");
      t150 = new (collection.DoubleLinkedQueue$(E)).new();
      return (() => {
        t150.addAll(elements);
        return t150;
      })();
    }
    cast(R) {
      return collection.Queue.castFrom(E, R, this);
    }
    get length() {
      return this[_elementCount];
    }
    addLast(value) {
      E.as(value);
      this[_sentinel][_prepend](value);
      this[_elementCount] = dart.notNull(this[_elementCount]) + 1;
    }
    addFirst(value) {
      E.as(value);
      this[_sentinel][_append](value);
      this[_elementCount] = dart.notNull(this[_elementCount]) + 1;
    }
    add(value) {
      E.as(value);
      this[_sentinel][_prepend](value);
      this[_elementCount] = dart.notNull(this[_elementCount]) + 1;
    }
    addAll(iterable) {
      IterableOfE().as(iterable);
      if (iterable == null) dart.nullFailed(L82, 324, 27, "iterable");
      for (let value of iterable) {
        this[_sentinel][_prepend](value);
        this[_elementCount] = dart.notNull(this[_elementCount]) + 1;
      }
    }
    removeLast() {
      let lastEntry = _DoubleLinkedQueueEntryOfE().as(this[_sentinel][_previousLink]);
      let result = lastEntry[_remove]();
      this[_elementCount] = dart.notNull(this[_elementCount]) - 1;
      return result;
    }
    removeFirst() {
      let firstEntry = _DoubleLinkedQueueEntryOfE().as(this[_sentinel][_nextLink]);
      let result = firstEntry[_remove]();
      this[_elementCount] = dart.notNull(this[_elementCount]) - 1;
      return result;
    }
    remove(o) {
      let entry = _DoubleLinkedQueueEntryOfE().as(this[_sentinel][_nextLink]);
      while (entry != this[_sentinel]) {
        let equals = dart.equals(entry[_element], o);
        if (this !== entry[_queue$]) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
        if (equals) {
          entry[_remove]();
          this[_elementCount] = dart.notNull(this[_elementCount]) - 1;
          return true;
        }
        entry = _DoubleLinkedQueueEntryOfE().as(entry[_nextLink]);
      }
      return false;
    }
    [_filter](test, removeMatching) {
      if (test == null) dart.nullFailed(L82, 366, 21, "test");
      if (removeMatching == null) dart.nullFailed(L82, 366, 43, "removeMatching");
      let entry = _DoubleLinkedQueueEntryOfE().as(this[_sentinel][_nextLink]);
      while (entry != this[_sentinel]) {
        let matches = test(entry[_element]);
        if (this !== entry[_queue$]) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
        let next = dart.nullCheck(entry[_nextLink]);
        if (removeMatching == matches) {
          entry[_remove]();
          this[_elementCount] = dart.notNull(this[_elementCount]) - 1;
        }
        entry = _DoubleLinkedQueueEntryOfE().as(next);
      }
    }
    removeWhere(test) {
      if (test == null) dart.nullFailed(L82, 384, 25, "test");
      this[_filter](test, true);
    }
    retainWhere(test) {
      if (test == null) dart.nullFailed(L82, 388, 25, "test");
      this[_filter](test, false);
    }
    get first() {
      let firstEntry = dart.nullCheck(this[_sentinel][_nextLink]);
      return E.as(firstEntry[_element]);
    }
    get last() {
      let lastEntry = dart.nullCheck(this[_sentinel][_previousLink]);
      return E.as(lastEntry[_element]);
    }
    get single() {
      if (this[_sentinel][_nextLink] == this[_sentinel][_previousLink]) {
        let entry = dart.nullCheck(this[_sentinel][_nextLink]);
        return E.as(entry[_element]);
      }
      dart.throw(_internal.IterableElementError.tooMany());
    }
    firstEntry() {
      return this[_sentinel].nextEntry();
    }
    lastEntry() {
      return this[_sentinel].previousEntry();
    }
    get isEmpty() {
      return this[_sentinel][_nextLink] == this[_sentinel];
    }
    clear() {
      this[_sentinel][_nextLink] = this[_sentinel];
      this[_sentinel][_previousLink] = this[_sentinel];
      this[_elementCount] = 0;
    }
    forEachEntry(action) {
      if (action == null) dart.nullFailed(L82, 466, 26, "action");
      let entry = _DoubleLinkedQueueEntryOfE().as(this[_sentinel][_nextLink]);
      while (entry != this[_sentinel]) {
        let element = _DoubleLinkedQueueElementOfE().as(entry);
        let next = _DoubleLinkedQueueEntryOfE().as(element[_nextLink]);
        action(element);
        if (this === entry[_queue$]) {
          next = _DoubleLinkedQueueEntryOfE().as(entry[_nextLink]);
        } else if (this !== next[_queue$]) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
        entry = next;
      }
    }
    get iterator() {
      return new (_DoubleLinkedQueueIteratorOfE()).new(this[_sentinel]);
    }
    toString() {
      return collection.IterableBase.iterableToFullString(this, "{", "}");
    }
  }
  (DoubleLinkedQueue.new = function() {
    this[__DoubleLinkedQueue__sentinel] = null;
    this[_elementCount] = 0;
    DoubleLinkedQueue.__proto__.new.call(this);
    ;
  }).prototype = DoubleLinkedQueue.prototype;
  dart.addTypeTests(DoubleLinkedQueue);
  DoubleLinkedQueue.prototype[_is_DoubleLinkedQueue_default] = true;
  dart.addTypeCaches(DoubleLinkedQueue);
  DoubleLinkedQueue[dart.implements] = () => [collection.Queue$(E)];
  dart.setMethodSignature(DoubleLinkedQueue, () => ({
    __proto__: dart.getMethods(DoubleLinkedQueue.__proto__),
    cast: dart.gFnType(R => [collection.Queue$(R), []], R => [dart.nullable(core.Object)]),
    [$cast]: dart.gFnType(R => [collection.Queue$(R), []], R => [dart.nullable(core.Object)]),
    addLast: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    addFirst: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    addAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    removeLast: dart.fnType(E, []),
    removeFirst: dart.fnType(E, []),
    remove: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    [_filter]: dart.fnType(dart.void, [dart.fnType(core.bool, [E]), core.bool]),
    removeWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
    retainWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
    firstEntry: dart.fnType(dart.nullable(collection.DoubleLinkedQueueEntry$(E)), []),
    lastEntry: dart.fnType(dart.nullable(collection.DoubleLinkedQueueEntry$(E)), []),
    clear: dart.fnType(dart.void, []),
    forEachEntry: dart.fnType(dart.void, [dart.fnType(dart.void, [collection.DoubleLinkedQueueEntry$(E)])])
  }));
  dart.setGetterSignature(DoubleLinkedQueue, () => ({
    __proto__: dart.getGetters(DoubleLinkedQueue.__proto__),
    [_sentinel]: collection._DoubleLinkedQueueSentinel$(E),
    iterator: collection._DoubleLinkedQueueIterator$(E),
    [$iterator]: collection._DoubleLinkedQueueIterator$(E)
  }));
  dart.setSetterSignature(DoubleLinkedQueue, () => ({
    __proto__: dart.getSetters(DoubleLinkedQueue.__proto__),
    [_sentinel]: collection._DoubleLinkedQueueSentinel$(E)
  }));
  dart.setLibraryUri(DoubleLinkedQueue, L23);
  dart.setFieldSignature(DoubleLinkedQueue, () => ({
    __proto__: dart.getFields(DoubleLinkedQueue.__proto__),
    [__DoubleLinkedQueue__sentinel]: dart.fieldType(dart.nullable(collection._DoubleLinkedQueueSentinel$(E))),
    [_elementCount]: dart.fieldType(core.int)
  }));
  dart.defineExtensionMethods(DoubleLinkedQueue, ['cast', 'toString']);
  dart.defineExtensionAccessors(DoubleLinkedQueue, [
    'length',
    'first',
    'last',
    'single',
    'isEmpty',
    'iterator'
  ]);
  return DoubleLinkedQueue;
});
collection.DoubleLinkedQueue = collection.DoubleLinkedQueue$();
dart.addTypeTests(collection.DoubleLinkedQueue, _is_DoubleLinkedQueue_default);
var _nextEntry = dart.privateName(collection, "_nextEntry");
const _is__DoubleLinkedQueueIterator_default = Symbol('_is__DoubleLinkedQueueIterator_default');
collection._DoubleLinkedQueueIterator$ = dart.generic(E => {
  var _DoubleLinkedQueueEntryOfE = () => (_DoubleLinkedQueueEntryOfE = dart.constFn(collection._DoubleLinkedQueueEntry$(E)))();
  class _DoubleLinkedQueueIterator extends core.Object {
    moveNext() {
      if (this[_nextEntry] == this[_sentinel]) {
        this[_current$1] = null;
        this[_nextEntry] = null;
        this[_sentinel] = null;
        return false;
      }
      let elementEntry = _DoubleLinkedQueueEntryOfE().as(this[_nextEntry]);
      if (dart.nullCheck(this[_sentinel])[_queue$] != elementEntry[_queue$]) {
        dart.throw(new core.ConcurrentModificationError.new(dart.nullCheck(this[_sentinel])[_queue$]));
      }
      this[_current$1] = elementEntry[_element];
      this[_nextEntry] = elementEntry[_nextLink];
      return true;
    }
    get current() {
      let cur = this[_current$1];
      return cur != null ? cur : E.as(cur);
    }
  }
  (_DoubleLinkedQueueIterator.new = function(sentinel) {
    if (sentinel == null) dart.nullFailed(L82, 500, 60, "sentinel");
    this[_current$1] = null;
    this[_sentinel] = sentinel;
    this[_nextEntry] = sentinel[_nextLink];
    ;
  }).prototype = _DoubleLinkedQueueIterator.prototype;
  dart.addTypeTests(_DoubleLinkedQueueIterator);
  _DoubleLinkedQueueIterator.prototype[_is__DoubleLinkedQueueIterator_default] = true;
  dart.addTypeCaches(_DoubleLinkedQueueIterator);
  _DoubleLinkedQueueIterator[dart.implements] = () => [core.Iterator$(E)];
  dart.setMethodSignature(_DoubleLinkedQueueIterator, () => ({
    __proto__: dart.getMethods(_DoubleLinkedQueueIterator.__proto__),
    moveNext: dart.fnType(core.bool, [])
  }));
  dart.setGetterSignature(_DoubleLinkedQueueIterator, () => ({
    __proto__: dart.getGetters(_DoubleLinkedQueueIterator.__proto__),
    current: E
  }));
  dart.setLibraryUri(_DoubleLinkedQueueIterator, L23);
  dart.setFieldSignature(_DoubleLinkedQueueIterator, () => ({
    __proto__: dart.getFields(_DoubleLinkedQueueIterator.__proto__),
    [_sentinel]: dart.fieldType(dart.nullable(collection._DoubleLinkedQueueSentinel$(E))),
    [_nextEntry]: dart.fieldType(dart.nullable(collection.DoubleLinkedQueueEntry$(E))),
    [_current$1]: dart.fieldType(dart.nullable(E))
  }));
  return _DoubleLinkedQueueIterator;
});
collection._DoubleLinkedQueueIterator = collection._DoubleLinkedQueueIterator$();
dart.addTypeTests(collection._DoubleLinkedQueueIterator, _is__DoubleLinkedQueueIterator_default);
var _head = dart.privateName(collection, "_head");
var _tail = dart.privateName(collection, "_tail");
var _table = dart.privateName(collection, "_table");
var _checkModification = dart.privateName(collection, "_checkModification");
var _add$ = dart.privateName(collection, "_add");
var _preGrow = dart.privateName(collection, "_preGrow");
var _filterWhere = dart.privateName(collection, "_filterWhere");
var _grow$ = dart.privateName(collection, "_grow");
var _writeToList = dart.privateName(collection, "_writeToList");
const _is_ListQueue_default = Symbol('_is_ListQueue_default');
collection.ListQueue$ = dart.generic(E => {
  var EN = () => (EN = dart.constFn(dart.nullable(E)))();
  var ListOfEN = () => (ListOfEN = dart.constFn(core.List$(EN())))();
  var _ListQueueIteratorOfE = () => (_ListQueueIteratorOfE = dart.constFn(collection._ListQueueIterator$(E)))();
  var ListOfE = () => (ListOfE = dart.constFn(core.List$(E)))();
  var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
  class ListQueue extends _internal.ListIterable$(E) {
    static _calculateCapacity(initialCapacity) {
      if (initialCapacity == null || dart.notNull(initialCapacity) < 8) {
        return 8;
      } else if (!dart.test(collection.ListQueue._isPowerOf2(initialCapacity))) {
        return collection.ListQueue._nextPowerOf2(initialCapacity);
      }
      if (!dart.test(collection.ListQueue._isPowerOf2(initialCapacity))) dart.assertFailed(null, L82, 556, 12, "_isPowerOf2(initialCapacity)");
      return initialCapacity;
    }
    static from(elements) {
      if (elements == null) dart.nullFailed(L82, 573, 44, "elements");
      if (core.List.is(elements)) {
        let length = elements[$length];
        let queue = new (collection.ListQueue$(E)).new(dart.notNull(length) + 1);
        if (!(dart.notNull(queue[_table][$length]) > dart.notNull(length))) dart.assertFailed(null, L82, 577, 14, "queue._table.length > length");
        for (let i = 0; i < dart.notNull(length); i = i + 1) {
          queue[_table][$_set](i, E.as(elements[$_get](i)));
        }
        queue[_tail] = length;
        return queue;
      } else {
        let capacity = 8;
        if (_internal.EfficientLengthIterable.is(elements)) {
          capacity = elements[$length];
        }
        let result = new (collection.ListQueue$(E)).new(capacity);
        for (let element of elements) {
          result.addLast(E.as(element));
        }
        return result;
      }
    }
    static of(elements) {
      let t150;
      if (elements == null) dart.nullFailed(L82, 600, 36, "elements");
      t150 = new (collection.ListQueue$(E)).new();
      return (() => {
        t150.addAll(elements);
        return t150;
      })();
    }
    cast(R) {
      return collection.Queue.castFrom(E, R, this);
    }
    get iterator() {
      return new (_ListQueueIteratorOfE()).new(this);
    }
    forEach(f) {
      if (f == null) dart.nullFailed(L82, 608, 21, "f");
      let modificationCount = this[_modificationCount];
      for (let i = this[_head]; i != this[_tail]; i = (dart.notNull(i) + 1 & dart.notNull(this[_table][$length]) - 1) >>> 0) {
        f(E.as(this[_table][$_get](i)));
        this[_checkModification](modificationCount);
      }
    }
    get isEmpty() {
      return this[_head] == this[_tail];
    }
    get length() {
      return (dart.notNull(this[_tail]) - dart.notNull(this[_head]) & dart.notNull(this[_table][$length]) - 1) >>> 0;
    }
    get first() {
      if (this[_head] == this[_tail]) dart.throw(_internal.IterableElementError.noElement());
      return E.as(this[_table][$_get](this[_head]));
    }
    get last() {
      if (this[_head] == this[_tail]) dart.throw(_internal.IterableElementError.noElement());
      return E.as(this[_table][$_get]((dart.notNull(this[_tail]) - 1 & dart.notNull(this[_table][$length]) - 1) >>> 0));
    }
    get single() {
      if (this[_head] == this[_tail]) dart.throw(_internal.IterableElementError.noElement());
      if (dart.notNull(this.length) > 1) dart.throw(_internal.IterableElementError.tooMany());
      return E.as(this[_table][$_get](this[_head]));
    }
    elementAt(index) {
      if (index == null) dart.nullFailed(L82, 636, 19, "index");
      core.RangeError.checkValidIndex(index, this);
      return E.as(this[_table][$_get]((dart.notNull(this[_head]) + dart.notNull(index) & dart.notNull(this[_table][$length]) - 1) >>> 0));
    }
    toList(opts) {
      let growable = opts && 'growable' in opts ? opts.growable : true;
      if (growable == null) dart.nullFailed(L82, 641, 24, "growable");
      let mask = dart.notNull(this[_table][$length]) - 1;
      let length = (dart.notNull(this[_tail]) - dart.notNull(this[_head]) & mask) >>> 0;
      if (length === 0) return ListOfE().empty({growable: growable});
      let list = ListOfE().filled(length, this.first, {growable: growable});
      for (let i = 0; i < length; i = i + 1) {
        list[$_set](i, E.as(this[_table][$_get]((dart.notNull(this[_head]) + i & mask) >>> 0)));
      }
      return list;
    }
    add(value) {
      E.as(value);
      this[_add$](value);
    }
    addAll(elements) {
      IterableOfE().as(elements);
      if (elements == null) dart.nullFailed(L82, 659, 27, "elements");
      if (ListOfE().is(elements)) {
        let list = elements;
        let addCount = list[$length];
        let length = this.length;
        if (dart.notNull(length) + dart.notNull(addCount) >= dart.notNull(this[_table][$length])) {
          this[_preGrow](dart.notNull(length) + dart.notNull(addCount));
          this[_table][$setRange](length, dart.notNull(length) + dart.notNull(addCount), list, 0);
          this[_tail] = dart.notNull(this[_tail]) + dart.notNull(addCount);
        } else {
          let endSpace = dart.notNull(this[_table][$length]) - dart.notNull(this[_tail]);
          if (dart.notNull(addCount) < endSpace) {
            this[_table][$setRange](this[_tail], dart.notNull(this[_tail]) + dart.notNull(addCount), list, 0);
            this[_tail] = dart.notNull(this[_tail]) + dart.notNull(addCount);
          } else {
            let preSpace = dart.notNull(addCount) - endSpace;
            this[_table][$setRange](this[_tail], dart.notNull(this[_tail]) + endSpace, list, 0);
            this[_table][$setRange](0, preSpace, list, endSpace);
            this[_tail] = preSpace;
          }
        }
        this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
      } else {
        for (let element of elements)
          this[_add$](element);
      }
    }
    remove(value) {
      for (let i = this[_head]; i != this[_tail]; i = (dart.notNull(i) + 1 & dart.notNull(this[_table][$length]) - 1) >>> 0) {
        let element = this[_table][$_get](i);
        if (dart.equals(element, value)) {
          this[_remove](i);
          this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
          return true;
        }
      }
      return false;
    }
    [_filterWhere](test, removeMatching) {
      if (test == null) dart.nullFailed(L82, 700, 26, "test");
      if (removeMatching == null) dart.nullFailed(L82, 700, 48, "removeMatching");
      let modificationCount = this[_modificationCount];
      let i = this[_head];
      while (i != this[_tail]) {
        let element = E.as(this[_table][$_get](i));
        let remove = removeMatching == test(element);
        this[_checkModification](modificationCount);
        if (remove) {
          i = this[_remove](i);
          modificationCount = this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
        } else {
          i = (dart.notNull(i) + 1 & dart.notNull(this[_table][$length]) - 1) >>> 0;
        }
      }
    }
    removeWhere(test) {
      if (test == null) dart.nullFailed(L82, 720, 25, "test");
      this[_filterWhere](test, true);
    }
    retainWhere(test) {
      if (test == null) dart.nullFailed(L82, 728, 25, "test");
      this[_filterWhere](test, false);
    }
    clear() {
      if (this[_head] != this[_tail]) {
        for (let i = this[_head]; i != this[_tail]; i = (dart.notNull(i) + 1 & dart.notNull(this[_table][$length]) - 1) >>> 0) {
          this[_table][$_set](i, null);
        }
        this[_head] = this[_tail] = 0;
        this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
      }
    }
    toString() {
      return collection.IterableBase.iterableToFullString(this, "{", "}");
    }
    addLast(value) {
      E.as(value);
      this[_add$](value);
    }
    addFirst(value) {
      E.as(value);
      this[_head] = (dart.notNull(this[_head]) - 1 & dart.notNull(this[_table][$length]) - 1) >>> 0;
      this[_table][$_set](this[_head], value);
      if (this[_head] == this[_tail]) this[_grow$]();
      this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
    }
    removeFirst() {
      if (this[_head] == this[_tail]) dart.throw(_internal.IterableElementError.noElement());
      this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
      let result = E.as(this[_table][$_get](this[_head]));
      this[_table][$_set](this[_head], null);
      this[_head] = (dart.notNull(this[_head]) + 1 & dart.notNull(this[_table][$length]) - 1) >>> 0;
      return result;
    }
    removeLast() {
      if (this[_head] == this[_tail]) dart.throw(_internal.IterableElementError.noElement());
      this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
      this[_tail] = (dart.notNull(this[_tail]) - 1 & dart.notNull(this[_table][$length]) - 1) >>> 0;
      let result = E.as(this[_table][$_get](this[_tail]));
      this[_table][$_set](this[_tail], null);
      return result;
    }
    static _isPowerOf2(number) {
      if (number == null) dart.nullFailed(L82, 780, 31, "number");
      return (dart.notNull(number) & dart.notNull(number) - 1) === 0;
    }
    static _nextPowerOf2(number) {
      if (number == null) dart.nullFailed(L82, 787, 32, "number");
      if (!(dart.notNull(number) > 0)) dart.assertFailed(null, L82, 788, 12, "number > 0");
      number = (dart.notNull(number) << 1 >>> 0) - 1;
      for (;;) {
        let nextNumber = (dart.notNull(number) & dart.notNull(number) - 1) >>> 0;
        if (nextNumber === 0) return number;
        number = nextNumber;
      }
    }
    [_checkModification](expectedModificationCount) {
      if (expectedModificationCount == null) dart.nullFailed(L82, 798, 31, "expectedModificationCount");
      if (expectedModificationCount != this[_modificationCount]) {
        dart.throw(new core.ConcurrentModificationError.new(this));
      }
    }
    [_add$](element) {
      this[_table][$_set](this[_tail], element);
      this[_tail] = (dart.notNull(this[_tail]) + 1 & dart.notNull(this[_table][$length]) - 1) >>> 0;
      if (this[_head] == this[_tail]) this[_grow$]();
      this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
    }
    [_remove](offset) {
      if (offset == null) dart.nullFailed(L82, 820, 19, "offset");
      let mask = dart.notNull(this[_table][$length]) - 1;
      let startDistance = (dart.notNull(offset) - dart.notNull(this[_head]) & mask) >>> 0;
      let endDistance = (dart.notNull(this[_tail]) - dart.notNull(offset) & mask) >>> 0;
      if (startDistance < endDistance) {
        let i = offset;
        while (i != this[_head]) {
          let prevOffset = (dart.notNull(i) - 1 & mask) >>> 0;
          this[_table][$_set](i, this[_table][$_get](prevOffset));
          i = prevOffset;
        }
        this[_table][$_set](this[_head], null);
        this[_head] = (dart.notNull(this[_head]) + 1 & mask) >>> 0;
        return (dart.notNull(offset) + 1 & mask) >>> 0;
      } else {
        this[_tail] = (dart.notNull(this[_tail]) - 1 & mask) >>> 0;
        let i = offset;
        while (i != this[_tail]) {
          let nextOffset = (dart.notNull(i) + 1 & mask) >>> 0;
          this[_table][$_set](i, this[_table][$_get](nextOffset));
          i = nextOffset;
        }
        this[_table][$_set](this[_tail], null);
        return offset;
      }
    }
    [_grow$]() {
      let newTable = ListOfEN().filled(dart.notNull(this[_table][$length]) * 2, null);
      let split = dart.notNull(this[_table][$length]) - dart.notNull(this[_head]);
      newTable[$setRange](0, split, this[_table], this[_head]);
      newTable[$setRange](split, split + dart.notNull(this[_head]), this[_table], 0);
      this[_head] = 0;
      this[_tail] = this[_table][$length];
      this[_table] = newTable;
    }
    [_writeToList](target) {
      if (target == null) dart.nullFailed(L82, 859, 29, "target");
      if (!(dart.notNull(target[$length]) >= dart.notNull(this.length))) dart.assertFailed(null, L82, 860, 12, "target.length >= length");
      if (dart.notNull(this[_head]) <= dart.notNull(this[_tail])) {
        let length = dart.notNull(this[_tail]) - dart.notNull(this[_head]);
        target[$setRange](0, length, this[_table], this[_head]);
        return length;
      } else {
        let firstPartSize = dart.notNull(this[_table][$length]) - dart.notNull(this[_head]);
        target[$setRange](0, firstPartSize, this[_table], this[_head]);
        target[$setRange](firstPartSize, firstPartSize + dart.notNull(this[_tail]), this[_table], 0);
        return dart.notNull(this[_tail]) + firstPartSize;
      }
    }
    [_preGrow](newElementCount) {
      if (newElementCount == null) dart.nullFailed(L82, 874, 21, "newElementCount");
      if (!(dart.notNull(newElementCount) >= dart.notNull(this.length))) dart.assertFailed(null, L82, 875, 12, "newElementCount >= length");
      newElementCount = dart.notNull(newElementCount) + newElementCount[$rightShift](1);
      let newCapacity = collection.ListQueue._nextPowerOf2(newElementCount);
      let newTable = ListOfEN().filled(newCapacity, null);
      this[_tail] = this[_writeToList](newTable);
      this[_table] = newTable;
      this[_head] = 0;
    }
  }
  (ListQueue.new = function(initialCapacity = null) {
    this[_modificationCount] = 0;
    this[_head] = 0;
    this[_tail] = 0;
    this[_table] = ListOfEN().filled(collection.ListQueue._calculateCapacity(initialCapacity), null);
    ListQueue.__proto__.new.call(this);
    ;
  }).prototype = ListQueue.prototype;
  dart.addTypeTests(ListQueue);
  ListQueue.prototype[_is_ListQueue_default] = true;
  dart.addTypeCaches(ListQueue);
  ListQueue[dart.implements] = () => [collection.Queue$(E)];
  dart.setMethodSignature(ListQueue, () => ({
    __proto__: dart.getMethods(ListQueue.__proto__),
    cast: dart.gFnType(R => [collection.Queue$(R), []], R => [dart.nullable(core.Object)]),
    [$cast]: dart.gFnType(R => [collection.Queue$(R), []], R => [dart.nullable(core.Object)]),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    addAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    remove: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    [_filterWhere]: dart.fnType(dart.void, [dart.fnType(core.bool, [E]), core.bool]),
    removeWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
    retainWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
    clear: dart.fnType(dart.void, []),
    addLast: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    addFirst: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    removeFirst: dart.fnType(E, []),
    removeLast: dart.fnType(E, []),
    [_checkModification]: dart.fnType(dart.void, [core.int]),
    [_add$]: dart.fnType(dart.void, [E]),
    [_remove]: dart.fnType(core.int, [core.int]),
    [_grow$]: dart.fnType(dart.void, []),
    [_writeToList]: dart.fnType(core.int, [core.List$(dart.nullable(E))]),
    [_preGrow]: dart.fnType(dart.void, [core.int])
  }));
  dart.setLibraryUri(ListQueue, L23);
  dart.setFieldSignature(ListQueue, () => ({
    __proto__: dart.getFields(ListQueue.__proto__),
    [_table]: dart.fieldType(core.List$(dart.nullable(E))),
    [_head]: dart.fieldType(core.int),
    [_tail]: dart.fieldType(core.int),
    [_modificationCount]: dart.fieldType(core.int)
  }));
  dart.defineExtensionMethods(ListQueue, [
    'cast',
    'forEach',
    'elementAt',
    'toList',
    'toString'
  ]);
  dart.defineExtensionAccessors(ListQueue, [
    'iterator',
    'isEmpty',
    'length',
    'first',
    'last',
    'single'
  ]);
  return ListQueue;
});
collection.ListQueue = collection.ListQueue$();
dart.defineLazy(collection.ListQueue, {
  /*collection.ListQueue._INITIAL_CAPACITY*/get _INITIAL_CAPACITY() {
    return 8;
  }
}, false);
dart.addTypeTests(collection.ListQueue, _is_ListQueue_default);
var _end = dart.privateName(collection, "_end");
var _position = dart.privateName(collection, "_position");
const _is__ListQueueIterator_default = Symbol('_is__ListQueueIterator_default');
collection._ListQueueIterator$ = dart.generic(E => {
  class _ListQueueIterator extends core.Object {
    get current() {
      let cur = this[_current$1];
      return cur != null ? cur : E.as(cur);
    }
    moveNext() {
      this[_queue$][_checkModification](this[_modificationCount]);
      if (this[_position] == this[_end]) {
        this[_current$1] = null;
        return false;
      }
      this[_current$1] = this[_queue$][_table][$_get](this[_position]);
      this[_position] = (dart.notNull(this[_position]) + 1 & dart.notNull(this[_queue$][_table][$length]) - 1) >>> 0;
      return true;
    }
  }
  (_ListQueueIterator.new = function(queue) {
    if (queue == null) dart.nullFailed(L82, 898, 35, "queue");
    this[_current$1] = null;
    this[_queue$] = queue;
    this[_end] = queue[_tail];
    this[_modificationCount] = queue[_modificationCount];
    this[_position] = queue[_head];
    ;
  }).prototype = _ListQueueIterator.prototype;
  dart.addTypeTests(_ListQueueIterator);
  _ListQueueIterator.prototype[_is__ListQueueIterator_default] = true;
  dart.addTypeCaches(_ListQueueIterator);
  _ListQueueIterator[dart.implements] = () => [core.Iterator$(E)];
  dart.setMethodSignature(_ListQueueIterator, () => ({
    __proto__: dart.getMethods(_ListQueueIterator.__proto__),
    moveNext: dart.fnType(core.bool, [])
  }));
  dart.setGetterSignature(_ListQueueIterator, () => ({
    __proto__: dart.getGetters(_ListQueueIterator.__proto__),
    current: E
  }));
  dart.setLibraryUri(_ListQueueIterator, L23);
  dart.setFieldSignature(_ListQueueIterator, () => ({
    __proto__: dart.getFields(_ListQueueIterator.__proto__),
    [_queue$]: dart.finalFieldType(collection.ListQueue$(E)),
    [_end]: dart.finalFieldType(core.int),
    [_modificationCount]: dart.finalFieldType(core.int),
    [_position]: dart.fieldType(core.int),
    [_current$1]: dart.fieldType(dart.nullable(E))
  }));
  return _ListQueueIterator;
});
collection._ListQueueIterator = collection._ListQueueIterator$();
dart.addTypeTests(collection._ListQueueIterator, _is__ListQueueIterator_default);
const _is_SetMixin_default = Symbol('_is_SetMixin_default');
collection.SetMixin$ = dart.generic(E => {
  var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
  var FollowedByIterableOfE = () => (FollowedByIterableOfE = dart.constFn(_internal.FollowedByIterable$(E)))();
  var SetOfE = () => (SetOfE = dart.constFn(core.Set$(E)))();
  var ListOfE = () => (ListOfE = dart.constFn(core.List$(E)))();
  var WhereIterableOfE = () => (WhereIterableOfE = dart.constFn(_internal.WhereIterable$(E)))();
  var EAndEToE = () => (EAndEToE = dart.constFn(dart.fnType(E, [E, E])))();
  var TakeIterableOfE = () => (TakeIterableOfE = dart.constFn(_internal.TakeIterable$(E)))();
  var TakeWhileIterableOfE = () => (TakeWhileIterableOfE = dart.constFn(_internal.TakeWhileIterable$(E)))();
  var SkipIterableOfE = () => (SkipIterableOfE = dart.constFn(_internal.SkipIterable$(E)))();
  var SkipWhileIterableOfE = () => (SkipWhileIterableOfE = dart.constFn(_internal.SkipWhileIterable$(E)))();
  var VoidToE = () => (VoidToE = dart.constFn(dart.fnType(E, [])))();
  var VoidToNE = () => (VoidToNE = dart.constFn(dart.nullable(VoidToE())))();
  var ETodynamic = () => (ETodynamic = dart.constFn(dart.fnType(dart.dynamic, [E])))();
  class SetMixin extends core.Object {
    [Symbol.iterator]() {
      return new dart.JsIterator(this[$iterator]);
    }
    get isEmpty() {
      return this.length === 0;
    }
    get isNotEmpty() {
      return this.length !== 0;
    }
    cast(R) {
      return core.Set.castFrom(E, R, this);
    }
    followedBy(other) {
      IterableOfE().as(other);
      if (other == null) dart.nullFailed(L74, 47, 38, "other");
      return FollowedByIterableOfE().firstEfficient(this, other);
    }
    whereType(T) {
      return new (_internal.WhereTypeIterable$(T)).new(this);
    }
    clear() {
      this.removeAll(this.toList());
    }
    addAll(elements) {
      IterableOfE().as(elements);
      if (elements == null) dart.nullFailed(L74, 56, 27, "elements");
      for (let element of elements)
        this.add(element);
    }
    removeAll(elements) {
      if (elements == null) dart.nullFailed(L74, 60, 36, "elements");
      for (let element of elements)
        this.remove(element);
    }
    retainAll(elements) {
      if (elements == null) dart.nullFailed(L74, 64, 36, "elements");
      let toRemove = this.toSet();
      for (let o of elements) {
        toRemove.remove(o);
      }
      this.removeAll(toRemove);
    }
    removeWhere(test) {
      if (test == null) dart.nullFailed(L74, 74, 25, "test");
      let toRemove = JSArrayOfObjectN().of([]);
      for (let element of this) {
        if (dart.test(test(element))) toRemove[$add](element);
      }
      this.removeAll(toRemove);
    }
    retainWhere(test) {
      if (test == null) dart.nullFailed(L74, 82, 25, "test");
      let toRemove = JSArrayOfObjectN().of([]);
      for (let element of this) {
        if (!dart.test(test(element))) toRemove[$add](element);
      }
      this.removeAll(toRemove);
    }
    containsAll(other) {
      if (other == null) dart.nullFailed(L74, 90, 38, "other");
      for (let o of other) {
        if (!dart.test(this.contains(o))) return false;
      }
      return true;
    }
    union(other) {
      let t150;
      SetOfE().as(other);
      if (other == null) dart.nullFailed(L74, 97, 23, "other");
      t150 = this.toSet();
      return (() => {
        t150.addAll(other);
        return t150;
      })();
    }
    intersection(other) {
      if (other == null) dart.nullFailed(L74, 101, 36, "other");
      let result = this.toSet();
      for (let element of this) {
        if (!dart.test(other.contains(element))) result.remove(element);
      }
      return result;
    }
    difference(other) {
      if (other == null) dart.nullFailed(L74, 109, 34, "other");
      let result = this.toSet();
      for (let element of this) {
        if (dart.test(other.contains(element))) result.remove(element);
      }
      return result;
    }
    toList(opts) {
      let growable = opts && 'growable' in opts ? opts.growable : true;
      if (growable == null) dart.nullFailed(L74, 117, 24, "growable");
      return ListOfE().of(this, {growable: growable});
    }
    map(T, f) {
      if (f == null) dart.nullFailed(L74, 120, 24, "f");
      return new (_internal.EfficientLengthMappedIterable$(E, T)).new(this, f);
    }
    get single() {
      if (dart.notNull(this.length) > 1) dart.throw(_internal.IterableElementError.tooMany());
      let it = this.iterator;
      if (!dart.test(it.moveNext())) dart.throw(_internal.IterableElementError.noElement());
      let result = it.current;
      return result;
    }
    toString() {
      return collection.IterableBase.iterableToFullString(this, "{", "}");
    }
    where(f) {
      if (f == null) dart.nullFailed(L74, 136, 26, "f");
      return new (WhereIterableOfE()).new(this, f);
    }
    expand(T, f) {
      if (f == null) dart.nullFailed(L74, 138, 37, "f");
      return new (_internal.ExpandIterable$(E, T)).new(this, f);
    }
    forEach(f) {
      if (f == null) dart.nullFailed(L74, 141, 21, "f");
      for (let element of this)
        f(element);
    }
    reduce(combine) {
      EAndEToE().as(combine);
      if (combine == null) dart.nullFailed(L74, 145, 14, "combine");
      let iterator = this.iterator;
      if (!dart.test(iterator.moveNext())) {
        dart.throw(_internal.IterableElementError.noElement());
      }
      let value = iterator.current;
      while (dart.test(iterator.moveNext())) {
        value = combine(value, iterator.current);
      }
      return value;
    }
    fold(T, initialValue, combine) {
      if (combine == null) dart.nullFailed(L74, 157, 31, "combine");
      let value = initialValue;
      for (let element of this)
        value = combine(value, element);
      return value;
    }
    every(f) {
      if (f == null) dart.nullFailed(L74, 163, 19, "f");
      for (let element of this) {
        if (!dart.test(f(element))) return false;
      }
      return true;
    }
    join(separator = "") {
      if (separator == null) dart.nullFailed(L74, 170, 23, "separator");
      let iterator = this.iterator;
      if (!dart.test(iterator.moveNext())) return "";
      let buffer = new core.StringBuffer.new();
      if (separator == null || separator === "") {
        do {
          buffer.write(iterator.current);
        } while (dart.test(iterator.moveNext()));
      } else {
        buffer.write(iterator.current);
        while (dart.test(iterator.moveNext())) {
          buffer.write(separator);
          buffer.write(iterator.current);
        }
      }
      return buffer.toString();
    }
    any(test) {
      if (test == null) dart.nullFailed(L74, 188, 17, "test");
      for (let element of this) {
        if (dart.test(test(element))) return true;
      }
      return false;
    }
    take(n) {
      if (n == null) dart.nullFailed(L74, 195, 24, "n");
      return TakeIterableOfE().new(this, n);
    }
    takeWhile(test) {
      if (test == null) dart.nullFailed(L74, 199, 30, "test");
      return new (TakeWhileIterableOfE()).new(this, test);
    }
    skip(n) {
      if (n == null) dart.nullFailed(L74, 203, 24, "n");
      return SkipIterableOfE().new(this, n);
    }
    skipWhile(test) {
      if (test == null) dart.nullFailed(L74, 207, 30, "test");
      return new (SkipWhileIterableOfE()).new(this, test);
    }
    get first() {
      let it = this.iterator;
      if (!dart.test(it.moveNext())) {
        dart.throw(_internal.IterableElementError.noElement());
      }
      return it.current;
    }
    get last() {
      let it = this.iterator;
      if (!dart.test(it.moveNext())) {
        dart.throw(_internal.IterableElementError.noElement());
      }
      let result = null;
      do {
        result = it.current;
      } while (dart.test(it.moveNext()));
      return result;
    }
    firstWhere(test, opts) {
      if (test == null) dart.nullFailed(L74, 231, 21, "test");
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToNE().as(orElse);
      for (let element of this) {
        if (dart.test(test(element))) return element;
      }
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    lastWhere(test, opts) {
      if (test == null) dart.nullFailed(L74, 239, 20, "test");
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToNE().as(orElse);
      let result = null;
      let result$35isSet = false;
      function result$35get() {
        return result$35isSet ? result : dart.throw(new _internal.LateInitializationErrorImpl.new("Local 'result' has not been initialized."));
      }
      dart.fn(result$35get, VoidToE());
      function result$35set(t152) {
        result$35isSet = true;
        return result = t152;
      }
      dart.fn(result$35set, ETodynamic());
      let foundMatching = false;
      for (let element of this) {
        if (dart.test(test(element))) {
          result$35set(element);
          foundMatching = true;
        }
      }
      if (foundMatching) return result$35get();
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    singleWhere(test, opts) {
      if (test == null) dart.nullFailed(L74, 253, 22, "test");
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToNE().as(orElse);
      let result = null;
      let result$35isSet = false;
      function result$35get() {
        return result$35isSet ? result : dart.throw(new _internal.LateInitializationErrorImpl.new("Local 'result' has not been initialized."));
      }
      dart.fn(result$35get, VoidToE());
      function result$35set(t156) {
        result$35isSet = true;
        return result = t156;
      }
      dart.fn(result$35set, ETodynamic());
      let foundMatching = false;
      for (let element of this) {
        if (dart.test(test(element))) {
          if (foundMatching) {
            dart.throw(_internal.IterableElementError.tooMany());
          }
          result$35set(element);
          foundMatching = true;
        }
      }
      if (foundMatching) return result$35get();
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    elementAt(index) {
      if (index == null) dart.nullFailed(L74, 270, 19, "index");
      core.ArgumentError.checkNotNull(core.int, index, "index");
      core.RangeError.checkNotNegative(index, "index");
      let elementIndex = 0;
      for (let element of this) {
        if (index === elementIndex) return element;
        elementIndex = elementIndex + 1;
      }
      dart.throw(new core.IndexError.new(index, this, "index", null, elementIndex));
    }
  }
  (SetMixin.new = function() {
    ;
  }).prototype = SetMixin.prototype;
  dart.addTypeTests(SetMixin);
  SetMixin.prototype[_is_SetMixin_default] = true;
  dart.addTypeCaches(SetMixin);
  SetMixin[dart.implements] = () => [core.Set$(E)];
  dart.setMethodSignature(SetMixin, () => ({
    __proto__: dart.getMethods(SetMixin.__proto__),
    cast: dart.gFnType(R => [core.Set$(R), []], R => [dart.nullable(core.Object)]),
    [$cast]: dart.gFnType(R => [core.Set$(R), []], R => [dart.nullable(core.Object)]),
    followedBy: dart.fnType(core.Iterable$(E), [dart.nullable(core.Object)]),
    [$followedBy]: dart.fnType(core.Iterable$(E), [dart.nullable(core.Object)]),
    whereType: dart.gFnType(T => [core.Iterable$(T), []], T => [dart.nullable(core.Object)]),
    [$whereType]: dart.gFnType(T => [core.Iterable$(T), []], T => [dart.nullable(core.Object)]),
    clear: dart.fnType(dart.void, []),
    addAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    removeAll: dart.fnType(dart.void, [core.Iterable$(dart.nullable(core.Object))]),
    retainAll: dart.fnType(dart.void, [core.Iterable$(dart.nullable(core.Object))]),
    removeWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
    retainWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
    containsAll: dart.fnType(core.bool, [core.Iterable$(dart.nullable(core.Object))]),
    union: dart.fnType(core.Set$(E), [dart.nullable(core.Object)]),
    intersection: dart.fnType(core.Set$(E), [core.Set$(dart.nullable(core.Object))]),
    difference: dart.fnType(core.Set$(E), [core.Set$(dart.nullable(core.Object))]),
    toList: dart.fnType(core.List$(E), [], {growable: core.bool}, {}),
    [$toList]: dart.fnType(core.List$(E), [], {growable: core.bool}, {}),
    map: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(T, [E])]], T => [dart.nullable(core.Object)]),
    [$map]: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(T, [E])]], T => [dart.nullable(core.Object)]),
    where: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
    [$where]: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
    expand: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(core.Iterable$(T), [E])]], T => [dart.nullable(core.Object)]),
    [$expand]: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(core.Iterable$(T), [E])]], T => [dart.nullable(core.Object)]),
    forEach: dart.fnType(dart.void, [dart.fnType(dart.void, [E])]),
    [$forEach]: dart.fnType(dart.void, [dart.fnType(dart.void, [E])]),
    reduce: dart.fnType(E, [dart.nullable(core.Object)]),
    [$reduce]: dart.fnType(E, [dart.nullable(core.Object)]),
    fold: dart.gFnType(T => [T, [T, dart.fnType(T, [T, E])]], T => [dart.nullable(core.Object)]),
    [$fold]: dart.gFnType(T => [T, [T, dart.fnType(T, [T, E])]], T => [dart.nullable(core.Object)]),
    every: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
    [$every]: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
    join: dart.fnType(core.String, [], [core.String]),
    [$join]: dart.fnType(core.String, [], [core.String]),
    any: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
    [$any]: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
    take: dart.fnType(core.Iterable$(E), [core.int]),
    [$take]: dart.fnType(core.Iterable$(E), [core.int]),
    takeWhile: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
    [$takeWhile]: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
    skip: dart.fnType(core.Iterable$(E), [core.int]),
    [$skip]: dart.fnType(core.Iterable$(E), [core.int]),
    skipWhile: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
    [$skipWhile]: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
    firstWhere: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
    [$firstWhere]: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
    lastWhere: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
    [$lastWhere]: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
    singleWhere: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
    [$singleWhere]: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
    elementAt: dart.fnType(E, [core.int]),
    [$elementAt]: dart.fnType(E, [core.int])
  }));
  dart.setGetterSignature(SetMixin, () => ({
    __proto__: dart.getGetters(SetMixin.__proto__),
    isEmpty: core.bool,
    [$isEmpty]: core.bool,
    isNotEmpty: core.bool,
    [$isNotEmpty]: core.bool,
    single: E,
    [$single]: E,
    first: E,
    [$first]: E,
    last: E,
    [$last]: E
  }));
  dart.setLibraryUri(SetMixin, L23);
  dart.defineExtensionMethods(SetMixin, [
    'cast',
    'followedBy',
    'whereType',
    'toList',
    'map',
    'toString',
    'where',
    'expand',
    'forEach',
    'reduce',
    'fold',
    'every',
    'join',
    'any',
    'take',
    'takeWhile',
    'skip',
    'skipWhile',
    'firstWhere',
    'lastWhere',
    'singleWhere',
    'elementAt'
  ]);
  dart.defineExtensionAccessors(SetMixin, [
    'isEmpty',
    'isNotEmpty',
    'single',
    'first',
    'last'
  ]);
  return SetMixin;
});
collection.SetMixin = collection.SetMixin$();
dart.addTypeTests(collection.SetMixin, _is_SetMixin_default);
const _is_SetBase_default = Symbol('_is_SetBase_default');
collection.SetBase$ = dart.generic(E => {
  const Object_SetMixin$36 = class Object_SetMixin extends core.Object {};
  (Object_SetMixin$36.new = function() {
  }).prototype = Object_SetMixin$36.prototype;
  dart.applyMixin(Object_SetMixin$36, collection.SetMixin$(E));
  class SetBase extends Object_SetMixin$36 {
    static setToString(set) {
      if (set == null) dart.nullFailed(L74, 306, 33, "set");
      return collection.IterableBase.iterableToFullString(set, "{", "}");
    }
  }
  (SetBase.new = function() {
    ;
  }).prototype = SetBase.prototype;
  dart.addTypeTests(SetBase);
  SetBase.prototype[_is_SetBase_default] = true;
  dart.addTypeCaches(SetBase);
  dart.setLibraryUri(SetBase, L23);
  return SetBase;
});
collection.SetBase = collection.SetBase$();
dart.addTypeTests(collection.SetBase, _is_SetBase_default);
const _is__UnmodifiableSet_default = Symbol('_is__UnmodifiableSet_default');
var _map$9 = dart.privateName(collection, "_UnmodifiableSet._map");
collection._UnmodifiableSet$ = dart.generic(E => {
  var _HashSetOfE = () => (_HashSetOfE = dart.constFn(collection._HashSet$(E)))();
  var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
  class _UnmodifiableSet extends collection._SetBase$(E) {
    get [_map$4]() {
      return this[_map$9];
    }
    set [_map$4](value) {
      super[_map$4] = value;
    }
    [_newSet]() {
      return new (_HashSetOfE()).new();
    }
    [_newSimilarSet](R) {
      return new (collection._HashSet$(R)).new();
    }
    contains(element) {
      return this[_map$4][$containsKey](element);
    }
    get iterator() {
      return this[_map$4][$keys][$iterator];
    }
    get length() {
      return this[_map$4][$length];
    }
    lookup(element) {
      for (let key of this[_map$4][$keys]) {
        if (dart.equals(key, element)) return key;
      }
      return null;
    }
    add(value) {
      E.as(value);
      dart.throw(new core.UnsupportedError.new("Cannot change unmodifiable set"));
    }
    clear() {
      dart.throw(new core.UnsupportedError.new("Cannot change unmodifiable set"));
    }
    addAll(elements) {
      IterableOfE().as(elements);
      if (elements == null) dart.nullFailed(L74, 603, 27, "elements");
      dart.throw(new core.UnsupportedError.new("Cannot change unmodifiable set"));
    }
    removeAll(elements) {
      if (elements == null) dart.nullFailed(L74, 607, 36, "elements");
      dart.throw(new core.UnsupportedError.new("Cannot change unmodifiable set"));
    }
    retainAll(elements) {
      if (elements == null) dart.nullFailed(L74, 611, 36, "elements");
      dart.throw(new core.UnsupportedError.new("Cannot change unmodifiable set"));
    }
    removeWhere(test) {
      if (test == null) dart.nullFailed(L74, 615, 25, "test");
      dart.throw(new core.UnsupportedError.new("Cannot change unmodifiable set"));
    }
    retainWhere(test) {
      if (test == null) dart.nullFailed(L74, 619, 25, "test");
      dart.throw(new core.UnsupportedError.new("Cannot change unmodifiable set"));
    }
    remove(value) {
      dart.throw(new core.UnsupportedError.new("Cannot change unmodifiable set"));
    }
  }
  (_UnmodifiableSet.new = function(_map) {
    if (_map == null) dart.nullFailed(L74, 572, 31, "_map");
    this[_map$9] = _map;
    _UnmodifiableSet.__proto__.new.call(this);
    ;
  }).prototype = _UnmodifiableSet.prototype;
  dart.addTypeTests(_UnmodifiableSet);
  _UnmodifiableSet.prototype[_is__UnmodifiableSet_default] = true;
  dart.addTypeCaches(_UnmodifiableSet);
  dart.setMethodSignature(_UnmodifiableSet, () => ({
    __proto__: dart.getMethods(_UnmodifiableSet.__proto__),
    [_newSet]: dart.fnType(core.Set$(E), []),
    [_newSimilarSet]: dart.gFnType(R => [core.Set$(R), []], R => [dart.nullable(core.Object)]),
    contains: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    [$contains]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    lookup: dart.fnType(dart.nullable(E), [dart.nullable(core.Object)]),
    add: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    remove: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(_UnmodifiableSet, () => ({
    __proto__: dart.getGetters(_UnmodifiableSet.__proto__),
    iterator: core.Iterator$(E),
    [$iterator]: core.Iterator$(E),
    length: core.int,
    [$length]: core.int
  }));
  dart.setLibraryUri(_UnmodifiableSet, L23);
  dart.setFieldSignature(_UnmodifiableSet, () => ({
    __proto__: dart.getFields(_UnmodifiableSet.__proto__),
    [_map$4]: dart.finalFieldType(core.Map$(E, core.Null))
  }));
  dart.defineExtensionMethods(_UnmodifiableSet, ['contains']);
  dart.defineExtensionAccessors(_UnmodifiableSet, ['iterator', 'length']);
  return _UnmodifiableSet;
});
collection._UnmodifiableSet = collection._UnmodifiableSet$();
dart.addTypeTests(collection._UnmodifiableSet, _is__UnmodifiableSet_default);
const _is__SplayTreeNode_default = Symbol('_is__SplayTreeNode_default');
var left = dart.privateName(collection, "_SplayTreeNode.left");
var right = dart.privateName(collection, "_SplayTreeNode.right");
collection._SplayTreeNode$ = dart.generic((K, Node) => {
  var NodeN = () => (NodeN = dart.constFn(dart.nullable(Node)))();
  class _SplayTreeNode extends core.Object {
    get left() {
      return this[left];
    }
    set left(value) {
      this[left] = NodeN().as(value);
    }
    get right() {
      return this[right];
    }
    set right(value) {
      this[right] = NodeN().as(value);
    }
  }
  (_SplayTreeNode.new = function(key) {
    this[left] = null;
    this[right] = null;
    this.key = key;
    ;
  }).prototype = _SplayTreeNode.prototype;
  dart.addTypeTests(_SplayTreeNode);
  _SplayTreeNode.prototype[_is__SplayTreeNode_default] = true;
  dart.addTypeCaches(_SplayTreeNode);
  dart.setLibraryUri(_SplayTreeNode, L23);
  dart.setFieldSignature(_SplayTreeNode, () => ({
    __proto__: dart.getFields(_SplayTreeNode.__proto__),
    key: dart.finalFieldType(K),
    left: dart.fieldType(dart.nullable(Node)),
    right: dart.fieldType(dart.nullable(Node))
  }));
  return _SplayTreeNode;
});
collection._SplayTreeNode = collection._SplayTreeNode$();
dart.addTypeTests(collection._SplayTreeNode, _is__SplayTreeNode_default);
const _is__SplayTreeSetNode_default = Symbol('_is__SplayTreeSetNode_default');
collection._SplayTreeSetNode$ = dart.generic(K => {
  class _SplayTreeSetNode extends collection._SplayTreeNode {}
  (_SplayTreeSetNode.new = function(key) {
    _SplayTreeSetNode.__proto__.new.call(this, key);
    ;
  }).prototype = _SplayTreeSetNode.prototype;
  dart.addTypeTests(_SplayTreeSetNode);
  _SplayTreeSetNode.prototype[_is__SplayTreeSetNode_default] = true;
  dart.addTypeCaches(_SplayTreeSetNode);
  dart.setLibraryUri(_SplayTreeSetNode, L23);
  return _SplayTreeSetNode;
}, K => {
  dart.setBaseClass(collection._SplayTreeSetNode$(K), collection._SplayTreeNode$(K, collection._SplayTreeSetNode$(K)));
});
collection._SplayTreeSetNode = collection._SplayTreeSetNode$();
dart.addTypeTests(collection._SplayTreeSetNode, _is__SplayTreeSetNode_default);
const _is__SplayTreeMapNode_default = Symbol('_is__SplayTreeMapNode_default');
var value$2 = dart.privateName(collection, "_SplayTreeMapNode.value");
collection._SplayTreeMapNode$ = dart.generic((K, V) => {
  class _SplayTreeMapNode extends collection._SplayTreeNode {
    get value() {
      return this[value$2];
    }
    set value(value) {
      this[value$2] = V.as(value);
    }
  }
  (_SplayTreeMapNode.new = function(key, value) {
    this[value$2] = value;
    _SplayTreeMapNode.__proto__.new.call(this, key);
    ;
  }).prototype = _SplayTreeMapNode.prototype;
  dart.addTypeTests(_SplayTreeMapNode);
  _SplayTreeMapNode.prototype[_is__SplayTreeMapNode_default] = true;
  dart.addTypeCaches(_SplayTreeMapNode);
  dart.setLibraryUri(_SplayTreeMapNode, L23);
  dart.setFieldSignature(_SplayTreeMapNode, () => ({
    __proto__: dart.getFields(_SplayTreeMapNode.__proto__),
    value: dart.fieldType(V)
  }));
  return _SplayTreeMapNode;
}, (K, V) => {
  dart.setBaseClass(collection._SplayTreeMapNode$(K, V), collection._SplayTreeNode$(K, collection._SplayTreeMapNode$(K, V)));
});
collection._SplayTreeMapNode = collection._SplayTreeMapNode$();
dart.addTypeTests(collection._SplayTreeMapNode, _is__SplayTreeMapNode_default);
var _count$ = dart.privateName(collection, "_count");
var _splayCount = dart.privateName(collection, "_splayCount");
var _root = dart.privateName(collection, "_root");
var _compare = dart.privateName(collection, "_compare");
var _splay = dart.privateName(collection, "_splay");
var _splayMin = dart.privateName(collection, "_splayMin");
var _splayMax = dart.privateName(collection, "_splayMax");
var _addNewRoot = dart.privateName(collection, "_addNewRoot");
var _last$ = dart.privateName(collection, "_last");
var _clear$ = dart.privateName(collection, "_clear");
const _is__SplayTree_default = Symbol('_is__SplayTree_default');
collection._SplayTree$ = dart.generic((K, Node) => {
  class _SplayTree extends core.Object {
    [_splay](key) {
      K.as(key);
      if (this[_root] == null) return -1;
      let right = null;
      let newTreeRight = null;
      let left = null;
      let newTreeLeft = null;
      let current = dart.nullCheck(this[_root]);
      let compare = this[_compare];
      let comp = null;
      while (true) {
        comp = compare(current.key, key);
        if (dart.notNull(comp) > 0) {
          let currentLeft = current.left;
          if (currentLeft == null) break;
          comp = compare(currentLeft.key, key);
          if (dart.notNull(comp) > 0) {
            current.left = currentLeft.right;
            currentLeft.right = current;
            current = currentLeft;
            currentLeft = current.left;
            if (currentLeft == null) break;
          }
          if (right == null) {
            newTreeRight = current;
          } else {
            right.left = current;
          }
          right = current;
          current = currentLeft;
        } else if (dart.notNull(comp) < 0) {
          let currentRight = current.right;
          if (currentRight == null) break;
          comp = compare(currentRight.key, key);
          if (dart.notNull(comp) < 0) {
            current.right = currentRight.left;
            currentRight.left = current;
            current = currentRight;
            currentRight = current.right;
            if (currentRight == null) break;
          }
          if (left == null) {
            newTreeLeft = current;
          } else {
            left.right = current;
          }
          left = current;
          current = currentRight;
        } else {
          break;
        }
      }
      if (left != null) {
        left.right = current.left;
        current.left = newTreeLeft;
      }
      if (right != null) {
        right.left = current.right;
        current.right = newTreeRight;
      }
      this[_root] = current;
      this[_splayCount] = dart.notNull(this[_splayCount]) + 1;
      return comp;
    }
    [_splayMin](node) {
      if (node == null) dart.nullFailed(L83, 159, 23, "node");
      let current = node;
      let nextLeft = current.left;
      while (nextLeft != null) {
        let left = nextLeft;
        current.left = left.right;
        left.right = current;
        current = left;
        nextLeft = current.left;
      }
      return current;
    }
    [_splayMax](node) {
      if (node == null) dart.nullFailed(L83, 177, 23, "node");
      let current = node;
      let nextRight = current.right;
      while (nextRight != null) {
        let right = nextRight;
        current.right = right.left;
        right.left = current;
        current = right;
        nextRight = current.right;
      }
      return current;
    }
    [_remove](key) {
      if (this[_root] == null) return null;
      let comp = this[_splay](key);
      if (comp !== 0) return null;
      let root = dart.nullCheck(this[_root]);
      let result = root;
      let left = root.left;
      this[_count$] = dart.notNull(this[_count$]) - 1;
      if (left == null) {
        this[_root] = root.right;
      } else {
        let right = root.right;
        root = this[_splayMax](left);
        root.right = right;
        this[_root] = root;
      }
      this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
      return result;
    }
    [_addNewRoot](node, comp) {
      if (node == null) dart.nullFailed(L83, 219, 25, "node");
      if (comp == null) dart.nullFailed(L83, 219, 35, "comp");
      this[_count$] = dart.notNull(this[_count$]) + 1;
      this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
      let root = this[_root];
      if (root == null) {
        this[_root] = node;
        return;
      }
      if (dart.notNull(comp) < 0) {
        node.left = root;
        node.right = root.right;
        root.right = null;
      } else {
        node.right = root;
        node.left = root.left;
        root.left = null;
      }
      this[_root] = node;
    }
    get [_first]() {
      let root = this[_root];
      if (root == null) return null;
      this[_root] = this[_splayMin](root);
      return this[_root];
    }
    get [_last$]() {
      let root = this[_root];
      if (root == null) return null;
      this[_root] = this[_splayMax](root);
      return this[_root];
    }
    [_clear$]() {
      this[_root] = null;
      this[_count$] = 0;
      this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
    }
  }
  (_SplayTree.new = function() {
    this[_count$] = 0;
    this[_modificationCount] = 0;
    this[_splayCount] = 0;
    ;
  }).prototype = _SplayTree.prototype;
  dart.addTypeTests(_SplayTree);
  _SplayTree.prototype[_is__SplayTree_default] = true;
  dart.addTypeCaches(_SplayTree);
  dart.setMethodSignature(_SplayTree, () => ({
    __proto__: dart.getMethods(_SplayTree.__proto__),
    [_splay]: dart.fnType(core.int, [dart.nullable(core.Object)]),
    [_splayMin]: dart.fnType(Node, [Node]),
    [_splayMax]: dart.fnType(Node, [Node]),
    [_remove]: dart.fnType(dart.nullable(Node), [K]),
    [_addNewRoot]: dart.fnType(dart.void, [Node, core.int]),
    [_clear$]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(_SplayTree, () => ({
    __proto__: dart.getGetters(_SplayTree.__proto__),
    [_first]: dart.nullable(Node),
    [_last$]: dart.nullable(Node)
  }));
  dart.setLibraryUri(_SplayTree, L23);
  dart.setFieldSignature(_SplayTree, () => ({
    __proto__: dart.getFields(_SplayTree.__proto__),
    [_count$]: dart.fieldType(core.int),
    [_modificationCount]: dart.fieldType(core.int),
    [_splayCount]: dart.fieldType(core.int)
  }));
  return _SplayTree;
});
collection._SplayTree = collection._SplayTree$();
dart.addTypeTests(collection._SplayTree, _is__SplayTree_default);
const _is_SplayTreeMap_default = Symbol('_is_SplayTreeMap_default');
var _root$ = dart.privateName(collection, "SplayTreeMap._root");
var _compare$ = dart.privateName(collection, "SplayTreeMap._compare");
var _validKey = dart.privateName(collection, "SplayTreeMap._validKey");
collection.SplayTreeMap$ = dart.generic((K, V) => {
  var _SplayTreeMapNodeOfK$V = () => (_SplayTreeMapNodeOfK$V = dart.constFn(collection._SplayTreeMapNode$(K, V)))();
  var MapOfK$V = () => (MapOfK$V = dart.constFn(core.Map$(K, V)))();
  var KAndVToNullN = () => (KAndVToNullN = dart.constFn(dart.fnType(core.Null, [K, V])))();
  var _SplayTreeNodeIteratorOfK$_SplayTreeMapNodeOfK$V = () => (_SplayTreeNodeIteratorOfK$_SplayTreeMapNodeOfK$V = dart.constFn(collection._SplayTreeNodeIterator$(K, _SplayTreeMapNodeOfK$V())))();
  var _SplayTreeMapNodeNOfK$V = () => (_SplayTreeMapNodeNOfK$V = dart.constFn(dart.nullable(_SplayTreeMapNodeOfK$V())))();
  var _SplayTreeMapNodeNOfK$VTobool = () => (_SplayTreeMapNodeNOfK$VTobool = dart.constFn(dart.fnType(core.bool, [_SplayTreeMapNodeNOfK$V()])))();
  var _SplayTreeKeyIterableOfK$_SplayTreeMapNodeOfK$V = () => (_SplayTreeKeyIterableOfK$_SplayTreeMapNodeOfK$V = dart.constFn(collection._SplayTreeKeyIterable$(K, _SplayTreeMapNodeOfK$V())))();
  var _SplayTreeValueIterableOfK$V = () => (_SplayTreeValueIterableOfK$V = dart.constFn(collection._SplayTreeValueIterable$(K, V)))();
  var VoidToV = () => (VoidToV = dart.constFn(dart.fnType(V, [])))();
  const _SplayTree_MapMixin$36 = class _SplayTree_MapMixin extends collection._SplayTree$(K, collection._SplayTreeMapNode$(K, V)) {};
  (_SplayTree_MapMixin$36.new = function() {
    _SplayTree_MapMixin$36.__proto__.new.call(this);
  }).prototype = _SplayTree_MapMixin$36.prototype;
  dart.applyMixin(_SplayTree_MapMixin$36, collection.MapMixin$(K, V));
  class SplayTreeMap extends _SplayTree_MapMixin$36 {
    get [_root]() {
      return this[_root$];
    }
    set [_root](value) {
      this[_root$] = value;
    }
    get [_compare]() {
      return this[_compare$];
    }
    set [_compare](value) {
      this[_compare$] = value;
    }
    get [_validKey$0]() {
      return this[_validKey];
    }
    set [_validKey$0](value) {
      this[_validKey] = value;
    }
    static from(other, compare = null, isValidKey = null) {
      if (other == null) dart.nullFailed(L83, 312, 51, "other");
      if (core.Map$(K, V).is(other)) {
        return collection.SplayTreeMap$(K, V).of(other, compare, isValidKey);
      }
      let result = new (collection.SplayTreeMap$(K, V)).new(compare, isValidKey);
      other[$forEach](dart.fn((k, v) => {
        result._set(K.as(k), V.as(v));
      }, dynamicAnddynamicToNullN()));
      return result;
    }
    static of(other, compare = null, isValidKey = null) {
      let t158;
      if (other == null) dart.nullFailed(L83, 326, 37, "other");
      t158 = new (collection.SplayTreeMap$(K, V)).new(compare, isValidKey);
      return (() => {
        t158.addAll(other);
        return t158;
      })();
    }
    static fromIterable(iterable, opts) {
      if (iterable == null) dart.nullFailed(L83, 342, 46, "iterable");
      let key = opts && 'key' in opts ? opts.key : null;
      let value = opts && 'value' in opts ? opts.value : null;
      let compare = opts && 'compare' in opts ? opts.compare : null;
      let isValidKey = opts && 'isValidKey' in opts ? opts.isValidKey : null;
      let map = new (collection.SplayTreeMap$(K, V)).new(compare, isValidKey);
      collection.MapBase._fillMapWithMappedIterable(map, iterable, key, value);
      return map;
    }
    static fromIterables(keys, values, compare = null, isValidKey = null) {
      if (keys == null) dart.nullFailed(L83, 361, 50, "keys");
      if (values == null) dart.nullFailed(L83, 361, 68, "values");
      let map = new (collection.SplayTreeMap$(K, V)).new(compare, isValidKey);
      collection.MapBase._fillMapWithIterables(map, keys, values);
      return map;
    }
    _get(key) {
      let t158;
      if (!dart.test((t158 = key, this[_validKey$0](t158)))) return null;
      if (this[_root] != null) {
        let comp = this[_splay](K.as(key));
        if (comp === 0) {
          return dart.nullCheck(this[_root]).value;
        }
      }
      return null;
    }
    remove(key) {
      let t158;
      if (!dart.test((t158 = key, this[_validKey$0](t158)))) return null;
      let mapRoot = this[_remove](K.as(key));
      if (mapRoot != null) return mapRoot.value;
      return null;
    }
    _set(key, value$) {
      let value = value$;
      K.as(key);
      V.as(value);
      if (key == null) dart.throw(new core.ArgumentError.new(key));
      let comp = this[_splay](key);
      if (comp === 0) {
        dart.nullCheck(this[_root]).value = value;
        return value$;
      }
      this[_addNewRoot](new (_SplayTreeMapNodeOfK$V()).new(key, value), comp);
      return value$;
    }
    putIfAbsent(key, ifAbsent) {
      K.as(key);
      VoidToV().as(ifAbsent);
      if (ifAbsent == null) dart.nullFailed(L83, 399, 26, "ifAbsent");
      if (key == null) dart.throw(new core.ArgumentError.new(key));
      let comp = this[_splay](key);
      if (comp === 0) {
        return dart.nullCheck(this[_root]).value;
      }
      let modificationCount = this[_modificationCount];
      let splayCount = this[_splayCount];
      let value = ifAbsent();
      if (modificationCount != this[_modificationCount]) {
        dart.throw(new core.ConcurrentModificationError.new(this));
      }
      if (splayCount != this[_splayCount]) {
        comp = this[_splay](key);
        if (!(comp !== 0)) dart.assertFailed(null, L83, 414, 14, "comp != 0");
      }
      this[_addNewRoot](new (_SplayTreeMapNodeOfK$V()).new(key, value), comp);
      return value;
    }
    addAll(other) {
      MapOfK$V().as(other);
      if (other == null) dart.nullFailed(L83, 420, 25, "other");
      other[$forEach](dart.fn((key, value) => {
        this._set(key, value);
      }, KAndVToNullN()));
    }
    get isEmpty() {
      return this[_root] == null;
    }
    get isNotEmpty() {
      return !dart.test(this.isEmpty);
    }
    forEach(f) {
      if (f == null) dart.nullFailed(L83, 432, 21, "f");
      let nodes = new (_SplayTreeNodeIteratorOfK$_SplayTreeMapNodeOfK$V()).new(this);
      while (dart.test(nodes.moveNext())) {
        let node = nodes.current;
        f(node.key, node.value);
      }
    }
    get length() {
      return this[_count$];
    }
    clear() {
      this[_clear$]();
    }
    containsKey(key) {
      let t158;
      return dart.test((t158 = key, this[_validKey$0](t158))) && this[_splay](K.as(key)) === 0;
    }
    containsValue(value) {
      let initialSplayCount = this[_splayCount];
      const visit = node => {
        while (node != null) {
          if (dart.equals(node.value, value)) return true;
          if (initialSplayCount != this[_splayCount]) {
            dart.throw(new core.ConcurrentModificationError.new(this));
          }
          if (node.right != null && dart.test(visit(node.right))) {
            return true;
          }
          node = node.left;
        }
        return false;
      };
      dart.fn(visit, _SplayTreeMapNodeNOfK$VTobool());
      return visit(this[_root]);
    }
    get keys() {
      return new (_SplayTreeKeyIterableOfK$_SplayTreeMapNodeOfK$V()).new(this);
    }
    get values() {
      return new (_SplayTreeValueIterableOfK$V()).new(this);
    }
    firstKey() {
      if (this[_root] == null) return null;
      return dart.nullCheck(this[_first]).key;
    }
    lastKey() {
      if (this[_root] == null) return null;
      return dart.nullCheck(this[_last$]).key;
    }
    lastKeyBefore(key) {
      K.as(key);
      if (key == null) dart.throw(new core.ArgumentError.new(key));
      if (this[_root] == null) return null;
      let comp = this[_splay](key);
      if (dart.notNull(comp) < 0) return dart.nullCheck(this[_root]).key;
      let node = dart.nullCheck(this[_root]).left;
      if (node == null) return null;
      let nodeRight = node.right;
      while (nodeRight != null) {
        node = nodeRight;
        nodeRight = node.right;
      }
      return dart.nullCheck(node).key;
    }
    firstKeyAfter(key) {
      K.as(key);
      if (key == null) dart.throw(new core.ArgumentError.new(key));
      if (this[_root] == null) return null;
      let comp = this[_splay](key);
      if (dart.notNull(comp) > 0) return dart.nullCheck(this[_root]).key;
      let node = dart.nullCheck(this[_root]).right;
      if (node == null) return null;
      let nodeLeft = node.left;
      while (nodeLeft != null) {
        node = nodeLeft;
        nodeLeft = node.left;
      }
      return dart.nullCheck(node).key;
    }
  }
  (SplayTreeMap.new = function(compare = null, isValidKey = null) {
    let t158, t158$;
    this[_root$] = null;
    this[_compare$] = (t158 = compare, t158 == null ? collection._defaultCompare(K) : t158);
    this[_validKey] = (t158$ = isValidKey, t158$ == null ? dart.fn(v => K.is(v), dynamicTobool()) : t158$);
    SplayTreeMap.__proto__.new.call(this);
    ;
  }).prototype = SplayTreeMap.prototype;
  dart.addTypeTests(SplayTreeMap);
  SplayTreeMap.prototype[_is_SplayTreeMap_default] = true;
  dart.addTypeCaches(SplayTreeMap);
  dart.setMethodSignature(SplayTreeMap, () => ({
    __proto__: dart.getMethods(SplayTreeMap.__proto__),
    _get: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
    [$_get]: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
    remove: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
    [$remove]: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
    _set: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
    [$_set]: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
    clear: dart.fnType(dart.void, []),
    [$clear]: dart.fnType(dart.void, []),
    firstKey: dart.fnType(dart.nullable(K), []),
    lastKey: dart.fnType(dart.nullable(K), []),
    lastKeyBefore: dart.fnType(dart.nullable(K), [dart.nullable(core.Object)]),
    firstKeyAfter: dart.fnType(dart.nullable(K), [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(SplayTreeMap, () => ({
    __proto__: dart.getGetters(SplayTreeMap.__proto__),
    keys: core.Iterable$(K),
    [$keys]: core.Iterable$(K)
  }));
  dart.setLibraryUri(SplayTreeMap, L23);
  dart.setFieldSignature(SplayTreeMap, () => ({
    __proto__: dart.getFields(SplayTreeMap.__proto__),
    [_root]: dart.fieldType(dart.nullable(collection._SplayTreeMapNode$(K, V))),
    [_compare]: dart.fieldType(dart.fnType(core.int, [K, K])),
    [_validKey$0]: dart.fieldType(dart.fnType(core.bool, [dart.dynamic]))
  }));
  dart.defineExtensionMethods(SplayTreeMap, [
    '_get',
    'remove',
    '_set',
    'putIfAbsent',
    'addAll',
    'forEach',
    'clear',
    'containsKey',
    'containsValue'
  ]);
  dart.defineExtensionAccessors(SplayTreeMap, [
    'isEmpty',
    'isNotEmpty',
    'length',
    'keys',
    'values'
  ]);
  return SplayTreeMap;
});
collection.SplayTreeMap = collection.SplayTreeMap$();
dart.addTypeTests(collection.SplayTreeMap, _is_SplayTreeMap_default);
var _workList = dart.privateName(collection, "_workList");
var _currentNode = dart.privateName(collection, "_currentNode");
var _tree$ = dart.privateName(collection, "_tree");
var _findLeftMostDescendent = dart.privateName(collection, "_findLeftMostDescendent");
var _getValue = dart.privateName(collection, "_getValue");
var _rebuildWorkList = dart.privateName(collection, "_rebuildWorkList");
const _is__SplayTreeIterator_default = Symbol('_is__SplayTreeIterator_default');
collection._SplayTreeIterator$ = dart.generic((K, Node, T) => {
  var JSArrayOfNode = () => (JSArrayOfNode = dart.constFn(_interceptors.JSArray$(Node)))();
  class _SplayTreeIterator extends core.Object {
    get current() {
      let node = this[_currentNode];
      if (node == null) return T.as(null);
      return this[_getValue](node);
    }
    [_findLeftMostDescendent](node) {
      while (node != null) {
        this[_workList][$add](node);
        node = node.left;
      }
    }
    [_rebuildWorkList](currentNode) {
      if (currentNode == null) dart.nullFailed(L83, 596, 30, "currentNode");
      if (!dart.test(this[_workList][$isNotEmpty])) dart.assertFailed(null, L83, 597, 12, "_workList.isNotEmpty");
      this[_workList][$clear]();
      this[_tree$][_splay](currentNode.key);
      this[_findLeftMostDescendent](dart.nullCheck(this[_tree$][_root]).right);
      if (!dart.test(this[_workList][$isNotEmpty])) dart.assertFailed(null, L83, 601, 12, "_workList.isNotEmpty");
    }
    moveNext() {
      if (this[_modificationCount] != this[_tree$][_modificationCount]) {
        dart.throw(new core.ConcurrentModificationError.new(this[_tree$]));
      }
      if (dart.test(this[_workList][$isEmpty])) {
        this[_currentNode] = null;
        return false;
      }
      if (this[_tree$][_splayCount] != this[_splayCount] && this[_currentNode] != null) {
        this[_rebuildWorkList](dart.nullCheck(this[_currentNode]));
      }
      this[_currentNode] = this[_workList][$removeLast]();
      this[_findLeftMostDescendent](dart.nullCheck(this[_currentNode]).right);
      return true;
    }
  }
  (_SplayTreeIterator.new = function(tree) {
    if (tree == null) dart.nullFailed(L83, 555, 42, "tree");
    this[_workList] = JSArrayOfNode().of([]);
    this[_currentNode] = null;
    this[_tree$] = tree;
    this[_modificationCount] = tree[_modificationCount];
    this[_splayCount] = tree[_splayCount];
    this[_findLeftMostDescendent](tree[_root]);
  }).prototype = _SplayTreeIterator.prototype;
  (_SplayTreeIterator.startAt = function(tree, startKey) {
    if (tree == null) dart.nullFailed(L83, 562, 50, "tree");
    this[_workList] = JSArrayOfNode().of([]);
    this[_currentNode] = null;
    this[_tree$] = tree;
    this[_modificationCount] = tree[_modificationCount];
    this[_splayCount] = -1;
    if (tree[_root] == null) return;
    let compare = tree[_splay](startKey);
    this[_splayCount] = tree[_splayCount];
    if (dart.notNull(compare) < 0) {
      this[_findLeftMostDescendent](dart.nullCheck(tree[_root]).right);
    } else {
      this[_workList][$add](dart.nullCheck(tree[_root]));
    }
  }).prototype = _SplayTreeIterator.prototype;
  dart.addTypeTests(_SplayTreeIterator);
  _SplayTreeIterator.prototype[_is__SplayTreeIterator_default] = true;
  dart.addTypeCaches(_SplayTreeIterator);
  _SplayTreeIterator[dart.implements] = () => [core.Iterator$(T)];
  dart.setMethodSignature(_SplayTreeIterator, () => ({
    __proto__: dart.getMethods(_SplayTreeIterator.__proto__),
    [_findLeftMostDescendent]: dart.fnType(dart.void, [dart.nullable(Node)]),
    [_rebuildWorkList]: dart.fnType(dart.void, [Node]),
    moveNext: dart.fnType(core.bool, [])
  }));
  dart.setGetterSignature(_SplayTreeIterator, () => ({
    __proto__: dart.getGetters(_SplayTreeIterator.__proto__),
    current: T
  }));
  dart.setLibraryUri(_SplayTreeIterator, L23);
  dart.setFieldSignature(_SplayTreeIterator, () => ({
    __proto__: dart.getFields(_SplayTreeIterator.__proto__),
    [_tree$]: dart.finalFieldType(collection._SplayTree$(K, Node)),
    [_workList]: dart.finalFieldType(core.List$(Node)),
    [_modificationCount]: dart.fieldType(core.int),
    [_splayCount]: dart.fieldType(core.int),
    [_currentNode]: dart.fieldType(dart.nullable(Node))
  }));
  return _SplayTreeIterator;
});
collection._SplayTreeIterator = collection._SplayTreeIterator$();
dart.addTypeTests(collection._SplayTreeIterator, _is__SplayTreeIterator_default);
var _copyNode = dart.privateName(collection, "_copyNode");
const _is__SplayTreeKeyIterable_default = Symbol('_is__SplayTreeKeyIterable_default');
collection._SplayTreeKeyIterable$ = dart.generic((K, Node) => {
  var _SplayTreeKeyIteratorOfK$Node = () => (_SplayTreeKeyIteratorOfK$Node = dart.constFn(collection._SplayTreeKeyIterator$(K, Node)))();
  var SplayTreeSetOfK = () => (SplayTreeSetOfK = dart.constFn(collection.SplayTreeSet$(K)))();
  var KAndKToint = () => (KAndKToint = dart.constFn(dart.fnType(core.int, [K, K])))();
  class _SplayTreeKeyIterable extends _internal.EfficientLengthIterable$(K) {
    get length() {
      return this[_tree$][_count$];
    }
    get isEmpty() {
      return this[_tree$][_count$] === 0;
    }
    get iterator() {
      return new (_SplayTreeKeyIteratorOfK$Node()).new(this[_tree$]);
    }
    toSet() {
      let set = new (SplayTreeSetOfK()).new(KAndKToint().as(this[_tree$][_compare]), this[_tree$][_validKey$0]);
      set[_count$] = this[_tree$][_count$];
      set[_root] = set[_copyNode](Node, this[_tree$][_root]);
      return set;
    }
  }
  (_SplayTreeKeyIterable.new = function(_tree) {
    if (_tree == null) dart.nullFailed(L83, 631, 30, "_tree");
    this[_tree$] = _tree;
    _SplayTreeKeyIterable.__proto__.new.call(this);
    ;
  }).prototype = _SplayTreeKeyIterable.prototype;
  dart.addTypeTests(_SplayTreeKeyIterable);
  _SplayTreeKeyIterable.prototype[_is__SplayTreeKeyIterable_default] = true;
  dart.addTypeCaches(_SplayTreeKeyIterable);
  dart.setGetterSignature(_SplayTreeKeyIterable, () => ({
    __proto__: dart.getGetters(_SplayTreeKeyIterable.__proto__),
    iterator: core.Iterator$(K),
    [$iterator]: core.Iterator$(K)
  }));
  dart.setLibraryUri(_SplayTreeKeyIterable, L23);
  dart.setFieldSignature(_SplayTreeKeyIterable, () => ({
    __proto__: dart.getFields(_SplayTreeKeyIterable.__proto__),
    [_tree$]: dart.fieldType(collection._SplayTree$(K, Node))
  }));
  dart.defineExtensionMethods(_SplayTreeKeyIterable, ['toSet']);
  dart.defineExtensionAccessors(_SplayTreeKeyIterable, ['length', 'isEmpty', 'iterator']);
  return _SplayTreeKeyIterable;
});
collection._SplayTreeKeyIterable = collection._SplayTreeKeyIterable$();
dart.addTypeTests(collection._SplayTreeKeyIterable, _is__SplayTreeKeyIterable_default);
const _is__SplayTreeValueIterable_default = Symbol('_is__SplayTreeValueIterable_default');
collection._SplayTreeValueIterable$ = dart.generic((K, V) => {
  var _SplayTreeValueIteratorOfK$V = () => (_SplayTreeValueIteratorOfK$V = dart.constFn(collection._SplayTreeValueIterator$(K, V)))();
  class _SplayTreeValueIterable extends _internal.EfficientLengthIterable$(V) {
    get length() {
      return this[_map$4][_count$];
    }
    get isEmpty() {
      return this[_map$4][_count$] === 0;
    }
    get iterator() {
      return new (_SplayTreeValueIteratorOfK$V()).new(this[_map$4]);
    }
  }
  (_SplayTreeValueIterable.new = function(_map) {
    if (_map == null) dart.nullFailed(L83, 646, 32, "_map");
    this[_map$4] = _map;
    _SplayTreeValueIterable.__proto__.new.call(this);
    ;
  }).prototype = _SplayTreeValueIterable.prototype;
  dart.addTypeTests(_SplayTreeValueIterable);
  _SplayTreeValueIterable.prototype[_is__SplayTreeValueIterable_default] = true;
  dart.addTypeCaches(_SplayTreeValueIterable);
  dart.setGetterSignature(_SplayTreeValueIterable, () => ({
    __proto__: dart.getGetters(_SplayTreeValueIterable.__proto__),
    iterator: core.Iterator$(V),
    [$iterator]: core.Iterator$(V)
  }));
  dart.setLibraryUri(_SplayTreeValueIterable, L23);
  dart.setFieldSignature(_SplayTreeValueIterable, () => ({
    __proto__: dart.getFields(_SplayTreeValueIterable.__proto__),
    [_map$4]: dart.fieldType(collection.SplayTreeMap$(K, V))
  }));
  dart.defineExtensionAccessors(_SplayTreeValueIterable, ['length', 'isEmpty', 'iterator']);
  return _SplayTreeValueIterable;
});
collection._SplayTreeValueIterable = collection._SplayTreeValueIterable$();
dart.addTypeTests(collection._SplayTreeValueIterable, _is__SplayTreeValueIterable_default);
const _is__SplayTreeKeyIterator_default = Symbol('_is__SplayTreeKeyIterator_default');
collection._SplayTreeKeyIterator$ = dart.generic((K, Node) => {
  class _SplayTreeKeyIterator extends collection._SplayTreeIterator$(K, Node, K) {
    [_getValue](node) {
      if (node == null) dart.nullFailed(L83, 655, 20, "node");
      return node.key;
    }
  }
  (_SplayTreeKeyIterator.new = function(map) {
    if (map == null) dart.nullFailed(L83, 654, 45, "map");
    _SplayTreeKeyIterator.__proto__.new.call(this, map);
    ;
  }).prototype = _SplayTreeKeyIterator.prototype;
  dart.addTypeTests(_SplayTreeKeyIterator);
  _SplayTreeKeyIterator.prototype[_is__SplayTreeKeyIterator_default] = true;
  dart.addTypeCaches(_SplayTreeKeyIterator);
  dart.setMethodSignature(_SplayTreeKeyIterator, () => ({
    __proto__: dart.getMethods(_SplayTreeKeyIterator.__proto__),
    [_getValue]: dart.fnType(K, [Node])
  }));
  dart.setLibraryUri(_SplayTreeKeyIterator, L23);
  return _SplayTreeKeyIterator;
});
collection._SplayTreeKeyIterator = collection._SplayTreeKeyIterator$();
dart.addTypeTests(collection._SplayTreeKeyIterator, _is__SplayTreeKeyIterator_default);
const _is__SplayTreeValueIterator_default = Symbol('_is__SplayTreeValueIterator_default');
collection._SplayTreeValueIterator$ = dart.generic((K, V) => {
  class _SplayTreeValueIterator extends collection._SplayTreeIterator$(K, collection._SplayTreeMapNode$(K, V), V) {
    [_getValue](node) {
      if (node == null) dart.nullFailed(L83, 661, 39, "node");
      return node.value;
    }
  }
  (_SplayTreeValueIterator.new = function(map) {
    if (map == null) dart.nullFailed(L83, 660, 46, "map");
    _SplayTreeValueIterator.__proto__.new.call(this, map);
    ;
  }).prototype = _SplayTreeValueIterator.prototype;
  dart.addTypeTests(_SplayTreeValueIterator);
  _SplayTreeValueIterator.prototype[_is__SplayTreeValueIterator_default] = true;
  dart.addTypeCaches(_SplayTreeValueIterator);
  dart.setMethodSignature(_SplayTreeValueIterator, () => ({
    __proto__: dart.getMethods(_SplayTreeValueIterator.__proto__),
    [_getValue]: dart.fnType(V, [collection._SplayTreeMapNode$(K, V)])
  }));
  dart.setLibraryUri(_SplayTreeValueIterator, L23);
  return _SplayTreeValueIterator;
});
collection._SplayTreeValueIterator = collection._SplayTreeValueIterator$();
dart.addTypeTests(collection._SplayTreeValueIterator, _is__SplayTreeValueIterator_default);
const _is__SplayTreeNodeIterator_default = Symbol('_is__SplayTreeNodeIterator_default');
collection._SplayTreeNodeIterator$ = dart.generic((K, Node) => {
  class _SplayTreeNodeIterator extends collection._SplayTreeIterator$(K, Node, Node) {
    [_getValue](node) {
      if (node == null) dart.nullFailed(L83, 669, 23, "node");
      return node;
    }
  }
  (_SplayTreeNodeIterator.new = function(tree) {
    if (tree == null) dart.nullFailed(L83, 666, 46, "tree");
    _SplayTreeNodeIterator.__proto__.new.call(this, tree);
    ;
  }).prototype = _SplayTreeNodeIterator.prototype;
  (_SplayTreeNodeIterator.startAt = function(tree, startKey) {
    if (tree == null) dart.nullFailed(L83, 667, 54, "tree");
    _SplayTreeNodeIterator.__proto__.startAt.call(this, tree, startKey);
    ;
  }).prototype = _SplayTreeNodeIterator.prototype;
  dart.addTypeTests(_SplayTreeNodeIterator);
  _SplayTreeNodeIterator.prototype[_is__SplayTreeNodeIterator_default] = true;
  dart.addTypeCaches(_SplayTreeNodeIterator);
  dart.setMethodSignature(_SplayTreeNodeIterator, () => ({
    __proto__: dart.getMethods(_SplayTreeNodeIterator.__proto__),
    [_getValue]: dart.fnType(Node, [Node])
  }));
  dart.setLibraryUri(_SplayTreeNodeIterator, L23);
  return _SplayTreeNodeIterator;
});
collection._SplayTreeNodeIterator = collection._SplayTreeNodeIterator$();
dart.addTypeTests(collection._SplayTreeNodeIterator, _is__SplayTreeNodeIterator_default);
var _clone$ = dart.privateName(collection, "_clone");
const _is_SplayTreeSet_default = Symbol('_is_SplayTreeSet_default');
var _root$0 = dart.privateName(collection, "SplayTreeSet._root");
var _compare$0 = dart.privateName(collection, "SplayTreeSet._compare");
var _validKey$1 = dart.privateName(collection, "SplayTreeSet._validKey");
collection.SplayTreeSet$ = dart.generic(E => {
  var _SplayTreeSetNodeOfE = () => (_SplayTreeSetNodeOfE = dart.constFn(collection._SplayTreeSetNode$(E)))();
  var _SplayTreeSetNodeNOfE = () => (_SplayTreeSetNodeNOfE = dart.constFn(dart.nullable(_SplayTreeSetNodeOfE())))();
  var _SplayTreeKeyIteratorOfE$_SplayTreeSetNodeOfE = () => (_SplayTreeKeyIteratorOfE$_SplayTreeSetNodeOfE = dart.constFn(collection._SplayTreeKeyIterator$(E, _SplayTreeSetNodeOfE())))();
  var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
  var SplayTreeSetOfE = () => (SplayTreeSetOfE = dart.constFn(collection.SplayTreeSet$(E)))();
  var SetOfE = () => (SetOfE = dart.constFn(core.Set$(E)))();
  const _SplayTree_IterableMixin$36 = class _SplayTree_IterableMixin extends collection._SplayTree$(E, collection._SplayTreeSetNode$(E)) {};
  (_SplayTree_IterableMixin$36.new = function() {
    _SplayTree_IterableMixin$36.__proto__.new.call(this);
  }).prototype = _SplayTree_IterableMixin$36.prototype;
  dart.applyMixin(_SplayTree_IterableMixin$36, collection.IterableMixin$(E));
  const _SplayTree_SetMixin$36 = class _SplayTree_SetMixin extends _SplayTree_IterableMixin$36 {};
  (_SplayTree_SetMixin$36.new = function() {
    _SplayTree_SetMixin$36.__proto__.new.call(this);
  }).prototype = _SplayTree_SetMixin$36.prototype;
  dart.applyMixin(_SplayTree_SetMixin$36, collection.SetMixin$(E));
  class SplayTreeSet extends _SplayTree_SetMixin$36 {
    get [_root]() {
      return this[_root$0];
    }
    set [_root](value) {
      this[_root$0] = _SplayTreeSetNodeNOfE().as(value);
    }
    get [_compare]() {
      return this[_compare$0];
    }
    set [_compare](value) {
      this[_compare$0] = value;
    }
    get [_validKey$0]() {
      return this[_validKey$1];
    }
    set [_validKey$0](value) {
      this[_validKey$1] = value;
    }
    static from(elements, compare = null, isValidKey = null) {
      if (elements == null) dart.nullFailed(L83, 734, 38, "elements");
      if (core.Iterable$(E).is(elements)) {
        return collection.SplayTreeSet$(E).of(elements, compare, isValidKey);
      }
      let result = new (collection.SplayTreeSet$(E)).new(compare, isValidKey);
      for (let element of elements) {
        result.add(E.as(element));
      }
      return result;
    }
    static of(elements, compare = null, isValidKey = null) {
      let t158;
      if (elements == null) dart.nullFailed(L83, 752, 39, "elements");
      t158 = new (collection.SplayTreeSet$(E)).new(compare, isValidKey);
      return (() => {
        t158.addAll(elements);
        return t158;
      })();
    }
    [_newSet](T) {
      return new (collection.SplayTreeSet$(T)).new(dart.fn((a, b) => {
        let t159, t158;
        t158 = E.as(a);
        t159 = E.as(b);
        return this[_compare](t158, t159);
      }, dart.fnType(core.int, [T, T])), this[_validKey$0]);
    }
    cast(R) {
      return core.Set.castFrom(E, R, this, {newSet: dart.bind(this, _newSet)});
    }
    get iterator() {
      return new (_SplayTreeKeyIteratorOfE$_SplayTreeSetNodeOfE()).new(this);
    }
    get length() {
      return this[_count$];
    }
    get isEmpty() {
      return this[_root] == null;
    }
    get isNotEmpty() {
      return this[_root] != null;
    }
    get first() {
      if (this[_count$] === 0) dart.throw(_internal.IterableElementError.noElement());
      return dart.nullCheck(this[_first]).key;
    }
    get last() {
      if (this[_count$] === 0) dart.throw(_internal.IterableElementError.noElement());
      return dart.nullCheck(this[_last$]).key;
    }
    get single() {
      if (this[_count$] === 0) dart.throw(_internal.IterableElementError.noElement());
      if (dart.notNull(this[_count$]) > 1) dart.throw(_internal.IterableElementError.tooMany());
      return dart.nullCheck(this[_root]).key;
    }
    contains(element) {
      let t158;
      return dart.test((t158 = element, this[_validKey$0](t158))) && this[_splay](E.as(element)) === 0;
    }
    add(element) {
      E.as(element);
      let compare = this[_splay](element);
      if (compare === 0) return false;
      this[_addNewRoot](new (_SplayTreeSetNodeOfE()).new(element), compare);
      return true;
    }
    remove(object) {
      let t158;
      if (!dart.test((t158 = object, this[_validKey$0](t158)))) return false;
      return this[_remove](E.as(object)) != null;
    }
    addAll(elements) {
      IterableOfE().as(elements);
      if (elements == null) dart.nullFailed(L83, 804, 27, "elements");
      for (let element of elements) {
        let compare = this[_splay](element);
        if (compare !== 0) {
          this[_addNewRoot](new (_SplayTreeSetNodeOfE()).new(element), compare);
        }
      }
    }
    removeAll(elements) {
      let t158;
      if (elements == null) dart.nullFailed(L83, 813, 36, "elements");
      for (let element of elements) {
        if (dart.test((t158 = element, this[_validKey$0](t158)))) this[_remove](E.as(element));
      }
    }
    retainAll(elements) {
      let t158;
      if (elements == null) dart.nullFailed(L83, 819, 36, "elements");
      let retainSet = new (SplayTreeSetOfE()).new(this[_compare], this[_validKey$0]);
      let modificationCount = this[_modificationCount];
      for (let object of elements) {
        if (modificationCount != this[_modificationCount]) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
        if (dart.test((t158 = object, this[_validKey$0](t158))) && this[_splay](E.as(object)) === 0) {
          retainSet.add(dart.nullCheck(this[_root]).key);
        }
      }
      if (retainSet[_count$] != this[_count$]) {
        this[_root] = retainSet[_root];
        this[_count$] = retainSet[_count$];
        this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
      }
    }
    lookup(object) {
      let t158;
      if (!dart.test((t158 = object, this[_validKey$0](t158)))) return null;
      let comp = this[_splay](E.as(object));
      if (comp !== 0) return null;
      return dart.nullCheck(this[_root]).key;
    }
    intersection(other) {
      if (other == null) dart.nullFailed(L83, 848, 36, "other");
      let result = new (SplayTreeSetOfE()).new(this[_compare], this[_validKey$0]);
      for (let element of this) {
        if (dart.test(other.contains(element))) result.add(element);
      }
      return result;
    }
    difference(other) {
      if (other == null) dart.nullFailed(L83, 856, 34, "other");
      let result = new (SplayTreeSetOfE()).new(this[_compare], this[_validKey$0]);
      for (let element of this) {
        if (!dart.test(other.contains(element))) result.add(element);
      }
      return result;
    }
    union(other) {
      let t158;
      SetOfE().as(other);
      if (other == null) dart.nullFailed(L83, 864, 23, "other");
      t158 = this[_clone$]();
      return (() => {
        t158.addAll(other);
        return t158;
      })();
    }
    [_clone$]() {
      let set = new (SplayTreeSetOfE()).new(this[_compare], this[_validKey$0]);
      set[_count$] = this[_count$];
      set[_root] = this[_copyNode](_SplayTreeSetNodeOfE(), this[_root]);
      return set;
    }
    [_copyNode](Node, node) {
      dart.checkTypeBound(Node, collection._SplayTreeNode$(E, Node), 'Node');
      if (node == null) return null;
      function copyChildren(node, dest) {
        if (node == null) dart.nullFailed(L83, 884, 28, "node");
        if (dest == null) dart.nullFailed(L83, 884, 55, "dest");
        let left = null;
        let right = null;
        do {
          left = node.left;
          right = node.right;
          if (left != null) {
            let newLeft = new (_SplayTreeSetNodeOfE()).new(left.key);
            dest.left = newLeft;
            copyChildren(left, newLeft);
          }
          if (right != null) {
            let newRight = new (_SplayTreeSetNodeOfE()).new(right.key);
            dest.right = newRight;
            node = right;
            dest = newRight;
          }
        } while (right != null);
      }
      dart.fn(copyChildren, dart.fnType(dart.void, [Node, _SplayTreeSetNodeOfE()]));
      let result = new (_SplayTreeSetNodeOfE()).new(node.key);
      copyChildren(node, result);
      return result;
    }
    clear() {
      this[_clear$]();
    }
    toSet() {
      return this[_clone$]();
    }
    toString() {
      return collection.IterableBase.iterableToFullString(this, "{", "}");
    }
  }
  (SplayTreeSet.new = function(compare = null, isValidKey = null) {
    let t158, t158$;
    this[_root$0] = null;
    this[_compare$0] = (t158 = compare, t158 == null ? collection._defaultCompare(E) : t158);
    this[_validKey$1] = (t158$ = isValidKey, t158$ == null ? dart.fn(v => E.is(v), dynamicTobool()) : t158$);
    SplayTreeSet.__proto__.new.call(this);
    ;
  }).prototype = SplayTreeSet.prototype;
  dart.addTypeTests(SplayTreeSet);
  SplayTreeSet.prototype[_is_SplayTreeSet_default] = true;
  dart.addTypeCaches(SplayTreeSet);
  dart.setMethodSignature(SplayTreeSet, () => ({
    __proto__: dart.getMethods(SplayTreeSet.__proto__),
    [_newSet]: dart.gFnType(T => [core.Set$(T), []], T => [dart.nullable(core.Object)]),
    cast: dart.gFnType(R => [core.Set$(R), []], R => [dart.nullable(core.Object)]),
    [$cast]: dart.gFnType(R => [core.Set$(R), []], R => [dart.nullable(core.Object)]),
    add: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    remove: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    lookup: dart.fnType(dart.nullable(E), [dart.nullable(core.Object)]),
    [_clone$]: dart.fnType(collection.SplayTreeSet$(E), []),
    [_copyNode]: dart.gFnType(Node => [dart.nullable(collection._SplayTreeSetNode$(E)), [dart.nullable(Node)]], Node => [collection._SplayTreeNode$(E, Node)])
  }));
  dart.setGetterSignature(SplayTreeSet, () => ({
    __proto__: dart.getGetters(SplayTreeSet.__proto__),
    iterator: core.Iterator$(E),
    [$iterator]: core.Iterator$(E)
  }));
  dart.setLibraryUri(SplayTreeSet, L23);
  dart.setFieldSignature(SplayTreeSet, () => ({
    __proto__: dart.getFields(SplayTreeSet.__proto__),
    [_root]: dart.fieldType(dart.nullable(collection._SplayTreeSetNode$(E))),
    [_compare]: dart.fieldType(dart.fnType(core.int, [E, E])),
    [_validKey$0]: dart.fieldType(dart.fnType(core.bool, [dart.dynamic]))
  }));
  dart.defineExtensionMethods(SplayTreeSet, ['cast', 'contains', 'toSet', 'toString']);
  dart.defineExtensionAccessors(SplayTreeSet, [
    'iterator',
    'length',
    'isEmpty',
    'isNotEmpty',
    'first',
    'last',
    'single'
  ]);
  return SplayTreeSet;
});
collection.SplayTreeSet = collection.SplayTreeSet$();
dart.addTypeTests(collection.SplayTreeSet, _is_SplayTreeSet_default);
var C77;
var C78;
collection._defaultEquals = function _defaultEquals(a, b) {
  return dart.equals(a, b);
};
collection._defaultHashCode = function _defaultHashCode(a) {
  return dart.hashCode(a);
};
collection._isToStringVisiting = function _isToStringVisiting(o) {
  if (o == null) dart.nullFailed(L38, 281, 33, "o");
  for (let i = 0; i < dart.notNull(collection._toStringVisiting[$length]); i = i + 1) {
    if (core.identical(o, collection._toStringVisiting[$_get](i))) return true;
  }
  return false;
};
collection._iterablePartsToStrings = function _iterablePartsToStrings(iterable, parts) {
  if (iterable == null) dart.nullFailed(L38, 289, 48, "iterable");
  if (parts == null) dart.nullFailed(L38, 289, 71, "parts");
  let length = 0;
  let count = 0;
  let it = iterable[$iterator];
  while (length < 80 || count < 3) {
    if (!dart.test(it.moveNext())) return;
    let next = dart.str(it.current);
    parts[$add](next);
    length = length + (next.length + 2);
    count = count + 1;
  }
  let penultimateString = null;
  let ultimateString = null;
  if (!dart.test(it.moveNext())) {
    if (count <= 3 + 2) return;
    ultimateString = parts[$removeLast]();
    penultimateString = parts[$removeLast]();
  } else {
    let penultimate = it.current;
    count = count + 1;
    if (!dart.test(it.moveNext())) {
      if (count <= 3 + 1) {
        parts[$add](dart.str(penultimate));
        return;
      }
      ultimateString = dart.str(penultimate);
      penultimateString = parts[$removeLast]();
      length = length + (ultimateString.length + 2);
    } else {
      let ultimate = it.current;
      count = count + 1;
      if (!(count < 100)) dart.assertFailed(null, L38, 349, 14, "count < maxCount");
      while (dart.test(it.moveNext())) {
        penultimate = ultimate;
        ultimate = it.current;
        count = count + 1;
        if (count > 100) {
          while (length > 80 - 3 - 2 && count > 3) {
            length = length - (parts[$removeLast]().length + 2);
            count = count - 1;
          }
          parts[$add]("...");
          return;
        }
      }
      penultimateString = dart.str(penultimate);
      ultimateString = dart.str(ultimate);
      length = length + (ultimateString.length + penultimateString.length + 2 * 2);
    }
  }
  let elision = null;
  if (count > dart.notNull(parts[$length]) + 2) {
    elision = "...";
    length = length + (3 + 2);
  }
  while (length > 80 && dart.notNull(parts[$length]) > 3) {
    length = length - (parts[$removeLast]().length + 2);
    if (elision == null) {
      elision = "...";
      length = length + (3 + 2);
    }
  }
  if (elision != null) {
    parts[$add](elision);
  }
  parts[$add](penultimateString);
  parts[$add](ultimateString);
};
collection._dynamicCompare = function _dynamicCompare(a, b) {
  return core.Comparable.compare(core.Comparable.as(a), core.Comparable.as(b));
};
collection._defaultCompare = function _defaultCompare(K) {
  let compare = C77 || CT.C77;
  if (dart.fnType(core.int, [K, K]).is(compare)) {
    return compare;
  }
  return C78 || CT.C78;
};
dart.defineLazy(collection, {
  /*collection._toStringVisiting*/get _toStringVisiting() {
    return JSArrayOfObject().of([]);
  }
}, false);
var _processed = dart.privateName(convert, "_processed");
var _data = dart.privateName(convert, "_data");
var _original$ = dart.privateName(convert, "_original");
var _isUpgraded = dart.privateName(convert, "_isUpgraded");
var _upgradedMap = dart.privateName(convert, "_upgradedMap");
var _process = dart.privateName(convert, "_process");
var _computeKeys = dart.privateName(convert, "_computeKeys");
var _upgrade = dart.privateName(convert, "_upgrade");
core.String = class String extends core.Object {
  static _stringFromJSArray(list, start, endOrNull) {
    if (start == null) dart.nullFailed(L7, 586, 11, "start");
    let len = core.int.as(dart.dload(list, 'length'));
    let end = core.RangeError.checkValidRange(start, endOrNull, len);
    if (dart.notNull(start) > 0 || dart.notNull(end) < dart.notNull(len)) {
      list = dart.dsend(list, 'sublist', [start, end]);
    }
    return _js_helper.Primitives.stringFromCharCodes(JSArrayOfint().as(list));
  }
  static _stringFromUint8List(charCodes, start, endOrNull) {
    if (charCodes == null) dart.nullFailed(L7, 597, 23, "charCodes");
    if (start == null) dart.nullFailed(L7, 597, 38, "start");
    let len = charCodes[$length];
    let end = core.RangeError.checkValidRange(start, endOrNull, len);
    return _js_helper.Primitives.stringFromNativeUint8List(charCodes, start, end);
  }
  static _stringFromIterable(charCodes, start, end) {
    if (charCodes == null) dart.nullFailed(L7, 604, 21, "charCodes");
    if (start == null) dart.nullFailed(L7, 604, 36, "start");
    if (dart.notNull(start) < 0) dart.throw(new core.RangeError.range(start, 0, charCodes[$length]));
    if (end != null && dart.notNull(end) < dart.notNull(start)) {
      dart.throw(new core.RangeError.range(end, start, charCodes[$length]));
    }
    let it = charCodes[$iterator];
    for (let i = 0; i < dart.notNull(start); i = i + 1) {
      if (!dart.test(it.moveNext())) {
        dart.throw(new core.RangeError.range(start, 0, i));
      }
    }
    let list = JSArrayOfint().of(new Array());
    if (end == null) {
      while (dart.test(it.moveNext()))
        list[$add](it.current);
    } else {
      for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
        if (!dart.test(it.moveNext())) {
          dart.throw(new core.RangeError.range(end, start, i));
        }
        list[$add](it.current);
      }
    }
    return _js_helper.Primitives.stringFromCharCodes(list);
  }
  static is(o) {
    return typeof o == "string";
  }
  static as(o) {
    if (typeof o == "string") return o;
    return dart.as(o, core.String);
  }
  static fromCharCodes(charCodes, start = 0, end = null) {
    if (charCodes == null) dart.nullFailed(L7, 561, 46, "charCodes");
    if (start == null) dart.nullFailed(L7, 562, 12, "start");
    if (_interceptors.JSArray.is(charCodes)) {
      return core.String._stringFromJSArray(charCodes, start, end);
    }
    if (_native_typed_data.NativeUint8List.is(charCodes)) {
      return core.String._stringFromUint8List(charCodes, start, end);
    }
    return core.String._stringFromIterable(charCodes, start, end);
  }
  static fromCharCode(charCode) {
    if (charCode == null) dart.nullFailed(L7, 573, 35, "charCode");
    return _js_helper.Primitives.stringFromCharCode(charCode);
  }
  static fromEnvironment(name, opts) {
    if (name == null) dart.nullFailed(L7, 578, 41, "name");
    let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : "";
    if (defaultValue == null) dart.nullFailed(L7, 578, 55, "defaultValue");
    dart.throw(new core.UnsupportedError.new("String.fromEnvironment can only be used as a const constructor"));
  }
};
(core.String[dart.mixinNew] = function() {
}).prototype = core.String.prototype;
dart.addTypeCaches(core.String);
core.String[dart.implements] = () => [core.Comparable$(core.String), core.Pattern];
dart.setLibraryUri(core.String, L8$);
convert._JsonMap = class _JsonMap extends collection.MapBase$(core.String, dart.dynamic) {
  _get(key) {
    if (dart.test(this[_isUpgraded])) {
      return this[_upgradedMap][$_get](key);
    } else if (!(typeof key == 'string')) {
      return null;
    } else {
      let result = convert._JsonMap._getProperty(this[_processed], key);
      if (dart.test(convert._JsonMap._isUnprocessed(result))) result = this[_process](key);
      return result;
    }
  }
  get length() {
    return dart.test(this[_isUpgraded]) ? this[_upgradedMap][$length] : this[_computeKeys]()[$length];
  }
  get isEmpty() {
    return this.length === 0;
  }
  get isNotEmpty() {
    return dart.notNull(this.length) > 0;
  }
  get keys() {
    if (dart.test(this[_isUpgraded])) return this[_upgradedMap][$keys];
    return new convert._JsonMapKeyIterable.new(this);
  }
  get values() {
    if (dart.test(this[_isUpgraded])) return this[_upgradedMap][$values];
    return MappedIterableOfString$dynamic().new(this[_computeKeys](), dart.fn(each => this._get(each), ObjectNTodynamic()));
  }
  _set(key, value$) {
    let value = value$;
    core.String.as(key);
    if (key == null) dart.nullFailed(L84, 170, 16, "key");
    if (dart.test(this[_isUpgraded])) {
      this[_upgradedMap][$_set](key, value);
    } else if (dart.test(this.containsKey(key))) {
      let processed = this[_processed];
      convert._JsonMap._setProperty(processed, key, value);
      let original = this[_original$];
      if (!core.identical(original, processed)) {
        convert._JsonMap._setProperty(original, key, null);
      }
    } else {
      this[_upgrade]()[$_set](key, value);
    }
    return value$;
  }
  addAll(other) {
    MapOfString$dynamic().as(other);
    if (other == null) dart.nullFailed(L84, 185, 36, "other");
    other[$forEach](dart.fn((key, value) => {
      if (key == null) dart.nullFailed(L84, 186, 20, "key");
      this._set(key, value);
    }, StringAnddynamicToNullN()));
  }
  containsValue(value) {
    if (dart.test(this[_isUpgraded])) return this[_upgradedMap][$containsValue](value);
    let keys = this[_computeKeys]();
    for (let i = 0; i < dart.notNull(keys[$length]); i = i + 1) {
      let key = keys[$_get](i);
      if (dart.equals(this._get(key), value)) return true;
    }
    return false;
  }
  containsKey(key) {
    if (dart.test(this[_isUpgraded])) return this[_upgradedMap][$containsKey](key);
    if (!(typeof key == 'string')) return false;
    return convert._JsonMap._hasProperty(this[_original$], key);
  }
  putIfAbsent(key, ifAbsent) {
    core.String.as(key);
    if (key == null) dart.nullFailed(L84, 207, 15, "key");
    VoidTodynamic().as(ifAbsent);
    if (ifAbsent == null) dart.nullFailed(L84, 207, 20, "ifAbsent");
    if (dart.test(this.containsKey(key))) return this._get(key);
    let value = ifAbsent();
    this._set(key, value);
    return value;
  }
  remove(key) {
    if (!dart.test(this[_isUpgraded]) && !dart.test(this.containsKey(key))) return null;
    return this[_upgrade]()[$remove](key);
  }
  clear() {
    if (dart.test(this[_isUpgraded])) {
      this[_upgradedMap][$clear]();
    } else {
      if (this[_data] != null) {
        dart.dsend(this[_data], 'clear', []);
      }
      this[_original$] = this[_processed] = null;
      this[_data] = new _js_helper.LinkedMap.new();
    }
  }
  forEach(f) {
    if (f == null) dart.nullFailed(L84, 234, 21, "f");
    if (dart.test(this[_isUpgraded])) return this[_upgradedMap][$forEach](f);
    let keys = this[_computeKeys]();
    for (let i = 0; i < dart.notNull(keys[$length]); i = i + 1) {
      let key = keys[$_get](i);
      let value = convert._JsonMap._getProperty(this[_processed], key);
      if (dart.test(convert._JsonMap._isUnprocessed(value))) {
        value = convert._convertJsonToDartLazy(convert._JsonMap._getProperty(this[_original$], key));
        convert._JsonMap._setProperty(this[_processed], key, value);
      }
      f(key, value);
      if (!core.identical(keys, this[_data])) {
        dart.throw(new core.ConcurrentModificationError.new(this));
      }
    }
  }
  get [_isUpgraded]() {
    return this[_processed] == null;
  }
  get [_upgradedMap]() {
    if (!dart.test(this[_isUpgraded])) dart.assertFailed(null, L84, 266, 12, "_isUpgraded");
    return this[_data];
  }
  [_computeKeys]() {
    if (!!dart.test(this[_isUpgraded])) dart.assertFailed(null, L84, 274, 12, "!_isUpgraded");
    let keys = ListN().as(this[_data]);
    if (keys == null) {
      keys = this[_data] = convert._JsonMap._getPropertyNames(this[_original$]);
    }
    return keys;
  }
  [_upgrade]() {
    if (dart.test(this[_isUpgraded])) return this[_upgradedMap];
    let result = new (IdentityMapOfString$dynamic()).new();
    let keys = this[_computeKeys]();
    for (let i = 0; i < dart.notNull(keys[$length]); i = i + 1) {
      let key = keys[$_get](i);
      result[$_set](key, this._get(key));
    }
    if (dart.test(keys[$isEmpty])) {
      keys[$add]("");
    } else {
      keys[$clear]();
    }
    this[_original$] = this[_processed] = null;
    this[_data] = result;
    if (!dart.test(this[_isUpgraded])) dart.assertFailed(null, L84, 307, 12, "_isUpgraded");
    return result;
  }
  [_process](key) {
    if (key == null) dart.nullFailed(L84, 311, 19, "key");
    if (!dart.test(convert._JsonMap._hasProperty(this[_original$], key))) return null;
    let result = convert._convertJsonToDartLazy(convert._JsonMap._getProperty(this[_original$], key));
    return convert._JsonMap._setProperty(this[_processed], key, result);
  }
  static _hasProperty(object, key) {
    if (key == null) dart.nullFailed(L84, 321, 43, "key");
    return Object.prototype.hasOwnProperty.call(object, key);
  }
  static _getProperty(object, key) {
    if (key == null) dart.nullFailed(L84, 323, 38, "key");
    return object[key];
  }
  static _setProperty(object, key, value) {
    if (key == null) dart.nullFailed(L84, 324, 38, "key");
    return object[key] = value;
  }
  static _getPropertyNames(object) {
    return Object.keys(object);
  }
  static _isUnprocessed(object) {
    return typeof object == "undefined";
  }
  static _newJavaScriptObject() {
    return Object.create(null);
  }
};
(convert._JsonMap.new = function(_original) {
  this[_processed] = convert._JsonMap._newJavaScriptObject();
  this[_data] = null;
  this[_original$] = _original;
  ;
}).prototype = convert._JsonMap.prototype;
dart.addTypeTests(convert._JsonMap);
dart.addTypeCaches(convert._JsonMap);
dart.setMethodSignature(convert._JsonMap, () => ({
  __proto__: dart.getMethods(convert._JsonMap.__proto__),
  _get: dart.fnType(dart.dynamic, [dart.nullable(core.Object)]),
  [$_get]: dart.fnType(dart.dynamic, [dart.nullable(core.Object)]),
  _set: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
  [$_set]: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
  remove: dart.fnType(dart.dynamic, [dart.nullable(core.Object)]),
  [$remove]: dart.fnType(dart.dynamic, [dart.nullable(core.Object)]),
  clear: dart.fnType(dart.void, []),
  [$clear]: dart.fnType(dart.void, []),
  [_computeKeys]: dart.fnType(core.List$(core.String), []),
  [_upgrade]: dart.fnType(core.Map$(core.String, dart.dynamic), []),
  [_process]: dart.fnType(dart.dynamic, [core.String])
}));
dart.setGetterSignature(convert._JsonMap, () => ({
  __proto__: dart.getGetters(convert._JsonMap.__proto__),
  keys: core.Iterable$(core.String),
  [$keys]: core.Iterable$(core.String),
  [_isUpgraded]: core.bool,
  [_upgradedMap]: core.Map$(core.String, dart.dynamic)
}));
dart.setLibraryUri(convert._JsonMap, L31);
dart.setFieldSignature(convert._JsonMap, () => ({
  __proto__: dart.getFields(convert._JsonMap.__proto__),
  [_original$]: dart.fieldType(dart.dynamic),
  [_processed]: dart.fieldType(dart.dynamic),
  [_data]: dart.fieldType(dart.dynamic)
}));
dart.defineExtensionMethods(convert._JsonMap, [
  '_get',
  '_set',
  'addAll',
  'containsValue',
  'containsKey',
  'putIfAbsent',
  'remove',
  'clear',
  'forEach'
]);
dart.defineExtensionAccessors(convert._JsonMap, [
  'length',
  'isEmpty',
  'isNotEmpty',
  'keys',
  'values'
]);
var _parent$ = dart.privateName(convert, "_parent");
convert._JsonMapKeyIterable = class _JsonMapKeyIterable extends _internal.ListIterable$(core.String) {
  get length() {
    return this[_parent$].length;
  }
  elementAt(index) {
    if (index == null) dart.nullFailed(L84, 340, 24, "index");
    return dart.test(this[_parent$][_isUpgraded]) ? this[_parent$].keys[$elementAt](index) : this[_parent$][_computeKeys]()[$_get](index);
  }
  get iterator() {
    return dart.test(this[_parent$][_isUpgraded]) ? this[_parent$].keys[$iterator] : this[_parent$][_computeKeys]()[$iterator];
  }
  contains(key) {
    return this[_parent$].containsKey(key);
  }
};
(convert._JsonMapKeyIterable.new = function(_parent) {
  if (_parent == null) dart.nullFailed(L84, 336, 28, "_parent");
  this[_parent$] = _parent;
  convert._JsonMapKeyIterable.__proto__.new.call(this);
  ;
}).prototype = convert._JsonMapKeyIterable.prototype;
dart.addTypeTests(convert._JsonMapKeyIterable);
dart.addTypeCaches(convert._JsonMapKeyIterable);
dart.setLibraryUri(convert._JsonMapKeyIterable, L31);
dart.setFieldSignature(convert._JsonMapKeyIterable, () => ({
  __proto__: dart.getFields(convert._JsonMapKeyIterable.__proto__),
  [_parent$]: dart.finalFieldType(convert._JsonMap)
}));
dart.defineExtensionMethods(convert._JsonMapKeyIterable, ['elementAt', 'contains']);
dart.defineExtensionAccessors(convert._JsonMapKeyIterable, ['length', 'iterator']);
var _reviver$ = dart.privateName(convert, "_reviver");
var _sink$0 = dart.privateName(convert, "_sink");
var _stringSink$ = dart.privateName(convert, "_stringSink");
convert.StringConversionSinkMixin = class StringConversionSinkMixin extends core.Object {
  add(str) {
    core.String.as(str);
    if (str == null) dart.nullFailed(L85, 162, 19, "str");
    this.addSlice(str, 0, str.length, false);
  }
  asUtf8Sink(allowMalformed) {
    if (allowMalformed == null) dart.nullFailed(L85, 166, 38, "allowMalformed");
    return new convert._Utf8ConversionSink.new(this, allowMalformed);
  }
  asStringSink() {
    return new convert._StringConversionSinkAsStringSinkAdapter.new(this);
  }
};
(convert.StringConversionSinkMixin.new = function() {
  ;
}).prototype = convert.StringConversionSinkMixin.prototype;
dart.addTypeTests(convert.StringConversionSinkMixin);
dart.addTypeCaches(convert.StringConversionSinkMixin);
convert.StringConversionSinkMixin[dart.implements] = () => [convert.StringConversionSink];
dart.setMethodSignature(convert.StringConversionSinkMixin, () => ({
  __proto__: dart.getMethods(convert.StringConversionSinkMixin.__proto__),
  add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
  asUtf8Sink: dart.fnType(convert.ByteConversionSink, [core.bool]),
  asStringSink: dart.fnType(convert.ClosableStringSink, [])
}));
dart.setLibraryUri(convert.StringConversionSinkMixin, L31);
convert.StringConversionSinkBase = class StringConversionSinkBase extends convert.StringConversionSinkMixin {};
(convert.StringConversionSinkBase.new = function() {
  ;
}).prototype = convert.StringConversionSinkBase.prototype;
dart.addTypeTests(convert.StringConversionSinkBase);
dart.addTypeCaches(convert.StringConversionSinkBase);
dart.setLibraryUri(convert.StringConversionSinkBase, L31);
const _is__StringSinkConversionSink_default = Symbol('_is__StringSinkConversionSink_default');
convert._StringSinkConversionSink$ = dart.generic(TStringSink => {
  class _StringSinkConversionSink extends convert.StringConversionSinkBase {
    close() {
    }
    addSlice(str, start, end, isLast) {
      if (str == null) dart.nullFailed(L85, 183, 24, "str");
      if (start == null) dart.nullFailed(L85, 183, 33, "start");
      if (end == null) dart.nullFailed(L85, 183, 44, "end");
      if (isLast == null) dart.nullFailed(L85, 183, 54, "isLast");
      if (start !== 0 || end !== str.length) {
        for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
          this[_stringSink$].writeCharCode(str[$codeUnitAt](i));
        }
      } else {
        this[_stringSink$].write(str);
      }
      if (dart.test(isLast)) this.close();
    }
    add(str) {
      core.String.as(str);
      if (str == null) dart.nullFailed(L85, 194, 19, "str");
      this[_stringSink$].write(str);
    }
    asUtf8Sink(allowMalformed) {
      if (allowMalformed == null) dart.nullFailed(L85, 198, 38, "allowMalformed");
      return new convert._Utf8StringSinkAdapter.new(this, this[_stringSink$], allowMalformed);
    }
    asStringSink() {
      return new convert._ClosableStringSink.new(this[_stringSink$], dart.bind(this, 'close'));
    }
  }
  (_StringSinkConversionSink.new = function(_stringSink) {
    if (_stringSink == null) dart.nullFailed(L85, 179, 34, "_stringSink");
    this[_stringSink$] = _stringSink;
    ;
  }).prototype = _StringSinkConversionSink.prototype;
  dart.addTypeTests(_StringSinkConversionSink);
  _StringSinkConversionSink.prototype[_is__StringSinkConversionSink_default] = true;
  dart.addTypeCaches(_StringSinkConversionSink);
  dart.setMethodSignature(_StringSinkConversionSink, () => ({
    __proto__: dart.getMethods(_StringSinkConversionSink.__proto__),
    close: dart.fnType(dart.void, []),
    addSlice: dart.fnType(dart.void, [core.String, core.int, core.int, core.bool])
  }));
  dart.setLibraryUri(_StringSinkConversionSink, L31);
  dart.setFieldSignature(_StringSinkConversionSink, () => ({
    __proto__: dart.getFields(_StringSinkConversionSink.__proto__),
    [_stringSink$]: dart.finalFieldType(TStringSink)
  }));
  return _StringSinkConversionSink;
});
convert._StringSinkConversionSink = convert._StringSinkConversionSink$();
dart.addTypeTests(convert._StringSinkConversionSink, _is__StringSinkConversionSink_default);
var _contents = dart.privateName(core, "_contents");
var _writeString = dart.privateName(core, "_writeString");
core.StringBuffer = class StringBuffer extends core.Object {
  [_writeString](str) {
    if (str == null) dart.nullFailed(L7, 735, 28, "str");
    this[_contents] = _js_helper.Primitives.stringConcatUnchecked(this[_contents], str);
  }
  static _writeAll(string, objects, separator) {
    if (string == null) dart.nullFailed(L7, 739, 34, "string");
    if (objects == null) dart.nullFailed(L7, 739, 51, "objects");
    if (separator == null) dart.nullFailed(L7, 739, 67, "separator");
    let iterator = objects[$iterator];
    if (!dart.test(iterator.moveNext())) return string;
    if (separator[$isEmpty]) {
      do {
        string = core.StringBuffer._writeOne(string, iterator.current);
      } while (dart.test(iterator.moveNext()));
    } else {
      string = core.StringBuffer._writeOne(string, iterator.current);
      while (dart.test(iterator.moveNext())) {
        string = core.StringBuffer._writeOne(string, separator);
        string = core.StringBuffer._writeOne(string, iterator.current);
      }
    }
    return string;
  }
  static _writeOne(string, obj) {
    if (string == null) dart.nullFailed(L7, 756, 34, "string");
    return _js_helper.Primitives.stringConcatUnchecked(string, dart.str(obj));
  }
  get length() {
    return this[_contents].length;
  }
  get isEmpty() {
    return this.length === 0;
  }
  get isNotEmpty() {
    return !dart.test(this.isEmpty);
  }
  write(obj) {
    this[_writeString](dart.str(obj));
  }
  writeCharCode(charCode) {
    if (charCode == null) dart.nullFailed(L7, 713, 26, "charCode");
    this[_writeString](core.String.fromCharCode(charCode));
  }
  writeAll(objects, separator = "") {
    if (objects == null) dart.nullFailed(L7, 718, 35, "objects");
    if (separator == null) dart.nullFailed(L7, 718, 52, "separator");
    this[_contents] = core.StringBuffer._writeAll(this[_contents], objects, separator);
  }
  writeln(obj = "") {
    this[_writeString](dart.str(obj) + dart.str("\n"));
  }
  clear() {
    this[_contents] = "";
  }
  toString() {
    return _js_helper.Primitives.flattenString(this[_contents]);
  }
};
(core.StringBuffer.new = function(content = "") {
  if (content == null) dart.nullFailed(L7, 702, 24, "content");
  this[_contents] = dart.str(content);
  ;
}).prototype = core.StringBuffer.prototype;
dart.addTypeTests(core.StringBuffer);
dart.addTypeCaches(core.StringBuffer);
core.StringBuffer[dart.implements] = () => [core.StringSink];
dart.setMethodSignature(core.StringBuffer, () => ({
  __proto__: dart.getMethods(core.StringBuffer.__proto__),
  [_writeString]: dart.fnType(dart.void, [core.String]),
  write: dart.fnType(dart.void, [dart.nullable(core.Object)]),
  writeCharCode: dart.fnType(dart.void, [core.int]),
  writeAll: dart.fnType(dart.void, [core.Iterable], [core.String]),
  writeln: dart.fnType(dart.void, [], [dart.nullable(core.Object)]),
  clear: dart.fnType(dart.void, [])
}));
dart.setGetterSignature(core.StringBuffer, () => ({
  __proto__: dart.getGetters(core.StringBuffer.__proto__),
  length: core.int,
  isEmpty: core.bool,
  isNotEmpty: core.bool
}));
dart.setLibraryUri(core.StringBuffer, L8$);
dart.setFieldSignature(core.StringBuffer, () => ({
  __proto__: dart.getFields(core.StringBuffer.__proto__),
  [_contents]: dart.fieldType(core.String)
}));
dart.defineExtensionMethods(core.StringBuffer, ['toString']);
convert._JsonDecoderSink = class _JsonDecoderSink extends convert._StringSinkConversionSink$(core.StringBuffer) {
  close() {
    super.close();
    let accumulated = dart.toString(this[_stringSink$]);
    this[_stringSink$].clear();
    let decoded = convert._parseJson(accumulated, this[_reviver$]);
    this[_sink$0].add(decoded);
    this[_sink$0].close();
  }
};
(convert._JsonDecoderSink.new = function(_reviver, _sink) {
  if (_sink == null) dart.nullFailed(L84, 379, 40, "_sink");
  this[_reviver$] = _reviver;
  this[_sink$0] = _sink;
  convert._JsonDecoderSink.__proto__.new.call(this, new core.StringBuffer.new(""));
  ;
}).prototype = convert._JsonDecoderSink.prototype;
dart.addTypeTests(convert._JsonDecoderSink);
dart.addTypeCaches(convert._JsonDecoderSink);
dart.setLibraryUri(convert._JsonDecoderSink, L31);
dart.setFieldSignature(convert._JsonDecoderSink, () => ({
  __proto__: dart.getFields(convert._JsonDecoderSink.__proto__),
  [_reviver$]: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(core.Object), [dart.nullable(core.Object), dart.nullable(core.Object)]))),
  [_sink$0]: dart.finalFieldType(core.Sink$(dart.nullable(core.Object)))
}));
var _allowInvalid = dart.privateName(convert, "_allowInvalid");
var _UnicodeSubsetDecoder__subsetMask = dart.privateName(convert, "_UnicodeSubsetDecoder._subsetMask");
var _UnicodeSubsetDecoder__allowInvalid = dart.privateName(convert, "_UnicodeSubsetDecoder._allowInvalid");
var C79;
var C80;
var _UnicodeSubsetEncoder__subsetMask = dart.privateName(convert, "_UnicodeSubsetEncoder._subsetMask");
var C81;
const _is_Codec_default = Symbol('_is_Codec_default');
convert.Codec$ = dart.generic((S, T) => {
  var _InvertedCodecOfT$S = () => (_InvertedCodecOfT$S = dart.constFn(convert._InvertedCodec$(T, S)))();
  class Codec extends core.Object {
    encode(input) {
      S.as(input);
      return this.encoder.convert(input);
    }
    decode(encoded) {
      T.as(encoded);
      return this.decoder.convert(encoded);
    }
    fuse(R, other) {
      convert.Codec$(T, R).as(other);
      if (other == null) dart.nullFailed(L88, 64, 35, "other");
      return new (convert._FusedCodec$(S, T, R)).new(this, other);
    }
    get inverted() {
      return new (_InvertedCodecOfT$S()).new(this);
    }
  }
  (Codec.new = function() {
    ;
  }).prototype = Codec.prototype;
  dart.addTypeTests(Codec);
  Codec.prototype[_is_Codec_default] = true;
  dart.addTypeCaches(Codec);
  dart.setMethodSignature(Codec, () => ({
    __proto__: dart.getMethods(Codec.__proto__),
    encode: dart.fnType(T, [dart.nullable(core.Object)]),
    decode: dart.fnType(S, [dart.nullable(core.Object)]),
    fuse: dart.gFnType(R => [convert.Codec$(S, R), [dart.nullable(core.Object)]], R => [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(Codec, () => ({
    __proto__: dart.getGetters(Codec.__proto__),
    inverted: convert.Codec$(T, S)
  }));
  dart.setLibraryUri(Codec, L31);
  return Codec;
});
convert.Codec = convert.Codec$();
dart.addTypeTests(convert.Codec, _is_Codec_default);
core.List$ = dart.generic(E => {
  class List extends core.Object {
    static new(length = null) {
      let list = null;
      if (length === void 0) {
        list = [];
      } else {
        let _length = length;
        if (length == null || _length < 0) {
          dart.throw(new core.ArgumentError.new(dart.str("Length must be a non-negative integer: ") + dart.str(_length)));
        }
        list = new Array(_length);
        list.fill(null);
        _interceptors.JSArray.markFixedList(list);
      }
      return _interceptors.JSArray$(E).of(list);
    }
    static filled(length, fill, opts) {
      if (length == null) dart.argumentError(length);
      let growable = opts && 'growable' in opts ? opts.growable : false;
      if (growable == null) dart.nullFailed(L7, 497, 60, "growable");
      let list = _interceptors.JSArray$(E).of(new Array(length));
      list.fill(fill);
      if (!dart.test(growable)) _interceptors.JSArray.markFixedList(list);
      return list;
    }
    static empty(opts) {
      let growable = opts && 'growable' in opts ? opts.growable : false;
      if (growable == null) dart.nullFailed(L7, 490, 28, "growable");
      let list = _interceptors.JSArray$(E).of(new Array());
      if (!dart.test(growable)) _interceptors.JSArray.markFixedList(list);
      return list;
    }
    static from(elements, opts) {
      if (elements == null) dart.nullFailed(L7, 505, 30, "elements");
      let growable = opts && 'growable' in opts ? opts.growable : true;
      if (growable == null) dart.nullFailed(L7, 505, 46, "growable");
      let list = _interceptors.JSArray$(E).of([]);
      if (core.Iterable$(E).is(elements)) {
        for (let e of elements) {
          list[$add](e);
        }
      } else {
        for (let e of elements) {
          list[$add](E.as(e));
        }
      }
      if (!dart.test(growable)) _interceptors.JSArray.markFixedList(list);
      return list;
    }
    static of(elements, opts) {
      if (elements == null) dart.nullFailed(L7, 523, 31, "elements");
      let growable = opts && 'growable' in opts ? opts.growable : true;
      if (growable == null) dart.nullFailed(L7, 523, 47, "growable");
      return core.List$(E).from(elements, {growable: growable});
    }
    static generate(length, generator, opts) {
      if (length == null) dart.nullFailed(L7, 529, 29, "length");
      if (generator == null) dart.nullFailed(L7, 529, 39, "generator");
      let growable = opts && 'growable' in opts ? opts.growable : true;
      if (growable == null) dart.nullFailed(L7, 530, 13, "growable");
      let result = _interceptors.JSArray$(E).of(new Array(length));
      if (!dart.test(growable)) _interceptors.JSArray.markFixedList(result);
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        result[$_set](i, generator(i));
      }
      return result;
    }
    static unmodifiable(elements) {
      if (elements == null) dart.nullFailed(L7, 540, 38, "elements");
      let list = core.List$(E).from(elements);
      _interceptors.JSArray.markUnmodifiableList(list);
      return list;
    }
    static castFrom(S, T, source) {
      if (source == null) dart.nullFailed(L89, 211, 41, "source");
      return new (_internal.CastList$(S, T)).new(source);
    }
    static copyRange(T, target, at, source, start = null, end = null) {
      if (target == null) dart.nullFailed(L89, 229, 36, "target");
      if (at == null) dart.nullFailed(L89, 229, 48, "at");
      if (source == null) dart.nullFailed(L89, 229, 60, "source");
      start == null ? start = 0 : null;
      end = core.RangeError.checkValidRange(start, end, source[$length]);
      if (end == null) {
        dart.throw("unreachable");
      }
      let length = dart.notNull(end) - dart.notNull(start);
      if (dart.notNull(target[$length]) < dart.notNull(at) + length) {
        dart.throw(new core.ArgumentError.value(target, "target", dart.str("Not big enough to hold ") + dart.str(length) + dart.str(" elements at position ") + dart.str(at)));
      }
      if (source != target || dart.notNull(start) >= dart.notNull(at)) {
        for (let i = 0; i < length; i = i + 1) {
          target[$_set](dart.notNull(at) + i, source[$_get](dart.notNull(start) + i));
        }
      } else {
        for (let i = length; (i = i - 1) >= 0;) {
          target[$_set](dart.notNull(at) + i, source[$_get](dart.notNull(start) + i));
        }
      }
    }
    static writeIterable(T, target, at, source) {
      if (target == null) dart.nullFailed(L89, 266, 40, "target");
      if (at == null) dart.nullFailed(L89, 266, 52, "at");
      if (source == null) dart.nullFailed(L89, 266, 68, "source");
      core.RangeError.checkValueInInterval(at, 0, target[$length], "at");
      let index = at;
      let targetLength = target[$length];
      for (let element of source) {
        if (index == targetLength) {
          dart.throw(new core.IndexError.new(targetLength, target));
        }
        target[$_set](index, element);
        index = dart.notNull(index) + 1;
      }
    }
    [Symbol.iterator]() {
      return new dart.JsIterator(this[$iterator]);
    }
  }
  (List[dart.mixinNew] = function() {
  }).prototype = List.prototype;
  dart.addTypeTests(List);
  List.prototype[dart.isList] = true;
  dart.addTypeCaches(List);
  List[dart.implements] = () => [_internal.EfficientLengthIterable$(E)];
  dart.setLibraryUri(List, L8$);
  return List;
});
core.List = core.List$();
dart.addTypeTests(core.List, dart.isList);
convert.Encoding = class Encoding extends convert.Codec$(core.String, core.List$(core.int)) {
  decodeStream(byteStream) {
    if (byteStream == null) dart.nullFailed(L87, 21, 49, "byteStream");
    return this.decoder.bind(byteStream).fold(core.StringBuffer, new core.StringBuffer.new(), dart.fn((buffer, string) => {
      let t158;
      if (buffer == null) dart.nullFailed(L87, 25, 27, "buffer");
      if (string == null) dart.nullFailed(L87, 25, 42, "string");
      t158 = buffer;
      return (() => {
        t158.write(string);
        return t158;
      })();
    }, StringBufferAndStringToStringBuffer())).then(core.String, dart.fn(buffer => {
      if (buffer == null) dart.nullFailed(L87, 26, 29, "buffer");
      return dart.toString(buffer);
    }, StringBufferToString()));
  }
  static getByName(name) {
    if (name == null) return null;
    return convert.Encoding._nameToEncoding[$_get](name[$toLowerCase]());
  }
};
(convert.Encoding.new = function() {
  convert.Encoding.__proto__.new.call(this);
  ;
}).prototype = convert.Encoding.prototype;
dart.addTypeTests(convert.Encoding);
dart.addTypeCaches(convert.Encoding);
dart.setMethodSignature(convert.Encoding, () => ({
  __proto__: dart.getMethods(convert.Encoding.__proto__),
  decodeStream: dart.fnType(async.Future$(core.String), [async.Stream$(core.List$(core.int))])
}));
dart.setLibraryUri(convert.Encoding, L31);
dart.defineLazy(convert.Encoding, {
  /*convert.Encoding._nameToEncoding*/get _nameToEncoding() {
    return new (IdentityMapOfString$Encoding()).from(["iso_8859-1:1987", convert.latin1, "iso-ir-100", convert.latin1, "iso_8859-1", convert.latin1, "iso-8859-1", convert.latin1, "latin1", convert.latin1, "l1", convert.latin1, "ibm819", convert.latin1, "cp819", convert.latin1, "csisolatin1", convert.latin1, "iso-ir-6", convert.ascii, "ansi_x3.4-1968", convert.ascii, "ansi_x3.4-1986", convert.ascii, "iso_646.irv:1991", convert.ascii, "iso646-us", convert.ascii, "us-ascii", convert.ascii, "us", convert.ascii, "ibm367", convert.ascii, "cp367", convert.ascii, "csascii", convert.ascii, "ascii", convert.ascii, "csutf8", convert.utf8, "utf-8", convert.utf8]);
  }
}, false);
var _allowInvalid$ = dart.privateName(convert, "AsciiCodec._allowInvalid");
convert.AsciiCodec = class AsciiCodec extends convert.Encoding {
  get [_allowInvalid]() {
    return this[_allowInvalid$];
  }
  set [_allowInvalid](value) {
    super[_allowInvalid] = value;
  }
  get name() {
    return "us-ascii";
  }
  encode(source) {
    core.String.as(source);
    if (source == null) dart.nullFailed(L86, 41, 27, "source");
    return this.encoder.convert(source);
  }
  decode(bytes, opts) {
    let t158;
    ListOfint().as(bytes);
    if (bytes == null) dart.nullFailed(L86, 51, 27, "bytes");
    let allowInvalid = opts && 'allowInvalid' in opts ? opts.allowInvalid : null;
    if (dart.test((t158 = allowInvalid, t158 == null ? this[_allowInvalid] : t158))) {
      return (C79 || CT.C79).convert(bytes);
    } else {
      return (C80 || CT.C80).convert(bytes);
    }
  }
  get encoder() {
    return C81 || CT.C81;
  }
  get decoder() {
    return dart.test(this[_allowInvalid]) ? C79 || CT.C79 : C80 || CT.C80;
  }
};
(convert.AsciiCodec.new = function(opts) {
  let allowInvalid = opts && 'allowInvalid' in opts ? opts.allowInvalid : false;
  if (allowInvalid == null) dart.nullFailed(L86, 36, 26, "allowInvalid");
  this[_allowInvalid$] = allowInvalid;
  convert.AsciiCodec.__proto__.new.call(this);
  ;
}).prototype = convert.AsciiCodec.prototype;
dart.addTypeTests(convert.AsciiCodec);
dart.addTypeCaches(convert.AsciiCodec);
dart.setMethodSignature(convert.AsciiCodec, () => ({
  __proto__: dart.getMethods(convert.AsciiCodec.__proto__),
  encode: dart.fnType(typed_data.Uint8List, [dart.nullable(core.Object)]),
  decode: dart.fnType(core.String, [dart.nullable(core.Object)], {allowInvalid: dart.nullable(core.bool)}, {})
}));
dart.setGetterSignature(convert.AsciiCodec, () => ({
  __proto__: dart.getGetters(convert.AsciiCodec.__proto__),
  name: core.String,
  encoder: convert.AsciiEncoder,
  decoder: convert.AsciiDecoder
}));
dart.setLibraryUri(convert.AsciiCodec, L31);
dart.setFieldSignature(convert.AsciiCodec, () => ({
  __proto__: dart.getFields(convert.AsciiCodec.__proto__),
  [_allowInvalid]: dart.finalFieldType(core.bool)
}));
var _subsetMask$ = dart.privateName(convert, "_subsetMask");
convert._UnicodeSubsetEncoder = class _UnicodeSubsetEncoder extends convert.Converter$(core.String, core.List$(core.int)) {
  get [_subsetMask$]() {
    return this[_subsetMask$0];
  }
  set [_subsetMask$](value) {
    super[_subsetMask$] = value;
  }
  convert(string, start = 0, end = null) {
    core.String.as(string);
    if (string == null) dart.nullFailed(L86, 77, 28, "string");
    if (start == null) dart.nullFailed(L86, 77, 41, "start");
    let stringLength = string.length;
    end = core.RangeError.checkValidRange(start, end, stringLength);
    if (end == null) {
      dart.throw(new core.RangeError.new("Invalid range"));
    }
    let length = dart.notNull(end) - dart.notNull(start);
    let result = _native_typed_data.NativeUint8List.new(length);
    for (let i = 0; i < length; i = i + 1) {
      let codeUnit = string[$codeUnitAt](dart.notNull(start) + i);
      if ((codeUnit & ~dart.notNull(this[_subsetMask$]) >>> 0) !== 0) {
        dart.throw(new core.ArgumentError.value(string, "string", "Contains invalid characters."));
      }
      result[$_set](i, codeUnit);
    }
    return result;
  }
  startChunkedConversion(sink) {
    SinkOfListOfint().as(sink);
    if (sink == null) dart.nullFailed(L86, 101, 63, "sink");
    return new convert._UnicodeSubsetEncoderSink.new(this[_subsetMask$], convert.ByteConversionSink.is(sink) ? sink : new convert._ByteAdapterSink.new(sink));
  }
  bind(stream) {
    StreamOfString().as(stream);
    if (stream == null) dart.nullFailed(L86, 107, 41, "stream");
    return super.bind(stream);
  }
};
(convert._UnicodeSubsetEncoder.new = function(_subsetMask) {
  if (_subsetMask == null) dart.nullFailed(L86, 71, 36, "_subsetMask");
  this[_subsetMask$0] = _subsetMask;
  convert._UnicodeSubsetEncoder.__proto__.new.call(this);
  ;
}).prototype = convert._UnicodeSubsetEncoder.prototype;
dart.addTypeTests(convert._UnicodeSubsetEncoder);
dart.addTypeCaches(convert._UnicodeSubsetEncoder);
const _subsetMask$0 = _UnicodeSubsetEncoder__subsetMask;
dart.setMethodSignature(convert._UnicodeSubsetEncoder, () => ({
  __proto__: dart.getMethods(convert._UnicodeSubsetEncoder.__proto__),
  convert: dart.fnType(typed_data.Uint8List, [dart.nullable(core.Object)], [core.int, dart.nullable(core.int)]),
  startChunkedConversion: dart.fnType(convert.StringConversionSink, [dart.nullable(core.Object)])
}));
dart.setLibraryUri(convert._UnicodeSubsetEncoder, L31);
dart.setFieldSignature(convert._UnicodeSubsetEncoder, () => ({
  __proto__: dart.getFields(convert._UnicodeSubsetEncoder.__proto__),
  [_subsetMask$]: dart.finalFieldType(core.int)
}));
convert.AsciiEncoder = class AsciiEncoder extends convert._UnicodeSubsetEncoder {};
(convert.AsciiEncoder.new = function() {
  convert.AsciiEncoder.__proto__.new.call(this, 127);
  ;
}).prototype = convert.AsciiEncoder.prototype;
dart.addTypeTests(convert.AsciiEncoder);
dart.addTypeCaches(convert.AsciiEncoder);
dart.setLibraryUri(convert.AsciiEncoder, L31);
convert._UnicodeSubsetEncoderSink = class _UnicodeSubsetEncoderSink extends convert.StringConversionSinkBase {
  close() {
    this[_sink$0].close();
  }
  addSlice(source, start, end, isLast) {
    if (source == null) dart.nullFailed(L86, 127, 24, "source");
    if (start == null) dart.nullFailed(L86, 127, 36, "start");
    if (end == null) dart.nullFailed(L86, 127, 47, "end");
    if (isLast == null) dart.nullFailed(L86, 127, 57, "isLast");
    core.RangeError.checkValidRange(start, end, source.length);
    for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
      let codeUnit = source[$codeUnitAt](i);
      if ((codeUnit & ~dart.notNull(this[_subsetMask$]) >>> 0) !== 0) {
        dart.throw(new core.ArgumentError.new(dart.str("Source contains invalid character with code point: ") + dart.str(codeUnit) + dart.str(".")));
      }
    }
    this[_sink$0].add(source[$codeUnits][$sublist](start, end));
    if (dart.test(isLast)) {
      this.close();
    }
  }
};
(convert._UnicodeSubsetEncoderSink.new = function(_subsetMask, _sink) {
  if (_subsetMask == null) dart.nullFailed(L86, 121, 34, "_subsetMask");
  if (_sink == null) dart.nullFailed(L86, 121, 52, "_sink");
  this[_subsetMask$] = _subsetMask;
  this[_sink$0] = _sink;
  ;
}).prototype = convert._UnicodeSubsetEncoderSink.prototype;
dart.addTypeTests(convert._UnicodeSubsetEncoderSink);
dart.addTypeCaches(convert._UnicodeSubsetEncoderSink);
dart.setMethodSignature(convert._UnicodeSubsetEncoderSink, () => ({
  __proto__: dart.getMethods(convert._UnicodeSubsetEncoderSink.__proto__),
  close: dart.fnType(dart.void, []),
  addSlice: dart.fnType(dart.void, [core.String, core.int, core.int, core.bool])
}));
dart.setLibraryUri(convert._UnicodeSubsetEncoderSink, L31);
dart.setFieldSignature(convert._UnicodeSubsetEncoderSink, () => ({
  __proto__: dart.getFields(convert._UnicodeSubsetEncoderSink.__proto__),
  [_sink$0]: dart.finalFieldType(convert.ByteConversionSink),
  [_subsetMask$]: dart.finalFieldType(core.int)
}));
var _convertInvalid = dart.privateName(convert, "_convertInvalid");
convert._UnicodeSubsetDecoder = class _UnicodeSubsetDecoder extends convert.Converter$(core.List$(core.int), core.String) {
  get [_allowInvalid]() {
    return this[_allowInvalid$0];
  }
  set [_allowInvalid](value) {
    super[_allowInvalid] = value;
  }
  get [_subsetMask$]() {
    return this[_subsetMask$1];
  }
  set [_subsetMask$](value) {
    super[_subsetMask$] = value;
  }
  convert(bytes, start = 0, end = null) {
    ListOfint().as(bytes);
    if (bytes == null) dart.nullFailed(L86, 168, 28, "bytes");
    if (start == null) dart.nullFailed(L86, 168, 40, "start");
    end = core.RangeError.checkValidRange(start, end, bytes[$length]);
    if (end == null) {
      dart.throw(new core.RangeError.new("Invalid range"));
    }
    for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
      let byte = bytes[$_get](i);
      if ((dart.notNull(byte) & ~dart.notNull(this[_subsetMask$]) >>> 0) !== 0) {
        if (!dart.test(this[_allowInvalid])) {
          dart.throw(new core.FormatException.new(dart.str("Invalid value in input: ") + dart.str(byte)));
        }
        return this[_convertInvalid](bytes, start, end);
      }
    }
    return core.String.fromCharCodes(bytes, start, end);
  }
  [_convertInvalid](bytes, start, end) {
    if (bytes == null) dart.nullFailed(L86, 186, 36, "bytes");
    if (start == null) dart.nullFailed(L86, 186, 47, "start");
    if (end == null) dart.nullFailed(L86, 186, 58, "end");
    let buffer = new core.StringBuffer.new();
    for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
      let value = bytes[$_get](i);
      if ((dart.notNull(value) & ~dart.notNull(this[_subsetMask$]) >>> 0) !== 0) value = 65533;
      buffer.writeCharCode(value);
    }
    return buffer.toString();
  }
  bind(stream) {
    StreamOfListOfint().as(stream);
    if (stream == null) dart.nullFailed(L86, 203, 41, "stream");
    return super.bind(stream);
  }
};
(convert._UnicodeSubsetDecoder.new = function(_allowInvalid, _subsetMask) {
  if (_allowInvalid == null) dart.nullFailed(L86, 161, 36, "_allowInvalid");
  if (_subsetMask == null) dart.nullFailed(L86, 161, 56, "_subsetMask");
  this[_allowInvalid$0] = _allowInvalid;
  this[_subsetMask$1] = _subsetMask;
  convert._UnicodeSubsetDecoder.__proto__.new.call(this);
  ;
}).prototype = convert._UnicodeSubsetDecoder.prototype;
dart.addTypeTests(convert._UnicodeSubsetDecoder);
dart.addTypeCaches(convert._UnicodeSubsetDecoder);
const _allowInvalid$0 = _UnicodeSubsetDecoder__allowInvalid;
const _subsetMask$1 = _UnicodeSubsetDecoder__subsetMask;
dart.setMethodSignature(convert._UnicodeSubsetDecoder, () => ({
  __proto__: dart.getMethods(convert._UnicodeSubsetDecoder.__proto__),
  convert: dart.fnType(core.String, [dart.nullable(core.Object)], [core.int, dart.nullable(core.int)]),
  [_convertInvalid]: dart.fnType(core.String, [core.List$(core.int), core.int, core.int])
}));
dart.setLibraryUri(convert._UnicodeSubsetDecoder, L31);
dart.setFieldSignature(convert._UnicodeSubsetDecoder, () => ({
  __proto__: dart.getFields(convert._UnicodeSubsetDecoder.__proto__),
  [_allowInvalid]: dart.finalFieldType(core.bool),
  [_subsetMask$]: dart.finalFieldType(core.int)
}));
convert.AsciiDecoder = class AsciiDecoder extends convert._UnicodeSubsetDecoder {
  startChunkedConversion(sink) {
    SinkOfString().as(sink);
    if (sink == null) dart.nullFailed(L86, 214, 58, "sink");
    let stringSink = null;
    if (convert.StringConversionSink.is(sink)) {
      stringSink = sink;
    } else {
      stringSink = new convert._StringAdapterSink.new(sink);
    }
    if (dart.test(this[_allowInvalid])) {
      return new convert._ErrorHandlingAsciiDecoderSink.new(stringSink.asUtf8Sink(false));
    } else {
      return new convert._SimpleAsciiDecoderSink.new(stringSink);
    }
  }
};
(convert.AsciiDecoder.new = function(opts) {
  let allowInvalid = opts && 'allowInvalid' in opts ? opts.allowInvalid : false;
  if (allowInvalid == null) dart.nullFailed(L86, 207, 28, "allowInvalid");
  convert.AsciiDecoder.__proto__.new.call(this, allowInvalid, 127);
  ;
}).prototype = convert.AsciiDecoder.prototype;
dart.addTypeTests(convert.AsciiDecoder);
dart.addTypeCaches(convert.AsciiDecoder);
dart.setMethodSignature(convert.AsciiDecoder, () => ({
  __proto__: dart.getMethods(convert.AsciiDecoder.__proto__),
  startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)])
}));
dart.setLibraryUri(convert.AsciiDecoder, L31);
var _utf8Sink$ = dart.privateName(convert, "_utf8Sink");
var C82;
const _is_ChunkedConversionSink_default = Symbol('_is_ChunkedConversionSink_default');
convert.ChunkedConversionSink$ = dart.generic(T => {
  class ChunkedConversionSink extends core.Object {}
  (ChunkedConversionSink.new = function() {
    ;
  }).prototype = ChunkedConversionSink.prototype;
  dart.addTypeTests(ChunkedConversionSink);
  ChunkedConversionSink.prototype[_is_ChunkedConversionSink_default] = true;
  dart.addTypeCaches(ChunkedConversionSink);
  ChunkedConversionSink[dart.implements] = () => [core.Sink$(T)];
  dart.setLibraryUri(ChunkedConversionSink, L31);
  return ChunkedConversionSink;
});
convert.ChunkedConversionSink = convert.ChunkedConversionSink$();
dart.addTypeTests(convert.ChunkedConversionSink, _is_ChunkedConversionSink_default);
convert.ByteConversionSink = class ByteConversionSink extends convert.ChunkedConversionSink$(core.List$(core.int)) {};
(convert.ByteConversionSink.new = function() {
  convert.ByteConversionSink.__proto__.new.call(this);
  ;
}).prototype = convert.ByteConversionSink.prototype;
dart.addTypeTests(convert.ByteConversionSink);
dart.addTypeCaches(convert.ByteConversionSink);
dart.setLibraryUri(convert.ByteConversionSink, L31);
convert.ByteConversionSinkBase = class ByteConversionSinkBase extends convert.ByteConversionSink {
  addSlice(chunk, start, end, isLast) {
    if (chunk == null) dart.nullFailed(L90, 42, 27, "chunk");
    if (start == null) dart.nullFailed(L90, 42, 38, "start");
    if (end == null) dart.nullFailed(L90, 42, 49, "end");
    if (isLast == null) dart.nullFailed(L90, 42, 59, "isLast");
    this.add(chunk[$sublist](start, end));
    if (dart.test(isLast)) this.close();
  }
};
(convert.ByteConversionSinkBase.new = function() {
  convert.ByteConversionSinkBase.__proto__.new.call(this);
  ;
}).prototype = convert.ByteConversionSinkBase.prototype;
dart.addTypeTests(convert.ByteConversionSinkBase);
dart.addTypeCaches(convert.ByteConversionSinkBase);
dart.setMethodSignature(convert.ByteConversionSinkBase, () => ({
  __proto__: dart.getMethods(convert.ByteConversionSinkBase.__proto__),
  addSlice: dart.fnType(dart.void, [core.List$(core.int), core.int, core.int, core.bool])
}));
dart.setLibraryUri(convert.ByteConversionSinkBase, L31);
convert._ErrorHandlingAsciiDecoderSink = class _ErrorHandlingAsciiDecoderSink extends convert.ByteConversionSinkBase {
  close() {
    this[_utf8Sink$].close();
  }
  add(source) {
    ListOfint().as(source);
    if (source == null) dart.nullFailed(L86, 241, 22, "source");
    this.addSlice(source, 0, source[$length], false);
  }
  addSlice(source, start, end, isLast) {
    if (source == null) dart.nullFailed(L86, 245, 27, "source");
    if (start == null) dart.nullFailed(L86, 245, 39, "start");
    if (end == null) dart.nullFailed(L86, 245, 50, "end");
    if (isLast == null) dart.nullFailed(L86, 245, 60, "isLast");
    core.RangeError.checkValidRange(start, end, source[$length]);
    for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
      if ((dart.notNull(source[$_get](i)) & ~127 >>> 0) !== 0) {
        if (dart.notNull(i) > dart.notNull(start)) this[_utf8Sink$].addSlice(source, start, i, false);
        this[_utf8Sink$].add(C82 || CT.C82);
        start = dart.notNull(i) + 1;
      }
    }
    if (dart.notNull(start) < dart.notNull(end)) {
      this[_utf8Sink$].addSlice(source, start, end, isLast);
    } else if (dart.test(isLast)) {
      this.close();
    }
  }
};
(convert._ErrorHandlingAsciiDecoderSink.new = function(_utf8Sink) {
  if (_utf8Sink == null) dart.nullFailed(L86, 235, 39, "_utf8Sink");
  this[_utf8Sink$] = _utf8Sink;
  convert._ErrorHandlingAsciiDecoderSink.__proto__.new.call(this);
  ;
}).prototype = convert._ErrorHandlingAsciiDecoderSink.prototype;
dart.addTypeTests(convert._ErrorHandlingAsciiDecoderSink);
dart.addTypeCaches(convert._ErrorHandlingAsciiDecoderSink);
dart.setMethodSignature(convert._ErrorHandlingAsciiDecoderSink, () => ({
  __proto__: dart.getMethods(convert._ErrorHandlingAsciiDecoderSink.__proto__),
  close: dart.fnType(dart.void, []),
  add: dart.fnType(dart.void, [dart.nullable(core.Object)])
}));
dart.setLibraryUri(convert._ErrorHandlingAsciiDecoderSink, L31);
dart.setFieldSignature(convert._ErrorHandlingAsciiDecoderSink, () => ({
  __proto__: dart.getFields(convert._ErrorHandlingAsciiDecoderSink.__proto__),
  [_utf8Sink$]: dart.fieldType(convert.ByteConversionSink)
}));
convert._SimpleAsciiDecoderSink = class _SimpleAsciiDecoderSink extends convert.ByteConversionSinkBase {
  close() {
    this[_sink$0].close();
  }
  add(source) {
    ListOfint().as(source);
    if (source == null) dart.nullFailed(L86, 271, 22, "source");
    for (let i = 0; i < dart.notNull(source[$length]); i = i + 1) {
      if ((dart.notNull(source[$_get](i)) & ~127 >>> 0) !== 0) {
        dart.throw(new core.FormatException.new("Source contains non-ASCII bytes."));
      }
    }
    this[_sink$0].add(core.String.fromCharCodes(source));
  }
  addSlice(source, start, end, isLast) {
    if (source == null) dart.nullFailed(L86, 280, 27, "source");
    if (start == null) dart.nullFailed(L86, 280, 39, "start");
    if (end == null) dart.nullFailed(L86, 280, 50, "end");
    if (isLast == null) dart.nullFailed(L86, 280, 60, "isLast");
    let length = source[$length];
    core.RangeError.checkValidRange(start, end, length);
    if (dart.notNull(start) < dart.notNull(end)) {
      if (start !== 0 || end != length) {
        source = source[$sublist](start, end);
      }
      this.add(source);
    }
    if (dart.test(isLast)) this.close();
  }
};
(convert._SimpleAsciiDecoderSink.new = function(_sink) {
  if (_sink == null) dart.nullFailed(L86, 265, 32, "_sink");
  this[_sink$0] = _sink;
  convert._SimpleAsciiDecoderSink.__proto__.new.call(this);
  ;
}).prototype = convert._SimpleAsciiDecoderSink.prototype;
dart.addTypeTests(convert._SimpleAsciiDecoderSink);
dart.addTypeCaches(convert._SimpleAsciiDecoderSink);
dart.setMethodSignature(convert._SimpleAsciiDecoderSink, () => ({
  __proto__: dart.getMethods(convert._SimpleAsciiDecoderSink.__proto__),
  close: dart.fnType(dart.void, []),
  add: dart.fnType(dart.void, [dart.nullable(core.Object)])
}));
dart.setLibraryUri(convert._SimpleAsciiDecoderSink, L31);
dart.setFieldSignature(convert._SimpleAsciiDecoderSink, () => ({
  __proto__: dart.getFields(convert._SimpleAsciiDecoderSink.__proto__),
  [_sink$0]: dart.fieldType(core.Sink)
}));
var Base64Encoder__urlSafe = dart.privateName(convert, "Base64Encoder._urlSafe");
var C83;
var C84;
var _encoder = dart.privateName(convert, "_encoder");
var C85;
var _encoder$ = dart.privateName(convert, "Base64Codec._encoder");
convert.Base64Codec = class Base64Codec extends convert.Codec$(core.List$(core.int), core.String) {
  get [_encoder]() {
    return this[_encoder$];
  }
  set [_encoder](value) {
    super[_encoder] = value;
  }
  get encoder() {
    return this[_encoder];
  }
  get decoder() {
    return C85 || CT.C85;
  }
  decode(encoded) {
    core.String.as(encoded);
    if (encoded == null) dart.nullFailed(L91, 82, 27, "encoded");
    return this.decoder.convert(encoded);
  }
  normalize(source, start = 0, end = null) {
    let t158, t158$, t158$0, t158$1, t158$2;
    if (source == null) dart.nullFailed(L91, 96, 27, "source");
    if (start == null) dart.nullFailed(L91, 96, 40, "start");
    end = core.RangeError.checkValidRange(start, end, source.length);
    if (end == null) {
      dart.throw(new core.RangeError.new("Invalid range"));
    }
    let buffer = null;
    let sliceStart = start;
    let alphabet = convert._Base64Encoder._base64Alphabet;
    let inverseAlphabet = convert._Base64Decoder._inverseAlphabet;
    let firstPadding = -1;
    let firstPaddingSourceIndex = -1;
    let paddingCount = 0;
    for (let i = start; dart.notNull(i) < dart.notNull(end);) {
      let sliceEnd = i;
      let char = source[$codeUnitAt]((t158 = i, i = dart.notNull(t158) + 1, t158));
      let originalChar = char;
      if (char === 37) {
        if (dart.notNull(i) + 2 <= dart.notNull(end)) {
          char = _internal.parseHexByte(source, i);
          i = dart.notNull(i) + 2;
          if (char === 37) char = -1;
        } else {
          char = -1;
        }
      }
      if (0 <= dart.notNull(char) && dart.notNull(char) <= 127) {
        let value = inverseAlphabet[$_get](char);
        if (dart.notNull(value) >= 0) {
          char = alphabet[$codeUnitAt](value);
          if (char == originalChar) continue;
        } else if (value === -1) {
          if (firstPadding < 0) {
            firstPadding = dart.notNull((t158$0 = (t158$ = buffer, t158$ == null ? null : t158$.length), t158$0 == null ? 0 : t158$0)) + (dart.notNull(sliceEnd) - dart.notNull(sliceStart));
            firstPaddingSourceIndex = sliceEnd;
          }
          paddingCount = paddingCount + 1;
          if (originalChar === 61) continue;
        }
        if (value !== -2) {
          t158$2 = (t158$1 = buffer, t158$1 == null ? buffer = new core.StringBuffer.new() : t158$1);
          (() => {
            t158$2.write(source[$substring](sliceStart, sliceEnd));
            t158$2.writeCharCode(char);
            return t158$2;
          })();
          sliceStart = i;
          continue;
        }
      }
      dart.throw(new core.FormatException.new("Invalid base64 data", source, sliceEnd));
    }
    if (buffer != null) {
      buffer.write(source[$substring](sliceStart, end));
      if (firstPadding >= 0) {
        convert.Base64Codec._checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, buffer.length);
      } else {
        let endLength = (dart.notNull(buffer.length) - 1)[$modulo](4) + 1;
        if (endLength === 1) {
          dart.throw(new core.FormatException.new("Invalid base64 encoding length ", source, end));
        }
        while (endLength < 4) {
          buffer.write("=");
          endLength = endLength + 1;
        }
      }
      return source[$replaceRange](start, end, dart.toString(buffer));
    }
    let length = dart.notNull(end) - dart.notNull(start);
    if (firstPadding >= 0) {
      convert.Base64Codec._checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, length);
    } else {
      let endLength = length[$modulo](4);
      if (endLength === 1) {
        dart.throw(new core.FormatException.new("Invalid base64 encoding length ", source, end));
      }
      if (endLength > 1) {
        source = source[$replaceRange](end, end, endLength === 2 ? "==" : "=");
      }
    }
    return source;
  }
  static _checkPadding(source, sourceIndex, sourceEnd, firstPadding, paddingCount, length) {
    if (source == null) dart.nullFailed(L91, 198, 36, "source");
    if (sourceIndex == null) dart.nullFailed(L91, 198, 48, "sourceIndex");
    if (sourceEnd == null) dart.nullFailed(L91, 198, 65, "sourceEnd");
    if (firstPadding == null) dart.nullFailed(L91, 199, 11, "firstPadding");
    if (paddingCount == null) dart.nullFailed(L91, 199, 29, "paddingCount");
    if (length == null) dart.nullFailed(L91, 199, 47, "length");
    if (length[$modulo](4) !== 0) {
      dart.throw(new core.FormatException.new(dart.str("Invalid base64 padding, padded length must be multiple of four, ") + dart.str("is ") + dart.str(length), source, sourceEnd));
    }
    if (dart.notNull(firstPadding) + dart.notNull(paddingCount) !== length) {
      dart.throw(new core.FormatException.new("Invalid base64 padding, '=' not at the end", source, sourceIndex));
    }
    if (dart.notNull(paddingCount) > 2) {
      dart.throw(new core.FormatException.new("Invalid base64 padding, more than two '=' characters", source, sourceIndex));
    }
  }
};
(convert.Base64Codec.new = function() {
  this[_encoder$] = C83 || CT.C83;
  convert.Base64Codec.__proto__.new.call(this);
  ;
}).prototype = convert.Base64Codec.prototype;
(convert.Base64Codec.urlSafe = function() {
  this[_encoder$] = C84 || CT.C84;
  convert.Base64Codec.__proto__.new.call(this);
  ;
}).prototype = convert.Base64Codec.prototype;
dart.addTypeTests(convert.Base64Codec);
dart.addTypeCaches(convert.Base64Codec);
dart.setMethodSignature(convert.Base64Codec, () => ({
  __proto__: dart.getMethods(convert.Base64Codec.__proto__),
  decode: dart.fnType(typed_data.Uint8List, [dart.nullable(core.Object)]),
  normalize: dart.fnType(core.String, [core.String], [core.int, dart.nullable(core.int)])
}));
dart.setGetterSignature(convert.Base64Codec, () => ({
  __proto__: dart.getGetters(convert.Base64Codec.__proto__),
  encoder: convert.Base64Encoder,
  decoder: convert.Base64Decoder
}));
dart.setLibraryUri(convert.Base64Codec, L31);
dart.setFieldSignature(convert.Base64Codec, () => ({
  __proto__: dart.getFields(convert.Base64Codec.__proto__),
  [_encoder]: dart.finalFieldType(convert.Base64Encoder)
}));
var _urlSafe = dart.privateName(convert, "_urlSafe");
convert.Base64Encoder = class Base64Encoder extends convert.Converter$(core.List$(core.int), core.String) {
  get [_urlSafe]() {
    return this[_urlSafe$];
  }
  set [_urlSafe](value) {
    super[_urlSafe] = value;
  }
  convert(input) {
    ListOfint().as(input);
    if (input == null) dart.nullFailed(L91, 235, 28, "input");
    if (dart.test(input[$isEmpty])) return "";
    let encoder = new convert._Base64Encoder.new(this[_urlSafe]);
    let buffer = dart.nullCheck(encoder.encode(input, 0, input[$length], true));
    return core.String.fromCharCodes(buffer);
  }
  startChunkedConversion(sink) {
    SinkOfString().as(sink);
    if (sink == null) dart.nullFailed(L91, 242, 58, "sink");
    if (convert.StringConversionSink.is(sink)) {
      return new convert._Utf8Base64EncoderSink.new(sink.asUtf8Sink(false), this[_urlSafe]);
    }
    return new convert._AsciiBase64EncoderSink.new(sink, this[_urlSafe]);
  }
};
(convert.Base64Encoder.new = function() {
  this[_urlSafe$] = false;
  convert.Base64Encoder.__proto__.new.call(this);
  ;
}).prototype = convert.Base64Encoder.prototype;
(convert.Base64Encoder.urlSafe = function() {
  this[_urlSafe$] = true;
  convert.Base64Encoder.__proto__.new.call(this);
  ;
}).prototype = convert.Base64Encoder.prototype;
dart.addTypeTests(convert.Base64Encoder);
dart.addTypeCaches(convert.Base64Encoder);
const _urlSafe$ = Base64Encoder__urlSafe;
dart.setMethodSignature(convert.Base64Encoder, () => ({
  __proto__: dart.getMethods(convert.Base64Encoder.__proto__),
  convert: dart.fnType(core.String, [dart.nullable(core.Object)]),
  startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)])
}));
dart.setLibraryUri(convert.Base64Encoder, L31);
dart.setFieldSignature(convert.Base64Encoder, () => ({
  __proto__: dart.getFields(convert.Base64Encoder.__proto__),
  [_urlSafe]: dart.finalFieldType(core.bool)
}));
var _state$0 = dart.privateName(convert, "_state");
var _alphabet = dart.privateName(convert, "_alphabet");
convert._Base64Encoder = class _Base64Encoder extends core.Object {
  static _encodeState(count, bits) {
    if (count == null) dart.nullFailed(L91, 282, 31, "count");
    if (bits == null) dart.nullFailed(L91, 282, 42, "bits");
    if (!(dart.notNull(count) <= 3)) dart.assertFailed(null, L91, 283, 12, "count <= _countMask");
    return (bits[$leftShift](2) | dart.notNull(count)) >>> 0;
  }
  static _stateBits(state) {
    if (state == null) dart.nullFailed(L91, 288, 29, "state");
    return state[$rightShift](2);
  }
  static _stateCount(state) {
    if (state == null) dart.nullFailed(L91, 291, 30, "state");
    return (dart.notNull(state) & 3) >>> 0;
  }
  createBuffer(bufferLength) {
    if (bufferLength == null) dart.nullFailed(L91, 294, 30, "bufferLength");
    return _native_typed_data.NativeUint8List.new(bufferLength);
  }
  encode(bytes, start, end, isLast) {
    if (bytes == null) dart.nullFailed(L91, 307, 31, "bytes");
    if (start == null) dart.nullFailed(L91, 307, 42, "start");
    if (end == null) dart.nullFailed(L91, 307, 53, "end");
    if (isLast == null) dart.nullFailed(L91, 307, 63, "isLast");
    if (!(0 <= dart.notNull(start))) dart.assertFailed(null, L91, 308, 12, "0 <= start");
    if (!(dart.notNull(start) <= dart.notNull(end))) dart.assertFailed(null, L91, 309, 12, "start <= end");
    if (!(dart.notNull(end) <= dart.notNull(bytes[$length]))) dart.assertFailed(null, L91, 310, 12, "end <= bytes.length");
    let length = dart.notNull(end) - dart.notNull(start);
    let count = convert._Base64Encoder._stateCount(this[_state$0]);
    let byteCount = dart.notNull(count) + length;
    let fullChunks = (byteCount / 3)[$truncate]();
    let partialChunkLength = byteCount - fullChunks * 3;
    let bufferLength = fullChunks * 4;
    if (dart.test(isLast) && partialChunkLength > 0) {
      bufferLength = bufferLength + 4;
    }
    let output = this.createBuffer(bufferLength);
    this[_state$0] = convert._Base64Encoder.encodeChunk(this[_alphabet], bytes, start, end, isLast, output, 0, this[_state$0]);
    if (bufferLength > 0) return output;
    return null;
  }
  static encodeChunk(alphabet, bytes, start, end, isLast, output, outputIndex, state) {
    let t158, t158$, t158$0, t158$1;
    if (alphabet == null) dart.nullFailed(L91, 330, 33, "alphabet");
    if (bytes == null) dart.nullFailed(L91, 330, 53, "bytes");
    if (start == null) dart.nullFailed(L91, 330, 64, "start");
    if (end == null) dart.nullFailed(L91, 330, 75, "end");
    if (isLast == null) dart.nullFailed(L91, 331, 12, "isLast");
    if (output == null) dart.nullFailed(L91, 331, 30, "output");
    if (outputIndex == null) dart.nullFailed(L91, 331, 42, "outputIndex");
    if (state == null) dart.nullFailed(L91, 331, 59, "state");
    let bits = convert._Base64Encoder._stateBits(state);
    let expectedChars = 3 - dart.notNull(convert._Base64Encoder._stateCount(state));
    let byteOr = 0;
    for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
      let byte = bytes[$_get](i);
      byteOr = (byteOr | dart.notNull(byte)) >>> 0;
      bits = (dart.notNull(bits) << 8 | dart.notNull(byte)) & 16777215;
      expectedChars = expectedChars - 1;
      if (expectedChars === 0) {
        output[$_set]((t158 = outputIndex, outputIndex = dart.notNull(t158) + 1, t158), alphabet[$codeUnitAt]((bits[$rightShift](18) & 63) >>> 0));
        output[$_set]((t158$ = outputIndex, outputIndex = dart.notNull(t158$) + 1, t158$), alphabet[$codeUnitAt]((bits[$rightShift](12) & 63) >>> 0));
        output[$_set]((t158$0 = outputIndex, outputIndex = dart.notNull(t158$0) + 1, t158$0), alphabet[$codeUnitAt]((bits[$rightShift](6) & 63) >>> 0));
        output[$_set]((t158$1 = outputIndex, outputIndex = dart.notNull(t158$1) + 1, t158$1), alphabet[$codeUnitAt]((dart.notNull(bits) & 63) >>> 0));
        expectedChars = 3;
        bits = 0;
      }
    }
    if (byteOr >= 0 && byteOr <= 255) {
      if (dart.test(isLast) && expectedChars < 3) {
        convert._Base64Encoder.writeFinalChunk(alphabet, output, outputIndex, 3 - expectedChars, bits);
        return 0;
      }
      return convert._Base64Encoder._encodeState(3 - expectedChars, bits);
    }
    let i = start;
    while (dart.notNull(i) < dart.notNull(end)) {
      let byte = bytes[$_get](i);
      if (dart.notNull(byte) < 0 || dart.notNull(byte) > 255) break;
      i = dart.notNull(i) + 1;
    }
    dart.throw(new core.ArgumentError.value(bytes, dart.str("Not a byte value at index ") + dart.str(i) + dart.str(": 0x") + dart.str(bytes[$_get](i)[$toRadixString](16))));
  }
  static writeFinalChunk(alphabet, output, outputIndex, count, bits) {
    let t158, t158$, t158$0, t158$1, t158$2, t158$3, t158$4, t158$5;
    if (alphabet == null) dart.nullFailed(L91, 378, 14, "alphabet");
    if (output == null) dart.nullFailed(L91, 378, 34, "output");
    if (outputIndex == null) dart.nullFailed(L91, 378, 46, "outputIndex");
    if (count == null) dart.nullFailed(L91, 378, 63, "count");
    if (bits == null) dart.nullFailed(L91, 378, 74, "bits");
    if (!(dart.notNull(count) > 0)) dart.assertFailed(null, L91, 379, 12, "count > 0");
    if (count === 1) {
      output[$_set]((t158 = outputIndex, outputIndex = dart.notNull(t158) + 1, t158), alphabet[$codeUnitAt]((bits[$rightShift](2) & 63) >>> 0));
      output[$_set]((t158$ = outputIndex, outputIndex = dart.notNull(t158$) + 1, t158$), alphabet[$codeUnitAt]((dart.notNull(bits) << 4 & 63) >>> 0));
      output[$_set]((t158$0 = outputIndex, outputIndex = dart.notNull(t158$0) + 1, t158$0), 61);
      output[$_set]((t158$1 = outputIndex, outputIndex = dart.notNull(t158$1) + 1, t158$1), 61);
    } else {
      if (!(count === 2)) dart.assertFailed(null, L91, 386, 14, "count == 2");
      output[$_set]((t158$2 = outputIndex, outputIndex = dart.notNull(t158$2) + 1, t158$2), alphabet[$codeUnitAt]((bits[$rightShift](10) & 63) >>> 0));
      output[$_set]((t158$3 = outputIndex, outputIndex = dart.notNull(t158$3) + 1, t158$3), alphabet[$codeUnitAt]((bits[$rightShift](4) & 63) >>> 0));
      output[$_set]((t158$4 = outputIndex, outputIndex = dart.notNull(t158$4) + 1, t158$4), alphabet[$codeUnitAt]((dart.notNull(bits) << 2 & 63) >>> 0));
      output[$_set]((t158$5 = outputIndex, outputIndex = dart.notNull(t158$5) + 1, t158$5), 61);
    }
  }
};
(convert._Base64Encoder.new = function(urlSafe) {
  if (urlSafe == null) dart.nullFailed(L91, 278, 23, "urlSafe");
  this[_state$0] = 0;
  this[_alphabet] = dart.test(urlSafe) ? convert._Base64Encoder._base64UrlAlphabet : convert._Base64Encoder._base64Alphabet;
  ;
}).prototype = convert._Base64Encoder.prototype;
dart.addTypeTests(convert._Base64Encoder);
dart.addTypeCaches(convert._Base64Encoder);
dart.setMethodSignature(convert._Base64Encoder, () => ({
  __proto__: dart.getMethods(convert._Base64Encoder.__proto__),
  createBuffer: dart.fnType(typed_data.Uint8List, [core.int]),
  encode: dart.fnType(dart.nullable(typed_data.Uint8List), [core.List$(core.int), core.int, core.int, core.bool])
}));
dart.setLibraryUri(convert._Base64Encoder, L31);
dart.setFieldSignature(convert._Base64Encoder, () => ({
  __proto__: dart.getFields(convert._Base64Encoder.__proto__),
  [_state$0]: dart.fieldType(core.int),
  [_alphabet]: dart.finalFieldType(core.String)
}));
dart.defineLazy(convert._Base64Encoder, {
  /*convert._Base64Encoder._base64Alphabet*/get _base64Alphabet() {
    return "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  },
  /*convert._Base64Encoder._base64UrlAlphabet*/get _base64UrlAlphabet() {
    return "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
  },
  /*convert._Base64Encoder._valueShift*/get _valueShift() {
    return 2;
  },
  /*convert._Base64Encoder._countMask*/get _countMask() {
    return 3;
  },
  /*convert._Base64Encoder._sixBitMask*/get _sixBitMask() {
    return 63;
  }
}, false);
convert._BufferCachingBase64Encoder = class _BufferCachingBase64Encoder extends convert._Base64Encoder {
  createBuffer(bufferLength) {
    if (bufferLength == null) dart.nullFailed(L91, 404, 30, "bufferLength");
    let buffer = this.bufferCache;
    if (buffer == null || dart.notNull(buffer[$length]) < dart.notNull(bufferLength)) {
      this.bufferCache = buffer = _native_typed_data.NativeUint8List.new(bufferLength);
    }
    if (buffer == null) {
      dart.throw("unreachable");
    }
    return typed_data.Uint8List.view(buffer[$buffer], buffer[$offsetInBytes], bufferLength);
  }
};
(convert._BufferCachingBase64Encoder.new = function(urlSafe) {
  if (urlSafe == null) dart.nullFailed(L91, 402, 36, "urlSafe");
  this.bufferCache = null;
  convert._BufferCachingBase64Encoder.__proto__.new.call(this, urlSafe);
  ;
}).prototype = convert._BufferCachingBase64Encoder.prototype;
dart.addTypeTests(convert._BufferCachingBase64Encoder);
dart.addTypeCaches(convert._BufferCachingBase64Encoder);
dart.setLibraryUri(convert._BufferCachingBase64Encoder, L31);
dart.setFieldSignature(convert._BufferCachingBase64Encoder, () => ({
  __proto__: dart.getFields(convert._BufferCachingBase64Encoder.__proto__),
  bufferCache: dart.fieldType(dart.nullable(typed_data.Uint8List))
}));
var _add$0 = dart.privateName(convert, "_add");
var C86;
convert._Base64EncoderSink = class _Base64EncoderSink extends convert.ByteConversionSinkBase {
  add(source) {
    ListOfint().as(source);
    if (source == null) dart.nullFailed(L91, 419, 22, "source");
    this[_add$0](source, 0, source[$length], false);
  }
  close() {
    this[_add$0](C86 || CT.C86, 0, 0, true);
  }
  addSlice(source, start, end, isLast) {
    if (source == null) dart.nullFailed(L91, 427, 27, "source");
    if (start == null) dart.nullFailed(L91, 427, 39, "start");
    if (end == null) dart.nullFailed(L91, 427, 50, "end");
    if (isLast == null) dart.nullFailed(L91, 427, 60, "isLast");
    if (end == null) dart.throw(new core.ArgumentError.notNull("end"));
    core.RangeError.checkValidRange(start, end, source[$length]);
    this[_add$0](source, start, end, isLast);
  }
};
(convert._Base64EncoderSink.new = function() {
  convert._Base64EncoderSink.__proto__.new.call(this);
  ;
}).prototype = convert._Base64EncoderSink.prototype;
dart.addTypeTests(convert._Base64EncoderSink);
dart.addTypeCaches(convert._Base64EncoderSink);
dart.setMethodSignature(convert._Base64EncoderSink, () => ({
  __proto__: dart.getMethods(convert._Base64EncoderSink.__proto__),
  add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
  close: dart.fnType(dart.void, [])
}));
dart.setLibraryUri(convert._Base64EncoderSink, L31);
convert._AsciiBase64EncoderSink = class _AsciiBase64EncoderSink extends convert._Base64EncoderSink {
  [_add$0](source, start, end, isLast) {
    if (source == null) dart.nullFailed(L91, 443, 23, "source");
    if (start == null) dart.nullFailed(L91, 443, 35, "start");
    if (end == null) dart.nullFailed(L91, 443, 46, "end");
    if (isLast == null) dart.nullFailed(L91, 443, 56, "isLast");
    let buffer = this[_encoder].encode(source, start, end, isLast);
    if (buffer != null) {
      let string = core.String.fromCharCodes(buffer);
      this[_sink$0].add(string);
    }
    if (dart.test(isLast)) {
      this[_sink$0].close();
    }
  }
};
(convert._AsciiBase64EncoderSink.new = function(_sink, urlSafe) {
  if (_sink == null) dart.nullFailed(L91, 440, 32, "_sink");
  if (urlSafe == null) dart.nullFailed(L91, 440, 44, "urlSafe");
  this[_sink$0] = _sink;
  this[_encoder] = new convert._BufferCachingBase64Encoder.new(urlSafe);
  convert._AsciiBase64EncoderSink.__proto__.new.call(this);
  ;
}).prototype = convert._AsciiBase64EncoderSink.prototype;
dart.addTypeTests(convert._AsciiBase64EncoderSink);
dart.addTypeCaches(convert._AsciiBase64EncoderSink);
dart.setMethodSignature(convert._AsciiBase64EncoderSink, () => ({
  __proto__: dart.getMethods(convert._AsciiBase64EncoderSink.__proto__),
  [_add$0]: dart.fnType(dart.void, [core.List$(core.int), core.int, core.int, core.bool])
}));
dart.setLibraryUri(convert._AsciiBase64EncoderSink, L31);
dart.setFieldSignature(convert._AsciiBase64EncoderSink, () => ({
  __proto__: dart.getFields(convert._AsciiBase64EncoderSink.__proto__),
  [_sink$0]: dart.finalFieldType(core.Sink$(core.String)),
  [_encoder]: dart.finalFieldType(convert._Base64Encoder)
}));
convert._Utf8Base64EncoderSink = class _Utf8Base64EncoderSink extends convert._Base64EncoderSink {
  [_add$0](source, start, end, isLast) {
    if (source == null) dart.nullFailed(L91, 462, 23, "source");
    if (start == null) dart.nullFailed(L91, 462, 35, "start");
    if (end == null) dart.nullFailed(L91, 462, 46, "end");
    if (isLast == null) dart.nullFailed(L91, 462, 56, "isLast");
    let buffer = this[_encoder].encode(source, start, end, isLast);
    if (buffer != null) {
      this[_sink$0].addSlice(buffer, 0, buffer[$length], isLast);
    }
  }
};
(convert._Utf8Base64EncoderSink.new = function(_sink, urlSafe) {
  if (_sink == null) dart.nullFailed(L91, 459, 31, "_sink");
  if (urlSafe == null) dart.nullFailed(L91, 459, 43, "urlSafe");
  this[_sink$0] = _sink;
  this[_encoder] = new convert._Base64Encoder.new(urlSafe);
  convert._Utf8Base64EncoderSink.__proto__.new.call(this);
  ;
}).prototype = convert._Utf8Base64EncoderSink.prototype;
dart.addTypeTests(convert._Utf8Base64EncoderSink);
dart.addTypeCaches(convert._Utf8Base64EncoderSink);
dart.setMethodSignature(convert._Utf8Base64EncoderSink, () => ({
  __proto__: dart.getMethods(convert._Utf8Base64EncoderSink.__proto__),
  [_add$0]: dart.fnType(dart.void, [core.List$(core.int), core.int, core.int, core.bool])
}));
dart.setLibraryUri(convert._Utf8Base64EncoderSink, L31);
dart.setFieldSignature(convert._Utf8Base64EncoderSink, () => ({
  __proto__: dart.getFields(convert._Utf8Base64EncoderSink.__proto__),
  [_sink$0]: dart.finalFieldType(convert.ByteConversionSink),
  [_encoder]: dart.finalFieldType(convert._Base64Encoder)
}));
convert.Base64Decoder = class Base64Decoder extends convert.Converter$(core.String, core.List$(core.int)) {
  convert(input, start = 0, end = null) {
    core.String.as(input);
    if (input == null) dart.nullFailed(L91, 490, 28, "input");
    if (start == null) dart.nullFailed(L91, 490, 40, "start");
    end = core.RangeError.checkValidRange(start, end, input.length);
    if (end == null) {
      dart.throw(new core.RangeError.new("Invalid range"));
    }
    if (start == end) return _native_typed_data.NativeUint8List.new(0);
    let decoder = new convert._Base64Decoder.new();
    let buffer = dart.nullCheck(decoder.decode(input, start, end));
    decoder.close(input, end);
    return buffer;
  }
  startChunkedConversion(sink) {
    SinkOfListOfint().as(sink);
    if (sink == null) dart.nullFailed(L91, 503, 63, "sink");
    return new convert._Base64DecoderSink.new(sink);
  }
};
(convert.Base64Decoder.new = function() {
  convert.Base64Decoder.__proto__.new.call(this);
  ;
}).prototype = convert.Base64Decoder.prototype;
dart.addTypeTests(convert.Base64Decoder);
dart.addTypeCaches(convert.Base64Decoder);
dart.setMethodSignature(convert.Base64Decoder, () => ({
  __proto__: dart.getMethods(convert.Base64Decoder.__proto__),
  convert: dart.fnType(typed_data.Uint8List, [dart.nullable(core.Object)], [core.int, dart.nullable(core.int)]),
  startChunkedConversion: dart.fnType(convert.StringConversionSink, [dart.nullable(core.Object)])
}));
dart.setLibraryUri(convert.Base64Decoder, L31);
convert._Base64Decoder = class _Base64Decoder extends core.Object {
  static _encodeCharacterState(count, bits) {
    if (count == null) dart.nullFailed(L91, 571, 40, "count");
    if (bits == null) dart.nullFailed(L91, 571, 51, "bits");
    if (!(count === (dart.notNull(count) & 3) >>> 0)) dart.assertFailed(null, L91, 572, 12, "count == (count & _countMask)");
    return (bits[$leftShift](2) | dart.notNull(count)) >>> 0;
  }
  static _stateCount(state) {
    if (state == null) dart.nullFailed(L91, 577, 30, "state");
    if (!(dart.notNull(state) >= 0)) dart.assertFailed(null, L91, 578, 12, "state >= 0");
    return (dart.notNull(state) & 3) >>> 0;
  }
  static _stateBits(state) {
    if (state == null) dart.nullFailed(L91, 583, 29, "state");
    if (!(dart.notNull(state) >= 0)) dart.assertFailed(null, L91, 584, 12, "state >= 0");
    return state[$rightShift](2);
  }
  static _encodePaddingState(expectedPadding) {
    if (expectedPadding == null) dart.nullFailed(L91, 589, 38, "expectedPadding");
    if (!(dart.notNull(expectedPadding) >= 0)) dart.assertFailed(null, L91, 590, 12, "expectedPadding >= 0");
    if (!(dart.notNull(expectedPadding) <= 5)) dart.assertFailed(null, L91, 591, 12, "expectedPadding <= 5");
    return -dart.notNull(expectedPadding) - 1;
  }
  static _statePadding(state) {
    if (state == null) dart.nullFailed(L91, 596, 32, "state");
    if (!(dart.notNull(state) < 0)) dart.assertFailed(null, L91, 597, 12, "state < 0");
    return -dart.notNull(state) - 1;
  }
  static _hasSeenPadding(state) {
    if (state == null) dart.nullFailed(L91, 601, 35, "state");
    return dart.notNull(state) < 0;
  }
  decode(input, start, end) {
    if (input == null) dart.nullFailed(L91, 608, 28, "input");
    if (start == null) dart.nullFailed(L91, 608, 39, "start");
    if (end == null) dart.nullFailed(L91, 608, 50, "end");
    if (!(0 <= dart.notNull(start))) dart.assertFailed(null, L91, 609, 12, "0 <= start");
    if (!(dart.notNull(start) <= dart.notNull(end))) dart.assertFailed(null, L91, 610, 12, "start <= end");
    if (!(dart.notNull(end) <= input.length)) dart.assertFailed(null, L91, 611, 12, "end <= input.length");
    if (dart.test(convert._Base64Decoder._hasSeenPadding(this[_state$0]))) {
      this[_state$0] = convert._Base64Decoder._checkPadding(input, start, end, this[_state$0]);
      return null;
    }
    if (start == end) return _native_typed_data.NativeUint8List.new(0);
    let buffer = convert._Base64Decoder._allocateBuffer(input, start, end, this[_state$0]);
    this[_state$0] = convert._Base64Decoder.decodeChunk(input, start, end, buffer, 0, this[_state$0]);
    return buffer;
  }
  close(input, end) {
    if (dart.notNull(this[_state$0]) < dart.notNull(convert._Base64Decoder._encodePaddingState(0))) {
      dart.throw(new core.FormatException.new("Missing padding character", input, end));
    }
    if (dart.notNull(this[_state$0]) > 0) {
      dart.throw(new core.FormatException.new("Invalid length, must be multiple of four", input, end));
    }
    this[_state$0] = convert._Base64Decoder._encodePaddingState(0);
  }
  static decodeChunk(input, start, end, output, outIndex, state) {
    let t158, t158$, t158$0, t158$1, t158$2, t158$3;
    if (input == null) dart.nullFailed(L91, 639, 33, "input");
    if (start == null) dart.nullFailed(L91, 639, 44, "start");
    if (end == null) dart.nullFailed(L91, 639, 55, "end");
    if (output == null) dart.nullFailed(L91, 639, 70, "output");
    if (outIndex == null) dart.nullFailed(L91, 640, 11, "outIndex");
    if (state == null) dart.nullFailed(L91, 640, 25, "state");
    if (!!dart.test(convert._Base64Decoder._hasSeenPadding(state))) dart.assertFailed(null, L91, 641, 12, "!_hasSeenPadding(state)");
    let bits = convert._Base64Decoder._stateBits(state);
    let count = convert._Base64Decoder._stateCount(state);
    let charOr = 0;
    let inverseAlphabet = convert._Base64Decoder._inverseAlphabet;
    for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
      let char = input[$codeUnitAt](i);
      charOr = (charOr | char) >>> 0;
      let code = inverseAlphabet[$_get]((char & 127) >>> 0);
      if (dart.notNull(code) >= 0) {
        bits = (bits[$leftShift](6) | dart.notNull(code)) & 16777215;
        count = dart.notNull(count) + 1 & 3;
        if (count === 0) {
          if (!(dart.notNull(outIndex) + 3 <= dart.notNull(output[$length]))) dart.assertFailed(null, L91, 663, 18, "outIndex + 3 <= output.length");
          output[$_set]((t158 = outIndex, outIndex = dart.notNull(t158) + 1, t158), (bits[$rightShift](16) & 255) >>> 0);
          output[$_set]((t158$ = outIndex, outIndex = dart.notNull(t158$) + 1, t158$), (bits[$rightShift](8) & 255) >>> 0);
          output[$_set]((t158$0 = outIndex, outIndex = dart.notNull(t158$0) + 1, t158$0), (dart.notNull(bits) & 255) >>> 0);
          bits = 0;
        }
        continue;
      } else if (code === -1 && dart.notNull(count) > 1) {
        if (charOr < 0 || charOr > 127) break;
        if (count === 3) {
          if ((dart.notNull(bits) & 3) !== 0) {
            dart.throw(new core.FormatException.new("Invalid encoding before padding", input, i));
          }
          output[$_set]((t158$1 = outIndex, outIndex = dart.notNull(t158$1) + 1, t158$1), bits[$rightShift](10));
          output[$_set]((t158$2 = outIndex, outIndex = dart.notNull(t158$2) + 1, t158$2), bits[$rightShift](2));
        } else {
          if ((dart.notNull(bits) & 15) !== 0) {
            dart.throw(new core.FormatException.new("Invalid encoding before padding", input, i));
          }
          output[$_set]((t158$3 = outIndex, outIndex = dart.notNull(t158$3) + 1, t158$3), bits[$rightShift](4));
        }
        let expectedPadding = (3 - dart.notNull(count)) * 3;
        if (char === 37) expectedPadding = expectedPadding + 2;
        state = convert._Base64Decoder._encodePaddingState(expectedPadding);
        return convert._Base64Decoder._checkPadding(input, dart.notNull(i) + 1, end, state);
      }
      dart.throw(new core.FormatException.new("Invalid character", input, i));
    }
    if (charOr >= 0 && charOr <= 127) {
      return convert._Base64Decoder._encodeCharacterState(count, bits);
    }
    let i = null;
    for (let t158$4 = i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
      let char = input[$codeUnitAt](i);
      if (char < 0 || char > 127) break;
    }
    dart.throw(new core.FormatException.new("Invalid character", input, i));
  }
  static _allocateBuffer(input, start, end, state) {
    if (input == null) dart.nullFailed(L91, 714, 14, "input");
    if (start == null) dart.nullFailed(L91, 714, 25, "start");
    if (end == null) dart.nullFailed(L91, 714, 36, "end");
    if (state == null) dart.nullFailed(L91, 714, 45, "state");
    if (!(dart.notNull(state) >= 0)) dart.assertFailed(null, L91, 715, 12, "state >= 0");
    let paddingStart = convert._Base64Decoder._trimPaddingChars(input, start, end);
    let length = dart.notNull(convert._Base64Decoder._stateCount(state)) + (dart.notNull(paddingStart) - dart.notNull(start));
    let bufferLength = length[$rightShift](2) * 3;
    let remainderLength = length & 3;
    if (remainderLength !== 0 && dart.notNull(paddingStart) < dart.notNull(end)) {
      bufferLength = bufferLength + (remainderLength - 1);
    }
    if (bufferLength > 0) return _native_typed_data.NativeUint8List.new(bufferLength);
    return convert._Base64Decoder._emptyBuffer;
  }
  static _trimPaddingChars(input, start, end) {
    if (input == null) dart.nullFailed(L91, 743, 39, "input");
    if (start == null) dart.nullFailed(L91, 743, 50, "start");
    if (end == null) dart.nullFailed(L91, 743, 61, "end");
    let padding = 0;
    let index = end;
    let newEnd = end;
    while (dart.notNull(index) > dart.notNull(start) && padding < 2) {
      index = dart.notNull(index) - 1;
      let char = input[$codeUnitAt](index);
      if (char === 61) {
        padding = padding + 1;
        newEnd = index;
        continue;
      }
      if ((char | 32) >>> 0 === 100) {
        if (index == start) break;
        index = dart.notNull(index) - 1;
        char = input[$codeUnitAt](index);
      }
      if (char === 51) {
        if (index == start) break;
        index = dart.notNull(index) - 1;
        char = input[$codeUnitAt](index);
      }
      if (char === 37) {
        padding = padding + 1;
        newEnd = index;
        continue;
      }
      break;
    }
    return newEnd;
  }
  static _checkPadding(input, start, end, state) {
    if (input == null) dart.nullFailed(L91, 795, 35, "input");
    if (start == null) dart.nullFailed(L91, 795, 46, "start");
    if (end == null) dart.nullFailed(L91, 795, 57, "end");
    if (state == null) dart.nullFailed(L91, 795, 66, "state");
    if (!dart.test(convert._Base64Decoder._hasSeenPadding(state))) dart.assertFailed(null, L91, 796, 12, "_hasSeenPadding(state)");
    if (start == end) return state;
    let expectedPadding = convert._Base64Decoder._statePadding(state);
    if (!(dart.notNull(expectedPadding) >= 0)) dart.assertFailed(null, L91, 799, 12, "expectedPadding >= 0");
    if (!(dart.notNull(expectedPadding) < 6)) dart.assertFailed(null, L91, 800, 12, "expectedPadding < 6");
    while (dart.notNull(expectedPadding) > 0) {
      let char = input[$codeUnitAt](start);
      if (expectedPadding === 3) {
        if (char === 61) {
          expectedPadding = dart.notNull(expectedPadding) - 3;
          start = dart.notNull(start) + 1;
          break;
        }
        if (char === 37) {
          expectedPadding = dart.notNull(expectedPadding) - 1;
          start = dart.notNull(start) + 1;
          if (start == end) break;
          char = input[$codeUnitAt](start);
        } else {
          break;
        }
      }
      let expectedPartialPadding = expectedPadding;
      if (dart.notNull(expectedPartialPadding) > 3) expectedPartialPadding = dart.notNull(expectedPartialPadding) - 3;
      if (expectedPartialPadding === 2) {
        if (char !== 51) break;
        start = dart.notNull(start) + 1;
        expectedPadding = dart.notNull(expectedPadding) - 1;
        if (start == end) break;
        char = input[$codeUnitAt](start);
      }
      if ((char | 32) >>> 0 !== 100) break;
      start = dart.notNull(start) + 1;
      expectedPadding = dart.notNull(expectedPadding) - 1;
      if (start == end) break;
    }
    if (start != end) {
      dart.throw(new core.FormatException.new("Invalid padding character", input, start));
    }
    return convert._Base64Decoder._encodePaddingState(expectedPadding);
  }
};
(convert._Base64Decoder.new = function() {
  this[_state$0] = 0;
  ;
}).prototype = convert._Base64Decoder.prototype;
dart.addTypeTests(convert._Base64Decoder);
dart.addTypeCaches(convert._Base64Decoder);
dart.setMethodSignature(convert._Base64Decoder, () => ({
  __proto__: dart.getMethods(convert._Base64Decoder.__proto__),
  decode: dart.fnType(dart.nullable(typed_data.Uint8List), [core.String, core.int, core.int]),
  close: dart.fnType(dart.void, [dart.nullable(core.String), dart.nullable(core.int)])
}));
dart.setLibraryUri(convert._Base64Decoder, L31);
dart.setFieldSignature(convert._Base64Decoder, () => ({
  __proto__: dart.getFields(convert._Base64Decoder.__proto__),
  [_state$0]: dart.fieldType(core.int)
}));
dart.defineLazy(convert._Base64Decoder, {
  /*convert._Base64Decoder._valueShift*/get _valueShift() {
    return 2;
  },
  /*convert._Base64Decoder._countMask*/get _countMask() {
    return 3;
  },
  /*convert._Base64Decoder._invalid*/get _invalid() {
    return -2;
  },
  /*convert._Base64Decoder._padding*/get _padding() {
    return -1;
  },
  /*convert._Base64Decoder.___*/get ___() {
    return -2;
  },
  /*convert._Base64Decoder._p*/get _p() {
    return -1;
  },
  /*convert._Base64Decoder._inverseAlphabet*/get _inverseAlphabet() {
    return _native_typed_data.NativeInt8List.fromList(JSArrayOfint().of([-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, 62, -2, 62, -2, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -2, -2, -2, -1, -2, -2, -2, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -2, -2, -2, -2, 63, -2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -2, -2, -2, -2, -2]));
  },
  /*convert._Base64Decoder._char_percent*/get _char_percent() {
    return 37;
  },
  /*convert._Base64Decoder._char_3*/get _char_3() {
    return 51;
  },
  /*convert._Base64Decoder._char_d*/get _char_d() {
    return 100;
  },
  /*convert._Base64Decoder._emptyBuffer*/get _emptyBuffer() {
    return _native_typed_data.NativeUint8List.new(0);
  },
  set _emptyBuffer(_) {}
}, false);
var _decoder = dart.privateName(convert, "_decoder");
convert._Base64DecoderSink = class _Base64DecoderSink extends convert.StringConversionSinkBase {
  add(string) {
    core.String.as(string);
    if (string == null) dart.nullFailed(L91, 849, 19, "string");
    if (string[$isEmpty]) return;
    let buffer = this[_decoder].decode(string, 0, string.length);
    if (buffer != null) this[_sink$0].add(buffer);
  }
  close() {
    this[_decoder].close(null, null);
    this[_sink$0].close();
  }
  addSlice(string, start, end, isLast) {
    if (string == null) dart.nullFailed(L91, 860, 24, "string");
    if (start == null) dart.nullFailed(L91, 860, 36, "start");
    if (end == null) dart.nullFailed(L91, 860, 47, "end");
    if (isLast == null) dart.nullFailed(L91, 860, 57, "isLast");
    core.RangeError.checkValidRange(start, end, string.length);
    if (start == end) return;
    let buffer = this[_decoder].decode(string, start, end);
    if (buffer != null) this[_sink$0].add(buffer);
    if (dart.test(isLast)) {
      this[_decoder].close(string, end);
      this[_sink$0].close();
    }
  }
};
(convert._Base64DecoderSink.new = function(_sink) {
  if (_sink == null) dart.nullFailed(L91, 847, 27, "_sink");
  this[_decoder] = new convert._Base64Decoder.new();
  this[_sink$0] = _sink;
  ;
}).prototype = convert._Base64DecoderSink.prototype;
dart.addTypeTests(convert._Base64DecoderSink);
dart.addTypeCaches(convert._Base64DecoderSink);
dart.setMethodSignature(convert._Base64DecoderSink, () => ({
  __proto__: dart.getMethods(convert._Base64DecoderSink.__proto__),
  close: dart.fnType(dart.void, []),
  addSlice: dart.fnType(dart.void, [core.String, core.int, core.int, core.bool])
}));
dart.setLibraryUri(convert._Base64DecoderSink, L31);
dart.setFieldSignature(convert._Base64DecoderSink, () => ({
  __proto__: dart.getFields(convert._Base64DecoderSink.__proto__),
  [_sink$0]: dart.finalFieldType(core.Sink$(core.List$(core.int))),
  [_decoder]: dart.finalFieldType(convert._Base64Decoder)
}));
convert._ByteAdapterSink = class _ByteAdapterSink extends convert.ByteConversionSinkBase {
  add(chunk) {
    ListOfint().as(chunk);
    if (chunk == null) dart.nullFailed(L90, 57, 22, "chunk");
    this[_sink$0].add(chunk);
  }
  close() {
    this[_sink$0].close();
  }
};
(convert._ByteAdapterSink.new = function(_sink) {
  if (_sink == null) dart.nullFailed(L90, 55, 25, "_sink");
  this[_sink$0] = _sink;
  convert._ByteAdapterSink.__proto__.new.call(this);
  ;
}).prototype = convert._ByteAdapterSink.prototype;
dart.addTypeTests(convert._ByteAdapterSink);
dart.addTypeCaches(convert._ByteAdapterSink);
dart.setMethodSignature(convert._ByteAdapterSink, () => ({
  __proto__: dart.getMethods(convert._ByteAdapterSink.__proto__),
  add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
  close: dart.fnType(dart.void, [])
}));
dart.setLibraryUri(convert._ByteAdapterSink, L31);
dart.setFieldSignature(convert._ByteAdapterSink, () => ({
  __proto__: dart.getFields(convert._ByteAdapterSink.__proto__),
  [_sink$0]: dart.finalFieldType(core.Sink$(core.List$(core.int)))
}));
var _buffer$ = dart.privateName(convert, "_buffer");
var _bufferIndex = dart.privateName(convert, "_bufferIndex");
var _callback$ = dart.privateName(convert, "_callback");
convert._ByteCallbackSink = class _ByteCallbackSink extends convert.ByteConversionSinkBase {
  add(chunk) {
    IterableOfint().as(chunk);
    if (chunk == null) dart.nullFailed(L90, 80, 26, "chunk");
    let freeCount = dart.notNull(this[_buffer$][$length]) - dart.notNull(this[_bufferIndex]);
    if (dart.notNull(chunk[$length]) > freeCount) {
      let oldLength = this[_buffer$][$length];
      let newLength = dart.notNull(convert._ByteCallbackSink._roundToPowerOf2(dart.notNull(chunk[$length]) + dart.notNull(oldLength))) * 2;
      let grown = _native_typed_data.NativeUint8List.new(newLength);
      grown[$setRange](0, this[_buffer$][$length], this[_buffer$]);
      this[_buffer$] = grown;
    }
    this[_buffer$][$setRange](this[_bufferIndex], dart.notNull(this[_bufferIndex]) + dart.notNull(chunk[$length]), chunk);
    this[_bufferIndex] = dart.notNull(this[_bufferIndex]) + dart.notNull(chunk[$length]);
  }
  static _roundToPowerOf2(v) {
    if (v == null) dart.nullFailed(L90, 94, 35, "v");
    if (!(dart.notNull(v) > 0)) dart.assertFailed(null, L90, 95, 12, "v > 0");
    v = dart.notNull(v) - 1;
    v = (dart.notNull(v) | v[$rightShift](1)) >>> 0;
    v = (dart.notNull(v) | v[$rightShift](2)) >>> 0;
    v = (dart.notNull(v) | v[$rightShift](4)) >>> 0;
    v = (dart.notNull(v) | v[$rightShift](8)) >>> 0;
    v = (dart.notNull(v) | v[$rightShift](16)) >>> 0;
    v = dart.notNull(v) + 1;
    return v;
  }
  close() {
    let t159;
    t159 = this[_buffer$][$sublist](0, this[_bufferIndex]);
    this[_callback$](t159);
  }
};
(convert._ByteCallbackSink.new = function(callback) {
  if (callback == null) dart.nullFailed(L90, 77, 26, "callback");
  this[_buffer$] = _native_typed_data.NativeUint8List.new(1024);
  this[_bufferIndex] = 0;
  this[_callback$] = callback;
  convert._ByteCallbackSink.__proto__.new.call(this);
  ;
}).prototype = convert._ByteCallbackSink.prototype;
dart.addTypeTests(convert._ByteCallbackSink);
dart.addTypeCaches(convert._ByteCallbackSink);
dart.setMethodSignature(convert._ByteCallbackSink, () => ({
  __proto__: dart.getMethods(convert._ByteCallbackSink.__proto__),
  add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
  close: dart.fnType(dart.void, [])
}));
dart.setLibraryUri(convert._ByteCallbackSink, L31);
dart.setFieldSignature(convert._ByteCallbackSink, () => ({
  __proto__: dart.getFields(convert._ByteCallbackSink.__proto__),
  [_callback$]: dart.finalFieldType(dart.fnType(dart.void, [core.List$(core.int)])),
  [_buffer$]: dart.fieldType(core.List$(core.int)),
  [_bufferIndex]: dart.fieldType(core.int)
}));
dart.defineLazy(convert._ByteCallbackSink, {
  /*convert._ByteCallbackSink._INITIAL_BUFFER_SIZE*/get _INITIAL_BUFFER_SIZE() {
    return 1024;
  }
}, false);
var _accumulated = dart.privateName(convert, "_accumulated");
const _is__SimpleCallbackSink_default = Symbol('_is__SimpleCallbackSink_default');
convert._SimpleCallbackSink$ = dart.generic(T => {
  var JSArrayOfT = () => (JSArrayOfT = dart.constFn(_interceptors.JSArray$(T)))();
  class _SimpleCallbackSink extends convert.ChunkedConversionSink$(T) {
    add(chunk) {
      T.as(chunk);
      this[_accumulated][$add](chunk);
    }
    close() {
      let t159;
      t159 = this[_accumulated];
      this[_callback$](t159);
    }
  }
  (_SimpleCallbackSink.new = function(_callback) {
    if (_callback == null) dart.nullFailed(L92, 41, 28, "_callback");
    this[_accumulated] = JSArrayOfT().of([]);
    this[_callback$] = _callback;
    _SimpleCallbackSink.__proto__.new.call(this);
    ;
  }).prototype = _SimpleCallbackSink.prototype;
  dart.addTypeTests(_SimpleCallbackSink);
  _SimpleCallbackSink.prototype[_is__SimpleCallbackSink_default] = true;
  dart.addTypeCaches(_SimpleCallbackSink);
  dart.setMethodSignature(_SimpleCallbackSink, () => ({
    __proto__: dart.getMethods(_SimpleCallbackSink.__proto__),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    close: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(_SimpleCallbackSink, L31);
  dart.setFieldSignature(_SimpleCallbackSink, () => ({
    __proto__: dart.getFields(_SimpleCallbackSink.__proto__),
    [_callback$]: dart.finalFieldType(dart.fnType(dart.void, [core.List$(T)])),
    [_accumulated]: dart.finalFieldType(core.List$(T))
  }));
  return _SimpleCallbackSink;
});
convert._SimpleCallbackSink = convert._SimpleCallbackSink$();
dart.addTypeTests(convert._SimpleCallbackSink, _is__SimpleCallbackSink_default);
var _eventSink = dart.privateName(convert, "_eventSink");
var _chunkedSink$ = dart.privateName(convert, "_chunkedSink");
const _is__ConverterStreamEventSink_default = Symbol('_is__ConverterStreamEventSink_default');
convert._ConverterStreamEventSink$ = dart.generic((S, T) => {
  class _ConverterStreamEventSink extends core.Object {
    add(o) {
      S.as(o);
      this[_chunkedSink$].add(o);
    }
    addError(error, stackTrace = null) {
      if (error == null) dart.nullFailed(L92, 75, 24, "error");
      core.ArgumentError.checkNotNull(core.Object, error, "error");
      this[_eventSink].addError(error, stackTrace);
    }
    close() {
      this[_chunkedSink$].close();
    }
  }
  (_ConverterStreamEventSink.new = function(converter, sink) {
    if (converter == null) dart.nullFailed(L92, 67, 45, "converter");
    if (sink == null) dart.nullFailed(L92, 67, 69, "sink");
    this[_eventSink] = sink;
    this[_chunkedSink$] = converter.startChunkedConversion(sink);
    ;
  }).prototype = _ConverterStreamEventSink.prototype;
  dart.addTypeTests(_ConverterStreamEventSink);
  _ConverterStreamEventSink.prototype[_is__ConverterStreamEventSink_default] = true;
  dart.addTypeCaches(_ConverterStreamEventSink);
  _ConverterStreamEventSink[dart.implements] = () => [async.EventSink$(S)];
  dart.setMethodSignature(_ConverterStreamEventSink, () => ({
    __proto__: dart.getMethods(_ConverterStreamEventSink.__proto__),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
    close: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(_ConverterStreamEventSink, L31);
  dart.setFieldSignature(_ConverterStreamEventSink, () => ({
    __proto__: dart.getFields(_ConverterStreamEventSink.__proto__),
    [_eventSink]: dart.finalFieldType(async.EventSink$(T)),
    [_chunkedSink$]: dart.finalFieldType(core.Sink$(S))
  }));
  return _ConverterStreamEventSink;
});
convert._ConverterStreamEventSink = convert._ConverterStreamEventSink$();
dart.addTypeTests(convert._ConverterStreamEventSink, _is__ConverterStreamEventSink_default);
var _first$0 = dart.privateName(convert, "_first");
var _second$0 = dart.privateName(convert, "_second");
const _is__FusedCodec_default = Symbol('_is__FusedCodec_default');
convert._FusedCodec$ = dart.generic((S, M, T) => {
  class _FusedCodec extends convert.Codec$(S, T) {
    get encoder() {
      return this[_first$0].encoder.fuse(T, this[_second$0].encoder);
    }
    get decoder() {
      return this[_second$0].decoder.fuse(S, this[_first$0].decoder);
    }
  }
  (_FusedCodec.new = function(_first, _second) {
    if (_first == null) dart.nullFailed(L88, 85, 20, "_first");
    if (_second == null) dart.nullFailed(L88, 85, 33, "_second");
    this[_first$0] = _first;
    this[_second$0] = _second;
    _FusedCodec.__proto__.new.call(this);
    ;
  }).prototype = _FusedCodec.prototype;
  dart.addTypeTests(_FusedCodec);
  _FusedCodec.prototype[_is__FusedCodec_default] = true;
  dart.addTypeCaches(_FusedCodec);
  dart.setGetterSignature(_FusedCodec, () => ({
    __proto__: dart.getGetters(_FusedCodec.__proto__),
    encoder: convert.Converter$(S, T),
    decoder: convert.Converter$(T, S)
  }));
  dart.setLibraryUri(_FusedCodec, L31);
  dart.setFieldSignature(_FusedCodec, () => ({
    __proto__: dart.getFields(_FusedCodec.__proto__),
    [_first$0]: dart.finalFieldType(convert.Codec$(S, M)),
    [_second$0]: dart.finalFieldType(convert.Codec$(M, T))
  }));
  return _FusedCodec;
});
convert._FusedCodec = convert._FusedCodec$();
dart.addTypeTests(convert._FusedCodec, _is__FusedCodec_default);
var _codec = dart.privateName(convert, "_codec");
const _is__InvertedCodec_default = Symbol('_is__InvertedCodec_default');
convert._InvertedCodec$ = dart.generic((T, S) => {
  class _InvertedCodec extends convert.Codec$(T, S) {
    get encoder() {
      return this[_codec].decoder;
    }
    get decoder() {
      return this[_codec].encoder;
    }
    get inverted() {
      return this[_codec];
    }
  }
  (_InvertedCodec.new = function(codec) {
    if (codec == null) dart.nullFailed(L88, 91, 30, "codec");
    this[_codec] = codec;
    _InvertedCodec.__proto__.new.call(this);
    ;
  }).prototype = _InvertedCodec.prototype;
  dart.addTypeTests(_InvertedCodec);
  _InvertedCodec.prototype[_is__InvertedCodec_default] = true;
  dart.addTypeCaches(_InvertedCodec);
  dart.setGetterSignature(_InvertedCodec, () => ({
    __proto__: dart.getGetters(_InvertedCodec.__proto__),
    encoder: convert.Converter$(T, S),
    decoder: convert.Converter$(S, T)
  }));
  dart.setLibraryUri(_InvertedCodec, L31);
  dart.setFieldSignature(_InvertedCodec, () => ({
    __proto__: dart.getFields(_InvertedCodec.__proto__),
    [_codec]: dart.finalFieldType(convert.Codec$(S, T))
  }));
  return _InvertedCodec;
});
convert._InvertedCodec = convert._InvertedCodec$();
dart.addTypeTests(convert._InvertedCodec, _is__InvertedCodec_default);
const _is__FusedConverter_default = Symbol('_is__FusedConverter_default');
convert._FusedConverter$ = dart.generic((S, M, T) => {
  var SinkOfT = () => (SinkOfT = dart.constFn(core.Sink$(T)))();
  class _FusedConverter extends convert.Converter$(S, T) {
    convert(input) {
      S.as(input);
      return this[_second$0].convert(this[_first$0].convert(input));
    }
    startChunkedConversion(sink) {
      SinkOfT().as(sink);
      if (sink == null) dart.nullFailed(L30, 69, 42, "sink");
      return this[_first$0].startChunkedConversion(this[_second$0].startChunkedConversion(sink));
    }
  }
  (_FusedConverter.new = function(_first, _second) {
    if (_first == null) dart.nullFailed(L30, 65, 24, "_first");
    if (_second == null) dart.nullFailed(L30, 65, 37, "_second");
    this[_first$0] = _first;
    this[_second$0] = _second;
    _FusedConverter.__proto__.new.call(this);
    ;
  }).prototype = _FusedConverter.prototype;
  dart.addTypeTests(_FusedConverter);
  _FusedConverter.prototype[_is__FusedConverter_default] = true;
  dart.addTypeCaches(_FusedConverter);
  dart.setMethodSignature(_FusedConverter, () => ({
    __proto__: dart.getMethods(_FusedConverter.__proto__),
    convert: dart.fnType(T, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(_FusedConverter, L31);
  dart.setFieldSignature(_FusedConverter, () => ({
    __proto__: dart.getFields(_FusedConverter.__proto__),
    [_first$0]: dart.finalFieldType(convert.Converter$(S, M)),
    [_second$0]: dart.finalFieldType(convert.Converter$(M, T))
  }));
  return _FusedConverter;
});
convert._FusedConverter = convert._FusedConverter$();
dart.addTypeTests(convert._FusedConverter, _is__FusedConverter_default);
var _name$2 = dart.privateName(convert, "_name");
var _name$3 = dart.privateName(convert, "HtmlEscapeMode._name");
var escapeLtGt$ = dart.privateName(convert, "HtmlEscapeMode.escapeLtGt");
var escapeQuot$ = dart.privateName(convert, "HtmlEscapeMode.escapeQuot");
var escapeApos$ = dart.privateName(convert, "HtmlEscapeMode.escapeApos");
var escapeSlash$ = dart.privateName(convert, "HtmlEscapeMode.escapeSlash");
var C87;
var C88;
var C89;
var C90;
convert.HtmlEscapeMode = class HtmlEscapeMode extends core.Object {
  get [_name$2]() {
    return this[_name$3];
  }
  set [_name$2](value) {
    super[_name$2] = value;
  }
  get escapeLtGt() {
    return this[escapeLtGt$];
  }
  set escapeLtGt(value) {
    super.escapeLtGt = value;
  }
  get escapeQuot() {
    return this[escapeQuot$];
  }
  set escapeQuot(value) {
    super.escapeQuot = value;
  }
  get escapeApos() {
    return this[escapeApos$];
  }
  set escapeApos(value) {
    super.escapeApos = value;
  }
  get escapeSlash() {
    return this[escapeSlash$];
  }
  set escapeSlash(value) {
    super.escapeSlash = value;
  }
  toString() {
    return this[_name$2];
  }
};
(convert.HtmlEscapeMode.__ = function(_name, escapeLtGt, escapeQuot, escapeApos, escapeSlash) {
  if (_name == null) dart.nullFailed(L93, 102, 31, "_name");
  if (escapeLtGt == null) dart.nullFailed(L93, 102, 43, "escapeLtGt");
  if (escapeQuot == null) dart.nullFailed(L93, 102, 60, "escapeQuot");
  if (escapeApos == null) dart.nullFailed(L93, 103, 12, "escapeApos");
  if (escapeSlash == null) dart.nullFailed(L93, 103, 29, "escapeSlash");
  this[_name$3] = _name;
  this[escapeLtGt$] = escapeLtGt;
  this[escapeQuot$] = escapeQuot;
  this[escapeApos$] = escapeApos;
  this[escapeSlash$] = escapeSlash;
  ;
}).prototype = convert.HtmlEscapeMode.prototype;
(convert.HtmlEscapeMode.new = function(opts) {
  let name = opts && 'name' in opts ? opts.name : "custom";
  if (name == null) dart.nullFailed(L93, 111, 15, "name");
  let escapeLtGt = opts && 'escapeLtGt' in opts ? opts.escapeLtGt : false;
  if (escapeLtGt == null) dart.nullFailed(L93, 112, 12, "escapeLtGt");
  let escapeQuot = opts && 'escapeQuot' in opts ? opts.escapeQuot : false;
  if (escapeQuot == null) dart.nullFailed(L93, 113, 12, "escapeQuot");
  let escapeApos = opts && 'escapeApos' in opts ? opts.escapeApos : false;
  if (escapeApos == null) dart.nullFailed(L93, 114, 12, "escapeApos");
  let escapeSlash = opts && 'escapeSlash' in opts ? opts.escapeSlash : false;
  if (escapeSlash == null) dart.nullFailed(L93, 115, 12, "escapeSlash");
  this[escapeLtGt$] = escapeLtGt;
  this[escapeQuot$] = escapeQuot;
  this[escapeApos$] = escapeApos;
  this[escapeSlash$] = escapeSlash;
  this[_name$3] = name;
  ;
}).prototype = convert.HtmlEscapeMode.prototype;
dart.addTypeTests(convert.HtmlEscapeMode);
dart.addTypeCaches(convert.HtmlEscapeMode);
dart.setLibraryUri(convert.HtmlEscapeMode, L31);
dart.setFieldSignature(convert.HtmlEscapeMode, () => ({
  __proto__: dart.getFields(convert.HtmlEscapeMode.__proto__),
  [_name$2]: dart.finalFieldType(core.String),
  escapeLtGt: dart.finalFieldType(core.bool),
  escapeQuot: dart.finalFieldType(core.bool),
  escapeApos: dart.finalFieldType(core.bool),
  escapeSlash: dart.finalFieldType(core.bool)
}));
dart.defineExtensionMethods(convert.HtmlEscapeMode, ['toString']);
dart.defineLazy(convert.HtmlEscapeMode, {
  /*convert.HtmlEscapeMode.unknown*/get unknown() {
    return C87 || CT.C87;
  },
  /*convert.HtmlEscapeMode.attribute*/get attribute() {
    return C88 || CT.C88;
  },
  /*convert.HtmlEscapeMode.sqAttribute*/get sqAttribute() {
    return C89 || CT.C89;
  },
  /*convert.HtmlEscapeMode.element*/get element() {
    return C90 || CT.C90;
  }
}, false);
var _convert = dart.privateName(convert, "_convert");
var mode$ = dart.privateName(convert, "HtmlEscape.mode");
convert.HtmlEscape = class HtmlEscape extends convert.Converter$(core.String, core.String) {
  get mode() {
    return this[mode$];
  }
  set mode(value) {
    super.mode = value;
  }
  convert(text) {
    core.String.as(text);
    if (text == null) dart.nullFailed(L93, 152, 25, "text");
    let val = this[_convert](text, 0, text.length);
    return val == null ? text : val;
  }
  [_convert](text, start, end) {
    if (text == null) dart.nullFailed(L93, 161, 27, "text");
    if (start == null) dart.nullFailed(L93, 161, 37, "start");
    if (end == null) dart.nullFailed(L93, 161, 48, "end");
    let result = null;
    for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
      let ch = text[$_get](i);
      let replacement = null;
      switch (ch) {
        case "&":
        {
          replacement = "&amp;";
          break;
        }
        case "\"":
        {
          if (dart.test(this.mode.escapeQuot)) replacement = "&quot;";
          break;
        }
        case "'":
        {
          if (dart.test(this.mode.escapeApos)) replacement = "&#39;";
          break;
        }
        case "<":
        {
          if (dart.test(this.mode.escapeLtGt)) replacement = "&lt;";
          break;
        }
        case ">":
        {
          if (dart.test(this.mode.escapeLtGt)) replacement = "&gt;";
          break;
        }
        case "/":
        {
          if (dart.test(this.mode.escapeSlash)) replacement = "&#47;";
          break;
        }
      }
      if (replacement != null) {
        result == null ? result = new core.StringBuffer.new() : null;
        if (result == null) {
          dart.throw("unreachable");
        }
        if (dart.notNull(i) > dart.notNull(start)) result.write(text[$substring](start, i));
        result.write(replacement);
        start = dart.notNull(i) + 1;
      }
    }
    if (result == null) return null;
    if (dart.notNull(end) > dart.notNull(start)) result.write(text[$substring](start, end));
    return dart.toString(result);
  }
  startChunkedConversion(sink) {
    SinkOfString().as(sink);
    if (sink == null) dart.nullFailed(L93, 203, 60, "sink");
    return new convert._HtmlEscapeSink.new(this, convert.StringConversionSink.is(sink) ? sink : new convert._StringAdapterSink.new(sink));
  }
};
(convert.HtmlEscape.new = function(mode = C87 || CT.C87) {
  if (mode == null) dart.nullFailed(L93, 150, 26, "mode");
  this[mode$] = mode;
  convert.HtmlEscape.__proto__.new.call(this);
  ;
}).prototype = convert.HtmlEscape.prototype;
dart.addTypeTests(convert.HtmlEscape);
dart.addTypeCaches(convert.HtmlEscape);
dart.setMethodSignature(convert.HtmlEscape, () => ({
  __proto__: dart.getMethods(convert.HtmlEscape.__proto__),
  convert: dart.fnType(core.String, [dart.nullable(core.Object)]),
  [_convert]: dart.fnType(dart.nullable(core.String), [core.String, core.int, core.int]),
  startChunkedConversion: dart.fnType(convert.StringConversionSink, [dart.nullable(core.Object)])
}));
dart.setLibraryUri(convert.HtmlEscape, L31);
dart.setFieldSignature(convert.HtmlEscape, () => ({
  __proto__: dart.getFields(convert.HtmlEscape.__proto__),
  mode: dart.finalFieldType(convert.HtmlEscapeMode)
}));
var _escape$ = dart.privateName(convert, "_escape");
convert._HtmlEscapeSink = class _HtmlEscapeSink extends convert.StringConversionSinkBase {
  addSlice(chunk, start, end, isLast) {
    if (chunk == null) dart.nullFailed(L93, 215, 24, "chunk");
    if (start == null) dart.nullFailed(L93, 215, 35, "start");
    if (end == null) dart.nullFailed(L93, 215, 46, "end");
    if (isLast == null) dart.nullFailed(L93, 215, 56, "isLast");
    let val = this[_escape$][_convert](chunk, start, end);
    if (val == null) {
      this[_sink$0].addSlice(chunk, start, end, isLast);
    } else {
      this[_sink$0].add(val);
      if (dart.test(isLast)) this[_sink$0].close();
    }
  }
  close() {
    this[_sink$0].close();
  }
};
(convert._HtmlEscapeSink.new = function(_escape, _sink) {
  if (_escape == null) dart.nullFailed(L93, 213, 24, "_escape");
  if (_sink == null) dart.nullFailed(L93, 213, 38, "_sink");
  this[_escape$] = _escape;
  this[_sink$0] = _sink;
  ;
}).prototype = convert._HtmlEscapeSink.prototype;
dart.addTypeTests(convert._HtmlEscapeSink);
dart.addTypeCaches(convert._HtmlEscapeSink);
dart.setMethodSignature(convert._HtmlEscapeSink, () => ({
  __proto__: dart.getMethods(convert._HtmlEscapeSink.__proto__),
  addSlice: dart.fnType(dart.void, [core.String, core.int, core.int, core.bool]),
  close: dart.fnType(dart.void, [])
}));
dart.setLibraryUri(convert._HtmlEscapeSink, L31);
dart.setFieldSignature(convert._HtmlEscapeSink, () => ({
  __proto__: dart.getFields(convert._HtmlEscapeSink.__proto__),
  [_escape$]: dart.finalFieldType(convert.HtmlEscape),
  [_sink$0]: dart.finalFieldType(convert.StringConversionSink)
}));
var unsupportedObject$ = dart.privateName(convert, "JsonUnsupportedObjectError.unsupportedObject");
var cause$ = dart.privateName(convert, "JsonUnsupportedObjectError.cause");
var partialResult$ = dart.privateName(convert, "JsonUnsupportedObjectError.partialResult");
convert.JsonUnsupportedObjectError = class JsonUnsupportedObjectError extends core.Error {
  get unsupportedObject() {
    return this[unsupportedObject$];
  }
  set unsupportedObject(value) {
    super.unsupportedObject = value;
  }
  get cause() {
    return this[cause$];
  }
  set cause(value) {
    super.cause = value;
  }
  get partialResult() {
    return this[partialResult$];
  }
  set partialResult(value) {
    super.partialResult = value;
  }
  toString() {
    let safeString = core.Error.safeToString(this.unsupportedObject);
    let prefix = null;
    if (this.cause != null) {
      prefix = "Converting object to an encodable object failed:";
    } else {
      prefix = "Converting object did not return an encodable object:";
    }
    return dart.str(prefix) + dart.str(" ") + dart.str(safeString);
  }
};
(convert.JsonUnsupportedObjectError.new = function(unsupportedObject, opts) {
  let cause = opts && 'cause' in opts ? opts.cause : null;
  let partialResult = opts && 'partialResult' in opts ? opts.partialResult : null;
  this[unsupportedObject$] = unsupportedObject;
  this[cause$] = cause;
  this[partialResult$] = partialResult;
  convert.JsonUnsupportedObjectError.__proto__.new.call(this);
  ;
}).prototype = convert.JsonUnsupportedObjectError.prototype;
dart.addTypeTests(convert.JsonUnsupportedObjectError);
dart.addTypeCaches(convert.JsonUnsupportedObjectError);
dart.setLibraryUri(convert.JsonUnsupportedObjectError, L31);
dart.setFieldSignature(convert.JsonUnsupportedObjectError, () => ({
  __proto__: dart.getFields(convert.JsonUnsupportedObjectError.__proto__),
  unsupportedObject: dart.finalFieldType(dart.nullable(core.Object)),
  cause: dart.finalFieldType(dart.nullable(core.Object)),
  partialResult: dart.finalFieldType(dart.nullable(core.String))
}));
dart.defineExtensionMethods(convert.JsonUnsupportedObjectError, ['toString']);
convert.JsonCyclicError = class JsonCyclicError extends convert.JsonUnsupportedObjectError {
  toString() {
    return "Cyclic error in JSON stringify";
  }
};
(convert.JsonCyclicError.new = function(object) {
  convert.JsonCyclicError.__proto__.new.call(this, object);
  ;
}).prototype = convert.JsonCyclicError.prototype;
dart.addTypeTests(convert.JsonCyclicError);
dart.addTypeCaches(convert.JsonCyclicError);
dart.setLibraryUri(convert.JsonCyclicError, L31);
dart.defineExtensionMethods(convert.JsonCyclicError, ['toString']);
var _toEncodable$ = dart.privateName(convert, "_toEncodable");
var JsonEncoder__toEncodable = dart.privateName(convert, "JsonEncoder._toEncodable");
var JsonEncoder_indent = dart.privateName(convert, "JsonEncoder.indent");
var C91;
var JsonDecoder__reviver = dart.privateName(convert, "JsonDecoder._reviver");
var C92;
var _reviver = dart.privateName(convert, "JsonCodec._reviver");
var _toEncodable = dart.privateName(convert, "JsonCodec._toEncodable");
convert.JsonCodec = class JsonCodec extends convert.Codec$(dart.nullable(core.Object), core.String) {
  get [_reviver$]() {
    return this[_reviver];
  }
  set [_reviver$](value) {
    super[_reviver$] = value;
  }
  get [_toEncodable$]() {
    return this[_toEncodable];
  }
  set [_toEncodable$](value) {
    super[_toEncodable$] = value;
  }
  decode(source, opts) {
    core.String.as(source);
    if (source == null) dart.nullFailed(L94, 153, 25, "source");
    let reviver = opts && 'reviver' in opts ? opts.reviver : null;
    reviver == null ? reviver = this[_reviver$] : null;
    if (reviver == null) return this.decoder.convert(source);
    return new convert.JsonDecoder.new(reviver).convert(source);
  }
  encode(value, opts) {
    let toEncodable = opts && 'toEncodable' in opts ? opts.toEncodable : null;
    toEncodable == null ? toEncodable = this[_toEncodable$] : null;
    if (toEncodable == null) return this.encoder.convert(value);
    return new convert.JsonEncoder.new(toEncodable).convert(value);
  }
  get encoder() {
    if (this[_toEncodable$] == null) return C91 || CT.C91;
    return new convert.JsonEncoder.new(this[_toEncodable$]);
  }
  get decoder() {
    if (this[_reviver$] == null) return C92 || CT.C92;
    return new convert.JsonDecoder.new(this[_reviver$]);
  }
};
(convert.JsonCodec.new = function(opts) {
  let reviver = opts && 'reviver' in opts ? opts.reviver : null;
  let toEncodable = opts && 'toEncodable' in opts ? opts.toEncodable : null;
  this[_reviver] = reviver;
  this[_toEncodable] = toEncodable;
  convert.JsonCodec.__proto__.new.call(this);
  ;
}).prototype = convert.JsonCodec.prototype;
(convert.JsonCodec.withReviver = function(reviver) {
  if (reviver == null) dart.nullFailed(L94, 142, 33, "reviver");
  convert.JsonCodec.new.call(this, {reviver: reviver});
}).prototype = convert.JsonCodec.prototype;
dart.addTypeTests(convert.JsonCodec);
dart.addTypeCaches(convert.JsonCodec);
dart.setMethodSignature(convert.JsonCodec, () => ({
  __proto__: dart.getMethods(convert.JsonCodec.__proto__),
  decode: dart.fnType(dart.dynamic, [dart.nullable(core.Object)], {reviver: dart.nullable(dart.fnType(dart.nullable(core.Object), [dart.nullable(core.Object), dart.nullable(core.Object)]))}, {}),
  encode: dart.fnType(core.String, [dart.nullable(core.Object)], {toEncodable: dart.nullable(dart.fnType(dart.nullable(core.Object), [dart.dynamic]))}, {})
}));
dart.setGetterSignature(convert.JsonCodec, () => ({
  __proto__: dart.getGetters(convert.JsonCodec.__proto__),
  encoder: convert.JsonEncoder,
  decoder: convert.JsonDecoder
}));
dart.setLibraryUri(convert.JsonCodec, L31);
dart.setFieldSignature(convert.JsonCodec, () => ({
  __proto__: dart.getFields(convert.JsonCodec.__proto__),
  [_reviver$]: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(core.Object), [dart.nullable(core.Object), dart.nullable(core.Object)]))),
  [_toEncodable$]: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(core.Object), [dart.dynamic])))
}));
convert.JsonEncoder = class JsonEncoder extends convert.Converter$(dart.nullable(core.Object), core.String) {
  get indent() {
    return this[indent$];
  }
  set indent(value) {
    super.indent = value;
  }
  get [_toEncodable$]() {
    return this[_toEncodable$0];
  }
  set [_toEncodable$](value) {
    super[_toEncodable$] = value;
  }
  convert(object) {
    return convert._JsonStringStringifier.stringify(object, this[_toEncodable$], this.indent);
  }
  startChunkedConversion(sink) {
    SinkOfString().as(sink);
    if (sink == null) dart.nullFailed(L94, 270, 70, "sink");
    if (convert._Utf8EncoderSink.is(sink)) {
      return new convert._JsonUtf8EncoderSink.new(sink[_sink$0], this[_toEncodable$], convert.JsonUtf8Encoder._utf8Encode(this.indent), 256);
    }
    return new convert._JsonEncoderSink.new(convert.StringConversionSink.is(sink) ? sink : new convert._StringAdapterSink.new(sink), this[_toEncodable$], this.indent);
  }
  bind(stream) {
    StreamOfObjectN().as(stream);
    if (stream == null) dart.nullFailed(L94, 285, 39, "stream");
    return super.bind(stream);
  }
  fuse(T, other) {
    convert.Converter$(core.String, T).as(other);
    if (other == null) dart.nullFailed(L94, 287, 54, "other");
    if (convert.Utf8Encoder.is(other)) {
      return convert.Converter$(ObjectN(), T).as(new convert.JsonUtf8Encoder.new(this.indent, this[_toEncodable$]));
    }
    return super.fuse(T, other);
  }
};
(convert.JsonEncoder.new = function(toEncodable = null) {
  this[indent$] = null;
  this[_toEncodable$0] = toEncodable;
  convert.JsonEncoder.__proto__.new.call(this);
  ;
}).prototype = convert.JsonEncoder.prototype;
(convert.JsonEncoder.withIndent = function(indent, toEncodable = null) {
  this[indent$] = indent;
  this[_toEncodable$0] = toEncodable;
  convert.JsonEncoder.__proto__.new.call(this);
  ;
}).prototype = convert.JsonEncoder.prototype;
dart.addTypeTests(convert.JsonEncoder);
dart.addTypeCaches(convert.JsonEncoder);
const indent$ = JsonEncoder_indent;
const _toEncodable$0 = JsonEncoder__toEncodable;
dart.setMethodSignature(convert.JsonEncoder, () => ({
  __proto__: dart.getMethods(convert.JsonEncoder.__proto__),
  convert: dart.fnType(core.String, [dart.nullable(core.Object)]),
  startChunkedConversion: dart.fnType(convert.ChunkedConversionSink$(dart.nullable(core.Object)), [dart.nullable(core.Object)]),
  fuse: dart.gFnType(T => [convert.Converter$(dart.nullable(core.Object), T), [dart.nullable(core.Object)]], T => [dart.nullable(core.Object)])
}));
dart.setLibraryUri(convert.JsonEncoder, L31);
dart.setFieldSignature(convert.JsonEncoder, () => ({
  __proto__: dart.getFields(convert.JsonEncoder.__proto__),
  indent: dart.finalFieldType(dart.nullable(core.String)),
  [_toEncodable$]: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(core.Object), [dart.dynamic])))
}));
var _indent$ = dart.privateName(convert, "_indent");
var _bufferSize$ = dart.privateName(convert, "_bufferSize");
convert.JsonUtf8Encoder = class JsonUtf8Encoder extends convert.Converter$(dart.nullable(core.Object), core.List$(core.int)) {
  static _utf8Encode(string) {
    if (string == null) return null;
    if (string[$isEmpty]) return _native_typed_data.NativeUint8List.new(0);
    L0: {
      for (let i = 0; i < string.length; i = i + 1) {
        if (string[$codeUnitAt](i) >= 128) break L0;
      }
      return string[$codeUnits];
    }
    return convert.utf8.encode(string);
  }
  convert(object) {
    let bytes = JSArrayOfListOfint().of([]);
    function addChunk(chunk, start, end) {
      if (chunk == null) dart.nullFailed(L94, 364, 29, "chunk");
      if (start == null) dart.nullFailed(L94, 364, 40, "start");
      if (end == null) dart.nullFailed(L94, 364, 51, "end");
      if (dart.notNull(start) > 0 || dart.notNull(end) < dart.notNull(chunk[$length])) {
        let length = dart.notNull(end) - dart.notNull(start);
        chunk = typed_data.Uint8List.view(chunk[$buffer], dart.notNull(chunk[$offsetInBytes]) + dart.notNull(start), length);
      }
      bytes[$add](chunk);
    }
    dart.fn(addChunk, Uint8ListAndintAndintTovoid());
    convert._JsonUtf8Stringifier.stringify(object, this[_indent$], this[_toEncodable$], this[_bufferSize$], addChunk);
    if (bytes[$length] === 1) return bytes[$_get](0);
    let length = 0;
    for (let i = 0; i < dart.notNull(bytes[$length]); i = i + 1) {
      length = length + dart.notNull(bytes[$_get](i)[$length]);
    }
    let result = _native_typed_data.NativeUint8List.new(length);
    for (let i = 0, offset = 0; i < dart.notNull(bytes[$length]); i = i + 1) {
      let byteList = bytes[$_get](i);
      let end = offset + dart.notNull(byteList[$length]);
      result[$setRange](offset, end, byteList);
      offset = end;
    }
    return result;
  }
  startChunkedConversion(sink) {
    SinkOfListOfint().as(sink);
    if (sink == null) dart.nullFailed(L94, 396, 73, "sink");
    let byteSink = null;
    if (convert.ByteConversionSink.is(sink)) {
      byteSink = sink;
    } else {
      byteSink = new convert._ByteAdapterSink.new(sink);
    }
    return new convert._JsonUtf8EncoderSink.new(byteSink, this[_toEncodable$], this[_indent$], this[_bufferSize$]);
  }
  bind(stream) {
    StreamOfObjectN().as(stream);
    if (stream == null) dart.nullFailed(L94, 407, 42, "stream");
    return super.bind(stream);
  }
};
(convert.JsonUtf8Encoder.new = function(indent = null, toEncodable = null, bufferSize = null) {
  let t159;
  this[_indent$] = convert.JsonUtf8Encoder._utf8Encode(indent);
  this[_toEncodable$] = toEncodable;
  this[_bufferSize$] = (t159 = bufferSize, t159 == null ? 256 : t159);
  convert.JsonUtf8Encoder.__proto__.new.call(this);
  ;
}).prototype = convert.JsonUtf8Encoder.prototype;
dart.addTypeTests(convert.JsonUtf8Encoder);
dart.addTypeCaches(convert.JsonUtf8Encoder);
dart.setMethodSignature(convert.JsonUtf8Encoder, () => ({
  __proto__: dart.getMethods(convert.JsonUtf8Encoder.__proto__),
  convert: dart.fnType(core.List$(core.int), [dart.nullable(core.Object)]),
  startChunkedConversion: dart.fnType(convert.ChunkedConversionSink$(dart.nullable(core.Object)), [dart.nullable(core.Object)])
}));
dart.setLibraryUri(convert.JsonUtf8Encoder, L31);
dart.setFieldSignature(convert.JsonUtf8Encoder, () => ({
  __proto__: dart.getFields(convert.JsonUtf8Encoder.__proto__),
  [_indent$]: dart.finalFieldType(dart.nullable(core.List$(core.int))),
  [_toEncodable$]: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(core.Object), [dart.dynamic]))),
  [_bufferSize$]: dart.finalFieldType(core.int)
}));
dart.defineLazy(convert.JsonUtf8Encoder, {
  /*convert.JsonUtf8Encoder._defaultBufferSize*/get _defaultBufferSize() {
    return 256;
  },
  /*convert.JsonUtf8Encoder.DEFAULT_BUFFER_SIZE*/get DEFAULT_BUFFER_SIZE() {
    return 256;
  }
}, false);
var _isDone = dart.privateName(convert, "_isDone");
convert._JsonEncoderSink = class _JsonEncoderSink extends convert.ChunkedConversionSink$(dart.nullable(core.Object)) {
  add(o) {
    if (dart.test(this[_isDone])) {
      dart.throw(new core.StateError.new("Only one call to add allowed"));
    }
    this[_isDone] = true;
    let stringSink = this[_sink$0].asStringSink();
    convert._JsonStringStringifier.printOn(o, stringSink, this[_toEncodable$], this[_indent$]);
    stringSink.close();
  }
  close() {
  }
};
(convert._JsonEncoderSink.new = function(_sink, _toEncodable, _indent) {
  if (_sink == null) dart.nullFailed(L94, 421, 25, "_sink");
  this[_isDone] = false;
  this[_sink$0] = _sink;
  this[_toEncodable$] = _toEncodable;
  this[_indent$] = _indent;
  convert._JsonEncoderSink.__proto__.new.call(this);
  ;
}).prototype = convert._JsonEncoderSink.prototype;
dart.addTypeTests(convert._JsonEncoderSink);
dart.addTypeCaches(convert._JsonEncoderSink);
dart.setMethodSignature(convert._JsonEncoderSink, () => ({
  __proto__: dart.getMethods(convert._JsonEncoderSink.__proto__),
  add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
  close: dart.fnType(dart.void, [])
}));
dart.setLibraryUri(convert._JsonEncoderSink, L31);
dart.setFieldSignature(convert._JsonEncoderSink, () => ({
  __proto__: dart.getFields(convert._JsonEncoderSink.__proto__),
  [_indent$]: dart.finalFieldType(dart.nullable(core.String)),
  [_toEncodable$]: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(core.Object), [dart.dynamic]))),
  [_sink$0]: dart.finalFieldType(convert.StringConversionSink),
  [_isDone]: dart.fieldType(core.bool)
}));
var _addChunk = dart.privateName(convert, "_addChunk");
convert._JsonUtf8EncoderSink = class _JsonUtf8EncoderSink extends convert.ChunkedConversionSink$(dart.nullable(core.Object)) {
  [_addChunk](chunk, start, end) {
    if (chunk == null) dart.nullFailed(L94, 453, 28, "chunk");
    if (start == null) dart.nullFailed(L94, 453, 39, "start");
    if (end == null) dart.nullFailed(L94, 453, 50, "end");
    this[_sink$0].addSlice(chunk, start, end, false);
  }
  add(object) {
    if (dart.test(this[_isDone])) {
      dart.throw(new core.StateError.new("Only one call to add allowed"));
    }
    this[_isDone] = true;
    convert._JsonUtf8Stringifier.stringify(object, this[_indent$], this[_toEncodable$], this[_bufferSize$], dart.bind(this, _addChunk));
    this[_sink$0].close();
  }
  close() {
    if (!dart.test(this[_isDone])) {
      this[_isDone] = true;
      this[_sink$0].close();
    }
  }
};
(convert._JsonUtf8EncoderSink.new = function(_sink, _toEncodable, _indent, _bufferSize) {
  if (_sink == null) dart.nullFailed(L94, 450, 12, "_sink");
  if (_bufferSize == null) dart.nullFailed(L94, 450, 57, "_bufferSize");
  this[_isDone] = false;
  this[_sink$0] = _sink;
  this[_toEncodable$] = _toEncodable;
  this[_indent$] = _indent;
  this[_bufferSize$] = _bufferSize;
  convert._JsonUtf8EncoderSink.__proto__.new.call(this);
  ;
}).prototype = convert._JsonUtf8EncoderSink.prototype;
dart.addTypeTests(convert._JsonUtf8EncoderSink);
dart.addTypeCaches(convert._JsonUtf8EncoderSink);
dart.setMethodSignature(convert._JsonUtf8EncoderSink, () => ({
  __proto__: dart.getMethods(convert._JsonUtf8EncoderSink.__proto__),
  [_addChunk]: dart.fnType(dart.void, [typed_data.Uint8List, core.int, core.int]),
  add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
  close: dart.fnType(dart.void, [])
}));
dart.setLibraryUri(convert._JsonUtf8EncoderSink, L31);
dart.setFieldSignature(convert._JsonUtf8EncoderSink, () => ({
  __proto__: dart.getFields(convert._JsonUtf8EncoderSink.__proto__),
  [_sink$0]: dart.finalFieldType(convert.ByteConversionSink),
  [_indent$]: dart.finalFieldType(dart.nullable(core.List$(core.int))),
  [_toEncodable$]: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(core.Object), [dart.dynamic]))),
  [_bufferSize$]: dart.finalFieldType(core.int),
  [_isDone]: dart.fieldType(core.bool)
}));
convert.JsonDecoder = class JsonDecoder extends convert.Converter$(core.String, dart.nullable(core.Object)) {
  get [_reviver$]() {
    return this[_reviver$0];
  }
  set [_reviver$](value) {
    super[_reviver$] = value;
  }
  convert(input) {
    core.String.as(input);
    if (input == null) dart.nullFailed(L94, 505, 26, "input");
    return convert._parseJson(input, this[_reviver$]);
  }
  startChunkedConversion(sink) {
    if (sink == null) dart.nullFailed(L84, 363, 61, "sink");
    return new convert._JsonDecoderSink.new(this[_reviver$], sink);
  }
  bind(stream) {
    StreamOfString().as(stream);
    if (stream == null) dart.nullFailed(L94, 513, 39, "stream");
    return super.bind(stream);
  }
};
(convert.JsonDecoder.new = function(reviver = null) {
  this[_reviver$0] = reviver;
  convert.JsonDecoder.__proto__.new.call(this);
  ;
}).prototype = convert.JsonDecoder.prototype;
dart.addTypeTests(convert.JsonDecoder);
dart.addTypeCaches(convert.JsonDecoder);
const _reviver$0 = JsonDecoder__reviver;
dart.setMethodSignature(convert.JsonDecoder, () => ({
  __proto__: dart.getMethods(convert.JsonDecoder.__proto__),
  convert: dart.fnType(dart.dynamic, [dart.nullable(core.Object)]),
  startChunkedConversion: dart.fnType(convert.StringConversionSink, [core.Sink$(dart.nullable(core.Object))])
}));
dart.setLibraryUri(convert.JsonDecoder, L31);
dart.setFieldSignature(convert.JsonDecoder, () => ({
  __proto__: dart.getFields(convert.JsonDecoder.__proto__),
  [_reviver$]: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(core.Object), [dart.nullable(core.Object), dart.nullable(core.Object)])))
}));
var _seen = dart.privateName(convert, "_seen");
var C93;
var _checkCycle = dart.privateName(convert, "_checkCycle");
var _removeSeen = dart.privateName(convert, "_removeSeen");
var _partialResult = dart.privateName(convert, "_partialResult");
convert._JsonStringifier = class _JsonStringifier extends core.Object {
  static hexDigit(x) {
    if (x == null) dart.nullFailed(L94, 573, 27, "x");
    return dart.notNull(x) < 10 ? 48 + dart.notNull(x) : 87 + dart.notNull(x);
  }
  writeStringContent(s) {
    if (s == null) dart.nullFailed(L94, 576, 34, "s");
    let offset = 0;
    let length = s.length;
    for (let i = 0; i < length; i = i + 1) {
      let charCode = s[$codeUnitAt](i);
      if (charCode > 92) {
        if (charCode >= 55296) {
          if ((charCode & 64512) >>> 0 === 55296 && !(i + 1 < length && (s[$codeUnitAt](i + 1) & 64512) >>> 0 === 56320) || (charCode & 64512) >>> 0 === 56320 && !(i - 1 >= 0 && (s[$codeUnitAt](i - 1) & 64512) >>> 0 === 55296)) {
            if (i > offset) this.writeStringSlice(s, offset, i);
            offset = i + 1;
            this.writeCharCode(92);
            this.writeCharCode(117);
            this.writeCharCode(100);
            this.writeCharCode(convert._JsonStringifier.hexDigit(charCode >> 8 & 15));
            this.writeCharCode(convert._JsonStringifier.hexDigit(charCode >> 4 & 15));
            this.writeCharCode(convert._JsonStringifier.hexDigit(charCode & 15));
          }
        }
        continue;
      }
      if (charCode < 32) {
        if (i > offset) this.writeStringSlice(s, offset, i);
        offset = i + 1;
        this.writeCharCode(92);
        switch (charCode) {
          case 8:
          {
            this.writeCharCode(98);
            break;
          }
          case 9:
          {
            this.writeCharCode(116);
            break;
          }
          case 10:
          {
            this.writeCharCode(110);
            break;
          }
          case 12:
          {
            this.writeCharCode(102);
            break;
          }
          case 13:
          {
            this.writeCharCode(114);
            break;
          }
          default:
          {
            this.writeCharCode(117);
            this.writeCharCode(48);
            this.writeCharCode(48);
            this.writeCharCode(convert._JsonStringifier.hexDigit(charCode >> 4 & 15));
            this.writeCharCode(convert._JsonStringifier.hexDigit(charCode & 15));
            break;
          }
        }
      } else if (charCode === 34 || charCode === 92) {
        if (i > offset) this.writeStringSlice(s, offset, i);
        offset = i + 1;
        this.writeCharCode(92);
        this.writeCharCode(charCode);
      }
    }
    if (offset === 0) {
      this.writeString(s);
    } else if (offset < length) {
      this.writeStringSlice(s, offset, length);
    }
  }
  [_checkCycle](object) {
    for (let i = 0; i < dart.notNull(this[_seen][$length]); i = i + 1) {
      if (core.identical(object, this[_seen][$_get](i))) {
        dart.throw(new convert.JsonCyclicError.new(object));
      }
    }
    this[_seen][$add](object);
  }
  [_removeSeen](object) {
    if (!dart.test(this[_seen][$isNotEmpty])) dart.assertFailed(null, L94, 665, 12, "_seen.isNotEmpty");
    if (!core.identical(this[_seen][$last], object)) dart.assertFailed(null, L94, 666, 12, "identical(_seen.last, object)");
    this[_seen][$removeLast]();
  }
  writeObject(object) {
    let t159;
    if (dart.test(this.writeJsonValue(object))) return;
    this[_checkCycle](object);
    try {
      let customJson = (t159 = object, this[_toEncodable$](t159));
      if (!dart.test(this.writeJsonValue(customJson))) {
        dart.throw(new convert.JsonUnsupportedObjectError.new(object, {partialResult: this[_partialResult]}));
      }
      this[_removeSeen](object);
    } catch (e$) {
      let e = dart.getThrown(e$);
      if (core.Object.is(e)) {
        dart.throw(new convert.JsonUnsupportedObjectError.new(object, {cause: e, partialResult: this[_partialResult]}));
      } else
        throw e$;
    }
  }
  writeJsonValue(object) {
    if (typeof object == 'number') {
      if (!object[$isFinite]) return false;
      this.writeNumber(object);
      return true;
    } else if (object === true) {
      this.writeString("true");
      return true;
    } else if (object === false) {
      this.writeString("false");
      return true;
    } else if (object == null) {
      this.writeString("null");
      return true;
    } else if (typeof object == 'string') {
      this.writeString("\"");
      this.writeStringContent(object);
      this.writeString("\"");
      return true;
    } else if (core.List.is(object)) {
      this[_checkCycle](object);
      this.writeList(object);
      this[_removeSeen](object);
      return true;
    } else if (core.Map.is(object)) {
      this[_checkCycle](object);
      let success = this.writeMap(object);
      this[_removeSeen](object);
      return success;
    } else {
      return false;
    }
  }
  writeList(list) {
    if (list == null) dart.nullFailed(L94, 732, 32, "list");
    this.writeString("[");
    if (dart.test(list[$isNotEmpty])) {
      this.writeObject(list[$_get](0));
      for (let i = 1; i < dart.notNull(list[$length]); i = i + 1) {
        this.writeString(",");
        this.writeObject(list[$_get](i));
      }
    }
    this.writeString("]");
  }
  writeMap(map) {
    if (map == null) dart.nullFailed(L94, 745, 39, "map");
    if (dart.test(map[$isEmpty])) {
      this.writeString("{}");
      return true;
    }
    let keyValueList = ListOfObjectN().filled(dart.notNull(map[$length]) * 2, null);
    let i = 0;
    let allStringKeys = true;
    map[$forEach](dart.fn((key, value) => {
      let t160, t160$;
      if (!(typeof key == 'string')) {
        allStringKeys = false;
      }
      keyValueList[$_set]((t160 = i, i = t160 + 1, t160), key);
      keyValueList[$_set]((t160$ = i, i = t160$ + 1, t160$), value);
    }, ObjectNAndObjectNToNullN()));
    if (!allStringKeys) return false;
    this.writeString("{");
    let separator = "\"";
    for (let i = 0; i < dart.notNull(keyValueList[$length]); i = i + 2) {
      this.writeString(separator);
      separator = ",\"";
      this.writeStringContent(core.String.as(keyValueList[$_get](i)));
      this.writeString("\":");
      this.writeObject(keyValueList[$_get](i + 1));
    }
    this.writeString("}");
    return true;
  }
};
(convert._JsonStringifier.new = function(toEncodable) {
  let t159;
  this[_seen] = [];
  this[_toEncodable$] = (t159 = toEncodable, t159 == null ? C93 || CT.C93 : t159);
  ;
}).prototype = convert._JsonStringifier.prototype;
dart.addTypeTests(convert._JsonStringifier);
dart.addTypeCaches(convert._JsonStringifier);
dart.setMethodSignature(convert._JsonStringifier, () => ({
  __proto__: dart.getMethods(convert._JsonStringifier.__proto__),
  writeStringContent: dart.fnType(dart.void, [core.String]),
  [_checkCycle]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
  [_removeSeen]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
  writeObject: dart.fnType(dart.void, [dart.nullable(core.Object)]),
  writeJsonValue: dart.fnType(core.bool, [dart.nullable(core.Object)]),
  writeList: dart.fnType(dart.void, [core.List$(dart.nullable(core.Object))]),
  writeMap: dart.fnType(core.bool, [core.Map$(dart.nullable(core.Object), dart.nullable(core.Object))])
}));
dart.setLibraryUri(convert._JsonStringifier, L31);
dart.setFieldSignature(convert._JsonStringifier, () => ({
  __proto__: dart.getFields(convert._JsonStringifier.__proto__),
  [_seen]: dart.finalFieldType(core.List),
  [_toEncodable$]: dart.finalFieldType(dart.fnType(dart.dynamic, [dart.dynamic]))
}));
dart.defineLazy(convert._JsonStringifier, {
  /*convert._JsonStringifier.backspace*/get backspace() {
    return 8;
  },
  /*convert._JsonStringifier.tab*/get tab() {
    return 9;
  },
  /*convert._JsonStringifier.newline*/get newline() {
    return 10;
  },
  /*convert._JsonStringifier.carriageReturn*/get carriageReturn() {
    return 13;
  },
  /*convert._JsonStringifier.formFeed*/get formFeed() {
    return 12;
  },
  /*convert._JsonStringifier.quote*/get quote() {
    return 34;
  },
  /*convert._JsonStringifier.char_0*/get char_0() {
    return 48;
  },
  /*convert._JsonStringifier.backslash*/get backslash() {
    return 92;
  },
  /*convert._JsonStringifier.char_b*/get char_b() {
    return 98;
  },
  /*convert._JsonStringifier.char_d*/get char_d() {
    return 100;
  },
  /*convert._JsonStringifier.char_f*/get char_f() {
    return 102;
  },
  /*convert._JsonStringifier.char_n*/get char_n() {
    return 110;
  },
  /*convert._JsonStringifier.char_r*/get char_r() {
    return 114;
  },
  /*convert._JsonStringifier.char_t*/get char_t() {
    return 116;
  },
  /*convert._JsonStringifier.char_u*/get char_u() {
    return 117;
  },
  /*convert._JsonStringifier.surrogateMin*/get surrogateMin() {
    return 55296;
  },
  /*convert._JsonStringifier.surrogateMask*/get surrogateMask() {
    return 64512;
  },
  /*convert._JsonStringifier.surrogateLead*/get surrogateLead() {
    return 55296;
  },
  /*convert._JsonStringifier.surrogateTrail*/get surrogateTrail() {
    return 56320;
  }
}, false);
var _indentLevel = dart.privateName(convert, "_indentLevel");
convert._JsonPrettyPrintMixin = class _JsonPrettyPrintMixin extends core.Object {
  writeList(list) {
    if (list == null) dart.nullFailed(L94, 785, 32, "list");
    if (dart.test(list[$isEmpty])) {
      this.writeString("[]");
    } else {
      this.writeString("[\n");
      this[_indentLevel] = dart.notNull(this[_indentLevel]) + 1;
      this.writeIndentation(this[_indentLevel]);
      this.writeObject(list[$_get](0));
      for (let i = 1; i < dart.notNull(list[$length]); i = i + 1) {
        this.writeString(",\n");
        this.writeIndentation(this[_indentLevel]);
        this.writeObject(list[$_get](i));
      }
      this.writeString("\n");
      this[_indentLevel] = dart.notNull(this[_indentLevel]) - 1;
      this.writeIndentation(this[_indentLevel]);
      this.writeString("]");
    }
  }
  writeMap(map) {
    if (map == null) dart.nullFailed(L94, 805, 39, "map");
    if (dart.test(map[$isEmpty])) {
      this.writeString("{}");
      return true;
    }
    let keyValueList = ListOfObjectN().filled(dart.notNull(map[$length]) * 2, null);
    let i = 0;
    let allStringKeys = true;
    map[$forEach](dart.fn((key, value) => {
      let t160, t160$;
      if (!(typeof key == 'string')) {
        allStringKeys = false;
      }
      keyValueList[$_set]((t160 = i, i = t160 + 1, t160), key);
      keyValueList[$_set]((t160$ = i, i = t160$ + 1, t160$), value);
    }, ObjectNAndObjectNToNullN()));
    if (!allStringKeys) return false;
    this.writeString("{\n");
    this[_indentLevel] = dart.notNull(this[_indentLevel]) + 1;
    let separator = "";
    for (let i = 0; i < dart.notNull(keyValueList[$length]); i = i + 2) {
      this.writeString(separator);
      separator = ",\n";
      this.writeIndentation(this[_indentLevel]);
      this.writeString("\"");
      this.writeStringContent(core.String.as(keyValueList[$_get](i)));
      this.writeString("\": ");
      this.writeObject(keyValueList[$_get](i + 1));
    }
    this.writeString("\n");
    this[_indentLevel] = dart.notNull(this[_indentLevel]) - 1;
    this.writeIndentation(this[_indentLevel]);
    this.writeString("}");
    return true;
  }
};
(convert._JsonPrettyPrintMixin.new = function() {
  this[_indentLevel] = 0;
  ;
}).prototype = convert._JsonPrettyPrintMixin.prototype;
dart.addTypeTests(convert._JsonPrettyPrintMixin);
dart.addTypeCaches(convert._JsonPrettyPrintMixin);
convert._JsonPrettyPrintMixin[dart.implements] = () => [convert._JsonStringifier];
dart.setMethodSignature(convert._JsonPrettyPrintMixin, () => ({
  __proto__: dart.getMethods(convert._JsonPrettyPrintMixin.__proto__),
  writeList: dart.fnType(dart.void, [core.List$(dart.nullable(core.Object))]),
  writeMap: dart.fnType(core.bool, [core.Map$(dart.nullable(core.Object), dart.nullable(core.Object))])
}));
dart.setLibraryUri(convert._JsonPrettyPrintMixin, L31);
dart.setFieldSignature(convert._JsonPrettyPrintMixin, () => ({
  __proto__: dart.getFields(convert._JsonPrettyPrintMixin.__proto__),
  [_indentLevel]: dart.fieldType(core.int)
}));
convert._JsonStringStringifier = class _JsonStringStringifier extends convert._JsonStringifier {
  static stringify(object, toEncodable, indent) {
    let output = new core.StringBuffer.new();
    convert._JsonStringStringifier.printOn(object, output, toEncodable, indent);
    return output.toString();
  }
  static printOn(object, output, toEncodable, indent) {
    if (output == null) dart.nullFailed(L94, 868, 50, "output");
    let stringifier = null;
    if (indent == null) {
      stringifier = new convert._JsonStringStringifier.new(output, toEncodable);
    } else {
      stringifier = new convert._JsonStringStringifierPretty.new(output, toEncodable, indent);
    }
    stringifier.writeObject(object);
  }
  get [_partialResult]() {
    return core.StringBuffer.is(this[_sink$0]) ? dart.toString(this[_sink$0]) : null;
  }
  writeNumber(number) {
    if (number == null) dart.nullFailed(L94, 881, 24, "number");
    this[_sink$0].write(dart.toString(number));
  }
  writeString(string) {
    if (string == null) dart.nullFailed(L94, 885, 27, "string");
    this[_sink$0].write(string);
  }
  writeStringSlice(string, start, end) {
    if (string == null) dart.nullFailed(L94, 889, 32, "string");
    if (start == null) dart.nullFailed(L94, 889, 44, "start");
    if (end == null) dart.nullFailed(L94, 889, 55, "end");
    this[_sink$0].write(string[$substring](start, end));
  }
  writeCharCode(charCode) {
    if (charCode == null) dart.nullFailed(L94, 893, 26, "charCode");
    this[_sink$0].writeCharCode(charCode);
  }
};
(convert._JsonStringStringifier.new = function(_sink, _toEncodable) {
  if (_sink == null) dart.nullFailed(L94, 846, 12, "_sink");
  this[_sink$0] = _sink;
  convert._JsonStringStringifier.__proto__.new.call(this, _toEncodable);
  ;
}).prototype = convert._JsonStringStringifier.prototype;
dart.addTypeTests(convert._JsonStringStringifier);
dart.addTypeCaches(convert._JsonStringStringifier);
dart.setMethodSignature(convert._JsonStringStringifier, () => ({
  __proto__: dart.getMethods(convert._JsonStringStringifier.__proto__),
  writeNumber: dart.fnType(dart.void, [core.num]),
  writeString: dart.fnType(dart.void, [core.String]),
  writeStringSlice: dart.fnType(dart.void, [core.String, core.int, core.int]),
  writeCharCode: dart.fnType(dart.void, [core.int])
}));
dart.setGetterSignature(convert._JsonStringStringifier, () => ({
  __proto__: dart.getGetters(convert._JsonStringStringifier.__proto__),
  [_partialResult]: dart.nullable(core.String)
}));
dart.setLibraryUri(convert._JsonStringStringifier, L31);
dart.setFieldSignature(convert._JsonStringStringifier, () => ({
  __proto__: dart.getFields(convert._JsonStringStringifier.__proto__),
  [_sink$0]: dart.finalFieldType(core.StringSink)
}));
const _JsonStringStringifier__JsonPrettyPrintMixin$36 = class _JsonStringStringifier__JsonPrettyPrintMixin extends convert._JsonStringStringifier {};
(_JsonStringStringifier__JsonPrettyPrintMixin$36.new = function(_sink, _toEncodable) {
  convert._JsonPrettyPrintMixin.new.call(this);
  _JsonStringStringifier__JsonPrettyPrintMixin$36.__proto__.new.call(this, _sink, _toEncodable);
}).prototype = _JsonStringStringifier__JsonPrettyPrintMixin$36.prototype;
dart.applyMixin(_JsonStringStringifier__JsonPrettyPrintMixin$36, convert._JsonPrettyPrintMixin);
convert._JsonStringStringifierPretty = class _JsonStringStringifierPretty extends _JsonStringStringifier__JsonPrettyPrintMixin$36 {
  writeIndentation(count) {
    if (count == null) dart.nullFailed(L94, 906, 29, "count");
    for (let i = 0; i < dart.notNull(count); i = i + 1)
      this.writeString(this[_indent$]);
  }
};
(convert._JsonStringStringifierPretty.new = function(sink, toEncodable, _indent) {
  if (sink == null) dart.nullFailed(L94, 903, 18, "sink");
  if (_indent == null) dart.nullFailed(L94, 903, 62, "_indent");
  this[_indent$] = _indent;
  convert._JsonStringStringifierPretty.__proto__.new.call(this, sink, toEncodable);
  ;
}).prototype = convert._JsonStringStringifierPretty.prototype;
dart.addTypeTests(convert._JsonStringStringifierPretty);
dart.addTypeCaches(convert._JsonStringStringifierPretty);
dart.setMethodSignature(convert._JsonStringStringifierPretty, () => ({
  __proto__: dart.getMethods(convert._JsonStringStringifierPretty.__proto__),
  writeIndentation: dart.fnType(dart.void, [core.int])
}));
dart.setLibraryUri(convert._JsonStringStringifierPretty, L31);
dart.setFieldSignature(convert._JsonStringStringifierPretty, () => ({
  __proto__: dart.getFields(convert._JsonStringStringifierPretty.__proto__),
  [_indent$]: dart.finalFieldType(core.String)
}));
convert._JsonUtf8Stringifier = class _JsonUtf8Stringifier extends convert._JsonStringifier {
  static stringify(object, indent, toEncodable, bufferSize, addChunk) {
    if (bufferSize == null) dart.nullFailed(L94, 939, 11, "bufferSize");
    if (addChunk == null) dart.nullFailed(L94, 940, 12, "addChunk");
    let stringifier = null;
    if (indent != null) {
      stringifier = new convert._JsonUtf8StringifierPretty.new(toEncodable, indent, bufferSize, addChunk);
    } else {
      stringifier = new convert._JsonUtf8Stringifier.new(toEncodable, bufferSize, addChunk);
    }
    stringifier.writeObject(object);
    stringifier.flush();
  }
  flush() {
    let t162, t161, t160;
    if (dart.notNull(this.index) > 0) {
      t160 = this.buffer;
      t161 = 0;
      t162 = this.index;
      this.addChunk(t160, t161, t162);
    }
    this.buffer = _native_typed_data.NativeUint8List.new(0);
    this.index = 0;
  }
  get [_partialResult]() {
    return null;
  }
  writeNumber(number) {
    if (number == null) dart.nullFailed(L94, 964, 24, "number");
    this.writeAsciiString(dart.toString(number));
  }
  writeAsciiString(string) {
    if (string == null) dart.nullFailed(L94, 969, 32, "string");
    for (let i = 0; i < string.length; i = i + 1) {
      let char = string[$codeUnitAt](i);
      if (!(char <= 127)) dart.assertFailed(null, L94, 974, 14, "char <= 0x7f");
      this.writeByte(char);
    }
  }
  writeString(string) {
    if (string == null) dart.nullFailed(L94, 979, 27, "string");
    this.writeStringSlice(string, 0, string.length);
  }
  writeStringSlice(string, start, end) {
    if (string == null) dart.nullFailed(L94, 983, 32, "string");
    if (start == null) dart.nullFailed(L94, 983, 44, "start");
    if (end == null) dart.nullFailed(L94, 983, 55, "end");
    for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
      let char = string[$codeUnitAt](i);
      if (char <= 127) {
        this.writeByte(char);
      } else {
        if ((char & 63488) === 55296) {
          if (char < 56320 && dart.notNull(i) + 1 < dart.notNull(end)) {
            let nextChar = string[$codeUnitAt](dart.notNull(i) + 1);
            if ((nextChar & 64512) === 56320) {
              char = 65536 + ((char & 1023) << 10) + (nextChar & 1023);
              this.writeFourByteCharCode(char);
              i = dart.notNull(i) + 1;
              continue;
            }
          }
          this.writeMultiByteCharCode(65533);
          continue;
        }
        this.writeMultiByteCharCode(char);
      }
    }
  }
  writeCharCode(charCode) {
    if (charCode == null) dart.nullFailed(L94, 1014, 26, "charCode");
    if (dart.notNull(charCode) <= 127) {
      this.writeByte(charCode);
      return;
    }
    this.writeMultiByteCharCode(charCode);
  }
  writeMultiByteCharCode(charCode) {
    if (charCode == null) dart.nullFailed(L94, 1022, 35, "charCode");
    if (dart.notNull(charCode) <= 2047) {
      this.writeByte((192 | charCode[$rightShift](6)) >>> 0);
      this.writeByte(128 | dart.notNull(charCode) & 63);
      return;
    }
    if (dart.notNull(charCode) <= 65535) {
      this.writeByte((224 | charCode[$rightShift](12)) >>> 0);
      this.writeByte(128 | dart.notNull(charCode) >> 6 & 63);
      this.writeByte(128 | dart.notNull(charCode) & 63);
      return;
    }
    this.writeFourByteCharCode(charCode);
  }
  writeFourByteCharCode(charCode) {
    if (charCode == null) dart.nullFailed(L94, 1037, 34, "charCode");
    if (!(dart.notNull(charCode) <= 1114111)) dart.assertFailed(null, L94, 1038, 12, "charCode <= 0x10ffff");
    this.writeByte((240 | charCode[$rightShift](18)) >>> 0);
    this.writeByte(128 | dart.notNull(charCode) >> 12 & 63);
    this.writeByte(128 | dart.notNull(charCode) >> 6 & 63);
    this.writeByte(128 | dart.notNull(charCode) & 63);
  }
  writeByte(byte) {
    let t162, t161, t160, t160$;
    if (byte == null) dart.nullFailed(L94, 1045, 22, "byte");
    if (!(dart.notNull(byte) <= 255)) dart.assertFailed(null, L94, 1046, 12, "byte <= 0xff");
    if (this.index == this.buffer[$length]) {
      t160 = this.buffer;
      t161 = 0;
      t162 = this.index;
      this.addChunk(t160, t161, t162);
      this.buffer = _native_typed_data.NativeUint8List.new(this.bufferSize);
      this.index = 0;
    }
    this.buffer[$_set]((t160$ = this.index, this.index = dart.notNull(t160$) + 1, t160$), byte);
  }
};
(convert._JsonUtf8Stringifier.new = function(toEncodable, bufferSize, addChunk) {
  if (bufferSize == null) dart.nullFailed(L94, 922, 45, "bufferSize");
  if (addChunk == null) dart.nullFailed(L94, 922, 62, "addChunk");
  this.index = 0;
  this.bufferSize = bufferSize;
  this.addChunk = addChunk;
  this.buffer = _native_typed_data.NativeUint8List.new(bufferSize);
  convert._JsonUtf8Stringifier.__proto__.new.call(this, toEncodable);
  ;
}).prototype = convert._JsonUtf8Stringifier.prototype;
dart.addTypeTests(convert._JsonUtf8Stringifier);
dart.addTypeCaches(convert._JsonUtf8Stringifier);
dart.setMethodSignature(convert._JsonUtf8Stringifier, () => ({
  __proto__: dart.getMethods(convert._JsonUtf8Stringifier.__proto__),
  flush: dart.fnType(dart.void, []),
  writeNumber: dart.fnType(dart.void, [core.num]),
  writeAsciiString: dart.fnType(dart.void, [core.String]),
  writeString: dart.fnType(dart.void, [core.String]),
  writeStringSlice: dart.fnType(dart.void, [core.String, core.int, core.int]),
  writeCharCode: dart.fnType(dart.void, [core.int]),
  writeMultiByteCharCode: dart.fnType(dart.void, [core.int]),
  writeFourByteCharCode: dart.fnType(dart.void, [core.int]),
  writeByte: dart.fnType(dart.void, [core.int])
}));
dart.setGetterSignature(convert._JsonUtf8Stringifier, () => ({
  __proto__: dart.getGetters(convert._JsonUtf8Stringifier.__proto__),
  [_partialResult]: dart.nullable(core.String)
}));
dart.setLibraryUri(convert._JsonUtf8Stringifier, L31);
dart.setFieldSignature(convert._JsonUtf8Stringifier, () => ({
  __proto__: dart.getFields(convert._JsonUtf8Stringifier.__proto__),
  bufferSize: dart.finalFieldType(core.int),
  addChunk: dart.finalFieldType(dart.fnType(dart.void, [typed_data.Uint8List, core.int, core.int])),
  buffer: dart.fieldType(typed_data.Uint8List),
  index: dart.fieldType(core.int)
}));
const _JsonUtf8Stringifier__JsonPrettyPrintMixin$36 = class _JsonUtf8Stringifier__JsonPrettyPrintMixin extends convert._JsonUtf8Stringifier {};
(_JsonUtf8Stringifier__JsonPrettyPrintMixin$36.new = function(toEncodable, bufferSize, addChunk) {
  convert._JsonPrettyPrintMixin.new.call(this);
  _JsonUtf8Stringifier__JsonPrettyPrintMixin$36.__proto__.new.call(this, toEncodable, bufferSize, addChunk);
}).prototype = _JsonUtf8Stringifier__JsonPrettyPrintMixin$36.prototype;
dart.applyMixin(_JsonUtf8Stringifier__JsonPrettyPrintMixin$36, convert._JsonPrettyPrintMixin);
convert._JsonUtf8StringifierPretty = class _JsonUtf8StringifierPretty extends _JsonUtf8Stringifier__JsonPrettyPrintMixin$36 {
  writeIndentation(count) {
    if (count == null) dart.nullFailed(L94, 1064, 29, "count");
    let indent = this.indent;
    let indentLength = indent[$length];
    if (indentLength === 1) {
      let char = indent[$_get](0);
      while (dart.notNull(count) > 0) {
        this.writeByte(char);
        count = dart.notNull(count) - 1;
      }
      return;
    }
    while (dart.notNull(count) > 0) {
      count = dart.notNull(count) - 1;
      let end = dart.notNull(this.index) + dart.notNull(indentLength);
      if (end <= dart.notNull(this.buffer[$length])) {
        this.buffer[$setRange](this.index, end, indent);
        this.index = end;
      } else {
        for (let i = 0; i < dart.notNull(indentLength); i = i + 1) {
          this.writeByte(indent[$_get](i));
        }
      }
    }
  }
};
(convert._JsonUtf8StringifierPretty.new = function(toEncodable, indent, bufferSize, addChunk) {
  if (indent == null) dart.nullFailed(L94, 1060, 68, "indent");
  if (bufferSize == null) dart.nullFailed(L94, 1061, 11, "bufferSize");
  if (addChunk == null) dart.nullFailed(L94, 1061, 28, "addChunk");
  this.indent = indent;
  convert._JsonUtf8StringifierPretty.__proto__.new.call(this, toEncodable, bufferSize, addChunk);
  ;
}).prototype = convert._JsonUtf8StringifierPretty.prototype;
dart.addTypeTests(convert._JsonUtf8StringifierPretty);
dart.addTypeCaches(convert._JsonUtf8StringifierPretty);
dart.setMethodSignature(convert._JsonUtf8StringifierPretty, () => ({
  __proto__: dart.getMethods(convert._JsonUtf8StringifierPretty.__proto__),
  writeIndentation: dart.fnType(dart.void, [core.int])
}));
dart.setLibraryUri(convert._JsonUtf8StringifierPretty, L31);
dart.setFieldSignature(convert._JsonUtf8StringifierPretty, () => ({
  __proto__: dart.getFields(convert._JsonUtf8StringifierPretty.__proto__),
  indent: dart.finalFieldType(core.List$(core.int))
}));
var C94;
var C95;
var C96;
var _allowInvalid$1 = dart.privateName(convert, "Latin1Codec._allowInvalid");
convert.Latin1Codec = class Latin1Codec extends convert.Encoding {
  get [_allowInvalid]() {
    return this[_allowInvalid$1];
  }
  set [_allowInvalid](value) {
    super[_allowInvalid] = value;
  }
  get name() {
    return "iso-8859-1";
  }
  encode(source) {
    core.String.as(source);
    if (source == null) dart.nullFailed(L95, 40, 27, "source");
    return this.encoder.convert(source);
  }
  decode(bytes, opts) {
    let t160;
    ListOfint().as(bytes);
    if (bytes == null) dart.nullFailed(L95, 50, 27, "bytes");
    let allowInvalid = opts && 'allowInvalid' in opts ? opts.allowInvalid : null;
    if (dart.test((t160 = allowInvalid, t160 == null ? this[_allowInvalid] : t160))) {
      return (C94 || CT.C94).convert(bytes);
    } else {
      return (C95 || CT.C95).convert(bytes);
    }
  }
  get encoder() {
    return C96 || CT.C96;
  }
  get decoder() {
    return dart.test(this[_allowInvalid]) ? C94 || CT.C94 : C95 || CT.C95;
  }
};
(convert.Latin1Codec.new = function(opts) {
  let allowInvalid = opts && 'allowInvalid' in opts ? opts.allowInvalid : false;
  if (allowInvalid == null) dart.nullFailed(L95, 35, 27, "allowInvalid");
  this[_allowInvalid$1] = allowInvalid;
  convert.Latin1Codec.__proto__.new.call(this);
  ;
}).prototype = convert.Latin1Codec.prototype;
dart.addTypeTests(convert.Latin1Codec);
dart.addTypeCaches(convert.Latin1Codec);
dart.setMethodSignature(convert.Latin1Codec, () => ({
  __proto__: dart.getMethods(convert.Latin1Codec.__proto__),
  encode: dart.fnType(typed_data.Uint8List, [dart.nullable(core.Object)]),
  decode: dart.fnType(core.String, [dart.nullable(core.Object)], {allowInvalid: dart.nullable(core.bool)}, {})
}));
dart.setGetterSignature(convert.Latin1Codec, () => ({
  __proto__: dart.getGetters(convert.Latin1Codec.__proto__),
  name: core.String,
  encoder: convert.Latin1Encoder,
  decoder: convert.Latin1Decoder
}));
dart.setLibraryUri(convert.Latin1Codec, L31);
dart.setFieldSignature(convert.Latin1Codec, () => ({
  __proto__: dart.getFields(convert.Latin1Codec.__proto__),
  [_allowInvalid]: dart.finalFieldType(core.bool)
}));
convert.Latin1Encoder = class Latin1Encoder extends convert._UnicodeSubsetEncoder {};
(convert.Latin1Encoder.new = function() {
  convert.Latin1Encoder.__proto__.new.call(this, 255);
  ;
}).prototype = convert.Latin1Encoder.prototype;
dart.addTypeTests(convert.Latin1Encoder);
dart.addTypeCaches(convert.Latin1Encoder);
dart.setLibraryUri(convert.Latin1Encoder, L31);
convert.Latin1Decoder = class Latin1Decoder extends convert._UnicodeSubsetDecoder {
  startChunkedConversion(sink) {
    SinkOfString().as(sink);
    if (sink == null) dart.nullFailed(L95, 88, 58, "sink");
    let stringSink = null;
    if (convert.StringConversionSink.is(sink)) {
      stringSink = sink;
    } else {
      stringSink = new convert._StringAdapterSink.new(sink);
    }
    if (!dart.test(this[_allowInvalid])) return new convert._Latin1DecoderSink.new(stringSink);
    return new convert._Latin1AllowInvalidDecoderSink.new(stringSink);
  }
};
(convert.Latin1Decoder.new = function(opts) {
  let allowInvalid = opts && 'allowInvalid' in opts ? opts.allowInvalid : false;
  if (allowInvalid == null) dart.nullFailed(L95, 81, 29, "allowInvalid");
  convert.Latin1Decoder.__proto__.new.call(this, allowInvalid, 255);
  ;
}).prototype = convert.Latin1Decoder.prototype;
dart.addTypeTests(convert.Latin1Decoder);
dart.addTypeCaches(convert.Latin1Decoder);
dart.setMethodSignature(convert.Latin1Decoder, () => ({
  __proto__: dart.getMethods(convert.Latin1Decoder.__proto__),
  startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)])
}));
dart.setLibraryUri(convert.Latin1Decoder, L31);
var _addSliceToSink = dart.privateName(convert, "_addSliceToSink");
convert._Latin1DecoderSink = class _Latin1DecoderSink extends convert.ByteConversionSinkBase {
  close() {
    dart.nullCheck(this[_sink$0]).close();
    this[_sink$0] = null;
  }
  add(source) {
    ListOfint().as(source);
    if (source == null) dart.nullFailed(L95, 110, 22, "source");
    this.addSlice(source, 0, source[$length], false);
  }
  [_addSliceToSink](source, start, end, isLast) {
    if (source == null) dart.nullFailed(L95, 114, 34, "source");
    if (start == null) dart.nullFailed(L95, 114, 46, "start");
    if (end == null) dart.nullFailed(L95, 114, 57, "end");
    if (isLast == null) dart.nullFailed(L95, 114, 67, "isLast");
    dart.nullCheck(this[_sink$0]).add(core.String.fromCharCodes(source, start, end));
    if (dart.test(isLast)) this.close();
  }
  addSlice(source, start, end, isLast) {
    if (source == null) dart.nullFailed(L95, 123, 27, "source");
    if (start == null) dart.nullFailed(L95, 123, 39, "start");
    if (end == null) dart.nullFailed(L95, 123, 50, "end");
    if (isLast == null) dart.nullFailed(L95, 123, 60, "isLast");
    core.RangeError.checkValidRange(start, end, source[$length]);
    if (start == end) return;
    if (!typed_data.Uint8List.is(source)) {
      convert._Latin1DecoderSink._checkValidLatin1(source, start, end);
    }
    this[_addSliceToSink](source, start, end, isLast);
  }
  static _checkValidLatin1(source, start, end) {
    if (source == null) dart.nullFailed(L95, 135, 43, "source");
    if (start == null) dart.nullFailed(L95, 135, 55, "start");
    if (end == null) dart.nullFailed(L95, 135, 66, "end");
    let mask = 0;
    for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
      mask = (mask | dart.notNull(source[$_get](i))) >>> 0;
    }
    if (mask >= 0 && mask <= 255) {
      return;
    }
    convert._Latin1DecoderSink._reportInvalidLatin1(source, start, end);
  }
  static _reportInvalidLatin1(source, start, end) {
    if (source == null) dart.nullFailed(L95, 146, 46, "source");
    if (start == null) dart.nullFailed(L95, 146, 58, "start");
    if (end == null) dart.nullFailed(L95, 146, 69, "end");
    for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
      let char = source[$_get](i);
      if (dart.notNull(char) < 0 || dart.notNull(char) > 255) {
        dart.throw(new core.FormatException.new("Source contains non-Latin-1 characters.", source, i));
      }
    }
    if (!false) dart.assertFailed(null, L95, 156, 12, "false");
  }
};
(convert._Latin1DecoderSink.new = function(_sink) {
  this[_sink$0] = _sink;
  convert._Latin1DecoderSink.__proto__.new.call(this);
  ;
}).prototype = convert._Latin1DecoderSink.prototype;
dart.addTypeTests(convert._Latin1DecoderSink);
dart.addTypeCaches(convert._Latin1DecoderSink);
dart.setMethodSignature(convert._Latin1DecoderSink, () => ({
  __proto__: dart.getMethods(convert._Latin1DecoderSink.__proto__),
  close: dart.fnType(dart.void, []),
  add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
  [_addSliceToSink]: dart.fnType(dart.void, [core.List$(core.int), core.int, core.int, core.bool])
}));
dart.setLibraryUri(convert._Latin1DecoderSink, L31);
dart.setFieldSignature(convert._Latin1DecoderSink, () => ({
  __proto__: dart.getFields(convert._Latin1DecoderSink.__proto__),
  [_sink$0]: dart.fieldType(dart.nullable(convert.StringConversionSink))
}));
var C97;
convert._Latin1AllowInvalidDecoderSink = class _Latin1AllowInvalidDecoderSink extends convert._Latin1DecoderSink {
  addSlice(source, start, end, isLast) {
    if (source == null) dart.nullFailed(L95, 163, 27, "source");
    if (start == null) dart.nullFailed(L95, 163, 39, "start");
    if (end == null) dart.nullFailed(L95, 163, 50, "end");
    if (isLast == null) dart.nullFailed(L95, 163, 60, "isLast");
    core.RangeError.checkValidRange(start, end, source[$length]);
    for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
      let char = source[$_get](i);
      if (dart.notNull(char) > 255 || dart.notNull(char) < 0) {
        if (dart.notNull(i) > dart.notNull(start)) this[_addSliceToSink](source, start, i, false);
        this[_addSliceToSink](C97 || CT.C97, 0, 1, false);
        start = dart.notNull(i) + 1;
      }
    }
    if (dart.notNull(start) < dart.notNull(end)) {
      this[_addSliceToSink](source, start, end, isLast);
    }
    if (dart.test(isLast)) {
      this.close();
    }
  }
};
(convert._Latin1AllowInvalidDecoderSink.new = function(sink) {
  if (sink == null) dart.nullFailed(L95, 161, 55, "sink");
  convert._Latin1AllowInvalidDecoderSink.__proto__.new.call(this, sink);
  ;
}).prototype = convert._Latin1AllowInvalidDecoderSink.prototype;
dart.addTypeTests(convert._Latin1AllowInvalidDecoderSink);
dart.addTypeCaches(convert._Latin1AllowInvalidDecoderSink);
dart.setLibraryUri(convert._Latin1AllowInvalidDecoderSink, L31);
convert.LineSplitter = class LineSplitter extends async.StreamTransformerBase$(core.String, core.String) {
  static split(lines, start = 0, end = null) {
    if (lines == null) dart.nullFailed(L96, 28, 40, "lines");
    if (start == null) dart.nullFailed(L96, 28, 52, "start");
    return new (SyncIterableOfString()).new(() => (function* split(end) {
      end = core.RangeError.checkValidRange(start, end, lines.length);
      if (end == null) {
        dart.throw(new core.RangeError.new("Invalid range"));
      }
      let sliceStart = start;
      let char = 0;
      for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
        let previousChar = char;
        char = lines[$codeUnitAt](i);
        if (char !== 13) {
          if (char !== 10) continue;
          if (previousChar === 13) {
            sliceStart = dart.notNull(i) + 1;
            continue;
          }
        }
        yield lines[$substring](sliceStart, i);
        sliceStart = dart.notNull(i) + 1;
      }
      if (dart.notNull(sliceStart) < dart.notNull(end)) {
        yield lines[$substring](sliceStart, end);
      }
    })(end));
  }
  convert(data) {
    if (data == null) dart.nullFailed(L96, 54, 31, "data");
    let lines = JSArrayOfString().of([]);
    let end = data.length;
    let sliceStart = 0;
    let char = 0;
    for (let i = 0; i < end; i = i + 1) {
      let previousChar = char;
      char = data[$codeUnitAt](i);
      if (char !== 13) {
        if (char !== 10) continue;
        if (previousChar === 13) {
          sliceStart = i + 1;
          continue;
        }
      }
      lines[$add](data[$substring](sliceStart, i));
      sliceStart = i + 1;
    }
    if (sliceStart < end) {
      lines[$add](data[$substring](sliceStart, end));
    }
    return lines;
  }
  startChunkedConversion(sink) {
    if (sink == null) dart.nullFailed(L96, 78, 60, "sink");
    return new convert._LineSplitterSink.new(convert.StringConversionSink.is(sink) ? sink : new convert._StringAdapterSink.new(sink));
  }
  bind(stream) {
    StreamOfString().as(stream);
    if (stream == null) dart.nullFailed(L96, 83, 38, "stream");
    return StreamOfString().eventTransformed(stream, dart.fn(sink => {
      if (sink == null) dart.nullFailed(L96, 85, 36, "sink");
      return new convert._LineSplitterEventSink.new(sink);
    }, EventSinkOfStringTo_LineSplitterEventSink()));
  }
};
(convert.LineSplitter.new = function() {
  convert.LineSplitter.__proto__.new.call(this);
  ;
}).prototype = convert.LineSplitter.prototype;
dart.addTypeTests(convert.LineSplitter);
dart.addTypeCaches(convert.LineSplitter);
dart.setMethodSignature(convert.LineSplitter, () => ({
  __proto__: dart.getMethods(convert.LineSplitter.__proto__),
  convert: dart.fnType(core.List$(core.String), [core.String]),
  startChunkedConversion: dart.fnType(convert.StringConversionSink, [core.Sink$(core.String)]),
  bind: dart.fnType(async.Stream$(core.String), [dart.nullable(core.Object)])
}));
dart.setLibraryUri(convert.LineSplitter, L31);
var _carry = dart.privateName(convert, "_carry");
var _skipLeadingLF = dart.privateName(convert, "_skipLeadingLF");
var _addLines = dart.privateName(convert, "_addLines");
convert._LineSplitterSink = class _LineSplitterSink extends convert.StringConversionSinkBase {
  addSlice(chunk, start, end, isLast) {
    if (chunk == null) dart.nullFailed(L96, 109, 24, "chunk");
    if (start == null) dart.nullFailed(L96, 109, 35, "start");
    if (end == null) dart.nullFailed(L96, 109, 46, "end");
    if (isLast == null) dart.nullFailed(L96, 109, 56, "isLast");
    end = core.RangeError.checkValidRange(start, end, chunk.length);
    if (dart.notNull(start) >= dart.notNull(end)) {
      if (dart.test(isLast)) this.close();
      return;
    }
    let carry = this[_carry];
    if (carry != null) {
      if (!!dart.test(this[_skipLeadingLF])) dart.assertFailed(null, L96, 119, 14, "!_skipLeadingLF");
      chunk = dart.notNull(carry) + chunk[$substring](start, end);
      start = 0;
      end = chunk.length;
      this[_carry] = null;
    } else if (dart.test(this[_skipLeadingLF])) {
      if (chunk[$codeUnitAt](start) === 10) {
        start = dart.notNull(start) + 1;
      }
      this[_skipLeadingLF] = false;
    }
    this[_addLines](chunk, start, end);
    if (dart.test(isLast)) this.close();
  }
  close() {
    if (this[_carry] != null) {
      this[_sink$0].add(dart.nullCheck(this[_carry]));
      this[_carry] = null;
    }
    this[_sink$0].close();
  }
  [_addLines](lines, start, end) {
    if (lines == null) dart.nullFailed(L96, 142, 25, "lines");
    if (start == null) dart.nullFailed(L96, 142, 36, "start");
    if (end == null) dart.nullFailed(L96, 142, 47, "end");
    let sliceStart = start;
    let char = 0;
    for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
      let previousChar = char;
      char = lines[$codeUnitAt](i);
      if (char !== 13) {
        if (char !== 10) continue;
        if (previousChar === 13) {
          sliceStart = dart.notNull(i) + 1;
          continue;
        }
      }
      this[_sink$0].add(lines[$substring](sliceStart, i));
      sliceStart = dart.notNull(i) + 1;
    }
    if (dart.notNull(sliceStart) < dart.notNull(end)) {
      this[_carry] = lines[$substring](sliceStart, end);
    } else {
      this[_skipLeadingLF] = char === 13;
    }
  }
};
(convert._LineSplitterSink.new = function(_sink) {
  if (_sink == null) dart.nullFailed(L96, 107, 26, "_sink");
  this[_carry] = null;
  this[_skipLeadingLF] = false;
  this[_sink$0] = _sink;
  ;
}).prototype = convert._LineSplitterSink.prototype;
dart.addTypeTests(convert._LineSplitterSink);
dart.addTypeCaches(convert._LineSplitterSink);
dart.setMethodSignature(convert._LineSplitterSink, () => ({
  __proto__: dart.getMethods(convert._LineSplitterSink.__proto__),
  addSlice: dart.fnType(dart.void, [core.String, core.int, core.int, core.bool]),
  close: dart.fnType(dart.void, []),
  [_addLines]: dart.fnType(dart.void, [core.String, core.int, core.int])
}));
dart.setLibraryUri(convert._LineSplitterSink, L31);
dart.setFieldSignature(convert._LineSplitterSink, () => ({
  __proto__: dart.getFields(convert._LineSplitterSink.__proto__),
  [_sink$0]: dart.finalFieldType(convert.StringConversionSink),
  [_carry]: dart.fieldType(dart.nullable(core.String)),
  [_skipLeadingLF]: dart.fieldType(core.bool)
}));
convert._LineSplitterEventSink = class _LineSplitterEventSink extends convert._LineSplitterSink {
  addError(o, stackTrace = null) {
    if (o == null) dart.nullFailed(L96, 174, 24, "o");
    this[_eventSink].addError(o, stackTrace);
  }
};
(convert._LineSplitterEventSink.new = function(eventSink) {
  if (eventSink == null) dart.nullFailed(L96, 170, 44, "eventSink");
  this[_eventSink] = eventSink;
  convert._LineSplitterEventSink.__proto__.new.call(this, new convert._StringAdapterSink.new(eventSink));
  ;
}).prototype = convert._LineSplitterEventSink.prototype;
dart.addTypeTests(convert._LineSplitterEventSink);
dart.addTypeCaches(convert._LineSplitterEventSink);
convert._LineSplitterEventSink[dart.implements] = () => [async.EventSink$(core.String)];
dart.setMethodSignature(convert._LineSplitterEventSink, () => ({
  __proto__: dart.getMethods(convert._LineSplitterEventSink.__proto__),
  addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)])
}));
dart.setLibraryUri(convert._LineSplitterEventSink, L31);
dart.setFieldSignature(convert._LineSplitterEventSink, () => ({
  __proto__: dart.getFields(convert._LineSplitterEventSink.__proto__),
  [_eventSink]: dart.finalFieldType(async.EventSink$(core.String))
}));
convert.StringConversionSink = class StringConversionSink extends convert.ChunkedConversionSink$(core.String) {};
(convert.StringConversionSink.new = function() {
  convert.StringConversionSink.__proto__.new.call(this);
  ;
}).prototype = convert.StringConversionSink.prototype;
dart.addTypeTests(convert.StringConversionSink);
dart.addTypeCaches(convert.StringConversionSink);
dart.setLibraryUri(convert.StringConversionSink, L31);
core.StringSink = class StringSink extends core.Object {};
(core.StringSink.new = function() {
  ;
}).prototype = core.StringSink.prototype;
dart.addTypeTests(core.StringSink);
dart.addTypeCaches(core.StringSink);
dart.setLibraryUri(core.StringSink, L8$);
convert.ClosableStringSink = class ClosableStringSink extends core.StringSink {};
dart.addTypeTests(convert.ClosableStringSink);
dart.addTypeCaches(convert.ClosableStringSink);
dart.setLibraryUri(convert.ClosableStringSink, L31);
convert._ClosableStringSink = class _ClosableStringSink extends core.Object {
  close() {
    this[_callback$]();
  }
  writeCharCode(charCode) {
    if (charCode == null) dart.nullFailed(L85, 78, 26, "charCode");
    this[_sink$0].writeCharCode(charCode);
  }
  write(o) {
    this[_sink$0].write(o);
  }
  writeln(o = "") {
    this[_sink$0].writeln(o);
  }
  writeAll(objects, separator = "") {
    if (objects == null) dart.nullFailed(L85, 90, 26, "objects");
    if (separator == null) dart.nullFailed(L85, 90, 43, "separator");
    this[_sink$0].writeAll(objects, separator);
  }
};
(convert._ClosableStringSink.new = function(_sink, _callback) {
  if (_sink == null) dart.nullFailed(L85, 72, 28, "_sink");
  if (_callback == null) dart.nullFailed(L85, 72, 40, "_callback");
  this[_sink$0] = _sink;
  this[_callback$] = _callback;
  ;
}).prototype = convert._ClosableStringSink.prototype;
dart.addTypeTests(convert._ClosableStringSink);
dart.addTypeCaches(convert._ClosableStringSink);
convert._ClosableStringSink[dart.implements] = () => [convert.ClosableStringSink];
dart.setMethodSignature(convert._ClosableStringSink, () => ({
  __proto__: dart.getMethods(convert._ClosableStringSink.__proto__),
  close: dart.fnType(dart.void, []),
  writeCharCode: dart.fnType(dart.void, [core.int]),
  write: dart.fnType(dart.void, [dart.nullable(core.Object)]),
  writeln: dart.fnType(dart.void, [], [dart.nullable(core.Object)]),
  writeAll: dart.fnType(dart.void, [core.Iterable], [core.String])
}));
dart.setLibraryUri(convert._ClosableStringSink, L31);
dart.setFieldSignature(convert._ClosableStringSink, () => ({
  __proto__: dart.getFields(convert._ClosableStringSink.__proto__),
  [_callback$]: dart.finalFieldType(dart.fnType(dart.void, [])),
  [_sink$0]: dart.finalFieldType(core.StringSink)
}));
var _flush = dart.privateName(convert, "_flush");
convert._StringConversionSinkAsStringSinkAdapter = class _StringConversionSinkAsStringSinkAdapter extends core.Object {
  close() {
    if (dart.test(this[_buffer$].isNotEmpty)) this[_flush]();
    this[_chunkedSink$].close();
  }
  writeCharCode(charCode) {
    if (charCode == null) dart.nullFailed(L85, 113, 26, "charCode");
    this[_buffer$].writeCharCode(charCode);
    if (dart.notNull(this[_buffer$].length) > 16) this[_flush]();
  }
  write(o) {
    if (dart.test(this[_buffer$].isNotEmpty)) this[_flush]();
    this[_chunkedSink$].add(dart.toString(o));
  }
  writeln(o = "") {
    this[_buffer$].writeln(o);
    if (dart.notNull(this[_buffer$].length) > 16) this[_flush]();
  }
  writeAll(objects, separator = "") {
    if (objects == null) dart.nullFailed(L85, 128, 26, "objects");
    if (separator == null) dart.nullFailed(L85, 128, 43, "separator");
    if (dart.test(this[_buffer$].isNotEmpty)) this[_flush]();
    let iterator = objects[$iterator];
    if (!dart.test(iterator.moveNext())) return;
    if (separator[$isEmpty]) {
      do {
        this[_chunkedSink$].add(dart.toString(iterator.current));
      } while (dart.test(iterator.moveNext()));
    } else {
      this[_chunkedSink$].add(dart.toString(iterator.current));
      while (dart.test(iterator.moveNext())) {
        this.write(separator);
        this[_chunkedSink$].add(dart.toString(iterator.current));
      }
    }
  }
  [_flush]() {
    let accumulated = dart.toString(this[_buffer$]);
    this[_buffer$].clear();
    this[_chunkedSink$].add(accumulated);
  }
};
(convert._StringConversionSinkAsStringSinkAdapter.new = function(_chunkedSink) {
  if (_chunkedSink == null) dart.nullFailed(L85, 105, 49, "_chunkedSink");
  this[_chunkedSink$] = _chunkedSink;
  this[_buffer$] = new core.StringBuffer.new();
  ;
}).prototype = convert._StringConversionSinkAsStringSinkAdapter.prototype;
dart.addTypeTests(convert._StringConversionSinkAsStringSinkAdapter);
dart.addTypeCaches(convert._StringConversionSinkAsStringSinkAdapter);
convert._StringConversionSinkAsStringSinkAdapter[dart.implements] = () => [convert.ClosableStringSink];
dart.setMethodSignature(convert._StringConversionSinkAsStringSinkAdapter, () => ({
  __proto__: dart.getMethods(convert._StringConversionSinkAsStringSinkAdapter.__proto__),
  close: dart.fnType(dart.void, []),
  writeCharCode: dart.fnType(dart.void, [core.int]),
  write: dart.fnType(dart.void, [dart.nullable(core.Object)]),
  writeln: dart.fnType(dart.void, [], [dart.nullable(core.Object)]),
  writeAll: dart.fnType(dart.void, [core.Iterable], [core.String]),
  [_flush]: dart.fnType(dart.void, [])
}));
dart.setLibraryUri(convert._StringConversionSinkAsStringSinkAdapter, L31);
dart.setFieldSignature(convert._StringConversionSinkAsStringSinkAdapter, () => ({
  __proto__: dart.getFields(convert._StringConversionSinkAsStringSinkAdapter.__proto__),
  [_buffer$]: dart.finalFieldType(core.StringBuffer),
  [_chunkedSink$]: dart.finalFieldType(convert.StringConversionSink)
}));
dart.defineLazy(convert._StringConversionSinkAsStringSinkAdapter, {
  /*convert._StringConversionSinkAsStringSinkAdapter._MIN_STRING_SIZE*/get _MIN_STRING_SIZE() {
    return 16;
  }
}, false);
convert._StringCallbackSink = class _StringCallbackSink extends convert._StringSinkConversionSink$(core.StringBuffer) {
  close() {
    let t160;
    let accumulated = dart.toString(this[_stringSink$]);
    this[_stringSink$].clear();
    t160 = accumulated;
    this[_callback$](t160);
  }
  asUtf8Sink(allowMalformed) {
    if (allowMalformed == null) dart.nullFailed(L85, 222, 38, "allowMalformed");
    return new convert._Utf8StringSinkAdapter.new(this, this[_stringSink$], allowMalformed);
  }
};
(convert._StringCallbackSink.new = function(_callback) {
  if (_callback == null) dart.nullFailed(L85, 214, 28, "_callback");
  this[_callback$] = _callback;
  convert._StringCallbackSink.__proto__.new.call(this, new core.StringBuffer.new());
  ;
}).prototype = convert._StringCallbackSink.prototype;
dart.addTypeTests(convert._StringCallbackSink);
dart.addTypeCaches(convert._StringCallbackSink);
dart.setLibraryUri(convert._StringCallbackSink, L31);
dart.setFieldSignature(convert._StringCallbackSink, () => ({
  __proto__: dart.getFields(convert._StringCallbackSink.__proto__),
  [_callback$]: dart.finalFieldType(dart.fnType(dart.void, [core.String]))
}));
convert._StringAdapterSink = class _StringAdapterSink extends convert.StringConversionSinkBase {
  add(str) {
    core.String.as(str);
    if (str == null) dart.nullFailed(L85, 237, 19, "str");
    this[_sink$0].add(str);
  }
  addSlice(str, start, end, isLast) {
    if (str == null) dart.nullFailed(L85, 241, 24, "str");
    if (start == null) dart.nullFailed(L85, 241, 33, "start");
    if (end == null) dart.nullFailed(L85, 241, 44, "end");
    if (isLast == null) dart.nullFailed(L85, 241, 54, "isLast");
    if (start === 0 && end === str.length) {
      this.add(str);
    } else {
      this.add(str[$substring](start, end));
    }
    if (dart.test(isLast)) this.close();
  }
  close() {
    this[_sink$0].close();
  }
};
(convert._StringAdapterSink.new = function(_sink) {
  if (_sink == null) dart.nullFailed(L85, 235, 27, "_sink");
  this[_sink$0] = _sink;
  ;
}).prototype = convert._StringAdapterSink.prototype;
dart.addTypeTests(convert._StringAdapterSink);
dart.addTypeCaches(convert._StringAdapterSink);
dart.setMethodSignature(convert._StringAdapterSink, () => ({
  __proto__: dart.getMethods(convert._StringAdapterSink.__proto__),
  addSlice: dart.fnType(dart.void, [core.String, core.int, core.int, core.bool]),
  close: dart.fnType(dart.void, [])
}));
dart.setLibraryUri(convert._StringAdapterSink, L31);
dart.setFieldSignature(convert._StringAdapterSink, () => ({
  __proto__: dart.getFields(convert._StringAdapterSink.__proto__),
  [_sink$0]: dart.finalFieldType(core.Sink$(core.String))
}));
convert._Utf8StringSinkAdapter = class _Utf8StringSinkAdapter extends convert.ByteConversionSink {
  close() {
    this[_decoder].flush(this[_stringSink$]);
    this[_sink$0].close();
  }
  add(chunk) {
    ListOfint().as(chunk);
    if (chunk == null) dart.nullFailed(L85, 271, 22, "chunk");
    this.addSlice(chunk, 0, chunk[$length], false);
  }
  addSlice(codeUnits, startIndex, endIndex, isLast) {
    if (codeUnits == null) dart.nullFailed(L85, 276, 17, "codeUnits");
    if (startIndex == null) dart.nullFailed(L85, 276, 32, "startIndex");
    if (endIndex == null) dart.nullFailed(L85, 276, 48, "endIndex");
    if (isLast == null) dart.nullFailed(L85, 276, 63, "isLast");
    this[_stringSink$].write(this[_decoder].convertChunked(codeUnits, startIndex, endIndex));
    if (dart.test(isLast)) this.close();
  }
};
(convert._Utf8StringSinkAdapter.new = function(_sink, _stringSink, allowMalformed) {
  if (_sink == null) dart.nullFailed(L85, 263, 31, "_sink");
  if (_stringSink == null) dart.nullFailed(L85, 263, 43, "_stringSink");
  if (allowMalformed == null) dart.nullFailed(L85, 263, 61, "allowMalformed");
  this[_sink$0] = _sink;
  this[_stringSink$] = _stringSink;
  this[_decoder] = new convert._Utf8Decoder.new(allowMalformed);
  convert._Utf8StringSinkAdapter.__proto__.new.call(this);
  ;
}).prototype = convert._Utf8StringSinkAdapter.prototype;
dart.addTypeTests(convert._Utf8StringSinkAdapter);
dart.addTypeCaches(convert._Utf8StringSinkAdapter);
dart.setMethodSignature(convert._Utf8StringSinkAdapter, () => ({
  __proto__: dart.getMethods(convert._Utf8StringSinkAdapter.__proto__),
  close: dart.fnType(dart.void, []),
  add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
  addSlice: dart.fnType(dart.void, [core.List$(core.int), core.int, core.int, core.bool])
}));
dart.setLibraryUri(convert._Utf8StringSinkAdapter, L31);
dart.setFieldSignature(convert._Utf8StringSinkAdapter, () => ({
  __proto__: dart.getFields(convert._Utf8StringSinkAdapter.__proto__),
  [_decoder]: dart.finalFieldType(convert._Utf8Decoder),
  [_sink$0]: dart.finalFieldType(core.Sink$(dart.nullable(core.Object))),
  [_stringSink$]: dart.finalFieldType(core.StringSink)
}));
convert._Utf8ConversionSink = class _Utf8ConversionSink extends convert.ByteConversionSink {
  close() {
    this[_decoder].flush(this[_buffer$]);
    if (dart.test(this[_buffer$].isNotEmpty)) {
      let accumulated = dart.toString(this[_buffer$]);
      this[_buffer$].clear();
      this[_chunkedSink$].addSlice(accumulated, 0, accumulated.length, true);
    } else {
      this[_chunkedSink$].close();
    }
  }
  add(chunk) {
    ListOfint().as(chunk);
    if (chunk == null) dart.nullFailed(L85, 309, 22, "chunk");
    this.addSlice(chunk, 0, chunk[$length], false);
  }
  addSlice(chunk, startIndex, endIndex, isLast) {
    if (chunk == null) dart.nullFailed(L85, 313, 27, "chunk");
    if (startIndex == null) dart.nullFailed(L85, 313, 38, "startIndex");
    if (endIndex == null) dart.nullFailed(L85, 313, 54, "endIndex");
    if (isLast == null) dart.nullFailed(L85, 313, 69, "isLast");
    this[_buffer$].write(this[_decoder].convertChunked(chunk, startIndex, endIndex));
    if (dart.test(this[_buffer$].isNotEmpty)) {
      let accumulated = dart.toString(this[_buffer$]);
      this[_chunkedSink$].addSlice(accumulated, 0, accumulated.length, isLast);
      this[_buffer$].clear();
      return;
    }
    if (dart.test(isLast)) this.close();
  }
};
(convert._Utf8ConversionSink.new = function(sink, allowMalformed) {
  if (sink == null) dart.nullFailed(L85, 290, 44, "sink");
  if (allowMalformed == null) dart.nullFailed(L85, 290, 55, "allowMalformed");
  convert._Utf8ConversionSink.__.call(this, sink, new core.StringBuffer.new(), allowMalformed);
}).prototype = convert._Utf8ConversionSink.prototype;
(convert._Utf8ConversionSink.__ = function(_chunkedSink, stringBuffer, allowMalformed) {
  if (_chunkedSink == null) dart.nullFailed(L85, 294, 12, "_chunkedSink");
  if (stringBuffer == null) dart.nullFailed(L85, 294, 39, "stringBuffer");
  if (allowMalformed == null) dart.nullFailed(L85, 294, 58, "allowMalformed");
  this[_chunkedSink$] = _chunkedSink;
  this[_decoder] = new convert._Utf8Decoder.new(allowMalformed);
  this[_buffer$] = stringBuffer;
  convert._Utf8ConversionSink.__proto__.new.call(this);
  ;
}).prototype = convert._Utf8ConversionSink.prototype;
dart.addTypeTests(convert._Utf8ConversionSink);
dart.addTypeCaches(convert._Utf8ConversionSink);
dart.setMethodSignature(convert._Utf8ConversionSink, () => ({
  __proto__: dart.getMethods(convert._Utf8ConversionSink.__proto__),
  close: dart.fnType(dart.void, []),
  add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
  addSlice: dart.fnType(dart.void, [core.List$(core.int), core.int, core.int, core.bool])
}));
dart.setLibraryUri(convert._Utf8ConversionSink, L31);
dart.setFieldSignature(convert._Utf8ConversionSink, () => ({
  __proto__: dart.getFields(convert._Utf8ConversionSink.__proto__),
  [_decoder]: dart.finalFieldType(convert._Utf8Decoder),
  [_chunkedSink$]: dart.finalFieldType(convert.StringConversionSink),
  [_buffer$]: dart.finalFieldType(core.StringBuffer)
}));
var _allowMalformed = dart.privateName(convert, "_allowMalformed");
var Utf8Decoder__allowMalformed = dart.privateName(convert, "Utf8Decoder._allowMalformed");
var C98;
var C99;
var C100;
var _allowMalformed$ = dart.privateName(convert, "Utf8Codec._allowMalformed");
convert.Utf8Codec = class Utf8Codec extends convert.Encoding {
  get [_allowMalformed]() {
    return this[_allowMalformed$];
  }
  set [_allowMalformed](value) {
    super[_allowMalformed] = value;
  }
  get name() {
    return "utf-8";
  }
  decode(codeUnits, opts) {
    let t160;
    ListOfint().as(codeUnits);
    if (codeUnits == null) dart.nullFailed(L97, 57, 27, "codeUnits");
    let allowMalformed = opts && 'allowMalformed' in opts ? opts.allowMalformed : null;
    let decoder = dart.test((t160 = allowMalformed, t160 == null ? this[_allowMalformed] : t160)) ? C98 || CT.C98 : C99 || CT.C99;
    return decoder.convert(codeUnits);
  }
  get encoder() {
    return C100 || CT.C100;
  }
  get decoder() {
    return dart.test(this[_allowMalformed]) ? C98 || CT.C98 : C99 || CT.C99;
  }
};
(convert.Utf8Codec.new = function(opts) {
  let allowMalformed = opts && 'allowMalformed' in opts ? opts.allowMalformed : false;
  if (allowMalformed == null) dart.nullFailed(L97, 39, 25, "allowMalformed");
  this[_allowMalformed$] = allowMalformed;
  convert.Utf8Codec.__proto__.new.call(this);
  ;
}).prototype = convert.Utf8Codec.prototype;
dart.addTypeTests(convert.Utf8Codec);
dart.addTypeCaches(convert.Utf8Codec);
dart.setMethodSignature(convert.Utf8Codec, () => ({
  __proto__: dart.getMethods(convert.Utf8Codec.__proto__),
  decode: dart.fnType(core.String, [dart.nullable(core.Object)], {allowMalformed: dart.nullable(core.bool)}, {})
}));
dart.setGetterSignature(convert.Utf8Codec, () => ({
  __proto__: dart.getGetters(convert.Utf8Codec.__proto__),
  name: core.String,
  encoder: convert.Utf8Encoder,
  decoder: convert.Utf8Decoder
}));
dart.setLibraryUri(convert.Utf8Codec, L31);
dart.setFieldSignature(convert.Utf8Codec, () => ({
  __proto__: dart.getFields(convert.Utf8Codec.__proto__),
  [_allowMalformed]: dart.finalFieldType(core.bool)
}));
var _fillBuffer = dart.privateName(convert, "_fillBuffer");
var _writeReplacementCharacter = dart.privateName(convert, "_writeReplacementCharacter");
convert.Utf8Encoder = class Utf8Encoder extends convert.Converter$(core.String, core.List$(core.int)) {
  convert(string, start = 0, end = null) {
    core.String.as(string);
    if (string == null) dart.nullFailed(L97, 87, 28, "string");
    if (start == null) dart.nullFailed(L97, 87, 41, "start");
    let stringLength = string.length;
    end = core.RangeError.checkValidRange(start, end, stringLength);
    if (end == null) {
      dart.throw(new core.RangeError.new("Invalid range"));
    }
    let length = dart.notNull(end) - dart.notNull(start);
    if (length === 0) return _native_typed_data.NativeUint8List.new(0);
    let encoder = new convert._Utf8Encoder.withBufferSize(length * 3);
    let endPosition = encoder[_fillBuffer](string, start, end);
    if (!(dart.notNull(endPosition) >= dart.notNull(end) - 1)) dart.assertFailed(null, L97, 100, 12, "endPosition >= end - 1");
    if (endPosition != end) {
      let lastCodeUnit = string[$codeUnitAt](dart.notNull(end) - 1);
      if (!dart.test(convert._isLeadSurrogate(lastCodeUnit))) dart.assertFailed(null, L97, 106, 14, "_isLeadSurrogate(lastCodeUnit)");
      encoder[_writeReplacementCharacter]();
    }
    return encoder[_buffer$][$sublist](0, encoder[_bufferIndex]);
  }
  startChunkedConversion(sink) {
    SinkOfListOfint().as(sink);
    if (sink == null) dart.nullFailed(L97, 117, 63, "sink");
    return new convert._Utf8EncoderSink.new(convert.ByteConversionSink.is(sink) ? sink : new convert._ByteAdapterSink.new(sink));
  }
  bind(stream) {
    StreamOfString().as(stream);
    if (stream == null) dart.nullFailed(L97, 123, 41, "stream");
    return super.bind(stream);
  }
};
(convert.Utf8Encoder.new = function() {
  convert.Utf8Encoder.__proto__.new.call(this);
  ;
}).prototype = convert.Utf8Encoder.prototype;
dart.addTypeTests(convert.Utf8Encoder);
dart.addTypeCaches(convert.Utf8Encoder);
dart.setMethodSignature(convert.Utf8Encoder, () => ({
  __proto__: dart.getMethods(convert.Utf8Encoder.__proto__),
  convert: dart.fnType(typed_data.Uint8List, [dart.nullable(core.Object)], [core.int, dart.nullable(core.int)]),
  startChunkedConversion: dart.fnType(convert.StringConversionSink, [dart.nullable(core.Object)])
}));
dart.setLibraryUri(convert.Utf8Encoder, L31);
var _writeSurrogate = dart.privateName(convert, "_writeSurrogate");
convert._Utf8Encoder = class _Utf8Encoder extends core.Object {
  static _createBuffer(size) {
    if (size == null) dart.nullFailed(L97, 141, 38, "size");
    return _native_typed_data.NativeUint8List.new(size);
  }
  [_writeReplacementCharacter]() {
    let t160, t160$, t160$0;
    this[_buffer$][$_set]((t160 = this[_bufferIndex], this[_bufferIndex] = dart.notNull(t160) + 1, t160), 239);
    this[_buffer$][$_set]((t160$ = this[_bufferIndex], this[_bufferIndex] = dart.notNull(t160$) + 1, t160$), 191);
    this[_buffer$][$_set]((t160$0 = this[_bufferIndex], this[_bufferIndex] = dart.notNull(t160$0) + 1, t160$0), 189);
  }
  [_writeSurrogate](leadingSurrogate, nextCodeUnit) {
    let t160, t160$, t160$0, t160$1;
    if (leadingSurrogate == null) dart.nullFailed(L97, 159, 28, "leadingSurrogate");
    if (nextCodeUnit == null) dart.nullFailed(L97, 159, 50, "nextCodeUnit");
    if (dart.test(convert._isTailSurrogate(nextCodeUnit))) {
      let rune = convert._combineSurrogatePair(leadingSurrogate, nextCodeUnit);
      if (!(dart.notNull(rune) > 65535)) dart.assertFailed(null, L97, 164, 14, "rune > _THREE_BYTE_LIMIT");
      if (!(dart.notNull(rune) <= 1114111)) dart.assertFailed(null, L97, 165, 14, "rune <= _FOUR_BYTE_LIMIT");
      this[_buffer$][$_set]((t160 = this[_bufferIndex], this[_bufferIndex] = dart.notNull(t160) + 1, t160), (240 | rune[$rightShift](18)) >>> 0);
      this[_buffer$][$_set]((t160$ = this[_bufferIndex], this[_bufferIndex] = dart.notNull(t160$) + 1, t160$), 128 | dart.notNull(rune) >> 12 & 63);
      this[_buffer$][$_set]((t160$0 = this[_bufferIndex], this[_bufferIndex] = dart.notNull(t160$0) + 1, t160$0), 128 | dart.notNull(rune) >> 6 & 63);
      this[_buffer$][$_set]((t160$1 = this[_bufferIndex], this[_bufferIndex] = dart.notNull(t160$1) + 1, t160$1), 128 | dart.notNull(rune) & 63);
      return true;
    } else {
      this[_writeReplacementCharacter]();
      return false;
    }
  }
  [_fillBuffer](str, start, end) {
    let t161, t161$, t161$0, t161$1, t161$2, t161$3;
    if (str == null) dart.nullFailed(L97, 185, 26, "str");
    if (start == null) dart.nullFailed(L97, 185, 35, "start");
    if (end == null) dart.nullFailed(L97, 185, 46, "end");
    if (start != end && dart.test(convert._isLeadSurrogate(str[$codeUnitAt](dart.notNull(end) - 1)))) {
      end = dart.notNull(end) - 1;
    }
    let stringIndex = null;
    for (let t160 = stringIndex = start; dart.notNull(stringIndex) < dart.notNull(end); stringIndex = dart.notNull(stringIndex) + 1) {
      let codeUnit = str[$codeUnitAt](stringIndex);
      if (codeUnit <= 127) {
        if (dart.notNull(this[_bufferIndex]) >= dart.notNull(this[_buffer$][$length])) break;
        this[_buffer$][$_set]((t161 = this[_bufferIndex], this[_bufferIndex] = dart.notNull(t161) + 1, t161), codeUnit);
      } else if (dart.test(convert._isLeadSurrogate(codeUnit))) {
        if (dart.notNull(this[_bufferIndex]) + 4 > dart.notNull(this[_buffer$][$length])) break;
        let nextCodeUnit = str[$codeUnitAt](dart.notNull(stringIndex) + 1);
        let wasCombined = this[_writeSurrogate](codeUnit, nextCodeUnit);
        if (dart.test(wasCombined)) stringIndex = dart.notNull(stringIndex) + 1;
      } else if (dart.test(convert._isTailSurrogate(codeUnit))) {
        if (dart.notNull(this[_bufferIndex]) + 3 > dart.notNull(this[_buffer$][$length])) break;
        this[_writeReplacementCharacter]();
      } else {
        let rune = codeUnit;
        if (rune <= 2047) {
          if (dart.notNull(this[_bufferIndex]) + 1 >= dart.notNull(this[_buffer$][$length])) break;
          this[_buffer$][$_set]((t161$ = this[_bufferIndex], this[_bufferIndex] = dart.notNull(t161$) + 1, t161$), (192 | rune[$rightShift](6)) >>> 0);
          this[_buffer$][$_set]((t161$0 = this[_bufferIndex], this[_bufferIndex] = dart.notNull(t161$0) + 1, t161$0), 128 | rune & 63);
        } else {
          if (!(rune <= 65535)) dart.assertFailed(null, L97, 216, 18, "rune <= _THREE_BYTE_LIMIT");
          if (dart.notNull(this[_bufferIndex]) + 2 >= dart.notNull(this[_buffer$][$length])) break;
          this[_buffer$][$_set]((t161$1 = this[_bufferIndex], this[_bufferIndex] = dart.notNull(t161$1) + 1, t161$1), (224 | rune[$rightShift](12)) >>> 0);
          this[_buffer$][$_set]((t161$2 = this[_bufferIndex], this[_bufferIndex] = dart.notNull(t161$2) + 1, t161$2), 128 | rune >> 6 & 63);
          this[_buffer$][$_set]((t161$3 = this[_bufferIndex], this[_bufferIndex] = dart.notNull(t161$3) + 1, t161$3), 128 | rune & 63);
        }
      }
    }
    return stringIndex;
  }
};
(convert._Utf8Encoder.new = function() {
  convert._Utf8Encoder.withBufferSize.call(this, 1024);
}).prototype = convert._Utf8Encoder.prototype;
(convert._Utf8Encoder.withBufferSize = function(bufferSize) {
  if (bufferSize == null) dart.nullFailed(L97, 137, 35, "bufferSize");
  this[_carry] = 0;
  this[_bufferIndex] = 0;
  this[_buffer$] = convert._Utf8Encoder._createBuffer(bufferSize);
  ;
}).prototype = convert._Utf8Encoder.prototype;
dart.addTypeTests(convert._Utf8Encoder);
dart.addTypeCaches(convert._Utf8Encoder);
dart.setMethodSignature(convert._Utf8Encoder, () => ({
  __proto__: dart.getMethods(convert._Utf8Encoder.__proto__),
  [_writeReplacementCharacter]: dart.fnType(dart.void, []),
  [_writeSurrogate]: dart.fnType(core.bool, [core.int, core.int]),
  [_fillBuffer]: dart.fnType(core.int, [core.String, core.int, core.int])
}));
dart.setLibraryUri(convert._Utf8Encoder, L31);
dart.setFieldSignature(convert._Utf8Encoder, () => ({
  __proto__: dart.getFields(convert._Utf8Encoder.__proto__),
  [_carry]: dart.fieldType(core.int),
  [_bufferIndex]: dart.fieldType(core.int),
  [_buffer$]: dart.finalFieldType(typed_data.Uint8List)
}));
dart.defineLazy(convert._Utf8Encoder, {
  /*convert._Utf8Encoder._DEFAULT_BYTE_BUFFER_SIZE*/get _DEFAULT_BYTE_BUFFER_SIZE() {
    return 1024;
  }
}, false);
const _Utf8Encoder_StringConversionSinkMixin$36 = class _Utf8Encoder_StringConversionSinkMixin extends convert._Utf8Encoder {};
(_Utf8Encoder_StringConversionSinkMixin$36.new = function() {
  _Utf8Encoder_StringConversionSinkMixin$36.__proto__.new.call(this);
}).prototype = _Utf8Encoder_StringConversionSinkMixin$36.prototype;
(_Utf8Encoder_StringConversionSinkMixin$36.withBufferSize = function(bufferSize) {
  _Utf8Encoder_StringConversionSinkMixin$36.__proto__.withBufferSize.call(this, bufferSize);
}).prototype = _Utf8Encoder_StringConversionSinkMixin$36.prototype;
dart.applyMixin(_Utf8Encoder_StringConversionSinkMixin$36, convert.StringConversionSinkMixin);
convert._Utf8EncoderSink = class _Utf8EncoderSink extends _Utf8Encoder_StringConversionSinkMixin$36 {
  close() {
    if (this[_carry] !== 0) {
      this.addSlice("", 0, 0, true);
      return;
    }
    this[_sink$0].close();
  }
  addSlice(str, start, end, isLast) {
    if (str == null) dart.nullFailed(L97, 244, 24, "str");
    if (start == null) dart.nullFailed(L97, 244, 33, "start");
    if (end == null) dart.nullFailed(L97, 244, 44, "end");
    if (isLast == null) dart.nullFailed(L97, 244, 54, "isLast");
    this[_bufferIndex] = 0;
    if (start == end && !dart.test(isLast)) {
      return;
    }
    if (this[_carry] !== 0) {
      let nextCodeUnit = 0;
      if (start != end) {
        nextCodeUnit = str[$codeUnitAt](start);
      } else {
        if (!dart.test(isLast)) dart.assertFailed(null, L97, 256, 16, "isLast");
      }
      let wasCombined = this[_writeSurrogate](this[_carry], nextCodeUnit);
      if (!(!dart.test(wasCombined) || start != end)) dart.assertFailed(null, L97, 260, 14, "!wasCombined || start != end");
      if (dart.test(wasCombined)) start = dart.notNull(start) + 1;
      this[_carry] = 0;
    }
    do {
      start = this[_fillBuffer](str, start, end);
      let isLastSlice = dart.test(isLast) && start == end;
      if (start === dart.notNull(end) - 1 && dart.test(convert._isLeadSurrogate(str[$codeUnitAt](start)))) {
        if (dart.test(isLast) && dart.notNull(this[_bufferIndex]) < dart.notNull(this[_buffer$][$length]) - 3) {
          this[_writeReplacementCharacter]();
        } else {
          this[_carry] = str[$codeUnitAt](start);
        }
        start = dart.notNull(start) + 1;
      }
      this[_sink$0].addSlice(this[_buffer$], 0, this[_bufferIndex], isLastSlice);
      this[_bufferIndex] = 0;
    } while (dart.notNull(start) < dart.notNull(end));
    if (dart.test(isLast)) this.close();
  }
};
(convert._Utf8EncoderSink.new = function(_sink) {
  if (_sink == null) dart.nullFailed(L97, 233, 25, "_sink");
  this[_sink$0] = _sink;
  convert._Utf8EncoderSink.__proto__.new.call(this);
  ;
}).prototype = convert._Utf8EncoderSink.prototype;
dart.addTypeTests(convert._Utf8EncoderSink);
dart.addTypeCaches(convert._Utf8EncoderSink);
dart.setMethodSignature(convert._Utf8EncoderSink, () => ({
  __proto__: dart.getMethods(convert._Utf8EncoderSink.__proto__),
  close: dart.fnType(dart.void, []),
  addSlice: dart.fnType(dart.void, [core.String, core.int, core.int, core.bool])
}));
dart.setLibraryUri(convert._Utf8EncoderSink, L31);
dart.setFieldSignature(convert._Utf8EncoderSink, () => ({
  __proto__: dart.getFields(convert._Utf8EncoderSink.__proto__),
  [_sink$0]: dart.finalFieldType(convert.ByteConversionSink)
}));
convert.Utf8Decoder = class Utf8Decoder extends convert.Converter$(core.List$(core.int), core.String) {
  get [_allowMalformed]() {
    return this[_allowMalformed$0];
  }
  set [_allowMalformed](value) {
    super[_allowMalformed] = value;
  }
  static _convertInterceptedUint8List(allowMalformed, codeUnits, start, end) {
    if (allowMalformed == null) dart.nullFailed(L84, 433, 12, "allowMalformed");
    if (codeUnits == null) dart.nullFailed(L84, 433, 44, "codeUnits");
    if (start == null) dart.nullFailed(L84, 433, 59, "start");
    if (end == null) dart.nullFailed(L84, 433, 70, "end");
    let decoder = dart.test(allowMalformed) ? convert.Utf8Decoder._decoderNonfatal : convert.Utf8Decoder._decoder;
    if (decoder == null) return null;
    if (0 === start && end == codeUnits[$length]) {
      return convert.Utf8Decoder._useTextDecoder(decoder, codeUnits);
    }
    let length = codeUnits[$length];
    end = core.RangeError.checkValidRange(start, end, length);
    return convert.Utf8Decoder._useTextDecoder(decoder, codeUnits.subarray(start, end));
  }
  static _useTextDecoder(decoder, codeUnits) {
    if (codeUnits == null) dart.nullFailed(L84, 447, 59, "codeUnits");
    try {
      return decoder.decode(codeUnits);
    } catch (e$) {
      let e = dart.getThrown(e$);
      if (core.Object.is(e)) {
      } else
        throw e$;
    }
    return null;
  }
  convert(codeUnits, start = 0, end = null) {
    ListOfint().as(codeUnits);
    if (codeUnits == null) dart.nullFailed(L97, 313, 28, "codeUnits");
    if (start == null) dart.nullFailed(L97, 313, 44, "start");
    let result = convert.Utf8Decoder._convertIntercepted(this[_allowMalformed], codeUnits, start, end);
    if (result != null) {
      return result;
    }
    return new convert._Utf8Decoder.new(this[_allowMalformed]).convertSingle(codeUnits, start, end);
  }
  startChunkedConversion(sink) {
    SinkOfString().as(sink);
    if (sink == null) dart.nullFailed(L97, 328, 58, "sink");
    let stringSink = null;
    if (convert.StringConversionSink.is(sink)) {
      stringSink = sink;
    } else {
      stringSink = new convert._StringAdapterSink.new(sink);
    }
    return stringSink.asUtf8Sink(this[_allowMalformed]);
  }
  bind(stream) {
    StreamOfListOfint().as(stream);
    if (stream == null) dart.nullFailed(L97, 339, 41, "stream");
    return super.bind(stream);
  }
  fuse(T, next) {
    if (next == null) dart.nullFailed(L84, 398, 56, "next");
    return super.fuse(T, next);
  }
  static _convertIntercepted(allowMalformed, codeUnits, start, end) {
    if (allowMalformed == null) dart.nullFailed(L84, 405, 12, "allowMalformed");
    if (codeUnits == null) dart.nullFailed(L84, 405, 38, "codeUnits");
    if (start == null) dart.nullFailed(L84, 405, 53, "start");
    if (codeUnits instanceof Uint8Array) {
      let casted = codeUnits;
      end == null ? end = casted[$length] : null;
      if (dart.notNull(end) - dart.notNull(start) < 15) {
        return null;
      }
      let result = convert.Utf8Decoder._convertInterceptedUint8List(allowMalformed, casted, start, end);
      if (result != null && dart.test(allowMalformed)) {
        if (result.indexOf("�") >= 0) {
          return null;
        }
      }
      return result;
    }
    return null;
  }
};
(convert.Utf8Decoder.new = function(opts) {
  let allowMalformed = opts && 'allowMalformed' in opts ? opts.allowMalformed : false;
  if (allowMalformed == null) dart.nullFailed(L97, 302, 27, "allowMalformed");
  this[_allowMalformed$0] = allowMalformed;
  convert.Utf8Decoder.__proto__.new.call(this);
  ;
}).prototype = convert.Utf8Decoder.prototype;
dart.addTypeTests(convert.Utf8Decoder);
dart.addTypeCaches(convert.Utf8Decoder);
const _allowMalformed$0 = Utf8Decoder__allowMalformed;
dart.setMethodSignature(convert.Utf8Decoder, () => ({
  __proto__: dart.getMethods(convert.Utf8Decoder.__proto__),
  convert: dart.fnType(core.String, [dart.nullable(core.Object)], [core.int, dart.nullable(core.int)]),
  startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)]),
  fuse: dart.gFnType(T => [convert.Converter$(core.List$(core.int), T), [convert.Converter$(core.String, T)]], T => [dart.nullable(core.Object)])
}));
dart.setLibraryUri(convert.Utf8Decoder, L31);
dart.setFieldSignature(convert.Utf8Decoder, () => ({
  __proto__: dart.getFields(convert.Utf8Decoder.__proto__),
  [_allowMalformed]: dart.finalFieldType(core.bool)
}));
dart.defineLazy(convert.Utf8Decoder, {
  /*convert.Utf8Decoder._shortInputThreshold*/get _shortInputThreshold() {
    return 15;
  },
  /*convert.Utf8Decoder._decoder*/get _decoder() {
    return dart.fn(() => {
      try {
        return new TextDecoder("utf-8", {fatal: true});
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (core.Object.is(e)) {
        } else
          throw e$;
      }
      return null;
    }, VoidToObjectN())();
  },
  /*convert.Utf8Decoder._decoderNonfatal*/get _decoderNonfatal() {
    return dart.fn(() => {
      try {
        return new TextDecoder("utf-8", {fatal: false});
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (core.Object.is(e)) {
        } else
          throw e$;
      }
      return null;
    }, VoidToObjectN())();
  }
}, false);
var _charOrIndex = dart.privateName(convert, "_charOrIndex");
var _convertRecursive = dart.privateName(convert, "_convertRecursive");
convert._Utf8Decoder = class _Utf8Decoder extends core.Object {
  static isErrorState(state) {
    if (state == null) dart.nullFailed(L97, 498, 32, "state");
    return (dart.notNull(state) & 1) !== 0;
  }
  static errorDescription(state) {
    if (state == null) dart.nullFailed(L97, 500, 38, "state");
    switch (state) {
      case 65:
      {
        return "Missing extension byte";
      }
      case 67:
      {
        return "Unexpected extension byte";
      }
      case 69:
      {
        return "Invalid UTF-8 byte";
      }
      case 71:
      {
        return "Overlong encoding";
      }
      case 73:
      {
        return "Out of unicode range";
      }
      case 75:
      {
        return "Encoded surrogate";
      }
      case 77:
      {
        return "Unfinished UTF-8 octet sequence";
      }
      default:
      {
        return "";
      }
    }
  }
  convertSingle(codeUnits, start, maybeEnd) {
    if (codeUnits == null) dart.nullFailed(L84, 479, 34, "codeUnits");
    if (start == null) dart.nullFailed(L84, 479, 49, "start");
    return this.convertGeneral(codeUnits, start, maybeEnd, true);
  }
  convertChunked(codeUnits, start, maybeEnd) {
    if (codeUnits == null) dart.nullFailed(L84, 484, 35, "codeUnits");
    if (start == null) dart.nullFailed(L84, 484, 50, "start");
    return this.convertGeneral(codeUnits, start, maybeEnd, false);
  }
  convertGeneral(codeUnits, start, maybeEnd, single) {
    if (codeUnits == null) dart.nullFailed(L97, 528, 17, "codeUnits");
    if (start == null) dart.nullFailed(L97, 528, 32, "start");
    if (single == null) dart.nullFailed(L97, 528, 59, "single");
    let end = core.RangeError.checkValidRange(start, maybeEnd, codeUnits[$length]);
    if (start == end) return "";
    let bytes = null;
    let errorOffset = null;
    if (typed_data.Uint8List.is(codeUnits)) {
      bytes = codeUnits;
      errorOffset = 0;
    } else {
      bytes = convert._Utf8Decoder._makeUint8List(codeUnits, start, end);
      errorOffset = start;
      end = dart.notNull(end) - dart.notNull(start);
      start = 0;
    }
    let result = this[_convertRecursive](bytes, start, end, single);
    if (dart.test(convert._Utf8Decoder.isErrorState(this[_state$0]))) {
      let message = convert._Utf8Decoder.errorDescription(this[_state$0]);
      this[_state$0] = 0;
      dart.throw(new core.FormatException.new(message, codeUnits, dart.notNull(errorOffset) + dart.notNull(this[_charOrIndex])));
    }
    return result;
  }
  [_convertRecursive](bytes, start, end, single) {
    if (bytes == null) dart.nullFailed(L97, 555, 38, "bytes");
    if (start == null) dart.nullFailed(L97, 555, 49, "start");
    if (end == null) dart.nullFailed(L97, 555, 60, "end");
    if (single == null) dart.nullFailed(L97, 555, 70, "single");
    if (dart.notNull(end) - dart.notNull(start) > 1000) {
      let mid = ((dart.notNull(start) + dart.notNull(end)) / 2)[$truncate]();
      let s1 = this[_convertRecursive](bytes, start, mid, false);
      if (dart.test(convert._Utf8Decoder.isErrorState(this[_state$0]))) return s1;
      let s2 = this[_convertRecursive](bytes, mid, end, single);
      return dart.notNull(s1) + dart.notNull(s2);
    }
    return this.decodeGeneral(bytes, start, end, single);
  }
  flush(sink) {
    if (sink == null) dart.nullFailed(L97, 572, 25, "sink");
    let state = this[_state$0];
    this[_state$0] = 0;
    if (dart.notNull(state) <= 32) {
      return;
    }
    if (dart.test(this.allowMalformed)) {
      sink.writeCharCode(65533);
    } else {
      dart.throw(new core.FormatException.new(convert._Utf8Decoder.errorDescription(77), null, null));
    }
  }
  decodeGeneral(bytes, start, end, single) {
    let t164, t164$, t164$0, t164$1;
    if (bytes == null) dart.nullFailed(L97, 586, 34, "bytes");
    if (start == null) dart.nullFailed(L97, 586, 45, "start");
    if (end == null) dart.nullFailed(L97, 586, 56, "end");
    if (single == null) dart.nullFailed(L97, 586, 66, "single");
    let typeTable = convert._Utf8Decoder.typeTable;
    let transitionTable = convert._Utf8Decoder.transitionTable;
    let state = this[_state$0];
    let char = this[_charOrIndex];
    let buffer = new core.StringBuffer.new();
    let i = start;
    let byte = bytes[$_get]((t164 = i, i = dart.notNull(t164) + 1, t164));
    L1:
      while (true) {
        while (true) {
          let type = (typeTable[$codeUnitAt](byte) & 31) >>> 0;
          char = dart.notNull(state) <= 32 ? (dart.notNull(byte) & (61694)[$rightShift](type)) >>> 0 : (dart.notNull(byte) & 63 | dart.notNull(char) << 6 >>> 0) >>> 0;
          state = transitionTable[$codeUnitAt](dart.notNull(state) + type);
          if (state === 0) {
            buffer.writeCharCode(char);
            if (i == end) break L1;
            break;
          } else if (dart.test(convert._Utf8Decoder.isErrorState(state))) {
            if (dart.test(this.allowMalformed)) {
              switch (state) {
                case 69:
                case 67:
                {
                  buffer.writeCharCode(65533);
                  break;
                }
                case 65:
                {
                  buffer.writeCharCode(65533);
                  i = dart.notNull(i) - 1;
                  break;
                }
                default:
                {
                  buffer.writeCharCode(65533);
                  buffer.writeCharCode(65533);
                  break;
                }
              }
              state = 0;
            } else {
              this[_state$0] = state;
              this[_charOrIndex] = dart.notNull(i) - 1;
              return "";
            }
          }
          if (i == end) break L1;
          byte = bytes[$_get]((t164$ = i, i = dart.notNull(t164$) + 1, t164$));
        }
        let markStart = i;
        byte = bytes[$_get]((t164$0 = i, i = dart.notNull(t164$0) + 1, t164$0));
        if (dart.notNull(byte) < 128) {
          let markEnd = end;
          while (dart.notNull(i) < dart.notNull(end)) {
            byte = bytes[$_get]((t164$1 = i, i = dart.notNull(t164$1) + 1, t164$1));
            if (dart.notNull(byte) >= 128) {
              markEnd = dart.notNull(i) - 1;
              break;
            }
          }
          if (!(dart.notNull(markStart) < dart.notNull(markEnd))) dart.assertFailed(null, L97, 651, 16, "markStart < markEnd");
          if (dart.notNull(markEnd) - dart.notNull(markStart) < 20) {
            for (let m = markStart; dart.notNull(m) < dart.notNull(markEnd); m = dart.notNull(m) + 1) {
              buffer.writeCharCode(bytes[$_get](m));
            }
          } else {
            buffer.write(core.String.fromCharCodes(bytes, markStart, markEnd));
          }
          if (markEnd == end) break;
        }
      }
    if (dart.test(single) && dart.notNull(state) > 32) {
      if (dart.test(this.allowMalformed)) {
        buffer.writeCharCode(65533);
      } else {
        this[_state$0] = 77;
        this[_charOrIndex] = end;
        return "";
      }
    }
    this[_state$0] = state;
    this[_charOrIndex] = char;
    return buffer.toString();
  }
  static _makeUint8List(codeUnits, start, end) {
    if (codeUnits == null) dart.nullFailed(L97, 678, 45, "codeUnits");
    if (start == null) dart.nullFailed(L97, 678, 60, "start");
    if (end == null) dart.nullFailed(L97, 678, 71, "end");
    let length = dart.notNull(end) - dart.notNull(start);
    let bytes = _native_typed_data.NativeUint8List.new(length);
    for (let i = 0; i < length; i = i + 1) {
      let b = codeUnits[$_get](dart.notNull(start) + i);
      if ((dart.notNull(b) & ~255 >>> 0) !== 0) {
        b = 255;
      }
      bytes[$_set](i, b);
    }
    return bytes;
  }
};
(convert._Utf8Decoder.new = function(allowMalformed) {
  if (allowMalformed == null) dart.nullFailed(L84, 476, 21, "allowMalformed");
  this[_charOrIndex] = 0;
  this.allowMalformed = allowMalformed;
  this[_state$0] = 16;
  ;
}).prototype = convert._Utf8Decoder.prototype;
dart.addTypeTests(convert._Utf8Decoder);
dart.addTypeCaches(convert._Utf8Decoder);
dart.setMethodSignature(convert._Utf8Decoder, () => ({
  __proto__: dart.getMethods(convert._Utf8Decoder.__proto__),
  convertSingle: dart.fnType(core.String, [core.List$(core.int), core.int, dart.nullable(core.int)]),
  convertChunked: dart.fnType(core.String, [core.List$(core.int), core.int, dart.nullable(core.int)]),
  convertGeneral: dart.fnType(core.String, [core.List$(core.int), core.int, dart.nullable(core.int), core.bool]),
  [_convertRecursive]: dart.fnType(core.String, [typed_data.Uint8List, core.int, core.int, core.bool]),
  flush: dart.fnType(dart.void, [core.StringSink]),
  decodeGeneral: dart.fnType(core.String, [typed_data.Uint8List, core.int, core.int, core.bool])
}));
dart.setLibraryUri(convert._Utf8Decoder, L31);
dart.setFieldSignature(convert._Utf8Decoder, () => ({
  __proto__: dart.getFields(convert._Utf8Decoder.__proto__),
  allowMalformed: dart.finalFieldType(core.bool),
  [_state$0]: dart.fieldType(core.int),
  [_charOrIndex]: dart.fieldType(core.int)
}));
dart.defineLazy(convert._Utf8Decoder, {
  /*convert._Utf8Decoder.typeMask*/get typeMask() {
    return 31;
  },
  /*convert._Utf8Decoder.shiftedByteMask*/get shiftedByteMask() {
    return 61694;
  },
  /*convert._Utf8Decoder.typeTable*/get typeTable() {
    return "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHHIHHHJEEBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBKCCCCCCCCCCCCDCLONNNMEEEEEEEEEEE";
  },
  /*convert._Utf8Decoder.IA*/get IA() {
    return 0;
  },
  /*convert._Utf8Decoder.BB*/get BB() {
    return 16;
  },
  /*convert._Utf8Decoder.AB*/get AB() {
    return 32;
  },
  /*convert._Utf8Decoder.X1*/get X1() {
    return 48;
  },
  /*convert._Utf8Decoder.X2*/get X2() {
    return 58;
  },
  /*convert._Utf8Decoder.X3*/get X3() {
    return 68;
  },
  /*convert._Utf8Decoder.TO*/get TO() {
    return 78;
  },
  /*convert._Utf8Decoder.TS*/get TS() {
    return 88;
  },
  /*convert._Utf8Decoder.QO*/get QO() {
    return 98;
  },
  /*convert._Utf8Decoder.QR*/get QR() {
    return 108;
  },
  /*convert._Utf8Decoder.B1*/get B1() {
    return 118;
  },
  /*convert._Utf8Decoder.B2*/get B2() {
    return 128;
  },
  /*convert._Utf8Decoder.E1*/get E1() {
    return 65;
  },
  /*convert._Utf8Decoder.E2*/get E2() {
    return 67;
  },
  /*convert._Utf8Decoder.E3*/get E3() {
    return 69;
  },
  /*convert._Utf8Decoder.E4*/get E4() {
    return 71;
  },
  /*convert._Utf8Decoder.E5*/get E5() {
    return 73;
  },
  /*convert._Utf8Decoder.E6*/get E6() {
    return 75;
  },
  /*convert._Utf8Decoder.E7*/get E7() {
    return 77;
  },
  /*convert._Utf8Decoder._IA*/get _IA() {
    return " ";
  },
  /*convert._Utf8Decoder._BB*/get _BB() {
    return "";
  },
  /*convert._Utf8Decoder._AB*/get _AB() {
    return " ";
  },
  /*convert._Utf8Decoder._X1*/get _X1() {
    return "0";
  },
  /*convert._Utf8Decoder._X2*/get _X2() {
    return ":";
  },
  /*convert._Utf8Decoder._X3*/get _X3() {
    return "D";
  },
  /*convert._Utf8Decoder._TO*/get _TO() {
    return "N";
  },
  /*convert._Utf8Decoder._TS*/get _TS() {
    return "X";
  },
  /*convert._Utf8Decoder._QO*/get _QO() {
    return "b";
  },
  /*convert._Utf8Decoder._QR*/get _QR() {
    return "l";
  },
  /*convert._Utf8Decoder._B1*/get _B1() {
    return "v";
  },
  /*convert._Utf8Decoder._B2*/get _B2() {
    return "";
  },
  /*convert._Utf8Decoder._E1*/get _E1() {
    return "A";
  },
  /*convert._Utf8Decoder._E2*/get _E2() {
    return "C";
  },
  /*convert._Utf8Decoder._E3*/get _E3() {
    return "E";
  },
  /*convert._Utf8Decoder._E4*/get _E4() {
    return "G";
  },
  /*convert._Utf8Decoder._E5*/get _E5() {
    return "I";
  },
  /*convert._Utf8Decoder._E6*/get _E6() {
    return "K";
  },
  /*convert._Utf8Decoder._E7*/get _E7() {
    return "M";
  },
  /*convert._Utf8Decoder.transitionTable*/get transitionTable() {
    return "  0:XECCCCCN:lDb  0:XECCCCCNvlDb  0:XECCCCCN:lDb AAAAA     AAAAA00000AAAAA:::::AAAAAGG000AAAAA00KKKAAAAAG::::AAAAA:IIIIAAAAA0000AAAAA     AAAAA";
  },
  /*convert._Utf8Decoder.initial*/get initial() {
    return 0;
  },
  /*convert._Utf8Decoder.accept*/get accept() {
    return 0;
  },
  /*convert._Utf8Decoder.beforeBom*/get beforeBom() {
    return 16;
  },
  /*convert._Utf8Decoder.afterBom*/get afterBom() {
    return 32;
  },
  /*convert._Utf8Decoder.errorMissingExtension*/get errorMissingExtension() {
    return 65;
  },
  /*convert._Utf8Decoder.errorUnexpectedExtension*/get errorUnexpectedExtension() {
    return 67;
  },
  /*convert._Utf8Decoder.errorInvalid*/get errorInvalid() {
    return 69;
  },
  /*convert._Utf8Decoder.errorOverlong*/get errorOverlong() {
    return 71;
  },
  /*convert._Utf8Decoder.errorOutOfRange*/get errorOutOfRange() {
    return 73;
  },
  /*convert._Utf8Decoder.errorSurrogate*/get errorSurrogate() {
    return 75;
  },
  /*convert._Utf8Decoder.errorUnfinished*/get errorUnfinished() {
    return 77;
  }
}, false);
convert._convertJsonToDart = function _convertJsonToDart(json, reviver) {
  if (reviver == null) dart.nullFailed(L84, 54, 26, "reviver");
  function walk(e) {
    if (e == null || typeof e != "object") {
      return e;
    }
    if (Object.getPrototypeOf(e) === Array.prototype) {
      for (let i = 0; i < e.length; i = i + 1) {
        let item = e[i];
        e[i] = reviver(i, walk(item));
      }
      return e;
    }
    let map = new convert._JsonMap.new(e);
    let processed = map[_processed];
    let keys = map[_computeKeys]();
    for (let i = 0; i < dart.notNull(keys[$length]); i = i + 1) {
      let key = keys[$_get](i);
      let revived = reviver(key, walk(e[key]));
      processed[key] = revived;
    }
    map[_original$] = processed;
    return map;
  }
  dart.fn(walk, dynamicTodynamic());
  return reviver(null, walk(json));
};
convert._convertJsonToDartLazy = function _convertJsonToDartLazy(object) {
  if (object == null) return null;
  if (typeof object != "object") {
    return object;
  }
  if (Object.getPrototypeOf(object) !== Array.prototype) {
    return new convert._JsonMap.new(object);
  }
  for (let i = 0; i < object.length; i = i + 1) {
    let item = object[i];
    object[i] = convert._convertJsonToDartLazy(item);
  }
  return object;
};
convert.base64Encode = function base64Encode(bytes) {
  if (bytes == null) dart.nullFailed(L91, 40, 31, "bytes");
  return convert.base64.encode(bytes);
};
convert.base64UrlEncode = function base64UrlEncode(bytes) {
  if (bytes == null) dart.nullFailed(L91, 45, 34, "bytes");
  return convert.base64Url.encode(bytes);
};
convert.base64Decode = function base64Decode(source) {
  if (source == null) dart.nullFailed(L91, 51, 31, "source");
  return convert.base64.decode(source);
};
convert.jsonEncode = function jsonEncode(object, opts) {
  let toEncodable = opts && 'toEncodable' in opts ? opts.toEncodable : null;
  return convert.json.encode(object, {toEncodable: toEncodable});
};
convert.jsonDecode = function jsonDecode(source, opts) {
  if (source == null) dart.nullFailed(L94, 94, 27, "source");
  let reviver = opts && 'reviver' in opts ? opts.reviver : null;
  return convert.json.decode(source, {reviver: reviver});
};
convert._parseJson = function _parseJson(source, reviver) {
  if (source == null) dart.nullFailed(L84, 31, 19, "source");
  if (!(typeof source == 'string')) dart.throw(_js_helper.argumentErrorValue(source));
  let parsed = null;
  try {
    parsed = JSON.parse(source);
  } catch (e$) {
    let e = dart.getThrown(e$);
    if (core.Object.is(e)) {
      dart.throw(new core.FormatException.new(String(e)));
    } else
      throw e$;
  }
  if (reviver == null) {
    return convert._convertJsonToDartLazy(parsed);
  } else {
    return convert._convertJsonToDart(parsed, reviver);
  }
};
convert._defaultToEncodable = function _defaultToEncodable(object) {
  return dart.dsend(object, 'toJson', []);
};
convert._isLeadSurrogate = function _isLeadSurrogate(codeUnit) {
  if (codeUnit == null) dart.nullFailed(L97, 359, 27, "codeUnit");
  return (dart.notNull(codeUnit) & 64512) >>> 0 === 55296;
};
convert._isTailSurrogate = function _isTailSurrogate(codeUnit) {
  if (codeUnit == null) dart.nullFailed(L97, 361, 27, "codeUnit");
  return (dart.notNull(codeUnit) & 64512) >>> 0 === 56320;
};
convert._combineSurrogatePair = function _combineSurrogatePair(lead, tail) {
  if (lead == null) dart.nullFailed(L97, 363, 31, "lead");
  if (tail == null) dart.nullFailed(L97, 363, 41, "tail");
  return (65536 + ((dart.notNull(lead) & 1023) >>> 0 << 10 >>> 0) | (dart.notNull(tail) & 1023) >>> 0) >>> 0;
};
var C101;
var C102;
var C103;
var C104;
var C105;
var C106;
var C107;
dart.defineLazy(convert, {
  /*convert.ascii*/get ascii() {
    return C101 || CT.C101;
  },
  /*convert._asciiMask*/get _asciiMask() {
    return 127;
  },
  /*convert.base64*/get base64() {
    return C102 || CT.C102;
  },
  /*convert.base64Url*/get base64Url() {
    return C103 || CT.C103;
  },
  /*convert._paddingChar*/get _paddingChar() {
    return 61;
  },
  /*convert.htmlEscape*/get htmlEscape() {
    return C104 || CT.C104;
  },
  /*convert.json*/get json() {
    return C105 || CT.C105;
  },
  /*convert.latin1*/get latin1() {
    return C106 || CT.C106;
  },
  /*convert._latin1Mask*/get _latin1Mask() {
    return 255;
  },
  /*convert._LF*/get _LF() {
    return 10;
  },
  /*convert._CR*/get _CR() {
    return 13;
  },
  /*convert.unicodeReplacementCharacterRune*/get unicodeReplacementCharacterRune() {
    return 65533;
  },
  /*convert.unicodeBomCharacterRune*/get unicodeBomCharacterRune() {
    return 65279;
  },
  /*convert.utf8*/get utf8() {
    return C107 || CT.C107;
  },
  /*convert._ONE_BYTE_LIMIT*/get _ONE_BYTE_LIMIT() {
    return 127;
  },
  /*convert._TWO_BYTE_LIMIT*/get _TWO_BYTE_LIMIT() {
    return 2047;
  },
  /*convert._THREE_BYTE_LIMIT*/get _THREE_BYTE_LIMIT() {
    return 65535;
  },
  /*convert._FOUR_BYTE_LIMIT*/get _FOUR_BYTE_LIMIT() {
    return 1114111;
  },
  /*convert._SURROGATE_TAG_MASK*/get _SURROGATE_TAG_MASK() {
    return 64512;
  },
  /*convert._SURROGATE_VALUE_MASK*/get _SURROGATE_VALUE_MASK() {
    return 1023;
  },
  /*convert._LEAD_SURROGATE_MIN*/get _LEAD_SURROGATE_MIN() {
    return 55296;
  },
  /*convert._TAIL_SURROGATE_MIN*/get _TAIL_SURROGATE_MIN() {
    return 56320;
  }
}, false);
developer._FakeUserTag = class _FakeUserTag extends core.Object {
  static new(label) {
    let t167, t166, t165;
    if (label == null) dart.nullFailed(L98, 173, 31, "label");
    let existingTag = developer._FakeUserTag._instances[$_get](label);
    if (existingTag != null) {
      return existingTag;
    }
    if (developer._FakeUserTag._instances[$length] === 64) {
      dart.throw(new core.UnsupportedError.new(dart.str("UserTag instance limit (") + dart.str(64) + dart.str(") reached.")));
    }
    t165 = developer._FakeUserTag._instances;
    t166 = label;
    t167 = new developer._FakeUserTag.real(label);
    t165[$_set](t166, t167);
    return t167;
  }
  makeCurrent() {
    let old = developer._currentTag;
    developer._currentTag = this;
    return old;
  }
};
(developer._FakeUserTag.real = function(label) {
  if (label == null) dart.nullFailed(L98, 171, 26, "label");
  this.label = label;
  ;
}).prototype = developer._FakeUserTag.prototype;
dart.addTypeTests(developer._FakeUserTag);
dart.addTypeCaches(developer._FakeUserTag);
developer._FakeUserTag[dart.implements] = () => [developer.UserTag];
dart.setMethodSignature(developer._FakeUserTag, () => ({
  __proto__: dart.getMethods(developer._FakeUserTag.__proto__),
  makeCurrent: dart.fnType(developer.UserTag, [])
}));
dart.setLibraryUri(developer._FakeUserTag, L99);
dart.setFieldSignature(developer._FakeUserTag, () => ({
  __proto__: dart.getFields(developer._FakeUserTag.__proto__),
  label: dart.finalFieldType(core.String)
}));
dart.defineLazy(developer._FakeUserTag, {
  /*developer._FakeUserTag._instances*/get _instances() {
    return new (IdentityMapOfString$_FakeUserTag()).new();
  },
  /*developer._FakeUserTag._defaultTag*/get _defaultTag() {
    return developer._FakeUserTag.new("Default");
  }
}, false);
var _toString$ = dart.privateName(developer, "_toString");
var result$ = dart.privateName(developer, "ServiceExtensionResponse.result");
var errorCode$ = dart.privateName(developer, "ServiceExtensionResponse.errorCode");
var errorDetail$ = dart.privateName(developer, "ServiceExtensionResponse.errorDetail");
developer.ServiceExtensionResponse = class ServiceExtensionResponse extends core.Object {
  get result() {
    return this[result$];
  }
  set result(value) {
    super.result = value;
  }
  get errorCode() {
    return this[errorCode$];
  }
  set errorCode(value) {
    super.errorCode = value;
  }
  get errorDetail() {
    return this[errorDetail$];
  }
  set errorDetail(value) {
    super.errorDetail = value;
  }
  static _errorCodeMessage(errorCode) {
    if (errorCode == null) dart.nullFailed(L100, 76, 39, "errorCode");
    developer.ServiceExtensionResponse._validateErrorCode(errorCode);
    if (errorCode === -32602) {
      return "Invalid params";
    }
    return "Server error";
  }
  static _validateErrorCode(errorCode) {
    if (errorCode == null) dart.nullFailed(L100, 84, 33, "errorCode");
    core.ArgumentError.checkNotNull(core.int, errorCode, "errorCode");
    if (errorCode === -32602) return;
    if (dart.notNull(errorCode) >= -32016 && dart.notNull(errorCode) <= -32000) {
      return;
    }
    dart.throw(new core.ArgumentError.value(errorCode, "errorCode", "Out of range"));
  }
  isError() {
    return this.errorCode != null && this.errorDetail != null;
  }
  [_toString$]() {
    let t165;
    t165 = this.result;
    return t165 == null ? convert.json.encode(new (IdentityMapOfString$Object()).from(["code", dart.nullCheck(this.errorCode), "message", developer.ServiceExtensionResponse._errorCodeMessage(dart.nullCheck(this.errorCode)), "data", new (IdentityMapOfString$String()).from(["details", dart.nullCheck(this.errorDetail)])])) : t165;
  }
};
(developer.ServiceExtensionResponse.result = function(result) {
  if (result == null) dart.nullFailed(L100, 25, 42, "result");
  this[result$] = result;
  this[errorCode$] = null;
  this[errorDetail$] = null;
  core.ArgumentError.checkNotNull(core.String, result, "result");
}).prototype = developer.ServiceExtensionResponse.prototype;
(developer.ServiceExtensionResponse.error = function(errorCode, errorDetail) {
  if (errorCode == null) dart.nullFailed(L100, 39, 38, "errorCode");
  if (errorDetail == null) dart.nullFailed(L100, 39, 56, "errorDetail");
  this[result$] = null;
  this[errorCode$] = errorCode;
  this[errorDetail$] = errorDetail;
  developer.ServiceExtensionResponse._validateErrorCode(errorCode);
  core.ArgumentError.checkNotNull(core.String, errorDetail, "errorDetail");
}).prototype = developer.ServiceExtensionResponse.prototype;
dart.addTypeTests(developer.ServiceExtensionResponse);
dart.addTypeCaches(developer.ServiceExtensionResponse);
dart.setMethodSignature(developer.ServiceExtensionResponse, () => ({
  __proto__: dart.getMethods(developer.ServiceExtensionResponse.__proto__),
  isError: dart.fnType(core.bool, []),
  [_toString$]: dart.fnType(core.String, [])
}));
dart.setLibraryUri(developer.ServiceExtensionResponse, L99);
dart.setFieldSignature(developer.ServiceExtensionResponse, () => ({
  __proto__: dart.getFields(developer.ServiceExtensionResponse.__proto__),
  result: dart.finalFieldType(dart.nullable(core.String)),
  errorCode: dart.finalFieldType(dart.nullable(core.int)),
  errorDetail: dart.finalFieldType(dart.nullable(core.String))
}));
dart.defineLazy(developer.ServiceExtensionResponse, {
  /*developer.ServiceExtensionResponse.kInvalidParams*/get kInvalidParams() {
    return -32602;
  },
  /*developer.ServiceExtensionResponse.kExtensionError*/get kExtensionError() {
    return -32000;
  },
  /*developer.ServiceExtensionResponse.kExtensionErrorMax*/get kExtensionErrorMax() {
    return -32000;
  },
  /*developer.ServiceExtensionResponse.kExtensionErrorMin*/get kExtensionErrorMin() {
    return -32016;
  },
  /*developer.ServiceExtensionResponse.invalidParams*/get invalidParams() {
    return -32602;
  },
  /*developer.ServiceExtensionResponse.extensionError*/get extensionError() {
    return -32000;
  },
  /*developer.ServiceExtensionResponse.extensionErrorMax*/get extensionErrorMax() {
    return -32000;
  },
  /*developer.ServiceExtensionResponse.extensionErrorMin*/get extensionErrorMin() {
    return -32016;
  }
}, false);
developer.UserTag = class UserTag extends core.Object {
  static get defaultTag() {
    return developer._FakeUserTag._defaultTag;
  }
};
(developer.UserTag[dart.mixinNew] = function() {
}).prototype = developer.UserTag.prototype;
dart.addTypeTests(developer.UserTag);
dart.addTypeCaches(developer.UserTag);
dart.setLibraryUri(developer.UserTag, L99);
dart.defineLazy(developer.UserTag, {
  /*developer.UserTag.MAX_USER_TAGS*/get MAX_USER_TAGS() {
    return 64;
  }
}, false);
var name$10 = dart.privateName(developer, "Metric.name");
var description$ = dart.privateName(developer, "Metric.description");
developer.Metric = class Metric extends core.Object {
  get name() {
    return this[name$10];
  }
  set name(value) {
    super.name = value;
  }
  get description() {
    return this[description$];
  }
  set description(value) {
    super.description = value;
  }
};
(developer.Metric.new = function(name, description) {
  if (name == null) dart.nullFailed(L101, 39, 15, "name");
  if (description == null) dart.nullFailed(L101, 39, 26, "description");
  this[name$10] = name;
  this[description$] = description;
  if (this.name === "vm" || this.name[$contains]("/")) {
    dart.throw(new core.ArgumentError.new("Invalid Metric name."));
  }
}).prototype = developer.Metric.prototype;
dart.addTypeTests(developer.Metric);
dart.addTypeCaches(developer.Metric);
dart.setLibraryUri(developer.Metric, L99);
dart.setFieldSignature(developer.Metric, () => ({
  __proto__: dart.getFields(developer.Metric.__proto__),
  name: dart.finalFieldType(core.String),
  description: dart.finalFieldType(core.String)
}));
var _value = dart.privateName(developer, "_value");
var _toJSON = dart.privateName(developer, "_toJSON");
var min$ = dart.privateName(developer, "Gauge.min");
var max$ = dart.privateName(developer, "Gauge.max");
developer.Gauge = class Gauge extends developer.Metric {
  get min() {
    return this[min$];
  }
  set min(value) {
    super.min = value;
  }
  get max() {
    return this[max$];
  }
  set max(value) {
    super.max = value;
  }
  get value() {
    return this[_value];
  }
  set value(v) {
    if (v == null) dart.nullFailed(L101, 56, 20, "v");
    if (dart.notNull(v) < dart.notNull(this.min)) {
      v = this.min;
    } else if (dart.notNull(v) > dart.notNull(this.max)) {
      v = this.max;
    }
    this[_value] = v;
  }
  [_toJSON]() {
    let map = new (IdentityMapOfString$Object()).from(["type", "Gauge", "id", dart.str("metrics/") + dart.str(this.name), "name", this.name, "description", this.description, "value", this.value, "min", this.min, "max", this.max]);
    return map;
  }
};
(developer.Gauge.new = function(name, description, min, max) {
  if (name == null) dart.nullFailed(L101, 65, 16, "name");
  if (description == null) dart.nullFailed(L101, 65, 29, "description");
  if (min == null) dart.nullFailed(L101, 65, 47, "min");
  if (max == null) dart.nullFailed(L101, 65, 57, "max");
  this[min$] = min;
  this[max$] = max;
  this[_value] = min;
  developer.Gauge.__proto__.new.call(this, name, description);
  core.ArgumentError.checkNotNull(core.double, this.min, "min");
  core.ArgumentError.checkNotNull(core.double, this.max, "max");
  if (!(dart.notNull(this.min) < dart.notNull(this.max))) dart.throw(new core.ArgumentError.new("min must be less than max"));
}).prototype = developer.Gauge.prototype;
dart.addTypeTests(developer.Gauge);
dart.addTypeCaches(developer.Gauge);
dart.setMethodSignature(developer.Gauge, () => ({
  __proto__: dart.getMethods(developer.Gauge.__proto__),
  [_toJSON]: dart.fnType(core.Map, [])
}));
dart.setGetterSignature(developer.Gauge, () => ({
  __proto__: dart.getGetters(developer.Gauge.__proto__),
  value: core.double
}));
dart.setSetterSignature(developer.Gauge, () => ({
  __proto__: dart.getSetters(developer.Gauge.__proto__),
  value: core.double
}));
dart.setLibraryUri(developer.Gauge, L99);
dart.setFieldSignature(developer.Gauge, () => ({
  __proto__: dart.getFields(developer.Gauge.__proto__),
  min: dart.finalFieldType(core.double),
  max: dart.finalFieldType(core.double),
  [_value]: dart.fieldType(core.double)
}));
developer.Counter = class Counter extends developer.Metric {
  get value() {
    return this[_value];
  }
  set value(v) {
    if (v == null) dart.nullFailed(L101, 94, 20, "v");
    this[_value] = v;
  }
  [_toJSON]() {
    let map = new (IdentityMapOfString$Object()).from(["type", "Counter", "id", dart.str("metrics/") + dart.str(this.name), "name", this.name, "description", this.description, "value", this.value]);
    return map;
  }
};
(developer.Counter.new = function(name, description) {
  if (name == null) dart.nullFailed(L101, 90, 18, "name");
  if (description == null) dart.nullFailed(L101, 90, 31, "description");
  this[_value] = 0.0;
  developer.Counter.__proto__.new.call(this, name, description);
  ;
}).prototype = developer.Counter.prototype;
dart.addTypeTests(developer.Counter);
dart.addTypeCaches(developer.Counter);
dart.setMethodSignature(developer.Counter, () => ({
  __proto__: dart.getMethods(developer.Counter.__proto__),
  [_toJSON]: dart.fnType(core.Map, [])
}));
dart.setGetterSignature(developer.Counter, () => ({
  __proto__: dart.getGetters(developer.Counter.__proto__),
  value: core.double
}));
dart.setSetterSignature(developer.Counter, () => ({
  __proto__: dart.getSetters(developer.Counter.__proto__),
  value: core.double
}));
dart.setLibraryUri(developer.Counter, L99);
dart.setFieldSignature(developer.Counter, () => ({
  __proto__: dart.getFields(developer.Counter.__proto__),
  [_value]: dart.fieldType(core.double)
}));
developer.Metrics = class Metrics extends core.Object {
  static register(metric) {
    if (metric == null) dart.nullFailed(L101, 114, 31, "metric");
    core.ArgumentError.checkNotNull(developer.Metric, metric, "metric");
    if (developer.Metrics._metrics[$_get](metric.name) != null) {
      dart.throw(new core.ArgumentError.new("Registered metrics have unique names"));
    }
    developer.Metrics._metrics[$_set](metric.name, metric);
  }
  static deregister(metric) {
    if (metric == null) dart.nullFailed(L101, 124, 33, "metric");
    core.ArgumentError.checkNotNull(developer.Metric, metric, "metric");
    developer.Metrics._metrics[$remove](metric.name);
  }
  static _printMetric(id) {
    if (id == null) dart.nullFailed(L101, 132, 38, "id");
    let metric = developer.Metrics._metrics[$_get](id);
    if (metric == null) {
      return null;
    }
    return convert.json.encode(metric[_toJSON]());
  }
  static _printMetrics() {
    let metrics = [];
    for (let metric of developer.Metrics._metrics[$values]) {
      metrics[$add](metric[_toJSON]());
    }
    let map = new (IdentityMapOfString$Object()).from(["type", "MetricList", "metrics", metrics]);
    return convert.json.encode(map);
  }
};
(developer.Metrics.new = function() {
  ;
}).prototype = developer.Metrics.prototype;
dart.addTypeTests(developer.Metrics);
dart.addTypeCaches(developer.Metrics);
dart.setLibraryUri(developer.Metrics, L99);
dart.defineLazy(developer.Metrics, {
  /*developer.Metrics._metrics*/get _metrics() {
    return new (LinkedMapOfString$Metric()).new();
  }
}, false);
var majorVersion = dart.privateName(developer, "ServiceProtocolInfo.majorVersion");
var minorVersion = dart.privateName(developer, "ServiceProtocolInfo.minorVersion");
var serverUri$ = dart.privateName(developer, "ServiceProtocolInfo.serverUri");
developer.ServiceProtocolInfo = class ServiceProtocolInfo extends core.Object {
  get majorVersion() {
    return this[majorVersion];
  }
  set majorVersion(value) {
    super.majorVersion = value;
  }
  get minorVersion() {
    return this[minorVersion];
  }
  set minorVersion(value) {
    super.minorVersion = value;
  }
  get serverUri() {
    return this[serverUri$];
  }
  set serverUri(value) {
    super.serverUri = value;
  }
  toString() {
    if (this.serverUri != null) {
      return dart.str("Dart VM Service Protocol v") + dart.str(this.majorVersion) + dart.str(".") + dart.str(this.minorVersion) + dart.str(" ") + dart.str("listening on ") + dart.str(this.serverUri);
    } else {
      return dart.str("Dart VM Service Protocol v") + dart.str(this.majorVersion) + dart.str(".") + dart.str(this.minorVersion);
    }
  }
};
(developer.ServiceProtocolInfo.new = function(serverUri) {
  this[majorVersion] = developer._getServiceMajorVersion();
  this[minorVersion] = developer._getServiceMinorVersion();
  this[serverUri$] = serverUri;
  ;
}).prototype = developer.ServiceProtocolInfo.prototype;
dart.addTypeTests(developer.ServiceProtocolInfo);
dart.addTypeCaches(developer.ServiceProtocolInfo);
dart.setLibraryUri(developer.ServiceProtocolInfo, L99);
dart.setFieldSignature(developer.ServiceProtocolInfo, () => ({
  __proto__: dart.getFields(developer.ServiceProtocolInfo.__proto__),
  majorVersion: dart.finalFieldType(core.int),
  minorVersion: dart.finalFieldType(core.int),
  serverUri: dart.finalFieldType(dart.nullable(core.Uri))
}));
dart.defineExtensionMethods(developer.ServiceProtocolInfo, ['toString']);
developer.Service = class Service extends core.Object {
  static getInfo() {
    return async.async(developer.ServiceProtocolInfo, function* getInfo() {
      let receivePort = isolate$.RawReceivePort.new();
      let uriCompleter = CompleterOfUriN().new();
      receivePort.handler = dart.fn(uri => uriCompleter.complete(uri), UriNTovoid());
      developer._getServerInfo(receivePort.sendPort);
      let uri = (yield uriCompleter.future);
      receivePort.close();
      return new developer.ServiceProtocolInfo.new(uri);
    });
  }
  static controlWebServer(opts) {
    let enable = opts && 'enable' in opts ? opts.enable : false;
    if (enable == null) dart.nullFailed(L102, 61, 13, "enable");
    let silenceOutput = opts && 'silenceOutput' in opts ? opts.silenceOutput : null;
    return async.async(developer.ServiceProtocolInfo, function* controlWebServer() {
      core.ArgumentError.checkNotNull(core.bool, enable, "enable");
      let receivePort = isolate$.RawReceivePort.new();
      let uriCompleter = CompleterOfUri().new();
      receivePort.handler = dart.fn(uri => {
        if (uri == null) dart.nullFailed(L102, 67, 32, "uri");
        return uriCompleter.complete(uri);
      }, UriTovoid());
      developer._webServerControl(receivePort.sendPort, enable, silenceOutput);
      let uri = (yield uriCompleter.future);
      receivePort.close();
      return new developer.ServiceProtocolInfo.new(uri);
    });
  }
  static getIsolateID(isolate) {
    if (isolate == null) dart.nullFailed(L102, 81, 39, "isolate");
    core.ArgumentError.checkNotNull(isolate$.Isolate, isolate, "isolate");
    return developer._getIsolateIDFromSendPort(isolate.controlPort);
  }
};
(developer.Service.new = function() {
  ;
}).prototype = developer.Service.prototype;
dart.addTypeTests(developer.Service);
dart.addTypeCaches(developer.Service);
dart.setLibraryUri(developer.Service, L99);
var _type$0 = dart.privateName(developer, "_type");
var id$ = dart.privateName(developer, "Flow.id");
developer.Flow = class Flow extends core.Object {
  get id() {
    return this[id$];
  }
  set id(value) {
    super.id = value;
  }
  static begin(opts) {
    let t165;
    let id = opts && 'id' in opts ? opts.id : null;
    return new developer.Flow.__(9, (t165 = id, t165 == null ? developer._getNextAsyncId() : t165));
  }
  static step(id) {
    if (id == null) dart.nullFailed(L103, 68, 24, "id");
    return new developer.Flow.__(10, id);
  }
  static end(id) {
    if (id == null) dart.nullFailed(L103, 75, 23, "id");
    return new developer.Flow.__(11, id);
  }
};
(developer.Flow.__ = function(_type, id) {
  if (_type == null) dart.nullFailed(L103, 52, 15, "_type");
  if (id == null) dart.nullFailed(L103, 52, 27, "id");
  this[_type$0] = _type;
  this[id$] = id;
  ;
}).prototype = developer.Flow.prototype;
dart.addTypeTests(developer.Flow);
dart.addTypeCaches(developer.Flow);
dart.setLibraryUri(developer.Flow, L99);
dart.setFieldSignature(developer.Flow, () => ({
  __proto__: dart.getFields(developer.Flow.__proto__),
  [_type$0]: dart.finalFieldType(core.int),
  id: dart.finalFieldType(core.int)
}));
dart.defineLazy(developer.Flow, {
  /*developer.Flow._begin*/get _begin() {
    return 9;
  },
  /*developer.Flow._step*/get _step() {
    return 10;
  },
  /*developer.Flow._end*/get _end() {
    return 11;
  }
}, false);
var _arguments$1 = dart.privateName(developer, "_arguments");
var _startSync = dart.privateName(developer, "_startSync");
developer.Timeline = class Timeline extends core.Object {
  static startSync(name, opts) {
    if (name == null) dart.nullFailed(L103, 103, 32, "name");
    let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
    let flow = opts && 'flow' in opts ? opts.flow : null;
    if (!true) return;
    core.ArgumentError.checkNotNull(core.String, name, "name");
    if (!dart.test(developer._isDartStreamEnabled())) {
      developer.Timeline._stack[$add](null);
      return;
    }
    let block = new developer._SyncBlock.__(name);
    if ($arguments != null) {
      block[_arguments$1] = $arguments;
    }
    if (flow != null) {
      block.flow = flow;
    }
    developer.Timeline._stack[$add](block);
    block[_startSync]();
  }
  static finishSync() {
    if (!true) {
      return;
    }
    if (developer.Timeline._stack[$length] === 0) {
      dart.throw(new core.StateError.new("Uneven calls to startSync and finishSync"));
    }
    let block = developer.Timeline._stack[$removeLast]();
    if (block == null) {
      return;
    }
    block.finish();
  }
  static instantSync(name, opts) {
    if (name == null) dart.nullFailed(L103, 142, 34, "name");
    let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
    if (!true) return;
    core.ArgumentError.checkNotNull(core.String, name, "name");
    if (!dart.test(developer._isDartStreamEnabled())) {
      return;
    }
    let instantArguments = null;
    if ($arguments != null) {
      instantArguments = collection.LinkedHashMap.from($arguments);
    }
    developer._reportInstantEvent("Dart", name, developer._argumentsAsJson(instantArguments));
  }
  static timeSync(T, name, $function, opts) {
    if (name == null) dart.nullFailed(L103, 159, 31, "name");
    if ($function == null) dart.nullFailed(L103, 159, 61, "function");
    let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
    let flow = opts && 'flow' in opts ? opts.flow : null;
    developer.Timeline.startSync(name, {arguments: $arguments, flow: flow});
    try {
      return $function();
    } finally {
      developer.Timeline.finishSync();
    }
  }
  static get now() {
    return developer._getTraceClock();
  }
};
(developer.Timeline.new = function() {
  ;
}).prototype = developer.Timeline.prototype;
dart.addTypeTests(developer.Timeline);
dart.addTypeCaches(developer.Timeline);
dart.setLibraryUri(developer.Timeline, L99);
dart.defineLazy(developer.Timeline, {
  /*developer.Timeline._stack*/get _stack() {
    return JSArrayOf_SyncBlockN().of([]);
  }
}, false);
var _stack = dart.privateName(developer, "_stack");
var _parent = dart.privateName(developer, "_parent");
var _filterKey = dart.privateName(developer, "_filterKey");
var _taskId$ = dart.privateName(developer, "_taskId");
var _start = dart.privateName(developer, "_start");
var _finish = dart.privateName(developer, "_finish");
developer.TimelineTask = class TimelineTask extends core.Object {
  start(name, opts) {
    if (name == null) dart.nullFailed(L103, 218, 21, "name");
    let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
    if (!true) return;
    core.ArgumentError.checkNotNull(core.String, name, "name");
    let block = new developer._AsyncBlock.__(name, this[_taskId$]);
    this[_stack][$add](block);
    let map = new (LinkedMapOfObjectN$ObjectN()).new();
    if ($arguments != null) {
      for (let key of $arguments[$keys]) {
        map[$_set](key, $arguments[$_get](key));
      }
    }
    if (this[_parent] != null) map[$_set]("parentId", dart.nullCheck(this[_parent])[_taskId$][$toRadixString](16));
    if (this[_filterKey] != null) map[$_set]("filterKey", this[_filterKey]);
    block[_start](map);
  }
  instant(name, opts) {
    if (name == null) dart.nullFailed(L103, 241, 23, "name");
    let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
    if (!true) return;
    core.ArgumentError.checkNotNull(core.String, name, "name");
    let instantArguments = null;
    if ($arguments != null) {
      instantArguments = collection.LinkedHashMap.from($arguments);
    }
    if (this[_filterKey] != null) {
      instantArguments == null ? instantArguments = new _js_helper.LinkedMap.new() : null;
      instantArguments[$_set]("filterKey", this[_filterKey]);
    }
    developer._reportTaskEvent(this[_taskId$], "n", "Dart", name, developer._argumentsAsJson(instantArguments));
  }
  finish(opts) {
    let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
    if (!true) {
      return;
    }
    if (this[_stack][$length] === 0) {
      dart.throw(new core.StateError.new("Uneven calls to start and finish"));
    }
    if (this[_filterKey] != null) {
      $arguments == null ? $arguments = new _js_helper.LinkedMap.new() : null;
      $arguments[$_set]("filterKey", this[_filterKey]);
    }
    let block = this[_stack][$removeLast]();
    block[_finish]($arguments);
  }
  pass() {
    if (dart.notNull(this[_stack][$length]) > 0) {
      dart.throw(new core.StateError.new(dart.str("You cannot pass a TimelineTask without finishing all started ") + dart.str("operations")));
    }
    let r = this[_taskId$];
    return r;
  }
};
(developer.TimelineTask.new = function(opts) {
  let parent = opts && 'parent' in opts ? opts.parent : null;
  let filterKey = opts && 'filterKey' in opts ? opts.filterKey : null;
  this[_stack] = JSArrayOf_AsyncBlock().of([]);
  this[_parent] = parent;
  this[_filterKey] = filterKey;
  this[_taskId$] = developer._getNextAsyncId();
}).prototype = developer.TimelineTask.prototype;
(developer.TimelineTask.withTaskId = function(taskId, opts) {
  if (taskId == null) dart.nullFailed(L103, 208, 31, "taskId");
  let filterKey = opts && 'filterKey' in opts ? opts.filterKey : null;
  this[_stack] = JSArrayOf_AsyncBlock().of([]);
  this[_parent] = null;
  this[_filterKey] = filterKey;
  this[_taskId$] = taskId;
  core.ArgumentError.checkNotNull(core.int, taskId, "taskId");
}).prototype = developer.TimelineTask.prototype;
dart.addTypeTests(developer.TimelineTask);
dart.addTypeCaches(developer.TimelineTask);
dart.setMethodSignature(developer.TimelineTask, () => ({
  __proto__: dart.getMethods(developer.TimelineTask.__proto__),
  start: dart.fnType(dart.void, [core.String], {arguments: dart.nullable(core.Map)}, {}),
  instant: dart.fnType(dart.void, [core.String], {arguments: dart.nullable(core.Map)}, {}),
  finish: dart.fnType(dart.void, [], {arguments: dart.nullable(core.Map)}, {}),
  pass: dart.fnType(core.int, [])
}));
dart.setLibraryUri(developer.TimelineTask, L99);
dart.setFieldSignature(developer.TimelineTask, () => ({
  __proto__: dart.getFields(developer.TimelineTask.__proto__),
  [_parent]: dart.finalFieldType(dart.nullable(developer.TimelineTask)),
  [_filterKey]: dart.finalFieldType(dart.nullable(core.String)),
  [_taskId$]: dart.finalFieldType(core.int),
  [_stack]: dart.finalFieldType(core.List$(developer._AsyncBlock))
}));
dart.defineLazy(developer.TimelineTask, {
  /*developer.TimelineTask._kFilterKey*/get _kFilterKey() {
    return "filterKey";
  }
}, false);
developer._AsyncBlock = class _AsyncBlock extends core.Object {
  [_start]($arguments) {
    if ($arguments == null) dart.nullFailed(L103, 309, 19, "arguments");
    developer._reportTaskEvent(this[_taskId$], "b", this.category, this.name, developer._argumentsAsJson($arguments));
  }
  [_finish]($arguments) {
    developer._reportTaskEvent(this[_taskId$], "e", this.category, this.name, developer._argumentsAsJson($arguments));
  }
};
(developer._AsyncBlock.__ = function(name, _taskId) {
  if (name == null) dart.nullFailed(L103, 306, 22, "name");
  if (_taskId == null) dart.nullFailed(L103, 306, 33, "_taskId");
  this.category = "Dart";
  this.name = name;
  this[_taskId$] = _taskId;
  ;
}).prototype = developer._AsyncBlock.prototype;
dart.addTypeTests(developer._AsyncBlock);
dart.addTypeCaches(developer._AsyncBlock);
dart.setMethodSignature(developer._AsyncBlock, () => ({
  __proto__: dart.getMethods(developer._AsyncBlock.__proto__),
  [_start]: dart.fnType(dart.void, [core.Map]),
  [_finish]: dart.fnType(dart.void, [dart.nullable(core.Map)])
}));
dart.setLibraryUri(developer._AsyncBlock, L99);
dart.setFieldSignature(developer._AsyncBlock, () => ({
  __proto__: dart.getFields(developer._AsyncBlock.__proto__),
  category: dart.finalFieldType(core.String),
  name: dart.finalFieldType(core.String),
  [_taskId$]: dart.finalFieldType(core.int)
}));
var _flow = dart.privateName(developer, "_flow");
developer._SyncBlock = class _SyncBlock extends core.Object {
  [_startSync]() {
    developer._reportTaskEvent(0, "B", this.category, this.name, developer._argumentsAsJson(this[_arguments$1]));
  }
  finish() {
    developer._reportTaskEvent(0, "E", this.category, this.name, developer._argumentsAsJson(this[_arguments$1]));
    if (this[_flow] != null) {
      developer._reportFlowEvent(this.category, dart.str(dart.nullCheck(this[_flow]).id), dart.nullCheck(this[_flow])[_type$0], dart.nullCheck(this[_flow]).id, developer._argumentsAsJson(null));
    }
  }
  set flow(f) {
    if (f == null) dart.nullFailed(L103, 353, 22, "f");
    this[_flow] = f;
  }
};
(developer._SyncBlock.__ = function(name) {
  if (name == null) dart.nullFailed(L103, 335, 21, "name");
  this.category = "Dart";
  this[_arguments$1] = null;
  this[_flow] = null;
  this.name = name;
  ;
}).prototype = developer._SyncBlock.prototype;
dart.addTypeTests(developer._SyncBlock);
dart.addTypeCaches(developer._SyncBlock);
dart.setMethodSignature(developer._SyncBlock, () => ({
  __proto__: dart.getMethods(developer._SyncBlock.__proto__),
  [_startSync]: dart.fnType(dart.void, []),
  finish: dart.fnType(dart.void, [])
}));
dart.setSetterSignature(developer._SyncBlock, () => ({
  __proto__: dart.getSetters(developer._SyncBlock.__proto__),
  flow: developer.Flow
}));
dart.setLibraryUri(developer._SyncBlock, L99);
dart.setFieldSignature(developer._SyncBlock, () => ({
  __proto__: dart.getFields(developer._SyncBlock.__proto__),
  category: dart.finalFieldType(core.String),
  name: dart.finalFieldType(core.String),
  [_arguments$1]: dart.fieldType(dart.nullable(core.Map)),
  [_flow]: dart.fieldType(dart.nullable(developer.Flow))
}));
developer.invokeExtension = function _invokeExtension(methodName, encodedJson) {
  if (methodName == null) dart.nullFailed(L98, 77, 25, "methodName");
  if (encodedJson == null) dart.nullFailed(L98, 77, 44, "encodedJson");
  return new dart.global.Promise((resolve, reject) => {
    if (resolve == null) dart.nullFailed(L98, 80, 25, "resolve");
    if (reject == null) dart.nullFailed(L98, 80, 51, "reject");
    return async.async(core.Null, function*() {
      try {
        let method = dart.nullCheck(developer._lookupExtension(methodName));
        let parameters = core.Map.as(convert.json.decode(encodedJson))[$cast](core.String, core.String);
        let result = (yield method(methodName, parameters));
        resolve(result[_toString$]());
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (core.Object.is(e)) {
          reject(dart.str(e));
        } else
          throw e$;
      }
    });
  });
};
developer.debugger = function $debugger(opts) {
  let when = opts && 'when' in opts ? opts.when : true;
  if (when == null) dart.nullFailed(L98, 16, 21, "when");
  let message = opts && 'message' in opts ? opts.message : null;
  if (dart.test(when)) {
    debugger;
  }
  return when;
};
developer.inspect = function inspect(object) {
  console.debug("dart.developer.inspect", object);
  return object;
};
developer.log = function log(message, opts) {
  if (message == null) dart.nullFailed(L98, 32, 17, "message");
  let time = opts && 'time' in opts ? opts.time : null;
  let sequenceNumber = opts && 'sequenceNumber' in opts ? opts.sequenceNumber : null;
  let level = opts && 'level' in opts ? opts.level : 0;
  if (level == null) dart.nullFailed(L98, 35, 9, "level");
  let name = opts && 'name' in opts ? opts.name : "";
  if (name == null) dart.nullFailed(L98, 36, 12, "name");
  let zone = opts && 'zone' in opts ? opts.zone : null;
  let error = opts && 'error' in opts ? opts.error : null;
  let stackTrace = opts && 'stackTrace' in opts ? opts.stackTrace : null;
  let items = {message: message, name: name, level: level};
  if (time != null) items.time = time;
  if (sequenceNumber != null) {
    items.sequenceNumber = sequenceNumber;
  }
  if (zone != null) items.zone = zone;
  if (error != null) items.error = error;
  if (stackTrace != null) items.stackTrace = stackTrace;
  console.debug("dart.developer.log", items);
};
developer.registerExtension = function registerExtension$(method, handler) {
  if (method == null) dart.nullFailed(L100, 130, 31, "method");
  if (handler == null) dart.nullFailed(L100, 130, 63, "handler");
  core.ArgumentError.checkNotNull(core.String, method, "method");
  if (!method[$startsWith]("ext.")) {
    dart.throw(new core.ArgumentError.value(method, "method", "Must begin with ext."));
  }
  if (developer._lookupExtension(method) != null) {
    dart.throw(new core.ArgumentError.new(dart.str("Extension already registered: ") + dart.str(method)));
  }
  core.ArgumentError.checkNotNull(StringAndMapOfString$StringToFutureOfServiceExtensionResponse(), handler, "handler");
  developer._registerExtension(method, handler);
};
developer.postEvent = function postEvent(eventKind, eventData) {
  if (eventKind == null) dart.nullFailed(L100, 146, 23, "eventKind");
  if (eventData == null) dart.nullFailed(L100, 146, 38, "eventData");
  core.ArgumentError.checkNotNull(core.String, eventKind, "eventKind");
  core.ArgumentError.checkNotNull(core.Map, eventData, "eventData");
  let eventDataAsString = convert.json.encode(eventData);
  developer._postEvent(eventKind, eventDataAsString);
};
developer._postEvent = function _postEvent(eventKind, eventData) {
  if (eventKind == null) dart.nullFailed(L98, 94, 24, "eventKind");
  if (eventData == null) dart.nullFailed(L98, 94, 42, "eventData");
  console.debug("dart.developer.postEvent", eventKind, eventData);
};
developer._lookupExtension = function _lookupExtension(method) {
  if (method == null) dart.nullFailed(L98, 56, 50, "method");
  return developer._extensions[$_get](method);
};
developer._registerExtension = function _registerExtension(method, handler) {
  if (method == null) dart.nullFailed(L98, 61, 27, "method");
  if (handler == null) dart.nullFailed(L98, 61, 59, "handler");
  developer._extensions[$_set](method, handler);
  console.debug("dart.developer.registerExtension", method);
};
developer.getCurrentTag = function getCurrentTag() {
  return developer._currentTag;
};
developer._getServerInfo = function _getServerInfo(sendPort) {
  if (sendPort == null) dart.nullFailed(L98, 145, 30, "sendPort");
  sendPort.send(null);
};
developer._webServerControl = function _webServerControl(sendPort, enable, silenceOutput) {
  if (sendPort == null) dart.nullFailed(L98, 150, 33, "sendPort");
  if (enable == null) dart.nullFailed(L98, 150, 48, "enable");
  sendPort.send(null);
};
developer._getServiceMajorVersion = function _getServiceMajorVersion() {
  return 0;
};
developer._getServiceMinorVersion = function _getServiceMinorVersion() {
  return 0;
};
developer._getIsolateIDFromSendPort = function _getIsolateIDFromSendPort(sendPort) {
  if (sendPort == null) dart.nullFailed(L98, 155, 44, "sendPort");
  return null;
};
developer._argumentsAsJson = function _argumentsAsJson($arguments) {
  if ($arguments == null || $arguments[$length] === 0) {
    return "{}";
  }
  return convert.json.encode($arguments);
};
developer._isDartStreamEnabled = function _isDartStreamEnabled() {
  return false;
};
developer._getNextAsyncId = function _getNextAsyncId() {
  return 0;
};
developer._getTraceClock = function _getTraceClock() {
  let t166;
  t166 = developer._clockValue;
  developer._clockValue = dart.notNull(t166) + 1;
  return t166;
};
developer._reportTaskEvent = function _reportTaskEvent(taskId, phase, category, name, argumentsAsJson) {
  if (taskId == null) dart.nullFailed(L98, 129, 27, "taskId");
  if (phase == null) dart.nullFailed(L98, 129, 42, "phase");
  if (category == null) dart.nullFailed(L98, 129, 56, "category");
  if (name == null) dart.nullFailed(L98, 129, 73, "name");
  if (argumentsAsJson == null) dart.nullFailed(L98, 130, 12, "argumentsAsJson");
};
developer._reportFlowEvent = function _reportFlowEvent(category, name, type, id, argumentsAsJson) {
  if (category == null) dart.nullFailed(L98, 114, 12, "category");
  if (name == null) dart.nullFailed(L98, 114, 29, "name");
  if (type == null) dart.nullFailed(L98, 114, 39, "type");
  if (id == null) dart.nullFailed(L98, 114, 49, "id");
  if (argumentsAsJson == null) dart.nullFailed(L98, 114, 60, "argumentsAsJson");
};
developer._reportInstantEvent = function _reportInstantEvent(category, name, argumentsAsJson) {
  if (category == null) dart.nullFailed(L98, 119, 33, "category");
  if (name == null) dart.nullFailed(L98, 119, 50, "name");
  if (argumentsAsJson == null) dart.nullFailed(L98, 119, 63, "argumentsAsJson");
};
dart.defineLazy(developer, {
  /*developer._extensions*/get _extensions() {
    return new (IdentityMapOfString$StringAndMapOfString$StringToFutureOfServiceExtensionResponse()).new();
  },
  /*developer._clockValue*/get _clockValue() {
    return 0;
  },
  set _clockValue(_) {},
  /*developer._currentTag*/get _currentTag() {
    return developer._FakeUserTag._defaultTag;
  },
  set _currentTag(_) {},
  /*developer._hasTimeline*/get _hasTimeline() {
    return true;
  }
}, false);
io.IOException = class IOException extends core.Object {
  toString() {
    return "IOException";
  }
};
(io.IOException.new = function() {
  ;
}).prototype = io.IOException.prototype;
dart.addTypeTests(io.IOException);
dart.addTypeCaches(io.IOException);
io.IOException[dart.implements] = () => [core.Exception];
dart.setLibraryUri(io.IOException, L104);
dart.defineExtensionMethods(io.IOException, ['toString']);
var message$2 = dart.privateName(io, "OSError.message");
var errorCode$0 = dart.privateName(io, "OSError.errorCode");
io.OSError = class OSError extends core.Object {
  get message() {
    return this[message$2];
  }
  set message(value) {
    super.message = value;
  }
  get errorCode() {
    return this[errorCode$0];
  }
  set errorCode(value) {
    super.errorCode = value;
  }
  toString() {
    let t166, t166$, t166$0;
    let sb = new core.StringBuffer.new();
    sb.write("OS Error");
    if (this.message[$isNotEmpty]) {
      t166 = sb;
      (() => {
        t166.write(": ");
        t166.write(this.message);
        return t166;
      })();
      if (this.errorCode !== -1) {
        t166$ = sb;
        (() => {
          t166$.write(", errno = ");
          t166$.write(dart.toString(this.errorCode));
          return t166$;
        })();
      }
    } else if (this.errorCode !== -1) {
      t166$0 = sb;
      (() => {
        t166$0.write(": errno = ");
        t166$0.write(dart.toString(this.errorCode));
        return t166$0;
      })();
    }
    return sb.toString();
  }
};
(io.OSError.new = function(message = "", errorCode = -1) {
  if (message == null) dart.nullFailed(L105, 69, 23, "message");
  if (errorCode == null) dart.nullFailed(L105, 69, 42, "errorCode");
  this[message$2] = message;
  this[errorCode$0] = errorCode;
  ;
}).prototype = io.OSError.prototype;
dart.addTypeTests(io.OSError);
dart.addTypeCaches(io.OSError);
io.OSError[dart.implements] = () => [core.Exception];
dart.setLibraryUri(io.OSError, L104);
dart.setFieldSignature(io.OSError, () => ({
  __proto__: dart.getFields(io.OSError.__proto__),
  message: dart.finalFieldType(core.String),
  errorCode: dart.finalFieldType(core.int)
}));
dart.defineExtensionMethods(io.OSError, ['toString']);
dart.defineLazy(io.OSError, {
  /*io.OSError.noErrorCode*/get noErrorCode() {
    return -1;
  }
}, false);
io._BufferAndStart = class _BufferAndStart extends core.Object {};
(io._BufferAndStart.new = function(buffer, start) {
  if (buffer == null) dart.nullFailed(L105, 91, 24, "buffer");
  if (start == null) dart.nullFailed(L105, 91, 37, "start");
  this.buffer = buffer;
  this.start = start;
  ;
}).prototype = io._BufferAndStart.prototype;
dart.addTypeTests(io._BufferAndStart);
dart.addTypeCaches(io._BufferAndStart);
dart.setLibraryUri(io._BufferAndStart, L104);
dart.setFieldSignature(io._BufferAndStart, () => ({
  __proto__: dart.getFields(io._BufferAndStart.__proto__),
  buffer: dart.fieldType(core.List$(core.int)),
  start: dart.fieldType(core.int)
}));
io._IOCrypto = class _IOCrypto extends core.Object {
  static getRandomBytes(count) {
    if (count == null) dart.nullFailed(L106, 225, 39, "count");
    dart.throw(new core.UnsupportedError.new("_IOCrypto.getRandomBytes"));
  }
};
(io._IOCrypto.new = function() {
  ;
}).prototype = io._IOCrypto.prototype;
dart.addTypeTests(io._IOCrypto);
dart.addTypeCaches(io._IOCrypto);
dart.setLibraryUri(io._IOCrypto, L104);
io.ZLibOption = class ZLibOption extends core.Object {};
(io.ZLibOption.new = function() {
  ;
}).prototype = io.ZLibOption.prototype;
dart.addTypeTests(io.ZLibOption);
dart.addTypeCaches(io.ZLibOption);
dart.setLibraryUri(io.ZLibOption, L104);
dart.defineLazy(io.ZLibOption, {
  /*io.ZLibOption.minWindowBits*/get minWindowBits() {
    return 8;
  },
  /*io.ZLibOption.MIN_WINDOW_BITS*/get MIN_WINDOW_BITS() {
    return 8;
  },
  /*io.ZLibOption.maxWindowBits*/get maxWindowBits() {
    return 15;
  },
  /*io.ZLibOption.MAX_WINDOW_BITS*/get MAX_WINDOW_BITS() {
    return 15;
  },
  /*io.ZLibOption.defaultWindowBits*/get defaultWindowBits() {
    return 15;
  },
  /*io.ZLibOption.DEFAULT_WINDOW_BITS*/get DEFAULT_WINDOW_BITS() {
    return 15;
  },
  /*io.ZLibOption.minLevel*/get minLevel() {
    return -1;
  },
  /*io.ZLibOption.MIN_LEVEL*/get MIN_LEVEL() {
    return -1;
  },
  /*io.ZLibOption.maxLevel*/get maxLevel() {
    return 9;
  },
  /*io.ZLibOption.MAX_LEVEL*/get MAX_LEVEL() {
    return 9;
  },
  /*io.ZLibOption.defaultLevel*/get defaultLevel() {
    return 6;
  },
  /*io.ZLibOption.DEFAULT_LEVEL*/get DEFAULT_LEVEL() {
    return 6;
  },
  /*io.ZLibOption.minMemLevel*/get minMemLevel() {
    return 1;
  },
  /*io.ZLibOption.MIN_MEM_LEVEL*/get MIN_MEM_LEVEL() {
    return 1;
  },
  /*io.ZLibOption.maxMemLevel*/get maxMemLevel() {
    return 9;
  },
  /*io.ZLibOption.MAX_MEM_LEVEL*/get MAX_MEM_LEVEL() {
    return 9;
  },
  /*io.ZLibOption.defaultMemLevel*/get defaultMemLevel() {
    return 8;
  },
  /*io.ZLibOption.DEFAULT_MEM_LEVEL*/get DEFAULT_MEM_LEVEL() {
    return 8;
  },
  /*io.ZLibOption.strategyFiltered*/get strategyFiltered() {
    return 1;
  },
  /*io.ZLibOption.STRATEGY_FILTERED*/get STRATEGY_FILTERED() {
    return 1;
  },
  /*io.ZLibOption.strategyHuffmanOnly*/get strategyHuffmanOnly() {
    return 2;
  },
  /*io.ZLibOption.STRATEGY_HUFFMAN_ONLY*/get STRATEGY_HUFFMAN_ONLY() {
    return 2;
  },
  /*io.ZLibOption.strategyRle*/get strategyRle() {
    return 3;
  },
  /*io.ZLibOption.STRATEGY_RLE*/get STRATEGY_RLE() {
    return 3;
  },
  /*io.ZLibOption.strategyFixed*/get strategyFixed() {
    return 4;
  },
  /*io.ZLibOption.STRATEGY_FIXED*/get STRATEGY_FIXED() {
    return 4;
  },
  /*io.ZLibOption.strategyDefault*/get strategyDefault() {
    return 0;
  },
  /*io.ZLibOption.STRATEGY_DEFAULT*/get STRATEGY_DEFAULT() {
    return 0;
  }
}, false);
var gzip$ = dart.privateName(io, "ZLibCodec.gzip");
var level$ = dart.privateName(io, "ZLibCodec.level");
var memLevel$ = dart.privateName(io, "ZLibCodec.memLevel");
var strategy$ = dart.privateName(io, "ZLibCodec.strategy");
var windowBits$ = dart.privateName(io, "ZLibCodec.windowBits");
var raw$ = dart.privateName(io, "ZLibCodec.raw");
var dictionary$ = dart.privateName(io, "ZLibCodec.dictionary");
io.ZLibCodec = class ZLibCodec extends convert.Codec$(core.List$(core.int), core.List$(core.int)) {
  get gzip() {
    return this[gzip$];
  }
  set gzip(value) {
    super.gzip = value;
  }
  get level() {
    return this[level$];
  }
  set level(value) {
    super.level = value;
  }
  get memLevel() {
    return this[memLevel$];
  }
  set memLevel(value) {
    super.memLevel = value;
  }
  get strategy() {
    return this[strategy$];
  }
  set strategy(value) {
    super.strategy = value;
  }
  get windowBits() {
    return this[windowBits$];
  }
  set windowBits(value) {
    super.windowBits = value;
  }
  get raw() {
    return this[raw$];
  }
  set raw(value) {
    super.raw = value;
  }
  get dictionary() {
    return this[dictionary$];
  }
  set dictionary(value) {
    super.dictionary = value;
  }
  get encoder() {
    return new io.ZLibEncoder.new({gzip: false, level: this.level, windowBits: this.windowBits, memLevel: this.memLevel, strategy: this.strategy, dictionary: this.dictionary, raw: this.raw});
  }
  get decoder() {
    return new io.ZLibDecoder.new({windowBits: this.windowBits, dictionary: this.dictionary, raw: this.raw});
  }
};
(io.ZLibCodec.new = function(opts) {
  let level = opts && 'level' in opts ? opts.level : 6;
  if (level == null) dart.nullFailed(L107, 159, 13, "level");
  let windowBits = opts && 'windowBits' in opts ? opts.windowBits : 15;
  if (windowBits == null) dart.nullFailed(L107, 160, 12, "windowBits");
  let memLevel = opts && 'memLevel' in opts ? opts.memLevel : 8;
  if (memLevel == null) dart.nullFailed(L107, 161, 12, "memLevel");
  let strategy = opts && 'strategy' in opts ? opts.strategy : 0;
  if (strategy == null) dart.nullFailed(L107, 162, 12, "strategy");
  let dictionary = opts && 'dictionary' in opts ? opts.dictionary : null;
  let raw = opts && 'raw' in opts ? opts.raw : false;
  if (raw == null) dart.nullFailed(L107, 164, 12, "raw");
  let gzip = opts && 'gzip' in opts ? opts.gzip : false;
  if (gzip == null) dart.nullFailed(L107, 165, 12, "gzip");
  this[level$] = level;
  this[windowBits$] = windowBits;
  this[memLevel$] = memLevel;
  this[strategy$] = strategy;
  this[dictionary$] = dictionary;
  this[raw$] = raw;
  this[gzip$] = gzip;
  io.ZLibCodec.__proto__.new.call(this);
  io._validateZLibeLevel(this.level);
  io._validateZLibMemLevel(this.memLevel);
  io._validateZLibStrategy(this.strategy);
  io._validateZLibWindowBits(this.windowBits);
}).prototype = io.ZLibCodec.prototype;
(io.ZLibCodec._default = function() {
  this[level$] = 6;
  this[windowBits$] = 15;
  this[memLevel$] = 8;
  this[strategy$] = 0;
  this[raw$] = false;
  this[gzip$] = false;
  this[dictionary$] = null;
  io.ZLibCodec.__proto__.new.call(this);
  ;
}).prototype = io.ZLibCodec.prototype;
dart.addTypeTests(io.ZLibCodec);
dart.addTypeCaches(io.ZLibCodec);
dart.setGetterSignature(io.ZLibCodec, () => ({
  __proto__: dart.getGetters(io.ZLibCodec.__proto__),
  encoder: io.ZLibEncoder,
  decoder: io.ZLibDecoder
}));
dart.setLibraryUri(io.ZLibCodec, L104);
dart.setFieldSignature(io.ZLibCodec, () => ({
  __proto__: dart.getFields(io.ZLibCodec.__proto__),
  gzip: dart.finalFieldType(core.bool),
  level: dart.finalFieldType(core.int),
  memLevel: dart.finalFieldType(core.int),
  strategy: dart.finalFieldType(core.int),
  windowBits: dart.finalFieldType(core.int),
  raw: dart.finalFieldType(core.bool),
  dictionary: dart.finalFieldType(dart.nullable(core.List$(core.int)))
}));
var gzip$0 = dart.privateName(io, "GZipCodec.gzip");
var level$0 = dart.privateName(io, "GZipCodec.level");
var memLevel$0 = dart.privateName(io, "GZipCodec.memLevel");
var strategy$0 = dart.privateName(io, "GZipCodec.strategy");
var windowBits$0 = dart.privateName(io, "GZipCodec.windowBits");
var dictionary$0 = dart.privateName(io, "GZipCodec.dictionary");
var raw$0 = dart.privateName(io, "GZipCodec.raw");
io.GZipCodec = class GZipCodec extends convert.Codec$(core.List$(core.int), core.List$(core.int)) {
  get gzip() {
    return this[gzip$0];
  }
  set gzip(value) {
    super.gzip = value;
  }
  get level() {
    return this[level$0];
  }
  set level(value) {
    super.level = value;
  }
  get memLevel() {
    return this[memLevel$0];
  }
  set memLevel(value) {
    super.memLevel = value;
  }
  get strategy() {
    return this[strategy$0];
  }
  set strategy(value) {
    super.strategy = value;
  }
  get windowBits() {
    return this[windowBits$0];
  }
  set windowBits(value) {
    super.windowBits = value;
  }
  get dictionary() {
    return this[dictionary$0];
  }
  set dictionary(value) {
    super.dictionary = value;
  }
  get raw() {
    return this[raw$0];
  }
  set raw(value) {
    super.raw = value;
  }
  get encoder() {
    return new io.ZLibEncoder.new({gzip: true, level: this.level, windowBits: this.windowBits, memLevel: this.memLevel, strategy: this.strategy, dictionary: this.dictionary, raw: this.raw});
  }
  get decoder() {
    return new io.ZLibDecoder.new({windowBits: this.windowBits, dictionary: this.dictionary, raw: this.raw});
  }
};
(io.GZipCodec.new = function(opts) {
  let level = opts && 'level' in opts ? opts.level : 6;
  if (level == null) dart.nullFailed(L107, 276, 13, "level");
  let windowBits = opts && 'windowBits' in opts ? opts.windowBits : 15;
  if (windowBits == null) dart.nullFailed(L107, 277, 12, "windowBits");
  let memLevel = opts && 'memLevel' in opts ? opts.memLevel : 8;
  if (memLevel == null) dart.nullFailed(L107, 278, 12, "memLevel");
  let strategy = opts && 'strategy' in opts ? opts.strategy : 0;
  if (strategy == null) dart.nullFailed(L107, 279, 12, "strategy");
  let dictionary = opts && 'dictionary' in opts ? opts.dictionary : null;
  let raw = opts && 'raw' in opts ? opts.raw : false;
  if (raw == null) dart.nullFailed(L107, 281, 12, "raw");
  let gzip = opts && 'gzip' in opts ? opts.gzip : true;
  if (gzip == null) dart.nullFailed(L107, 282, 12, "gzip");
  this[level$0] = level;
  this[windowBits$0] = windowBits;
  this[memLevel$0] = memLevel;
  this[strategy$0] = strategy;
  this[dictionary$0] = dictionary;
  this[raw$0] = raw;
  this[gzip$0] = gzip;
  io.GZipCodec.__proto__.new.call(this);
  io._validateZLibeLevel(this.level);
  io._validateZLibMemLevel(this.memLevel);
  io._validateZLibStrategy(this.strategy);
  io._validateZLibWindowBits(this.windowBits);
}).prototype = io.GZipCodec.prototype;
(io.GZipCodec._default = function() {
  this[level$0] = 6;
  this[windowBits$0] = 15;
  this[memLevel$0] = 8;
  this[strategy$0] = 0;
  this[raw$0] = false;
  this[gzip$0] = true;
  this[dictionary$0] = null;
  io.GZipCodec.__proto__.new.call(this);
  ;
}).prototype = io.GZipCodec.prototype;
dart.addTypeTests(io.GZipCodec);
dart.addTypeCaches(io.GZipCodec);
dart.setGetterSignature(io.GZipCodec, () => ({
  __proto__: dart.getGetters(io.GZipCodec.__proto__),
  encoder: io.ZLibEncoder,
  decoder: io.ZLibDecoder
}));
dart.setLibraryUri(io.GZipCodec, L104);
dart.setFieldSignature(io.GZipCodec, () => ({
  __proto__: dart.getFields(io.GZipCodec.__proto__),
  gzip: dart.finalFieldType(core.bool),
  level: dart.finalFieldType(core.int),
  memLevel: dart.finalFieldType(core.int),
  strategy: dart.finalFieldType(core.int),
  windowBits: dart.finalFieldType(core.int),
  dictionary: dart.finalFieldType(dart.nullable(core.List$(core.int))),
  raw: dart.finalFieldType(core.bool)
}));
var gzip$1 = dart.privateName(io, "ZLibEncoder.gzip");
var level$1 = dart.privateName(io, "ZLibEncoder.level");
var memLevel$1 = dart.privateName(io, "ZLibEncoder.memLevel");
var strategy$1 = dart.privateName(io, "ZLibEncoder.strategy");
var windowBits$1 = dart.privateName(io, "ZLibEncoder.windowBits");
var dictionary$1 = dart.privateName(io, "ZLibEncoder.dictionary");
var raw$1 = dart.privateName(io, "ZLibEncoder.raw");
io.ZLibEncoder = class ZLibEncoder extends convert.Converter$(core.List$(core.int), core.List$(core.int)) {
  get gzip() {
    return this[gzip$1];
  }
  set gzip(value) {
    super.gzip = value;
  }
  get level() {
    return this[level$1];
  }
  set level(value) {
    super.level = value;
  }
  get memLevel() {
    return this[memLevel$1];
  }
  set memLevel(value) {
    super.memLevel = value;
  }
  get strategy() {
    return this[strategy$1];
  }
  set strategy(value) {
    super.strategy = value;
  }
  get windowBits() {
    return this[windowBits$1];
  }
  set windowBits(value) {
    super.windowBits = value;
  }
  get dictionary() {
    return this[dictionary$1];
  }
  set dictionary(value) {
    super.dictionary = value;
  }
  get raw() {
    return this[raw$1];
  }
  set raw(value) {
    super.raw = value;
  }
  convert(bytes) {
    let t166;
    ListOfint().as(bytes);
    if (bytes == null) dart.nullFailed(L107, 400, 31, "bytes");
    let sink = new io._BufferSink.new();
    t166 = this.startChunkedConversion(sink);
    (() => {
      t166.add(bytes);
      t166.close();
      return t166;
    })();
    return sink.builder.takeBytes();
  }
  startChunkedConversion(sink) {
    SinkOfListOfint().as(sink);
    if (sink == null) dart.nullFailed(L107, 413, 61, "sink");
    if (!convert.ByteConversionSink.is(sink)) {
      sink = new convert._ByteAdapterSink.new(sink);
    }
    return new io._ZLibEncoderSink.__(sink, this.gzip, this.level, this.windowBits, this.memLevel, this.strategy, this.dictionary, this.raw);
  }
};
(io.ZLibEncoder.new = function(opts) {
  let gzip = opts && 'gzip' in opts ? opts.gzip : false;
  if (gzip == null) dart.nullFailed(L107, 383, 13, "gzip");
  let level = opts && 'level' in opts ? opts.level : 6;
  if (level == null) dart.nullFailed(L107, 384, 12, "level");
  let windowBits = opts && 'windowBits' in opts ? opts.windowBits : 15;
  if (windowBits == null) dart.nullFailed(L107, 385, 12, "windowBits");
  let memLevel = opts && 'memLevel' in opts ? opts.memLevel : 8;
  if (memLevel == null) dart.nullFailed(L107, 386, 12, "memLevel");
  let strategy = opts && 'strategy' in opts ? opts.strategy : 0;
  if (strategy == null) dart.nullFailed(L107, 387, 12, "strategy");
  let dictionary = opts && 'dictionary' in opts ? opts.dictionary : null;
  let raw = opts && 'raw' in opts ? opts.raw : false;
  if (raw == null) dart.nullFailed(L107, 389, 12, "raw");
  this[gzip$1] = gzip;
  this[level$1] = level;
  this[windowBits$1] = windowBits;
  this[memLevel$1] = memLevel;
  this[strategy$1] = strategy;
  this[dictionary$1] = dictionary;
  this[raw$1] = raw;
  io.ZLibEncoder.__proto__.new.call(this);
  io._validateZLibeLevel(this.level);
  io._validateZLibMemLevel(this.memLevel);
  io._validateZLibStrategy(this.strategy);
  io._validateZLibWindowBits(this.windowBits);
}).prototype = io.ZLibEncoder.prototype;
dart.addTypeTests(io.ZLibEncoder);
dart.addTypeCaches(io.ZLibEncoder);
dart.setMethodSignature(io.ZLibEncoder, () => ({
  __proto__: dart.getMethods(io.ZLibEncoder.__proto__),
  convert: dart.fnType(core.List$(core.int), [dart.nullable(core.Object)]),
  startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)])
}));
dart.setLibraryUri(io.ZLibEncoder, L104);
dart.setFieldSignature(io.ZLibEncoder, () => ({
  __proto__: dart.getFields(io.ZLibEncoder.__proto__),
  gzip: dart.finalFieldType(core.bool),
  level: dart.finalFieldType(core.int),
  memLevel: dart.finalFieldType(core.int),
  strategy: dart.finalFieldType(core.int),
  windowBits: dart.finalFieldType(core.int),
  dictionary: dart.finalFieldType(dart.nullable(core.List$(core.int))),
  raw: dart.finalFieldType(core.bool)
}));
var windowBits$2 = dart.privateName(io, "ZLibDecoder.windowBits");
var dictionary$2 = dart.privateName(io, "ZLibDecoder.dictionary");
var raw$2 = dart.privateName(io, "ZLibDecoder.raw");
io.ZLibDecoder = class ZLibDecoder extends convert.Converter$(core.List$(core.int), core.List$(core.int)) {
  get windowBits() {
    return this[windowBits$2];
  }
  set windowBits(value) {
    super.windowBits = value;
  }
  get dictionary() {
    return this[dictionary$2];
  }
  set dictionary(value) {
    super.dictionary = value;
  }
  get raw() {
    return this[raw$2];
  }
  set raw(value) {
    super.raw = value;
  }
  convert(bytes) {
    let t166;
    ListOfint().as(bytes);
    if (bytes == null) dart.nullFailed(L107, 462, 31, "bytes");
    let sink = new io._BufferSink.new();
    t166 = this.startChunkedConversion(sink);
    (() => {
      t166.add(bytes);
      t166.close();
      return t166;
    })();
    return sink.builder.takeBytes();
  }
  startChunkedConversion(sink) {
    SinkOfListOfint().as(sink);
    if (sink == null) dart.nullFailed(L107, 475, 61, "sink");
    if (!convert.ByteConversionSink.is(sink)) {
      sink = new convert._ByteAdapterSink.new(sink);
    }
    return new io._ZLibDecoderSink.__(sink, this.windowBits, this.dictionary, this.raw);
  }
};
(io.ZLibDecoder.new = function(opts) {
  let windowBits = opts && 'windowBits' in opts ? opts.windowBits : 15;
  if (windowBits == null) dart.nullFailed(L107, 452, 13, "windowBits");
  let dictionary = opts && 'dictionary' in opts ? opts.dictionary : null;
  let raw = opts && 'raw' in opts ? opts.raw : false;
  if (raw == null) dart.nullFailed(L107, 454, 12, "raw");
  this[windowBits$2] = windowBits;
  this[dictionary$2] = dictionary;
  this[raw$2] = raw;
  io.ZLibDecoder.__proto__.new.call(this);
  io._validateZLibWindowBits(this.windowBits);
}).prototype = io.ZLibDecoder.prototype;
dart.addTypeTests(io.ZLibDecoder);
dart.addTypeCaches(io.ZLibDecoder);
dart.setMethodSignature(io.ZLibDecoder, () => ({
  __proto__: dart.getMethods(io.ZLibDecoder.__proto__),
  convert: dart.fnType(core.List$(core.int), [dart.nullable(core.Object)]),
  startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)])
}));
dart.setLibraryUri(io.ZLibDecoder, L104);
dart.setFieldSignature(io.ZLibDecoder, () => ({
  __proto__: dart.getFields(io.ZLibDecoder.__proto__),
  windowBits: dart.finalFieldType(core.int),
  dictionary: dart.finalFieldType(dart.nullable(core.List$(core.int))),
  raw: dart.finalFieldType(core.bool)
}));
io.RawZLibFilter = class RawZLibFilter extends core.Object {
  static deflateFilter(opts) {
    let gzip = opts && 'gzip' in opts ? opts.gzip : false;
    if (gzip == null) dart.nullFailed(L107, 492, 10, "gzip");
    let level = opts && 'level' in opts ? opts.level : 6;
    if (level == null) dart.nullFailed(L107, 493, 9, "level");
    let windowBits = opts && 'windowBits' in opts ? opts.windowBits : 15;
    if (windowBits == null) dart.nullFailed(L107, 494, 9, "windowBits");
    let memLevel = opts && 'memLevel' in opts ? opts.memLevel : 8;
    if (memLevel == null) dart.nullFailed(L107, 495, 9, "memLevel");
    let strategy = opts && 'strategy' in opts ? opts.strategy : 0;
    if (strategy == null) dart.nullFailed(L107, 496, 9, "strategy");
    let dictionary = opts && 'dictionary' in opts ? opts.dictionary : null;
    let raw = opts && 'raw' in opts ? opts.raw : false;
    if (raw == null) dart.nullFailed(L107, 498, 10, "raw");
    return io.RawZLibFilter._makeZLibDeflateFilter(gzip, level, windowBits, memLevel, strategy, dictionary, raw);
  }
  static inflateFilter(opts) {
    let windowBits = opts && 'windowBits' in opts ? opts.windowBits : 15;
    if (windowBits == null) dart.nullFailed(L107, 509, 9, "windowBits");
    let dictionary = opts && 'dictionary' in opts ? opts.dictionary : null;
    let raw = opts && 'raw' in opts ? opts.raw : false;
    if (raw == null) dart.nullFailed(L107, 511, 10, "raw");
    return io.RawZLibFilter._makeZLibInflateFilter(windowBits, dictionary, raw);
  }
  static _makeZLibDeflateFilter(gzip, level, windowBits, memLevel, strategy, dictionary, raw) {
    if (gzip == null) dart.nullFailed(L106, 614, 12, "gzip");
    if (level == null) dart.nullFailed(L106, 615, 11, "level");
    if (windowBits == null) dart.nullFailed(L106, 616, 11, "windowBits");
    if (memLevel == null) dart.nullFailed(L106, 617, 11, "memLevel");
    if (strategy == null) dart.nullFailed(L106, 618, 11, "strategy");
    if (raw == null) dart.nullFailed(L106, 620, 12, "raw");
    dart.throw(new core.UnsupportedError.new("_newZLibDeflateFilter"));
  }
  static _makeZLibInflateFilter(windowBits, dictionary, raw) {
    if (windowBits == null) dart.nullFailed(L106, 626, 11, "windowBits");
    if (raw == null) dart.nullFailed(L106, 626, 51, "raw");
    dart.throw(new core.UnsupportedError.new("_newZLibInflateFilter"));
  }
};
(io.RawZLibFilter[dart.mixinNew] = function() {
}).prototype = io.RawZLibFilter.prototype;
dart.addTypeTests(io.RawZLibFilter);
dart.addTypeCaches(io.RawZLibFilter);
dart.setLibraryUri(io.RawZLibFilter, L104);
io._BufferSink = class _BufferSink extends convert.ByteConversionSink {
  add(chunk) {
    ListOfint().as(chunk);
    if (chunk == null) dart.nullFailed(L107, 548, 22, "chunk");
    this.builder.add(chunk);
  }
  addSlice(chunk, start, end, isLast) {
    if (chunk == null) dart.nullFailed(L107, 552, 27, "chunk");
    if (start == null) dart.nullFailed(L107, 552, 38, "start");
    if (end == null) dart.nullFailed(L107, 552, 49, "end");
    if (isLast == null) dart.nullFailed(L107, 552, 59, "isLast");
    if (typed_data.Uint8List.is(chunk)) {
      let list = chunk;
      this.builder.add(typed_data.Uint8List.view(list[$buffer], dart.notNull(list[$offsetInBytes]) + dart.notNull(start), dart.notNull(end) - dart.notNull(start)));
    } else {
      this.builder.add(chunk[$sublist](start, end));
    }
  }
  close() {
  }
};
(io._BufferSink.new = function() {
  this.builder = _internal.BytesBuilder.new({copy: false});
  io._BufferSink.__proto__.new.call(this);
  ;
}).prototype = io._BufferSink.prototype;
dart.addTypeTests(io._BufferSink);
dart.addTypeCaches(io._BufferSink);
dart.setMethodSignature(io._BufferSink, () => ({
  __proto__: dart.getMethods(io._BufferSink.__proto__),
  add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
  addSlice: dart.fnType(dart.void, [core.List$(core.int), core.int, core.int, core.bool]),
  close: dart.fnType(dart.void, [])
}));
dart.setLibraryUri(io._BufferSink, L104);
dart.setFieldSignature(io._BufferSink, () => ({
  __proto__: dart.getFields(io._BufferSink.__proto__),
  builder: dart.finalFieldType(_internal.BytesBuilder)
}));
var _closed = dart.privateName(io, "_closed");
var _empty = dart.privateName(io, "_empty");
var _sink$1 = dart.privateName(io, "_sink");
var _filter$ = dart.privateName(io, "_filter");
io._FilterSink = class _FilterSink extends convert.ByteConversionSink {
  add(data) {
    ListOfint().as(data);
    if (data == null) dart.nullFailed(L107, 596, 22, "data");
    this.addSlice(data, 0, data[$length], false);
  }
  addSlice(data, start, end, isLast) {
    if (data == null) dart.nullFailed(L107, 600, 27, "data");
    if (start == null) dart.nullFailed(L107, 600, 37, "start");
    if (end == null) dart.nullFailed(L107, 600, 48, "end");
    if (isLast == null) dart.nullFailed(L107, 600, 58, "isLast");
    core.ArgumentError.checkNotNull(core.int, end, "end");
    if (dart.test(this[_closed])) return;
    core.RangeError.checkValidRange(start, end, data[$length]);
    try {
      this[_empty] = false;
      let bufferAndStart = io._ensureFastAndSerializableByteData(data, start, end);
      this[_filter$].process(bufferAndStart.buffer, bufferAndStart.start, dart.notNull(end) - (dart.notNull(start) - dart.notNull(bufferAndStart.start)));
      let out = null;
      while (true) {
        let out = this[_filter$].processed({flush: false});
        if (out == null) break;
        this[_sink$1].add(out);
      }
    } catch (e$) {
      let e = dart.getThrown(e$);
      if (core.Object.is(e)) {
        this[_closed] = true;
        dart.rethrow(e$);
      } else
        throw e$;
    }
    if (dart.test(isLast)) this.close();
  }
  close() {
    if (dart.test(this[_closed])) return;
    if (dart.test(this[_empty])) this[_filter$].process(C86 || CT.C86, 0, 0);
    try {
      while (true) {
        let out = this[_filter$].processed({end: true});
        if (out == null) break;
        this[_sink$1].add(out);
      }
    } catch (e$) {
      let e = dart.getThrown(e$);
      if (core.Object.is(e)) {
        this[_closed] = true;
        dart.throw(e);
      } else
        throw e$;
    }
    this[_closed] = true;
    this[_sink$1].close();
  }
};
(io._FilterSink.new = function(_sink, _filter) {
  if (_sink == null) dart.nullFailed(L107, 594, 20, "_sink");
  if (_filter == null) dart.nullFailed(L107, 594, 32, "_filter");
  this[_closed] = false;
  this[_empty] = true;
  this[_sink$1] = _sink;
  this[_filter$] = _filter;
  io._FilterSink.__proto__.new.call(this);
  ;
}).prototype = io._FilterSink.prototype;
dart.addTypeTests(io._FilterSink);
dart.addTypeCaches(io._FilterSink);
dart.setMethodSignature(io._FilterSink, () => ({
  __proto__: dart.getMethods(io._FilterSink.__proto__),
  add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
  addSlice: dart.fnType(dart.void, [core.List$(core.int), core.int, core.int, core.bool]),
  close: dart.fnType(dart.void, [])
}));
dart.setLibraryUri(io._FilterSink, L104);
dart.setFieldSignature(io._FilterSink, () => ({
  __proto__: dart.getFields(io._FilterSink.__proto__),
  [_filter$]: dart.finalFieldType(io.RawZLibFilter),
  [_sink$1]: dart.finalFieldType(convert.ByteConversionSink),
  [_closed]: dart.fieldType(core.bool),
  [_empty]: dart.fieldType(core.bool)
}));
io._ZLibEncoderSink = class _ZLibEncoderSink extends io._FilterSink {};
(io._ZLibEncoderSink.__ = function(sink, gzip, level, windowBits, memLevel, strategy, dictionary, raw) {
  if (sink == null) dart.nullFailed(L107, 567, 26, "sink");
  if (gzip == null) dart.nullFailed(L107, 568, 12, "gzip");
  if (level == null) dart.nullFailed(L107, 569, 11, "level");
  if (windowBits == null) dart.nullFailed(L107, 570, 11, "windowBits");
  if (memLevel == null) dart.nullFailed(L107, 571, 11, "memLevel");
  if (strategy == null) dart.nullFailed(L107, 572, 11, "strategy");
  if (raw == null) dart.nullFailed(L107, 574, 12, "raw");
  io._ZLibEncoderSink.__proto__.new.call(this, sink, io.RawZLibFilter._makeZLibDeflateFilter(gzip, level, windowBits, memLevel, strategy, dictionary, raw));
  ;
}).prototype = io._ZLibEncoderSink.prototype;
dart.addTypeTests(io._ZLibEncoderSink);
dart.addTypeCaches(io._ZLibEncoderSink);
dart.setLibraryUri(io._ZLibEncoderSink, L104);
io._ZLibDecoderSink = class _ZLibDecoderSink extends io._FilterSink {};
(io._ZLibDecoderSink.__ = function(sink, windowBits, dictionary, raw) {
  if (sink == null) dart.nullFailed(L107, 583, 26, "sink");
  if (windowBits == null) dart.nullFailed(L107, 583, 36, "windowBits");
  if (raw == null) dart.nullFailed(L107, 583, 76, "raw");
  io._ZLibDecoderSink.__proto__.new.call(this, sink, io.RawZLibFilter._makeZLibInflateFilter(windowBits, dictionary, raw));
  ;
}).prototype = io._ZLibDecoderSink.prototype;
dart.addTypeTests(io._ZLibDecoderSink);
dart.addTypeCaches(io._ZLibDecoderSink);
dart.setLibraryUri(io._ZLibDecoderSink, L104);
io.Directory = class Directory extends core.Object {
  static new(path) {
    if (path == null) dart.nullFailed(L108, 126, 28, "path");
    let overrides = io.IOOverrides.current;
    if (overrides == null) {
      return new io._Directory.new(path);
    }
    return overrides.createDirectory(path);
  }
  static fromRawPath(path) {
    if (path == null) dart.nullFailed(L108, 135, 43, "path");
    return new io._Directory.fromRawPath(path);
  }
  static fromUri(uri) {
    if (uri == null) dart.nullFailed(L108, 145, 33, "uri");
    return io.Directory.new(uri.toFilePath());
  }
  static get current() {
    let overrides = io.IOOverrides.current;
    if (overrides == null) {
      return io._Directory.current;
    }
    return overrides.getCurrentDirectory();
  }
  static set current(path) {
    let overrides = io.IOOverrides.current;
    if (overrides == null) {
      io._Directory.current = path;
      return;
    }
    overrides.setCurrentDirectory(core.String.as(path));
  }
  static get systemTemp() {
    let overrides = io.IOOverrides.current;
    if (overrides == null) {
      return io._Directory.systemTemp;
    }
    return overrides.getSystemTempDirectory();
  }
};
(io.Directory[dart.mixinNew] = function() {
}).prototype = io.Directory.prototype;
dart.addTypeTests(io.Directory);
dart.addTypeCaches(io.Directory);
io.Directory[dart.implements] = () => [io.FileSystemEntity];
dart.setLibraryUri(io.Directory, L104);
var _path$ = dart.privateName(io, "_path");
var _rawPath$ = dart.privateName(io, "_rawPath");
var _isErrorResponse = dart.privateName(io, "_isErrorResponse");
var _exceptionOrErrorFromResponse = dart.privateName(io, "_exceptionOrErrorFromResponse");
var _absolutePath = dart.privateName(io, "_absolutePath");
var _delete = dart.privateName(io, "_delete");
var _deleteSync = dart.privateName(io, "_deleteSync");
io.FileSystemEntity = class FileSystemEntity extends core.Object {
  get uri() {
    return core._Uri.file(this.path);
  }
  resolveSymbolicLinks() {
    return io._File._dispatchWithNamespace(6, [null, this[_rawPath$]]).then(core.String, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "Cannot resolve symbolic links", this.path));
      }
      return FutureOrOfString().as(response);
    }, dynamicToFutureOrOfString()));
  }
  resolveSymbolicLinksSync() {
    let result = io.FileSystemEntity._resolveSymbolicLinks(io._Namespace._namespace, this[_rawPath$]);
    io.FileSystemEntity._throwIfError(core.Object.as(result), "Cannot resolve symbolic links", this.path);
    return core.String.as(result);
  }
  stat() {
    return io.FileStat.stat(this.path);
  }
  statSync() {
    return io.FileStat.statSync(this.path);
  }
  delete(opts) {
    let recursive = opts && 'recursive' in opts ? opts.recursive : false;
    if (recursive == null) dart.nullFailed(L110, 436, 41, "recursive");
    return this[_delete]({recursive: recursive});
  }
  deleteSync(opts) {
    let recursive = opts && 'recursive' in opts ? opts.recursive : false;
    if (recursive == null) dart.nullFailed(L110, 455, 25, "recursive");
    return this[_deleteSync]({recursive: recursive});
  }
  watch(opts) {
    let events = opts && 'events' in opts ? opts.events : 15;
    if (events == null) dart.nullFailed(L110, 491, 12, "events");
    let recursive = opts && 'recursive' in opts ? opts.recursive : false;
    if (recursive == null) dart.nullFailed(L110, 491, 46, "recursive");
    let trimmedPath = io.FileSystemEntity._trimTrailingPathSeparators(this.path);
    let overrides = io.IOOverrides.current;
    if (overrides == null) {
      return io._FileSystemWatcher._watch(trimmedPath, events, recursive);
    }
    return overrides.fsWatch(trimmedPath, events, recursive);
  }
  static _identical(path1, path2) {
    if (path1 == null) dart.nullFailed(L110, 504, 41, "path1");
    if (path2 == null) dart.nullFailed(L110, 504, 55, "path2");
    return io._File._dispatchWithNamespace(28, [null, path1, path2]).then(core.bool, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, dart.str("Error in FileSystemEntity.identical(") + dart.str(path1) + dart.str(", ") + dart.str(path2) + dart.str(")"), ""));
      }
      return FutureOrOfbool().as(response);
    }, dynamicToFutureOrOfbool()));
  }
  static identical(path1, path2) {
    if (path1 == null) dart.nullFailed(L110, 529, 40, "path1");
    if (path2 == null) dart.nullFailed(L110, 529, 54, "path2");
    let overrides = io.IOOverrides.current;
    if (overrides == null) {
      return io.FileSystemEntity._identical(path1, path2);
    }
    return overrides.fseIdentical(path1, path2);
  }
  get isAbsolute() {
    return io.FileSystemEntity._isAbsolute(this.path);
  }
  static _isAbsolute(path) {
    if (path == null) dart.nullFailed(L110, 562, 34, "path");
    if (dart.test(io.Platform.isWindows)) {
      return path[$startsWith](io.FileSystemEntity._absoluteWindowsPathPattern);
    } else {
      return path[$startsWith]("/");
    }
  }
  get [_absolutePath]() {
    if (dart.test(this.isAbsolute)) return this.path;
    if (dart.test(io.Platform.isWindows)) return io.FileSystemEntity._absoluteWindowsPath(this.path);
    let current = io.Directory.current.path;
    if (current[$endsWith]("/")) {
      return dart.str(current) + dart.str(this.path);
    } else {
      return dart.str(current) + dart.str(io.Platform.pathSeparator) + dart.str(this.path);
    }
  }
  static _windowsDriveLetter(path) {
    if (path == null) dart.nullFailed(L110, 598, 41, "path");
    if (path[$isEmpty] || !path[$startsWith](":", 1)) return -1;
    let first = (path[$codeUnitAt](0) & ~32 >>> 0) >>> 0;
    if (first >= 65 && first <= 91) return first;
    return -1;
  }
  static _absoluteWindowsPath(path) {
    if (path == null) dart.nullFailed(L110, 606, 45, "path");
    if (!dart.test(io.Platform.isWindows)) dart.assertFailed(null, L110, 607, 12, "Platform.isWindows");
    if (!!dart.test(io.FileSystemEntity._isAbsolute(path))) dart.assertFailed(null, L110, 608, 12, "!_isAbsolute(path)");
    let current = io.Directory.current.path;
    if (path[$startsWith]("\\")) {
      if (!!path[$startsWith]("\\", 1)) dart.assertFailed(null, L110, 613, 14, "!path.startsWith(r'\\', 1)");
      let currentDrive = io.FileSystemEntity._windowsDriveLetter(current);
      if (dart.notNull(currentDrive) >= 0) {
        return dart.str(current[$_get](0)) + dart.str(":") + dart.str(path);
      }
      if (current[$startsWith]("\\\\")) {
        let serverEnd = current[$indexOf]("\\", 2);
        if (serverEnd >= 0) {
          let shareEnd = current[$indexOf]("\\", serverEnd + 1);
          if (shareEnd < 0) shareEnd = current.length;
          return dart.str(current[$substring](0, shareEnd)) + dart.str(path);
        }
      }
      return path;
    }
    let entityDrive = io.FileSystemEntity._windowsDriveLetter(path);
    if (dart.notNull(entityDrive) >= 0) {
      if (entityDrive != io.FileSystemEntity._windowsDriveLetter(current)) {
        return dart.str(path[$_get](0)) + dart.str(":\\") + dart.str(path);
      }
      path = path[$substring](2);
      if (!!path[$startsWith]("\\\\")) dart.assertFailed(null, L110, 650, 14, "!path.startsWith(r'\\\\')");
    }
    if (current[$endsWith]("\\") || current[$endsWith]("/")) {
      return dart.str(current) + dart.str(path);
    }
    return dart.str(current) + dart.str("\\") + dart.str(path);
  }
  static _identicalSync(path1, path2) {
    if (path1 == null) dart.nullFailed(L110, 658, 37, "path1");
    if (path2 == null) dart.nullFailed(L110, 658, 51, "path2");
    let result = io.FileSystemEntity._identicalNative(io._Namespace._namespace, path1, path2);
    io.FileSystemEntity._throwIfError(core.Object.as(result), "Error in FileSystemEntity.identicalSync");
    return core.bool.as(result);
  }
  static identicalSync(path1, path2) {
    if (path1 == null) dart.nullFailed(L110, 676, 36, "path1");
    if (path2 == null) dart.nullFailed(L110, 676, 50, "path2");
    let overrides = io.IOOverrides.current;
    if (overrides == null) {
      return io.FileSystemEntity._identicalSync(path1, path2);
    }
    return overrides.fseIdenticalSync(path1, path2);
  }
  static get isWatchSupported() {
    let overrides = io.IOOverrides.current;
    if (overrides == null) {
      return io._FileSystemWatcher.isSupported;
    }
    return overrides.fsWatchIsSupported();
  }
  static _toUtf8Array(s) {
    if (s == null) dart.nullFailed(L110, 699, 40, "s");
    return io.FileSystemEntity._toNullTerminatedUtf8Array(convert.utf8.encoder.convert(s));
  }
  static _toNullTerminatedUtf8Array(l) {
    if (l == null) dart.nullFailed(L110, 702, 57, "l");
    if (dart.test(l[$isNotEmpty]) && l[$last] !== 0) {
      let tmp = _native_typed_data.NativeUint8List.new(dart.notNull(l[$length]) + 1);
      tmp[$setRange](0, l[$length], l);
      return tmp;
    } else {
      return l;
    }
  }
  static _toStringFromUtf8Array(l) {
    if (l == null) dart.nullFailed(L110, 712, 50, "l");
    let nonNullTerminated = l;
    if (l[$last] === 0) {
      nonNullTerminated = typed_data.Uint8List.view(l[$buffer], l[$offsetInBytes], dart.notNull(l[$length]) - 1);
    }
    return convert.utf8.decode(nonNullTerminated, {allowMalformed: true});
  }
  static type(path, opts) {
    if (path == null) dart.nullFailed(L110, 727, 51, "path");
    let followLinks = opts && 'followLinks' in opts ? opts.followLinks : true;
    if (followLinks == null) dart.nullFailed(L110, 728, 13, "followLinks");
    return io.FileSystemEntity._getType(io.FileSystemEntity._toUtf8Array(path), followLinks);
  }
  static typeSync(path, opts) {
    if (path == null) dart.nullFailed(L110, 743, 47, "path");
    let followLinks = opts && 'followLinks' in opts ? opts.followLinks : true;
    if (followLinks == null) dart.nullFailed(L110, 743, 59, "followLinks");
    return io.FileSystemEntity._getTypeSync(io.FileSystemEntity._toUtf8Array(path), followLinks);
  }
  static isLink(path) {
    if (path == null) dart.nullFailed(L110, 750, 37, "path");
    return io.FileSystemEntity._isLinkRaw(io.FileSystemEntity._toUtf8Array(path));
  }
  static _isLinkRaw(rawPath) {
    if (rawPath == null) dart.nullFailed(L110, 752, 44, "rawPath");
    return io.FileSystemEntity._getType(rawPath, false).then(core.bool, dart.fn(type => {
      if (type == null) dart.nullFailed(L110, 753, 14, "type");
      return dart.equals(type, io.FileSystemEntityType.link);
    }, FileSystemEntityTypeTobool()));
  }
  static isFile(path) {
    if (path == null) dart.nullFailed(L110, 758, 37, "path");
    return io.FileSystemEntity._getType(io.FileSystemEntity._toUtf8Array(path), true).then(core.bool, dart.fn(type => {
      if (type == null) dart.nullFailed(L110, 759, 14, "type");
      return dart.equals(type, io.FileSystemEntityType.file);
    }, FileSystemEntityTypeTobool()));
  }
  static isDirectory(path) {
    if (path == null) dart.nullFailed(L110, 764, 42, "path");
    return io.FileSystemEntity._getType(io.FileSystemEntity._toUtf8Array(path), true).then(core.bool, dart.fn(type => {
      if (type == null) dart.nullFailed(L110, 766, 18, "type");
      return dart.equals(type, io.FileSystemEntityType.directory);
    }, FileSystemEntityTypeTobool()));
  }
  static isLinkSync(path) {
    if (path == null) dart.nullFailed(L110, 772, 33, "path");
    return io.FileSystemEntity._isLinkRawSync(io.FileSystemEntity._toUtf8Array(path));
  }
  static _isLinkRawSync(rawPath) {
    return dart.equals(io.FileSystemEntity._getTypeSync(typed_data.Uint8List.as(rawPath), false), io.FileSystemEntityType.link);
  }
  static isFileSync(path) {
    if (path == null) dart.nullFailed(L110, 781, 33, "path");
    return dart.equals(io.FileSystemEntity._getTypeSync(io.FileSystemEntity._toUtf8Array(path), true), io.FileSystemEntityType.file);
  }
  static isDirectorySync(path) {
    if (path == null) dart.nullFailed(L110, 788, 38, "path");
    return dart.equals(io.FileSystemEntity._getTypeSync(io.FileSystemEntity._toUtf8Array(path), true), io.FileSystemEntityType.directory);
  }
  static _getTypeNative(namespace, rawPath, followLinks) {
    if (namespace == null) dart.nullFailed(L106, 93, 18, "namespace");
    if (rawPath == null) dart.nullFailed(L106, 93, 39, "rawPath");
    if (followLinks == null) dart.nullFailed(L106, 93, 53, "followLinks");
    dart.throw(new core.UnsupportedError.new("FileSystemEntity._getType"));
  }
  static _identicalNative(namespace, path1, path2) {
    if (namespace == null) dart.nullFailed(L106, 98, 38, "namespace");
    if (path1 == null) dart.nullFailed(L106, 98, 56, "path1");
    if (path2 == null) dart.nullFailed(L106, 98, 70, "path2");
    dart.throw(new core.UnsupportedError.new("FileSystemEntity._identical"));
  }
  static _resolveSymbolicLinks(namespace, rawPath) {
    if (namespace == null) dart.nullFailed(L106, 103, 43, "namespace");
    if (rawPath == null) dart.nullFailed(L106, 103, 64, "rawPath");
    dart.throw(new core.UnsupportedError.new("FileSystemEntity._resolveSymbolicLinks"));
  }
  static parentOf(path) {
    if (path == null) dart.nullFailed(L110, 811, 33, "path");
    let rootEnd = -1;
    if (dart.test(io.Platform.isWindows)) {
      if (path[$startsWith](io.FileSystemEntity._absoluteWindowsPathPattern)) {
        rootEnd = path[$indexOf](core.RegExp.new("[/\\\\]"), 2);
        if (rootEnd === -1) return path;
      } else if (path[$startsWith]("\\") || path[$startsWith]("/")) {
        rootEnd = 0;
      }
    } else if (path[$startsWith]("/")) {
      rootEnd = 0;
    }
    let pos = path[$lastIndexOf](io.FileSystemEntity._parentRegExp);
    if (pos > rootEnd) {
      return path[$substring](0, pos + 1);
    } else if (rootEnd > -1) {
      return path[$substring](0, rootEnd + 1);
    } else {
      return ".";
    }
  }
  get parent() {
    return io.Directory.new(io.FileSystemEntity.parentOf(this.path));
  }
  static _getTypeSyncHelper(rawPath, followLinks) {
    if (rawPath == null) dart.nullFailed(L110, 842, 17, "rawPath");
    if (followLinks == null) dart.nullFailed(L110, 842, 31, "followLinks");
    let result = io.FileSystemEntity._getTypeNative(io._Namespace._namespace, rawPath, followLinks);
    io.FileSystemEntity._throwIfError(core.Object.as(result), "Error getting type of FileSystemEntity");
    return io.FileSystemEntityType._lookup(core.int.as(result));
  }
  static _getTypeSync(rawPath, followLinks) {
    if (rawPath == null) dart.nullFailed(L110, 849, 17, "rawPath");
    if (followLinks == null) dart.nullFailed(L110, 849, 31, "followLinks");
    let overrides = io.IOOverrides.current;
    if (overrides == null) {
      return io.FileSystemEntity._getTypeSyncHelper(rawPath, followLinks);
    }
    return overrides.fseGetTypeSync(convert.utf8.decode(rawPath, {allowMalformed: true}), followLinks);
  }
  static _getTypeRequest(rawPath, followLinks) {
    if (rawPath == null) dart.nullFailed(L110, 859, 17, "rawPath");
    if (followLinks == null) dart.nullFailed(L110, 859, 31, "followLinks");
    return io._File._dispatchWithNamespace(27, [null, rawPath, followLinks]).then(io.FileSystemEntityType, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "Error getting type", convert.utf8.decode(rawPath, {allowMalformed: true})));
      }
      return io.FileSystemEntityType._lookup(core.int.as(response));
    }, dynamicToFileSystemEntityType()));
  }
  static _getType(rawPath, followLinks) {
    if (rawPath == null) dart.nullFailed(L110, 871, 17, "rawPath");
    if (followLinks == null) dart.nullFailed(L110, 871, 31, "followLinks");
    let overrides = io.IOOverrides.current;
    if (overrides == null) {
      return io.FileSystemEntity._getTypeRequest(rawPath, followLinks);
    }
    return overrides.fseGetType(convert.utf8.decode(rawPath, {allowMalformed: true}), followLinks);
  }
  static _throwIfError(result, msg, path = null) {
    if (result == null) dart.nullFailed(L110, 880, 31, "result");
    if (msg == null) dart.nullFailed(L110, 880, 46, "msg");
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new(msg, path, result));
    } else if (core.ArgumentError.is(result)) {
      dart.throw(result);
    }
  }
  static _trimTrailingPathSeparators(path) {
    if (path == null) dart.nullFailed(L110, 889, 52, "path");
    core.ArgumentError.checkNotNull(core.String, path, "path");
    if (dart.test(io.Platform.isWindows)) {
      while (path.length > 1 && (path[$endsWith](io.Platform.pathSeparator) || path[$endsWith]("/"))) {
        path = path[$substring](0, path.length - 1);
      }
    } else {
      while (path.length > 1 && path[$endsWith](io.Platform.pathSeparator)) {
        path = path[$substring](0, path.length - 1);
      }
    }
    return path;
  }
  static _ensureTrailingPathSeparators(path) {
    if (path == null) dart.nullFailed(L110, 906, 54, "path");
    if (path[$isEmpty]) path = ".";
    if (dart.test(io.Platform.isWindows)) {
      while (!path[$endsWith](io.Platform.pathSeparator) && !path[$endsWith]("/")) {
        path = dart.str(path) + dart.str(io.Platform.pathSeparator);
      }
    } else {
      while (!path[$endsWith](io.Platform.pathSeparator)) {
        path = dart.str(path) + dart.str(io.Platform.pathSeparator);
      }
    }
    return path;
  }
};
(io.FileSystemEntity.new = function() {
  ;
}).prototype = io.FileSystemEntity.prototype;
dart.addTypeTests(io.FileSystemEntity);
dart.addTypeCaches(io.FileSystemEntity);
dart.setMethodSignature(io.FileSystemEntity, () => ({
  __proto__: dart.getMethods(io.FileSystemEntity.__proto__),
  resolveSymbolicLinks: dart.fnType(async.Future$(core.String), []),
  resolveSymbolicLinksSync: dart.fnType(core.String, []),
  stat: dart.fnType(async.Future$(io.FileStat), []),
  statSync: dart.fnType(io.FileStat, []),
  delete: dart.fnType(async.Future$(io.FileSystemEntity), [], {recursive: core.bool}, {}),
  deleteSync: dart.fnType(dart.void, [], {recursive: core.bool}, {}),
  watch: dart.fnType(async.Stream$(io.FileSystemEvent), [], {events: core.int, recursive: core.bool}, {})
}));
dart.setGetterSignature(io.FileSystemEntity, () => ({
  __proto__: dart.getGetters(io.FileSystemEntity.__proto__),
  uri: core.Uri,
  isAbsolute: core.bool,
  [_absolutePath]: core.String,
  parent: io.Directory
}));
dart.setLibraryUri(io.FileSystemEntity, L104);
dart.defineLazy(io.FileSystemEntity, {
  /*io.FileSystemEntity._backslashChar*/get _backslashChar() {
    return 92;
  },
  /*io.FileSystemEntity._slashChar*/get _slashChar() {
    return 47;
  },
  /*io.FileSystemEntity._colonChar*/get _colonChar() {
    return 58;
  },
  /*io.FileSystemEntity._absoluteWindowsPathPattern*/get _absoluteWindowsPathPattern() {
    return core.RegExp.new("^(?:\\\\\\\\|[a-zA-Z]:[/\\\\])");
  },
  /*io.FileSystemEntity._parentRegExp*/get _parentRegExp() {
    return dart.test(io.Platform.isWindows) ? core.RegExp.new("[^/\\\\][/\\\\]+[^/\\\\]") : core.RegExp.new("[^/]/+[^/]");
  }
}, false);
var _path = dart.privateName(io, "_Directory._path");
var _rawPath = dart.privateName(io, "_Directory._rawPath");
io._Directory = class _Directory extends io.FileSystemEntity {
  get [_path$]() {
    return this[_path];
  }
  set [_path$](value) {
    super[_path$] = value;
  }
  get [_rawPath$]() {
    return this[_rawPath];
  }
  set [_rawPath$](value) {
    super[_rawPath$] = value;
  }
  get path() {
    return this[_path$];
  }
  static _current(namespace) {
    if (namespace == null) dart.nullFailed(L106, 14, 30, "namespace");
    dart.throw(new core.UnsupportedError.new("Directory._current"));
  }
  static _setCurrent(namespace, rawPath) {
    if (namespace == null) dart.nullFailed(L106, 19, 33, "namespace");
    if (rawPath == null) dart.nullFailed(L106, 19, 54, "rawPath");
    dart.throw(new core.UnsupportedError.new("Directory_SetCurrent"));
  }
  static _createTemp(namespace, rawPath) {
    if (namespace == null) dart.nullFailed(L106, 24, 33, "namespace");
    if (rawPath == null) dart.nullFailed(L106, 24, 54, "rawPath");
    dart.throw(new core.UnsupportedError.new("Directory._createTemp"));
  }
  static _systemTemp(namespace) {
    if (namespace == null) dart.nullFailed(L106, 29, 40, "namespace");
    dart.throw(new core.UnsupportedError.new("Directory._systemTemp"));
  }
  static _exists(namespace, rawPath) {
    if (namespace == null) dart.nullFailed(L106, 34, 29, "namespace");
    if (rawPath == null) dart.nullFailed(L106, 34, 50, "rawPath");
    dart.throw(new core.UnsupportedError.new("Directory._exists"));
  }
  static _create(namespace, rawPath) {
    if (namespace == null) dart.nullFailed(L106, 39, 29, "namespace");
    if (rawPath == null) dart.nullFailed(L106, 39, 50, "rawPath");
    dart.throw(new core.UnsupportedError.new("Directory._create"));
  }
  static _deleteNative(namespace, rawPath, recursive) {
    if (namespace == null) dart.nullFailed(L106, 45, 18, "namespace");
    if (rawPath == null) dart.nullFailed(L106, 45, 39, "rawPath");
    if (recursive == null) dart.nullFailed(L106, 45, 53, "recursive");
    dart.throw(new core.UnsupportedError.new("Directory._deleteNative"));
  }
  static _rename(namespace, rawPath, newPath) {
    if (namespace == null) dart.nullFailed(L106, 50, 29, "namespace");
    if (rawPath == null) dart.nullFailed(L106, 50, 50, "rawPath");
    if (newPath == null) dart.nullFailed(L106, 50, 66, "newPath");
    dart.throw(new core.UnsupportedError.new("Directory._rename"));
  }
  static _fillWithDirectoryListing(namespace, list, rawPath, recursive, followLinks) {
    if (namespace == null) dart.nullFailed(L106, 56, 18, "namespace");
    if (list == null) dart.nullFailed(L106, 57, 30, "list");
    if (rawPath == null) dart.nullFailed(L106, 58, 17, "rawPath");
    if (recursive == null) dart.nullFailed(L106, 59, 12, "recursive");
    if (followLinks == null) dart.nullFailed(L106, 60, 12, "followLinks");
    dart.throw(new core.UnsupportedError.new("Directory._fillWithDirectoryListing"));
  }
  static get current() {
    let result = io._Directory._current(io._Namespace._namespace);
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new("Getting current working directory failed", "", result));
    }
    return new io._Directory.new(core.String.as(result));
  }
  static set current(path) {
    let _rawPath = null;
    function _rawPath$35get() {
      let t168;
      t168 = _rawPath;
      return t168 == null ? dart.throw(new _internal.LateInitializationErrorImpl.new("Local '_rawPath' has not been initialized.")) : t168;
    }
    dart.fn(_rawPath$35get, VoidToUint8List());
    function _rawPath$35set(t169) {
      if (t169 == null) dart.nullFailed(L109, 49, 20, "null");
      return _rawPath = t169;
    }
    dart.fn(_rawPath$35set, Uint8ListTodynamic());
    if (io._Directory.is(path)) {
      _rawPath$35set(path[_rawPath$]);
    } else if (io.Directory.is(path)) {
      _rawPath$35set(io.FileSystemEntity._toUtf8Array(path.path));
    } else if (typeof path == 'string') {
      _rawPath$35set(io.FileSystemEntity._toUtf8Array(path));
    } else {
      dart.throw(new core.ArgumentError.new(dart.str(core.Error.safeToString(path)) + dart.str(" is not a String or") + dart.str(" Directory")));
    }
    if (!dart.test(io._EmbedderConfig._mayChdir)) {
      dart.throw(new core.UnsupportedError.new("This embedder disallows setting Directory.current"));
    }
    let result = io._Directory._setCurrent(io._Namespace._namespace, _rawPath$35get());
    if (core.ArgumentError.is(result)) dart.throw(result);
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new("Setting current working directory failed", dart.toString(path), result));
    }
  }
  get uri() {
    return core._Uri.directory(this.path);
  }
  exists() {
    return io._File._dispatchWithNamespace(36, [null, this[_rawPath$]]).then(core.bool, dart.fn(response => {
      if (dart.test(this[_isErrorResponse](response))) {
        dart.throw(this[_exceptionOrErrorFromResponse](response, "Exists failed"));
      }
      return dart.equals(response, 1);
    }, dynamicTobool()));
  }
  existsSync() {
    let result = io._Directory._exists(io._Namespace._namespace, this[_rawPath$]);
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new("Exists failed", this.path, result));
    }
    return dart.equals(result, 1);
  }
  get absolute() {
    return io.Directory.new(this[_absolutePath]);
  }
  create(opts) {
    let recursive = opts && 'recursive' in opts ? opts.recursive : false;
    if (recursive == null) dart.nullFailed(L109, 101, 34, "recursive");
    if (dart.test(recursive)) {
      return this.exists().then(io.Directory, dart.fn(exists => {
        if (exists == null) dart.nullFailed(L109, 103, 29, "exists");
        if (dart.test(exists)) return this;
        if (this.path != this.parent.path) {
          return this.parent.create({recursive: true}).then(io.Directory, dart.fn(_ => {
            if (_ == null) dart.nullFailed(L109, 106, 55, "_");
            return this.create();
          }, DirectoryToFutureOfDirectory()));
        } else {
          return this.create();
        }
      }, boolToFutureOrOfDirectory()));
    } else {
      return io._File._dispatchWithNamespace(34, [null, this[_rawPath$]]).then(io.Directory, dart.fn(response => {
        if (dart.test(this[_isErrorResponse](response))) {
          dart.throw(this[_exceptionOrErrorFromResponse](response, "Creation failed"));
        }
        return this;
      }, dynamicTo_Directory()));
    }
  }
  createSync(opts) {
    let recursive = opts && 'recursive' in opts ? opts.recursive : false;
    if (recursive == null) dart.nullFailed(L109, 124, 25, "recursive");
    if (dart.test(recursive)) {
      if (dart.test(this.existsSync())) return;
      if (this.path != this.parent.path) {
        this.parent.createSync({recursive: true});
      }
    }
    let result = io._Directory._create(io._Namespace._namespace, this[_rawPath$]);
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new("Creation failed", this.path, result));
    }
  }
  static get systemTemp() {
    return io.Directory.new(io._Directory._systemTemp(io._Namespace._namespace));
  }
  createTemp(prefix = null) {
    prefix == null ? prefix = "" : null;
    if (this.path === "") {
      dart.throw(new core.ArgumentError.new(dart.str("Directory.createTemp called with an empty path. ") + dart.str("To use the system temp directory, use Directory.systemTemp")));
    }
    let fullPrefix = null;
    if (this.path[$endsWith]("/") || dart.test(io.Platform.isWindows) && this.path[$endsWith]("\\")) {
      fullPrefix = dart.str(this.path) + dart.str(prefix);
    } else {
      fullPrefix = dart.str(this.path) + dart.str(io.Platform.pathSeparator) + dart.str(prefix);
    }
    return io._File._dispatchWithNamespace(37, [null, io.FileSystemEntity._toUtf8Array(fullPrefix)]).then(io.Directory, dart.fn(response => {
      if (dart.test(this[_isErrorResponse](response))) {
        dart.throw(this[_exceptionOrErrorFromResponse](response, "Creation of temporary directory failed"));
      }
      return io.Directory.new(core.String.as(response));
    }, dynamicToDirectory()));
  }
  createTempSync(prefix = null) {
    prefix == null ? prefix = "" : null;
    if (this.path === "") {
      dart.throw(new core.ArgumentError.new(dart.str("Directory.createTemp called with an empty path. ") + dart.str("To use the system temp directory, use Directory.systemTemp")));
    }
    let fullPrefix = null;
    if (this.path[$endsWith]("/") || dart.test(io.Platform.isWindows) && this.path[$endsWith]("\\")) {
      fullPrefix = dart.str(this.path) + dart.str(prefix);
    } else {
      fullPrefix = dart.str(this.path) + dart.str(io.Platform.pathSeparator) + dart.str(prefix);
    }
    let result = io._Directory._createTemp(io._Namespace._namespace, io.FileSystemEntity._toUtf8Array(fullPrefix));
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new("Creation of temporary directory failed", fullPrefix, result));
    }
    return io.Directory.new(core.String.as(result));
  }
  [_delete](opts) {
    let recursive = opts && 'recursive' in opts ? opts.recursive : false;
    if (recursive == null) dart.nullFailed(L109, 187, 35, "recursive");
    return io._File._dispatchWithNamespace(35, [null, this[_rawPath$], recursive]).then(io.Directory, dart.fn(response => {
      if (dart.test(this[_isErrorResponse](response))) {
        dart.throw(this[_exceptionOrErrorFromResponse](response, "Deletion failed"));
      }
      return this;
    }, dynamicTo_Directory()));
  }
  [_deleteSync](opts) {
    let recursive = opts && 'recursive' in opts ? opts.recursive : false;
    if (recursive == null) dart.nullFailed(L109, 198, 26, "recursive");
    let result = io._Directory._deleteNative(io._Namespace._namespace, this[_rawPath$], recursive);
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new("Deletion failed", this.path, result));
    }
  }
  rename(newPath) {
    if (newPath == null) dart.nullFailed(L109, 205, 35, "newPath");
    return io._File._dispatchWithNamespace(41, [null, this[_rawPath$], newPath]).then(io.Directory, dart.fn(response => {
      if (dart.test(this[_isErrorResponse](response))) {
        dart.throw(this[_exceptionOrErrorFromResponse](response, "Rename failed"));
      }
      return io.Directory.new(newPath);
    }, dynamicToDirectory()));
  }
  renameSync(newPath) {
    if (newPath == null) dart.nullFailed(L109, 215, 31, "newPath");
    core.ArgumentError.checkNotNull(core.String, newPath, "newPath");
    let result = io._Directory._rename(io._Namespace._namespace, this[_rawPath$], newPath);
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new("Rename failed", this.path, result));
    }
    return io.Directory.new(newPath);
  }
  list(opts) {
    let recursive = opts && 'recursive' in opts ? opts.recursive : false;
    if (recursive == null) dart.nullFailed(L109, 226, 13, "recursive");
    let followLinks = opts && 'followLinks' in opts ? opts.followLinks : true;
    if (followLinks == null) dart.nullFailed(L109, 226, 36, "followLinks");
    return new io._AsyncDirectoryLister.new(io.FileSystemEntity._toUtf8Array(io.FileSystemEntity._ensureTrailingPathSeparators(this.path)), recursive, followLinks).stream;
  }
  listSync(opts) {
    let recursive = opts && 'recursive' in opts ? opts.recursive : false;
    if (recursive == null) dart.nullFailed(L109, 238, 13, "recursive");
    let followLinks = opts && 'followLinks' in opts ? opts.followLinks : true;
    if (followLinks == null) dart.nullFailed(L109, 238, 36, "followLinks");
    core.ArgumentError.checkNotNull(core.bool, recursive, "recursive");
    core.ArgumentError.checkNotNull(core.bool, followLinks, "followLinks");
    let result = JSArrayOfFileSystemEntity().of([]);
    io._Directory._fillWithDirectoryListing(io._Namespace._namespace, result, io.FileSystemEntity._toUtf8Array(io.FileSystemEntity._ensureTrailingPathSeparators(this.path)), recursive, followLinks);
    return result;
  }
  toString() {
    return dart.str("Directory: '") + dart.str(this.path) + dart.str("'");
  }
  [_isErrorResponse](response) {
    return core.List.is(response) && !dart.equals(response[$_get](0), 0);
  }
  [_exceptionOrErrorFromResponse](response, message) {
    if (message == null) dart.nullFailed(L109, 260, 50, "message");
    if (!dart.test(this[_isErrorResponse](response))) dart.assertFailed(null, L109, 261, 12, "_isErrorResponse(response)");
    switch (dart.dsend(response, '_get', [0])) {
      case 1:
      {
        return new core.ArgumentError.new();
      }
      case 2:
      {
        let err = new io.OSError.new(core.String.as(dart.dsend(response, '_get', [2])), core.int.as(dart.dsend(response, '_get', [1])));
        return new io.FileSystemException.new(message, this.path, err);
      }
      default:
      {
        return core.Exception.new("Unknown error");
      }
    }
  }
  static _checkNotNull(T, t, name) {
    if (name == null) dart.nullFailed(L109, 275, 41, "name");
    core.ArgumentError.checkNotNull(T, t, name);
    return t;
  }
};
(io._Directory.new = function(path) {
  if (path == null) dart.nullFailed(L109, 11, 21, "path");
  this[_path] = io._Directory._checkNotNull(core.String, path, "path");
  this[_rawPath] = io.FileSystemEntity._toUtf8Array(path);
  ;
}).prototype = io._Directory.prototype;
(io._Directory.fromRawPath = function(rawPath) {
  if (rawPath == null) dart.nullFailed(L109, 15, 36, "rawPath");
  this[_rawPath] = io.FileSystemEntity._toNullTerminatedUtf8Array(io._Directory._checkNotNull(typed_data.Uint8List, rawPath, "rawPath"));
  this[_path] = io.FileSystemEntity._toStringFromUtf8Array(rawPath);
  ;
}).prototype = io._Directory.prototype;
dart.addTypeTests(io._Directory);
dart.addTypeCaches(io._Directory);
io._Directory[dart.implements] = () => [io.Directory];
dart.setMethodSignature(io._Directory, () => ({
  __proto__: dart.getMethods(io._Directory.__proto__),
  exists: dart.fnType(async.Future$(core.bool), []),
  existsSync: dart.fnType(core.bool, []),
  create: dart.fnType(async.Future$(io.Directory), [], {recursive: core.bool}, {}),
  createSync: dart.fnType(dart.void, [], {recursive: core.bool}, {}),
  createTemp: dart.fnType(async.Future$(io.Directory), [], [dart.nullable(core.String)]),
  createTempSync: dart.fnType(io.Directory, [], [dart.nullable(core.String)]),
  [_delete]: dart.fnType(async.Future$(io.Directory), [], {recursive: core.bool}, {}),
  [_deleteSync]: dart.fnType(dart.void, [], {recursive: core.bool}, {}),
  rename: dart.fnType(async.Future$(io.Directory), [core.String]),
  renameSync: dart.fnType(io.Directory, [core.String]),
  list: dart.fnType(async.Stream$(io.FileSystemEntity), [], {followLinks: core.bool, recursive: core.bool}, {}),
  listSync: dart.fnType(core.List$(io.FileSystemEntity), [], {followLinks: core.bool, recursive: core.bool}, {}),
  [_isErrorResponse]: dart.fnType(core.bool, [dart.dynamic]),
  [_exceptionOrErrorFromResponse]: dart.fnType(dart.dynamic, [dart.dynamic, core.String])
}));
dart.setGetterSignature(io._Directory, () => ({
  __proto__: dart.getGetters(io._Directory.__proto__),
  path: core.String,
  absolute: io.Directory
}));
dart.setLibraryUri(io._Directory, L104);
dart.setFieldSignature(io._Directory, () => ({
  __proto__: dart.getFields(io._Directory.__proto__),
  [_path$]: dart.finalFieldType(core.String),
  [_rawPath$]: dart.finalFieldType(typed_data.Uint8List)
}));
dart.defineExtensionMethods(io._Directory, ['toString']);
io._AsyncDirectoryListerOps = class _AsyncDirectoryListerOps extends core.Object {
  static new(pointer) {
    if (pointer == null) dart.nullFailed(L106, 68, 40, "pointer");
    dart.throw(new core.UnsupportedError.new("Directory._list"));
  }
};
(io._AsyncDirectoryListerOps[dart.mixinNew] = function() {
}).prototype = io._AsyncDirectoryListerOps.prototype;
dart.addTypeTests(io._AsyncDirectoryListerOps);
dart.addTypeCaches(io._AsyncDirectoryListerOps);
dart.setLibraryUri(io._AsyncDirectoryListerOps, L104);
var _ops = dart.privateName(io, "_ops");
var _pointer = dart.privateName(io, "_pointer");
var _cleanup = dart.privateName(io, "_cleanup");
io._AsyncDirectoryLister = class _AsyncDirectoryLister extends core.Object {
  [_pointer]() {
    let t171;
    t171 = this[_ops];
    return t171 == null ? null : t171.getPointer();
  }
  get stream() {
    return this.controller.stream;
  }
  onListen() {
    io._File._dispatchWithNamespace(38, [null, this.rawPath, this.recursive, this.followLinks]).then(core.Null, dart.fn(response => {
      if (core.int.is(response)) {
        this[_ops] = io._AsyncDirectoryListerOps.new(response);
        this.next();
      } else if (core.Error.is(response)) {
        this.controller.addError(response, response[$stackTrace]);
        this.close();
      } else {
        this.error(response);
        this.close();
      }
    }, dynamicToNullN()));
  }
  onResume() {
    if (!dart.test(this.nextRunning)) {
      this.next();
    }
  }
  onCancel() {
    this.canceled = true;
    if (!dart.test(this.nextRunning)) {
      this.close();
    }
    return this.closeCompleter.future;
  }
  next() {
    if (dart.test(this.canceled)) {
      this.close();
      return;
    }
    if (dart.test(this.controller.isPaused) || dart.test(this.nextRunning)) {
      return;
    }
    let pointer = this[_pointer]();
    if (pointer == null) {
      return;
    }
    this.nextRunning = true;
    io._IOService._dispatch(39, [pointer]).then(core.Null, dart.fn(result => {
      let t171;
      this.nextRunning = false;
      if (core.List.is(result)) {
        this.next();
        if (!(result[$length][$modulo](2) === 0)) dart.assertFailed(null, L109, 378, 16, "result.length % 2 == 0");
        for (let i = 0; i < dart.notNull(result[$length]); i = i + 1) {
          if (!(i[$modulo](2) === 0)) dart.assertFailed(null, L109, 380, 18, "i % 2 == 0");
          switch (result[$_get]((t171 = i, i = t171 + 1, t171))) {
            case 0:
            {
              this.controller.add(io.File.fromRawPath(typed_data.Uint8List.as(result[$_get](i))));
              break;
            }
            case 1:
            {
              this.controller.add(io.Directory.fromRawPath(typed_data.Uint8List.as(result[$_get](i))));
              break;
            }
            case 2:
            {
              this.controller.add(io.Link.fromRawPath(typed_data.Uint8List.as(result[$_get](i))));
              break;
            }
            case 3:
            {
              this.error(result[$_get](i));
              break;
            }
            case 4:
            {
              this.canceled = true;
              return;
            }
          }
        }
      } else {
        this.controller.addError(new io.FileSystemException.new("Internal error"));
      }
    }, dynamicToNullN()));
  }
  [_cleanup]() {
    this.controller.close();
    this.closeCompleter.complete();
    this[_ops] = null;
  }
  close() {
    if (dart.test(this.closed)) {
      return;
    }
    if (dart.test(this.nextRunning)) {
      return;
    }
    this.closed = true;
    let pointer = this[_pointer]();
    if (pointer == null) {
      this[_cleanup]();
    } else {
      io._IOService._dispatch(40, [pointer]).whenComplete(dart.bind(this, _cleanup));
    }
  }
  error(message) {
    let errorType = dart.dsend(dart.dsend(message, '_get', [2]), '_get', [0]);
    if (dart.equals(errorType, 1)) {
      this.controller.addError(new core.ArgumentError.new());
    } else if (dart.equals(errorType, 2)) {
      let responseErrorInfo = dart.dsend(message, '_get', [2]);
      let err = new io.OSError.new(core.String.as(dart.dsend(responseErrorInfo, '_get', [2])), core.int.as(dart.dsend(responseErrorInfo, '_get', [1])));
      let errorPath = dart.dsend(message, '_get', [1]);
      if (errorPath == null) {
        errorPath = convert.utf8.decode(this.rawPath, {allowMalformed: true});
      } else if (typed_data.Uint8List.is(errorPath)) {
        errorPath = convert.utf8.decode(ListOfint().as(dart.dsend(message, '_get', [1])), {allowMalformed: true});
      }
      this.controller.addError(new io.FileSystemException.new("Directory listing failed", StringN().as(errorPath), err));
    } else {
      this.controller.addError(new io.FileSystemException.new("Internal error"));
    }
  }
};
(io._AsyncDirectoryLister.new = function(rawPath, recursive, followLinks) {
  let t171;
  if (rawPath == null) dart.nullFailed(L109, 310, 30, "rawPath");
  if (recursive == null) dart.nullFailed(L109, 310, 44, "recursive");
  if (followLinks == null) dart.nullFailed(L109, 310, 60, "followLinks");
  this.controller = StreamControllerOfFileSystemEntity().new({sync: true});
  this.canceled = false;
  this.nextRunning = false;
  this.closed = false;
  this[_ops] = null;
  this.closeCompleter = async.Completer.new();
  this.rawPath = rawPath;
  this.recursive = recursive;
  this.followLinks = followLinks;
  t171 = this.controller;
  (() => {
    t171.onListen = dart.bind(this, 'onListen');
    t171.onResume = dart.bind(this, 'onResume');
    t171.onCancel = dart.bind(this, 'onCancel');
    return t171;
  })();
}).prototype = io._AsyncDirectoryLister.prototype;
dart.addTypeTests(io._AsyncDirectoryLister);
dart.addTypeCaches(io._AsyncDirectoryLister);
dart.setMethodSignature(io._AsyncDirectoryLister, () => ({
  __proto__: dart.getMethods(io._AsyncDirectoryLister.__proto__),
  [_pointer]: dart.fnType(dart.nullable(core.int), []),
  onListen: dart.fnType(dart.void, []),
  onResume: dart.fnType(dart.void, []),
  onCancel: dart.fnType(async.Future, []),
  next: dart.fnType(dart.void, []),
  [_cleanup]: dart.fnType(dart.void, []),
  close: dart.fnType(dart.void, []),
  error: dart.fnType(dart.void, [dart.dynamic])
}));
dart.setGetterSignature(io._AsyncDirectoryLister, () => ({
  __proto__: dart.getGetters(io._AsyncDirectoryLister.__proto__),
  stream: async.Stream$(io.FileSystemEntity)
}));
dart.setLibraryUri(io._AsyncDirectoryLister, L104);
dart.setFieldSignature(io._AsyncDirectoryLister, () => ({
  __proto__: dart.getFields(io._AsyncDirectoryLister.__proto__),
  rawPath: dart.finalFieldType(typed_data.Uint8List),
  recursive: dart.finalFieldType(core.bool),
  followLinks: dart.finalFieldType(core.bool),
  controller: dart.finalFieldType(async.StreamController$(io.FileSystemEntity)),
  canceled: dart.fieldType(core.bool),
  nextRunning: dart.fieldType(core.bool),
  closed: dart.fieldType(core.bool),
  [_ops]: dart.fieldType(dart.nullable(io._AsyncDirectoryListerOps)),
  closeCompleter: dart.fieldType(async.Completer)
}));
dart.defineLazy(io._AsyncDirectoryLister, {
  /*io._AsyncDirectoryLister.listFile*/get listFile() {
    return 0;
  },
  /*io._AsyncDirectoryLister.listDirectory*/get listDirectory() {
    return 1;
  },
  /*io._AsyncDirectoryLister.listLink*/get listLink() {
    return 2;
  },
  /*io._AsyncDirectoryLister.listError*/get listError() {
    return 3;
  },
  /*io._AsyncDirectoryLister.listDone*/get listDone() {
    return 4;
  },
  /*io._AsyncDirectoryLister.responseType*/get responseType() {
    return 0;
  },
  /*io._AsyncDirectoryLister.responsePath*/get responsePath() {
    return 1;
  },
  /*io._AsyncDirectoryLister.responseComplete*/get responseComplete() {
    return 1;
  },
  /*io._AsyncDirectoryLister.responseError*/get responseError() {
    return 2;
  }
}, false);
io._EmbedderConfig = class _EmbedderConfig extends core.Object {
  static _setDomainPolicies(domainNetworkPolicyJson) {
    if (domainNetworkPolicyJson == null) dart.nullFailed(L111, 43, 41, "domainNetworkPolicyJson");
    io._domainPolicies = io._constructDomainPolicies(domainNetworkPolicyJson);
  }
};
(io._EmbedderConfig.new = function() {
  ;
}).prototype = io._EmbedderConfig.prototype;
dart.addTypeTests(io._EmbedderConfig);
dart.addTypeCaches(io._EmbedderConfig);
dart.setLibraryUri(io._EmbedderConfig, L104);
dart.defineLazy(io._EmbedderConfig, {
  /*io._EmbedderConfig._mayChdir*/get _mayChdir() {
    return true;
  },
  set _mayChdir(_) {},
  /*io._EmbedderConfig._mayExit*/get _mayExit() {
    return true;
  },
  set _mayExit(_) {},
  /*io._EmbedderConfig._maySetEchoMode*/get _maySetEchoMode() {
    return true;
  },
  set _maySetEchoMode(_) {},
  /*io._EmbedderConfig._maySetLineMode*/get _maySetLineMode() {
    return true;
  },
  set _maySetLineMode(_) {},
  /*io._EmbedderConfig._maySleep*/get _maySleep() {
    return true;
  },
  set _maySleep(_) {},
  /*io._EmbedderConfig._mayInsecurelyConnectToAllDomains*/get _mayInsecurelyConnectToAllDomains() {
    return true;
  },
  set _mayInsecurelyConnectToAllDomains(_) {}
}, false);
io._EventHandler = class _EventHandler extends core.Object {
  static _sendData(sender, sendPort, data) {
    if (sendPort == null) dart.nullFailed(L106, 76, 50, "sendPort");
    if (data == null) dart.nullFailed(L106, 76, 64, "data");
    dart.throw(new core.UnsupportedError.new("EventHandler._sendData"));
  }
};
(io._EventHandler.new = function() {
  ;
}).prototype = io._EventHandler.prototype;
dart.addTypeTests(io._EventHandler);
dart.addTypeCaches(io._EventHandler);
dart.setLibraryUri(io._EventHandler, L104);
var _mode = dart.privateName(io, "_mode");
var _mode$ = dart.privateName(io, "FileMode._mode");
var C108;
var C109;
var C110;
var C111;
var C112;
io.FileMode = class FileMode extends core.Object {
  get [_mode]() {
    return this[_mode$];
  }
  set [_mode](value) {
    super[_mode] = value;
  }
};
(io.FileMode._internal = function(_mode) {
  if (_mode == null) dart.nullFailed(L112, 44, 33, "_mode");
  this[_mode$] = _mode;
  ;
}).prototype = io.FileMode.prototype;
dart.addTypeTests(io.FileMode);
dart.addTypeCaches(io.FileMode);
dart.setLibraryUri(io.FileMode, L104);
dart.setFieldSignature(io.FileMode, () => ({
  __proto__: dart.getFields(io.FileMode.__proto__),
  [_mode]: dart.finalFieldType(core.int)
}));
dart.defineLazy(io.FileMode, {
  /*io.FileMode.read*/get read() {
    return C108 || CT.C108;
  },
  /*io.FileMode.READ*/get READ() {
    return C108 || CT.C108;
  },
  /*io.FileMode.write*/get write() {
    return C109 || CT.C109;
  },
  /*io.FileMode.WRITE*/get WRITE() {
    return C109 || CT.C109;
  },
  /*io.FileMode.append*/get append() {
    return C110 || CT.C110;
  },
  /*io.FileMode.APPEND*/get APPEND() {
    return C110 || CT.C110;
  },
  /*io.FileMode.writeOnly*/get writeOnly() {
    return C111 || CT.C111;
  },
  /*io.FileMode.WRITE_ONLY*/get WRITE_ONLY() {
    return C111 || CT.C111;
  },
  /*io.FileMode.writeOnlyAppend*/get writeOnlyAppend() {
    return C112 || CT.C112;
  },
  /*io.FileMode.WRITE_ONLY_APPEND*/get WRITE_ONLY_APPEND() {
    return C112 || CT.C112;
  }
}, false);
var _type = dart.privateName(io, "_type");
var _type$1 = dart.privateName(io, "FileLock._type");
var C113;
var C114;
var C115;
var C116;
io.FileLock = class FileLock extends core.Object {
  get [_type]() {
    return this[_type$1];
  }
  set [_type](value) {
    super[_type] = value;
  }
};
(io.FileLock._internal = function(_type) {
  if (_type == null) dart.nullFailed(L112, 97, 33, "_type");
  this[_type$1] = _type;
  ;
}).prototype = io.FileLock.prototype;
dart.addTypeTests(io.FileLock);
dart.addTypeCaches(io.FileLock);
dart.setLibraryUri(io.FileLock, L104);
dart.setFieldSignature(io.FileLock, () => ({
  __proto__: dart.getFields(io.FileLock.__proto__),
  [_type]: dart.finalFieldType(core.int)
}));
dart.defineLazy(io.FileLock, {
  /*io.FileLock.shared*/get shared() {
    return C113 || CT.C113;
  },
  /*io.FileLock.SHARED*/get SHARED() {
    return C113 || CT.C113;
  },
  /*io.FileLock.exclusive*/get exclusive() {
    return C114 || CT.C114;
  },
  /*io.FileLock.EXCLUSIVE*/get EXCLUSIVE() {
    return C114 || CT.C114;
  },
  /*io.FileLock.blockingShared*/get blockingShared() {
    return C115 || CT.C115;
  },
  /*io.FileLock.BLOCKING_SHARED*/get BLOCKING_SHARED() {
    return C115 || CT.C115;
  },
  /*io.FileLock.blockingExclusive*/get blockingExclusive() {
    return C116 || CT.C116;
  },
  /*io.FileLock.BLOCKING_EXCLUSIVE*/get BLOCKING_EXCLUSIVE() {
    return C116 || CT.C116;
  }
}, false);
io.File = class File extends core.Object {
  static new(path) {
    if (path == null) dart.nullFailed(L112, 247, 23, "path");
    let overrides = io.IOOverrides.current;
    if (overrides == null) {
      return new io._File.new(path);
    }
    return overrides.createFile(path);
  }
  static fromUri(uri) {
    if (uri == null) dart.nullFailed(L112, 260, 28, "uri");
    return io.File.new(uri.toFilePath());
  }
  static fromRawPath(rawPath) {
    if (rawPath == null) dart.nullFailed(L112, 267, 38, "rawPath");
    return new io._File.fromRawPath(rawPath);
  }
};
(io.File[dart.mixinNew] = function() {
}).prototype = io.File.prototype;
dart.addTypeTests(io.File);
dart.addTypeCaches(io.File);
io.File[dart.implements] = () => [io.FileSystemEntity];
dart.setLibraryUri(io.File, L104);
io.RandomAccessFile = class RandomAccessFile extends core.Object {};
(io.RandomAccessFile.new = function() {
  ;
}).prototype = io.RandomAccessFile.prototype;
dart.addTypeTests(io.RandomAccessFile);
dart.addTypeCaches(io.RandomAccessFile);
dart.setLibraryUri(io.RandomAccessFile, L104);
var message$3 = dart.privateName(io, "FileSystemException.message");
var path$ = dart.privateName(io, "FileSystemException.path");
var osError$ = dart.privateName(io, "FileSystemException.osError");
io.FileSystemException = class FileSystemException extends core.Object {
  get message() {
    return this[message$3];
  }
  set message(value) {
    super.message = value;
  }
  get path() {
    return this[path$];
  }
  set path(value) {
    super.path = value;
  }
  get osError() {
    return this[osError$];
  }
  set osError(value) {
    super.osError = value;
  }
  toString() {
    let sb = new core.StringBuffer.new();
    sb.write("FileSystemException");
    if (this.message[$isNotEmpty]) {
      sb.write(dart.str(": ") + dart.str(this.message));
      if (this.path != null) {
        sb.write(dart.str(", path = '") + dart.str(this.path) + dart.str("'"));
      }
      if (this.osError != null) {
        sb.write(dart.str(" (") + dart.str(this.osError) + dart.str(")"));
      }
    } else if (this.osError != null) {
      sb.write(dart.str(": ") + dart.str(this.osError));
      if (this.path != null) {
        sb.write(dart.str(", path = '") + dart.str(this.path) + dart.str("'"));
      }
    } else if (this.path != null) {
      sb.write(dart.str(": ") + dart.str(this.path));
    }
    return sb.toString();
  }
};
(io.FileSystemException.new = function(message = "", path = "", osError = null) {
  if (message == null) dart.nullFailed(L112, 983, 35, "message");
  this[message$3] = message;
  this[path$] = path;
  this[osError$] = osError;
  ;
}).prototype = io.FileSystemException.prototype;
dart.addTypeTests(io.FileSystemException);
dart.addTypeCaches(io.FileSystemException);
io.FileSystemException[dart.implements] = () => [io.IOException];
dart.setLibraryUri(io.FileSystemException, L104);
dart.setFieldSignature(io.FileSystemException, () => ({
  __proto__: dart.getFields(io.FileSystemException.__proto__),
  message: dart.finalFieldType(core.String),
  path: dart.finalFieldType(dart.nullable(core.String)),
  osError: dart.finalFieldType(dart.nullable(io.OSError))
}));
dart.defineExtensionMethods(io.FileSystemException, ['toString']);
var ___FileStream__controller = dart.privateName(io, "_#_FileStream#_controller");
var ___FileStream__openedFile = dart.privateName(io, "_#_FileStream#_openedFile");
var _closeCompleter = dart.privateName(io, "_closeCompleter");
var _unsubscribed = dart.privateName(io, "_unsubscribed");
var _readInProgress = dart.privateName(io, "_readInProgress");
var _atEnd = dart.privateName(io, "_atEnd");
var _end$ = dart.privateName(io, "_end");
var _position$ = dart.privateName(io, "_position");
var _controller = dart.privateName(io, "_controller");
var _openedFile = dart.privateName(io, "_openedFile");
var _start$1 = dart.privateName(io, "_start");
var _readBlock = dart.privateName(io, "_readBlock");
var _closeFile = dart.privateName(io, "_closeFile");
io._FileStream = class _FileStream extends async.Stream$(core.List$(core.int)) {
  get [_controller]() {
    let t171;
    t171 = this[___FileStream__controller];
    return t171 == null ? dart.throw(new _internal.LateInitializationErrorImpl.new("Field '_controller' has not been initialized.")) : t171;
  }
  set [_controller](t171) {
    if (t171 == null) dart.nullFailed(L113, 12, 36, "null");
    this[___FileStream__controller] = t171;
  }
  get [_openedFile]() {
    let t172;
    t172 = this[___FileStream__openedFile];
    return t172 == null ? dart.throw(new _internal.LateInitializationErrorImpl.new("Field '_openedFile' has not been initialized.")) : t172;
  }
  set [_openedFile](t172) {
    if (t172 == null) dart.nullFailed(L113, 16, 25, "null");
    this[___FileStream__openedFile] = t172;
  }
  listen(onData, opts) {
    let onError = opts && 'onError' in opts ? opts.onError : null;
    let onDone = opts && 'onDone' in opts ? opts.onDone : null;
    let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
    this[_controller] = StreamControllerOfUint8List().new({sync: true, onListen: dart.bind(this, _start$1), onResume: dart.bind(this, _readBlock), onCancel: dart.fn(() => {
        this[_unsubscribed] = true;
        return this[_closeFile]();
      }, VoidToFuture())});
    return this[_controller].stream.listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
  }
  [_closeFile]() {
    if (dart.test(this[_readInProgress]) || dart.test(this[_closed])) {
      return this[_closeCompleter].future;
    }
    this[_closed] = true;
    const done = () => {
      this[_closeCompleter].complete();
      this[_controller].close();
    };
    dart.fn(done, VoidTovoid());
    this[_openedFile].close().catchError(dart.bind(this[_controller], 'addError')).whenComplete(done);
    return this[_closeCompleter].future;
  }
  [_readBlock]() {
    if (dart.test(this[_readInProgress])) return;
    if (dart.test(this[_atEnd])) {
      this[_closeFile]();
      return;
    }
    this[_readInProgress] = true;
    let readBytes = 65536;
    let end = this[_end$];
    if (end != null) {
      readBytes = math.min(core.int, readBytes, dart.notNull(end) - dart.notNull(this[_position$]));
      if (readBytes < 0) {
        this[_readInProgress] = false;
        if (!dart.test(this[_unsubscribed])) {
          this[_controller].addError(new core.RangeError.new(dart.str("Bad end position: ") + dart.str(end)));
          this[_closeFile]();
          this[_unsubscribed] = true;
        }
        return;
      }
    }
    this[_openedFile].read(readBytes).then(core.Null, dart.fn(block => {
      if (block == null) dart.nullFailed(L113, 85, 39, "block");
      this[_readInProgress] = false;
      if (dart.test(this[_unsubscribed])) {
        this[_closeFile]();
        return;
      }
      this[_position$] = dart.notNull(this[_position$]) + dart.notNull(block[$length]);
      if (dart.notNull(block[$length]) < readBytes || this[_end$] != null && this[_position$] == this[_end$]) {
        this[_atEnd] = true;
      }
      if (!dart.test(this[_atEnd]) && !dart.test(this[_controller].isPaused)) {
        this[_readBlock]();
      }
      this[_controller].add(block);
      if (dart.test(this[_atEnd])) {
        this[_closeFile]();
      }
    }, Uint8ListToNullN())).catchError(dart.fn((e, s) => {
      if (!dart.test(this[_unsubscribed])) {
        this[_controller].addError(core.Object.as(e), StackTraceN().as(s));
        this[_closeFile]();
        this[_unsubscribed] = true;
      }
    }, dynamicAnddynamicToNullN()));
  }
  [_start$1]() {
    if (dart.notNull(this[_position$]) < 0) {
      this[_controller].addError(new core.RangeError.new(dart.str("Bad start position: ") + dart.str(this[_position$])));
      this[_controller].close();
      this[_closeCompleter].complete();
      return;
    }
    const onReady = file => {
      if (file == null) dart.nullFailed(L113, 119, 35, "file");
      this[_openedFile] = file;
      this[_readInProgress] = false;
      this[_readBlock]();
    };
    dart.fn(onReady, RandomAccessFileTovoid());
    const onOpenFile = file => {
      if (file == null) dart.nullFailed(L113, 125, 38, "file");
      if (dart.notNull(this[_position$]) > 0) {
        file.setPosition(this[_position$]).then(dart.void, onReady, {onError: dart.fn((e, s) => {
            this[_controller].addError(core.Object.as(e), StackTraceN().as(s));
            this[_readInProgress] = false;
            this[_closeFile]();
          }, dynamicAnddynamicToNullN())});
      } else {
        onReady(file);
      }
    };
    dart.fn(onOpenFile, RandomAccessFileTovoid());
    const openFailed = (error, stackTrace) => {
      this[_controller].addError(core.Object.as(error), StackTraceN().as(stackTrace));
      this[_controller].close();
      this[_closeCompleter].complete();
    };
    dart.fn(openFailed, dynamicAnddynamicTovoid());
    let path = this[_path$];
    if (path != null) {
      io.File.new(path).open({mode: io.FileMode.read}).then(dart.void, onOpenFile, {onError: openFailed});
    } else {
      try {
        onOpenFile(io._File._openStdioSync(0));
      } catch (e$) {
        let e = dart.getThrown(e$);
        let s = dart.stackTrace(e$);
        if (core.Object.is(e)) {
          openFailed(e, s);
        } else
          throw e$;
      }
    }
  }
};
(io._FileStream.new = function(_path, position, _end) {
  let t171;
  this[___FileStream__controller] = null;
  this[___FileStream__openedFile] = null;
  this[_closeCompleter] = async.Completer.new();
  this[_unsubscribed] = false;
  this[_readInProgress] = true;
  this[_closed] = false;
  this[_atEnd] = false;
  this[_path$] = _path;
  this[_end$] = _end;
  this[_position$] = (t171 = position, t171 == null ? 0 : t171);
  io._FileStream.__proto__.new.call(this);
  ;
}).prototype = io._FileStream.prototype;
(io._FileStream.forStdin = function() {
  this[___FileStream__controller] = null;
  this[___FileStream__openedFile] = null;
  this[_closeCompleter] = async.Completer.new();
  this[_unsubscribed] = false;
  this[_readInProgress] = true;
  this[_closed] = false;
  this[_atEnd] = false;
  this[_end$] = null;
  this[_path$] = null;
  this[_position$] = 0;
  io._FileStream.__proto__.new.call(this);
  ;
}).prototype = io._FileStream.prototype;
dart.addTypeTests(io._FileStream);
dart.addTypeCaches(io._FileStream);
dart.setMethodSignature(io._FileStream, () => ({
  __proto__: dart.getMethods(io._FileStream.__proto__),
  listen: dart.fnType(async.StreamSubscription$(typed_data.Uint8List), [dart.nullable(dart.fnType(dart.void, [typed_data.Uint8List]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {}),
  [_closeFile]: dart.fnType(async.Future, []),
  [_readBlock]: dart.fnType(dart.void, []),
  [_start$1]: dart.fnType(dart.void, [])
}));
dart.setGetterSignature(io._FileStream, () => ({
  __proto__: dart.getGetters(io._FileStream.__proto__),
  [_controller]: async.StreamController$(typed_data.Uint8List),
  [_openedFile]: io.RandomAccessFile
}));
dart.setSetterSignature(io._FileStream, () => ({
  __proto__: dart.getSetters(io._FileStream.__proto__),
  [_controller]: async.StreamController$(typed_data.Uint8List),
  [_openedFile]: io.RandomAccessFile
}));
dart.setLibraryUri(io._FileStream, L104);
dart.setFieldSignature(io._FileStream, () => ({
  __proto__: dart.getFields(io._FileStream.__proto__),
  [___FileStream__controller]: dart.fieldType(dart.nullable(async.StreamController$(typed_data.Uint8List))),
  [_path$]: dart.fieldType(dart.nullable(core.String)),
  [___FileStream__openedFile]: dart.fieldType(dart.nullable(io.RandomAccessFile)),
  [_position$]: dart.fieldType(core.int),
  [_end$]: dart.fieldType(dart.nullable(core.int)),
  [_closeCompleter]: dart.finalFieldType(async.Completer),
  [_unsubscribed]: dart.fieldType(core.bool),
  [_readInProgress]: dart.fieldType(core.bool),
  [_closed]: dart.fieldType(core.bool),
  [_atEnd]: dart.fieldType(core.bool)
}));
var _file = dart.privateName(io, "_file");
var _openFuture = dart.privateName(io, "_openFuture");
io._FileStreamConsumer = class _FileStreamConsumer extends async.StreamConsumer$(core.List$(core.int)) {
  addStream(stream) {
    StreamOfListOfint().as(stream);
    if (stream == null) dart.nullFailed(L113, 169, 45, "stream");
    let completer = CompleterOfFileN().sync();
    this[_openFuture].then(core.Null, dart.fn(openedFile => {
      if (openedFile == null) dart.nullFailed(L113, 171, 23, "openedFile");
      let _subscription = null;
      function _subscription$35get() {
        let t174;
        t174 = _subscription;
        return t174 == null ? dart.throw(new _internal.LateInitializationErrorImpl.new("Local '_subscription' has not been initialized.")) : t174;
      }
      dart.fn(_subscription$35get, VoidToStreamSubscriptionOfListOfint());
      function _subscription$35set(t175) {
        if (t175 == null) dart.nullFailed(L113, 172, 42, "null");
        return _subscription = t175;
      }
      dart.fn(_subscription$35set, StreamSubscriptionOfListOfintTodynamic());
      function error(e, stackTrace) {
        if (stackTrace == null) dart.nullFailed(L113, 173, 32, "stackTrace");
        _subscription$35get().cancel();
        openedFile.close();
        completer.completeError(core.Object.as(e), stackTrace);
      }
      dart.fn(error, dynamicAndStackTraceTovoid());
      _subscription$35set(stream.listen(dart.fn(d => {
        if (d == null) dart.nullFailed(L113, 179, 38, "d");
        _subscription$35get().pause();
        try {
          openedFile.writeFrom(d, 0, d[$length]).then(dart.void, dart.fn(_ => {
            if (_ == null) dart.nullFailed(L113, 184, 22, "_");
            return _subscription$35get().resume();
          }, RandomAccessFileTovoid()), {onError: error});
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stackTrace = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            error(e, stackTrace);
          } else
            throw e$;
        }
      }, ListOfintToNullN()), {onDone: dart.fn(() => {
          completer.complete(this[_file]);
        }, VoidToNullN()), onError: error, cancelOnError: true}));
    }, RandomAccessFileToNullN())).catchError(dart.bind(completer, 'completeError'));
    return completer.future;
  }
  close() {
    return this[_openFuture].then(dart.void, dart.fn(openedFile => {
      if (openedFile == null) dart.nullFailed(L113, 196, 25, "openedFile");
      return openedFile.close();
    }, RandomAccessFileToFutureOfvoid())).then(FileN(), dart.fn(_ => this[_file], voidToFileN()));
  }
};
(io._FileStreamConsumer.new = function(file, mode) {
  if (file == null) dart.nullFailed(L113, 162, 28, "file");
  if (mode == null) dart.nullFailed(L113, 162, 43, "mode");
  this[_file] = file;
  this[_openFuture] = file.open({mode: mode});
  ;
}).prototype = io._FileStreamConsumer.prototype;
(io._FileStreamConsumer.fromStdio = function(fd) {
  if (fd == null) dart.nullFailed(L113, 166, 37, "fd");
  this[_file] = null;
  this[_openFuture] = FutureOfRandomAccessFile().value(io._File._openStdioSync(fd));
  ;
}).prototype = io._FileStreamConsumer.prototype;
dart.addTypeTests(io._FileStreamConsumer);
dart.addTypeCaches(io._FileStreamConsumer);
dart.setMethodSignature(io._FileStreamConsumer, () => ({
  __proto__: dart.getMethods(io._FileStreamConsumer.__proto__),
  addStream: dart.fnType(async.Future$(dart.nullable(io.File)), [dart.nullable(core.Object)]),
  close: dart.fnType(async.Future$(dart.nullable(io.File)), [])
}));
dart.setLibraryUri(io._FileStreamConsumer, L104);
dart.setFieldSignature(io._FileStreamConsumer, () => ({
  __proto__: dart.getFields(io._FileStreamConsumer.__proto__),
  [_file]: dart.fieldType(dart.nullable(io.File)),
  [_openFuture]: dart.fieldType(async.Future$(io.RandomAccessFile))
}));
var _tryDecode = dart.privateName(io, "_tryDecode");
var C117;
var _path$0 = dart.privateName(io, "_File._path");
var _rawPath$0 = dart.privateName(io, "_File._rawPath");
io._File = class _File extends io.FileSystemEntity {
  get [_path$]() {
    return this[_path$0];
  }
  set [_path$](value) {
    super[_path$] = value;
  }
  get [_rawPath$]() {
    return this[_rawPath$0];
  }
  set [_rawPath$](value) {
    super[_rawPath$] = value;
  }
  get path() {
    return this[_path$];
  }
  static _namespacePointer() {
    return io._Namespace._namespacePointer;
  }
  static _dispatchWithNamespace(request, data) {
    if (request == null) dart.nullFailed(L113, 222, 44, "request");
    if (data == null) dart.nullFailed(L113, 222, 58, "data");
    data[$_set](0, io._File._namespacePointer());
    return io._IOService._dispatch(request, data);
  }
  exists() {
    return io._File._dispatchWithNamespace(0, [null, this[_rawPath$]]).then(core.bool, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "Cannot check existence", this.path));
      }
      return FutureOrOfbool().as(response);
    }, dynamicToFutureOrOfbool()));
  }
  static _exists(namespace, rawPath) {
    if (namespace == null) dart.nullFailed(L106, 111, 29, "namespace");
    if (rawPath == null) dart.nullFailed(L106, 111, 50, "rawPath");
    dart.throw(new core.UnsupportedError.new("File._exists"));
  }
  existsSync() {
    let result = io._File._exists(io._Namespace._namespace, this[_rawPath$]);
    io._File.throwIfError(core.Object.as(result), "Cannot check existence of file", this.path);
    return core.bool.as(result);
  }
  get absolute() {
    return io.File.new(this[_absolutePath]);
  }
  create(opts) {
    let recursive = opts && 'recursive' in opts ? opts.recursive : false;
    if (recursive == null) dart.nullFailed(L113, 247, 29, "recursive");
    let result = dart.test(recursive) ? this.parent.create({recursive: true}) : FutureOfNullN().value(null);
    return result.then(dart.dynamic, dart.fn(_ => io._File._dispatchWithNamespace(1, [null, this[_rawPath$]]), DirectoryNToFuture())).then(io.File, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "Cannot create file", this.path));
      }
      return this;
    }, dynamicTo_File()));
  }
  static _create(namespace, rawPath) {
    if (namespace == null) dart.nullFailed(L106, 116, 29, "namespace");
    if (rawPath == null) dart.nullFailed(L106, 116, 50, "rawPath");
    dart.throw(new core.UnsupportedError.new("File._create"));
  }
  static _createLink(namespace, rawPath, target) {
    if (namespace == null) dart.nullFailed(L106, 121, 33, "namespace");
    if (rawPath == null) dart.nullFailed(L106, 121, 54, "rawPath");
    if (target == null) dart.nullFailed(L106, 121, 70, "target");
    dart.throw(new core.UnsupportedError.new("File._createLink"));
  }
  static _linkTarget(namespace, rawPath) {
    if (namespace == null) dart.nullFailed(L106, 126, 33, "namespace");
    if (rawPath == null) dart.nullFailed(L106, 126, 54, "rawPath");
    dart.throw(new core.UnsupportedError.new("File._linkTarget"));
  }
  createSync(opts) {
    let recursive = opts && 'recursive' in opts ? opts.recursive : false;
    if (recursive == null) dart.nullFailed(L113, 268, 25, "recursive");
    if (dart.test(recursive)) {
      this.parent.createSync({recursive: true});
    }
    let result = io._File._create(io._Namespace._namespace, this[_rawPath$]);
    io._File.throwIfError(core.Object.as(result), "Cannot create file", this.path);
  }
  [_delete](opts) {
    let recursive = opts && 'recursive' in opts ? opts.recursive : false;
    if (recursive == null) dart.nullFailed(L113, 276, 30, "recursive");
    if (dart.test(recursive)) {
      return io.Directory.new(this.path).delete({recursive: true}).then(io.File, dart.fn(_ => {
        if (_ == null) dart.nullFailed(L113, 278, 64, "_");
        return this;
      }, FileSystemEntityTo_File()));
    }
    return io._File._dispatchWithNamespace(2, [null, this[_rawPath$]]).then(io.File, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "Cannot delete file", this.path));
      }
      return this;
    }, dynamicTo_File()));
  }
  static _deleteNative(namespace, rawPath) {
    if (namespace == null) dart.nullFailed(L106, 131, 35, "namespace");
    if (rawPath == null) dart.nullFailed(L106, 131, 56, "rawPath");
    dart.throw(new core.UnsupportedError.new("File._deleteNative"));
  }
  static _deleteLinkNative(namespace, rawPath) {
    if (namespace == null) dart.nullFailed(L106, 136, 39, "namespace");
    if (rawPath == null) dart.nullFailed(L106, 136, 60, "rawPath");
    dart.throw(new core.UnsupportedError.new("File._deleteLinkNative"));
  }
  [_deleteSync](opts) {
    let recursive = opts && 'recursive' in opts ? opts.recursive : false;
    if (recursive == null) dart.nullFailed(L113, 293, 26, "recursive");
    if (dart.test(recursive)) {
      return io.Directory.fromRawPath(this[_rawPath$]).deleteSync({recursive: true});
    }
    let result = io._File._deleteNative(io._Namespace._namespace, this[_rawPath$]);
    io._File.throwIfError(core.Object.as(result), "Cannot delete file", this.path);
  }
  rename(newPath) {
    if (newPath == null) dart.nullFailed(L113, 301, 30, "newPath");
    return io._File._dispatchWithNamespace(3, [null, this[_rawPath$], newPath]).then(io.File, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, dart.str("Cannot rename file to '") + dart.str(newPath) + dart.str("'"), this.path));
      }
      return io.File.new(newPath);
    }, dynamicToFile()));
  }
  static _rename(namespace, oldPath, newPath) {
    if (namespace == null) dart.nullFailed(L106, 141, 29, "namespace");
    if (oldPath == null) dart.nullFailed(L106, 141, 50, "oldPath");
    if (newPath == null) dart.nullFailed(L106, 141, 66, "newPath");
    dart.throw(new core.UnsupportedError.new("File._rename"));
  }
  static _renameLink(namespace, oldPath, newPath) {
    if (namespace == null) dart.nullFailed(L106, 146, 33, "namespace");
    if (oldPath == null) dart.nullFailed(L106, 146, 54, "oldPath");
    if (newPath == null) dart.nullFailed(L106, 146, 70, "newPath");
    dart.throw(new core.UnsupportedError.new("File._renameLink"));
  }
  renameSync(newPath) {
    if (newPath == null) dart.nullFailed(L113, 318, 26, "newPath");
    let result = io._File._rename(io._Namespace._namespace, this[_rawPath$], newPath);
    io._File.throwIfError(core.Object.as(result), dart.str("Cannot rename file to '") + dart.str(newPath) + dart.str("'"), this.path);
    return io.File.new(newPath);
  }
  copy(newPath) {
    if (newPath == null) dart.nullFailed(L113, 324, 28, "newPath");
    return io._File._dispatchWithNamespace(4, [null, this[_rawPath$], newPath]).then(io.File, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, dart.str("Cannot copy file to '") + dart.str(newPath) + dart.str("'"), this.path));
      }
      return io.File.new(newPath);
    }, dynamicToFile()));
  }
  static _copy(namespace, oldPath, newPath) {
    if (namespace == null) dart.nullFailed(L106, 151, 27, "namespace");
    if (oldPath == null) dart.nullFailed(L106, 151, 48, "oldPath");
    if (newPath == null) dart.nullFailed(L106, 151, 64, "newPath");
    dart.throw(new core.UnsupportedError.new("File._copy"));
  }
  copySync(newPath) {
    if (newPath == null) dart.nullFailed(L113, 338, 24, "newPath");
    let result = io._File._copy(io._Namespace._namespace, this[_rawPath$], newPath);
    io._File.throwIfError(core.Object.as(result), dart.str("Cannot copy file to '") + dart.str(newPath) + dart.str("'"), this.path);
    return io.File.new(newPath);
  }
  open(opts) {
    let mode = opts && 'mode' in opts ? opts.mode : C108 || CT.C108;
    if (mode == null) dart.nullFailed(L113, 344, 43, "mode");
    if (!dart.equals(mode, io.FileMode.read) && !dart.equals(mode, io.FileMode.write) && !dart.equals(mode, io.FileMode.append) && !dart.equals(mode, io.FileMode.writeOnly) && !dart.equals(mode, io.FileMode.writeOnlyAppend)) {
      return FutureOfRandomAccessFile().error(new core.ArgumentError.new("Invalid file mode for this operation"));
    }
    return io._File._dispatchWithNamespace(5, [null, this[_rawPath$], mode[_mode]]).then(io.RandomAccessFile, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "Cannot open file", this.path));
      }
      return new io._RandomAccessFile.new(core.int.as(response), this.path);
    }, dynamicTo_RandomAccessFile()));
  }
  length() {
    return io._File._dispatchWithNamespace(12, [null, this[_rawPath$]]).then(core.int, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "Cannot retrieve length of file", this.path));
      }
      return FutureOrOfint().as(response);
    }, dynamicToFutureOrOfint()));
  }
  static _lengthFromPath(namespace, rawPath) {
    if (namespace == null) dart.nullFailed(L106, 156, 37, "namespace");
    if (rawPath == null) dart.nullFailed(L106, 156, 58, "rawPath");
    dart.throw(new core.UnsupportedError.new("File._lengthFromPath"));
  }
  lengthSync() {
    let result = io._File._lengthFromPath(io._Namespace._namespace, this[_rawPath$]);
    io._File.throwIfError(core.Object.as(result), "Cannot retrieve length of file", this.path);
    return core.int.as(result);
  }
  lastAccessed() {
    return io._File._dispatchWithNamespace(13, [null, this[_rawPath$]]).then(core.DateTime, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "Cannot retrieve access time", this.path));
      }
      return new core.DateTime.fromMillisecondsSinceEpoch(core.int.as(response));
    }, dynamicToDateTime()));
  }
  static _lastAccessed(namespace, rawPath) {
    if (namespace == null) dart.nullFailed(L106, 166, 35, "namespace");
    if (rawPath == null) dart.nullFailed(L106, 166, 56, "rawPath");
    dart.throw(new core.UnsupportedError.new("File._lastAccessed"));
  }
  lastAccessedSync() {
    let ms = io._File._lastAccessed(io._Namespace._namespace, this[_rawPath$]);
    io._File.throwIfError(core.Object.as(ms), "Cannot retrieve access time", this.path);
    return new core.DateTime.fromMillisecondsSinceEpoch(core.int.as(ms));
  }
  setLastAccessed(time) {
    if (time == null) dart.nullFailed(L113, 400, 35, "time");
    let millis = time.millisecondsSinceEpoch;
    return io._File._dispatchWithNamespace(14, [null, this[_rawPath$], millis]).then(dart.dynamic, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "Cannot set access time", this.path));
      }
      return null;
    }, dynamicToNullN()));
  }
  static _setLastAccessed(namespace, rawPath, millis) {
    if (namespace == null) dart.nullFailed(L106, 176, 38, "namespace");
    if (rawPath == null) dart.nullFailed(L106, 176, 59, "rawPath");
    if (millis == null) dart.nullFailed(L106, 176, 72, "millis");
    dart.throw(new core.UnsupportedError.new("File._setLastAccessed"));
  }
  setLastAccessedSync(time) {
    if (time == null) dart.nullFailed(L113, 415, 37, "time");
    let millis = time.millisecondsSinceEpoch;
    let result = io._File._setLastAccessed(io._Namespace._namespace, this[_rawPath$], millis);
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new("Failed to set file access time", this.path, result));
    }
  }
  lastModified() {
    return io._File._dispatchWithNamespace(15, [null, this[_rawPath$]]).then(core.DateTime, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "Cannot retrieve modification time", this.path));
      }
      return new core.DateTime.fromMillisecondsSinceEpoch(core.int.as(response));
    }, dynamicToDateTime()));
  }
  static _lastModified(namespace, rawPath) {
    if (namespace == null) dart.nullFailed(L106, 161, 35, "namespace");
    if (rawPath == null) dart.nullFailed(L106, 161, 56, "rawPath");
    dart.throw(new core.UnsupportedError.new("File._lastModified"));
  }
  lastModifiedSync() {
    let ms = io._File._lastModified(io._Namespace._namespace, this[_rawPath$]);
    io._File.throwIfError(core.Object.as(ms), "Cannot retrieve modification time", this.path);
    return new core.DateTime.fromMillisecondsSinceEpoch(core.int.as(ms));
  }
  setLastModified(time) {
    if (time == null) dart.nullFailed(L113, 443, 35, "time");
    let millis = time.millisecondsSinceEpoch;
    return io._File._dispatchWithNamespace(16, [null, this[_rawPath$], millis]).then(dart.dynamic, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "Cannot set modification time", this.path));
      }
      return null;
    }, dynamicToNullN()));
  }
  static _setLastModified(namespace, rawPath, millis) {
    if (namespace == null) dart.nullFailed(L106, 171, 38, "namespace");
    if (rawPath == null) dart.nullFailed(L106, 171, 59, "rawPath");
    if (millis == null) dart.nullFailed(L106, 171, 72, "millis");
    dart.throw(new core.UnsupportedError.new("File._setLastModified"));
  }
  setLastModifiedSync(time) {
    if (time == null) dart.nullFailed(L113, 459, 37, "time");
    let millis = time.millisecondsSinceEpoch;
    let result = io._File._setLastModified(io._Namespace._namespace, this[_rawPath$], millis);
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new("Failed to set file modification time", this.path, result));
    }
  }
  static _open(namespace, rawPath, mode) {
    if (namespace == null) dart.nullFailed(L106, 181, 27, "namespace");
    if (rawPath == null) dart.nullFailed(L106, 181, 48, "rawPath");
    if (mode == null) dart.nullFailed(L106, 181, 61, "mode");
    dart.throw(new core.UnsupportedError.new("File._open"));
  }
  openSync(opts) {
    let mode = opts && 'mode' in opts ? opts.mode : C108 || CT.C108;
    if (mode == null) dart.nullFailed(L113, 470, 39, "mode");
    if (!dart.equals(mode, io.FileMode.read) && !dart.equals(mode, io.FileMode.write) && !dart.equals(mode, io.FileMode.append) && !dart.equals(mode, io.FileMode.writeOnly) && !dart.equals(mode, io.FileMode.writeOnlyAppend)) {
      dart.throw(new core.ArgumentError.new("Invalid file mode for this operation"));
    }
    let id = io._File._open(io._Namespace._namespace, this[_rawPath$], mode[_mode]);
    io._File.throwIfError(core.Object.as(id), "Cannot open file", this.path);
    return new io._RandomAccessFile.new(core.int.as(id), this[_path$]);
  }
  static _openStdio(fd) {
    if (fd == null) dart.nullFailed(L106, 186, 29, "fd");
    dart.throw(new core.UnsupportedError.new("File._openStdio"));
  }
  static _openStdioSync(fd) {
    if (fd == null) dart.nullFailed(L113, 485, 46, "fd");
    let id = io._File._openStdio(fd);
    if (id === 0) {
      dart.throw(new io.FileSystemException.new(dart.str("Cannot open stdio file for: ") + dart.str(fd)));
    }
    return new io._RandomAccessFile.new(id, "");
  }
  openRead(start = null, end = null) {
    return new io._FileStream.new(this.path, start, end);
  }
  openWrite(opts) {
    let mode = opts && 'mode' in opts ? opts.mode : C109 || CT.C109;
    if (mode == null) dart.nullFailed(L113, 497, 30, "mode");
    let encoding = opts && 'encoding' in opts ? opts.encoding : C107 || CT.C107;
    if (encoding == null) dart.nullFailed(L113, 497, 61, "encoding");
    if (!dart.equals(mode, io.FileMode.write) && !dart.equals(mode, io.FileMode.append) && !dart.equals(mode, io.FileMode.writeOnly) && !dart.equals(mode, io.FileMode.writeOnlyAppend)) {
      dart.throw(new core.ArgumentError.new("Invalid file mode for this operation"));
    }
    let consumer = new io._FileStreamConsumer.new(this, mode);
    return io.IOSink.new(consumer, {encoding: encoding});
  }
  readAsBytes() {
    function readDataChunked(file) {
      if (file == null) dart.nullFailed(L113, 509, 56, "file");
      let builder = _internal.BytesBuilder.new({copy: false});
      let completer = CompleterOfUint8List().new();
      function read() {
        file.read(65536).then(core.Null, dart.fn(data => {
          if (data == null) dart.nullFailed(L113, 513, 37, "data");
          if (dart.notNull(data[$length]) > 0) {
            builder.add(data);
            read();
          } else {
            completer.complete(builder.takeBytes());
          }
        }, Uint8ListToNullN()), {onError: dart.bind(completer, 'completeError')});
      }
      dart.fn(read, VoidTovoid());
      read();
      return completer.future;
    }
    dart.fn(readDataChunked, RandomAccessFileToFutureOfUint8List());
    return this.open().then(typed_data.Uint8List, dart.fn(file => {
      if (file == null) dart.nullFailed(L113, 527, 25, "file");
      return file.length().then(typed_data.Uint8List, dart.fn(length => {
        if (length == null) dart.nullFailed(L113, 528, 34, "length");
        if (length === 0) {
          return readDataChunked(file);
        }
        return file.read(length);
      }, intToFutureOfUint8List())).whenComplete(dart.bind(file, 'close'));
    }, RandomAccessFileToFutureOfUint8List()));
  }
  readAsBytesSync() {
    let opened = this.openSync();
    try {
      let data = null;
      let length = opened.lengthSync();
      if (length === 0) {
        let builder = _internal.BytesBuilder.new({copy: false});
        do {
          data = opened.readSync(65536);
          if (dart.notNull(data[$length]) > 0) builder.add(data);
        } while (dart.notNull(data[$length]) > 0);
        data = builder.takeBytes();
      } else {
        data = opened.readSync(length);
      }
      return data;
    } finally {
      opened.closeSync();
    }
  }
  [_tryDecode](bytes, encoding) {
    if (bytes == null) dart.nullFailed(L113, 560, 31, "bytes");
    if (encoding == null) dart.nullFailed(L113, 560, 47, "encoding");
    try {
      return encoding.decode(bytes);
    } catch (e) {
      let _ = dart.getThrown(e);
      if (core.Object.is(_)) {
        dart.throw(new io.FileSystemException.new(dart.str("Failed to decode data using encoding '") + dart.str(encoding.name) + dart.str("'"), this.path));
      } else
        throw e;
    }
  }
  readAsString(opts) {
    let encoding = opts && 'encoding' in opts ? opts.encoding : C107 || CT.C107;
    if (encoding == null) dart.nullFailed(L113, 569, 41, "encoding");
    let stack = core.StackTrace.current;
    return this.readAsBytes().then(core.String, dart.fn(bytes => {
      if (bytes == null) dart.nullFailed(L113, 574, 32, "bytes");
      try {
        return this[_tryDecode](bytes, encoding);
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (core.Object.is(e)) {
          return FutureOfString().error(e, stack);
        } else
          throw e$;
      }
    }, Uint8ListToFutureOrOfString()));
  }
  readAsStringSync(opts) {
    let encoding = opts && 'encoding' in opts ? opts.encoding : C107 || CT.C107;
    if (encoding == null) dart.nullFailed(L113, 583, 37, "encoding");
    return this[_tryDecode](this.readAsBytesSync(), encoding);
  }
  readAsLines(opts) {
    let encoding = opts && 'encoding' in opts ? opts.encoding : C107 || CT.C107;
    if (encoding == null) dart.nullFailed(L113, 586, 46, "encoding");
    return this.readAsString({encoding: encoding}).then(ListOfString(), dart.bind(C117 || CT.C117, 'convert'));
  }
  readAsLinesSync(opts) {
    let encoding = opts && 'encoding' in opts ? opts.encoding : C107 || CT.C107;
    if (encoding == null) dart.nullFailed(L113, 589, 42, "encoding");
    return (C117 || CT.C117).convert(this.readAsStringSync({encoding: encoding}));
  }
  writeAsBytes(bytes, opts) {
    if (bytes == null) dart.nullFailed(L113, 592, 39, "bytes");
    let mode = opts && 'mode' in opts ? opts.mode : C109 || CT.C109;
    if (mode == null) dart.nullFailed(L113, 593, 17, "mode");
    let flush = opts && 'flush' in opts ? opts.flush : false;
    if (flush == null) dart.nullFailed(L113, 593, 44, "flush");
    return this.open({mode: mode}).then(io.File, dart.fn(file => {
      if (file == null) dart.nullFailed(L113, 594, 35, "file");
      return file.writeFrom(bytes, 0, bytes[$length]).then(io.File, dart.fn(_ => {
        if (_ == null) dart.nullFailed(L113, 595, 65, "_");
        if (dart.test(flush)) return file.flush().then(io.File, dart.fn(_ => {
          if (_ == null) dart.nullFailed(L113, 596, 46, "_");
          return this;
        }, RandomAccessFileTo_File()));
        return this;
      }, RandomAccessFileToFutureOrOfFile())).whenComplete(dart.bind(file, 'close'));
    }, RandomAccessFileToFutureOfFile()));
  }
  writeAsBytesSync(bytes, opts) {
    if (bytes == null) dart.nullFailed(L113, 602, 35, "bytes");
    let mode = opts && 'mode' in opts ? opts.mode : C109 || CT.C109;
    if (mode == null) dart.nullFailed(L113, 603, 17, "mode");
    let flush = opts && 'flush' in opts ? opts.flush : false;
    if (flush == null) dart.nullFailed(L113, 603, 44, "flush");
    let opened = this.openSync({mode: mode});
    try {
      opened.writeFromSync(bytes, 0, bytes[$length]);
      if (dart.test(flush)) opened.flushSync();
    } finally {
      opened.closeSync();
    }
  }
  writeAsString(contents, opts) {
    if (contents == null) dart.nullFailed(L113, 613, 37, "contents");
    let mode = opts && 'mode' in opts ? opts.mode : C109 || CT.C109;
    if (mode == null) dart.nullFailed(L113, 614, 17, "mode");
    let encoding = opts && 'encoding' in opts ? opts.encoding : C107 || CT.C107;
    if (encoding == null) dart.nullFailed(L113, 615, 16, "encoding");
    let flush = opts && 'flush' in opts ? opts.flush : false;
    if (flush == null) dart.nullFailed(L113, 616, 12, "flush");
    try {
      return this.writeAsBytes(encoding.encode(contents), {mode: mode, flush: flush});
    } catch (e$) {
      let e = dart.getThrown(e$);
      if (core.Object.is(e)) {
        return FutureOfFile().error(e);
      } else
        throw e$;
    }
  }
  writeAsStringSync(contents, opts) {
    if (contents == null) dart.nullFailed(L113, 624, 33, "contents");
    let mode = opts && 'mode' in opts ? opts.mode : C109 || CT.C109;
    if (mode == null) dart.nullFailed(L113, 625, 17, "mode");
    let encoding = opts && 'encoding' in opts ? opts.encoding : C107 || CT.C107;
    if (encoding == null) dart.nullFailed(L113, 626, 16, "encoding");
    let flush = opts && 'flush' in opts ? opts.flush : false;
    if (flush == null) dart.nullFailed(L113, 627, 12, "flush");
    this.writeAsBytesSync(encoding.encode(contents), {mode: mode, flush: flush});
  }
  toString() {
    return dart.str("File: '") + dart.str(this.path) + dart.str("'");
  }
  static throwIfError(result, msg, path) {
    if (result == null) dart.nullFailed(L113, 633, 30, "result");
    if (msg == null) dart.nullFailed(L113, 633, 45, "msg");
    if (path == null) dart.nullFailed(L113, 633, 57, "path");
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new(msg, path, result));
    }
  }
  static _checkNotNull(T, t, name) {
    if (name == null) dart.nullFailed(L113, 640, 41, "name");
    core.ArgumentError.checkNotNull(T, t, name);
    return t;
  }
};
(io._File.new = function(path) {
  if (path == null) dart.nullFailed(L113, 204, 16, "path");
  this[_path$0] = io._File._checkNotNull(core.String, path, "path");
  this[_rawPath$0] = io.FileSystemEntity._toUtf8Array(path);
  ;
}).prototype = io._File.prototype;
(io._File.fromRawPath = function(rawPath) {
  if (rawPath == null) dart.nullFailed(L113, 208, 31, "rawPath");
  this[_rawPath$0] = io.FileSystemEntity._toNullTerminatedUtf8Array(io._File._checkNotNull(typed_data.Uint8List, rawPath, "rawPath"));
  this[_path$0] = io.FileSystemEntity._toStringFromUtf8Array(rawPath);
  ;
}).prototype = io._File.prototype;
dart.addTypeTests(io._File);
dart.addTypeCaches(io._File);
io._File[dart.implements] = () => [io.File];
dart.setMethodSignature(io._File, () => ({
  __proto__: dart.getMethods(io._File.__proto__),
  exists: dart.fnType(async.Future$(core.bool), []),
  existsSync: dart.fnType(core.bool, []),
  create: dart.fnType(async.Future$(io.File), [], {recursive: core.bool}, {}),
  createSync: dart.fnType(dart.void, [], {recursive: core.bool}, {}),
  [_delete]: dart.fnType(async.Future$(io.File), [], {recursive: core.bool}, {}),
  [_deleteSync]: dart.fnType(dart.void, [], {recursive: core.bool}, {}),
  rename: dart.fnType(async.Future$(io.File), [core.String]),
  renameSync: dart.fnType(io.File, [core.String]),
  copy: dart.fnType(async.Future$(io.File), [core.String]),
  copySync: dart.fnType(io.File, [core.String]),
  open: dart.fnType(async.Future$(io.RandomAccessFile), [], {mode: io.FileMode}, {}),
  length: dart.fnType(async.Future$(core.int), []),
  lengthSync: dart.fnType(core.int, []),
  lastAccessed: dart.fnType(async.Future$(core.DateTime), []),
  lastAccessedSync: dart.fnType(core.DateTime, []),
  setLastAccessed: dart.fnType(async.Future, [core.DateTime]),
  setLastAccessedSync: dart.fnType(dart.void, [core.DateTime]),
  lastModified: dart.fnType(async.Future$(core.DateTime), []),
  lastModifiedSync: dart.fnType(core.DateTime, []),
  setLastModified: dart.fnType(async.Future, [core.DateTime]),
  setLastModifiedSync: dart.fnType(dart.void, [core.DateTime]),
  openSync: dart.fnType(io.RandomAccessFile, [], {mode: io.FileMode}, {}),
  openRead: dart.fnType(async.Stream$(core.List$(core.int)), [], [dart.nullable(core.int), dart.nullable(core.int)]),
  openWrite: dart.fnType(io.IOSink, [], {encoding: convert.Encoding, mode: io.FileMode}, {}),
  readAsBytes: dart.fnType(async.Future$(typed_data.Uint8List), []),
  readAsBytesSync: dart.fnType(typed_data.Uint8List, []),
  [_tryDecode]: dart.fnType(core.String, [core.List$(core.int), convert.Encoding]),
  readAsString: dart.fnType(async.Future$(core.String), [], {encoding: convert.Encoding}, {}),
  readAsStringSync: dart.fnType(core.String, [], {encoding: convert.Encoding}, {}),
  readAsLines: dart.fnType(async.Future$(core.List$(core.String)), [], {encoding: convert.Encoding}, {}),
  readAsLinesSync: dart.fnType(core.List$(core.String), [], {encoding: convert.Encoding}, {}),
  writeAsBytes: dart.fnType(async.Future$(io.File), [core.List$(core.int)], {flush: core.bool, mode: io.FileMode}, {}),
  writeAsBytesSync: dart.fnType(dart.void, [core.List$(core.int)], {flush: core.bool, mode: io.FileMode}, {}),
  writeAsString: dart.fnType(async.Future$(io.File), [core.String], {encoding: convert.Encoding, flush: core.bool, mode: io.FileMode}, {}),
  writeAsStringSync: dart.fnType(dart.void, [core.String], {encoding: convert.Encoding, flush: core.bool, mode: io.FileMode}, {})
}));
dart.setGetterSignature(io._File, () => ({
  __proto__: dart.getGetters(io._File.__proto__),
  path: core.String,
  absolute: io.File
}));
dart.setLibraryUri(io._File, L104);
dart.setFieldSignature(io._File, () => ({
  __proto__: dart.getFields(io._File.__proto__),
  [_path$]: dart.finalFieldType(core.String),
  [_rawPath$]: dart.finalFieldType(typed_data.Uint8List)
}));
dart.defineExtensionMethods(io._File, ['toString']);
io._RandomAccessFileOps = class _RandomAccessFileOps extends core.Object {
  static new(pointer) {
    if (pointer == null) dart.nullFailed(L106, 212, 36, "pointer");
    dart.throw(new core.UnsupportedError.new("RandomAccessFile"));
  }
};
(io._RandomAccessFileOps[dart.mixinNew] = function() {
}).prototype = io._RandomAccessFileOps.prototype;
dart.addTypeTests(io._RandomAccessFileOps);
dart.addTypeCaches(io._RandomAccessFileOps);
dart.setLibraryUri(io._RandomAccessFileOps, L104);
var _asyncDispatched = dart.privateName(io, "_asyncDispatched");
var ___RandomAccessFile__resourceInfo = dart.privateName(io, "_#_RandomAccessFile#_resourceInfo");
var _resourceInfo = dart.privateName(io, "_resourceInfo");
var _maybeConnectHandler = dart.privateName(io, "_maybeConnectHandler");
var _maybePerformCleanup = dart.privateName(io, "_maybePerformCleanup");
var C118;
var C119;
var _dispatch = dart.privateName(io, "_dispatch");
var _checkAvailable = dart.privateName(io, "_checkAvailable");
var _fileLockValue = dart.privateName(io, "_fileLockValue");
io._RandomAccessFile = class _RandomAccessFile extends core.Object {
  get [_resourceInfo]() {
    let t181;
    t181 = this[___RandomAccessFile__resourceInfo];
    return t181 == null ? dart.throw(new _internal.LateInitializationErrorImpl.new("Field '_resourceInfo' has not been initialized.")) : t181;
  }
  set [_resourceInfo](t181) {
    if (t181 == null) dart.nullFailed(L113, 671, 26, "null");
    this[___RandomAccessFile__resourceInfo] = t181;
  }
  [_maybePerformCleanup]() {
    if (dart.test(this.closed)) {
      io._FileResourceInfo.FileClosed(this[_resourceInfo]);
    }
  }
  [_maybeConnectHandler]() {
    if (!dart.test(io._RandomAccessFile._connectedResourceHandler)) {
      developer.registerExtension("ext.dart.io.getOpenFiles", C118 || CT.C118);
      developer.registerExtension("ext.dart.io.getFileByID", C119 || CT.C119);
      io._RandomAccessFile._connectedResourceHandler = true;
    }
  }
  close() {
    return this[_dispatch](7, [null], {markClosed: true}).then(dart.void, dart.fn(result => {
      if (dart.equals(result, -1)) {
        dart.throw(new io.FileSystemException.new("Cannot close file", this.path));
      }
      this.closed = dart.test(this.closed) || dart.equals(result, 0);
      this[_maybePerformCleanup]();
    }, dynamicToNullN()));
  }
  closeSync() {
    this[_checkAvailable]();
    let id = this[_ops].close();
    if (id === -1) {
      dart.throw(new io.FileSystemException.new("Cannot close file", this.path));
    }
    this.closed = dart.test(this.closed) || id === 0;
    this[_maybePerformCleanup]();
  }
  readByte() {
    return this[_dispatch](18, [null]).then(core.int, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "readByte failed", this.path));
      }
      this[_resourceInfo].addRead(1);
      return FutureOrOfint().as(response);
    }, dynamicToFutureOrOfint()));
  }
  readByteSync() {
    this[_checkAvailable]();
    let result = this[_ops].readByte();
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new("readByte failed", this.path, result));
    }
    this[_resourceInfo].addRead(1);
    return core.int.as(result);
  }
  read(bytes) {
    if (bytes == null) dart.nullFailed(L113, 741, 30, "bytes");
    core.ArgumentError.checkNotNull(core.int, bytes, "bytes");
    return this[_dispatch](20, [null, bytes]).then(typed_data.Uint8List, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "read failed", this.path));
      }
      this[_resourceInfo].addRead(core.int.as(dart.dload(dart.dsend(response, '_get', [1]), 'length')));
      let result = typed_data.Uint8List.as(dart.dsend(response, '_get', [1]));
      return result;
    }, dynamicToUint8List()));
  }
  readSync(bytes) {
    if (bytes == null) dart.nullFailed(L113, 754, 26, "bytes");
    core.ArgumentError.checkNotNull(core.int, bytes, "bytes");
    this[_checkAvailable]();
    let result = this[_ops].read(bytes);
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new("readSync failed", this.path, result));
    }
    this[_resourceInfo].addRead(core.int.as(dart.dload(result, 'length')));
    return typed_data.Uint8List.as(result);
  }
  readInto(buffer, start = 0, end = null) {
    if (buffer == null) dart.nullFailed(L113, 766, 34, "buffer");
    if (start == null) dart.nullFailed(L113, 766, 47, "start");
    core.ArgumentError.checkNotNull(ListOfint(), buffer, "buffer");
    end = core.RangeError.checkValidRange(start, end, buffer[$length]);
    if (end == start) {
      return FutureOfint().value(0);
    }
    let length = dart.notNull(end) - dart.notNull(start);
    return this[_dispatch](21, [null, length]).then(core.int, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "readInto failed", this.path));
      }
      let read = core.int.as(dart.dsend(response, '_get', [1]));
      let data = ListOfint().as(dart.dsend(response, '_get', [2]));
      buffer[$setRange](start, dart.notNull(start) + dart.notNull(read), data);
      this[_resourceInfo].addRead(read);
      return read;
    }, dynamicToint()));
  }
  readIntoSync(buffer, start = 0, end = null) {
    if (buffer == null) dart.nullFailed(L113, 786, 30, "buffer");
    if (start == null) dart.nullFailed(L113, 786, 43, "start");
    core.ArgumentError.checkNotNull(ListOfint(), buffer, "buffer");
    this[_checkAvailable]();
    end = core.RangeError.checkValidRange(start, end, buffer[$length]);
    if (end == start) {
      return 0;
    }
    let result = this[_ops].readInto(buffer, start, end);
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new("readInto failed", this.path, result));
    }
    this[_resourceInfo].addRead(core.int.as(result));
    return core.int.as(result);
  }
  writeByte(value) {
    if (value == null) dart.nullFailed(L113, 802, 42, "value");
    core.ArgumentError.checkNotNull(core.int, value, "value");
    return this[_dispatch](19, [null, value]).then(io.RandomAccessFile, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "writeByte failed", this.path));
      }
      this[_resourceInfo].addWrite(1);
      return this;
    }, dynamicTo_RandomAccessFile()));
  }
  writeByteSync(value) {
    if (value == null) dart.nullFailed(L113, 814, 25, "value");
    this[_checkAvailable]();
    core.ArgumentError.checkNotNull(core.int, value, "value");
    let result = this[_ops].writeByte(value);
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new("writeByte failed", this.path, result));
    }
    this[_resourceInfo].addWrite(1);
    return core.int.as(result);
  }
  writeFrom(buffer, start = 0, end = null) {
    if (buffer == null) dart.nullFailed(L113, 826, 48, "buffer");
    if (start == null) dart.nullFailed(L113, 827, 12, "start");
    core.ArgumentError.checkNotNull(ListOfint(), buffer, "buffer");
    core.ArgumentError.checkNotNull(core.int, start, "start");
    end = core.RangeError.checkValidRange(start, end, buffer[$length]);
    if (end == start) {
      return FutureOfRandomAccessFile().value(this);
    }
    let result = null;
    try {
      result = io._ensureFastAndSerializableByteData(buffer, start, end);
    } catch (e$) {
      let e = dart.getThrown(e$);
      if (core.Object.is(e)) {
        return FutureOfRandomAccessFile().error(e);
      } else
        throw e$;
    }
    let request = core.List.filled(4, null);
    request[$_set](0, null);
    request[$_set](1, result.buffer);
    request[$_set](2, result.start);
    request[$_set](3, dart.notNull(end) - (dart.notNull(start) - dart.notNull(result.start)));
    return this[_dispatch](22, request).then(io.RandomAccessFile, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "writeFrom failed", this.path));
      }
      this[_resourceInfo].addWrite(dart.nullCheck(end) - (dart.notNull(start) - dart.notNull(result.start)));
      return this;
    }, dynamicTo_RandomAccessFile()));
  }
  writeFromSync(buffer, start = 0, end = null) {
    if (buffer == null) dart.nullFailed(L113, 856, 32, "buffer");
    if (start == null) dart.nullFailed(L113, 856, 45, "start");
    this[_checkAvailable]();
    core.ArgumentError.checkNotNull(ListOfint(), buffer, "buffer");
    core.ArgumentError.checkNotNull(core.int, start, "start");
    end = core.RangeError.checkValidRange(start, end, buffer[$length]);
    if (end == start) {
      return;
    }
    let bufferAndStart = io._ensureFastAndSerializableByteData(buffer, start, end);
    let result = this[_ops].writeFrom(bufferAndStart.buffer, bufferAndStart.start, dart.notNull(end) - (dart.notNull(start) - dart.notNull(bufferAndStart.start)));
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new("writeFrom failed", this.path, result));
    }
    this[_resourceInfo].addWrite(dart.notNull(end) - (dart.notNull(start) - dart.notNull(bufferAndStart.start)));
  }
  writeString(string, opts) {
    if (string == null) dart.nullFailed(L113, 875, 47, "string");
    let encoding = opts && 'encoding' in opts ? opts.encoding : C107 || CT.C107;
    if (encoding == null) dart.nullFailed(L113, 876, 17, "encoding");
    core.ArgumentError.checkNotNull(convert.Encoding, encoding, "encoding");
    let data = encoding.encode(string);
    return this.writeFrom(data, 0, data[$length]);
  }
  writeStringSync(string, opts) {
    if (string == null) dart.nullFailed(L113, 883, 31, "string");
    let encoding = opts && 'encoding' in opts ? opts.encoding : C107 || CT.C107;
    if (encoding == null) dart.nullFailed(L113, 883, 49, "encoding");
    core.ArgumentError.checkNotNull(convert.Encoding, encoding, "encoding");
    let data = encoding.encode(string);
    this.writeFromSync(data, 0, data[$length]);
  }
  position() {
    return this[_dispatch](8, [null]).then(core.int, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "position failed", this.path));
      }
      return FutureOrOfint().as(response);
    }, dynamicToFutureOrOfint()));
  }
  positionSync() {
    this[_checkAvailable]();
    let result = this[_ops].position();
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new("position failed", this.path, result));
    }
    return core.int.as(result);
  }
  setPosition(position) {
    if (position == null) dart.nullFailed(L113, 908, 44, "position");
    return this[_dispatch](9, [null, position]).then(io.RandomAccessFile, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "setPosition failed", this.path));
      }
      return this;
    }, dynamicTo_RandomAccessFile()));
  }
  setPositionSync(position) {
    if (position == null) dart.nullFailed(L113, 918, 28, "position");
    this[_checkAvailable]();
    let result = this[_ops].setPosition(position);
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new("setPosition failed", this.path, result));
    }
  }
  truncate(length) {
    if (length == null) dart.nullFailed(L113, 926, 41, "length");
    return this[_dispatch](10, [null, length]).then(io.RandomAccessFile, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "truncate failed", this.path));
      }
      return this;
    }, dynamicTo_RandomAccessFile()));
  }
  truncateSync(length) {
    if (length == null) dart.nullFailed(L113, 935, 25, "length");
    this[_checkAvailable]();
    let result = this[_ops].truncate(length);
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new("truncate failed", this.path, result));
    }
  }
  length() {
    return this[_dispatch](11, [null]).then(core.int, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "length failed", this.path));
      }
      return FutureOrOfint().as(response);
    }, dynamicToFutureOrOfint()));
  }
  lengthSync() {
    this[_checkAvailable]();
    let result = this[_ops].length();
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new("length failed", this.path, result));
    }
    return core.int.as(result);
  }
  flush() {
    return this[_dispatch](17, [null]).then(io.RandomAccessFile, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "flush failed", this.path));
      }
      return this;
    }, dynamicTo_RandomAccessFile()));
  }
  flushSync() {
    this[_checkAvailable]();
    let result = this[_ops].flush();
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new("flush failed", this.path, result));
    }
  }
  [_fileLockValue](fl) {
    if (fl == null) dart.nullFailed(L113, 984, 31, "fl");
    return fl[_type];
  }
  lock(mode = C114 || CT.C114, start = 0, end = -1) {
    if (mode == null) dart.nullFailed(L113, 987, 17, "mode");
    if (start == null) dart.nullFailed(L113, 987, 48, "start");
    if (end == null) dart.nullFailed(L113, 987, 63, "end");
    core.ArgumentError.checkNotNull(io.FileLock, mode, "mode");
    core.ArgumentError.checkNotNull(core.int, start, "start");
    core.ArgumentError.checkNotNull(core.int, end, "end");
    if (dart.notNull(start) < 0 || dart.notNull(end) < -1 || end !== -1 && dart.notNull(start) >= dart.notNull(end)) {
      dart.throw(new core.ArgumentError.new());
    }
    let lock = this[_fileLockValue](mode);
    return this[_dispatch](30, [null, lock, start, end]).then(io.RandomAccessFile, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "lock failed", this.path));
      }
      return this;
    }, dynamicTo_RandomAccessFile()));
  }
  unlock(start = 0, end = -1) {
    if (start == null) dart.nullFailed(L113, 1005, 40, "start");
    if (end == null) dart.nullFailed(L113, 1005, 55, "end");
    core.ArgumentError.checkNotNull(core.int, start, "start");
    core.ArgumentError.checkNotNull(core.int, end, "end");
    if (start == end) {
      dart.throw(new core.ArgumentError.new());
    }
    return this[_dispatch](30, [null, 0, start, end]).then(io.RandomAccessFile, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "unlock failed", this.path));
      }
      return this;
    }, dynamicTo_RandomAccessFile()));
  }
  lockSync(mode = C114 || CT.C114, start = 0, end = -1) {
    if (mode == null) dart.nullFailed(L113, 1022, 17, "mode");
    if (start == null) dart.nullFailed(L113, 1022, 48, "start");
    if (end == null) dart.nullFailed(L113, 1022, 63, "end");
    this[_checkAvailable]();
    core.ArgumentError.checkNotNull(io.FileLock, mode, "mode");
    core.ArgumentError.checkNotNull(core.int, start, "start");
    core.ArgumentError.checkNotNull(core.int, end, "end");
    if (dart.notNull(start) < 0 || dart.notNull(end) < -1 || end !== -1 && dart.notNull(start) >= dart.notNull(end)) {
      dart.throw(new core.ArgumentError.new());
    }
    let lock = this[_fileLockValue](mode);
    let result = this[_ops].lock(lock, start, end);
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new("lock failed", this.path, result));
    }
  }
  unlockSync(start = 0, end = -1) {
    if (start == null) dart.nullFailed(L113, 1038, 24, "start");
    if (end == null) dart.nullFailed(L113, 1038, 39, "end");
    this[_checkAvailable]();
    core.ArgumentError.checkNotNull(core.int, start, "start");
    core.ArgumentError.checkNotNull(core.int, end, "end");
    if (start == end) {
      dart.throw(new core.ArgumentError.new());
    }
    let result = this[_ops].lock(0, start, end);
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new("unlock failed", this.path, result));
    }
  }
  [_pointer]() {
    return this[_ops].getPointer();
  }
  [_dispatch](request, data, opts) {
    if (request == null) dart.nullFailed(L113, 1061, 24, "request");
    if (data == null) dart.nullFailed(L113, 1061, 38, "data");
    let markClosed = opts && 'markClosed' in opts ? opts.markClosed : false;
    if (markClosed == null) dart.nullFailed(L113, 1061, 50, "markClosed");
    if (dart.test(this.closed)) {
      return async.Future.error(new io.FileSystemException.new("File closed", this.path));
    }
    if (dart.test(this[_asyncDispatched])) {
      let msg = "An async operation is currently pending";
      return async.Future.error(new io.FileSystemException.new(msg, this.path));
    }
    if (dart.test(markClosed)) {
      this.closed = true;
    }
    this[_asyncDispatched] = true;
    data[$_set](0, this[_pointer]());
    return io._IOService._dispatch(request, data).whenComplete(dart.fn(() => {
      this[_asyncDispatched] = false;
    }, VoidToNullN()));
  }
  [_checkAvailable]() {
    if (dart.test(this[_asyncDispatched])) {
      dart.throw(new io.FileSystemException.new("An async operation is currently pending", this.path));
    }
    if (dart.test(this.closed)) {
      dart.throw(new io.FileSystemException.new("File closed", this.path));
    }
  }
};
(io._RandomAccessFile.new = function(pointer, path) {
  if (pointer == null) dart.nullFailed(L113, 674, 25, "pointer");
  if (path == null) dart.nullFailed(L113, 674, 39, "path");
  this[_asyncDispatched] = false;
  this[___RandomAccessFile__resourceInfo] = null;
  this.closed = false;
  this.path = path;
  this[_ops] = io._RandomAccessFileOps.new(pointer);
  this[_resourceInfo] = new io._FileResourceInfo.new(this);
  this[_maybeConnectHandler]();
}).prototype = io._RandomAccessFile.prototype;
dart.addTypeTests(io._RandomAccessFile);
dart.addTypeCaches(io._RandomAccessFile);
io._RandomAccessFile[dart.implements] = () => [io.RandomAccessFile];
dart.setMethodSignature(io._RandomAccessFile, () => ({
  __proto__: dart.getMethods(io._RandomAccessFile.__proto__),
  [_maybePerformCleanup]: dart.fnType(dart.void, []),
  [_maybeConnectHandler]: dart.fnType(dart.dynamic, []),
  close: dart.fnType(async.Future$(dart.void), []),
  closeSync: dart.fnType(dart.void, []),
  readByte: dart.fnType(async.Future$(core.int), []),
  readByteSync: dart.fnType(core.int, []),
  read: dart.fnType(async.Future$(typed_data.Uint8List), [core.int]),
  readSync: dart.fnType(typed_data.Uint8List, [core.int]),
  readInto: dart.fnType(async.Future$(core.int), [core.List$(core.int)], [core.int, dart.nullable(core.int)]),
  readIntoSync: dart.fnType(core.int, [core.List$(core.int)], [core.int, dart.nullable(core.int)]),
  writeByte: dart.fnType(async.Future$(io.RandomAccessFile), [core.int]),
  writeByteSync: dart.fnType(core.int, [core.int]),
  writeFrom: dart.fnType(async.Future$(io.RandomAccessFile), [core.List$(core.int)], [core.int, dart.nullable(core.int)]),
  writeFromSync: dart.fnType(dart.void, [core.List$(core.int)], [core.int, dart.nullable(core.int)]),
  writeString: dart.fnType(async.Future$(io.RandomAccessFile), [core.String], {encoding: convert.Encoding}, {}),
  writeStringSync: dart.fnType(dart.void, [core.String], {encoding: convert.Encoding}, {}),
  position: dart.fnType(async.Future$(core.int), []),
  positionSync: dart.fnType(core.int, []),
  setPosition: dart.fnType(async.Future$(io.RandomAccessFile), [core.int]),
  setPositionSync: dart.fnType(dart.void, [core.int]),
  truncate: dart.fnType(async.Future$(io.RandomAccessFile), [core.int]),
  truncateSync: dart.fnType(dart.void, [core.int]),
  length: dart.fnType(async.Future$(core.int), []),
  lengthSync: dart.fnType(core.int, []),
  flush: dart.fnType(async.Future$(io.RandomAccessFile), []),
  flushSync: dart.fnType(dart.void, []),
  [_fileLockValue]: dart.fnType(core.int, [io.FileLock]),
  lock: dart.fnType(async.Future$(io.RandomAccessFile), [], [io.FileLock, core.int, core.int]),
  unlock: dart.fnType(async.Future$(io.RandomAccessFile), [], [core.int, core.int]),
  lockSync: dart.fnType(dart.void, [], [io.FileLock, core.int, core.int]),
  unlockSync: dart.fnType(dart.void, [], [core.int, core.int]),
  [_pointer]: dart.fnType(core.int, []),
  [_dispatch]: dart.fnType(async.Future, [core.int, core.List], {markClosed: core.bool}, {}),
  [_checkAvailable]: dart.fnType(dart.void, [])
}));
dart.setGetterSignature(io._RandomAccessFile, () => ({
  __proto__: dart.getGetters(io._RandomAccessFile.__proto__),
  [_resourceInfo]: io._FileResourceInfo
}));
dart.setSetterSignature(io._RandomAccessFile, () => ({
  __proto__: dart.getSetters(io._RandomAccessFile.__proto__),
  [_resourceInfo]: io._FileResourceInfo
}));
dart.setLibraryUri(io._RandomAccessFile, L104);
dart.setFieldSignature(io._RandomAccessFile, () => ({
  __proto__: dart.getFields(io._RandomAccessFile.__proto__),
  path: dart.finalFieldType(core.String),
  [_asyncDispatched]: dart.fieldType(core.bool),
  [___RandomAccessFile__resourceInfo]: dart.fieldType(dart.nullable(io._FileResourceInfo)),
  [_ops]: dart.fieldType(io._RandomAccessFileOps),
  closed: dart.fieldType(core.bool)
}));
dart.defineLazy(io._RandomAccessFile, {
  /*io._RandomAccessFile._connectedResourceHandler*/get _connectedResourceHandler() {
    return false;
  },
  set _connectedResourceHandler(_) {},
  /*io._RandomAccessFile.lockUnlock*/get lockUnlock() {
    return 0;
  }
}, false);
var C120;
var _type$2 = dart.privateName(io, "FileSystemEntityType._type");
var C121;
var C122;
var C123;
var C124;
var C125;
io.FileSystemEntityType = class FileSystemEntityType extends core.Object {
  get [_type]() {
    return this[_type$2];
  }
  set [_type](value) {
    super[_type] = value;
  }
  static _lookup(type) {
    if (type == null) dart.nullFailed(L110, 42, 43, "type");
    return io.FileSystemEntityType._typeList[$_get](type);
  }
  toString() {
    return (C120 || CT.C120)[$_get](this[_type]);
  }
};
(io.FileSystemEntityType._internal = function(_type) {
  if (_type == null) dart.nullFailed(L110, 40, 45, "_type");
  this[_type$2] = _type;
  ;
}).prototype = io.FileSystemEntityType.prototype;
dart.addTypeTests(io.FileSystemEntityType);
dart.addTypeCaches(io.FileSystemEntityType);
dart.setLibraryUri(io.FileSystemEntityType, L104);
dart.setFieldSignature(io.FileSystemEntityType, () => ({
  __proto__: dart.getFields(io.FileSystemEntityType.__proto__),
  [_type]: dart.finalFieldType(core.int)
}));
dart.defineExtensionMethods(io.FileSystemEntityType, ['toString']);
dart.defineLazy(io.FileSystemEntityType, {
  /*io.FileSystemEntityType.file*/get file() {
    return C121 || CT.C121;
  },
  /*io.FileSystemEntityType.FILE*/get FILE() {
    return C121 || CT.C121;
  },
  /*io.FileSystemEntityType.directory*/get directory() {
    return C122 || CT.C122;
  },
  /*io.FileSystemEntityType.DIRECTORY*/get DIRECTORY() {
    return C122 || CT.C122;
  },
  /*io.FileSystemEntityType.link*/get link() {
    return C123 || CT.C123;
  },
  /*io.FileSystemEntityType.LINK*/get LINK() {
    return C123 || CT.C123;
  },
  /*io.FileSystemEntityType.notFound*/get notFound() {
    return C124 || CT.C124;
  },
  /*io.FileSystemEntityType.NOT_FOUND*/get NOT_FOUND() {
    return C124 || CT.C124;
  },
  /*io.FileSystemEntityType._typeList*/get _typeList() {
    return C125 || CT.C125;
  }
}, false);
var C126;
var changed$ = dart.privateName(io, "FileStat.changed");
var modified$ = dart.privateName(io, "FileStat.modified");
var accessed$ = dart.privateName(io, "FileStat.accessed");
var type$1 = dart.privateName(io, "FileStat.type");
var mode$0 = dart.privateName(io, "FileStat.mode");
var size$ = dart.privateName(io, "FileStat.size");
io.FileStat = class FileStat extends core.Object {
  get changed() {
    return this[changed$];
  }
  set changed(value) {
    super.changed = value;
  }
  get modified() {
    return this[modified$];
  }
  set modified(value) {
    super.modified = value;
  }
  get accessed() {
    return this[accessed$];
  }
  set accessed(value) {
    super.accessed = value;
  }
  get type() {
    return this[type$1];
  }
  set type(value) {
    super.type = value;
  }
  get mode() {
    return this[mode$0];
  }
  set mode(value) {
    super.mode = value;
  }
  get size() {
    return this[size$];
  }
  set size(value) {
    super.size = value;
  }
  static _statSync(namespace, path) {
    if (namespace == null) dart.nullFailed(L106, 84, 31, "namespace");
    if (path == null) dart.nullFailed(L106, 84, 49, "path");
    dart.throw(new core.UnsupportedError.new("FileStat.stat"));
  }
  static statSync(path) {
    if (path == null) dart.nullFailed(L110, 117, 35, "path");
    let overrides = io.IOOverrides.current;
    if (overrides == null) {
      return io.FileStat._statSyncInternal(path);
    }
    return overrides.statSync(path);
  }
  static _statSyncInternal(path) {
    if (path == null) dart.nullFailed(L110, 125, 44, "path");
    if (dart.test(io.Platform.isWindows)) {
      path = io.FileSystemEntity._trimTrailingPathSeparators(path);
    }
    let data = io.FileStat._statSync(io._Namespace._namespace, path);
    if (io.OSError.is(data)) return io.FileStat._notFound;
    return new io.FileStat._internal(new core.DateTime.fromMillisecondsSinceEpoch(core.int.as(dart.dsend(data, '_get', [1]))), new core.DateTime.fromMillisecondsSinceEpoch(core.int.as(dart.dsend(data, '_get', [2]))), new core.DateTime.fromMillisecondsSinceEpoch(core.int.as(dart.dsend(data, '_get', [3]))), io.FileSystemEntityType._lookup(core.int.as(dart.dsend(data, '_get', [0]))), core.int.as(dart.dsend(data, '_get', [4])), core.int.as(dart.dsend(data, '_get', [5])));
  }
  static stat(path) {
    if (path == null) dart.nullFailed(L110, 147, 39, "path");
    let overrides = io.IOOverrides.current;
    if (overrides == null) {
      return io.FileStat._stat(path);
    }
    return overrides.stat(path);
  }
  static _stat(path) {
    if (path == null) dart.nullFailed(L110, 155, 40, "path");
    if (dart.test(io.Platform.isWindows)) {
      path = io.FileSystemEntity._trimTrailingPathSeparators(path);
    }
    return io._File._dispatchWithNamespace(29, [null, path]).then(io.FileStat, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        return io.FileStat._notFound;
      }
      let data = core.List.as(dart.dsend(response, '_get', [1]));
      return new io.FileStat._internal(new core.DateTime.fromMillisecondsSinceEpoch(core.int.as(data[$_get](1))), new core.DateTime.fromMillisecondsSinceEpoch(core.int.as(data[$_get](2))), new core.DateTime.fromMillisecondsSinceEpoch(core.int.as(data[$_get](3))), io.FileSystemEntityType._lookup(core.int.as(data[$_get](0))), core.int.as(data[$_get](4)), core.int.as(data[$_get](5)));
    }, dynamicToFileStat()));
  }
  toString() {
    return dart.str("FileStat: type ") + dart.str(this.type) + dart.str("\n          changed ") + dart.str(this.changed) + dart.str("\n          modified ") + dart.str(this.modified) + dart.str("\n          accessed ") + dart.str(this.accessed) + dart.str("\n          mode ") + dart.str(this.modeString()) + dart.str("\n          size ") + dart.str(this.size);
  }
  modeString() {
    let t183;
    let permissions = dart.notNull(this.mode) & 4095;
    let codes = C126 || CT.C126;
    let result = [];
    if ((permissions & 2048) !== 0) result[$add]("(suid) ");
    if ((permissions & 1024) !== 0) result[$add]("(guid) ");
    if ((permissions & 512) !== 0) result[$add]("(sticky) ");
    t183 = result;
    (() => {
      t183[$add](codes[$_get](permissions >> 6 & 7));
      t183[$add](codes[$_get](permissions >> 3 & 7));
      t183[$add](codes[$_get](permissions & 7));
      return t183;
    })();
    return result[$join]();
  }
};
(io.FileStat._internal = function(changed, modified, accessed, type, mode, size) {
  if (changed == null) dart.nullFailed(L110, 105, 27, "changed");
  if (modified == null) dart.nullFailed(L110, 105, 41, "modified");
  if (accessed == null) dart.nullFailed(L110, 105, 56, "accessed");
  if (type == null) dart.nullFailed(L110, 105, 71, "type");
  if (mode == null) dart.nullFailed(L110, 106, 12, "mode");
  if (size == null) dart.nullFailed(L110, 106, 23, "size");
  this[changed$] = changed;
  this[modified$] = modified;
  this[accessed$] = accessed;
  this[type$1] = type;
  this[mode$0] = mode;
  this[size$] = size;
  ;
}).prototype = io.FileStat.prototype;
dart.addTypeTests(io.FileStat);
dart.addTypeCaches(io.FileStat);
dart.setMethodSignature(io.FileStat, () => ({
  __proto__: dart.getMethods(io.FileStat.__proto__),
  modeString: dart.fnType(core.String, [])
}));
dart.setLibraryUri(io.FileStat, L104);
dart.setFieldSignature(io.FileStat, () => ({
  __proto__: dart.getFields(io.FileStat.__proto__),
  changed: dart.finalFieldType(core.DateTime),
  modified: dart.finalFieldType(core.DateTime),
  accessed: dart.finalFieldType(core.DateTime),
  type: dart.finalFieldType(io.FileSystemEntityType),
  mode: dart.finalFieldType(core.int),
  size: dart.finalFieldType(core.int)
}));
dart.defineExtensionMethods(io.FileStat, ['toString']);
dart.defineLazy(io.FileStat, {
  /*io.FileStat._type*/get _type() {
    return 0;
  },
  /*io.FileStat._changedTime*/get _changedTime() {
    return 1;
  },
  /*io.FileStat._modifiedTime*/get _modifiedTime() {
    return 2;
  },
  /*io.FileStat._accessedTime*/get _accessedTime() {
    return 3;
  },
  /*io.FileStat._mode*/get _mode() {
    return 4;
  },
  /*io.FileStat._size*/get _size() {
    return 5;
  },
  /*io.FileStat._epoch*/get _epoch() {
    return new core.DateTime.fromMillisecondsSinceEpoch(0, {isUtc: true});
  },
  /*io.FileStat._notFound*/get _notFound() {
    return new io.FileStat._internal(io.FileStat._epoch, io.FileStat._epoch, io.FileStat._epoch, io.FileSystemEntityType.notFound, 0, -1);
  }
}, false);
var type$2 = dart.privateName(io, "FileSystemEvent.type");
var path$0 = dart.privateName(io, "FileSystemEvent.path");
var isDirectory$ = dart.privateName(io, "FileSystemEvent.isDirectory");
io.FileSystemEvent = class FileSystemEvent extends core.Object {
  get type() {
    return this[type$2];
  }
  set type(value) {
    super.type = value;
  }
  get path() {
    return this[path$0];
  }
  set path(value) {
    super.path = value;
  }
  get isDirectory() {
    return this[isDirectory$];
  }
  set isDirectory(value) {
    super.isDirectory = value;
  }
};
(io.FileSystemEvent.__ = function(type, path, isDirectory) {
  if (type == null) dart.nullFailed(L110, 987, 26, "type");
  if (path == null) dart.nullFailed(L110, 987, 37, "path");
  if (isDirectory == null) dart.nullFailed(L110, 987, 48, "isDirectory");
  this[type$2] = type;
  this[path$0] = path;
  this[isDirectory$] = isDirectory;
  ;
}).prototype = io.FileSystemEvent.prototype;
dart.addTypeTests(io.FileSystemEvent);
dart.addTypeCaches(io.FileSystemEvent);
dart.setLibraryUri(io.FileSystemEvent, L104);
dart.setFieldSignature(io.FileSystemEvent, () => ({
  __proto__: dart.getFields(io.FileSystemEvent.__proto__),
  type: dart.finalFieldType(core.int),
  path: dart.finalFieldType(core.String),
  isDirectory: dart.finalFieldType(core.bool)
}));
dart.defineLazy(io.FileSystemEvent, {
  /*io.FileSystemEvent.create*/get create() {
    return 1;
  },
  /*io.FileSystemEvent.CREATE*/get CREATE() {
    return 1;
  },
  /*io.FileSystemEvent.modify*/get modify() {
    return 2;
  },
  /*io.FileSystemEvent.MODIFY*/get MODIFY() {
    return 2;
  },
  /*io.FileSystemEvent.delete*/get delete() {
    return 4;
  },
  /*io.FileSystemEvent.DELETE*/get DELETE() {
    return 4;
  },
  /*io.FileSystemEvent.move*/get move() {
    return 8;
  },
  /*io.FileSystemEvent.MOVE*/get MOVE() {
    return 8;
  },
  /*io.FileSystemEvent.all*/get all() {
    return 15;
  },
  /*io.FileSystemEvent.ALL*/get ALL() {
    return 15;
  },
  /*io.FileSystemEvent._modifyAttributes*/get _modifyAttributes() {
    return 16;
  },
  /*io.FileSystemEvent._deleteSelf*/get _deleteSelf() {
    return 32;
  },
  /*io.FileSystemEvent._isDir*/get _isDir() {
    return 64;
  }
}, false);
io.FileSystemCreateEvent = class FileSystemCreateEvent extends io.FileSystemEvent {
  toString() {
    return dart.str("FileSystemCreateEvent('") + dart.str(this.path) + dart.str("')");
  }
};
(io.FileSystemCreateEvent.__ = function(path, isDirectory) {
  io.FileSystemCreateEvent.__proto__.__.call(this, 1, core.String.as(path), core.bool.as(isDirectory));
  ;
}).prototype = io.FileSystemCreateEvent.prototype;
dart.addTypeTests(io.FileSystemCreateEvent);
dart.addTypeCaches(io.FileSystemCreateEvent);
dart.setLibraryUri(io.FileSystemCreateEvent, L104);
dart.defineExtensionMethods(io.FileSystemCreateEvent, ['toString']);
var contentChanged$ = dart.privateName(io, "FileSystemModifyEvent.contentChanged");
io.FileSystemModifyEvent = class FileSystemModifyEvent extends io.FileSystemEvent {
  get contentChanged() {
    return this[contentChanged$];
  }
  set contentChanged(value) {
    super.contentChanged = value;
  }
  toString() {
    return dart.str("FileSystemModifyEvent('") + dart.str(this.path) + dart.str("', contentChanged=") + dart.str(this.contentChanged) + dart.str(")");
  }
};
(io.FileSystemModifyEvent.__ = function(path, isDirectory, contentChanged) {
  if (contentChanged == null) dart.nullFailed(L110, 1010, 51, "contentChanged");
  this[contentChanged$] = contentChanged;
  io.FileSystemModifyEvent.__proto__.__.call(this, 2, core.String.as(path), core.bool.as(isDirectory));
  ;
}).prototype = io.FileSystemModifyEvent.prototype;
dart.addTypeTests(io.FileSystemModifyEvent);
dart.addTypeCaches(io.FileSystemModifyEvent);
dart.setLibraryUri(io.FileSystemModifyEvent, L104);
dart.setFieldSignature(io.FileSystemModifyEvent, () => ({
  __proto__: dart.getFields(io.FileSystemModifyEvent.__proto__),
  contentChanged: dart.finalFieldType(core.bool)
}));
dart.defineExtensionMethods(io.FileSystemModifyEvent, ['toString']);
io.FileSystemDeleteEvent = class FileSystemDeleteEvent extends io.FileSystemEvent {
  toString() {
    return dart.str("FileSystemDeleteEvent('") + dart.str(this.path) + dart.str("')");
  }
};
(io.FileSystemDeleteEvent.__ = function(path, isDirectory) {
  io.FileSystemDeleteEvent.__proto__.__.call(this, 4, core.String.as(path), core.bool.as(isDirectory));
  ;
}).prototype = io.FileSystemDeleteEvent.prototype;
dart.addTypeTests(io.FileSystemDeleteEvent);
dart.addTypeCaches(io.FileSystemDeleteEvent);
dart.setLibraryUri(io.FileSystemDeleteEvent, L104);
dart.defineExtensionMethods(io.FileSystemDeleteEvent, ['toString']);
var destination$ = dart.privateName(io, "FileSystemMoveEvent.destination");
io.FileSystemMoveEvent = class FileSystemMoveEvent extends io.FileSystemEvent {
  get destination() {
    return this[destination$];
  }
  set destination(value) {
    super.destination = value;
  }
  toString() {
    let buffer = new core.StringBuffer.new();
    buffer.write(dart.str("FileSystemMoveEvent('") + dart.str(this.path) + dart.str("'"));
    if (this.destination != null) buffer.write(dart.str(", '") + dart.str(this.destination) + dart.str("'"));
    buffer.write(")");
    return buffer.toString();
  }
};
(io.FileSystemMoveEvent.__ = function(path, isDirectory, destination) {
  this[destination$] = destination;
  io.FileSystemMoveEvent.__proto__.__.call(this, 8, core.String.as(path), core.bool.as(isDirectory));
  ;
}).prototype = io.FileSystemMoveEvent.prototype;
dart.addTypeTests(io.FileSystemMoveEvent);
dart.addTypeCaches(io.FileSystemMoveEvent);
dart.setLibraryUri(io.FileSystemMoveEvent, L104);
dart.setFieldSignature(io.FileSystemMoveEvent, () => ({
  __proto__: dart.getFields(io.FileSystemMoveEvent.__proto__),
  destination: dart.finalFieldType(dart.nullable(core.String))
}));
dart.defineExtensionMethods(io.FileSystemMoveEvent, ['toString']);
io._FileSystemWatcher = class _FileSystemWatcher extends core.Object {
  static _watch(path, events, recursive) {
    if (path == null) dart.nullFailed(L106, 691, 14, "path");
    if (events == null) dart.nullFailed(L106, 691, 24, "events");
    if (recursive == null) dart.nullFailed(L106, 691, 37, "recursive");
    dart.throw(new core.UnsupportedError.new("_FileSystemWatcher.watch"));
  }
  static get isSupported() {
    dart.throw(new core.UnsupportedError.new("_FileSystemWatcher.isSupported"));
  }
};
(io._FileSystemWatcher.new = function() {
  ;
}).prototype = io._FileSystemWatcher.prototype;
dart.addTypeTests(io._FileSystemWatcher);
dart.addTypeCaches(io._FileSystemWatcher);
dart.setLibraryUri(io._FileSystemWatcher, L104);
io._IOResourceInfo = class _IOResourceInfo extends core.Object {
  static get timestamp() {
    return dart.notNull(io._IOResourceInfo._startTime) + dart.notNull(io._IOResourceInfo._sw.elapsedMicroseconds) / 1000;
  }
  get referenceValueMap() {
    return new (IdentityMapOfString$dynamic()).from(["type", dart.str("@") + dart.str(this.type), "id", this.id, "name", this.name]);
  }
  static getNextID() {
    let t183;
    t183 = io._IOResourceInfo._count;
    io._IOResourceInfo._count = dart.notNull(t183) + 1;
    return t183;
  }
};
(io._IOResourceInfo.new = function(type) {
  if (type == null) dart.nullFailed(L114, 18, 24, "type");
  this.type = type;
  this.id = io._IOResourceInfo.getNextID();
  ;
}).prototype = io._IOResourceInfo.prototype;
dart.addTypeTests(io._IOResourceInfo);
dart.addTypeCaches(io._IOResourceInfo);
dart.setGetterSignature(io._IOResourceInfo, () => ({
  __proto__: dart.getGetters(io._IOResourceInfo.__proto__),
  referenceValueMap: core.Map$(core.String, dart.dynamic)
}));
dart.setLibraryUri(io._IOResourceInfo, L104);
dart.setFieldSignature(io._IOResourceInfo, () => ({
  __proto__: dart.getFields(io._IOResourceInfo.__proto__),
  type: dart.finalFieldType(core.String),
  id: dart.finalFieldType(core.int)
}));
dart.defineLazy(io._IOResourceInfo, {
  /*io._IOResourceInfo._count*/get _count() {
    return 0;
  },
  set _count(_) {},
  /*io._IOResourceInfo._sw*/get _sw() {
    let t183;
    return t183 = new core.Stopwatch.new(), (() => {
      t183.start();
      return t183;
    })();
  },
  /*io._IOResourceInfo._startTime*/get _startTime() {
    return new core.DateTime.now().millisecondsSinceEpoch;
  }
}, false);
io._ReadWriteResourceInfo = class _ReadWriteResourceInfo extends io._IOResourceInfo {
  addRead(bytes) {
    if (bytes == null) dart.nullFailed(L114, 47, 20, "bytes");
    this.totalRead = dart.notNull(this.totalRead) + dart.notNull(bytes);
    this.readCount = dart.notNull(this.readCount) + 1;
    this.lastRead = io._IOResourceInfo.timestamp;
  }
  didRead() {
    this.addRead(0);
  }
  addWrite(bytes) {
    if (bytes == null) dart.nullFailed(L114, 60, 21, "bytes");
    this.totalWritten = dart.notNull(this.totalWritten) + dart.notNull(bytes);
    this.writeCount = dart.notNull(this.writeCount) + 1;
    this.lastWrite = io._IOResourceInfo.timestamp;
  }
  get fullValueMap() {
    return new (IdentityMapOfString$dynamic()).from(["type", this.type, "id", this.id, "name", this.name, "totalRead", this.totalRead, "totalWritten", this.totalWritten, "readCount", this.readCount, "writeCount", this.writeCount, "lastRead", this.lastRead, "lastWrite", this.lastWrite]);
  }
};
(io._ReadWriteResourceInfo.new = function(type) {
  if (type == null) dart.nullFailed(L114, 66, 33, "type");
  this.totalRead = 0;
  this.totalWritten = 0;
  this.readCount = 0;
  this.writeCount = 0;
  this.lastRead = 0.0;
  this.lastWrite = 0.0;
  io._ReadWriteResourceInfo.__proto__.new.call(this, type);
  ;
}).prototype = io._ReadWriteResourceInfo.prototype;
dart.addTypeTests(io._ReadWriteResourceInfo);
dart.addTypeCaches(io._ReadWriteResourceInfo);
dart.setMethodSignature(io._ReadWriteResourceInfo, () => ({
  __proto__: dart.getMethods(io._ReadWriteResourceInfo.__proto__),
  addRead: dart.fnType(dart.void, [core.int]),
  didRead: dart.fnType(dart.void, []),
  addWrite: dart.fnType(dart.void, [core.int])
}));
dart.setGetterSignature(io._ReadWriteResourceInfo, () => ({
  __proto__: dart.getGetters(io._ReadWriteResourceInfo.__proto__),
  fullValueMap: core.Map$(core.String, dart.dynamic)
}));
dart.setLibraryUri(io._ReadWriteResourceInfo, L104);
dart.setFieldSignature(io._ReadWriteResourceInfo, () => ({
  __proto__: dart.getFields(io._ReadWriteResourceInfo.__proto__),
  totalRead: dart.fieldType(core.int),
  totalWritten: dart.fieldType(core.int),
  readCount: dart.fieldType(core.int),
  writeCount: dart.fieldType(core.int),
  lastRead: dart.fieldType(core.double),
  lastWrite: dart.fieldType(core.double)
}));
io._FileResourceInfo = class _FileResourceInfo extends io._ReadWriteResourceInfo {
  static FileOpened(info) {
    if (info == null) dart.nullFailed(L114, 100, 39, "info");
    if (!!dart.test(io._FileResourceInfo.openFiles[$containsKey](info.id))) dart.assertFailed(null, L114, 101, 12, "!openFiles.containsKey(info.id)");
    io._FileResourceInfo.openFiles[$_set](info.id, info);
  }
  static FileClosed(info) {
    if (info == null) dart.nullFailed(L114, 105, 39, "info");
    if (!dart.test(io._FileResourceInfo.openFiles[$containsKey](info.id))) dart.assertFailed(null, L114, 106, 12, "openFiles.containsKey(info.id)");
    io._FileResourceInfo.openFiles[$remove](info.id);
  }
  static getOpenFilesList() {
    return ListOfMapOfString$dynamic().from(io._FileResourceInfo.openFiles[$values][$map](dart.dynamic, dart.fn(e => {
      if (e == null) dart.nullFailed(L114, 111, 48, "e");
      return e.referenceValueMap;
    }, _FileResourceInfoToMapOfString$dynamic())));
  }
  static getOpenFiles($function, params) {
    if (!dart.equals($function, "ext.dart.io.getOpenFiles")) dart.assertFailed(null, L114, 115, 12, "function == 'ext.dart.io.getOpenFiles'");
    let data = new (IdentityMapOfString$Object()).from(["type", "_openfiles", "data", io._FileResourceInfo.getOpenFilesList()]);
    let jsonValue = convert.json.encode(data);
    return FutureOfServiceExtensionResponse().value(new developer.ServiceExtensionResponse.result(jsonValue));
  }
  getFileInfoMap() {
    return this.fullValueMap;
  }
  static getFileInfoMapByID($function, params) {
    let id = core.int.parse(core.String.as(dart.nullCheck(dart.dsend(params, '_get', ["id"]))));
    let result = dart.test(io._FileResourceInfo.openFiles[$containsKey](id)) ? dart.nullCheck(io._FileResourceInfo.openFiles[$_get](id)).getFileInfoMap() : new _js_helper.LinkedMap.new();
    let jsonValue = convert.json.encode(result);
    return FutureOfServiceExtensionResponse().value(new developer.ServiceExtensionResponse.result(jsonValue));
  }
  get name() {
    return dart.str(dart.dload(this.file, 'path'));
  }
};
(io._FileResourceInfo.new = function(file) {
  this.file = file;
  io._FileResourceInfo.__proto__.new.call(this, "_file");
  io._FileResourceInfo.FileOpened(this);
}).prototype = io._FileResourceInfo.prototype;
dart.addTypeTests(io._FileResourceInfo);
dart.addTypeCaches(io._FileResourceInfo);
dart.setMethodSignature(io._FileResourceInfo, () => ({
  __proto__: dart.getMethods(io._FileResourceInfo.__proto__),
  getFileInfoMap: dart.fnType(core.Map$(core.String, dart.dynamic), [])
}));
dart.setGetterSignature(io._FileResourceInfo, () => ({
  __proto__: dart.getGetters(io._FileResourceInfo.__proto__),
  name: core.String
}));
dart.setLibraryUri(io._FileResourceInfo, L104);
dart.setFieldSignature(io._FileResourceInfo, () => ({
  __proto__: dart.getFields(io._FileResourceInfo.__proto__),
  file: dart.finalFieldType(dart.dynamic)
}));
dart.defineLazy(io._FileResourceInfo, {
  /*io._FileResourceInfo._type*/get _type() {
    return "_file";
  },
  /*io._FileResourceInfo.openFiles*/get openFiles() {
    return new (LinkedMapOfint$_FileResourceInfo()).new();
  },
  set openFiles(_) {}
}, false);
var _arguments$2 = dart.privateName(io, "_arguments");
var _workingDirectory = dart.privateName(io, "_workingDirectory");
io._ProcessResourceInfo = class _ProcessResourceInfo extends io._IOResourceInfo {
  get name() {
    return core.String.as(dart.dload(this.process, _path$));
  }
  stopped() {
    io._ProcessResourceInfo.ProcessStopped(this);
  }
  get fullValueMap() {
    return new (IdentityMapOfString$dynamic()).from(["type", this.type, "id", this.id, "name", this.name, "pid", dart.dload(this.process, 'pid'), "startedAt", this.startedAt, "arguments", dart.dload(this.process, _arguments$2), "workingDirectory", dart.dload(this.process, _workingDirectory) == null ? "." : dart.dload(this.process, _workingDirectory)]);
  }
  static ProcessStarted(info) {
    if (info == null) dart.nullFailed(L114, 169, 46, "info");
    if (!!dart.test(io._ProcessResourceInfo.startedProcesses[$containsKey](info.id))) dart.assertFailed(null, L114, 170, 12, "!startedProcesses.containsKey(info.id)");
    io._ProcessResourceInfo.startedProcesses[$_set](info.id, info);
  }
  static ProcessStopped(info) {
    if (info == null) dart.nullFailed(L114, 174, 46, "info");
    if (!dart.test(io._ProcessResourceInfo.startedProcesses[$containsKey](info.id))) dart.assertFailed(null, L114, 175, 12, "startedProcesses.containsKey(info.id)");
    io._ProcessResourceInfo.startedProcesses[$remove](info.id);
  }
  static getStartedProcessesList() {
    return ListOfMapOfString$dynamic().from(io._ProcessResourceInfo.startedProcesses[$values][$map](dart.dynamic, dart.fn(e => {
      if (e == null) dart.nullFailed(L114, 180, 50, "e");
      return e.referenceValueMap;
    }, _ProcessResourceInfoToMapOfString$dynamic())));
  }
  static getStartedProcesses($function, params) {
    if ($function == null) dart.nullFailed(L114, 183, 14, "function");
    if (params == null) dart.nullFailed(L114, 183, 44, "params");
    if (!($function === "ext.dart.io.getProcesses")) dart.assertFailed(null, L114, 184, 12, "function == 'ext.dart.io.getProcesses'");
    let data = new (IdentityMapOfString$Object()).from(["type", "_startedprocesses", "data", io._ProcessResourceInfo.getStartedProcessesList()]);
    let jsonValue = convert.json.encode(data);
    return FutureOfServiceExtensionResponse().value(new developer.ServiceExtensionResponse.result(jsonValue));
  }
  static getProcessInfoMapById($function, params) {
    if ($function == null) dart.nullFailed(L114, 191, 14, "function");
    if (params == null) dart.nullFailed(L114, 191, 44, "params");
    let id = core.int.parse(dart.nullCheck(params[$_get]("id")));
    let result = dart.test(io._ProcessResourceInfo.startedProcesses[$containsKey](id)) ? dart.nullCheck(io._ProcessResourceInfo.startedProcesses[$_get](id)).fullValueMap : new _js_helper.LinkedMap.new();
    let jsonValue = convert.json.encode(result);
    return FutureOfServiceExtensionResponse().value(new developer.ServiceExtensionResponse.result(jsonValue));
  }
};
(io._ProcessResourceInfo.new = function(process) {
  this.process = process;
  this.startedAt = io._IOResourceInfo.timestamp;
  io._ProcessResourceInfo.__proto__.new.call(this, "_process");
  io._ProcessResourceInfo.ProcessStarted(this);
}).prototype = io._ProcessResourceInfo.prototype;
dart.addTypeTests(io._ProcessResourceInfo);
dart.addTypeCaches(io._ProcessResourceInfo);
dart.setMethodSignature(io._ProcessResourceInfo, () => ({
  __proto__: dart.getMethods(io._ProcessResourceInfo.__proto__),
  stopped: dart.fnType(dart.void, [])
}));
dart.setGetterSignature(io._ProcessResourceInfo, () => ({
  __proto__: dart.getGetters(io._ProcessResourceInfo.__proto__),
  name: core.String,
  fullValueMap: core.Map$(core.String, dart.dynamic)
}));
dart.setLibraryUri(io._ProcessResourceInfo, L104);
dart.setFieldSignature(io._ProcessResourceInfo, () => ({
  __proto__: dart.getFields(io._ProcessResourceInfo.__proto__),
  process: dart.finalFieldType(dart.dynamic),
  startedAt: dart.finalFieldType(core.double)
}));
dart.defineLazy(io._ProcessResourceInfo, {
  /*io._ProcessResourceInfo._type*/get _type() {
    return "_process";
  },
  /*io._ProcessResourceInfo.startedProcesses*/get startedProcesses() {
    return new (LinkedMapOfint$_ProcessResourceInfo()).new();
  },
  set startedProcesses(_) {}
}, false);
io._SocketResourceInfo = class _SocketResourceInfo extends io._ReadWriteResourceInfo {
  get name() {
    if (dart.dtest(dart.dload(this.socket, 'isListening'))) {
      return dart.str("listening:") + dart.str(dart.dload(dart.dload(this.socket, 'address'), 'host')) + dart.str(":") + dart.str(dart.dload(this.socket, 'port'));
    }
    let remote = "";
    try {
      let remoteHost = dart.dload(dart.dload(this.socket, 'remoteAddress'), 'host');
      let remotePort = dart.dload(this.socket, 'remotePort');
      remote = dart.str(" -> ") + dart.str(remoteHost) + dart.str(":") + dart.str(remotePort);
    } catch (e$) {
      let e = dart.getThrown(e$);
      if (core.Object.is(e)) {
      } else
        throw e$;
    }
    return dart.str(dart.dload(dart.dload(this.socket, 'address'), 'host')) + dart.str(":") + dart.str(dart.dload(this.socket, 'port')) + dart.str(remote);
  }
  static getOpenSocketsList() {
    return ListOfMapOfString$dynamic().from(io._SocketResourceInfo.openSockets[$values][$map](dart.dynamic, dart.fn(e => {
      if (e == null) dart.nullFailed(L114, 229, 50, "e");
      return e.referenceValueMap;
    }, _SocketResourceInfoToMapOfString$dynamic())));
  }
  getSocketInfoMap() {
    let result = this.fullValueMap;
    result[$_set]("socketType", dart.dtest(dart.dload(this.socket, 'isTcp')) ? "TCP" : "UDP");
    result[$_set]("listening", dart.dload(this.socket, 'isListening'));
    result[$_set]("host", dart.dload(dart.dload(this.socket, 'address'), 'host'));
    result[$_set]("port", dart.dload(this.socket, 'port'));
    if (!dart.dtest(dart.dload(this.socket, 'isListening'))) {
      try {
        result[$_set]("remoteHost", dart.dload(dart.dload(this.socket, 'remoteAddress'), 'host'));
        result[$_set]("remotePort", dart.dload(this.socket, 'remotePort'));
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (core.Object.is(e)) {
          result[$_set]("remotePort", "NA");
          result[$_set]("remoteHost", "NA");
        } else
          throw e$;
      }
    } else {
      result[$_set]("remotePort", "NA");
      result[$_set]("remoteHost", "NA");
    }
    result[$_set]("addressType", dart.dload(dart.dload(dart.dload(this.socket, 'address'), 'type'), 'name'));
    return result;
  }
  static getSocketInfoMapByID($function, params) {
    if ($function == null) dart.nullFailed(L114, 256, 14, "function");
    if (params == null) dart.nullFailed(L114, 256, 44, "params");
    let id = core.int.parse(dart.nullCheck(params[$_get]("id")));
    let result = dart.test(io._SocketResourceInfo.openSockets[$containsKey](id)) ? dart.nullCheck(io._SocketResourceInfo.openSockets[$_get](id)).getSocketInfoMap() : new _js_helper.LinkedMap.new();
    let jsonValue = convert.json.encode(result);
    return FutureOfServiceExtensionResponse().value(new developer.ServiceExtensionResponse.result(jsonValue));
  }
  static getOpenSockets($function, params) {
    if (!dart.equals($function, "ext.dart.io.getOpenSockets")) dart.assertFailed(null, L114, 265, 12, "function == 'ext.dart.io.getOpenSockets'");
    let data = new (IdentityMapOfString$Object()).from(["type", "_opensockets", "data", io._SocketResourceInfo.getOpenSocketsList()]);
    let jsonValue = convert.json.encode(data);
    return FutureOfServiceExtensionResponse().value(new developer.ServiceExtensionResponse.result(jsonValue));
  }
  static SocketOpened(info) {
    if (info == null) dart.nullFailed(L114, 271, 43, "info");
    if (!!dart.test(io._SocketResourceInfo.openSockets[$containsKey](info.id))) dart.assertFailed(null, L114, 272, 12, "!openSockets.containsKey(info.id)");
    io._SocketResourceInfo.openSockets[$_set](info.id, info);
  }
  static SocketClosed(info) {
    if (info == null) dart.nullFailed(L114, 276, 43, "info");
    if (!dart.test(io._SocketResourceInfo.openSockets[$containsKey](info.id))) dart.assertFailed(null, L114, 277, 12, "openSockets.containsKey(info.id)");
    io._SocketResourceInfo.openSockets[$remove](info.id);
  }
};
(io._SocketResourceInfo.new = function(socket) {
  this.socket = socket;
  io._SocketResourceInfo.__proto__.new.call(this, "_socket");
  io._SocketResourceInfo.SocketOpened(this);
}).prototype = io._SocketResourceInfo.prototype;
dart.addTypeTests(io._SocketResourceInfo);
dart.addTypeCaches(io._SocketResourceInfo);
dart.setMethodSignature(io._SocketResourceInfo, () => ({
  __proto__: dart.getMethods(io._SocketResourceInfo.__proto__),
  getSocketInfoMap: dart.fnType(core.Map$(core.String, dart.dynamic), [])
}));
dart.setGetterSignature(io._SocketResourceInfo, () => ({
  __proto__: dart.getGetters(io._SocketResourceInfo.__proto__),
  name: core.String
}));
dart.setLibraryUri(io._SocketResourceInfo, L104);
dart.setFieldSignature(io._SocketResourceInfo, () => ({
  __proto__: dart.getFields(io._SocketResourceInfo.__proto__),
  socket: dart.finalFieldType(dart.dynamic)
}));
dart.defineLazy(io._SocketResourceInfo, {
  /*io._SocketResourceInfo._tcpString*/get _tcpString() {
    return "TCP";
  },
  /*io._SocketResourceInfo._udpString*/get _udpString() {
    return "UDP";
  },
  /*io._SocketResourceInfo._type*/get _type() {
    return "_socket";
  },
  /*io._SocketResourceInfo.openSockets*/get openSockets() {
    return new (LinkedMapOfint$_SocketResourceInfo()).new();
  },
  set openSockets(_) {}
}, false);
var __IOSink_encoding = dart.privateName(io, "_#IOSink#encoding");
io.IOSink = class IOSink extends core.Object {
  static new(target, opts) {
    if (target == null) dart.nullFailed(L115, 27, 44, "target");
    let encoding = opts && 'encoding' in opts ? opts.encoding : C107 || CT.C107;
    if (encoding == null) dart.nullFailed(L115, 27, 62, "encoding");
    return new io._IOSinkImpl.new(target, encoding);
  }
  get encoding() {
    let t185;
    t185 = this[__IOSink_encoding];
    return t185 == null ? dart.throw(new _internal.LateInitializationErrorImpl.new("Field 'encoding' has not been initialized.")) : t185;
  }
  set encoding(t185) {
    if (t185 == null) dart.nullFailed(L115, 34, 17, "null");
    this[__IOSink_encoding] = t185;
  }
};
(io.IOSink[dart.mixinNew] = function() {
  this[__IOSink_encoding] = null;
}).prototype = io.IOSink.prototype;
dart.addTypeTests(io.IOSink);
dart.addTypeCaches(io.IOSink);
io.IOSink[dart.implements] = () => [async.StreamSink$(core.List$(core.int)), core.StringSink];
dart.setGetterSignature(io.IOSink, () => ({
  __proto__: dart.getGetters(io.IOSink.__proto__),
  encoding: convert.Encoding
}));
dart.setSetterSignature(io.IOSink, () => ({
  __proto__: dart.getSetters(io.IOSink.__proto__),
  encoding: convert.Encoding
}));
dart.setLibraryUri(io.IOSink, L104);
dart.setFieldSignature(io.IOSink, () => ({
  __proto__: dart.getFields(io.IOSink.__proto__),
  [__IOSink_encoding]: dart.fieldType(dart.nullable(convert.Encoding))
}));
var _doneCompleter = dart.privateName(io, "_doneCompleter");
var _controllerInstance = dart.privateName(io, "_controllerInstance");
var _controllerCompleter = dart.privateName(io, "_controllerCompleter");
var _isClosed$ = dart.privateName(io, "_isClosed");
var _isBound = dart.privateName(io, "_isBound");
var _hasError$ = dart.privateName(io, "_hasError");
var _target$0 = dart.privateName(io, "_target");
var _closeTarget = dart.privateName(io, "_closeTarget");
var _completeDoneValue = dart.privateName(io, "_completeDoneValue");
var _completeDoneError = dart.privateName(io, "_completeDoneError");
const _is__StreamSinkImpl_default = Symbol('_is__StreamSinkImpl_default');
io._StreamSinkImpl$ = dart.generic(T => {
  var StreamOfT = () => (StreamOfT = dart.constFn(async.Stream$(T)))();
  var StreamControllerOfT = () => (StreamControllerOfT = dart.constFn(async.StreamController$(T)))();
  class _StreamSinkImpl extends core.Object {
    add(data) {
      T.as(data);
      if (dart.test(this[_isClosed$])) {
        dart.throw(new core.StateError.new("StreamSink is closed"));
      }
      this[_controller].add(data);
    }
    addError(error, stackTrace = null) {
      if (error == null) dart.nullFailed(L115, 159, 17, "error");
      if (dart.test(this[_isClosed$])) {
        dart.throw(new core.StateError.new("StreamSink is closed"));
      }
      this[_controller].addError(error, stackTrace);
    }
    addStream(stream) {
      let t186;
      StreamOfT().as(stream);
      if (stream == null) dart.nullFailed(L115, 166, 30, "stream");
      if (dart.test(this[_isBound])) {
        dart.throw(new core.StateError.new("StreamSink is already bound to a stream"));
      }
      if (dart.test(this[_hasError$])) return this.done;
      this[_isBound] = true;
      let future = this[_controllerCompleter] == null ? this[_target$0].addStream(stream) : dart.nullCheck(this[_controllerCompleter]).future.then(dart.dynamic, dart.fn(_ => this[_target$0].addStream(stream), dynamicToFuture()));
      t186 = this[_controllerInstance];
      t186 == null ? null : t186.close();
      return future.whenComplete(dart.fn(() => {
        this[_isBound] = false;
      }, VoidToNullN()));
    }
    flush() {
      if (dart.test(this[_isBound])) {
        dart.throw(new core.StateError.new("StreamSink is bound to a stream"));
      }
      if (this[_controllerInstance] == null) return async.Future.value(this);
      this[_isBound] = true;
      let future = dart.nullCheck(this[_controllerCompleter]).future;
      dart.nullCheck(this[_controllerInstance]).close();
      return future.whenComplete(dart.fn(() => {
        this[_isBound] = false;
      }, VoidToNullN()));
    }
    close() {
      if (dart.test(this[_isBound])) {
        dart.throw(new core.StateError.new("StreamSink is bound to a stream"));
      }
      if (!dart.test(this[_isClosed$])) {
        this[_isClosed$] = true;
        if (this[_controllerInstance] != null) {
          dart.nullCheck(this[_controllerInstance]).close();
        } else {
          this[_closeTarget]();
        }
      }
      return this.done;
    }
    [_closeTarget]() {
      this[_target$0].close().then(dart.void, dart.bind(this, _completeDoneValue), {onError: dart.bind(this, _completeDoneError)});
    }
    get done() {
      return this[_doneCompleter].future;
    }
    [_completeDoneValue](value) {
      if (!dart.test(this[_doneCompleter].isCompleted)) {
        this[_doneCompleter].complete(value);
      }
    }
    [_completeDoneError](error, stackTrace) {
      if (!dart.test(this[_doneCompleter].isCompleted)) {
        this[_hasError$] = true;
        this[_doneCompleter].completeError(core.Object.as(error), stackTrace);
      }
    }
    get [_controller]() {
      if (dart.test(this[_isBound])) {
        dart.throw(new core.StateError.new("StreamSink is bound to a stream"));
      }
      if (dart.test(this[_isClosed$])) {
        dart.throw(new core.StateError.new("StreamSink is closed"));
      }
      if (this[_controllerInstance] == null) {
        this[_controllerInstance] = StreamControllerOfT().new({sync: true});
        this[_controllerCompleter] = async.Completer.new();
        this[_target$0].addStream(this[_controller].stream).then(core.Null, dart.fn(_ => {
          if (dart.test(this[_isBound])) {
            dart.nullCheck(this[_controllerCompleter]).complete(this);
            this[_controllerCompleter] = null;
            this[_controllerInstance] = null;
          } else {
            this[_closeTarget]();
          }
        }, dynamicToNullN()), {onError: dart.fn((error, stackTrace) => {
            if (dart.test(this[_isBound])) {
              dart.nullCheck(this[_controllerCompleter]).completeError(core.Object.as(error), StackTraceN().as(stackTrace));
              this[_controllerCompleter] = null;
              this[_controllerInstance] = null;
            } else {
              this[_completeDoneError](error, StackTraceN().as(stackTrace));
            }
          }, dynamicAnddynamicToNullN())});
      }
      return dart.nullCheck(this[_controllerInstance]);
    }
  }
  (_StreamSinkImpl.new = function(_target) {
    if (_target == null) dart.nullFailed(L115, 150, 24, "_target");
    this[_doneCompleter] = async.Completer.new();
    this[_controllerInstance] = null;
    this[_controllerCompleter] = null;
    this[_isClosed$] = false;
    this[_isBound] = false;
    this[_hasError$] = false;
    this[_target$0] = _target;
    ;
  }).prototype = _StreamSinkImpl.prototype;
  dart.addTypeTests(_StreamSinkImpl);
  _StreamSinkImpl.prototype[_is__StreamSinkImpl_default] = true;
  dart.addTypeCaches(_StreamSinkImpl);
  _StreamSinkImpl[dart.implements] = () => [async.StreamSink$(T)];
  dart.setMethodSignature(_StreamSinkImpl, () => ({
    __proto__: dart.getMethods(_StreamSinkImpl.__proto__),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
    addStream: dart.fnType(async.Future, [dart.nullable(core.Object)]),
    flush: dart.fnType(async.Future, []),
    close: dart.fnType(async.Future, []),
    [_closeTarget]: dart.fnType(dart.void, []),
    [_completeDoneValue]: dart.fnType(dart.void, [dart.dynamic]),
    [_completeDoneError]: dart.fnType(dart.void, [dart.dynamic, dart.nullable(core.StackTrace)])
  }));
  dart.setGetterSignature(_StreamSinkImpl, () => ({
    __proto__: dart.getGetters(_StreamSinkImpl.__proto__),
    done: async.Future,
    [_controller]: async.StreamController$(T)
  }));
  dart.setLibraryUri(_StreamSinkImpl, L104);
  dart.setFieldSignature(_StreamSinkImpl, () => ({
    __proto__: dart.getFields(_StreamSinkImpl.__proto__),
    [_target$0]: dart.finalFieldType(async.StreamConsumer$(T)),
    [_doneCompleter]: dart.finalFieldType(async.Completer),
    [_controllerInstance]: dart.fieldType(dart.nullable(async.StreamController$(T))),
    [_controllerCompleter]: dart.fieldType(dart.nullable(async.Completer)),
    [_isClosed$]: dart.fieldType(core.bool),
    [_isBound]: dart.fieldType(core.bool),
    [_hasError$]: dart.fieldType(core.bool)
  }));
  return _StreamSinkImpl;
});
io._StreamSinkImpl = io._StreamSinkImpl$();
dart.addTypeTests(io._StreamSinkImpl, _is__StreamSinkImpl_default);
var _encodingMutable = dart.privateName(io, "_encodingMutable");
var _encoding$ = dart.privateName(io, "_encoding");
io._IOSinkImpl = class _IOSinkImpl extends io._StreamSinkImpl$(core.List$(core.int)) {
  get encoding() {
    return this[_encoding$];
  }
  set encoding(value) {
    if (value == null) dart.nullFailed(L115, 279, 30, "value");
    if (!dart.test(this[_encodingMutable])) {
      dart.throw(new core.StateError.new("IOSink encoding is not mutable"));
    }
    this[_encoding$] = value;
  }
  write(obj) {
    let string = dart.str(obj);
    if (string[$isEmpty]) return;
    this.add(this[_encoding$].encode(string));
  }
  writeAll(objects, separator = "") {
    if (objects == null) dart.nullFailed(L115, 292, 26, "objects");
    if (separator == null) dart.nullFailed(L115, 292, 43, "separator");
    let iterator = objects[$iterator];
    if (!dart.test(iterator.moveNext())) return;
    if (separator[$isEmpty]) {
      do {
        this.write(iterator.current);
      } while (dart.test(iterator.moveNext()));
    } else {
      this.write(iterator.current);
      while (dart.test(iterator.moveNext())) {
        this.write(separator);
        this.write(iterator.current);
      }
    }
  }
  writeln(object = "") {
    this.write(object);
    this.write("\n");
  }
  writeCharCode(charCode) {
    if (charCode == null) dart.nullFailed(L115, 313, 26, "charCode");
    this.write(core.String.fromCharCode(charCode));
  }
};
(io._IOSinkImpl.new = function(target, _encoding) {
  if (target == null) dart.nullFailed(L115, 275, 41, "target");
  if (_encoding == null) dart.nullFailed(L115, 275, 54, "_encoding");
  this[_encodingMutable] = true;
  this[_encoding$] = _encoding;
  io._IOSinkImpl.__proto__.new.call(this, target);
  ;
}).prototype = io._IOSinkImpl.prototype;
dart.addTypeTests(io._IOSinkImpl);
dart.addTypeCaches(io._IOSinkImpl);
io._IOSinkImpl[dart.implements] = () => [io.IOSink];
dart.setMethodSignature(io._IOSinkImpl, () => ({
  __proto__: dart.getMethods(io._IOSinkImpl.__proto__),
  write: dart.fnType(dart.void, [dart.nullable(core.Object)]),
  writeAll: dart.fnType(dart.void, [core.Iterable], [core.String]),
  writeln: dart.fnType(dart.void, [], [dart.nullable(core.Object)]),
  writeCharCode: dart.fnType(dart.void, [core.int])
}));
dart.setGetterSignature(io._IOSinkImpl, () => ({
  __proto__: dart.getGetters(io._IOSinkImpl.__proto__),
  encoding: convert.Encoding
}));
dart.setSetterSignature(io._IOSinkImpl, () => ({
  __proto__: dart.getSetters(io._IOSinkImpl.__proto__),
  encoding: convert.Encoding
}));
dart.setLibraryUri(io._IOSinkImpl, L104);
dart.setFieldSignature(io._IOSinkImpl, () => ({
  __proto__: dart.getFields(io._IOSinkImpl.__proto__),
  [_encoding$]: dart.fieldType(convert.Encoding),
  [_encodingMutable]: dart.fieldType(core.bool)
}));
io._IOService = class _IOService extends core.Object {
  static _dispatch(request, data) {
    if (request == null) dart.nullFailed(L106, 704, 31, "request");
    if (data == null) dart.nullFailed(L106, 704, 45, "data");
    dart.throw(new core.UnsupportedError.new("_IOService._dispatch"));
  }
};
(io._IOService.new = function() {
  ;
}).prototype = io._IOService.prototype;
dart.addTypeTests(io._IOService);
dart.addTypeCaches(io._IOService);
dart.setLibraryUri(io._IOService, L104);
dart.defineLazy(io._IOService, {
  /*io._IOService.fileExists*/get fileExists() {
    return 0;
  },
  /*io._IOService.fileCreate*/get fileCreate() {
    return 1;
  },
  /*io._IOService.fileDelete*/get fileDelete() {
    return 2;
  },
  /*io._IOService.fileRename*/get fileRename() {
    return 3;
  },
  /*io._IOService.fileCopy*/get fileCopy() {
    return 4;
  },
  /*io._IOService.fileOpen*/get fileOpen() {
    return 5;
  },
  /*io._IOService.fileResolveSymbolicLinks*/get fileResolveSymbolicLinks() {
    return 6;
  },
  /*io._IOService.fileClose*/get fileClose() {
    return 7;
  },
  /*io._IOService.filePosition*/get filePosition() {
    return 8;
  },
  /*io._IOService.fileSetPosition*/get fileSetPosition() {
    return 9;
  },
  /*io._IOService.fileTruncate*/get fileTruncate() {
    return 10;
  },
  /*io._IOService.fileLength*/get fileLength() {
    return 11;
  },
  /*io._IOService.fileLengthFromPath*/get fileLengthFromPath() {
    return 12;
  },
  /*io._IOService.fileLastAccessed*/get fileLastAccessed() {
    return 13;
  },
  /*io._IOService.fileSetLastAccessed*/get fileSetLastAccessed() {
    return 14;
  },
  /*io._IOService.fileLastModified*/get fileLastModified() {
    return 15;
  },
  /*io._IOService.fileSetLastModified*/get fileSetLastModified() {
    return 16;
  },
  /*io._IOService.fileFlush*/get fileFlush() {
    return 17;
  },
  /*io._IOService.fileReadByte*/get fileReadByte() {
    return 18;
  },
  /*io._IOService.fileWriteByte*/get fileWriteByte() {
    return 19;
  },
  /*io._IOService.fileRead*/get fileRead() {
    return 20;
  },
  /*io._IOService.fileReadInto*/get fileReadInto() {
    return 21;
  },
  /*io._IOService.fileWriteFrom*/get fileWriteFrom() {
    return 22;
  },
  /*io._IOService.fileCreateLink*/get fileCreateLink() {
    return 23;
  },
  /*io._IOService.fileDeleteLink*/get fileDeleteLink() {
    return 24;
  },
  /*io._IOService.fileRenameLink*/get fileRenameLink() {
    return 25;
  },
  /*io._IOService.fileLinkTarget*/get fileLinkTarget() {
    return 26;
  },
  /*io._IOService.fileType*/get fileType() {
    return 27;
  },
  /*io._IOService.fileIdentical*/get fileIdentical() {
    return 28;
  },
  /*io._IOService.fileStat*/get fileStat() {
    return 29;
  },
  /*io._IOService.fileLock*/get fileLock() {
    return 30;
  },
  /*io._IOService.socketLookup*/get socketLookup() {
    return 31;
  },
  /*io._IOService.socketListInterfaces*/get socketListInterfaces() {
    return 32;
  },
  /*io._IOService.socketReverseLookup*/get socketReverseLookup() {
    return 33;
  },
  /*io._IOService.directoryCreate*/get directoryCreate() {
    return 34;
  },
  /*io._IOService.directoryDelete*/get directoryDelete() {
    return 35;
  },
  /*io._IOService.directoryExists*/get directoryExists() {
    return 36;
  },
  /*io._IOService.directoryCreateTemp*/get directoryCreateTemp() {
    return 37;
  },
  /*io._IOService.directoryListStart*/get directoryListStart() {
    return 38;
  },
  /*io._IOService.directoryListNext*/get directoryListNext() {
    return 39;
  },
  /*io._IOService.directoryListStop*/get directoryListStop() {
    return 40;
  },
  /*io._IOService.directoryRename*/get directoryRename() {
    return 41;
  },
  /*io._IOService.sslProcessFilter*/get sslProcessFilter() {
    return 42;
  }
}, false);
io.Link = class Link extends core.Object {
  static new(path) {
    if (path == null) dart.nullFailed(L116, 17, 23, "path");
    let overrides = io.IOOverrides.current;
    if (overrides == null) {
      return new io._Link.new(path);
    }
    return overrides.createLink(path);
  }
  static fromRawPath(rawPath) {
    if (rawPath == null) dart.nullFailed(L116, 26, 38, "rawPath");
    return new io._Link.fromRawPath(rawPath);
  }
  static fromUri(uri) {
    if (uri == null) dart.nullFailed(L116, 40, 28, "uri");
    return io.Link.new(uri.toFilePath());
  }
};
(io.Link[dart.mixinNew] = function() {
}).prototype = io.Link.prototype;
dart.addTypeTests(io.Link);
dart.addTypeCaches(io.Link);
io.Link[dart.implements] = () => [io.FileSystemEntity];
dart.setLibraryUri(io.Link, L104);
var _exceptionFromResponse = dart.privateName(io, "_exceptionFromResponse");
var _path$1 = dart.privateName(io, "_Link._path");
var _rawPath$1 = dart.privateName(io, "_Link._rawPath");
io._Link = class _Link extends io.FileSystemEntity {
  get [_path$]() {
    return this[_path$1];
  }
  set [_path$](value) {
    super[_path$] = value;
  }
  get [_rawPath$]() {
    return this[_rawPath$1];
  }
  set [_rawPath$](value) {
    super[_rawPath$] = value;
  }
  get path() {
    return this[_path$];
  }
  toString() {
    return dart.str("Link: '") + dart.str(this.path) + dart.str("'");
  }
  exists() {
    return io.FileSystemEntity._isLinkRaw(this[_rawPath$]);
  }
  existsSync() {
    return io.FileSystemEntity._isLinkRawSync(this[_rawPath$]);
  }
  get absolute() {
    return dart.test(this.isAbsolute) ? this : new io._Link.new(this[_absolutePath]);
  }
  create(target, opts) {
    if (target == null) dart.nullFailed(L116, 177, 30, "target");
    let recursive = opts && 'recursive' in opts ? opts.recursive : false;
    if (recursive == null) dart.nullFailed(L116, 177, 44, "recursive");
    let result = dart.test(recursive) ? this.parent.create({recursive: true}) : FutureOfNullN().value(null);
    return result.then(dart.dynamic, dart.fn(_ => io._File._dispatchWithNamespace(23, [null, this[_rawPath$], target]), DirectoryNToFuture())).then(io.Link, dart.fn(response => {
      if (dart.test(this[_isErrorResponse](response))) {
        dart.throw(this[_exceptionFromResponse](response, dart.str("Cannot create link to target '") + dart.str(target) + dart.str("'"), this.path));
      }
      return this;
    }, dynamicTo_Link()));
  }
  createSync(target, opts) {
    if (target == null) dart.nullFailed(L116, 192, 26, "target");
    let recursive = opts && 'recursive' in opts ? opts.recursive : false;
    if (recursive == null) dart.nullFailed(L116, 192, 40, "recursive");
    if (dart.test(recursive)) {
      this.parent.createSync({recursive: true});
    }
    let result = io._File._createLink(io._Namespace._namespace, this[_rawPath$], target);
    io._Link.throwIfError(result, "Cannot create link", this.path);
  }
  updateSync(target) {
    if (target == null) dart.nullFailed(L116, 200, 26, "target");
    this.deleteSync();
    this.createSync(target);
  }
  update(target) {
    if (target == null) dart.nullFailed(L116, 209, 30, "target");
    return this.delete().then(io.Link, dart.fn(_ => {
      if (_ == null) dart.nullFailed(L116, 214, 33, "_");
      return this.create(target);
    }, FileSystemEntityToFutureOfLink()));
  }
  [_delete](opts) {
    let recursive = opts && 'recursive' in opts ? opts.recursive : false;
    if (recursive == null) dart.nullFailed(L116, 217, 30, "recursive");
    if (dart.test(recursive)) {
      return io.Directory.fromRawPath(this[_rawPath$]).delete({recursive: true}).then(io.Link, dart.fn(_ => {
        if (_ == null) dart.nullFailed(L116, 221, 18, "_");
        return this;
      }, FileSystemEntityTo_Link()));
    }
    return io._File._dispatchWithNamespace(24, [null, this[_rawPath$]]).then(io.Link, dart.fn(response => {
      if (dart.test(this[_isErrorResponse](response))) {
        dart.throw(this[_exceptionFromResponse](response, "Cannot delete link", this.path));
      }
      return this;
    }, dynamicTo_Link()));
  }
  [_deleteSync](opts) {
    let recursive = opts && 'recursive' in opts ? opts.recursive : false;
    if (recursive == null) dart.nullFailed(L116, 232, 26, "recursive");
    if (dart.test(recursive)) {
      return io.Directory.fromRawPath(this[_rawPath$]).deleteSync({recursive: true});
    }
    let result = io._File._deleteLinkNative(io._Namespace._namespace, this[_rawPath$]);
    io._Link.throwIfError(result, "Cannot delete link", this.path);
  }
  rename(newPath) {
    if (newPath == null) dart.nullFailed(L116, 240, 30, "newPath");
    return io._File._dispatchWithNamespace(25, [null, this[_rawPath$], newPath]).then(io.Link, dart.fn(response => {
      if (dart.test(this[_isErrorResponse](response))) {
        dart.throw(this[_exceptionFromResponse](response, dart.str("Cannot rename link to '") + dart.str(newPath) + dart.str("'"), this.path));
      }
      return io.Link.new(newPath);
    }, dynamicToLink()));
  }
  renameSync(newPath) {
    if (newPath == null) dart.nullFailed(L116, 251, 26, "newPath");
    let result = io._File._renameLink(io._Namespace._namespace, this[_rawPath$], newPath);
    io._Link.throwIfError(result, dart.str("Cannot rename link '") + dart.str(this.path) + dart.str("' to '") + dart.str(newPath) + dart.str("'"));
    return io.Link.new(newPath);
  }
  target() {
    return io._File._dispatchWithNamespace(26, [null, this[_rawPath$]]).then(core.String, dart.fn(response => {
      if (dart.test(this[_isErrorResponse](response))) {
        dart.throw(this[_exceptionFromResponse](response, "Cannot get target of link", this.path));
      }
      return FutureOrOfString().as(response);
    }, dynamicToFutureOrOfString()));
  }
  targetSync() {
    let result = io._File._linkTarget(io._Namespace._namespace, this[_rawPath$]);
    io._Link.throwIfError(result, "Cannot read link", this.path);
    return core.String.as(result);
  }
  static throwIfError(result, msg, path = "") {
    if (msg == null) dart.nullFailed(L116, 274, 46, "msg");
    if (path == null) dart.nullFailed(L116, 274, 59, "path");
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new(msg, path, result));
    }
  }
  [_isErrorResponse](response) {
    return core.List.is(response) && !dart.equals(response[$_get](0), 0);
  }
  [_exceptionFromResponse](response, message, path) {
    if (message == null) dart.nullFailed(L116, 284, 43, "message");
    if (path == null) dart.nullFailed(L116, 284, 59, "path");
    if (!dart.test(this[_isErrorResponse](response))) dart.assertFailed(null, L116, 285, 12, "_isErrorResponse(response)");
    switch (dart.dsend(response, '_get', [0])) {
      case 1:
      {
        return new core.ArgumentError.new();
      }
      case 2:
      {
        let err = new io.OSError.new(core.String.as(dart.dsend(response, '_get', [2])), core.int.as(dart.dsend(response, '_get', [1])));
        return new io.FileSystemException.new(message, path, err);
      }
      default:
      {
        return core.Exception.new("Unknown error");
      }
    }
  }
};
(io._Link.new = function(path) {
  if (path == null) dart.nullFailed(L116, 159, 16, "path");
  this[_path$1] = path;
  this[_rawPath$1] = io.FileSystemEntity._toUtf8Array(path);
  ;
}).prototype = io._Link.prototype;
(io._Link.fromRawPath = function(rawPath) {
  if (rawPath == null) dart.nullFailed(L116, 163, 31, "rawPath");
  this[_rawPath$1] = io.FileSystemEntity._toNullTerminatedUtf8Array(rawPath);
  this[_path$1] = io.FileSystemEntity._toStringFromUtf8Array(rawPath);
  ;
}).prototype = io._Link.prototype;
dart.addTypeTests(io._Link);
dart.addTypeCaches(io._Link);
io._Link[dart.implements] = () => [io.Link];
dart.setMethodSignature(io._Link, () => ({
  __proto__: dart.getMethods(io._Link.__proto__),
  exists: dart.fnType(async.Future$(core.bool), []),
  existsSync: dart.fnType(core.bool, []),
  create: dart.fnType(async.Future$(io.Link), [core.String], {recursive: core.bool}, {}),
  createSync: dart.fnType(dart.void, [core.String], {recursive: core.bool}, {}),
  updateSync: dart.fnType(dart.void, [core.String]),
  update: dart.fnType(async.Future$(io.Link), [core.String]),
  [_delete]: dart.fnType(async.Future$(io.Link), [], {recursive: core.bool}, {}),
  [_deleteSync]: dart.fnType(dart.void, [], {recursive: core.bool}, {}),
  rename: dart.fnType(async.Future$(io.Link), [core.String]),
  renameSync: dart.fnType(io.Link, [core.String]),
  target: dart.fnType(async.Future$(core.String), []),
  targetSync: dart.fnType(core.String, []),
  [_isErrorResponse]: dart.fnType(core.bool, [dart.dynamic]),
  [_exceptionFromResponse]: dart.fnType(dart.dynamic, [dart.dynamic, core.String, core.String])
}));
dart.setGetterSignature(io._Link, () => ({
  __proto__: dart.getGetters(io._Link.__proto__),
  path: core.String,
  absolute: io.Link
}));
dart.setLibraryUri(io._Link, L104);
dart.setFieldSignature(io._Link, () => ({
  __proto__: dart.getFields(io._Link.__proto__),
  [_path$]: dart.finalFieldType(core.String),
  [_rawPath$]: dart.finalFieldType(typed_data.Uint8List)
}));
dart.defineExtensionMethods(io._Link, ['toString']);
io._Namespace = class _Namespace extends core.Object {
  static get _namespace() {
    dart.throw(new core.UnsupportedError.new("_Namespace"));
  }
  static get _namespacePointer() {
    dart.throw(new core.UnsupportedError.new("_Namespace"));
  }
  static _setupNamespace(namespace) {
    dart.throw(new core.UnsupportedError.new("_Namespace"));
  }
};
(io._Namespace.new = function() {
  ;
}).prototype = io._Namespace.prototype;
dart.addTypeTests(io._Namespace);
dart.addTypeCaches(io._Namespace);
dart.setLibraryUri(io._Namespace, L104);
io._DomainNetworkPolicy = class _DomainNetworkPolicy extends core.Object {
  matchScore(host) {
    if (host == null) dart.nullFailed(L117, 100, 25, "host");
    let domainLength = this.domain.length;
    let hostLength = host.length;
    let lengthDelta = hostLength - domainLength;
    if (host[$endsWith](this.domain) && (lengthDelta === 0 || dart.test(this.includesSubDomains) && host[$codeUnitAt](lengthDelta - 1) === 46)) {
      return domainLength * 2 + (dart.test(this.includesSubDomains) ? 0 : 1);
    }
    return -1;
  }
  checkConflict(existingPolicies) {
    if (existingPolicies == null) dart.nullFailed(L117, 118, 49, "existingPolicies");
    for (let existingPolicy of existingPolicies) {
      if (dart.equals(this.includesSubDomains, existingPolicy.includesSubDomains) && this.domain == existingPolicy.domain) {
        if (dart.equals(this.allowInsecureConnections, existingPolicy.allowInsecureConnections)) {
          return false;
        }
        dart.throw(new core.StateError.new(dart.str("Contradiction in the domain security policies: ") + dart.str("'") + dart.str(this) + dart.str("' contradicts '") + dart.str(existingPolicy) + dart.str("'")));
      }
    }
    return true;
  }
  toString() {
    let subDomainPrefix = dart.test(this.includesSubDomains) ? "*." : "";
    let insecureConnectionPermission = dart.test(this.allowInsecureConnections) ? "Allows" : "Disallows";
    return dart.str(subDomainPrefix) + dart.str(this.domain) + dart.str(": ") + dart.str(insecureConnectionPermission) + dart.str(" insecure connections");
  }
};
(io._DomainNetworkPolicy.new = function(domain, opts) {
  if (domain == null) dart.nullFailed(L117, 81, 29, "domain");
  let includesSubDomains = opts && 'includesSubDomains' in opts ? opts.includesSubDomains : false;
  if (includesSubDomains == null) dart.nullFailed(L117, 82, 13, "includesSubDomains");
  let allowInsecureConnections = opts && 'allowInsecureConnections' in opts ? opts.allowInsecureConnections : false;
  if (allowInsecureConnections == null) dart.nullFailed(L117, 83, 12, "allowInsecureConnections");
  this.domain = domain;
  this.includesSubDomains = includesSubDomains;
  this.allowInsecureConnections = allowInsecureConnections;
  if (this.domain.length > 255 || !dart.test(io._DomainNetworkPolicy._domainMatcher.hasMatch(this.domain))) {
    dart.throw(new core.ArgumentError.value(this.domain, "domain", "Invalid domain name"));
  }
}).prototype = io._DomainNetworkPolicy.prototype;
dart.addTypeTests(io._DomainNetworkPolicy);
dart.addTypeCaches(io._DomainNetworkPolicy);
dart.setMethodSignature(io._DomainNetworkPolicy, () => ({
  __proto__: dart.getMethods(io._DomainNetworkPolicy.__proto__),
  matchScore: dart.fnType(core.int, [core.String]),
  checkConflict: dart.fnType(core.bool, [core.List$(io._DomainNetworkPolicy)])
}));
dart.setLibraryUri(io._DomainNetworkPolicy, L104);
dart.setFieldSignature(io._DomainNetworkPolicy, () => ({
  __proto__: dart.getFields(io._DomainNetworkPolicy.__proto__),
  domain: dart.finalFieldType(core.String),
  allowInsecureConnections: dart.finalFieldType(core.bool),
  includesSubDomains: dart.finalFieldType(core.bool)
}));
dart.defineExtensionMethods(io._DomainNetworkPolicy, ['toString']);
dart.defineLazy(io._DomainNetworkPolicy, {
  /*io._DomainNetworkPolicy._domainMatcher*/get _domainMatcher() {
    return core.RegExp.new("^(?:[a-z\\d-]{1,63}\\.)+[a-z][a-z\\d-]{0,62}$", {caseSensitive: false});
  }
}, false);
var C127;
io._NetworkProfiling = class _NetworkProfiling extends core.Object {
  static _registerServiceExtension() {
    developer.registerExtension(io._NetworkProfiling._kGetHttpEnableTimelineLogging, C127 || CT.C127);
    developer.registerExtension(io._NetworkProfiling._kSetHttpEnableTimelineLogging, C127 || CT.C127);
    developer.registerExtension("ext.dart.io.getSocketProfile", C127 || CT.C127);
    developer.registerExtension(io._NetworkProfiling._kStartSocketProfilingRPC, C127 || CT.C127);
    developer.registerExtension(io._NetworkProfiling._kPauseSocketProfilingRPC, C127 || CT.C127);
    developer.registerExtension("ext.dart.io.clearSocketProfile", C127 || CT.C127);
    developer.registerExtension("ext.dart.io.getVersion", C127 || CT.C127);
  }
  static _serviceExtensionHandler(method, parameters) {
    if (method == null) dart.nullFailed(L118, 43, 14, "method");
    if (parameters == null) dart.nullFailed(L118, 43, 42, "parameters");
    try {
      let responseJson = null;
      switch (method) {
        case "ext.dart.io.getHttpEnableTimelineLogging":
        {
          responseJson = io._getHttpEnableTimelineLogging();
          break;
        }
        case "ext.dart.io.setHttpEnableTimelineLogging":
        {
          responseJson = io._setHttpEnableTimelineLogging(parameters);
          break;
        }
        case "ext.dart.io.getSocketProfile":
        {
          responseJson = io._SocketProfile.toJson();
          break;
        }
        case "ext.dart.io.startSocketProfiling":
        {
          responseJson = io._SocketProfile.start();
          break;
        }
        case "ext.dart.io.pauseSocketProfiling":
        {
          responseJson = io._SocketProfile.pause();
          break;
        }
        case "ext.dart.io.clearSocketProfile":
        {
          responseJson = io._SocketProfile.clear();
          break;
        }
        case "ext.dart.io.getVersion":
        {
          responseJson = io._NetworkProfiling.getVersion();
          break;
        }
        default:
        {
          return FutureOfServiceExtensionResponse().value(new developer.ServiceExtensionResponse.error(-32000, dart.str("Method ") + dart.str(method) + dart.str(" does not exist")));
        }
      }
      return FutureOfServiceExtensionResponse().value(new developer.ServiceExtensionResponse.result(responseJson));
    } catch (e) {
      let errorMessage = dart.getThrown(e);
      return FutureOfServiceExtensionResponse().value(new developer.ServiceExtensionResponse.error(-32602, core.String.as(errorMessage)));
    }
  }
  static getVersion() {
    return convert.json.encode(new (IdentityMapOfString$Object()).from(["type", "Version", "major", 1, "minor", 1]));
  }
};
(io._NetworkProfiling.new = function() {
  ;
}).prototype = io._NetworkProfiling.prototype;
dart.addTypeTests(io._NetworkProfiling);
dart.addTypeCaches(io._NetworkProfiling);
dart.setLibraryUri(io._NetworkProfiling, L104);
dart.defineLazy(io._NetworkProfiling, {
  /*io._NetworkProfiling._kGetHttpEnableTimelineLogging*/get _kGetHttpEnableTimelineLogging() {
    return "ext.dart.io.getHttpEnableTimelineLogging";
  },
  /*io._NetworkProfiling._kSetHttpEnableTimelineLogging*/get _kSetHttpEnableTimelineLogging() {
    return "ext.dart.io.setHttpEnableTimelineLogging";
  },
  /*io._NetworkProfiling._kClearSocketProfileRPC*/get _kClearSocketProfileRPC() {
    return "ext.dart.io.clearSocketProfile";
  },
  /*io._NetworkProfiling._kGetSocketProfileRPC*/get _kGetSocketProfileRPC() {
    return "ext.dart.io.getSocketProfile";
  },
  /*io._NetworkProfiling._kPauseSocketProfilingRPC*/get _kPauseSocketProfilingRPC() {
    return "ext.dart.io.pauseSocketProfiling";
  },
  /*io._NetworkProfiling._kStartSocketProfilingRPC*/get _kStartSocketProfilingRPC() {
    return "ext.dart.io.startSocketProfiling";
  },
  /*io._NetworkProfiling._kGetVersionRPC*/get _kGetVersionRPC() {
    return "ext.dart.io.getVersion";
  }
}, false);
var _name$4 = dart.privateName(io, "_name");
var C128;
var C129;
var C130;
var C131;
var C132;
var C133;
var C134;
io._SocketProfile = class _SocketProfile extends core.Object {
  static toJson() {
    return convert.json.encode(new (IdentityMapOfString$Object()).from(["type", "SocketProfile", "sockets", io._SocketProfile._idToSocketStatistic[$values][$map](MapOfString$dynamic(), dart.fn(f => {
        if (f == null) dart.nullFailed(L118, 121, 53, "f");
        return f.toMap();
      }, _SocketStatisticToMapOfString$dynamic()))[$toList]()]));
  }
  static collectNewSocket(id, type, addr, port) {
    if (id == null) dart.nullFailed(L118, 125, 11, "id");
    if (type == null) dart.nullFailed(L118, 125, 22, "type");
    if (addr == null) dart.nullFailed(L118, 125, 44, "addr");
    if (port == null) dart.nullFailed(L118, 125, 54, "port");
    io._SocketProfile.collectStatistic(id, io._SocketProfileType.startTime);
    io._SocketProfile.collectStatistic(id, io._SocketProfileType.socketType, type);
    io._SocketProfile.collectStatistic(id, io._SocketProfileType.address, addr);
    io._SocketProfile.collectStatistic(id, io._SocketProfileType.port, port);
  }
  static collectStatistic(id, type, object = null) {
    let t190, t189, t188, t187, t187$, t187$0;
    if (id == null) dart.nullFailed(L118, 132, 36, "id");
    if (type == null) dart.nullFailed(L118, 132, 59, "type");
    if (!dart.test(io._SocketProfile._enableSocketProfiling)) {
      return;
    }
    if (!dart.test(io._SocketProfile._idToSocketStatistic[$containsKey](id)) && !dart.equals(type, io._SocketProfileType.startTime)) return;
    let stats = (t187 = io._SocketProfile._idToSocketStatistic, t188 = id, t189 = t187[$_get](t188), t189 == null ? (t190 = new io._SocketStatistic.new(id), t187[$_set](t188, t190), t190) : t189);
    switch (type) {
      case C128 || CT.C128:
      {
        stats.startTime = developer.Timeline.now;
        break;
      }
      case C129 || CT.C129:
      {
        stats.endTime = developer.Timeline.now;
        break;
      }
      case C130 || CT.C130:
      {
        if (!io.InternetAddress.is(object)) dart.assertFailed(null, L118, 149, 16, "object is InternetAddress");
        stats.address = dart.toString(io.InternetAddress.as(object));
        break;
      }
      case C131 || CT.C131:
      {
        if (!core.int.is(object)) dart.assertFailed(null, L118, 153, 16, "object is int");
        stats.port = intN().as(object);
        break;
      }
      case C132 || CT.C132:
      {
        if (!(typeof object == 'string')) dart.assertFailed(null, L118, 157, 16, "object is String");
        stats.socketType = StringN().as(object);
        break;
      }
      case C133 || CT.C133:
      {
        if (object == null) return;
        t187$ = stats;
        t187$.readBytes = dart.notNull(t187$.readBytes) + dart.notNull(core.int.as(object));
        stats.lastReadTime = developer.Timeline.now;
        break;
      }
      case C134 || CT.C134:
      {
        if (object == null) return;
        t187$0 = stats;
        t187$0.writeBytes = dart.notNull(t187$0.writeBytes) + dart.notNull(core.int.as(object));
        stats.lastWriteTime = developer.Timeline.now;
        break;
      }
      default:
      {
        dart.throw(new core.ArgumentError.new(dart.str("type ") + dart.str(type) + dart.str(" does not exist")));
        break;
      }
    }
  }
  static start() {
    io._SocketProfile._enableSocketProfiling = true;
    return io._success();
  }
  static pause() {
    io._SocketProfile._enableSocketProfiling = false;
    return io._success();
  }
  static clear() {
    io._SocketProfile._idToSocketStatistic[$clear]();
    return io._success();
  }
};
(io._SocketProfile.new = function() {
  ;
}).prototype = io._SocketProfile.prototype;
dart.addTypeTests(io._SocketProfile);
dart.addTypeCaches(io._SocketProfile);
dart.setLibraryUri(io._SocketProfile, L104);
dart.defineLazy(io._SocketProfile, {
  /*io._SocketProfile._kType*/get _kType() {
    return "SocketProfile";
  },
  /*io._SocketProfile._enableSocketProfiling*/get _enableSocketProfiling() {
    return false;
  },
  set _enableSocketProfiling(_) {},
  /*io._SocketProfile._idToSocketStatistic*/get _idToSocketStatistic() {
    return new (IdentityMapOfint$_SocketStatistic()).new();
  },
  set _idToSocketStatistic(_) {}
}, false);
var C135;
io._SocketProfileType = class _SocketProfileType extends core.Object {
  toString() {
    return this[_name$4];
  }
};
(io._SocketProfileType.new = function(index, _name) {
  if (index == null) dart.nullFailed(L118, 195, 6, "index");
  if (_name == null) dart.nullFailed(L118, 195, 6, "_name");
  this.index = index;
  this[_name$4] = _name;
  ;
}).prototype = io._SocketProfileType.prototype;
dart.addTypeTests(io._SocketProfileType);
dart.addTypeCaches(io._SocketProfileType);
dart.setLibraryUri(io._SocketProfileType, L104);
dart.setFieldSignature(io._SocketProfileType, () => ({
  __proto__: dart.getFields(io._SocketProfileType.__proto__),
  index: dart.finalFieldType(core.int),
  [_name$4]: dart.finalFieldType(core.String)
}));
dart.defineExtensionMethods(io._SocketProfileType, ['toString']);
io._SocketProfileType.startTime = C128 || CT.C128;
io._SocketProfileType.endTime = C129 || CT.C129;
io._SocketProfileType.address = C130 || CT.C130;
io._SocketProfileType.port = C131 || CT.C131;
io._SocketProfileType.socketType = C132 || CT.C132;
io._SocketProfileType.readBytes = C133 || CT.C133;
io._SocketProfileType.writeBytes = C134 || CT.C134;
io._SocketProfileType.values = C135 || CT.C135;
var _setIfNotNull = dart.privateName(io, "_setIfNotNull");
io._SocketStatistic = class _SocketStatistic extends core.Object {
  toMap() {
    let map = new (IdentityMapOfString$dynamic()).from(["id", this.id]);
    this[_setIfNotNull](map, "startTime", this.startTime);
    this[_setIfNotNull](map, "endTime", this.endTime);
    this[_setIfNotNull](map, "address", this.address);
    this[_setIfNotNull](map, "port", this.port);
    this[_setIfNotNull](map, "socketType", this.socketType);
    this[_setIfNotNull](map, "readBytes", this.readBytes);
    this[_setIfNotNull](map, "writeBytes", this.writeBytes);
    this[_setIfNotNull](map, "lastWriteTime", this.lastWriteTime);
    this[_setIfNotNull](map, "lastReadTime", this.lastReadTime);
    return map;
  }
  [_setIfNotNull](json, key, value) {
    if (json == null) dart.nullFailed(L118, 236, 43, "json");
    if (key == null) dart.nullFailed(L118, 236, 56, "key");
    if (value == null) return;
    json[$_set](key, value);
  }
};
(io._SocketStatistic.new = function(id) {
  if (id == null) dart.nullFailed(L118, 218, 25, "id");
  this.startTime = null;
  this.endTime = null;
  this.address = null;
  this.port = null;
  this.socketType = null;
  this.readBytes = 0;
  this.writeBytes = 0;
  this.lastWriteTime = null;
  this.lastReadTime = null;
  this.id = id;
  ;
}).prototype = io._SocketStatistic.prototype;
dart.addTypeTests(io._SocketStatistic);
dart.addTypeCaches(io._SocketStatistic);
dart.setMethodSignature(io._SocketStatistic, () => ({
  __proto__: dart.getMethods(io._SocketStatistic.__proto__),
  toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
  [_setIfNotNull]: dart.fnType(dart.void, [core.Map$(core.String, dart.dynamic), core.String, dart.nullable(core.Object)])
}));
dart.setLibraryUri(io._SocketStatistic, L104);
dart.setFieldSignature(io._SocketStatistic, () => ({
  __proto__: dart.getFields(io._SocketStatistic.__proto__),
  id: dart.finalFieldType(core.int),
  startTime: dart.fieldType(dart.nullable(core.int)),
  endTime: dart.fieldType(dart.nullable(core.int)),
  address: dart.fieldType(dart.nullable(core.String)),
  port: dart.fieldType(dart.nullable(core.int)),
  socketType: dart.fieldType(dart.nullable(core.String)),
  readBytes: dart.fieldType(core.int),
  writeBytes: dart.fieldType(core.int),
  lastWriteTime: dart.fieldType(dart.nullable(core.int)),
  lastReadTime: dart.fieldType(dart.nullable(core.int))
}));
io.IOOverrides = class IOOverrides extends core.Object {
  static get current() {
    let t187;
    return IOOverridesN().as((t187 = async.Zone.current._get(io._ioOverridesToken), t187 == null ? io.IOOverrides._global : t187));
  }
  static set global(overrides) {
    io.IOOverrides._global = overrides;
  }
  static runZoned(R, body, opts) {
    if (body == null) dart.nullFailed(L119, 54, 26, "body");
    let createDirectory = opts && 'createDirectory' in opts ? opts.createDirectory : null;
    let getCurrentDirectory = opts && 'getCurrentDirectory' in opts ? opts.getCurrentDirectory : null;
    let setCurrentDirectory = opts && 'setCurrentDirectory' in opts ? opts.setCurrentDirectory : null;
    let getSystemTempDirectory = opts && 'getSystemTempDirectory' in opts ? opts.getSystemTempDirectory : null;
    let createFile = opts && 'createFile' in opts ? opts.createFile : null;
    let stat = opts && 'stat' in opts ? opts.stat : null;
    let statSync = opts && 'statSync' in opts ? opts.statSync : null;
    let fseIdentical = opts && 'fseIdentical' in opts ? opts.fseIdentical : null;
    let fseIdenticalSync = opts && 'fseIdenticalSync' in opts ? opts.fseIdenticalSync : null;
    let fseGetType = opts && 'fseGetType' in opts ? opts.fseGetType : null;
    let fseGetTypeSync = opts && 'fseGetTypeSync' in opts ? opts.fseGetTypeSync : null;
    let fsWatch = opts && 'fsWatch' in opts ? opts.fsWatch : null;
    let fsWatchIsSupported = opts && 'fsWatchIsSupported' in opts ? opts.fsWatchIsSupported : null;
    let createLink = opts && 'createLink' in opts ? opts.createLink : null;
    let socketConnect = opts && 'socketConnect' in opts ? opts.socketConnect : null;
    let socketStartConnect = opts && 'socketStartConnect' in opts ? opts.socketStartConnect : null;
    let serverSocketBind = opts && 'serverSocketBind' in opts ? opts.serverSocketBind : null;
    let overrides = new io._IOOverridesScope.new(createDirectory, getCurrentDirectory, setCurrentDirectory, getSystemTempDirectory, createFile, stat, statSync, fseIdentical, fseIdenticalSync, fseGetType, fseGetTypeSync, fsWatch, fsWatchIsSupported, createLink, socketConnect, socketStartConnect, serverSocketBind);
    return io._asyncRunZoned(R, body, {zoneValues: new (LinkedMapOfObjectN$ObjectN()).from([io._ioOverridesToken, overrides])});
  }
  static runWithIOOverrides(R, body, overrides) {
    if (body == null) dart.nullFailed(L119, 135, 36, "body");
    if (overrides == null) dart.nullFailed(L119, 135, 56, "overrides");
    return io._asyncRunZoned(R, body, {zoneValues: new (LinkedMapOfObjectN$ObjectN()).from([io._ioOverridesToken, overrides])});
  }
  createDirectory(path) {
    if (path == null) dart.nullFailed(L119, 145, 36, "path");
    return new io._Directory.new(path);
  }
  getCurrentDirectory() {
    return io._Directory.current;
  }
  setCurrentDirectory(path) {
    if (path == null) dart.nullFailed(L119, 157, 35, "path");
    io._Directory.current = path;
  }
  getSystemTempDirectory() {
    return io._Directory.systemTemp;
  }
  createFile(path) {
    if (path == null) dart.nullFailed(L119, 173, 26, "path");
    return new io._File.new(path);
  }
  stat(path) {
    if (path == null) dart.nullFailed(L119, 181, 32, "path");
    return io.FileStat._stat(path);
  }
  statSync(path) {
    if (path == null) dart.nullFailed(L119, 189, 28, "path");
    return io.FileStat._statSyncInternal(path);
  }
  fseIdentical(path1, path2) {
    if (path1 == null) dart.nullFailed(L119, 200, 36, "path1");
    if (path2 == null) dart.nullFailed(L119, 200, 50, "path2");
    return io.FileSystemEntity._identical(path1, path2);
  }
  fseIdenticalSync(path1, path2) {
    if (path1 == null) dart.nullFailed(L119, 209, 32, "path1");
    if (path2 == null) dart.nullFailed(L119, 209, 46, "path2");
    return io.FileSystemEntity._identicalSync(path1, path2);
  }
  fseGetType(path, followLinks) {
    if (path == null) dart.nullFailed(L119, 217, 50, "path");
    if (followLinks == null) dart.nullFailed(L119, 217, 61, "followLinks");
    return io.FileSystemEntity._getTypeRequest(convert.utf8.encoder.convert(path), followLinks);
  }
  fseGetTypeSync(path, followLinks) {
    if (path == null) dart.nullFailed(L119, 226, 46, "path");
    if (followLinks == null) dart.nullFailed(L119, 226, 57, "followLinks");
    return io.FileSystemEntity._getTypeSyncHelper(convert.utf8.encoder.convert(path), followLinks);
  }
  fsWatch(path, events, recursive) {
    if (path == null) dart.nullFailed(L119, 237, 42, "path");
    if (events == null) dart.nullFailed(L119, 237, 52, "events");
    if (recursive == null) dart.nullFailed(L119, 237, 65, "recursive");
    return io._FileSystemWatcher._watch(path, events, recursive);
  }
  fsWatchIsSupported() {
    return io._FileSystemWatcher.isSupported;
  }
  createLink(path) {
    if (path == null) dart.nullFailed(L119, 253, 26, "path");
    return new io._Link.new(path);
  }
  socketConnect(host, port, opts) {
    if (port == null) dart.nullFailed(L119, 261, 42, "port");
    let sourceAddress = opts && 'sourceAddress' in opts ? opts.sourceAddress : null;
    let timeout = opts && 'timeout' in opts ? opts.timeout : null;
    return io.Socket._connect(host, port, {sourceAddress: sourceAddress, timeout: timeout});
  }
  socketStartConnect(host, port, opts) {
    if (port == null) dart.nullFailed(L119, 272, 63, "port");
    let sourceAddress = opts && 'sourceAddress' in opts ? opts.sourceAddress : null;
    return io.Socket._startConnect(host, port, {sourceAddress: sourceAddress});
  }
  serverSocketBind(address, port, opts) {
    if (port == null) dart.nullFailed(L119, 284, 54, "port");
    let backlog = opts && 'backlog' in opts ? opts.backlog : 0;
    if (backlog == null) dart.nullFailed(L119, 285, 12, "backlog");
    let v6Only = opts && 'v6Only' in opts ? opts.v6Only : false;
    if (v6Only == null) dart.nullFailed(L119, 285, 29, "v6Only");
    let shared = opts && 'shared' in opts ? opts.shared : false;
    if (shared == null) dart.nullFailed(L119, 285, 49, "shared");
    return io.ServerSocket._bind(address, port, {backlog: backlog, v6Only: v6Only, shared: shared});
  }
};
(io.IOOverrides.new = function() {
  ;
}).prototype = io.IOOverrides.prototype;
dart.addTypeTests(io.IOOverrides);
dart.addTypeCaches(io.IOOverrides);
dart.setMethodSignature(io.IOOverrides, () => ({
  __proto__: dart.getMethods(io.IOOverrides.__proto__),
  createDirectory: dart.fnType(io.Directory, [core.String]),
  getCurrentDirectory: dart.fnType(io.Directory, []),
  setCurrentDirectory: dart.fnType(dart.void, [core.String]),
  getSystemTempDirectory: dart.fnType(io.Directory, []),
  createFile: dart.fnType(io.File, [core.String]),
  stat: dart.fnType(async.Future$(io.FileStat), [core.String]),
  statSync: dart.fnType(io.FileStat, [core.String]),
  fseIdentical: dart.fnType(async.Future$(core.bool), [core.String, core.String]),
  fseIdenticalSync: dart.fnType(core.bool, [core.String, core.String]),
  fseGetType: dart.fnType(async.Future$(io.FileSystemEntityType), [core.String, core.bool]),
  fseGetTypeSync: dart.fnType(io.FileSystemEntityType, [core.String, core.bool]),
  fsWatch: dart.fnType(async.Stream$(io.FileSystemEvent), [core.String, core.int, core.bool]),
  fsWatchIsSupported: dart.fnType(core.bool, []),
  createLink: dart.fnType(io.Link, [core.String]),
  socketConnect: dart.fnType(async.Future$(io.Socket), [dart.dynamic, core.int], {sourceAddress: dart.dynamic, timeout: dart.nullable(core.Duration)}, {}),
  socketStartConnect: dart.fnType(async.Future$(io.ConnectionTask$(io.Socket)), [dart.dynamic, core.int], {sourceAddress: dart.dynamic}, {}),
  serverSocketBind: dart.fnType(async.Future$(io.ServerSocket), [dart.dynamic, core.int], {backlog: core.int, shared: core.bool, v6Only: core.bool}, {})
}));
dart.setLibraryUri(io.IOOverrides, L104);
dart.defineLazy(io.IOOverrides, {
  /*io.IOOverrides._global*/get _global() {
    return null;
  },
  set _global(_) {}
}, false);
var _previous$4 = dart.privateName(io, "_previous");
var _createDirectory$ = dart.privateName(io, "_createDirectory");
var _getCurrentDirectory$ = dart.privateName(io, "_getCurrentDirectory");
var _setCurrentDirectory$ = dart.privateName(io, "_setCurrentDirectory");
var _getSystemTempDirectory$ = dart.privateName(io, "_getSystemTempDirectory");
var _createFile$ = dart.privateName(io, "_createFile");
var _stat$ = dart.privateName(io, "_stat");
var _statSync$ = dart.privateName(io, "_statSync");
var _fseIdentical$ = dart.privateName(io, "_fseIdentical");
var _fseIdenticalSync$ = dart.privateName(io, "_fseIdenticalSync");
var _fseGetType$ = dart.privateName(io, "_fseGetType");
var _fseGetTypeSync$ = dart.privateName(io, "_fseGetTypeSync");
var _fsWatch$ = dart.privateName(io, "_fsWatch");
var _fsWatchIsSupported$ = dart.privateName(io, "_fsWatchIsSupported");
var _createLink$ = dart.privateName(io, "_createLink");
var _socketConnect$ = dart.privateName(io, "_socketConnect");
var _socketStartConnect$ = dart.privateName(io, "_socketStartConnect");
var _serverSocketBind$ = dart.privateName(io, "_serverSocketBind");
io._IOOverridesScope = class _IOOverridesScope extends io.IOOverrides {
  createDirectory(path) {
    if (path == null) dart.nullFailed(L119, 367, 36, "path");
    if (this[_createDirectory$] != null) return dart.nullCheck(this[_createDirectory$])(path);
    if (this[_previous$4] != null) return dart.nullCheck(this[_previous$4]).createDirectory(path);
    return super.createDirectory(path);
  }
  getCurrentDirectory() {
    if (this[_getCurrentDirectory$] != null) return dart.nullCheck(this[_getCurrentDirectory$])();
    if (this[_previous$4] != null) return dart.nullCheck(this[_previous$4]).getCurrentDirectory();
    return super.getCurrentDirectory();
  }
  setCurrentDirectory(path) {
    if (path == null) dart.nullFailed(L119, 381, 35, "path");
    if (this[_setCurrentDirectory$] != null)
      dart.nullCheck(this[_setCurrentDirectory$])(path);
    else if (this[_previous$4] != null)
      dart.nullCheck(this[_previous$4]).setCurrentDirectory(path);
    else
      super.setCurrentDirectory(path);
  }
  getSystemTempDirectory() {
    if (this[_getSystemTempDirectory$] != null) return dart.nullCheck(this[_getSystemTempDirectory$])();
    if (this[_previous$4] != null) return dart.nullCheck(this[_previous$4]).getSystemTempDirectory();
    return super.getSystemTempDirectory();
  }
  createFile(path) {
    if (path == null) dart.nullFailed(L119, 399, 26, "path");
    if (this[_createFile$] != null) return dart.nullCheck(this[_createFile$])(path);
    if (this[_previous$4] != null) return dart.nullCheck(this[_previous$4]).createFile(path);
    return super.createFile(path);
  }
  stat(path) {
    if (path == null) dart.nullFailed(L119, 407, 32, "path");
    if (this[_stat$] != null) return dart.nullCheck(this[_stat$])(path);
    if (this[_previous$4] != null) return dart.nullCheck(this[_previous$4]).stat(path);
    return super.stat(path);
  }
  statSync(path) {
    if (path == null) dart.nullFailed(L119, 414, 28, "path");
    if (this[_stat$] != null) return dart.nullCheck(this[_statSync$])(path);
    if (this[_previous$4] != null) return dart.nullCheck(this[_previous$4]).statSync(path);
    return super.statSync(path);
  }
  fseIdentical(path1, path2) {
    if (path1 == null) dart.nullFailed(L119, 422, 36, "path1");
    if (path2 == null) dart.nullFailed(L119, 422, 50, "path2");
    if (this[_fseIdentical$] != null) return dart.nullCheck(this[_fseIdentical$])(path1, path2);
    if (this[_previous$4] != null) return dart.nullCheck(this[_previous$4]).fseIdentical(path1, path2);
    return super.fseIdentical(path1, path2);
  }
  fseIdenticalSync(path1, path2) {
    if (path1 == null) dart.nullFailed(L119, 429, 32, "path1");
    if (path2 == null) dart.nullFailed(L119, 429, 46, "path2");
    if (this[_fseIdenticalSync$] != null) return dart.nullCheck(this[_fseIdenticalSync$])(path1, path2);
    if (this[_previous$4] != null) return dart.nullCheck(this[_previous$4]).fseIdenticalSync(path1, path2);
    return super.fseIdenticalSync(path1, path2);
  }
  fseGetType(path, followLinks) {
    if (path == null) dart.nullFailed(L119, 436, 50, "path");
    if (followLinks == null) dart.nullFailed(L119, 436, 61, "followLinks");
    if (this[_fseGetType$] != null) return dart.nullCheck(this[_fseGetType$])(path, followLinks);
    if (this[_previous$4] != null) return dart.nullCheck(this[_previous$4]).fseGetType(path, followLinks);
    return super.fseGetType(path, followLinks);
  }
  fseGetTypeSync(path, followLinks) {
    if (path == null) dart.nullFailed(L119, 443, 46, "path");
    if (followLinks == null) dart.nullFailed(L119, 443, 57, "followLinks");
    if (this[_fseGetTypeSync$] != null) return dart.nullCheck(this[_fseGetTypeSync$])(path, followLinks);
    if (this[_previous$4] != null) return dart.nullCheck(this[_previous$4]).fseGetTypeSync(path, followLinks);
    return super.fseGetTypeSync(path, followLinks);
  }
  fsWatch(path, events, recursive) {
    if (path == null) dart.nullFailed(L119, 451, 42, "path");
    if (events == null) dart.nullFailed(L119, 451, 52, "events");
    if (recursive == null) dart.nullFailed(L119, 451, 65, "recursive");
    if (this[_fsWatch$] != null) return dart.nullCheck(this[_fsWatch$])(path, events, recursive);
    if (this[_previous$4] != null) return dart.nullCheck(this[_previous$4]).fsWatch(path, events, recursive);
    return super.fsWatch(path, events, recursive);
  }
  fsWatchIsSupported() {
    if (this[_fsWatchIsSupported$] != null) return dart.nullCheck(this[_fsWatchIsSupported$])();
    if (this[_previous$4] != null) return dart.nullCheck(this[_previous$4]).fsWatchIsSupported();
    return super.fsWatchIsSupported();
  }
  createLink(path) {
    if (path == null) dart.nullFailed(L119, 466, 26, "path");
    if (this[_createLink$] != null) return dart.nullCheck(this[_createLink$])(path);
    if (this[_previous$4] != null) return dart.nullCheck(this[_previous$4]).createLink(path);
    return super.createLink(path);
  }
  socketConnect(host, port, opts) {
    if (port == null) dart.nullFailed(L119, 474, 42, "port");
    let sourceAddress = opts && 'sourceAddress' in opts ? opts.sourceAddress : null;
    let timeout = opts && 'timeout' in opts ? opts.timeout : null;
    if (this[_socketConnect$] != null) {
      return dart.nullCheck(this[_socketConnect$])(host, port, {sourceAddress: sourceAddress, timeout: timeout});
    }
    if (this[_previous$4] != null) {
      return dart.nullCheck(this[_previous$4]).socketConnect(host, port, {sourceAddress: sourceAddress, timeout: timeout});
    }
    return super.socketConnect(host, port, {sourceAddress: sourceAddress, timeout: timeout});
  }
  socketStartConnect(host, port, opts) {
    if (port == null) dart.nullFailed(L119, 489, 63, "port");
    let sourceAddress = opts && 'sourceAddress' in opts ? opts.sourceAddress : null;
    if (this[_socketStartConnect$] != null) {
      return dart.nullCheck(this[_socketStartConnect$])(host, port, {sourceAddress: sourceAddress});
    }
    if (this[_previous$4] != null) {
      return dart.nullCheck(this[_previous$4]).socketStartConnect(host, port, {sourceAddress: sourceAddress});
    }
    return super.socketStartConnect(host, port, {sourceAddress: sourceAddress});
  }
  serverSocketBind(address, port, opts) {
    if (port == null) dart.nullFailed(L119, 503, 54, "port");
    let backlog = opts && 'backlog' in opts ? opts.backlog : 0;
    if (backlog == null) dart.nullFailed(L119, 504, 12, "backlog");
    let v6Only = opts && 'v6Only' in opts ? opts.v6Only : false;
    if (v6Only == null) dart.nullFailed(L119, 504, 29, "v6Only");
    let shared = opts && 'shared' in opts ? opts.shared : false;
    if (shared == null) dart.nullFailed(L119, 504, 49, "shared");
    if (this[_serverSocketBind$] != null) {
      return dart.nullCheck(this[_serverSocketBind$])(address, port, {backlog: backlog, v6Only: v6Only, shared: shared});
    }
    if (this[_previous$4] != null) {
      return dart.nullCheck(this[_previous$4]).serverSocketBind(address, port, {backlog: backlog, v6Only: v6Only, shared: shared});
    }
    return super.serverSocketBind(address, port, {backlog: backlog, v6Only: v6Only, shared: shared});
  }
};
(io._IOOverridesScope.new = function(_createDirectory, _getCurrentDirectory, _setCurrentDirectory, _getSystemTempDirectory, _createFile, _stat, _statSync, _fseIdentical, _fseIdenticalSync, _fseGetType, _fseGetTypeSync, _fsWatch, _fsWatchIsSupported, _createLink, _socketConnect, _socketStartConnect, _serverSocketBind) {
  this[_previous$4] = io.IOOverrides.current;
  this[_createDirectory$] = _createDirectory;
  this[_getCurrentDirectory$] = _getCurrentDirectory;
  this[_setCurrentDirectory$] = _setCurrentDirectory;
  this[_getSystemTempDirectory$] = _getSystemTempDirectory;
  this[_createFile$] = _createFile;
  this[_stat$] = _stat;
  this[_statSync$] = _statSync;
  this[_fseIdentical$] = _fseIdentical;
  this[_fseIdenticalSync$] = _fseIdenticalSync;
  this[_fseGetType$] = _fseGetType;
  this[_fseGetTypeSync$] = _fseGetTypeSync;
  this[_fsWatch$] = _fsWatch;
  this[_fsWatchIsSupported$] = _fsWatchIsSupported;
  this[_createLink$] = _createLink;
  this[_socketConnect$] = _socketConnect;
  this[_socketStartConnect$] = _socketStartConnect;
  this[_serverSocketBind$] = _serverSocketBind;
  ;
}).prototype = io._IOOverridesScope.prototype;
dart.addTypeTests(io._IOOverridesScope);
dart.addTypeCaches(io._IOOverridesScope);
dart.setLibraryUri(io._IOOverridesScope, L104);
dart.setFieldSignature(io._IOOverridesScope, () => ({
  __proto__: dart.getFields(io._IOOverridesScope.__proto__),
  [_previous$4]: dart.finalFieldType(dart.nullable(io.IOOverrides)),
  [_createDirectory$]: dart.fieldType(dart.nullable(dart.fnType(io.Directory, [core.String]))),
  [_getCurrentDirectory$]: dart.fieldType(dart.nullable(dart.fnType(io.Directory, []))),
  [_setCurrentDirectory$]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [core.String]))),
  [_getSystemTempDirectory$]: dart.fieldType(dart.nullable(dart.fnType(io.Directory, []))),
  [_createFile$]: dart.fieldType(dart.nullable(dart.fnType(io.File, [core.String]))),
  [_stat$]: dart.fieldType(dart.nullable(dart.fnType(async.Future$(io.FileStat), [core.String]))),
  [_statSync$]: dart.fieldType(dart.nullable(dart.fnType(io.FileStat, [core.String]))),
  [_fseIdentical$]: dart.fieldType(dart.nullable(dart.fnType(async.Future$(core.bool), [core.String, core.String]))),
  [_fseIdenticalSync$]: dart.fieldType(dart.nullable(dart.fnType(core.bool, [core.String, core.String]))),
  [_fseGetType$]: dart.fieldType(dart.nullable(dart.fnType(async.Future$(io.FileSystemEntityType), [core.String, core.bool]))),
  [_fseGetTypeSync$]: dart.fieldType(dart.nullable(dart.fnType(io.FileSystemEntityType, [core.String, core.bool]))),
  [_fsWatch$]: dart.fieldType(dart.nullable(dart.fnType(async.Stream$(io.FileSystemEvent), [core.String, core.int, core.bool]))),
  [_fsWatchIsSupported$]: dart.fieldType(dart.nullable(dart.fnType(core.bool, []))),
  [_createLink$]: dart.fieldType(dart.nullable(dart.fnType(io.Link, [core.String]))),
  [_socketConnect$]: dart.fieldType(dart.nullable(dart.fnType(async.Future$(io.Socket), [dart.dynamic, core.int], {sourceAddress: dart.dynamic, timeout: dart.nullable(core.Duration)}, {}))),
  [_socketStartConnect$]: dart.fieldType(dart.nullable(dart.fnType(async.Future$(io.ConnectionTask$(io.Socket)), [dart.dynamic, core.int], {sourceAddress: dart.dynamic}, {}))),
  [_serverSocketBind$]: dart.fieldType(dart.nullable(dart.fnType(async.Future$(io.ServerSocket), [dart.dynamic, core.int], {backlog: core.int, shared: core.bool, v6Only: core.bool}, {})))
}));
io.Platform = class Platform extends core.Object {
  static get numberOfProcessors() {
    return io.Platform._numberOfProcessors;
  }
  static get pathSeparator() {
    return io.Platform._pathSeparator;
  }
  static get localeName() {
    return io._Platform.localeName();
  }
  static get operatingSystem() {
    return io.Platform._operatingSystem;
  }
  static get operatingSystemVersion() {
    return io.Platform._operatingSystemVersion;
  }
  static get localHostname() {
    return io.Platform._localHostname;
  }
  static get environment() {
    return io._Platform.environment;
  }
  static get executable() {
    return io._Platform.executable;
  }
  static get resolvedExecutable() {
    return io._Platform.resolvedExecutable;
  }
  static get script() {
    return io._Platform.script;
  }
  static get executableArguments() {
    return io._Platform.executableArguments;
  }
  static get packageRoot() {
    return null;
  }
  static get packageConfig() {
    return io._Platform.packageConfig;
  }
  static get version() {
    return io.Platform._version;
  }
};
(io.Platform.new = function() {
  ;
}).prototype = io.Platform.prototype;
dart.addTypeTests(io.Platform);
dart.addTypeCaches(io.Platform);
dart.setLibraryUri(io.Platform, L104);
dart.defineLazy(io.Platform, {
  /*io.Platform._numberOfProcessors*/get _numberOfProcessors() {
    return io._Platform.numberOfProcessors;
  },
  /*io.Platform._pathSeparator*/get _pathSeparator() {
    return io._Platform.pathSeparator;
  },
  /*io.Platform._operatingSystem*/get _operatingSystem() {
    return io._Platform.operatingSystem;
  },
  /*io.Platform._operatingSystemVersion*/get _operatingSystemVersion() {
    return io._Platform.operatingSystemVersion;
  },
  /*io.Platform._localHostname*/get _localHostname() {
    return io._Platform.localHostname;
  },
  /*io.Platform._version*/get _version() {
    return io._Platform.version;
  },
  /*io.Platform.isLinux*/get isLinux() {
    return io.Platform._operatingSystem === "linux";
  },
  /*io.Platform.isMacOS*/get isMacOS() {
    return io.Platform._operatingSystem === "macos";
  },
  /*io.Platform.isWindows*/get isWindows() {
    return io.Platform._operatingSystem === "windows";
  },
  /*io.Platform.isAndroid*/get isAndroid() {
    return io.Platform._operatingSystem === "android";
  },
  /*io.Platform.isIOS*/get isIOS() {
    return io.Platform._operatingSystem === "ios";
  },
  /*io.Platform.isFuchsia*/get isFuchsia() {
    return io.Platform._operatingSystem === "fuchsia";
  }
}, false);
io._Platform = class _Platform extends core.Object {
  static _packageRoot() {
    dart.throw(new core.UnsupportedError.new("Platform._packageRoot"));
  }
  static _numberOfProcessors() {
    dart.throw(new core.UnsupportedError.new("Platform._numberOfProcessors"));
  }
  static _pathSeparator() {
    dart.throw(new core.UnsupportedError.new("Platform._pathSeparator"));
  }
  static _operatingSystem() {
    dart.throw(new core.UnsupportedError.new("Platform._operatingSystem"));
  }
  static _operatingSystemVersion() {
    dart.throw(new core.UnsupportedError.new("Platform._operatingSystemVersion"));
  }
  static _localHostname() {
    dart.throw(new core.UnsupportedError.new("Platform._localHostname"));
  }
  static _executable() {
    dart.throw(new core.UnsupportedError.new("Platform._executable"));
  }
  static _resolvedExecutable() {
    dart.throw(new core.UnsupportedError.new("Platform._resolvedExecutable"));
  }
  static _environment() {
    dart.throw(new core.UnsupportedError.new("Platform._environment"));
  }
  static _executableArguments() {
    dart.throw(new core.UnsupportedError.new("Platform._executableArguments"));
  }
  static _packageConfig() {
    dart.throw(new core.UnsupportedError.new("Platform._packageConfig"));
  }
  static _version() {
    dart.throw(new core.UnsupportedError.new("Platform._version"));
  }
  static _localeName() {
    dart.throw(new core.UnsupportedError.new("Platform._localeName"));
  }
  static _script() {
    dart.throw(new core.UnsupportedError.new("Platform._script"));
  }
  static localeName() {
    let result = io._Platform._localeClosure == null ? io._Platform._localeName() : dart.nullCheck(io._Platform._localeClosure)();
    if (io.OSError.is(result)) {
      dart.throw(result);
    }
    return result;
  }
  static get numberOfProcessors() {
    return io._Platform._numberOfProcessors();
  }
  static get pathSeparator() {
    return io._Platform._pathSeparator();
  }
  static get operatingSystem() {
    return io._Platform._operatingSystem();
  }
  static get script() {
    return io._Platform._script();
  }
  static get operatingSystemVersion() {
    if (io._Platform._cachedOSVersion == null) {
      let result = io._Platform._operatingSystemVersion();
      if (io.OSError.is(result)) {
        dart.throw(result);
      }
      io._Platform._cachedOSVersion = StringN().as(result);
    }
    return dart.nullCheck(io._Platform._cachedOSVersion);
  }
  static get localHostname() {
    let result = io._Platform._localHostname();
    if (io.OSError.is(result)) {
      dart.throw(result);
    }
    return core.String.as(result);
  }
  static get executableArguments() {
    return io._Platform._executableArguments();
  }
  static get environment() {
    if (io._Platform._environmentCache == null) {
      let env = io._Platform._environment();
      if (!io.OSError.is(env)) {
        let isWindows = io._Platform.operatingSystem === "windows";
        let result = isWindows ? new (_CaseInsensitiveStringMapOfString()).new() : new (LinkedMapOfString$String()).new();
        for (let str of core.Iterable.as(env)) {
          if (str == null) {
            continue;
          }
          let equalsIndex = dart.dsend(str, 'indexOf', ["="]);
          if (dart.dtest(dart.dsend(equalsIndex, '>', [0]))) {
            result[$_set](core.String.as(dart.dsend(str, 'substring', [0, equalsIndex])), core.String.as(dart.dsend(str, 'substring', [dart.dsend(equalsIndex, '+', [1])])));
          }
        }
        io._Platform._environmentCache = new (UnmodifiableMapViewOfString$String()).new(result);
      } else {
        io._Platform._environmentCache = env;
      }
    }
    if (io.OSError.is(io._Platform._environmentCache)) {
      dart.throw(io._Platform._environmentCache);
    } else {
      return MapOfString$String().as(dart.nullCheck(io._Platform._environmentCache));
    }
  }
  static get version() {
    return io._Platform._version();
  }
};
(io._Platform.new = function() {
  ;
}).prototype = io._Platform.prototype;
dart.addTypeTests(io._Platform);
dart.addTypeCaches(io._Platform);
dart.setLibraryUri(io._Platform, L104);
dart.defineLazy(io._Platform, {
  /*io._Platform.executable*/get executable() {
    return core.String.as(io._Platform._executable());
  },
  set executable(_) {},
  /*io._Platform.resolvedExecutable*/get resolvedExecutable() {
    return core.String.as(io._Platform._resolvedExecutable());
  },
  set resolvedExecutable(_) {},
  /*io._Platform.packageConfig*/get packageConfig() {
    return io._Platform._packageConfig();
  },
  set packageConfig(_) {},
  /*io._Platform._localeClosure*/get _localeClosure() {
    return null;
  },
  set _localeClosure(_) {},
  /*io._Platform._environmentCache*/get _environmentCache() {
    return null;
  },
  set _environmentCache(_) {},
  /*io._Platform._cachedOSVersion*/get _cachedOSVersion() {
    return null;
  },
  set _cachedOSVersion(_) {}
}, false);
var _map$10 = dart.privateName(io, "_map");
const _is__CaseInsensitiveStringMap_default = Symbol('_is__CaseInsensitiveStringMap_default');
io._CaseInsensitiveStringMap$ = dart.generic(V => {
  var LinkedMapOfString$V = () => (LinkedMapOfString$V = dart.constFn(_js_helper.LinkedMap$(core.String, V)))();
  var VoidToV = () => (VoidToV = dart.constFn(dart.fnType(V, [])))();
  var MapOfString$V = () => (MapOfString$V = dart.constFn(core.Map$(core.String, V)))();
  var StringAndVToV = () => (StringAndVToV = dart.constFn(dart.fnType(V, [core.String, V])))();
  var VToV = () => (VToV = dart.constFn(dart.fnType(V, [V])))();
  var VoidToNV = () => (VoidToNV = dart.constFn(dart.nullable(VoidToV())))();
  class _CaseInsensitiveStringMap extends collection.MapBase$(core.String, V) {
    containsKey(key) {
      return typeof key == 'string' && dart.test(this[_map$10][$containsKey](key[$toUpperCase]()));
    }
    containsValue(value) {
      return this[_map$10][$containsValue](value);
    }
    _get(key) {
      return typeof key == 'string' ? this[_map$10][$_get](key[$toUpperCase]()) : null;
    }
    _set(key, value$) {
      let value = value$;
      core.String.as(key);
      if (key == null) dart.nullFailed(L120, 131, 28, "key");
      V.as(value);
      this[_map$10][$_set](key[$toUpperCase](), value);
      return value$;
    }
    putIfAbsent(key, ifAbsent) {
      core.String.as(key);
      if (key == null) dart.nullFailed(L120, 135, 24, "key");
      VoidToV().as(ifAbsent);
      if (ifAbsent == null) dart.nullFailed(L120, 135, 31, "ifAbsent");
      return this[_map$10][$putIfAbsent](key[$toUpperCase](), ifAbsent);
    }
    addAll(other) {
      MapOfString$V().as(other);
      if (other == null) dart.nullFailed(L120, 139, 30, "other");
      other[$forEach](dart.fn((key, value) => {
        let t188, t187;
        if (key == null) dart.nullFailed(L120, 140, 20, "key");
        t187 = key[$toUpperCase]();
        t188 = value;
        this._set(t187, t188);
        return t188;
      }, StringAndVToV()));
    }
    remove(key) {
      return typeof key == 'string' ? this[_map$10][$remove](key[$toUpperCase]()) : null;
    }
    clear() {
      this[_map$10][$clear]();
    }
    forEach(f) {
      if (f == null) dart.nullFailed(L120, 150, 21, "f");
      this[_map$10][$forEach](f);
    }
    get keys() {
      return this[_map$10][$keys];
    }
    get values() {
      return this[_map$10][$values];
    }
    get length() {
      return this[_map$10][$length];
    }
    get isEmpty() {
      return this[_map$10][$isEmpty];
    }
    get isNotEmpty() {
      return this[_map$10][$isNotEmpty];
    }
    get entries() {
      return this[_map$10][$entries];
    }
    map(K2, V2, transform) {
      if (transform == null) dart.nullFailed(L120, 162, 44, "transform");
      return this[_map$10][$map](K2, V2, transform);
    }
    update(key, update, opts) {
      core.String.as(key);
      if (key == null) dart.nullFailed(L120, 165, 19, "key");
      VToV().as(update);
      if (update == null) dart.nullFailed(L120, 165, 26, "update");
      let ifAbsent = opts && 'ifAbsent' in opts ? opts.ifAbsent : null;
      VoidToNV().as(ifAbsent);
      return this[_map$10][$update](key[$toUpperCase](), update, {ifAbsent: ifAbsent});
    }
    updateAll(update) {
      StringAndVToV().as(update);
      if (update == null) dart.nullFailed(L120, 168, 20, "update");
      this[_map$10][$updateAll](update);
    }
    removeWhere(test) {
      if (test == null) dart.nullFailed(L120, 172, 25, "test");
      this[_map$10][$removeWhere](test);
    }
    toString() {
      return dart.toString(this[_map$10]);
    }
  }
  (_CaseInsensitiveStringMap.new = function() {
    this[_map$10] = new (LinkedMapOfString$V()).new();
    ;
  }).prototype = _CaseInsensitiveStringMap.prototype;
  dart.addTypeTests(_CaseInsensitiveStringMap);
  _CaseInsensitiveStringMap.prototype[_is__CaseInsensitiveStringMap_default] = true;
  dart.addTypeCaches(_CaseInsensitiveStringMap);
  dart.setMethodSignature(_CaseInsensitiveStringMap, () => ({
    __proto__: dart.getMethods(_CaseInsensitiveStringMap.__proto__),
    _get: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
    [$_get]: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
    _set: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
    [$_set]: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
    remove: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
    [$remove]: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
    clear: dart.fnType(dart.void, []),
    [$clear]: dart.fnType(dart.void, []),
    map: dart.gFnType((K2, V2) => [core.Map$(K2, V2), [dart.fnType(core.MapEntry$(K2, V2), [core.String, V])]], (K2, V2) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    [$map]: dart.gFnType((K2, V2) => [core.Map$(K2, V2), [dart.fnType(core.MapEntry$(K2, V2), [core.String, V])]], (K2, V2) => [dart.nullable(core.Object), dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(_CaseInsensitiveStringMap, () => ({
    __proto__: dart.getGetters(_CaseInsensitiveStringMap.__proto__),
    keys: core.Iterable$(core.String),
    [$keys]: core.Iterable$(core.String)
  }));
  dart.setLibraryUri(_CaseInsensitiveStringMap, L104);
  dart.setFieldSignature(_CaseInsensitiveStringMap, () => ({
    __proto__: dart.getFields(_CaseInsensitiveStringMap.__proto__),
    [_map$10]: dart.finalFieldType(core.Map$(core.String, V))
  }));
  dart.defineExtensionMethods(_CaseInsensitiveStringMap, [
    'containsKey',
    'containsValue',
    '_get',
    '_set',
    'putIfAbsent',
    'addAll',
    'remove',
    'clear',
    'forEach',
    'map',
    'update',
    'updateAll',
    'removeWhere',
    'toString'
  ]);
  dart.defineExtensionAccessors(_CaseInsensitiveStringMap, [
    'keys',
    'values',
    'length',
    'isEmpty',
    'isNotEmpty',
    'entries'
  ]);
  return _CaseInsensitiveStringMap;
});
io._CaseInsensitiveStringMap = io._CaseInsensitiveStringMap$();
dart.addTypeTests(io._CaseInsensitiveStringMap, _is__CaseInsensitiveStringMap_default);
io._ProcessUtils = class _ProcessUtils extends core.Object {
  static _exit(status) {
    if (status == null) dart.nullFailed(L106, 306, 26, "status");
    dart.throw(new core.UnsupportedError.new("ProcessUtils._exit"));
  }
  static _setExitCode(status) {
    if (status == null) dart.nullFailed(L106, 311, 32, "status");
    dart.throw(new core.UnsupportedError.new("ProcessUtils._setExitCode"));
  }
  static _getExitCode() {
    dart.throw(new core.UnsupportedError.new("ProcessUtils._getExitCode"));
  }
  static _sleep(millis) {
    if (millis == null) dart.nullFailed(L106, 321, 26, "millis");
    dart.throw(new core.UnsupportedError.new("ProcessUtils._sleep"));
  }
  static _pid(process) {
    dart.throw(new core.UnsupportedError.new("ProcessUtils._pid"));
  }
  static _watchSignal(signal) {
    if (signal == null) dart.nullFailed(L106, 331, 59, "signal");
    dart.throw(new core.UnsupportedError.new("ProcessUtils._watchSignal"));
  }
};
(io._ProcessUtils.new = function() {
  ;
}).prototype = io._ProcessUtils.prototype;
dart.addTypeTests(io._ProcessUtils);
dart.addTypeCaches(io._ProcessUtils);
dart.setLibraryUri(io._ProcessUtils, L104);
io.ProcessInfo = class ProcessInfo extends core.Object {
  static get currentRss() {
    dart.throw(new core.UnsupportedError.new("ProcessInfo.currentRss"));
  }
  static get maxRss() {
    dart.throw(new core.UnsupportedError.new("ProcessInfo.maxRss"));
  }
};
(io.ProcessInfo.new = function() {
  ;
}).prototype = io.ProcessInfo.prototype;
dart.addTypeTests(io.ProcessInfo);
dart.addTypeCaches(io.ProcessInfo);
dart.setLibraryUri(io.ProcessInfo, L104);
var ProcessStartMode__mode = dart.privateName(io, "ProcessStartMode._mode");
var C137;
var C138;
var C139;
var C140;
var C136;
var C141;
io.ProcessStartMode = class ProcessStartMode extends core.Object {
  get [_mode]() {
    return this[_mode$0];
  }
  set [_mode](value) {
    super[_mode] = value;
  }
  static get values() {
    return C136 || CT.C136;
  }
  toString() {
    return (C141 || CT.C141)[$_get](this[_mode]);
  }
};
(io.ProcessStartMode._internal = function(_mode) {
  if (_mode == null) dart.nullFailed(L121, 175, 41, "_mode");
  this[_mode$0] = _mode;
  ;
}).prototype = io.ProcessStartMode.prototype;
dart.addTypeTests(io.ProcessStartMode);
dart.addTypeCaches(io.ProcessStartMode);
const _mode$0 = ProcessStartMode__mode;
dart.setLibraryUri(io.ProcessStartMode, L104);
dart.setFieldSignature(io.ProcessStartMode, () => ({
  __proto__: dart.getFields(io.ProcessStartMode.__proto__),
  [_mode]: dart.finalFieldType(core.int)
}));
dart.defineExtensionMethods(io.ProcessStartMode, ['toString']);
dart.defineLazy(io.ProcessStartMode, {
  /*io.ProcessStartMode.normal*/get normal() {
    return C137 || CT.C137;
  },
  /*io.ProcessStartMode.NORMAL*/get NORMAL() {
    return C137 || CT.C137;
  },
  /*io.ProcessStartMode.inheritStdio*/get inheritStdio() {
    return C138 || CT.C138;
  },
  /*io.ProcessStartMode.INHERIT_STDIO*/get INHERIT_STDIO() {
    return C138 || CT.C138;
  },
  /*io.ProcessStartMode.detached*/get detached() {
    return C139 || CT.C139;
  },
  /*io.ProcessStartMode.DETACHED*/get DETACHED() {
    return C139 || CT.C139;
  },
  /*io.ProcessStartMode.detachedWithStdio*/get detachedWithStdio() {
    return C140 || CT.C140;
  },
  /*io.ProcessStartMode.DETACHED_WITH_STDIO*/get DETACHED_WITH_STDIO() {
    return C140 || CT.C140;
  }
}, false);
var C142;
var ProcessSignal__name = dart.privateName(io, "ProcessSignal._name");
var ProcessSignal__signalNumber = dart.privateName(io, "ProcessSignal._signalNumber");
var C143;
io.Process = class Process extends core.Object {
  static start(executable, $arguments, opts) {
    if (executable == null) dart.nullFailed(L106, 352, 39, "executable");
    if ($arguments == null) dart.nullFailed(L106, 352, 64, "arguments");
    let workingDirectory = opts && 'workingDirectory' in opts ? opts.workingDirectory : null;
    let environment = opts && 'environment' in opts ? opts.environment : null;
    let includeParentEnvironment = opts && 'includeParentEnvironment' in opts ? opts.includeParentEnvironment : true;
    if (includeParentEnvironment == null) dart.nullFailed(L106, 355, 12, "includeParentEnvironment");
    let runInShell = opts && 'runInShell' in opts ? opts.runInShell : false;
    if (runInShell == null) dart.nullFailed(L106, 356, 12, "runInShell");
    let mode = opts && 'mode' in opts ? opts.mode : C137 || CT.C137;
    if (mode == null) dart.nullFailed(L106, 357, 24, "mode");
    dart.throw(new core.UnsupportedError.new("Process.start"));
  }
  static run(executable, $arguments, opts) {
    if (executable == null) dart.nullFailed(L106, 362, 43, "executable");
    if ($arguments == null) dart.nullFailed(L106, 362, 68, "arguments");
    let workingDirectory = opts && 'workingDirectory' in opts ? opts.workingDirectory : null;
    let environment = opts && 'environment' in opts ? opts.environment : null;
    let includeParentEnvironment = opts && 'includeParentEnvironment' in opts ? opts.includeParentEnvironment : true;
    if (includeParentEnvironment == null) dart.nullFailed(L106, 365, 12, "includeParentEnvironment");
    let runInShell = opts && 'runInShell' in opts ? opts.runInShell : false;
    if (runInShell == null) dart.nullFailed(L106, 366, 12, "runInShell");
    let stdoutEncoding = opts && 'stdoutEncoding' in opts ? opts.stdoutEncoding : C142 || CT.C142;
    if (stdoutEncoding == null) dart.nullFailed(L106, 367, 16, "stdoutEncoding");
    let stderrEncoding = opts && 'stderrEncoding' in opts ? opts.stderrEncoding : C142 || CT.C142;
    if (stderrEncoding == null) dart.nullFailed(L106, 368, 16, "stderrEncoding");
    dart.throw(new core.UnsupportedError.new("Process.run"));
  }
  static runSync(executable, $arguments, opts) {
    if (executable == null) dart.nullFailed(L106, 373, 39, "executable");
    if ($arguments == null) dart.nullFailed(L106, 373, 64, "arguments");
    let workingDirectory = opts && 'workingDirectory' in opts ? opts.workingDirectory : null;
    let environment = opts && 'environment' in opts ? opts.environment : null;
    let includeParentEnvironment = opts && 'includeParentEnvironment' in opts ? opts.includeParentEnvironment : true;
    if (includeParentEnvironment == null) dart.nullFailed(L106, 376, 12, "includeParentEnvironment");
    let runInShell = opts && 'runInShell' in opts ? opts.runInShell : false;
    if (runInShell == null) dart.nullFailed(L106, 377, 12, "runInShell");
    let stdoutEncoding = opts && 'stdoutEncoding' in opts ? opts.stdoutEncoding : C142 || CT.C142;
    if (stdoutEncoding == null) dart.nullFailed(L106, 378, 16, "stdoutEncoding");
    let stderrEncoding = opts && 'stderrEncoding' in opts ? opts.stderrEncoding : C142 || CT.C142;
    if (stderrEncoding == null) dart.nullFailed(L106, 379, 16, "stderrEncoding");
    dart.throw(new core.UnsupportedError.new("Process.runSync"));
  }
  static killPid(pid, signal = C143 || CT.C143) {
    if (pid == null) dart.nullFailed(L106, 384, 27, "pid");
    if (signal == null) dart.nullFailed(L106, 384, 47, "signal");
    dart.throw(new core.UnsupportedError.new("Process.killPid"));
  }
};
(io.Process.new = function() {
  ;
}).prototype = io.Process.prototype;
dart.addTypeTests(io.Process);
dart.addTypeCaches(io.Process);
dart.setLibraryUri(io.Process, L104);
var exitCode$ = dart.privateName(io, "ProcessResult.exitCode");
var stdout$ = dart.privateName(io, "ProcessResult.stdout");
var stderr$ = dart.privateName(io, "ProcessResult.stderr");
var pid$ = dart.privateName(io, "ProcessResult.pid");
io.ProcessResult = class ProcessResult extends core.Object {
  get exitCode() {
    return this[exitCode$];
  }
  set exitCode(value) {
    super.exitCode = value;
  }
  get stdout() {
    return this[stdout$];
  }
  set stdout(value) {
    super.stdout = value;
  }
  get stderr() {
    return this[stderr$];
  }
  set stderr(value) {
    super.stderr = value;
  }
  get pid() {
    return this[pid$];
  }
  set pid(value) {
    super.pid = value;
  }
};
(io.ProcessResult.new = function(pid, exitCode, stdout, stderr) {
  if (pid == null) dart.nullFailed(L121, 523, 22, "pid");
  if (exitCode == null) dart.nullFailed(L121, 523, 32, "exitCode");
  this[pid$] = pid;
  this[exitCode$] = exitCode;
  this[stdout$] = stdout;
  this[stderr$] = stderr;
  ;
}).prototype = io.ProcessResult.prototype;
dart.addTypeTests(io.ProcessResult);
dart.addTypeCaches(io.ProcessResult);
dart.setLibraryUri(io.ProcessResult, L104);
dart.setFieldSignature(io.ProcessResult, () => ({
  __proto__: dart.getFields(io.ProcessResult.__proto__),
  exitCode: dart.finalFieldType(core.int),
  stdout: dart.finalFieldType(dart.dynamic),
  stderr: dart.finalFieldType(dart.dynamic),
  pid: dart.finalFieldType(core.int)
}));
var _signalNumber = dart.privateName(io, "_signalNumber");
var C144;
var C145;
var C146;
var C147;
var C148;
var C149;
var C150;
var C151;
var C152;
var C153;
var C154;
var C155;
var C156;
var C157;
var C158;
var C159;
var C160;
var C161;
var C162;
var C163;
var C164;
var C165;
var C166;
var C167;
var C168;
var C169;
var C170;
var C171;
io.ProcessSignal = class ProcessSignal extends core.Object {
  get [_signalNumber]() {
    return this[_signalNumber$];
  }
  set [_signalNumber](value) {
    super[_signalNumber] = value;
  }
  get [_name$4]() {
    return this[_name$5];
  }
  set [_name$4](value) {
    super[_name$4] = value;
  }
  toString() {
    return this[_name$4];
  }
  watch() {
    return io._ProcessUtils._watchSignal(this);
  }
};
(io.ProcessSignal.__ = function(_signalNumber, _name) {
  if (_signalNumber == null) dart.nullFailed(L121, 627, 30, "_signalNumber");
  if (_name == null) dart.nullFailed(L121, 627, 50, "_name");
  this[_signalNumber$] = _signalNumber;
  this[_name$5] = _name;
  ;
}).prototype = io.ProcessSignal.prototype;
dart.addTypeTests(io.ProcessSignal);
dart.addTypeCaches(io.ProcessSignal);
const _signalNumber$ = ProcessSignal__signalNumber;
const _name$5 = ProcessSignal__name;
dart.setMethodSignature(io.ProcessSignal, () => ({
  __proto__: dart.getMethods(io.ProcessSignal.__proto__),
  watch: dart.fnType(async.Stream$(io.ProcessSignal), [])
}));
dart.setLibraryUri(io.ProcessSignal, L104);
dart.setFieldSignature(io.ProcessSignal, () => ({
  __proto__: dart.getFields(io.ProcessSignal.__proto__),
  [_signalNumber]: dart.finalFieldType(core.int),
  [_name$4]: dart.finalFieldType(core.String)
}));
dart.defineExtensionMethods(io.ProcessSignal, ['toString']);
dart.defineLazy(io.ProcessSignal, {
  /*io.ProcessSignal.sighup*/get sighup() {
    return C144 || CT.C144;
  },
  /*io.ProcessSignal.sigint*/get sigint() {
    return C145 || CT.C145;
  },
  /*io.ProcessSignal.sigquit*/get sigquit() {
    return C146 || CT.C146;
  },
  /*io.ProcessSignal.sigill*/get sigill() {
    return C147 || CT.C147;
  },
  /*io.ProcessSignal.sigtrap*/get sigtrap() {
    return C148 || CT.C148;
  },
  /*io.ProcessSignal.sigabrt*/get sigabrt() {
    return C149 || CT.C149;
  },
  /*io.ProcessSignal.sigbus*/get sigbus() {
    return C150 || CT.C150;
  },
  /*io.ProcessSignal.sigfpe*/get sigfpe() {
    return C151 || CT.C151;
  },
  /*io.ProcessSignal.sigkill*/get sigkill() {
    return C152 || CT.C152;
  },
  /*io.ProcessSignal.sigusr1*/get sigusr1() {
    return C153 || CT.C153;
  },
  /*io.ProcessSignal.sigsegv*/get sigsegv() {
    return C154 || CT.C154;
  },
  /*io.ProcessSignal.sigusr2*/get sigusr2() {
    return C155 || CT.C155;
  },
  /*io.ProcessSignal.sigpipe*/get sigpipe() {
    return C156 || CT.C156;
  },
  /*io.ProcessSignal.sigalrm*/get sigalrm() {
    return C157 || CT.C157;
  },
  /*io.ProcessSignal.sigterm*/get sigterm() {
    return C143 || CT.C143;
  },
  /*io.ProcessSignal.sigchld*/get sigchld() {
    return C158 || CT.C158;
  },
  /*io.ProcessSignal.sigcont*/get sigcont() {
    return C159 || CT.C159;
  },
  /*io.ProcessSignal.sigstop*/get sigstop() {
    return C160 || CT.C160;
  },
  /*io.ProcessSignal.sigtstp*/get sigtstp() {
    return C161 || CT.C161;
  },
  /*io.ProcessSignal.sigttin*/get sigttin() {
    return C162 || CT.C162;
  },
  /*io.ProcessSignal.sigttou*/get sigttou() {
    return C163 || CT.C163;
  },
  /*io.ProcessSignal.sigurg*/get sigurg() {
    return C164 || CT.C164;
  },
  /*io.ProcessSignal.sigxcpu*/get sigxcpu() {
    return C165 || CT.C165;
  },
  /*io.ProcessSignal.sigxfsz*/get sigxfsz() {
    return C166 || CT.C166;
  },
  /*io.ProcessSignal.sigvtalrm*/get sigvtalrm() {
    return C167 || CT.C167;
  },
  /*io.ProcessSignal.sigprof*/get sigprof() {
    return C168 || CT.C168;
  },
  /*io.ProcessSignal.sigwinch*/get sigwinch() {
    return C169 || CT.C169;
  },
  /*io.ProcessSignal.sigpoll*/get sigpoll() {
    return C170 || CT.C170;
  },
  /*io.ProcessSignal.sigsys*/get sigsys() {
    return C171 || CT.C171;
  },
  /*io.ProcessSignal.SIGHUP*/get SIGHUP() {
    return C144 || CT.C144;
  },
  /*io.ProcessSignal.SIGINT*/get SIGINT() {
    return C145 || CT.C145;
  },
  /*io.ProcessSignal.SIGQUIT*/get SIGQUIT() {
    return C146 || CT.C146;
  },
  /*io.ProcessSignal.SIGILL*/get SIGILL() {
    return C147 || CT.C147;
  },
  /*io.ProcessSignal.SIGTRAP*/get SIGTRAP() {
    return C148 || CT.C148;
  },
  /*io.ProcessSignal.SIGABRT*/get SIGABRT() {
    return C149 || CT.C149;
  },
  /*io.ProcessSignal.SIGBUS*/get SIGBUS() {
    return C150 || CT.C150;
  },
  /*io.ProcessSignal.SIGFPE*/get SIGFPE() {
    return C151 || CT.C151;
  },
  /*io.ProcessSignal.SIGKILL*/get SIGKILL() {
    return C152 || CT.C152;
  },
  /*io.ProcessSignal.SIGUSR1*/get SIGUSR1() {
    return C153 || CT.C153;
  },
  /*io.ProcessSignal.SIGSEGV*/get SIGSEGV() {
    return C154 || CT.C154;
  },
  /*io.ProcessSignal.SIGUSR2*/get SIGUSR2() {
    return C155 || CT.C155;
  },
  /*io.ProcessSignal.SIGPIPE*/get SIGPIPE() {
    return C156 || CT.C156;
  },
  /*io.ProcessSignal.SIGALRM*/get SIGALRM() {
    return C157 || CT.C157;
  },
  /*io.ProcessSignal.SIGTERM*/get SIGTERM() {
    return C143 || CT.C143;
  },
  /*io.ProcessSignal.SIGCHLD*/get SIGCHLD() {
    return C158 || CT.C158;
  },
  /*io.ProcessSignal.SIGCONT*/get SIGCONT() {
    return C159 || CT.C159;
  },
  /*io.ProcessSignal.SIGSTOP*/get SIGSTOP() {
    return C160 || CT.C160;
  },
  /*io.ProcessSignal.SIGTSTP*/get SIGTSTP() {
    return C161 || CT.C161;
  },
  /*io.ProcessSignal.SIGTTIN*/get SIGTTIN() {
    return C162 || CT.C162;
  },
  /*io.ProcessSignal.SIGTTOU*/get SIGTTOU() {
    return C163 || CT.C163;
  },
  /*io.ProcessSignal.SIGURG*/get SIGURG() {
    return C164 || CT.C164;
  },
  /*io.ProcessSignal.SIGXCPU*/get SIGXCPU() {
    return C165 || CT.C165;
  },
  /*io.ProcessSignal.SIGXFSZ*/get SIGXFSZ() {
    return C166 || CT.C166;
  },
  /*io.ProcessSignal.SIGVTALRM*/get SIGVTALRM() {
    return C167 || CT.C167;
  },
  /*io.ProcessSignal.SIGPROF*/get SIGPROF() {
    return C168 || CT.C168;
  },
  /*io.ProcessSignal.SIGWINCH*/get SIGWINCH() {
    return C169 || CT.C169;
  },
  /*io.ProcessSignal.SIGPOLL*/get SIGPOLL() {
    return C170 || CT.C170;
  },
  /*io.ProcessSignal.SIGSYS*/get SIGSYS() {
    return C171 || CT.C171;
  }
}, false);
var message$4 = dart.privateName(io, "SignalException.message");
var osError$0 = dart.privateName(io, "SignalException.osError");
io.SignalException = class SignalException extends core.Object {
  get message() {
    return this[message$4];
  }
  set message(value) {
    super.message = value;
  }
  get osError() {
    return this[osError$0];
  }
  set osError(value) {
    super.osError = value;
  }
  toString() {
    let msg = "";
    if (this.osError != null) {
      msg = dart.str(", osError: ") + dart.str(this.osError);
    }
    return dart.str("SignalException: ") + dart.str(this.message) + dart.str(msg);
  }
};
(io.SignalException.new = function(message, osError = null) {
  if (message == null) dart.nullFailed(L121, 655, 30, "message");
  this[message$4] = message;
  this[osError$0] = osError;
  ;
}).prototype = io.SignalException.prototype;
dart.addTypeTests(io.SignalException);
dart.addTypeCaches(io.SignalException);
io.SignalException[dart.implements] = () => [io.IOException];
dart.setLibraryUri(io.SignalException, L104);
dart.setFieldSignature(io.SignalException, () => ({
  __proto__: dart.getFields(io.SignalException.__proto__),
  message: dart.finalFieldType(core.String),
  osError: dart.finalFieldType(dart.dynamic)
}));
dart.defineExtensionMethods(io.SignalException, ['toString']);
var executable$ = dart.privateName(io, "ProcessException.executable");
var arguments$ = dart.privateName(io, "ProcessException.arguments");
var message$5 = dart.privateName(io, "ProcessException.message");
var errorCode$1 = dart.privateName(io, "ProcessException.errorCode");
io.ProcessException = class ProcessException extends core.Object {
  get executable() {
    return this[executable$];
  }
  set executable(value) {
    super.executable = value;
  }
  get arguments() {
    return this[arguments$];
  }
  set arguments(value) {
    super.arguments = value;
  }
  get message() {
    return this[message$5];
  }
  set message(value) {
    super.message = value;
  }
  get errorCode() {
    return this[errorCode$1];
  }
  set errorCode(value) {
    super.errorCode = value;
  }
  toString() {
    let args = this.arguments[$join](" ");
    return dart.str("ProcessException: ") + dart.str(this.message) + dart.str("\n  Command: ") + dart.str(this.executable) + dart.str(" ") + dart.str(args);
  }
};
(io.ProcessException.new = function(executable, $arguments, message = "", errorCode = 0) {
  if (executable == null) dart.nullFailed(L121, 687, 31, "executable");
  if ($arguments == null) dart.nullFailed(L121, 687, 48, "arguments");
  if (message == null) dart.nullFailed(L121, 688, 13, "message");
  if (errorCode == null) dart.nullFailed(L121, 688, 32, "errorCode");
  this[executable$] = executable;
  this[arguments$] = $arguments;
  this[message$5] = message;
  this[errorCode$1] = errorCode;
  ;
}).prototype = io.ProcessException.prototype;
dart.addTypeTests(io.ProcessException);
dart.addTypeCaches(io.ProcessException);
io.ProcessException[dart.implements] = () => [io.IOException];
dart.setLibraryUri(io.ProcessException, L104);
dart.setFieldSignature(io.ProcessException, () => ({
  __proto__: dart.getFields(io.ProcessException.__proto__),
  executable: dart.finalFieldType(core.String),
  arguments: dart.finalFieldType(core.List$(core.String)),
  message: dart.finalFieldType(core.String),
  errorCode: dart.finalFieldType(core.int)
}));
dart.defineExtensionMethods(io.ProcessException, ['toString']);
var _socket$ = dart.privateName(io, "_socket");
var _owner = dart.privateName(io, "_owner");
var _onCancel$ = dart.privateName(io, "_onCancel");
var _detachRaw = dart.privateName(io, "_detachRaw");
io.SecureSocket = class SecureSocket extends core.Object {
  static connect(host, port, opts) {
    if (port == null) dart.nullFailed(L123, 44, 49, "port");
    let context = opts && 'context' in opts ? opts.context : null;
    let onBadCertificate = opts && 'onBadCertificate' in opts ? opts.onBadCertificate : null;
    let supportedProtocols = opts && 'supportedProtocols' in opts ? opts.supportedProtocols : null;
    let timeout = opts && 'timeout' in opts ? opts.timeout : null;
    return io.RawSecureSocket.connect(host, port, {context: context, onBadCertificate: onBadCertificate, supportedProtocols: supportedProtocols, timeout: timeout}).then(io.SecureSocket, dart.fn(rawSocket => {
      if (rawSocket == null) dart.nullFailed(L123, 54, 16, "rawSocket");
      return io.SecureSocket.__(rawSocket);
    }, RawSecureSocketToSecureSocket()));
  }
  static startConnect(host, port, opts) {
    if (port == null) dart.nullFailed(L123, 60, 70, "port");
    let context = opts && 'context' in opts ? opts.context : null;
    let onBadCertificate = opts && 'onBadCertificate' in opts ? opts.onBadCertificate : null;
    let supportedProtocols = opts && 'supportedProtocols' in opts ? opts.supportedProtocols : null;
    return io.RawSecureSocket.startConnect(host, port, {context: context, onBadCertificate: onBadCertificate, supportedProtocols: supportedProtocols}).then(ConnectionTaskOfSecureSocket(), dart.fn(rawState => {
      if (rawState == null) dart.nullFailed(L123, 68, 16, "rawState");
      let socket = rawState.socket.then(io.SecureSocket, dart.fn(rawSocket => {
        if (rawSocket == null) dart.nullFailed(L123, 70, 33, "rawSocket");
        return io.SecureSocket.__(rawSocket);
      }, RawSecureSocketToSecureSocket()));
      return new (ConnectionTaskOfSecureSocket()).__(socket, rawState[_onCancel$]);
    }, ConnectionTaskOfRawSecureSocketToConnectionTaskOfSecureSocket()));
  }
  static secure(socket, opts) {
    if (socket == null) dart.nullFailed(L123, 108, 45, "socket");
    let host = opts && 'host' in opts ? opts.host : null;
    let context = opts && 'context' in opts ? opts.context : null;
    let onBadCertificate = opts && 'onBadCertificate' in opts ? opts.onBadCertificate : null;
    let supportedProtocols = opts && 'supportedProtocols' in opts ? opts.supportedProtocols : null;
    return async.Future.as(dart.dsend(socket, _detachRaw, [])).then(io.RawSecureSocket, dart.fn(detachedRaw => io.RawSecureSocket.secure(io.RawSocket.as(dart.dsend(detachedRaw, '_get', [0])), {subscription: StreamSubscriptionNOfRawSocketEvent().as(dart.dsend(detachedRaw, '_get', [1])), host: host, context: context, onBadCertificate: onBadCertificate, supportedProtocols: supportedProtocols}), dynamicToFutureOfRawSecureSocket())).then(io.SecureSocket, dart.fn(raw => {
      if (raw == null) dart.nullFailed(L123, 121, 28, "raw");
      return io.SecureSocket.__(raw);
    }, RawSecureSocketToSecureSocket()));
  }
  static secureServer(socket, context, opts) {
    if (socket == null) dart.nullFailed(L123, 146, 14, "socket");
    let bufferedData = opts && 'bufferedData' in opts ? opts.bufferedData : null;
    let requestClientCertificate = opts && 'requestClientCertificate' in opts ? opts.requestClientCertificate : false;
    if (requestClientCertificate == null) dart.nullFailed(L123, 148, 12, "requestClientCertificate");
    let requireClientCertificate = opts && 'requireClientCertificate' in opts ? opts.requireClientCertificate : false;
    if (requireClientCertificate == null) dart.nullFailed(L123, 149, 12, "requireClientCertificate");
    let supportedProtocols = opts && 'supportedProtocols' in opts ? opts.supportedProtocols : null;
    return async.Future.as(dart.dsend(socket, _detachRaw, [])).then(io.RawSecureSocket, dart.fn(detachedRaw => io.RawSecureSocket.secureServer(io.RawSocket.as(dart.dsend(detachedRaw, '_get', [0])), context, {subscription: StreamSubscriptionNOfRawSocketEvent().as(dart.dsend(detachedRaw, '_get', [1])), bufferedData: bufferedData, requestClientCertificate: requestClientCertificate, requireClientCertificate: requireClientCertificate, supportedProtocols: supportedProtocols}), dynamicToFutureOfRawSecureSocket())).then(io.SecureSocket, dart.fn(raw => {
      if (raw == null) dart.nullFailed(L123, 159, 28, "raw");
      return io.SecureSocket.__(raw);
    }, RawSecureSocketToSecureSocket()));
  }
};
(io.SecureSocket[dart.mixinNew] = function() {
}).prototype = io.SecureSocket.prototype;
dart.addTypeTests(io.SecureSocket);
dart.addTypeCaches(io.SecureSocket);
io.SecureSocket[dart.implements] = () => [io.Socket];
dart.setLibraryUri(io.SecureSocket, L104);
io.SecureServerSocket = class SecureServerSocket extends async.Stream$(io.SecureSocket) {
  static bind(address, port, context, opts) {
    if (port == null) dart.nullFailed(L122, 70, 20, "port");
    let backlog = opts && 'backlog' in opts ? opts.backlog : 0;
    if (backlog == null) dart.nullFailed(L122, 71, 12, "backlog");
    let v6Only = opts && 'v6Only' in opts ? opts.v6Only : false;
    if (v6Only == null) dart.nullFailed(L122, 72, 12, "v6Only");
    let requestClientCertificate = opts && 'requestClientCertificate' in opts ? opts.requestClientCertificate : false;
    if (requestClientCertificate == null) dart.nullFailed(L122, 73, 12, "requestClientCertificate");
    let requireClientCertificate = opts && 'requireClientCertificate' in opts ? opts.requireClientCertificate : false;
    if (requireClientCertificate == null) dart.nullFailed(L122, 74, 12, "requireClientCertificate");
    let supportedProtocols = opts && 'supportedProtocols' in opts ? opts.supportedProtocols : null;
    let shared = opts && 'shared' in opts ? opts.shared : false;
    if (shared == null) dart.nullFailed(L122, 76, 12, "shared");
    return io.RawSecureServerSocket.bind(address, port, context, {backlog: backlog, v6Only: v6Only, requestClientCertificate: requestClientCertificate, requireClientCertificate: requireClientCertificate, supportedProtocols: supportedProtocols, shared: shared}).then(io.SecureServerSocket, dart.fn(serverSocket => {
      if (serverSocket == null) dart.nullFailed(L122, 84, 16, "serverSocket");
      return new io.SecureServerSocket.__(serverSocket);
    }, RawSecureServerSocketToSecureServerSocket()));
  }
  listen(onData, opts) {
    let onError = opts && 'onError' in opts ? opts.onError : null;
    let onDone = opts && 'onDone' in opts ? opts.onDone : null;
    let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
    return this[_socket$].map(io.SecureSocket, dart.fn(rawSocket => {
      if (rawSocket == null) dart.nullFailed(L122, 89, 25, "rawSocket");
      return io.SecureSocket.__(rawSocket);
    }, RawSecureSocketToSecureSocket())).listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
  }
  get port() {
    return this[_socket$].port;
  }
  get address() {
    return this[_socket$].address;
  }
  close() {
    return this[_socket$].close().then(io.SecureServerSocket, dart.fn(_ => {
      if (_ == null) dart.nullFailed(L122, 110, 63, "_");
      return this;
    }, RawSecureServerSocketToSecureServerSocket()));
  }
  set [_owner](owner) {
    this[_socket$][_owner] = owner;
  }
};
(io.SecureServerSocket.__ = function(_socket) {
  if (_socket == null) dart.nullFailed(L122, 16, 29, "_socket");
  this[_socket$] = _socket;
  io.SecureServerSocket.__proto__.new.call(this);
  ;
}).prototype = io.SecureServerSocket.prototype;
dart.addTypeTests(io.SecureServerSocket);
dart.addTypeCaches(io.SecureServerSocket);
dart.setMethodSignature(io.SecureServerSocket, () => ({
  __proto__: dart.getMethods(io.SecureServerSocket.__proto__),
  listen: dart.fnType(async.StreamSubscription$(io.SecureSocket), [dart.nullable(dart.fnType(dart.void, [io.SecureSocket]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {}),
  close: dart.fnType(async.Future$(io.SecureServerSocket), [])
}));
dart.setGetterSignature(io.SecureServerSocket, () => ({
  __proto__: dart.getGetters(io.SecureServerSocket.__proto__),
  port: core.int,
  address: io.InternetAddress
}));
dart.setSetterSignature(io.SecureServerSocket, () => ({
  __proto__: dart.getSetters(io.SecureServerSocket.__proto__),
  [_owner]: dart.dynamic
}));
dart.setLibraryUri(io.SecureServerSocket, L104);
dart.setFieldSignature(io.SecureServerSocket, () => ({
  __proto__: dart.getFields(io.SecureServerSocket.__proto__),
  [_socket$]: dart.finalFieldType(io.RawSecureServerSocket)
}));
var __RawSecureServerSocket__controller = dart.privateName(io, "_#RawSecureServerSocket#_controller");
var _subscription$ = dart.privateName(io, "_subscription");
var _context$ = dart.privateName(io, "_context");
var _onSubscriptionStateChange = dart.privateName(io, "_onSubscriptionStateChange");
var _onPauseStateChange = dart.privateName(io, "_onPauseStateChange");
var _onData$0 = dart.privateName(io, "_onData");
io.RawSecureSocket = class RawSecureSocket extends core.Object {
  static connect(host, port, opts) {
    if (port == null) dart.nullFailed(L123, 227, 52, "port");
    let context = opts && 'context' in opts ? opts.context : null;
    let onBadCertificate = opts && 'onBadCertificate' in opts ? opts.onBadCertificate : null;
    let supportedProtocols = opts && 'supportedProtocols' in opts ? opts.supportedProtocols : null;
    let timeout = opts && 'timeout' in opts ? opts.timeout : null;
    io._RawSecureSocket._verifyFields(host, port, false, false);
    return io.RawSocket.connect(host, port, {timeout: timeout}).then(io.RawSecureSocket, dart.fn(socket => {
      if (socket == null) dart.nullFailed(L123, 233, 66, "socket");
      return io.RawSecureSocket.secure(socket, {context: context, onBadCertificate: onBadCertificate, supportedProtocols: supportedProtocols});
    }, RawSocketToFutureOfRawSecureSocket()));
  }
  static startConnect(host, port, opts) {
    if (port == null) dart.nullFailed(L123, 244, 73, "port");
    let context = opts && 'context' in opts ? opts.context : null;
    let onBadCertificate = opts && 'onBadCertificate' in opts ? opts.onBadCertificate : null;
    let supportedProtocols = opts && 'supportedProtocols' in opts ? opts.supportedProtocols : null;
    return io.RawSocket.startConnect(host, port).then(ConnectionTaskOfRawSecureSocket(), dart.fn(rawState => {
      if (rawState == null) dart.nullFailed(L123, 249, 42, "rawState");
      let socket = rawState.socket.then(io.RawSecureSocket, dart.fn(rawSocket => {
        if (rawSocket == null) dart.nullFailed(L123, 250, 62, "rawSocket");
        return io.RawSecureSocket.secure(rawSocket, {context: context, onBadCertificate: onBadCertificate, supportedProtocols: supportedProtocols});
      }, RawSocketToFutureOfRawSecureSocket()));
      return new (ConnectionTaskOfRawSecureSocket()).__(socket, rawState[_onCancel$]);
    }, ConnectionTaskOfRawSocketToConnectionTaskOfRawSecureSocket()));
  }
  static secure(socket, opts) {
    if (socket == null) dart.nullFailed(L123, 293, 51, "socket");
    let subscription = opts && 'subscription' in opts ? opts.subscription : null;
    let host = opts && 'host' in opts ? opts.host : null;
    let context = opts && 'context' in opts ? opts.context : null;
    let onBadCertificate = opts && 'onBadCertificate' in opts ? opts.onBadCertificate : null;
    let supportedProtocols = opts && 'supportedProtocols' in opts ? opts.supportedProtocols : null;
    socket.readEventsEnabled = false;
    socket.writeEventsEnabled = false;
    return io._RawSecureSocket.connect(host != null ? host : socket.address.host, socket.port, false, socket, {subscription: subscription, context: context, onBadCertificate: onBadCertificate, supportedProtocols: supportedProtocols});
  }
  static secureServer(socket, context, opts) {
    if (socket == null) dart.nullFailed(L123, 333, 17, "socket");
    let subscription = opts && 'subscription' in opts ? opts.subscription : null;
    let bufferedData = opts && 'bufferedData' in opts ? opts.bufferedData : null;
    let requestClientCertificate = opts && 'requestClientCertificate' in opts ? opts.requestClientCertificate : false;
    if (requestClientCertificate == null) dart.nullFailed(L123, 336, 12, "requestClientCertificate");
    let requireClientCertificate = opts && 'requireClientCertificate' in opts ? opts.requireClientCertificate : false;
    if (requireClientCertificate == null) dart.nullFailed(L123, 337, 12, "requireClientCertificate");
    let supportedProtocols = opts && 'supportedProtocols' in opts ? opts.supportedProtocols : null;
    socket.readEventsEnabled = false;
    socket.writeEventsEnabled = false;
    return io._RawSecureSocket.connect(socket.address, socket.remotePort, true, socket, {context: context, subscription: subscription, bufferedData: bufferedData, requestClientCertificate: requestClientCertificate, requireClientCertificate: requireClientCertificate, supportedProtocols: supportedProtocols});
  }
};
(io.RawSecureSocket.new = function() {
  ;
}).prototype = io.RawSecureSocket.prototype;
dart.addTypeTests(io.RawSecureSocket);
dart.addTypeCaches(io.RawSecureSocket);
io.RawSecureSocket[dart.implements] = () => [io.RawSocket];
dart.setLibraryUri(io.RawSecureSocket, L104);
var requestClientCertificate$ = dart.privateName(io, "RawSecureServerSocket.requestClientCertificate");
var requireClientCertificate$ = dart.privateName(io, "RawSecureServerSocket.requireClientCertificate");
var supportedProtocols$ = dart.privateName(io, "RawSecureServerSocket.supportedProtocols");
io.RawSecureServerSocket = class RawSecureServerSocket extends async.Stream$(io.RawSecureSocket) {
  get requestClientCertificate() {
    return this[requestClientCertificate$];
  }
  set requestClientCertificate(value) {
    super.requestClientCertificate = value;
  }
  get requireClientCertificate() {
    return this[requireClientCertificate$];
  }
  set requireClientCertificate(value) {
    super.requireClientCertificate = value;
  }
  get supportedProtocols() {
    return this[supportedProtocols$];
  }
  set supportedProtocols(value) {
    super.supportedProtocols = value;
  }
  get [_controller]() {
    let t187;
    t187 = this[__RawSecureServerSocket__controller];
    return t187 == null ? dart.throw(new _internal.LateInitializationErrorImpl.new("Field '_controller' has not been initialized.")) : t187;
  }
  set [_controller](t187) {
    if (t187 == null) dart.nullFailed(L122, 125, 42, "null");
    this[__RawSecureServerSocket__controller] = t187;
  }
  static bind(address, port, context, opts) {
    if (port == null) dart.nullFailed(L122, 198, 20, "port");
    let backlog = opts && 'backlog' in opts ? opts.backlog : 0;
    if (backlog == null) dart.nullFailed(L122, 199, 12, "backlog");
    let v6Only = opts && 'v6Only' in opts ? opts.v6Only : false;
    if (v6Only == null) dart.nullFailed(L122, 200, 12, "v6Only");
    let requestClientCertificate = opts && 'requestClientCertificate' in opts ? opts.requestClientCertificate : false;
    if (requestClientCertificate == null) dart.nullFailed(L122, 201, 12, "requestClientCertificate");
    let requireClientCertificate = opts && 'requireClientCertificate' in opts ? opts.requireClientCertificate : false;
    if (requireClientCertificate == null) dart.nullFailed(L122, 202, 12, "requireClientCertificate");
    let supportedProtocols = opts && 'supportedProtocols' in opts ? opts.supportedProtocols : null;
    let shared = opts && 'shared' in opts ? opts.shared : false;
    if (shared == null) dart.nullFailed(L122, 204, 12, "shared");
    return io.RawServerSocket.bind(address, port, {backlog: backlog, v6Only: v6Only, shared: shared}).then(io.RawSecureServerSocket, dart.fn(serverSocket => {
      if (serverSocket == null) dart.nullFailed(L122, 207, 16, "serverSocket");
      return new io.RawSecureServerSocket.__(serverSocket, context, requestClientCertificate, requireClientCertificate, supportedProtocols);
    }, RawServerSocketToRawSecureServerSocket()));
  }
  listen(onData, opts) {
    let onError = opts && 'onError' in opts ? opts.onError : null;
    let onDone = opts && 'onDone' in opts ? opts.onDone : null;
    let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
    return this[_controller].stream.listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
  }
  get port() {
    return this[_socket$].port;
  }
  get address() {
    return this[_socket$].address;
  }
  close() {
    this[_closed] = true;
    return this[_socket$].close().then(io.RawSecureServerSocket, dart.fn(_ => {
      if (_ == null) dart.nullFailed(L122, 237, 34, "_");
      return this;
    }, RawServerSocketToRawSecureServerSocket()));
  }
  [_onData$0](connection) {
    if (connection == null) dart.nullFailed(L122, 240, 26, "connection");
    let remotePort = null;
    try {
      remotePort = connection.remotePort;
    } catch (e$) {
      let e = dart.getThrown(e$);
      if (core.Object.is(e)) {
        return;
      } else
        throw e$;
    }
    io._RawSecureSocket.connect(connection.address, remotePort, true, connection, {context: this[_context$], requestClientCertificate: this.requestClientCertificate, requireClientCertificate: this.requireClientCertificate, supportedProtocols: this.supportedProtocols}).then(core.Null, dart.fn(secureConnection => {
      if (secureConnection == null) dart.nullFailed(L122, 254, 32, "secureConnection");
      if (dart.test(this[_closed])) {
        secureConnection.close();
      } else {
        this[_controller].add(secureConnection);
      }
    }, RawSecureSocketToNullN())).catchError(dart.fn((e, s) => {
      if (!dart.test(this[_closed])) {
        this[_controller].addError(core.Object.as(e), StackTraceN().as(s));
      }
    }, dynamicAnddynamicToNullN()));
  }
  [_onPauseStateChange]() {
    if (dart.test(this[_controller].isPaused)) {
      dart.nullCheck(this[_subscription$]).pause();
    } else {
      dart.nullCheck(this[_subscription$]).resume();
    }
  }
  [_onSubscriptionStateChange]() {
    if (dart.test(this[_controller].hasListener)) {
      this[_subscription$] = this[_socket$].listen(dart.bind(this, _onData$0), {onError: dart.bind(this[_controller], 'addError'), onDone: dart.bind(this[_controller], 'close')});
    } else {
      this.close();
    }
  }
  set [_owner](owner) {
    dart.dput(this[_socket$], _owner, owner);
  }
};
(io.RawSecureServerSocket.__ = function(_socket, _context, requestClientCertificate, requireClientCertificate, supportedProtocols) {
  if (_socket == null) dart.nullFailed(L122, 134, 12, "_socket");
  if (requestClientCertificate == null) dart.nullFailed(L122, 136, 12, "requestClientCertificate");
  if (requireClientCertificate == null) dart.nullFailed(L122, 137, 12, "requireClientCertificate");
  this[__RawSecureServerSocket__controller] = null;
  this[_subscription$] = null;
  this[_closed] = false;
  this[_socket$] = _socket;
  this[_context$] = _context;
  this[requestClientCertificate$] = requestClientCertificate;
  this[requireClientCertificate$] = requireClientCertificate;
  this[supportedProtocols$] = supportedProtocols;
  io.RawSecureServerSocket.__proto__.new.call(this);
  this[_controller] = StreamControllerOfRawSecureSocket().new({sync: true, onListen: dart.bind(this, _onSubscriptionStateChange), onPause: dart.bind(this, _onPauseStateChange), onResume: dart.bind(this, _onPauseStateChange), onCancel: dart.bind(this, _onSubscriptionStateChange)});
}).prototype = io.RawSecureServerSocket.prototype;
dart.addTypeTests(io.RawSecureServerSocket);
dart.addTypeCaches(io.RawSecureServerSocket);
dart.setMethodSignature(io.RawSecureServerSocket, () => ({
  __proto__: dart.getMethods(io.RawSecureServerSocket.__proto__),
  listen: dart.fnType(async.StreamSubscription$(io.RawSecureSocket), [dart.nullable(dart.fnType(dart.void, [io.RawSecureSocket]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {}),
  close: dart.fnType(async.Future$(io.RawSecureServerSocket), []),
  [_onData$0]: dart.fnType(dart.void, [io.RawSocket]),
  [_onPauseStateChange]: dart.fnType(dart.void, []),
  [_onSubscriptionStateChange]: dart.fnType(dart.void, [])
}));
dart.setGetterSignature(io.RawSecureServerSocket, () => ({
  __proto__: dart.getGetters(io.RawSecureServerSocket.__proto__),
  [_controller]: async.StreamController$(io.RawSecureSocket),
  port: core.int,
  address: io.InternetAddress
}));
dart.setSetterSignature(io.RawSecureServerSocket, () => ({
  __proto__: dart.getSetters(io.RawSecureServerSocket.__proto__),
  [_controller]: async.StreamController$(io.RawSecureSocket),
  [_owner]: dart.dynamic
}));
dart.setLibraryUri(io.RawSecureServerSocket, L104);
dart.setFieldSignature(io.RawSecureServerSocket, () => ({
  __proto__: dart.getFields(io.RawSecureServerSocket.__proto__),
  [_socket$]: dart.finalFieldType(io.RawServerSocket),
  [__RawSecureServerSocket__controller]: dart.fieldType(dart.nullable(async.StreamController$(io.RawSecureSocket))),
  [_subscription$]: dart.fieldType(dart.nullable(async.StreamSubscription$(io.RawSocket))),
  [_context$]: dart.finalFieldType(dart.nullable(io.SecurityContext)),
  requestClientCertificate: dart.finalFieldType(core.bool),
  requireClientCertificate: dart.finalFieldType(core.bool),
  supportedProtocols: dart.finalFieldType(dart.nullable(core.List$(core.String))),
  [_closed]: dart.fieldType(core.bool)
}));
io.X509Certificate = class X509Certificate extends core.Object {};
(io.X509Certificate[dart.mixinNew] = function() {
}).prototype = io.X509Certificate.prototype;
dart.addTypeTests(io.X509Certificate);
dart.addTypeCaches(io.X509Certificate);
dart.setLibraryUri(io.X509Certificate, L104);
io._FilterStatus = class _FilterStatus extends core.Object {};
(io._FilterStatus.new = function() {
  this.progress = false;
  this.readEmpty = true;
  this.writeEmpty = true;
  this.readPlaintextNoLongerEmpty = false;
  this.writePlaintextNoLongerFull = false;
  this.readEncryptedNoLongerFull = false;
  this.writeEncryptedNoLongerEmpty = false;
  ;
}).prototype = io._FilterStatus.prototype;
dart.addTypeTests(io._FilterStatus);
dart.addTypeCaches(io._FilterStatus);
dart.setLibraryUri(io._FilterStatus, L104);
dart.setFieldSignature(io._FilterStatus, () => ({
  __proto__: dart.getFields(io._FilterStatus.__proto__),
  progress: dart.fieldType(core.bool),
  readEmpty: dart.fieldType(core.bool),
  writeEmpty: dart.fieldType(core.bool),
  readPlaintextNoLongerEmpty: dart.fieldType(core.bool),
  writePlaintextNoLongerFull: dart.fieldType(core.bool),
  readEncryptedNoLongerFull: dart.fieldType(core.bool),
  writeEncryptedNoLongerEmpty: dart.fieldType(core.bool)
}));
var _handshakeComplete = dart.privateName(io, "_handshakeComplete");
var ___RawSecureSocket__socketSubscription = dart.privateName(io, "_#_RawSecureSocket#_socketSubscription");
var _bufferedDataIndex = dart.privateName(io, "_bufferedDataIndex");
var _status = dart.privateName(io, "_status");
var _writeEventsEnabled = dart.privateName(io, "_writeEventsEnabled");
var _readEventsEnabled = dart.privateName(io, "_readEventsEnabled");
var _pauseCount = dart.privateName(io, "_pauseCount");
var _pendingReadEvent = dart.privateName(io, "_pendingReadEvent");
var _socketClosedRead = dart.privateName(io, "_socketClosedRead");
var _socketClosedWrite = dart.privateName(io, "_socketClosedWrite");
var _closedRead = dart.privateName(io, "_closedRead");
var _closedWrite = dart.privateName(io, "_closedWrite");
var _filterStatus = dart.privateName(io, "_filterStatus");
var _connectPending = dart.privateName(io, "_connectPending");
var _filterPending = dart.privateName(io, "_filterPending");
var _filterActive = dart.privateName(io, "_filterActive");
var _secureFilter = dart.privateName(io, "_secureFilter");
var _selectedProtocol = dart.privateName(io, "_selectedProtocol");
var _bufferedData$ = dart.privateName(io, "_bufferedData");
var _secureHandshakeCompleteHandler = dart.privateName(io, "_secureHandshakeCompleteHandler");
var _onBadCertificateWrapper = dart.privateName(io, "_onBadCertificateWrapper");
var _socketSubscription = dart.privateName(io, "_socketSubscription");
var _eventDispatcher = dart.privateName(io, "_eventDispatcher");
var _reportError = dart.privateName(io, "_reportError");
var _doneHandler = dart.privateName(io, "_doneHandler");
var _secureHandshake = dart.privateName(io, "_secureHandshake");
var _sendWriteEvent = dart.privateName(io, "_sendWriteEvent");
var _completeCloseCompleter = dart.privateName(io, "_completeCloseCompleter");
var _close$ = dart.privateName(io, "_close");
var _scheduleReadEvent = dart.privateName(io, "_scheduleReadEvent");
var _scheduleFilter = dart.privateName(io, "_scheduleFilter");
var _readHandler = dart.privateName(io, "_readHandler");
var _writeHandler = dart.privateName(io, "_writeHandler");
var _closeHandler = dart.privateName(io, "_closeHandler");
var _readSocket = dart.privateName(io, "_readSocket");
var _writeSocket = dart.privateName(io, "_writeSocket");
var _tryFilter = dart.privateName(io, "_tryFilter");
var _pushAllFilterStages = dart.privateName(io, "_pushAllFilterStages");
var _readSocketOrBufferedData = dart.privateName(io, "_readSocketOrBufferedData");
var _sendReadEvent = dart.privateName(io, "_sendReadEvent");
var _value$ = dart.privateName(io, "_value");
var C172;
var _value$0 = dart.privateName(io, "RawSocketEvent._value");
var C173;
var C174;
var C175;
var C176;
io.RawSocketEvent = class RawSocketEvent extends core.Object {
  get [_value$]() {
    return this[_value$0];
  }
  set [_value$](value) {
    super[_value$] = value;
  }
  toString() {
    return (C172 || CT.C172)[$_get](this[_value$]);
  }
};
(io.RawSocketEvent.__ = function(_value) {
  if (_value == null) dart.nullFailed(L124, 590, 31, "_value");
  this[_value$0] = _value;
  ;
}).prototype = io.RawSocketEvent.prototype;
dart.addTypeTests(io.RawSocketEvent);
dart.addTypeCaches(io.RawSocketEvent);
dart.setLibraryUri(io.RawSocketEvent, L104);
dart.setFieldSignature(io.RawSocketEvent, () => ({
  __proto__: dart.getFields(io.RawSocketEvent.__proto__),
  [_value$]: dart.finalFieldType(core.int)
}));
dart.defineExtensionMethods(io.RawSocketEvent, ['toString']);
dart.defineLazy(io.RawSocketEvent, {
  /*io.RawSocketEvent.read*/get read() {
    return C173 || CT.C173;
  },
  /*io.RawSocketEvent.write*/get write() {
    return C174 || CT.C174;
  },
  /*io.RawSocketEvent.readClosed*/get readClosed() {
    return C175 || CT.C175;
  },
  /*io.RawSocketEvent.closed*/get closed() {
    return C176 || CT.C176;
  },
  /*io.RawSocketEvent.READ*/get READ() {
    return C173 || CT.C173;
  },
  /*io.RawSocketEvent.WRITE*/get WRITE() {
    return C174 || CT.C174;
  },
  /*io.RawSocketEvent.READ_CLOSED*/get READ_CLOSED() {
    return C175 || CT.C175;
  },
  /*io.RawSocketEvent.CLOSED*/get CLOSED() {
    return C176 || CT.C176;
  }
}, false);
io._RawSecureSocket = class _RawSecureSocket extends async.Stream$(io.RawSocketEvent) {
  static _isBufferEncrypted(identifier) {
    if (identifier == null) dart.nullFailed(L123, 435, 38, "identifier");
    return dart.notNull(identifier) >= 2;
  }
  get [_socketSubscription]() {
    let t190;
    t190 = this[___RawSecureSocket__socketSubscription];
    return t190 == null ? dart.throw(new _internal.LateInitializationErrorImpl.new("Field '_socketSubscription' has not been initialized.")) : t190;
  }
  set [_socketSubscription](t190) {
    if (t190 == null) dart.nullFailed(L123, 442, 49, "null");
    if (this[___RawSecureSocket__socketSubscription] == null)
      this[___RawSecureSocket__socketSubscription] = t190;
    else
      dart.throw(new _internal.LateInitializationErrorImpl.new("Field '_socketSubscription' has already been initialized."));
  }
  static connect(host, requestedPort, isServer, socket, opts) {
    let t191;
    if (requestedPort == null) dart.nullFailed(L123, 473, 11, "requestedPort");
    if (isServer == null) dart.nullFailed(L123, 474, 12, "isServer");
    if (socket == null) dart.nullFailed(L123, 475, 17, "socket");
    let context = opts && 'context' in opts ? opts.context : null;
    let subscription = opts && 'subscription' in opts ? opts.subscription : null;
    let bufferedData = opts && 'bufferedData' in opts ? opts.bufferedData : null;
    let requestClientCertificate = opts && 'requestClientCertificate' in opts ? opts.requestClientCertificate : false;
    if (requestClientCertificate == null) dart.nullFailed(L123, 479, 12, "requestClientCertificate");
    let requireClientCertificate = opts && 'requireClientCertificate' in opts ? opts.requireClientCertificate : false;
    if (requireClientCertificate == null) dart.nullFailed(L123, 480, 12, "requireClientCertificate");
    let onBadCertificate = opts && 'onBadCertificate' in opts ? opts.onBadCertificate : null;
    let supportedProtocols = opts && 'supportedProtocols' in opts ? opts.supportedProtocols : null;
    io._RawSecureSocket._verifyFields(host, requestedPort, requestClientCertificate, requireClientCertificate);
    if (io.InternetAddress.is(host)) host = host.host;
    let address = socket.address;
    if (host != null) {
      address = io.InternetAddress._cloneWithNewHost(address, core.String.as(host));
    }
    return new io._RawSecureSocket.new(address, requestedPort, isServer, (t191 = context, t191 == null ? io.SecurityContext.defaultContext : t191), socket, subscription, bufferedData, requestClientCertificate, requireClientCertificate, onBadCertificate, supportedProtocols)[_handshakeComplete].future;
  }
  listen(onData, opts) {
    let onError = opts && 'onError' in opts ? opts.onError : null;
    let onDone = opts && 'onDone' in opts ? opts.onDone : null;
    let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
    this[_sendWriteEvent]();
    return this[_controller].stream.listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
  }
  static _verifyFields(host, requestedPort, requestClientCertificate, requireClientCertificate) {
    if (requestedPort == null) dart.nullFailed(L123, 579, 39, "requestedPort");
    if (requestClientCertificate == null) dart.nullFailed(L123, 580, 12, "requestClientCertificate");
    if (requireClientCertificate == null) dart.nullFailed(L123, 580, 43, "requireClientCertificate");
    if (!(typeof host == 'string') && !io.InternetAddress.is(host)) {
      dart.throw(new core.ArgumentError.new("host is not a String or an InternetAddress"));
    }
    core.ArgumentError.checkNotNull(core.int, requestedPort, "requestedPort");
    if (dart.notNull(requestedPort) < 0 || dart.notNull(requestedPort) > 65535) {
      dart.throw(new core.ArgumentError.new("requestedPort is not in the range 0..65535"));
    }
    core.ArgumentError.checkNotNull(core.bool, requestClientCertificate, "requestClientCertificate");
    core.ArgumentError.checkNotNull(core.bool, requireClientCertificate, "requireClientCertificate");
  }
  get port() {
    return this[_socket$].port;
  }
  get remoteAddress() {
    return this[_socket$].remoteAddress;
  }
  get remotePort() {
    return this[_socket$].remotePort;
  }
  set [_owner](owner) {
    dart.dput(this[_socket$], _owner, owner);
  }
  available() {
    return this[_status] !== 202 ? 0 : dart.nullCheck(dart.nullCheck(this[_secureFilter]).buffers)[$_get](0).length;
  }
  close() {
    this.shutdown(io.SocketDirection.both);
    return this[_closeCompleter].future;
  }
  [_completeCloseCompleter](dummy = null) {
    if (!dart.test(this[_closeCompleter].isCompleted)) this[_closeCompleter].complete(this);
  }
  [_close$]() {
    this[_closedWrite] = true;
    this[_closedRead] = true;
    this[_socket$].close().then(dart.void, dart.bind(this, _completeCloseCompleter));
    this[_socketClosedWrite] = true;
    this[_socketClosedRead] = true;
    if (!dart.test(this[_filterActive]) && this[_secureFilter] != null) {
      dart.nullCheck(this[_secureFilter]).destroy();
      this[_secureFilter] = null;
    }
    if (this[_socketSubscription] != null) {
      this[_socketSubscription].cancel();
    }
    this[_controller].close();
    this[_status] = 203;
  }
  shutdown(direction) {
    if (direction == null) dart.nullFailed(L123, 638, 33, "direction");
    if (dart.equals(direction, io.SocketDirection.send) || dart.equals(direction, io.SocketDirection.both)) {
      this[_closedWrite] = true;
      if (dart.test(this[_filterStatus].writeEmpty)) {
        this[_socket$].shutdown(io.SocketDirection.send);
        this[_socketClosedWrite] = true;
        if (dart.test(this[_closedRead])) {
          this[_close$]();
        }
      }
    }
    if (dart.equals(direction, io.SocketDirection.receive) || dart.equals(direction, io.SocketDirection.both)) {
      this[_closedRead] = true;
      this[_socketClosedRead] = true;
      this[_socket$].shutdown(io.SocketDirection.receive);
      if (dart.test(this[_socketClosedWrite])) {
        this[_close$]();
      }
    }
  }
  get writeEventsEnabled() {
    return this[_writeEventsEnabled];
  }
  set writeEventsEnabled(value) {
    if (value == null) dart.nullFailed(L123, 663, 36, "value");
    this[_writeEventsEnabled] = value;
    if (dart.test(value)) {
      async.Timer.run(dart.fn(() => this[_sendWriteEvent](), VoidTodynamic()));
    }
  }
  get readEventsEnabled() {
    return this[_readEventsEnabled];
  }
  set readEventsEnabled(value) {
    if (value == null) dart.nullFailed(L123, 672, 35, "value");
    this[_readEventsEnabled] = value;
    this[_scheduleReadEvent]();
  }
  read(length = null) {
    if (length != null && dart.notNull(length) < 0) {
      dart.throw(new core.ArgumentError.new(dart.str("Invalid length parameter in SecureSocket.read (length: ") + dart.str(length) + dart.str(")")));
    }
    if (dart.test(this[_closedRead])) {
      dart.throw(new io.SocketException.new("Reading from a closed socket"));
    }
    if (this[_status] !== 202) {
      return null;
    }
    let result = dart.nullCheck(dart.nullCheck(this[_secureFilter]).buffers)[$_get](0).read(length);
    this[_scheduleFilter]();
    return result;
  }
  static _fixOffset(offset) {
    let t191;
    t191 = offset;
    return t191 == null ? 0 : t191;
  }
  write(data, offset = 0, bytes = null) {
    if (data == null) dart.nullFailed(L123, 696, 23, "data");
    if (offset == null) dart.nullFailed(L123, 696, 34, "offset");
    if (bytes != null && dart.notNull(bytes) < 0) {
      dart.throw(new core.ArgumentError.new(dart.str("Invalid bytes parameter in SecureSocket.read (bytes: ") + dart.str(bytes) + dart.str(")")));
    }
    offset = io._RawSecureSocket._fixOffset(offset);
    if (dart.notNull(offset) < 0) {
      dart.throw(new core.ArgumentError.new(dart.str("Invalid offset parameter in SecureSocket.read (offset: ") + dart.str(offset) + dart.str(")")));
    }
    if (dart.test(this[_closedWrite])) {
      this[_controller].addError(new io.SocketException.new("Writing to a closed socket"));
      return 0;
    }
    if (this[_status] !== 202) return 0;
    bytes == null ? bytes = dart.notNull(data[$length]) - dart.notNull(offset) : null;
    let written = dart.nullCheck(dart.nullCheck(this[_secureFilter]).buffers)[$_get](1).write(data, offset, bytes);
    if (dart.notNull(written) > 0) {
      this[_filterStatus].writeEmpty = false;
    }
    this[_scheduleFilter]();
    return written;
  }
  get peerCertificate() {
    return dart.nullCheck(this[_secureFilter]).peerCertificate;
  }
  get selectedProtocol() {
    return this[_selectedProtocol];
  }
  [_onBadCertificateWrapper](certificate) {
    if (certificate == null) dart.nullFailed(L123, 727, 49, "certificate");
    if (this.onBadCertificate == null) return false;
    return dart.nullCheck(this.onBadCertificate)(certificate);
  }
  setOption(option, enabled) {
    if (option == null) dart.nullFailed(L123, 732, 31, "option");
    if (enabled == null) dart.nullFailed(L123, 732, 44, "enabled");
    return this[_socket$].setOption(option, enabled);
  }
  getRawOption(option) {
    if (option == null) dart.nullFailed(L123, 736, 42, "option");
    return this[_socket$].getRawOption(option);
  }
  setRawOption(option) {
    if (option == null) dart.nullFailed(L123, 740, 37, "option");
    this[_socket$].setRawOption(option);
  }
  [_eventDispatcher](event) {
    if (event == null) dart.nullFailed(L123, 744, 40, "event");
    try {
      if (dart.equals(event, io.RawSocketEvent.read)) {
        this[_readHandler]();
      } else if (dart.equals(event, io.RawSocketEvent.write)) {
        this[_writeHandler]();
      } else if (dart.equals(event, io.RawSocketEvent.readClosed)) {
        this[_closeHandler]();
      }
    } catch (e$) {
      let e = dart.getThrown(e$);
      let stackTrace = dart.stackTrace(e$);
      if (core.Object.is(e)) {
        this[_reportError](e, stackTrace);
      } else
        throw e$;
    }
  }
  [_readHandler]() {
    this[_readSocket]();
    this[_scheduleFilter]();
  }
  [_writeHandler]() {
    this[_writeSocket]();
    this[_scheduleFilter]();
  }
  [_doneHandler]() {
    if (dart.test(this[_filterStatus].readEmpty)) {
      this[_close$]();
    }
  }
  [_reportError](e, stackTrace = null) {
    if (this[_status] === 203) {
      return;
    } else if (dart.test(this[_connectPending])) {
      this[_handshakeComplete].completeError(core.Object.as(e), stackTrace);
    } else {
      this[_controller].addError(core.Object.as(e), stackTrace);
    }
    this[_close$]();
  }
  [_closeHandler]() {
    if (this[_status] === 202) {
      if (dart.test(this[_closedRead])) return;
      this[_socketClosedRead] = true;
      if (dart.test(this[_filterStatus].readEmpty)) {
        this[_closedRead] = true;
        this[_controller].add(io.RawSocketEvent.readClosed);
        if (dart.test(this[_socketClosedWrite])) {
          this[_close$]();
        }
      } else {
        this[_scheduleFilter]();
      }
    } else if (this[_status] === 201) {
      this[_socketClosedRead] = true;
      if (dart.test(this[_filterStatus].readEmpty)) {
        this[_reportError](new io.HandshakeException.new("Connection terminated during handshake"), null);
      } else {
        this[_secureHandshake]();
      }
    }
  }
  [_secureHandshake]() {
    try {
      dart.nullCheck(this[_secureFilter]).handshake();
      this[_filterStatus].writeEmpty = false;
      this[_readSocket]();
      this[_writeSocket]();
      this[_scheduleFilter]();
    } catch (e$) {
      let e = dart.getThrown(e$);
      let stackTrace = dart.stackTrace(e$);
      if (core.Object.is(e)) {
        this[_reportError](e, stackTrace);
      } else
        throw e$;
    }
  }
  renegotiate(opts) {
    let useSessionCache = opts && 'useSessionCache' in opts ? opts.useSessionCache : true;
    if (useSessionCache == null) dart.nullFailed(L123, 826, 13, "useSessionCache");
    let requestClientCertificate = opts && 'requestClientCertificate' in opts ? opts.requestClientCertificate : false;
    if (requestClientCertificate == null) dart.nullFailed(L123, 827, 12, "requestClientCertificate");
    let requireClientCertificate = opts && 'requireClientCertificate' in opts ? opts.requireClientCertificate : false;
    if (requireClientCertificate == null) dart.nullFailed(L123, 828, 12, "requireClientCertificate");
    if (this[_status] !== 202) {
      dart.throw(new io.HandshakeException.new("Called renegotiate on a non-connected socket"));
    }
    dart.nullCheck(this[_secureFilter]).renegotiate(useSessionCache, requestClientCertificate, requireClientCertificate);
    this[_status] = 201;
    this[_filterStatus].writeEmpty = false;
    this[_scheduleFilter]();
  }
  [_secureHandshakeCompleteHandler]() {
    this[_status] = 202;
    if (dart.test(this[_connectPending])) {
      this[_connectPending] = false;
      try {
        this[_selectedProtocol] = dart.nullCheck(this[_secureFilter]).selectedProtocol();
        async.Timer.run(dart.fn(() => this[_handshakeComplete].complete(this), VoidTovoid()));
      } catch (e) {
        let error = dart.getThrown(e);
        let stack = dart.stackTrace(e);
        if (core.Object.is(error)) {
          this[_handshakeComplete].completeError(error, stack);
        } else
          throw e;
      }
    }
  }
  [_onPauseStateChange]() {
    if (dart.test(this[_controller].isPaused)) {
      this[_pauseCount] = dart.notNull(this[_pauseCount]) + 1;
    } else {
      this[_pauseCount] = dart.notNull(this[_pauseCount]) - 1;
      if (this[_pauseCount] === 0) {
        this[_scheduleReadEvent]();
        this[_sendWriteEvent]();
      }
    }
    if (!dart.test(this[_socketClosedRead]) || !dart.test(this[_socketClosedWrite])) {
      if (dart.test(this[_controller].isPaused)) {
        this[_socketSubscription].pause();
      } else {
        this[_socketSubscription].resume();
      }
    }
  }
  [_onSubscriptionStateChange]() {
    if (dart.test(this[_controller].hasListener)) {
    }
  }
  [_scheduleFilter]() {
    this[_filterPending] = true;
    this[_tryFilter]();
  }
  [_tryFilter]() {
    if (this[_status] === 203) {
      return;
    }
    if (dart.test(this[_filterPending]) && !dart.test(this[_filterActive])) {
      this[_filterActive] = true;
      this[_filterPending] = false;
      this[_pushAllFilterStages]().then(core.Null, dart.fn(status => {
        if (status == null) dart.nullFailed(L123, 892, 36, "status");
        this[_filterStatus] = status;
        this[_filterActive] = false;
        if (this[_status] === 203) {
          dart.nullCheck(this[_secureFilter]).destroy();
          this[_secureFilter] = null;
          return;
        }
        this[_socket$].readEventsEnabled = true;
        if (dart.test(this[_filterStatus].writeEmpty) && dart.test(this[_closedWrite]) && !dart.test(this[_socketClosedWrite])) {
          this.shutdown(io.SocketDirection.send);
          if (this[_status] === 203) {
            return;
          }
        }
        if (dart.test(this[_filterStatus].readEmpty) && dart.test(this[_socketClosedRead]) && !dart.test(this[_closedRead])) {
          if (this[_status] === 201) {
            dart.nullCheck(this[_secureFilter]).handshake();
            if (this[_status] === 201) {
              dart.throw(new io.HandshakeException.new("Connection terminated during handshake"));
            }
          }
          this[_closeHandler]();
        }
        if (this[_status] === 203) {
          return;
        }
        if (dart.test(this[_filterStatus].progress)) {
          this[_filterPending] = true;
          if (dart.test(this[_filterStatus].writeEncryptedNoLongerEmpty)) {
            this[_writeSocket]();
          }
          if (dart.test(this[_filterStatus].writePlaintextNoLongerFull)) {
            this[_sendWriteEvent]();
          }
          if (dart.test(this[_filterStatus].readEncryptedNoLongerFull)) {
            this[_readSocket]();
          }
          if (dart.test(this[_filterStatus].readPlaintextNoLongerEmpty)) {
            this[_scheduleReadEvent]();
          }
          if (this[_status] === 201) {
            this[_secureHandshake]();
          }
        }
        this[_tryFilter]();
      }, _FilterStatusToNullN())).catchError(dart.bind(this, _reportError));
    }
  }
  [_readSocketOrBufferedData](bytes) {
    if (bytes == null) dart.nullFailed(L123, 944, 44, "bytes");
    let bufferedData = this[_bufferedData$];
    if (bufferedData != null) {
      if (dart.notNull(bytes) > dart.notNull(bufferedData[$length]) - dart.notNull(this[_bufferedDataIndex])) {
        bytes = dart.notNull(bufferedData[$length]) - dart.notNull(this[_bufferedDataIndex]);
      }
      let result = bufferedData[$sublist](this[_bufferedDataIndex], dart.notNull(this[_bufferedDataIndex]) + dart.notNull(bytes));
      this[_bufferedDataIndex] = dart.notNull(this[_bufferedDataIndex]) + dart.notNull(bytes);
      if (bufferedData[$length] == this[_bufferedDataIndex]) {
        this[_bufferedData$] = null;
      }
      return result;
    } else if (!dart.test(this[_socketClosedRead])) {
      return this[_socket$].read(bytes);
    } else {
      return null;
    }
  }
  [_readSocket]() {
    if (this[_status] === 203) return;
    let buffer = dart.nullCheck(dart.nullCheck(this[_secureFilter]).buffers)[$_get](2);
    if (dart.notNull(buffer.writeFromSource(dart.bind(this, _readSocketOrBufferedData))) > 0) {
      this[_filterStatus].readEmpty = false;
    } else {
      this[_socket$].readEventsEnabled = false;
    }
  }
  [_writeSocket]() {
    if (dart.test(this[_socketClosedWrite])) return;
    let buffer = dart.nullCheck(dart.nullCheck(this[_secureFilter]).buffers)[$_get](3);
    if (dart.test(buffer.readToSocket(this[_socket$]))) {
      this[_socket$].writeEventsEnabled = true;
    }
  }
  [_scheduleReadEvent]() {
    if (!dart.test(this[_pendingReadEvent]) && dart.test(this[_readEventsEnabled]) && this[_pauseCount] === 0 && this[_secureFilter] != null && !dart.test(dart.nullCheck(dart.nullCheck(this[_secureFilter]).buffers)[$_get](0).isEmpty)) {
      this[_pendingReadEvent] = true;
      async.Timer.run(dart.bind(this, _sendReadEvent));
    }
  }
  [_sendReadEvent]() {
    this[_pendingReadEvent] = false;
    if (this[_status] !== 203 && dart.test(this[_readEventsEnabled]) && this[_pauseCount] === 0 && this[_secureFilter] != null && !dart.test(dart.nullCheck(dart.nullCheck(this[_secureFilter]).buffers)[$_get](0).isEmpty)) {
      this[_controller].add(io.RawSocketEvent.read);
      this[_scheduleReadEvent]();
    }
  }
  [_sendWriteEvent]() {
    if (!dart.test(this[_closedWrite]) && dart.test(this[_writeEventsEnabled]) && this[_pauseCount] === 0 && this[_secureFilter] != null && dart.notNull(dart.nullCheck(dart.nullCheck(this[_secureFilter]).buffers)[$_get](1).free) > 0) {
      this[_writeEventsEnabled] = false;
      this[_controller].add(io.RawSocketEvent.write);
    }
  }
  [_pushAllFilterStages]() {
    let wasInHandshake = this[_status] !== 202;
    let args = core.List.filled(2 + 4 * 2, null);
    args[$_set](0, dart.nullCheck(this[_secureFilter])[_pointer]());
    args[$_set](1, wasInHandshake);
    let bufs = dart.nullCheck(dart.nullCheck(this[_secureFilter]).buffers);
    for (let i = 0; i < 4; i = i + 1) {
      args[$_set](2 * i + 2, bufs[$_get](i).start);
      args[$_set](2 * i + 3, bufs[$_get](i).end);
    }
    return io._IOService._dispatch(42, args).then(io._FilterStatus, dart.fn(response => {
      if (dart.equals(dart.dload(response, 'length'), 2)) {
        if (wasInHandshake) {
          this[_reportError](new io.HandshakeException.new(dart.str(dart.dsend(response, '_get', [1])) + dart.str(" error ") + dart.str(dart.dsend(response, '_get', [0]))), null);
        } else {
          this[_reportError](new io.TlsException.new(dart.str(dart.dsend(response, '_get', [1])) + dart.str(" error ") + dart.str(dart.dsend(response, '_get', [0]))), null);
        }
      }
      function start(index) {
        if (index == null) dart.nullFailed(L123, 1044, 21, "index");
        return core.int.as(dart.dsend(response, '_get', [2 * dart.notNull(index)]));
      }
      dart.fn(start, intToint());
      function end(index) {
        if (index == null) dart.nullFailed(L123, 1045, 19, "index");
        return core.int.as(dart.dsend(response, '_get', [2 * dart.notNull(index) + 1]));
      }
      dart.fn(end, intToint());
      let status = new io._FilterStatus.new();
      status.writeEmpty = dart.test(bufs[$_get](1).isEmpty) && start(3) == end(3);
      if (wasInHandshake) status.writeEmpty = false;
      status.readEmpty = dart.test(bufs[$_get](2).isEmpty) && start(0) == end(0);
      let buffer = bufs[$_get](1);
      let new_start = start(1);
      if (new_start != buffer.start) {
        status.progress = true;
        if (buffer.free === 0) {
          status.writePlaintextNoLongerFull = true;
        }
        buffer.start = new_start;
      }
      buffer = bufs[$_get](2);
      new_start = start(2);
      if (new_start != buffer.start) {
        status.progress = true;
        if (buffer.free === 0) {
          status.readEncryptedNoLongerFull = true;
        }
        buffer.start = new_start;
      }
      buffer = bufs[$_get](3);
      let new_end = end(3);
      if (new_end != buffer.end) {
        status.progress = true;
        if (buffer.length === 0) {
          status.writeEncryptedNoLongerEmpty = true;
        }
        buffer.end = new_end;
      }
      buffer = bufs[$_get](0);
      new_end = end(0);
      if (new_end != buffer.end) {
        status.progress = true;
        if (buffer.length === 0) {
          status.readPlaintextNoLongerEmpty = true;
        }
        buffer.end = new_end;
      }
      return status;
    }, dynamicTo_FilterStatus()));
  }
};
(io._RawSecureSocket.new = function(address, requestedPort, isServer, context, _socket, subscription, _bufferedData, requestClientCertificate, requireClientCertificate, onBadCertificate, supportedProtocols) {
  let t189, t189$;
  if (address == null) dart.nullFailed(L123, 507, 12, "address");
  if (requestedPort == null) dart.nullFailed(L123, 508, 11, "requestedPort");
  if (isServer == null) dart.nullFailed(L123, 509, 12, "isServer");
  if (context == null) dart.nullFailed(L123, 510, 12, "context");
  if (_socket == null) dart.nullFailed(L123, 511, 12, "_socket");
  if (requestClientCertificate == null) dart.nullFailed(L123, 514, 12, "requestClientCertificate");
  if (requireClientCertificate == null) dart.nullFailed(L123, 515, 12, "requireClientCertificate");
  this[_handshakeComplete] = CompleterOf_RawSecureSocket().new();
  this[_controller] = StreamControllerOfRawSocketEvent().new({sync: true});
  this[___RawSecureSocket__socketSubscription] = null;
  this[_bufferedDataIndex] = 0;
  this[_status] = 201;
  this[_writeEventsEnabled] = true;
  this[_readEventsEnabled] = true;
  this[_pauseCount] = 0;
  this[_pendingReadEvent] = false;
  this[_socketClosedRead] = false;
  this[_socketClosedWrite] = false;
  this[_closedRead] = false;
  this[_closedWrite] = false;
  this[_closeCompleter] = CompleterOfRawSecureSocket().new();
  this[_filterStatus] = new io._FilterStatus.new();
  this[_connectPending] = true;
  this[_filterPending] = false;
  this[_filterActive] = false;
  this[_secureFilter] = io._SecureFilter.__();
  this[_selectedProtocol] = null;
  this.address = address;
  this.isServer = isServer;
  this.context = context;
  this[_socket$] = _socket;
  this[_bufferedData$] = _bufferedData;
  this.requestClientCertificate = requestClientCertificate;
  this.requireClientCertificate = requireClientCertificate;
  this.onBadCertificate = onBadCertificate;
  io._RawSecureSocket.__proto__.new.call(this);
  t189 = this[_controller];
  (() => {
    t189.onListen = dart.bind(this, _onSubscriptionStateChange);
    t189.onPause = dart.bind(this, _onPauseStateChange);
    t189.onResume = dart.bind(this, _onPauseStateChange);
    t189.onCancel = dart.bind(this, _onSubscriptionStateChange);
    return t189;
  })();
  let secureFilter = dart.nullCheck(this[_secureFilter]);
  secureFilter.init();
  secureFilter.registerHandshakeCompleteCallback(dart.bind(this, _secureHandshakeCompleteHandler));
  if (this.onBadCertificate != null) {
    secureFilter.registerBadCertificateCallback(dart.bind(this, _onBadCertificateWrapper));
  }
  this[_socket$].readEventsEnabled = true;
  this[_socket$].writeEventsEnabled = false;
  if (subscription == null) {
    this[_socketSubscription] = this[_socket$].listen(dart.bind(this, _eventDispatcher), {onError: dart.bind(this, _reportError), onDone: dart.bind(this, _doneHandler)});
  } else {
    this[_socketSubscription] = subscription;
    if (dart.test(this[_socketSubscription].isPaused)) {
      this[_socket$].close();
      dart.throw(new core.ArgumentError.new("Subscription passed to TLS upgrade is paused"));
    }
    let s = this[_socket$];
    if (dart.dtest(dart.dload(dart.dload(s, _socket$), 'closedReadEventSent'))) {
      this[_eventDispatcher](io.RawSocketEvent.readClosed);
    }
    t189$ = this[_socketSubscription];
    (() => {
      t189$.onData(dart.bind(this, _eventDispatcher));
      t189$.onError(dart.bind(this, _reportError));
      t189$.onDone(dart.bind(this, _doneHandler));
      return t189$;
    })();
  }
  try {
    let encodedProtocols = io.SecurityContext._protocolsToLengthEncoding(supportedProtocols);
    secureFilter.connect(this.address.host, this.context, this.isServer, dart.test(this.requestClientCertificate) || dart.test(this.requireClientCertificate), this.requireClientCertificate, encodedProtocols);
    this[_secureHandshake]();
  } catch (e$) {
    let e = dart.getThrown(e$);
    let s = dart.stackTrace(e$);
    if (core.Object.is(e)) {
      this[_reportError](e, s);
    } else
      throw e$;
  }
}).prototype = io._RawSecureSocket.prototype;
dart.addTypeTests(io._RawSecureSocket);
dart.addTypeCaches(io._RawSecureSocket);
io._RawSecureSocket[dart.implements] = () => [io.RawSecureSocket];
dart.setMethodSignature(io._RawSecureSocket, () => ({
  __proto__: dart.getMethods(io._RawSecureSocket.__proto__),
  listen: dart.fnType(async.StreamSubscription$(io.RawSocketEvent), [dart.nullable(dart.fnType(dart.void, [io.RawSocketEvent]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {}),
  available: dart.fnType(core.int, []),
  close: dart.fnType(async.Future$(io.RawSecureSocket), []),
  [_completeCloseCompleter]: dart.fnType(dart.void, [], [dart.nullable(io.RawSocket)]),
  [_close$]: dart.fnType(dart.void, []),
  shutdown: dart.fnType(dart.void, [io.SocketDirection]),
  read: dart.fnType(dart.nullable(typed_data.Uint8List), [], [dart.nullable(core.int)]),
  write: dart.fnType(core.int, [core.List$(core.int)], [core.int, dart.nullable(core.int)]),
  [_onBadCertificateWrapper]: dart.fnType(core.bool, [io.X509Certificate]),
  setOption: dart.fnType(core.bool, [io.SocketOption, core.bool]),
  getRawOption: dart.fnType(typed_data.Uint8List, [io.RawSocketOption]),
  setRawOption: dart.fnType(dart.void, [io.RawSocketOption]),
  [_eventDispatcher]: dart.fnType(dart.void, [io.RawSocketEvent]),
  [_readHandler]: dart.fnType(dart.void, []),
  [_writeHandler]: dart.fnType(dart.void, []),
  [_doneHandler]: dart.fnType(dart.void, []),
  [_reportError]: dart.fnType(dart.void, [dart.dynamic], [dart.nullable(core.StackTrace)]),
  [_closeHandler]: dart.fnType(dart.void, []),
  [_secureHandshake]: dart.fnType(dart.void, []),
  renegotiate: dart.fnType(dart.void, [], {requestClientCertificate: core.bool, requireClientCertificate: core.bool, useSessionCache: core.bool}, {}),
  [_secureHandshakeCompleteHandler]: dart.fnType(dart.void, []),
  [_onPauseStateChange]: dart.fnType(dart.void, []),
  [_onSubscriptionStateChange]: dart.fnType(dart.void, []),
  [_scheduleFilter]: dart.fnType(dart.void, []),
  [_tryFilter]: dart.fnType(dart.void, []),
  [_readSocketOrBufferedData]: dart.fnType(dart.nullable(core.List$(core.int)), [core.int]),
  [_readSocket]: dart.fnType(dart.void, []),
  [_writeSocket]: dart.fnType(dart.void, []),
  [_scheduleReadEvent]: dart.fnType(dart.dynamic, []),
  [_sendReadEvent]: dart.fnType(dart.dynamic, []),
  [_sendWriteEvent]: dart.fnType(dart.dynamic, []),
  [_pushAllFilterStages]: dart.fnType(async.Future$(io._FilterStatus), [])
}));
dart.setGetterSignature(io._RawSecureSocket, () => ({
  __proto__: dart.getGetters(io._RawSecureSocket.__proto__),
  [_socketSubscription]: async.StreamSubscription$(io.RawSocketEvent),
  port: core.int,
  remoteAddress: io.InternetAddress,
  remotePort: core.int,
  writeEventsEnabled: core.bool,
  readEventsEnabled: core.bool,
  peerCertificate: dart.nullable(io.X509Certificate),
  selectedProtocol: dart.nullable(core.String)
}));
dart.setSetterSignature(io._RawSecureSocket, () => ({
  __proto__: dart.getSetters(io._RawSecureSocket.__proto__),
  [_socketSubscription]: async.StreamSubscription$(io.RawSocketEvent),
  [_owner]: dart.dynamic,
  writeEventsEnabled: core.bool,
  readEventsEnabled: core.bool
}));
dart.setLibraryUri(io._RawSecureSocket, L104);
dart.setFieldSignature(io._RawSecureSocket, () => ({
  __proto__: dart.getFields(io._RawSecureSocket.__proto__),
  [_socket$]: dart.finalFieldType(io.RawSocket),
  [_handshakeComplete]: dart.finalFieldType(async.Completer$(io._RawSecureSocket)),
  [_controller]: dart.finalFieldType(async.StreamController$(io.RawSocketEvent)),
  [___RawSecureSocket__socketSubscription]: dart.fieldType(dart.nullable(async.StreamSubscription$(io.RawSocketEvent))),
  [_bufferedData$]: dart.fieldType(dart.nullable(core.List$(core.int))),
  [_bufferedDataIndex]: dart.fieldType(core.int),
  address: dart.finalFieldType(io.InternetAddress),
  isServer: dart.finalFieldType(core.bool),
  context: dart.finalFieldType(io.SecurityContext),
  requestClientCertificate: dart.finalFieldType(core.bool),
  requireClientCertificate: dart.finalFieldType(core.bool),
  onBadCertificate: dart.finalFieldType(dart.nullable(dart.fnType(core.bool, [io.X509Certificate]))),
  [_status]: dart.fieldType(core.int),
  [_writeEventsEnabled]: dart.fieldType(core.bool),
  [_readEventsEnabled]: dart.fieldType(core.bool),
  [_pauseCount]: dart.fieldType(core.int),
  [_pendingReadEvent]: dart.fieldType(core.bool),
  [_socketClosedRead]: dart.fieldType(core.bool),
  [_socketClosedWrite]: dart.fieldType(core.bool),
  [_closedRead]: dart.fieldType(core.bool),
  [_closedWrite]: dart.fieldType(core.bool),
  [_closeCompleter]: dart.fieldType(async.Completer$(io.RawSecureSocket)),
  [_filterStatus]: dart.fieldType(io._FilterStatus),
  [_connectPending]: dart.fieldType(core.bool),
  [_filterPending]: dart.fieldType(core.bool),
  [_filterActive]: dart.fieldType(core.bool),
  [_secureFilter]: dart.fieldType(dart.nullable(io._SecureFilter)),
  [_selectedProtocol]: dart.fieldType(dart.nullable(core.String))
}));
dart.defineLazy(io._RawSecureSocket, {
  /*io._RawSecureSocket.handshakeStatus*/get handshakeStatus() {
    return 201;
  },
  /*io._RawSecureSocket.connectedStatus*/get connectedStatus() {
    return 202;
  },
  /*io._RawSecureSocket.closedStatus*/get closedStatus() {
    return 203;
  },
  /*io._RawSecureSocket.readPlaintextId*/get readPlaintextId() {
    return 0;
  },
  /*io._RawSecureSocket.writePlaintextId*/get writePlaintextId() {
    return 1;
  },
  /*io._RawSecureSocket.readEncryptedId*/get readEncryptedId() {
    return 2;
  },
  /*io._RawSecureSocket.writeEncryptedId*/get writeEncryptedId() {
    return 3;
  },
  /*io._RawSecureSocket.bufferCount*/get bufferCount() {
    return 4;
  }
}, false);
io._ExternalBuffer = class _ExternalBuffer extends core.Object {
  advanceStart(bytes) {
    if (bytes == null) dart.nullFailed(L123, 1125, 25, "bytes");
    if (!(dart.notNull(this.start) > dart.notNull(this.end) || dart.notNull(this.start) + dart.notNull(bytes) <= dart.notNull(this.end))) dart.assertFailed(null, L123, 1126, 12, "start > end || start + bytes <= end");
    this.start = dart.notNull(this.start) + dart.notNull(bytes);
    if (dart.notNull(this.start) >= dart.notNull(this.size)) {
      this.start = dart.notNull(this.start) - dart.notNull(this.size);
      if (!(dart.notNull(this.start) <= dart.notNull(this.end))) dart.assertFailed(null, L123, 1130, 14, "start <= end");
      if (!(dart.notNull(this.start) < dart.notNull(this.size))) dart.assertFailed(null, L123, 1131, 14, "start < size");
    }
  }
  advanceEnd(bytes) {
    if (bytes == null) dart.nullFailed(L123, 1135, 23, "bytes");
    if (!(dart.notNull(this.start) <= dart.notNull(this.end) || dart.notNull(this.start) > dart.notNull(this.end) + dart.notNull(bytes))) dart.assertFailed(null, L123, 1136, 12, "start <= end || start > end + bytes");
    this.end = dart.notNull(this.end) + dart.notNull(bytes);
    if (dart.notNull(this.end) >= dart.notNull(this.size)) {
      this.end = dart.notNull(this.end) - dart.notNull(this.size);
      if (!(dart.notNull(this.end) < dart.notNull(this.start))) dart.assertFailed(null, L123, 1140, 14, "end < start");
      if (!(dart.notNull(this.end) < dart.notNull(this.size))) dart.assertFailed(null, L123, 1141, 14, "end < size");
    }
  }
  get isEmpty() {
    return this.end == this.start;
  }
  get length() {
    return dart.notNull(this.start) > dart.notNull(this.end) ? dart.notNull(this.size) + dart.notNull(this.end) - dart.notNull(this.start) : dart.notNull(this.end) - dart.notNull(this.start);
  }
  get linearLength() {
    return dart.notNull(this.start) > dart.notNull(this.end) ? dart.notNull(this.size) - dart.notNull(this.start) : dart.notNull(this.end) - dart.notNull(this.start);
  }
  get free() {
    return dart.notNull(this.start) > dart.notNull(this.end) ? dart.notNull(this.start) - dart.notNull(this.end) - 1 : dart.notNull(this.size) + dart.notNull(this.start) - dart.notNull(this.end) - 1;
  }
  get linearFree() {
    if (dart.notNull(this.start) > dart.notNull(this.end)) return dart.notNull(this.start) - dart.notNull(this.end) - 1;
    if (this.start === 0) return dart.notNull(this.size) - dart.notNull(this.end) - 1;
    return dart.notNull(this.size) - dart.notNull(this.end);
  }
  read(bytes) {
    if (bytes == null) {
      bytes = this.length;
    } else {
      bytes = math.min(core.int, bytes, this.length);
    }
    if (bytes === 0) return null;
    let result = _native_typed_data.NativeUint8List.new(bytes);
    let bytesRead = 0;
    while (bytesRead < dart.notNull(bytes)) {
      let toRead = math.min(core.int, dart.notNull(bytes) - bytesRead, this.linearLength);
      result[$setRange](bytesRead, bytesRead + toRead, dart.nullCheck(this.data), this.start);
      this.advanceStart(toRead);
      bytesRead = bytesRead + toRead;
    }
    return result;
  }
  write(inputData, offset, bytes) {
    if (inputData == null) dart.nullFailed(L123, 1178, 23, "inputData");
    if (offset == null) dart.nullFailed(L123, 1178, 38, "offset");
    if (bytes == null) dart.nullFailed(L123, 1178, 50, "bytes");
    if (dart.notNull(bytes) > dart.notNull(this.free)) {
      bytes = this.free;
    }
    let written = 0;
    let toWrite = math.min(core.int, bytes, this.linearFree);
    while (toWrite > 0) {
      dart.nullCheck(this.data)[$setRange](this.end, dart.notNull(this.end) + toWrite, inputData, offset);
      this.advanceEnd(toWrite);
      offset = dart.notNull(offset) + toWrite;
      written = written + toWrite;
      toWrite = math.min(core.int, dart.notNull(bytes) - written, this.linearFree);
    }
    return written;
  }
  writeFromSource(getData) {
    if (getData == null) dart.nullFailed(L123, 1195, 34, "getData");
    let written = 0;
    let toWrite = this.linearFree;
    while (dart.notNull(toWrite) > 0) {
      let inputData = getData(toWrite);
      if (inputData == null || inputData[$length] === 0) break;
      let len = inputData[$length];
      dart.nullCheck(this.data)[$setRange](this.end, dart.notNull(this.end) + dart.notNull(len), inputData);
      this.advanceEnd(len);
      written = written + dart.notNull(len);
      toWrite = this.linearFree;
    }
    return written;
  }
  readToSocket(socket) {
    if (socket == null) dart.nullFailed(L123, 1212, 31, "socket");
    while (true) {
      let toWrite = this.linearLength;
      if (toWrite === 0) return false;
      let bytes = socket.write(dart.nullCheck(this.data), this.start, toWrite);
      this.advanceStart(bytes);
      if (dart.notNull(bytes) < dart.notNull(toWrite)) {
        return true;
      }
    }
  }
};
(io._ExternalBuffer.new = function(size) {
  if (size == null) dart.nullFailed(L123, 1120, 23, "size");
  this.data = null;
  this.size = size;
  this.start = (dart.notNull(size) / 2)[$truncate]();
  this.end = (dart.notNull(size) / 2)[$truncate]();
  ;
}).prototype = io._ExternalBuffer.prototype;
dart.addTypeTests(io._ExternalBuffer);
dart.addTypeCaches(io._ExternalBuffer);
dart.setMethodSignature(io._ExternalBuffer, () => ({
  __proto__: dart.getMethods(io._ExternalBuffer.__proto__),
  advanceStart: dart.fnType(dart.void, [core.int]),
  advanceEnd: dart.fnType(dart.void, [core.int]),
  read: dart.fnType(dart.nullable(typed_data.Uint8List), [dart.nullable(core.int)]),
  write: dart.fnType(core.int, [core.List$(core.int), core.int, core.int]),
  writeFromSource: dart.fnType(core.int, [dart.fnType(dart.nullable(core.List$(core.int)), [core.int])]),
  readToSocket: dart.fnType(core.bool, [io.RawSocket])
}));
dart.setGetterSignature(io._ExternalBuffer, () => ({
  __proto__: dart.getGetters(io._ExternalBuffer.__proto__),
  isEmpty: core.bool,
  length: core.int,
  linearLength: core.int,
  free: core.int,
  linearFree: core.int
}));
dart.setLibraryUri(io._ExternalBuffer, L104);
dart.setFieldSignature(io._ExternalBuffer, () => ({
  __proto__: dart.getFields(io._ExternalBuffer.__proto__),
  data: dart.fieldType(dart.nullable(core.List$(core.int))),
  start: dart.fieldType(core.int),
  end: dart.fieldType(core.int),
  size: dart.finalFieldType(core.int)
}));
io._SecureFilter = class _SecureFilter extends core.Object {};
(io._SecureFilter[dart.mixinNew] = function() {
}).prototype = io._SecureFilter.prototype;
dart.addTypeTests(io._SecureFilter);
dart.addTypeCaches(io._SecureFilter);
dart.setLibraryUri(io._SecureFilter, L104);
var type$3 = dart.privateName(io, "TlsException.type");
var message$6 = dart.privateName(io, "TlsException.message");
var osError$1 = dart.privateName(io, "TlsException.osError");
io.TlsException = class TlsException extends core.Object {
  get type() {
    return this[type$3];
  }
  set type(value) {
    super.type = value;
  }
  get message() {
    return this[message$6];
  }
  set message(value) {
    super.message = value;
  }
  get osError() {
    return this[osError$1];
  }
  set osError(value) {
    super.osError = value;
  }
  toString() {
    let sb = new core.StringBuffer.new();
    sb.write(this.type);
    if (this.message[$isNotEmpty]) {
      sb.write(dart.str(": ") + dart.str(this.message));
      if (this.osError != null) {
        sb.write(dart.str(" (") + dart.str(this.osError) + dart.str(")"));
      }
    } else if (this.osError != null) {
      sb.write(dart.str(": ") + dart.str(this.osError));
    }
    return sb.toString();
  }
};
(io.TlsException.new = function(message = "", osError = null) {
  if (message == null) dart.nullFailed(L123, 1266, 30, "message");
  io.TlsException.__.call(this, "TlsException", message, osError);
}).prototype = io.TlsException.prototype;
(io.TlsException.__ = function(type, message, osError) {
  if (type == null) dart.nullFailed(L123, 1269, 29, "type");
  if (message == null) dart.nullFailed(L123, 1269, 40, "message");
  this[type$3] = type;
  this[message$6] = message;
  this[osError$1] = osError;
  ;
}).prototype = io.TlsException.prototype;
dart.addTypeTests(io.TlsException);
dart.addTypeCaches(io.TlsException);
io.TlsException[dart.implements] = () => [io.IOException];
dart.setLibraryUri(io.TlsException, L104);
dart.setFieldSignature(io.TlsException, () => ({
  __proto__: dart.getFields(io.TlsException.__proto__),
  type: dart.finalFieldType(core.String),
  message: dart.finalFieldType(core.String),
  osError: dart.finalFieldType(dart.nullable(io.OSError))
}));
dart.defineExtensionMethods(io.TlsException, ['toString']);
io.HandshakeException = class HandshakeException extends io.TlsException {};
(io.HandshakeException.new = function(message = "", osError = null) {
  if (message == null) dart.nullFailed(L123, 1293, 36, "message");
  io.HandshakeException.__proto__.__.call(this, "HandshakeException", message, osError);
  ;
}).prototype = io.HandshakeException.prototype;
dart.addTypeTests(io.HandshakeException);
dart.addTypeCaches(io.HandshakeException);
dart.setLibraryUri(io.HandshakeException, L104);
io.CertificateException = class CertificateException extends io.TlsException {};
(io.CertificateException.new = function(message = "", osError = null) {
  if (message == null) dart.nullFailed(L123, 1304, 38, "message");
  io.CertificateException.__proto__.__.call(this, "CertificateException", message, osError);
  ;
}).prototype = io.CertificateException.prototype;
dart.addTypeTests(io.CertificateException);
dart.addTypeCaches(io.CertificateException);
dart.setLibraryUri(io.CertificateException, L104);
io.SecurityContext = class SecurityContext extends core.Object {
  static new(opts) {
    let withTrustedRoots = opts && 'withTrustedRoots' in opts ? opts.withTrustedRoots : false;
    if (withTrustedRoots == null) dart.nullFailed(L106, 531, 33, "withTrustedRoots");
    dart.throw(new core.UnsupportedError.new("SecurityContext constructor"));
  }
  static get defaultContext() {
    dart.throw(new core.UnsupportedError.new("default SecurityContext getter"));
  }
  static get alpnSupported() {
    dart.throw(new core.UnsupportedError.new("SecurityContext alpnSupported getter"));
  }
  static _protocolsToLengthEncoding(protocols) {
    let t194, t194$;
    if (protocols == null || protocols[$length] === 0) {
      return _native_typed_data.NativeUint8List.new(0);
    }
    let protocolsLength = protocols[$length];
    let expectedLength = protocolsLength;
    for (let i = 0; i < dart.notNull(protocolsLength); i = i + 1) {
      let length = protocols[$_get](i).length;
      if (length > 0 && length <= 255) {
        expectedLength = dart.notNull(expectedLength) + length;
      } else {
        dart.throw(new core.ArgumentError.new(dart.str("Length of protocol must be between 1 and 255 (was: ") + dart.str(length) + dart.str(").")));
      }
    }
    if (dart.notNull(expectedLength) >= 1 << 13) {
      dart.throw(new core.ArgumentError.new("The maximum message length supported is 2^13-1."));
    }
    let bytes = _native_typed_data.NativeUint8List.new(expectedLength);
    let bytesOffset = 0;
    for (let i = 0; i < dart.notNull(protocolsLength); i = i + 1) {
      let proto = protocols[$_get](i);
      bytes[$_set]((t194 = bytesOffset, bytesOffset = t194 + 1, t194), proto.length);
      let bits = 0;
      for (let j = 0; j < proto.length; j = j + 1) {
        let char = proto[$codeUnitAt](j);
        bits = (bits | char) >>> 0;
        bytes[$_set]((t194$ = bytesOffset, bytesOffset = t194$ + 1, t194$), char & 255);
      }
      if (bits > 127) {
        return io.SecurityContext._protocolsToLengthEncodingNonAsciiBailout(protocols);
      }
    }
    return bytes;
  }
  static _protocolsToLengthEncodingNonAsciiBailout(protocols) {
    if (protocols == null) dart.nullFailed(L125, 255, 20, "protocols");
    function addProtocol(outBytes, protocol) {
      if (outBytes == null) dart.nullFailed(L125, 256, 32, "outBytes");
      if (protocol == null) dart.nullFailed(L125, 256, 49, "protocol");
      let protocolBytes = convert.utf8.encode(protocol);
      let len = protocolBytes[$length];
      if (dart.notNull(len) > 255) {
        dart.throw(new core.ArgumentError.new(dart.str("Length of protocol must be between 1 and 255 (was: ") + dart.str(len) + dart.str(")")));
      }
      outBytes[$add](len);
      outBytes[$addAll](protocolBytes);
    }
    dart.fn(addProtocol, ListOfintAndStringTovoid());
    let bytes = JSArrayOfint().of([]);
    for (let i = 0; i < dart.notNull(protocols[$length]); i = i + 1) {
      addProtocol(bytes, protocols[$_get](i));
    }
    if (dart.notNull(bytes[$length]) >= 1 << 13) {
      dart.throw(new core.ArgumentError.new("The maximum message length supported is 2^13-1."));
    }
    return _native_typed_data.NativeUint8List.fromList(bytes);
  }
};
(io.SecurityContext[dart.mixinNew] = function() {
}).prototype = io.SecurityContext.prototype;
dart.addTypeTests(io.SecurityContext);
dart.addTypeCaches(io.SecurityContext);
dart.setLibraryUri(io.SecurityContext, L104);
var __serviceId = dart.privateName(io, "__serviceId");
var _serviceId = dart.privateName(io, "_serviceId");
var _serviceTypePath = dart.privateName(io, "_serviceTypePath");
var _servicePath = dart.privateName(io, "_servicePath");
var _serviceTypeName = dart.privateName(io, "_serviceTypeName");
var _serviceType = dart.privateName(io, "_serviceType");
io._ServiceObject = class _ServiceObject extends core.Object {
  get [_serviceId]() {
    let t194;
    if (this[__serviceId] === 0) this[__serviceId] = (t194 = io._nextServiceId, io._nextServiceId = dart.notNull(t194) + 1, t194);
    return this[__serviceId];
  }
  get [_servicePath]() {
    return dart.str(this[_serviceTypePath]) + dart.str("/") + dart.str(this[_serviceId]);
  }
  [_serviceType](ref) {
    if (ref == null) dart.nullFailed(L126, 25, 28, "ref");
    if (dart.test(ref)) return dart.str("@") + dart.str(this[_serviceTypeName]);
    return this[_serviceTypeName];
  }
};
(io._ServiceObject.new = function() {
  this[__serviceId] = 0;
  ;
}).prototype = io._ServiceObject.prototype;
dart.addTypeTests(io._ServiceObject);
dart.addTypeCaches(io._ServiceObject);
dart.setMethodSignature(io._ServiceObject, () => ({
  __proto__: dart.getMethods(io._ServiceObject.__proto__),
  [_serviceType]: dart.fnType(core.String, [core.bool])
}));
dart.setGetterSignature(io._ServiceObject, () => ({
  __proto__: dart.getGetters(io._ServiceObject.__proto__),
  [_serviceId]: core.int,
  [_servicePath]: core.String
}));
dart.setLibraryUri(io._ServiceObject, L104);
dart.setFieldSignature(io._ServiceObject, () => ({
  __proto__: dart.getFields(io._ServiceObject.__proto__),
  [__serviceId]: dart.fieldType(core.int)
}));
var _value$1 = dart.privateName(io, "InternetAddressType._value");
var C177;
var C178;
var C179;
var C180;
io.InternetAddressType = class InternetAddressType extends core.Object {
  get [_value$]() {
    return this[_value$1];
  }
  set [_value$](value) {
    super[_value$] = value;
  }
  static _from(value) {
    if (value == null) dart.nullFailed(L124, 31, 41, "value");
    if (value == io.InternetAddressType.IPv4[_value$]) return io.InternetAddressType.IPv4;
    if (value == io.InternetAddressType.IPv6[_value$]) return io.InternetAddressType.IPv6;
    if (value == io.InternetAddressType.unix[_value$]) return io.InternetAddressType.unix;
    dart.throw(new core.ArgumentError.new(dart.str("Invalid type: ") + dart.str(value)));
  }
  get name() {
    switch (this[_value$]) {
      case -1:
      {
        return "ANY";
      }
      case 0:
      {
        return "IPv4";
      }
      case 1:
      {
        return "IPv6";
      }
      case 2:
      {
        return "Unix";
      }
      default:
      {
        dart.throw(new core.ArgumentError.new("Invalid InternetAddress"));
      }
    }
  }
  toString() {
    return dart.str("InternetAddressType: ") + dart.str(this.name);
  }
};
(io.InternetAddressType.__ = function(_value) {
  if (_value == null) dart.nullFailed(L124, 29, 36, "_value");
  this[_value$1] = _value;
  ;
}).prototype = io.InternetAddressType.prototype;
dart.addTypeTests(io.InternetAddressType);
dart.addTypeCaches(io.InternetAddressType);
dart.setGetterSignature(io.InternetAddressType, () => ({
  __proto__: dart.getGetters(io.InternetAddressType.__proto__),
  name: core.String
}));
dart.setLibraryUri(io.InternetAddressType, L104);
dart.setFieldSignature(io.InternetAddressType, () => ({
  __proto__: dart.getFields(io.InternetAddressType.__proto__),
  [_value$]: dart.finalFieldType(core.int)
}));
dart.defineExtensionMethods(io.InternetAddressType, ['toString']);
dart.defineLazy(io.InternetAddressType, {
  /*io.InternetAddressType.IPv4*/get IPv4() {
    return C177 || CT.C177;
  },
  /*io.InternetAddressType.IPv6*/get IPv6() {
    return C178 || CT.C178;
  },
  /*io.InternetAddressType.unix*/get unix() {
    return C179 || CT.C179;
  },
  /*io.InternetAddressType.any*/get any() {
    return C180 || CT.C180;
  },
  /*io.InternetAddressType.IP_V4*/get IP_V4() {
    return C177 || CT.C177;
  },
  /*io.InternetAddressType.IP_V6*/get IP_V6() {
    return C178 || CT.C178;
  },
  /*io.InternetAddressType.ANY*/get ANY() {
    return C180 || CT.C180;
  }
}, false);
io.InternetAddress = class InternetAddress extends core.Object {
  static get loopbackIPv4() {
    return io.InternetAddress.LOOPBACK_IP_V4;
  }
  static get LOOPBACK_IP_V4() {
    dart.throw(new core.UnsupportedError.new("InternetAddress.LOOPBACK_IP_V4"));
  }
  static get loopbackIPv6() {
    return io.InternetAddress.LOOPBACK_IP_V6;
  }
  static get LOOPBACK_IP_V6() {
    dart.throw(new core.UnsupportedError.new("InternetAddress.LOOPBACK_IP_V6"));
  }
  static get anyIPv4() {
    return io.InternetAddress.ANY_IP_V4;
  }
  static get ANY_IP_V4() {
    dart.throw(new core.UnsupportedError.new("InternetAddress.ANY_IP_V4"));
  }
  static get anyIPv6() {
    return io.InternetAddress.ANY_IP_V6;
  }
  static get ANY_IP_V6() {
    dart.throw(new core.UnsupportedError.new("InternetAddress.ANY_IP_V6"));
  }
  static new(address, opts) {
    if (address == null) dart.nullFailed(L106, 412, 34, "address");
    let type = opts && 'type' in opts ? opts.type : null;
    dart.throw(new core.UnsupportedError.new("InternetAddress"));
  }
  static fromRawAddress(rawAddress, opts) {
    if (rawAddress == null) dart.nullFailed(L106, 417, 52, "rawAddress");
    let type = opts && 'type' in opts ? opts.type : null;
    dart.throw(new core.UnsupportedError.new("InternetAddress.fromRawAddress"));
  }
  static lookup(host, opts) {
    if (host == null) dart.nullFailed(L106, 423, 54, "host");
    let type = opts && 'type' in opts ? opts.type : C180 || CT.C180;
    if (type == null) dart.nullFailed(L106, 424, 28, "type");
    dart.throw(new core.UnsupportedError.new("InternetAddress.lookup"));
  }
  static _cloneWithNewHost(address, host) {
    if (address == null) dart.nullFailed(L106, 430, 23, "address");
    if (host == null) dart.nullFailed(L106, 430, 39, "host");
    dart.throw(new core.UnsupportedError.new("InternetAddress._cloneWithNewHost"));
  }
  static tryParse(address) {
    if (address == null) dart.nullFailed(L106, 435, 43, "address");
    dart.throw(new core.UnsupportedError.new("InternetAddress.tryParse"));
  }
};
(io.InternetAddress[dart.mixinNew] = function() {
}).prototype = io.InternetAddress.prototype;
dart.addTypeTests(io.InternetAddress);
dart.addTypeCaches(io.InternetAddress);
dart.setLibraryUri(io.InternetAddress, L104);
io.NetworkInterface = class NetworkInterface extends core.Object {
  static get listSupported() {
    dart.throw(new core.UnsupportedError.new("NetworkInterface.listSupported"));
  }
  static list(opts) {
    let includeLoopback = opts && 'includeLoopback' in opts ? opts.includeLoopback : false;
    if (includeLoopback == null) dart.nullFailed(L106, 449, 13, "includeLoopback");
    let includeLinkLocal = opts && 'includeLinkLocal' in opts ? opts.includeLinkLocal : false;
    if (includeLinkLocal == null) dart.nullFailed(L106, 450, 12, "includeLinkLocal");
    let type = opts && 'type' in opts ? opts.type : C180 || CT.C180;
    if (type == null) dart.nullFailed(L106, 451, 27, "type");
    dart.throw(new core.UnsupportedError.new("NetworkInterface.list"));
  }
};
(io.NetworkInterface.new = function() {
  ;
}).prototype = io.NetworkInterface.prototype;
dart.addTypeTests(io.NetworkInterface);
dart.addTypeCaches(io.NetworkInterface);
dart.setLibraryUri(io.NetworkInterface, L104);
io.RawServerSocket = class RawServerSocket extends core.Object {
  static bind(address, port, opts) {
    if (port == null) dart.nullFailed(L106, 459, 52, "port");
    let backlog = opts && 'backlog' in opts ? opts.backlog : 0;
    if (backlog == null) dart.nullFailed(L106, 460, 12, "backlog");
    let v6Only = opts && 'v6Only' in opts ? opts.v6Only : false;
    if (v6Only == null) dart.nullFailed(L106, 460, 30, "v6Only");
    let shared = opts && 'shared' in opts ? opts.shared : false;
    if (shared == null) dart.nullFailed(L106, 460, 51, "shared");
    dart.throw(new core.UnsupportedError.new("RawServerSocket.bind"));
  }
};
(io.RawServerSocket.new = function() {
  ;
}).prototype = io.RawServerSocket.prototype;
io.RawServerSocket.prototype[dart.isStream] = true;
dart.addTypeTests(io.RawServerSocket);
dart.addTypeCaches(io.RawServerSocket);
io.RawServerSocket[dart.implements] = () => [async.Stream$(io.RawSocket)];
dart.setLibraryUri(io.RawServerSocket, L104);
io.ServerSocket = class ServerSocket extends core.Object {
  static bind(address, port, opts) {
    if (port == null) dart.nullFailed(L124, 382, 49, "port");
    let backlog = opts && 'backlog' in opts ? opts.backlog : 0;
    if (backlog == null) dart.nullFailed(L124, 383, 12, "backlog");
    let v6Only = opts && 'v6Only' in opts ? opts.v6Only : false;
    if (v6Only == null) dart.nullFailed(L124, 383, 29, "v6Only");
    let shared = opts && 'shared' in opts ? opts.shared : false;
    if (shared == null) dart.nullFailed(L124, 383, 49, "shared");
    let overrides = io.IOOverrides.current;
    if (overrides == null) {
      return io.ServerSocket._bind(address, port, {backlog: backlog, v6Only: v6Only, shared: shared});
    }
    return overrides.serverSocketBind(address, port, {backlog: backlog, v6Only: v6Only, shared: shared});
  }
  static _bind(address, port, opts) {
    if (port == null) dart.nullFailed(L106, 468, 50, "port");
    let backlog = opts && 'backlog' in opts ? opts.backlog : 0;
    if (backlog == null) dart.nullFailed(L106, 469, 12, "backlog");
    let v6Only = opts && 'v6Only' in opts ? opts.v6Only : false;
    if (v6Only == null) dart.nullFailed(L106, 469, 30, "v6Only");
    let shared = opts && 'shared' in opts ? opts.shared : false;
    if (shared == null) dart.nullFailed(L106, 469, 51, "shared");
    dart.throw(new core.UnsupportedError.new("ServerSocket.bind"));
  }
};
(io.ServerSocket.new = function() {
  ;
}).prototype = io.ServerSocket.prototype;
io.ServerSocket.prototype[dart.isStream] = true;
dart.addTypeTests(io.ServerSocket);
dart.addTypeCaches(io.ServerSocket);
io.ServerSocket[dart.implements] = () => [async.Stream$(io.Socket)];
dart.setLibraryUri(io.ServerSocket, L104);
var _value$2 = dart.privateName(io, "SocketDirection._value");
var C181;
var C182;
var C183;
io.SocketDirection = class SocketDirection extends core.Object {
  get [_value$]() {
    return this[_value$2];
  }
  set [_value$](value) {
    super[_value$] = value;
  }
};
(io.SocketDirection.__ = function(_value) {
  this[_value$2] = _value;
  ;
}).prototype = io.SocketDirection.prototype;
dart.addTypeTests(io.SocketDirection);
dart.addTypeCaches(io.SocketDirection);
dart.setLibraryUri(io.SocketDirection, L104);
dart.setFieldSignature(io.SocketDirection, () => ({
  __proto__: dart.getFields(io.SocketDirection.__proto__),
  [_value$]: dart.finalFieldType(dart.dynamic)
}));
dart.defineLazy(io.SocketDirection, {
  /*io.SocketDirection.receive*/get receive() {
    return C181 || CT.C181;
  },
  /*io.SocketDirection.send*/get send() {
    return C182 || CT.C182;
  },
  /*io.SocketDirection.both*/get both() {
    return C183 || CT.C183;
  },
  /*io.SocketDirection.RECEIVE*/get RECEIVE() {
    return C181 || CT.C181;
  },
  /*io.SocketDirection.SEND*/get SEND() {
    return C182 || CT.C182;
  },
  /*io.SocketDirection.BOTH*/get BOTH() {
    return C183 || CT.C183;
  }
}, false);
var _value$3 = dart.privateName(io, "SocketOption._value");
var C184;
var C185;
var C186;
var C187;
var C188;
io.SocketOption = class SocketOption extends core.Object {
  get [_value$]() {
    return this[_value$3];
  }
  set [_value$](value) {
    super[_value$] = value;
  }
};
(io.SocketOption.__ = function(_value) {
  this[_value$3] = _value;
  ;
}).prototype = io.SocketOption.prototype;
dart.addTypeTests(io.SocketOption);
dart.addTypeCaches(io.SocketOption);
dart.setLibraryUri(io.SocketOption, L104);
dart.setFieldSignature(io.SocketOption, () => ({
  __proto__: dart.getFields(io.SocketOption.__proto__),
  [_value$]: dart.finalFieldType(dart.dynamic)
}));
dart.defineLazy(io.SocketOption, {
  /*io.SocketOption.tcpNoDelay*/get tcpNoDelay() {
    return C184 || CT.C184;
  },
  /*io.SocketOption.TCP_NODELAY*/get TCP_NODELAY() {
    return C184 || CT.C184;
  },
  /*io.SocketOption._ipMulticastLoop*/get _ipMulticastLoop() {
    return C185 || CT.C185;
  },
  /*io.SocketOption._ipMulticastHops*/get _ipMulticastHops() {
    return C186 || CT.C186;
  },
  /*io.SocketOption._ipMulticastIf*/get _ipMulticastIf() {
    return C187 || CT.C187;
  },
  /*io.SocketOption._ipBroadcast*/get _ipBroadcast() {
    return C188 || CT.C188;
  }
}, false);
var C189;
var C190;
var C191;
var C192;
var C193;
var C194;
var C195;
var C196;
io._RawSocketOptions = class _RawSocketOptions extends core.Object {
  toString() {
    return this[_name$4];
  }
};
(io._RawSocketOptions.new = function(index, _name) {
  if (index == null) dart.nullFailed(L124, 462, 6, "index");
  if (_name == null) dart.nullFailed(L124, 462, 6, "_name");
  this.index = index;
  this[_name$4] = _name;
  ;
}).prototype = io._RawSocketOptions.prototype;
dart.addTypeTests(io._RawSocketOptions);
dart.addTypeCaches(io._RawSocketOptions);
dart.setLibraryUri(io._RawSocketOptions, L104);
dart.setFieldSignature(io._RawSocketOptions, () => ({
  __proto__: dart.getFields(io._RawSocketOptions.__proto__),
  index: dart.finalFieldType(core.int),
  [_name$4]: dart.finalFieldType(core.String)
}));
dart.defineExtensionMethods(io._RawSocketOptions, ['toString']);
io._RawSocketOptions.SOL_SOCKET = C189 || CT.C189;
io._RawSocketOptions.IPPROTO_IP = C190 || CT.C190;
io._RawSocketOptions.IP_MULTICAST_IF = C191 || CT.C191;
io._RawSocketOptions.IPPROTO_IPV6 = C192 || CT.C192;
io._RawSocketOptions.IPV6_MULTICAST_IF = C193 || CT.C193;
io._RawSocketOptions.IPPROTO_TCP = C194 || CT.C194;
io._RawSocketOptions.IPPROTO_UDP = C195 || CT.C195;
io._RawSocketOptions.values = C196 || CT.C196;
var level$2 = dart.privateName(io, "RawSocketOption.level");
var option$ = dart.privateName(io, "RawSocketOption.option");
var value$3 = dart.privateName(io, "RawSocketOption.value");
io.RawSocketOption = class RawSocketOption extends core.Object {
  get level() {
    return this[level$2];
  }
  set level(value) {
    super.level = value;
  }
  get option() {
    return this[option$];
  }
  set option(value) {
    super.option = value;
  }
  get value() {
    return this[value$3];
  }
  set value(value) {
    super.value = value;
  }
  static fromInt(level, option, value) {
    if (level == null) dart.nullFailed(L124, 497, 39, "level");
    if (option == null) dart.nullFailed(L124, 497, 50, "option");
    if (value == null) dart.nullFailed(L124, 497, 62, "value");
    let list = _native_typed_data.NativeUint8List.new(4);
    let buffer = typed_data.ByteData.view(list[$buffer], list[$offsetInBytes]);
    buffer[$setInt32](0, value, typed_data.Endian.host);
    return new io.RawSocketOption.new(level, option, list);
  }
  static fromBool(level, option, value) {
    if (level == null) dart.nullFailed(L124, 505, 40, "level");
    if (option == null) dart.nullFailed(L124, 505, 51, "option");
    if (value == null) dart.nullFailed(L124, 505, 64, "value");
    return io.RawSocketOption.fromInt(level, option, dart.test(value) ? 1 : 0);
  }
  static get levelSocket() {
    return io.RawSocketOption._getOptionValue(io._RawSocketOptions.SOL_SOCKET.index);
  }
  static get levelIPv4() {
    return io.RawSocketOption._getOptionValue(io._RawSocketOptions.IPPROTO_IP.index);
  }
  static get IPv4MulticastInterface() {
    return io.RawSocketOption._getOptionValue(io._RawSocketOptions.IP_MULTICAST_IF.index);
  }
  static get levelIPv6() {
    return io.RawSocketOption._getOptionValue(io._RawSocketOptions.IPPROTO_IPV6.index);
  }
  static get IPv6MulticastInterface() {
    return io.RawSocketOption._getOptionValue(io._RawSocketOptions.IPV6_MULTICAST_IF.index);
  }
  static get levelTcp() {
    return io.RawSocketOption._getOptionValue(io._RawSocketOptions.IPPROTO_TCP.index);
  }
  static get levelUdp() {
    return io.RawSocketOption._getOptionValue(io._RawSocketOptions.IPPROTO_UDP.index);
  }
  static _getOptionValue(key) {
    if (key == null) dart.nullFailed(L106, 523, 34, "key");
    dart.throw(new core.UnsupportedError.new("RawSocketOption._getOptionValue"));
  }
};
(io.RawSocketOption.new = function(level, option, value) {
  if (level == null) dart.nullFailed(L124, 494, 30, "level");
  if (option == null) dart.nullFailed(L124, 494, 42, "option");
  if (value == null) dart.nullFailed(L124, 494, 55, "value");
  this[level$2] = level;
  this[option$] = option;
  this[value$3] = value;
  ;
}).prototype = io.RawSocketOption.prototype;
dart.addTypeTests(io.RawSocketOption);
dart.addTypeCaches(io.RawSocketOption);
dart.setLibraryUri(io.RawSocketOption, L104);
dart.setFieldSignature(io.RawSocketOption, () => ({
  __proto__: dart.getFields(io.RawSocketOption.__proto__),
  level: dart.finalFieldType(core.int),
  option: dart.finalFieldType(core.int),
  value: dart.finalFieldType(typed_data.Uint8List)
}));
const _is_ConnectionTask_default = Symbol('_is_ConnectionTask_default');
var socket$ = dart.privateName(io, "ConnectionTask.socket");
io.ConnectionTask$ = dart.generic(S => {
  class ConnectionTask extends core.Object {
    get socket() {
      return this[socket$];
    }
    set socket(value) {
      super.socket = value;
    }
    cancel() {
      this[_onCancel$]();
    }
  }
  (ConnectionTask.__ = function(socket, onCancel) {
    if (socket == null) dart.nullFailed(L124, 612, 35, "socket");
    if (onCancel == null) dart.nullFailed(L124, 612, 59, "onCancel");
    this[socket$] = socket;
    this[_onCancel$] = onCancel;
    ;
  }).prototype = ConnectionTask.prototype;
  dart.addTypeTests(ConnectionTask);
  ConnectionTask.prototype[_is_ConnectionTask_default] = true;
  dart.addTypeCaches(ConnectionTask);
  dart.setMethodSignature(ConnectionTask, () => ({
    __proto__: dart.getMethods(ConnectionTask.__proto__),
    cancel: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(ConnectionTask, L104);
  dart.setFieldSignature(ConnectionTask, () => ({
    __proto__: dart.getFields(ConnectionTask.__proto__),
    socket: dart.finalFieldType(async.Future$(S)),
    [_onCancel$]: dart.finalFieldType(dart.fnType(dart.void, []))
  }));
  return ConnectionTask;
});
io.ConnectionTask = io.ConnectionTask$();
dart.addTypeTests(io.ConnectionTask, _is_ConnectionTask_default);
io.RawSocket = class RawSocket extends core.Object {
  static connect(host, port, opts) {
    if (port == null) dart.nullFailed(L106, 477, 54, "port");
    let sourceAddress = opts && 'sourceAddress' in opts ? opts.sourceAddress : null;
    let timeout = opts && 'timeout' in opts ? opts.timeout : null;
    dart.throw(new core.UnsupportedError.new("RawSocket constructor"));
  }
  static startConnect(host, port, opts) {
    if (port == null) dart.nullFailed(L106, 483, 75, "port");
    let sourceAddress = opts && 'sourceAddress' in opts ? opts.sourceAddress : null;
    dart.throw(new core.UnsupportedError.new("RawSocket constructor"));
  }
};
(io.RawSocket.new = function() {
  ;
}).prototype = io.RawSocket.prototype;
io.RawSocket.prototype[dart.isStream] = true;
dart.addTypeTests(io.RawSocket);
dart.addTypeCaches(io.RawSocket);
io.RawSocket[dart.implements] = () => [async.Stream$(io.RawSocketEvent)];
dart.setLibraryUri(io.RawSocket, L104);
io.Socket = class Socket extends core.Object {
  static connect(host, port, opts) {
    if (port == null) dart.nullFailed(L124, 813, 43, "port");
    let sourceAddress = opts && 'sourceAddress' in opts ? opts.sourceAddress : null;
    let timeout = opts && 'timeout' in opts ? opts.timeout : null;
    let overrides = io.IOOverrides.current;
    if (overrides == null) {
      return io.Socket._connect(host, port, {sourceAddress: sourceAddress, timeout: timeout});
    }
    return overrides.socketConnect(host, port, {sourceAddress: sourceAddress, timeout: timeout});
  }
  static startConnect(host, port, opts) {
    if (port == null) dart.nullFailed(L124, 827, 64, "port");
    let sourceAddress = opts && 'sourceAddress' in opts ? opts.sourceAddress : null;
    let overrides = io.IOOverrides.current;
    if (overrides == null) {
      return io.Socket._startConnect(host, port, {sourceAddress: sourceAddress});
    }
    return overrides.socketStartConnect(host, port, {sourceAddress: sourceAddress});
  }
  static _connect(host, port, opts) {
    if (port == null) dart.nullFailed(L106, 492, 52, "port");
    let sourceAddress = opts && 'sourceAddress' in opts ? opts.sourceAddress : null;
    let timeout = opts && 'timeout' in opts ? opts.timeout : null;
    dart.throw(new core.UnsupportedError.new("Socket constructor"));
  }
  static _startConnect(host, port, opts) {
    if (port == null) dart.nullFailed(L106, 498, 73, "port");
    let sourceAddress = opts && 'sourceAddress' in opts ? opts.sourceAddress : null;
    dart.throw(new core.UnsupportedError.new("Socket constructor"));
  }
};
(io.Socket.new = function() {
  ;
}).prototype = io.Socket.prototype;
io.Socket.prototype[dart.isStream] = true;
dart.addTypeTests(io.Socket);
dart.addTypeCaches(io.Socket);
io.Socket[dart.implements] = () => [async.Stream$(typed_data.Uint8List), io.IOSink];
dart.setLibraryUri(io.Socket, L104);
var data$ = dart.privateName(io, "Datagram.data");
var address$ = dart.privateName(io, "Datagram.address");
var port$ = dart.privateName(io, "Datagram.port");
io.Datagram = class Datagram extends core.Object {
  get data() {
    return this[data$];
  }
  set data(value) {
    this[data$] = value;
  }
  get address() {
    return this[address$];
  }
  set address(value) {
    this[address$] = value;
  }
  get port() {
    return this[port$];
  }
  set port(value) {
    this[port$] = value;
  }
};
(io.Datagram.new = function(data, address, port) {
  if (data == null) dart.nullFailed(L124, 930, 17, "data");
  if (address == null) dart.nullFailed(L124, 930, 28, "address");
  if (port == null) dart.nullFailed(L124, 930, 42, "port");
  this[data$] = data;
  this[address$] = address;
  this[port$] = port;
  ;
}).prototype = io.Datagram.prototype;
dart.addTypeTests(io.Datagram);
dart.addTypeCaches(io.Datagram);
dart.setLibraryUri(io.Datagram, L104);
dart.setFieldSignature(io.Datagram, () => ({
  __proto__: dart.getFields(io.Datagram.__proto__),
  data: dart.fieldType(typed_data.Uint8List),
  address: dart.fieldType(io.InternetAddress),
  port: dart.fieldType(core.int)
}));
var multicastInterface = dart.privateName(io, "RawDatagramSocket.multicastInterface");
io.RawDatagramSocket = class RawDatagramSocket extends async.Stream$(io.RawSocketEvent) {
  get multicastInterface() {
    return this[multicastInterface];
  }
  set multicastInterface(value) {
    this[multicastInterface] = value;
  }
  static bind(host, port, opts) {
    if (port == null) dart.nullFailed(L106, 557, 59, "port");
    let reuseAddress = opts && 'reuseAddress' in opts ? opts.reuseAddress : true;
    if (reuseAddress == null) dart.nullFailed(L106, 558, 13, "reuseAddress");
    let reusePort = opts && 'reusePort' in opts ? opts.reusePort : false;
    if (reusePort == null) dart.nullFailed(L106, 558, 39, "reusePort");
    let ttl = opts && 'ttl' in opts ? opts.ttl : 1;
    if (ttl == null) dart.nullFailed(L106, 558, 62, "ttl");
    dart.throw(new core.UnsupportedError.new("RawDatagramSocket.bind"));
  }
};
(io.RawDatagramSocket.new = function() {
  this[multicastInterface] = null;
  io.RawDatagramSocket.__proto__.new.call(this);
  ;
}).prototype = io.RawDatagramSocket.prototype;
dart.addTypeTests(io.RawDatagramSocket);
dart.addTypeCaches(io.RawDatagramSocket);
dart.setLibraryUri(io.RawDatagramSocket, L104);
dart.setFieldSignature(io.RawDatagramSocket, () => ({
  __proto__: dart.getFields(io.RawDatagramSocket.__proto__),
  multicastInterface: dart.fieldType(dart.nullable(io.NetworkInterface))
}));
var message$7 = dart.privateName(io, "SocketException.message");
var osError$2 = dart.privateName(io, "SocketException.osError");
var address$0 = dart.privateName(io, "SocketException.address");
var port$0 = dart.privateName(io, "SocketException.port");
io.SocketException = class SocketException extends core.Object {
  get message() {
    return this[message$7];
  }
  set message(value) {
    super.message = value;
  }
  get osError() {
    return this[osError$2];
  }
  set osError(value) {
    super.osError = value;
  }
  get address() {
    return this[address$0];
  }
  set address(value) {
    super.address = value;
  }
  get port() {
    return this[port$0];
  }
  set port(value) {
    super.port = value;
  }
  toString() {
    let sb = new core.StringBuffer.new();
    sb.write("SocketException");
    if (this.message[$isNotEmpty]) {
      sb.write(dart.str(": ") + dart.str(this.message));
      if (this.osError != null) {
        sb.write(dart.str(" (") + dart.str(this.osError) + dart.str(")"));
      }
    } else if (this.osError != null) {
      sb.write(dart.str(": ") + dart.str(this.osError));
    }
    if (this.address != null) {
      sb.write(dart.str(", address = ") + dart.str(dart.nullCheck(this.address).host));
    }
    if (this.port != null) {
      sb.write(dart.str(", port = ") + dart.str(this.port));
    }
    return sb.toString();
  }
};
(io.SocketException.new = function(message, opts) {
  if (message == null) dart.nullFailed(L124, 1122, 30, "message");
  let osError = opts && 'osError' in opts ? opts.osError : null;
  let address = opts && 'address' in opts ? opts.address : null;
  let port = opts && 'port' in opts ? opts.port : null;
  this[message$7] = message;
  this[osError$2] = osError;
  this[address$0] = address;
  this[port$0] = port;
  ;
}).prototype = io.SocketException.prototype;
(io.SocketException.closed = function() {
  this[message$7] = "Socket has been closed";
  this[osError$2] = null;
  this[address$0] = null;
  this[port$0] = null;
  ;
}).prototype = io.SocketException.prototype;
dart.addTypeTests(io.SocketException);
dart.addTypeCaches(io.SocketException);
io.SocketException[dart.implements] = () => [io.IOException];
dart.setLibraryUri(io.SocketException, L104);
dart.setFieldSignature(io.SocketException, () => ({
  __proto__: dart.getFields(io.SocketException.__proto__),
  message: dart.finalFieldType(core.String),
  osError: dart.finalFieldType(dart.nullable(io.OSError)),
  address: dart.finalFieldType(dart.nullable(io.InternetAddress)),
  port: dart.finalFieldType(dart.nullable(core.int))
}));
dart.defineExtensionMethods(io.SocketException, ['toString']);
var _stream$0 = dart.privateName(io, "_stream");
io._StdStream = class _StdStream extends async.Stream$(core.List$(core.int)) {
  listen(onData, opts) {
    let onError = opts && 'onError' in opts ? opts.onError : null;
    let onDone = opts && 'onDone' in opts ? opts.onDone : null;
    let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
    return this[_stream$0].listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
  }
};
(io._StdStream.new = function(_stream) {
  if (_stream == null) dart.nullFailed(L127, 18, 19, "_stream");
  this[_stream$0] = _stream;
  io._StdStream.__proto__.new.call(this);
  ;
}).prototype = io._StdStream.prototype;
dart.addTypeTests(io._StdStream);
dart.addTypeCaches(io._StdStream);
dart.setMethodSignature(io._StdStream, () => ({
  __proto__: dart.getMethods(io._StdStream.__proto__),
  listen: dart.fnType(async.StreamSubscription$(core.List$(core.int)), [dart.nullable(dart.fnType(dart.void, [core.List$(core.int)]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {})
}));
dart.setLibraryUri(io._StdStream, L104);
dart.setFieldSignature(io._StdStream, () => ({
  __proto__: dart.getFields(io._StdStream.__proto__),
  [_stream$0]: dart.finalFieldType(async.Stream$(core.List$(core.int)))
}));
var _fd$ = dart.privateName(io, "_fd");
io.Stdin = class Stdin extends io._StdStream {
  readLineSync(opts) {
    let encoding = opts && 'encoding' in opts ? opts.encoding : C142 || CT.C142;
    if (encoding == null) dart.nullFailed(L127, 59, 17, "encoding");
    let retainNewlines = opts && 'retainNewlines' in opts ? opts.retainNewlines : false;
    if (retainNewlines == null) dart.nullFailed(L127, 59, 48, "retainNewlines");
    let line = JSArrayOfint().of([]);
    let crIsNewline = dart.test(io.Platform.isWindows) && dart.equals(io.stdioType(io.stdin), io.StdioType.terminal) && !dart.test(this.lineMode);
    if (dart.test(retainNewlines)) {
      let byte = null;
      do {
        byte = this.readByteSync();
        if (dart.notNull(byte) < 0) {
          break;
        }
        line[$add](byte);
      } while (byte !== 10 && !(byte === 13 && crIsNewline));
      if (dart.test(line[$isEmpty])) {
        return null;
      }
    } else if (crIsNewline) {
      while (true) {
        let byte = this.readByteSync();
        if (dart.notNull(byte) < 0) {
          if (dart.test(line[$isEmpty])) return null;
          break;
        }
        if (byte === 10 || byte === 13) break;
        line[$add](byte);
      }
    } else {
      L2:
        while (true) {
          let byte = this.readByteSync();
          if (byte === 10) break;
          if (byte === 13) {
            do {
              byte = this.readByteSync();
              if (byte === 10) break L2;
              line[$add](13);
            } while (byte === 13);
          }
          if (dart.notNull(byte) < 0) {
            if (dart.test(line[$isEmpty])) return null;
            break;
          }
          line[$add](byte);
        }
    }
    return encoding.decode(line);
  }
  get echoMode() {
    dart.throw(new core.UnsupportedError.new("Stdin.echoMode"));
  }
  set echoMode(enabled) {
    if (enabled == null) dart.nullFailed(L106, 644, 26, "enabled");
    dart.throw(new core.UnsupportedError.new("Stdin.echoMode"));
  }
  get lineMode() {
    dart.throw(new core.UnsupportedError.new("Stdin.lineMode"));
  }
  set lineMode(enabled) {
    if (enabled == null) dart.nullFailed(L106, 654, 26, "enabled");
    dart.throw(new core.UnsupportedError.new("Stdin.lineMode"));
  }
  get supportsAnsiEscapes() {
    dart.throw(new core.UnsupportedError.new("Stdin.supportsAnsiEscapes"));
  }
  readByteSync() {
    dart.throw(new core.UnsupportedError.new("Stdin.readByteSync"));
  }
  get hasTerminal() {
    try {
      return dart.equals(io.stdioType(this), io.StdioType.terminal);
    } catch (e) {
      let _ = dart.getThrown(e);
      if (io.FileSystemException.is(_)) {
        return false;
      } else
        throw e;
    }
  }
};
(io.Stdin.__ = function(stream, _fd) {
  if (stream == null) dart.nullFailed(L127, 36, 29, "stream");
  if (_fd == null) dart.nullFailed(L127, 36, 42, "_fd");
  this[_fd$] = _fd;
  io.Stdin.__proto__.new.call(this, stream);
  ;
}).prototype = io.Stdin.prototype;
io.Stdin.prototype[dart.isStream] = true;
dart.addTypeTests(io.Stdin);
dart.addTypeCaches(io.Stdin);
io.Stdin[dart.implements] = () => [async.Stream$(core.List$(core.int))];
dart.setMethodSignature(io.Stdin, () => ({
  __proto__: dart.getMethods(io.Stdin.__proto__),
  readLineSync: dart.fnType(dart.nullable(core.String), [], {encoding: convert.Encoding, retainNewlines: core.bool}, {}),
  readByteSync: dart.fnType(core.int, [])
}));
dart.setGetterSignature(io.Stdin, () => ({
  __proto__: dart.getGetters(io.Stdin.__proto__),
  echoMode: core.bool,
  lineMode: core.bool,
  supportsAnsiEscapes: core.bool,
  hasTerminal: core.bool
}));
dart.setSetterSignature(io.Stdin, () => ({
  __proto__: dart.getSetters(io.Stdin.__proto__),
  echoMode: core.bool,
  lineMode: core.bool
}));
dart.setLibraryUri(io.Stdin, L104);
dart.setFieldSignature(io.Stdin, () => ({
  __proto__: dart.getFields(io.Stdin.__proto__),
  [_fd$]: dart.fieldType(core.int)
}));
var _nonBlocking = dart.privateName(io, "_nonBlocking");
var _hasTerminal = dart.privateName(io, "_hasTerminal");
var _terminalColumns = dart.privateName(io, "_terminalColumns");
var _terminalLines = dart.privateName(io, "_terminalLines");
io._StdSink = class _StdSink extends core.Object {
  get encoding() {
    return this[_sink$1].encoding;
  }
  set encoding(encoding) {
    if (encoding == null) dart.nullFailed(L127, 333, 30, "encoding");
    this[_sink$1].encoding = encoding;
  }
  write(object) {
    this[_sink$1].write(object);
  }
  writeln(object = "") {
    this[_sink$1].writeln(object);
  }
  writeAll(objects, sep = "") {
    if (objects == null) dart.nullFailed(L127, 345, 26, "objects");
    if (sep == null) dart.nullFailed(L127, 345, 43, "sep");
    this[_sink$1].writeAll(objects, sep);
  }
  add(data) {
    ListOfint().as(data);
    if (data == null) dart.nullFailed(L127, 349, 22, "data");
    this[_sink$1].add(data);
  }
  addError(error, stackTrace = null) {
    if (error == null) dart.nullFailed(L127, 353, 17, "error");
    this[_sink$1].addError(error, stackTrace);
  }
  writeCharCode(charCode) {
    if (charCode == null) dart.nullFailed(L127, 357, 26, "charCode");
    this[_sink$1].writeCharCode(charCode);
  }
  addStream(stream) {
    StreamOfListOfint().as(stream);
    if (stream == null) dart.nullFailed(L127, 361, 38, "stream");
    return this[_sink$1].addStream(stream);
  }
  flush() {
    return this[_sink$1].flush();
  }
  close() {
    return this[_sink$1].close();
  }
  get done() {
    return this[_sink$1].done;
  }
};
(io._StdSink.new = function(_sink) {
  if (_sink == null) dart.nullFailed(L127, 330, 17, "_sink");
  this[_sink$1] = _sink;
  ;
}).prototype = io._StdSink.prototype;
dart.addTypeTests(io._StdSink);
dart.addTypeCaches(io._StdSink);
io._StdSink[dart.implements] = () => [io.IOSink];
dart.setMethodSignature(io._StdSink, () => ({
  __proto__: dart.getMethods(io._StdSink.__proto__),
  write: dart.fnType(dart.void, [dart.nullable(core.Object)]),
  writeln: dart.fnType(dart.void, [], [dart.nullable(core.Object)]),
  writeAll: dart.fnType(dart.void, [core.Iterable], [core.String]),
  add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
  addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
  writeCharCode: dart.fnType(dart.void, [core.int]),
  addStream: dart.fnType(async.Future, [dart.nullable(core.Object)]),
  flush: dart.fnType(async.Future, []),
  close: dart.fnType(async.Future, [])
}));
dart.setGetterSignature(io._StdSink, () => ({
  __proto__: dart.getGetters(io._StdSink.__proto__),
  encoding: convert.Encoding,
  done: async.Future
}));
dart.setSetterSignature(io._StdSink, () => ({
  __proto__: dart.getSetters(io._StdSink.__proto__),
  encoding: convert.Encoding
}));
dart.setLibraryUri(io._StdSink, L104);
dart.setFieldSignature(io._StdSink, () => ({
  __proto__: dart.getFields(io._StdSink.__proto__),
  [_sink$1]: dart.finalFieldType(io.IOSink)
}));
io.Stdout = class Stdout extends io._StdSink {
  get hasTerminal() {
    return this[_hasTerminal](this[_fd$]);
  }
  get terminalColumns() {
    return this[_terminalColumns](this[_fd$]);
  }
  get terminalLines() {
    return this[_terminalLines](this[_fd$]);
  }
  get supportsAnsiEscapes() {
    return io.Stdout._supportsAnsiEscapes(this[_fd$]);
  }
  [_hasTerminal](fd) {
    if (fd == null) dart.nullFailed(L106, 667, 25, "fd");
    dart.throw(new core.UnsupportedError.new("Stdout.hasTerminal"));
  }
  [_terminalColumns](fd) {
    if (fd == null) dart.nullFailed(L106, 672, 28, "fd");
    dart.throw(new core.UnsupportedError.new("Stdout.terminalColumns"));
  }
  [_terminalLines](fd) {
    if (fd == null) dart.nullFailed(L106, 677, 26, "fd");
    dart.throw(new core.UnsupportedError.new("Stdout.terminalLines"));
  }
  static _supportsAnsiEscapes(fd) {
    if (fd == null) dart.nullFailed(L106, 682, 40, "fd");
    dart.throw(new core.UnsupportedError.new("Stdout.supportsAnsiEscapes"));
  }
  get nonBlocking() {
    let t195;
    t195 = this[_nonBlocking];
    return t195 == null ? this[_nonBlocking] = io.IOSink.new(new io._FileStreamConsumer.fromStdio(this[_fd$])) : t195;
  }
};
(io.Stdout.__ = function(sink, _fd) {
  if (sink == null) dart.nullFailed(L127, 217, 19, "sink");
  if (_fd == null) dart.nullFailed(L127, 217, 30, "_fd");
  this[_nonBlocking] = null;
  this[_fd$] = _fd;
  io.Stdout.__proto__.new.call(this, sink);
  ;
}).prototype = io.Stdout.prototype;
dart.addTypeTests(io.Stdout);
dart.addTypeCaches(io.Stdout);
io.Stdout[dart.implements] = () => [io.IOSink];
dart.setMethodSignature(io.Stdout, () => ({
  __proto__: dart.getMethods(io.Stdout.__proto__),
  [_hasTerminal]: dart.fnType(core.bool, [core.int]),
  [_terminalColumns]: dart.fnType(core.int, [core.int]),
  [_terminalLines]: dart.fnType(core.int, [core.int])
}));
dart.setGetterSignature(io.Stdout, () => ({
  __proto__: dart.getGetters(io.Stdout.__proto__),
  hasTerminal: core.bool,
  terminalColumns: core.int,
  terminalLines: core.int,
  supportsAnsiEscapes: core.bool,
  nonBlocking: io.IOSink
}));
dart.setLibraryUri(io.Stdout, L104);
dart.setFieldSignature(io.Stdout, () => ({
  __proto__: dart.getFields(io.Stdout.__proto__),
  [_fd$]: dart.finalFieldType(core.int),
  [_nonBlocking]: dart.fieldType(dart.nullable(io.IOSink))
}));
var message$8 = dart.privateName(io, "StdoutException.message");
var osError$3 = dart.privateName(io, "StdoutException.osError");
io.StdoutException = class StdoutException extends core.Object {
  get message() {
    return this[message$8];
  }
  set message(value) {
    super.message = value;
  }
  get osError() {
    return this[osError$3];
  }
  set osError(value) {
    super.osError = value;
  }
  toString() {
    return dart.str("StdoutException: ") + dart.str(this.message) + dart.str(this.osError == null ? "" : dart.str(", ") + dart.str(this.osError));
  }
};
(io.StdoutException.new = function(message, osError = null) {
  if (message == null) dart.nullFailed(L127, 281, 30, "message");
  this[message$8] = message;
  this[osError$3] = osError;
  ;
}).prototype = io.StdoutException.prototype;
dart.addTypeTests(io.StdoutException);
dart.addTypeCaches(io.StdoutException);
io.StdoutException[dart.implements] = () => [io.IOException];
dart.setLibraryUri(io.StdoutException, L104);
dart.setFieldSignature(io.StdoutException, () => ({
  __proto__: dart.getFields(io.StdoutException.__proto__),
  message: dart.finalFieldType(core.String),
  osError: dart.finalFieldType(dart.nullable(io.OSError))
}));
dart.defineExtensionMethods(io.StdoutException, ['toString']);
var message$9 = dart.privateName(io, "StdinException.message");
var osError$4 = dart.privateName(io, "StdinException.osError");
io.StdinException = class StdinException extends core.Object {
  get message() {
    return this[message$9];
  }
  set message(value) {
    super.message = value;
  }
  get osError() {
    return this[osError$4];
  }
  set osError(value) {
    super.osError = value;
  }
  toString() {
    return dart.str("StdinException: ") + dart.str(this.message) + dart.str(this.osError == null ? "" : dart.str(", ") + dart.str(this.osError));
  }
};
(io.StdinException.new = function(message, osError = null) {
  if (message == null) dart.nullFailed(L127, 292, 29, "message");
  this[message$9] = message;
  this[osError$4] = osError;
  ;
}).prototype = io.StdinException.prototype;
dart.addTypeTests(io.StdinException);
dart.addTypeCaches(io.StdinException);
io.StdinException[dart.implements] = () => [io.IOException];
dart.setLibraryUri(io.StdinException, L104);
dart.setFieldSignature(io.StdinException, () => ({
  __proto__: dart.getFields(io.StdinException.__proto__),
  message: dart.finalFieldType(core.String),
  osError: dart.finalFieldType(dart.nullable(io.OSError))
}));
dart.defineExtensionMethods(io.StdinException, ['toString']);
io._StdConsumer = class _StdConsumer extends core.Object {
  addStream(stream) {
    StreamOfListOfint().as(stream);
    if (stream == null) dart.nullFailed(L127, 304, 38, "stream");
    let completer = async.Completer.new();
    let sub = null;
    sub = stream.listen(dart.fn(data => {
      if (data == null) dart.nullFailed(L127, 307, 26, "data");
      try {
        dart.dsend(this[_file], 'writeFromSync', [data]);
      } catch (e$) {
        let e = dart.getThrown(e$);
        let s = dart.stackTrace(e$);
        if (core.Object.is(e)) {
          dart.dsend(sub, 'cancel', []);
          completer.completeError(e, s);
        } else
          throw e$;
      }
    }, ListOfintToNullN()), {onError: dart.bind(completer, 'completeError'), onDone: dart.bind(completer, 'complete'), cancelOnError: true});
    return completer.future;
  }
  close() {
    dart.dsend(this[_file], 'closeSync', []);
    return async.Future.value();
  }
};
(io._StdConsumer.new = function(fd) {
  if (fd == null) dart.nullFailed(L127, 302, 20, "fd");
  this[_file] = io._File._openStdioSync(fd);
  ;
}).prototype = io._StdConsumer.prototype;
dart.addTypeTests(io._StdConsumer);
dart.addTypeCaches(io._StdConsumer);
io._StdConsumer[dart.implements] = () => [async.StreamConsumer$(core.List$(core.int))];
dart.setMethodSignature(io._StdConsumer, () => ({
  __proto__: dart.getMethods(io._StdConsumer.__proto__),
  addStream: dart.fnType(async.Future, [dart.nullable(core.Object)]),
  close: dart.fnType(async.Future, [])
}));
dart.setLibraryUri(io._StdConsumer, L104);
dart.setFieldSignature(io._StdConsumer, () => ({
  __proto__: dart.getFields(io._StdConsumer.__proto__),
  [_file]: dart.finalFieldType(dart.dynamic)
}));
var name$11 = dart.privateName(io, "StdioType.name");
var C197;
var C198;
var C199;
var C200;
io.StdioType = class StdioType extends core.Object {
  get name() {
    return this[name$11];
  }
  set name(value) {
    super.name = value;
  }
  toString() {
    return dart.str("StdioType: ") + dart.str(this.name);
  }
};
(io.StdioType.__ = function(name) {
  if (name == null) dart.nullFailed(L127, 384, 26, "name");
  this[name$11] = name;
  ;
}).prototype = io.StdioType.prototype;
dart.addTypeTests(io.StdioType);
dart.addTypeCaches(io.StdioType);
dart.setLibraryUri(io.StdioType, L104);
dart.setFieldSignature(io.StdioType, () => ({
  __proto__: dart.getFields(io.StdioType.__proto__),
  name: dart.finalFieldType(core.String)
}));
dart.defineExtensionMethods(io.StdioType, ['toString']);
dart.defineLazy(io.StdioType, {
  /*io.StdioType.terminal*/get terminal() {
    return C197 || CT.C197;
  },
  /*io.StdioType.pipe*/get pipe() {
    return C198 || CT.C198;
  },
  /*io.StdioType.file*/get file() {
    return C199 || CT.C199;
  },
  /*io.StdioType.other*/get other() {
    return C200 || CT.C200;
  },
  /*io.StdioType.TERMINAL*/get TERMINAL() {
    return C197 || CT.C197;
  },
  /*io.StdioType.PIPE*/get PIPE() {
    return C198 || CT.C198;
  },
  /*io.StdioType.FILE*/get FILE() {
    return C199 || CT.C199;
  },
  /*io.StdioType.OTHER*/get OTHER() {
    return C200 || CT.C200;
  }
}, false);
io._StdIOUtils = class _StdIOUtils extends core.Object {
  static _getStdioOutputStream(fd) {
    if (fd == null) dart.nullFailed(L106, 579, 36, "fd");
    dart.throw(new core.UnsupportedError.new("StdIOUtils._getStdioOutputStream"));
  }
  static _getStdioInputStream(fd) {
    if (fd == null) dart.nullFailed(L106, 574, 41, "fd");
    dart.throw(new core.UnsupportedError.new("StdIOUtils._getStdioInputStream"));
  }
  static _socketType(socket) {
    if (socket == null) dart.nullFailed(L106, 584, 33, "socket");
    dart.throw(new core.UnsupportedError.new("StdIOUtils._socketType"));
  }
  static _getStdioHandleType(fd) {
    if (fd == null) dart.nullFailed(L106, 589, 34, "fd");
    dart.throw(new core.UnsupportedError.new("StdIOUtils._getStdioHandleType"));
  }
};
(io._StdIOUtils.new = function() {
  ;
}).prototype = io._StdIOUtils.prototype;
dart.addTypeTests(io._StdIOUtils);
dart.addTypeCaches(io._StdIOUtils);
dart.setLibraryUri(io._StdIOUtils, L104);
var C201;
var C202;
io.SystemEncoding = class SystemEncoding extends convert.Encoding {
  get name() {
    return "system";
  }
  encode(input) {
    core.String.as(input);
    if (input == null) dart.nullFailed(L128, 28, 27, "input");
    return this.encoder.convert(input);
  }
  decode(encoded) {
    ListOfint().as(encoded);
    if (encoded == null) dart.nullFailed(L128, 29, 27, "encoded");
    return this.decoder.convert(encoded);
  }
  get encoder() {
    if (io.Platform.operatingSystem === "windows") {
      return C201 || CT.C201;
    } else {
      return C100 || CT.C100;
    }
  }
  get decoder() {
    if (io.Platform.operatingSystem === "windows") {
      return C202 || CT.C202;
    } else {
      return C99 || CT.C99;
    }
  }
};
(io.SystemEncoding.new = function() {
  io.SystemEncoding.__proto__.new.call(this);
  ;
}).prototype = io.SystemEncoding.prototype;
dart.addTypeTests(io.SystemEncoding);
dart.addTypeCaches(io.SystemEncoding);
dart.setGetterSignature(io.SystemEncoding, () => ({
  __proto__: dart.getGetters(io.SystemEncoding.__proto__),
  name: core.String,
  encoder: convert.Converter$(core.String, core.List$(core.int)),
  decoder: convert.Converter$(core.List$(core.int), core.String)
}));
dart.setLibraryUri(io.SystemEncoding, L104);
io._WindowsCodePageEncoder = class _WindowsCodePageEncoder extends convert.Converter$(core.String, core.List$(core.int)) {
  convert(input) {
    core.String.as(input);
    if (input == null) dart.nullFailed(L128, 51, 28, "input");
    let encoded = io._WindowsCodePageEncoder._encodeString(input);
    if (encoded == null) {
      dart.throw(new core.FormatException.new("Invalid character for encoding"));
    }
    return encoded;
  }
  startChunkedConversion(sink) {
    SinkOfListOfint().as(sink);
    if (sink == null) dart.nullFailed(L128, 62, 63, "sink");
    return new io._WindowsCodePageEncoderSink.new(sink);
  }
  static _encodeString(string) {
    if (string == null) dart.nullFailed(L106, 605, 41, "string");
    dart.throw(new core.UnsupportedError.new("_WindowsCodePageEncoder._encodeString"));
  }
};
(io._WindowsCodePageEncoder.new = function() {
  io._WindowsCodePageEncoder.__proto__.new.call(this);
  ;
}).prototype = io._WindowsCodePageEncoder.prototype;
dart.addTypeTests(io._WindowsCodePageEncoder);
dart.addTypeCaches(io._WindowsCodePageEncoder);
dart.setMethodSignature(io._WindowsCodePageEncoder, () => ({
  __proto__: dart.getMethods(io._WindowsCodePageEncoder.__proto__),
  convert: dart.fnType(core.List$(core.int), [dart.nullable(core.Object)]),
  startChunkedConversion: dart.fnType(convert.StringConversionSink, [dart.nullable(core.Object)])
}));
dart.setLibraryUri(io._WindowsCodePageEncoder, L104);
io._WindowsCodePageEncoderSink = class _WindowsCodePageEncoderSink extends convert.StringConversionSinkBase {
  close() {
    this[_sink$1].close();
  }
  add(string) {
    core.String.as(string);
    if (string == null) dart.nullFailed(L128, 81, 19, "string");
    let encoded = io._WindowsCodePageEncoder._encodeString(string);
    if (encoded == null) {
      dart.throw(new core.FormatException.new("Invalid character for encoding"));
    }
    this[_sink$1].add(encoded);
  }
  addSlice(source, start, end, isLast) {
    if (source == null) dart.nullFailed(L128, 89, 24, "source");
    if (start == null) dart.nullFailed(L128, 89, 36, "start");
    if (end == null) dart.nullFailed(L128, 89, 47, "end");
    if (isLast == null) dart.nullFailed(L128, 89, 57, "isLast");
    if (start !== 0 || end !== source.length) {
      source = source[$substring](start, end);
    }
    this.add(source);
    if (dart.test(isLast)) this.close();
  }
};
(io._WindowsCodePageEncoderSink.new = function(_sink) {
  if (_sink == null) dart.nullFailed(L128, 75, 36, "_sink");
  this[_sink$1] = _sink;
  ;
}).prototype = io._WindowsCodePageEncoderSink.prototype;
dart.addTypeTests(io._WindowsCodePageEncoderSink);
dart.addTypeCaches(io._WindowsCodePageEncoderSink);
dart.setMethodSignature(io._WindowsCodePageEncoderSink, () => ({
  __proto__: dart.getMethods(io._WindowsCodePageEncoderSink.__proto__),
  close: dart.fnType(dart.void, []),
  addSlice: dart.fnType(dart.void, [core.String, core.int, core.int, core.bool])
}));
dart.setLibraryUri(io._WindowsCodePageEncoderSink, L104);
dart.setFieldSignature(io._WindowsCodePageEncoderSink, () => ({
  __proto__: dart.getFields(io._WindowsCodePageEncoderSink.__proto__),
  [_sink$1]: dart.finalFieldType(core.Sink$(core.List$(core.int)))
}));
io._WindowsCodePageDecoder = class _WindowsCodePageDecoder extends convert.Converter$(core.List$(core.int), core.String) {
  convert(input) {
    ListOfint().as(input);
    if (input == null) dart.nullFailed(L128, 101, 28, "input");
    return io._WindowsCodePageDecoder._decodeBytes(input);
  }
  startChunkedConversion(sink) {
    SinkOfString().as(sink);
    if (sink == null) dart.nullFailed(L128, 108, 58, "sink");
    return new io._WindowsCodePageDecoderSink.new(sink);
  }
  static _decodeBytes(bytes) {
    if (bytes == null) dart.nullFailed(L106, 597, 40, "bytes");
    dart.throw(new core.UnsupportedError.new("_WindowsCodePageDecoder._decodeBytes"));
  }
};
(io._WindowsCodePageDecoder.new = function() {
  io._WindowsCodePageDecoder.__proto__.new.call(this);
  ;
}).prototype = io._WindowsCodePageDecoder.prototype;
dart.addTypeTests(io._WindowsCodePageDecoder);
dart.addTypeCaches(io._WindowsCodePageDecoder);
dart.setMethodSignature(io._WindowsCodePageDecoder, () => ({
  __proto__: dart.getMethods(io._WindowsCodePageDecoder.__proto__),
  convert: dart.fnType(core.String, [dart.nullable(core.Object)]),
  startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)])
}));
dart.setLibraryUri(io._WindowsCodePageDecoder, L104);
io._WindowsCodePageDecoderSink = class _WindowsCodePageDecoderSink extends convert.ByteConversionSinkBase {
  close() {
    this[_sink$1].close();
  }
  add(bytes) {
    ListOfint().as(bytes);
    if (bytes == null) dart.nullFailed(L128, 127, 22, "bytes");
    this[_sink$1].add(io._WindowsCodePageDecoder._decodeBytes(bytes));
  }
};
(io._WindowsCodePageDecoderSink.new = function(_sink) {
  if (_sink == null) dart.nullFailed(L128, 121, 36, "_sink");
  this[_sink$1] = _sink;
  io._WindowsCodePageDecoderSink.__proto__.new.call(this);
  ;
}).prototype = io._WindowsCodePageDecoderSink.prototype;
dart.addTypeTests(io._WindowsCodePageDecoderSink);
dart.addTypeCaches(io._WindowsCodePageDecoderSink);
dart.setMethodSignature(io._WindowsCodePageDecoderSink, () => ({
  __proto__: dart.getMethods(io._WindowsCodePageDecoderSink.__proto__),
  close: dart.fnType(dart.void, []),
  add: dart.fnType(dart.void, [dart.nullable(core.Object)])
}));
dart.setLibraryUri(io._WindowsCodePageDecoderSink, L104);
dart.setFieldSignature(io._WindowsCodePageDecoderSink, () => ({
  __proto__: dart.getFields(io._WindowsCodePageDecoderSink.__proto__),
  [_sink$1]: dart.finalFieldType(core.Sink$(core.String))
}));
io.RawSynchronousSocket = class RawSynchronousSocket extends core.Object {
  static connectSync(host, port) {
    if (port == null) dart.nullFailed(L106, 515, 61, "port");
    dart.throw(new core.UnsupportedError.new("RawSynchronousSocket.connectSync"));
  }
};
(io.RawSynchronousSocket.new = function() {
  ;
}).prototype = io.RawSynchronousSocket.prototype;
dart.addTypeTests(io.RawSynchronousSocket);
dart.addTypeCaches(io.RawSynchronousSocket);
dart.setLibraryUri(io.RawSynchronousSocket, L104);
var C203;
io._isErrorResponse = function _isErrorResponse$(response) {
  return core.List.is(response) && !dart.equals(response[$_get](0), 0);
};
io._exceptionFromResponse = function _exceptionFromResponse$(response, message, path) {
  if (message == null) dart.nullFailed(L105, 25, 41, "message");
  if (path == null) dart.nullFailed(L105, 25, 57, "path");
  if (!dart.test(io._isErrorResponse(response))) dart.assertFailed(null, L105, 26, 10, "_isErrorResponse(response)");
  switch (dart.dsend(response, '_get', [0])) {
    case 1:
    {
      return new core.ArgumentError.new(dart.str(message) + dart.str(": ") + dart.str(path));
    }
    case 2:
    {
      let err = new io.OSError.new(core.String.as(dart.dsend(response, '_get', [2])), core.int.as(dart.dsend(response, '_get', [1])));
      return new io.FileSystemException.new(message, path, err);
    }
    case 3:
    {
      return new io.FileSystemException.new("File closed", path);
    }
    default:
    {
      return core.Exception.new("Unknown error");
    }
  }
};
io._ensureFastAndSerializableByteData = function _ensureFastAndSerializableByteData(buffer, start, end) {
  if (buffer == null) dart.nullFailed(L105, 99, 15, "buffer");
  if (start == null) dart.nullFailed(L105, 99, 27, "start");
  if (end == null) dart.nullFailed(L105, 99, 38, "end");
  if (dart.test(io._isDirectIOCapableTypedList(buffer))) {
    return new io._BufferAndStart.new(buffer, start);
  }
  let length = dart.notNull(end) - dart.notNull(start);
  let newBuffer = _native_typed_data.NativeUint8List.new(length);
  newBuffer[$setRange](0, length, buffer, start);
  return new io._BufferAndStart.new(newBuffer, 0);
};
io._isDirectIOCapableTypedList = function _isDirectIOCapableTypedList(buffer) {
  if (buffer == null) dart.nullFailed(L106, 218, 44, "buffer");
  dart.throw(new core.UnsupportedError.new("_isDirectIOCapableTypedList"));
};
io._validateZLibWindowBits = function _validateZLibWindowBits(windowBits) {
  if (windowBits == null) dart.nullFailed(L107, 646, 34, "windowBits");
  if (8 > dart.notNull(windowBits) || 15 < dart.notNull(windowBits)) {
    dart.throw(new core.RangeError.range(windowBits, 8, 15));
  }
};
io._validateZLibeLevel = function _validateZLibeLevel(level) {
  if (level == null) dart.nullFailed(L107, 654, 30, "level");
  if (-1 > dart.notNull(level) || 9 < dart.notNull(level)) {
    dart.throw(new core.RangeError.range(level, -1, 9));
  }
};
io._validateZLibMemLevel = function _validateZLibMemLevel(memLevel) {
  if (memLevel == null) dart.nullFailed(L107, 660, 32, "memLevel");
  if (1 > dart.notNull(memLevel) || 9 < dart.notNull(memLevel)) {
    dart.throw(new core.RangeError.range(memLevel, 1, 9));
  }
};
io._validateZLibStrategy = function _validateZLibStrategy(strategy) {
  if (strategy == null) dart.nullFailed(L107, 667, 32, "strategy");
  let strategies = C203 || CT.C203;
  if (strategies[$indexOf](strategy) === -1) {
    dart.throw(new core.ArgumentError.new("Unsupported 'strategy'"));
  }
};
io.isInsecureConnectionAllowed = function isInsecureConnectionAllowed(host) {
  let t198, t198$;
  let hostString = null;
  if (typeof host == 'string') {
    try {
      if ("localhost" === host || dart.test(io.InternetAddress.new(host).isLoopback)) return true;
    } catch (e) {
      let ex = dart.getThrown(e);
      if (core.ArgumentError.is(ex)) {
      } else
        throw e;
    }
    hostString = host;
  } else if (io.InternetAddress.is(host)) {
    if (dart.test(host.isLoopback)) return true;
    hostString = host.host;
  } else {
    dart.throw(new core.ArgumentError.value(host, "host", "Must be a String or InternetAddress"));
  }
  let topMatchedPolicy = io._findBestDomainNetworkPolicy(hostString);
  let envOverride = core.bool.fromEnvironment("dart.library.io.may_insecurely_connect_to_all_domains", {defaultValue: true});
  t198$ = (t198 = topMatchedPolicy, t198 == null ? null : t198.allowInsecureConnections);
  return t198$ == null ? dart.test(envOverride) && dart.test(io._EmbedderConfig._mayInsecurelyConnectToAllDomains) : t198$;
};
io._findBestDomainNetworkPolicy = function _findBestDomainNetworkPolicy(domain) {
  if (domain == null) dart.nullFailed(L117, 154, 59, "domain");
  let topScore = 0;
  let topPolicy = null;
  for (let policy of io._domainPolicies) {
    let score = policy.matchScore(domain);
    if (dart.notNull(score) > dart.notNull(topScore)) {
      topScore = score;
      topPolicy = policy;
    }
  }
  return topPolicy;
};
io._constructDomainPolicies = function _constructDomainPolicies(domainPoliciesString) {
  let domainPolicies = JSArrayOf_DomainNetworkPolicy().of([]);
  domainPoliciesString == null ? domainPoliciesString = core.String.fromEnvironment("dart.library.io.domain_network_policies", {defaultValue: ""}) : null;
  if (domainPoliciesString[$isNotEmpty]) {
    let policiesJson = core.List.as(convert.json.decode(domainPoliciesString));
    for (let t198 of policiesJson) {
      let policyJson = core.List.as(t198);
      if (!(policyJson[$length] === 3)) dart.assertFailed(null, L117, 180, 14, "policyJson.length == 3");
      let policy = new io._DomainNetworkPolicy.new(core.String.as(policyJson[$_get](0)), {includesSubDomains: core.bool.as(policyJson[$_get](1)), allowInsecureConnections: core.bool.as(policyJson[$_get](2))});
      if (dart.test(policy.checkConflict(domainPolicies))) {
        domainPolicies[$add](policy);
      }
    }
  }
  return domainPolicies;
};
io._success = function _success() {
  return convert.json.encode(new (IdentityMapOfString$String()).from(["type", "Success"]));
};
io._invalidArgument = function _invalidArgument(argument, value) {
  if (argument == null) dart.nullFailed(L118, 91, 32, "argument");
  return dart.str("Value for parameter '") + dart.str(argument) + dart.str("' is not valid: ") + dart.str(value);
};
io._missingArgument = function _missingArgument(argument) {
  if (argument == null) dart.nullFailed(L118, 94, 32, "argument");
  return dart.str("Parameter '") + dart.str(argument) + dart.str("' is required");
};

io.exit = function exit(code) {
  if (code == null) dart.nullFailed(L121, 52, 16, "code");
  core.ArgumentError.checkNotNull(core.int, code, "code");
  if (!dart.test(io._EmbedderConfig._mayExit)) {
    dart.throw(new core.UnsupportedError.new("This embedder disallows calling dart:io's exit()"));
  }
  io._ProcessUtils._exit(code);
};
io.sleep = function sleep(duration) {
  if (duration == null) dart.nullFailed(L121, 96, 21, "duration");
  let milliseconds = duration.inMilliseconds;
  if (dart.notNull(milliseconds) < 0) {
    dart.throw(new core.ArgumentError.new("sleep: duration cannot be negative"));
  }
  if (!dart.test(io._EmbedderConfig._maySleep)) {
    dart.throw(new core.UnsupportedError.new("This embedder disallows calling dart:io's sleep()"));
  }
  io._ProcessUtils._sleep(milliseconds);
};
io._setStdioFDs = function _setStdioFDs(stdin, stdout, stderr) {
  if (stdin == null) dart.nullFailed(L127, 399, 23, "stdin");
  if (stdout == null) dart.nullFailed(L127, 399, 34, "stdout");
  if (stderr == null) dart.nullFailed(L127, 399, 46, "stderr");
  io._stdinFD = stdin;
  io._stdoutFD = stdout;
  io._stderrFD = stderr;
};
io.stdioType = function stdioType(object) {
  if (io._StdStream.is(object)) {
    object = object[_stream$0];
  } else if (dart.equals(object, io.stdout) || dart.equals(object, io.stderr)) {
    let stdiofd = dart.equals(object, io.stdout) ? io._stdoutFD : io._stderrFD;
    let type = io._StdIOUtils._getStdioHandleType(stdiofd);
    if (io.OSError.is(type)) {
      dart.throw(new io.FileSystemException.new(dart.str("Failed to get type of stdio handle (fd ") + dart.str(stdiofd) + dart.str(")"), "", type));
    }
    switch (type) {
      case 0:
      {
        return io.StdioType.terminal;
      }
      case 1:
      {
        return io.StdioType.pipe;
      }
      case 2:
      {
        return io.StdioType.file;
      }
    }
  }
  if (io._FileStream.is(object)) {
    return io.StdioType.file;
  }
  if (io.Socket.is(object)) {
    let socketType = io._StdIOUtils._socketType(object);
    if (socketType == null) return io.StdioType.other;
    switch (socketType) {
      case 0:
      {
        return io.StdioType.terminal;
      }
      case 1:
      {
        return io.StdioType.pipe;
      }
      case 2:
      {
        return io.StdioType.file;
      }
    }
  }
  if (io._IOSinkImpl.is(object)) {
    try {
      if (io._FileStreamConsumer.is(object[_target$0])) {
        return io.StdioType.file;
      }
    } catch (e$) {
      let e = dart.getThrown(e$);
      if (core.Object.is(e)) {
      } else
        throw e$;
    }
  }
  return io.StdioType.other;
};
dart.copyProperties(io, {
  get _domainPolicies() {
    let t200;
    t200 = io['_#_domainPolicies'];
    return t200 == null ? io['_#_domainPolicies'] = io._constructDomainPolicies(null) : t200;
  },
  set _domainPolicies(t200) {
    if (t200 == null) dart.nullFailed(L117, 168, 33, "null");
    io['_#_domainPolicies'] = t200;
  },
  set exitCode(code) {
    if (code == null) dart.nullFailed(L121, 73, 23, "code");
    core.ArgumentError.checkNotNull(core.int, code, "code");
    io._ProcessUtils._setExitCode(code);
  },
  get exitCode() {
    return io._ProcessUtils._getExitCode();
  },
  get pid() {
    return io._ProcessUtils._pid(null);
  },
  get stdin() {
    let t201;
    t201 = io._stdin;
    return t201 == null ? io._stdin = io._StdIOUtils._getStdioInputStream(io._stdinFD) : t201;
  },
  get stdout() {
    let t201;
    return io.Stdout.as((t201 = io._stdout, t201 == null ? io._stdout = StdoutN().as(io._StdIOUtils._getStdioOutputStream(io._stdoutFD)) : t201));
  },
  get stderr() {
    let t201;
    return io.Stdout.as((t201 = io._stderr, t201 == null ? io._stderr = StdoutN().as(io._StdIOUtils._getStdioOutputStream(io._stderrFD)) : t201));
  }
});
var C204;
var C205;
var C206;
dart.defineLazy(io, {
  /*io._successResponse*/get _successResponse() {
    return 0;
  },
  /*io._illegalArgumentResponse*/get _illegalArgumentResponse() {
    return 1;
  },
  /*io._osErrorResponse*/get _osErrorResponse() {
    return 2;
  },
  /*io._fileClosedResponse*/get _fileClosedResponse() {
    return 3;
  },
  /*io._errorResponseErrorType*/get _errorResponseErrorType() {
    return 0;
  },
  /*io._osErrorResponseErrorCode*/get _osErrorResponseErrorCode() {
    return 1;
  },
  /*io._osErrorResponseMessage*/get _osErrorResponseMessage() {
    return 2;
  },
  /*io.zlib*/get zlib() {
    return C204 || CT.C204;
  },
  /*io.ZLIB*/get ZLIB() {
    return C204 || CT.C204;
  },
  /*io.gzip*/get gzip() {
    return C205 || CT.C205;
  },
  /*io.GZIP*/get GZIP() {
    return C205 || CT.C205;
  },
  /*io.READ*/get READ() {
    return C108 || CT.C108;
  },
  /*io.WRITE*/get WRITE() {
    return C109 || CT.C109;
  },
  /*io.APPEND*/get APPEND() {
    return C110 || CT.C110;
  },
  /*io.WRITE_ONLY*/get WRITE_ONLY() {
    return C111 || CT.C111;
  },
  /*io.WRITE_ONLY_APPEND*/get WRITE_ONLY_APPEND() {
    return C112 || CT.C112;
  },
  /*io._blockSize*/get _blockSize() {
    return 65536;
  },
  /*io['_#_domainPolicies']*/get ['_#_domainPolicies']() {
    return null;
  },
  set ['_#_domainPolicies'](_) {},
  /*io._versionMajor*/get _versionMajor() {
    return 1;
  },
  /*io._versionMinor*/get _versionMinor() {
    return 1;
  },
  /*io._tcpSocket*/get _tcpSocket() {
    return "tcp";
  },
  /*io._udpSocket*/get _udpSocket() {
    return "udp";
  },
  /*io._ioOverridesToken*/get _ioOverridesToken() {
    return new core.Object.new();
  },
  /*io._asyncRunZoned*/get _asyncRunZoned() {
    return C206 || CT.C206;
  },
  /*io._nextServiceId*/get _nextServiceId() {
    return 1;
  },
  set _nextServiceId(_) {},
  /*io._stdioHandleTypeTerminal*/get _stdioHandleTypeTerminal() {
    return 0;
  },
  /*io._stdioHandleTypePipe*/get _stdioHandleTypePipe() {
    return 1;
  },
  /*io._stdioHandleTypeFile*/get _stdioHandleTypeFile() {
    return 2;
  },
  /*io._stdioHandleTypeSocket*/get _stdioHandleTypeSocket() {
    return 3;
  },
  /*io._stdioHandleTypeOther*/get _stdioHandleTypeOther() {
    return 4;
  },
  /*io._stdioHandleTypeError*/get _stdioHandleTypeError() {
    return 5;
  },
  /*io._stdin*/get _stdin() {
    return null;
  },
  set _stdin(_) {},
  /*io._stdout*/get _stdout() {
    return null;
  },
  set _stdout(_) {},
  /*io._stderr*/get _stderr() {
    return null;
  },
  set _stderr(_) {},
  /*io._stdinFD*/get _stdinFD() {
    return 0;
  },
  set _stdinFD(_) {},
  /*io._stdoutFD*/get _stdoutFD() {
    return 1;
  },
  set _stdoutFD(_) {},
  /*io._stderrFD*/get _stderrFD() {
    return 2;
  },
  set _stderrFD(_) {},
  /*io.systemEncoding*/get systemEncoding() {
    return C142 || CT.C142;
  },
  /*io.SYSTEM_ENCODING*/get SYSTEM_ENCODING() {
    return C142 || CT.C142;
  }
}, false);
isolate$._ReceivePort = class _ReceivePort extends async.Stream {
  close() {
  }
  get sendPort() {
    return isolate$._unsupported();
  }
  listen(onData, opts) {
    let onError = opts && 'onError' in opts ? opts.onError : null;
    let onDone = opts && 'onDone' in opts ? opts.onDone : null;
    let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : true;
    return isolate$._unsupported();
  }
};
(isolate$._ReceivePort.new = function() {
  isolate$._ReceivePort.__proto__.new.call(this);
  ;
}).prototype = isolate$._ReceivePort.prototype;
dart.addTypeTests(isolate$._ReceivePort);
dart.addTypeCaches(isolate$._ReceivePort);
isolate$._ReceivePort[dart.implements] = () => [isolate$.ReceivePort];
dart.setMethodSignature(isolate$._ReceivePort, () => ({
  __proto__: dart.getMethods(isolate$._ReceivePort.__proto__),
  close: dart.fnType(dart.void, []),
  listen: dart.fnType(async.StreamSubscription, [dart.nullable(dart.fnType(dart.void, [dart.dynamic]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {})
}));
dart.setGetterSignature(isolate$._ReceivePort, () => ({
  __proto__: dart.getGetters(isolate$._ReceivePort.__proto__),
  sendPort: isolate$.SendPort
}));
dart.setLibraryUri(isolate$._ReceivePort, L129);
var message$10 = dart.privateName(isolate$, "IsolateSpawnException.message");
isolate$.IsolateSpawnException = class IsolateSpawnException extends core.Object {
  get message() {
    return this[message$10];
  }
  set message(value) {
    super.message = value;
  }
  toString() {
    return dart.str("IsolateSpawnException: ") + dart.str(this.message);
  }
};
(isolate$.IsolateSpawnException.new = function(message) {
  if (message == null) dart.nullFailed(L130, 32, 30, "message");
  this[message$10] = message;
  ;
}).prototype = isolate$.IsolateSpawnException.prototype;
dart.addTypeTests(isolate$.IsolateSpawnException);
dart.addTypeCaches(isolate$.IsolateSpawnException);
isolate$.IsolateSpawnException[dart.implements] = () => [core.Exception];
dart.setLibraryUri(isolate$.IsolateSpawnException, L129);
dart.setFieldSignature(isolate$.IsolateSpawnException, () => ({
  __proto__: dart.getFields(isolate$.IsolateSpawnException.__proto__),
  message: dart.finalFieldType(core.String)
}));
dart.defineExtensionMethods(isolate$.IsolateSpawnException, ['toString']);
var _pause = dart.privateName(isolate$, "_pause");
var controlPort$ = dart.privateName(isolate$, "Isolate.controlPort");
var pauseCapability$ = dart.privateName(isolate$, "Isolate.pauseCapability");
var terminateCapability$ = dart.privateName(isolate$, "Isolate.terminateCapability");
isolate$.Isolate = class Isolate extends core.Object {
  get controlPort() {
    return this[controlPort$];
  }
  set controlPort(value) {
    super.controlPort = value;
  }
  get pauseCapability() {
    return this[pauseCapability$];
  }
  set pauseCapability(value) {
    super.pauseCapability = value;
  }
  get terminateCapability() {
    return this[terminateCapability$];
  }
  set terminateCapability(value) {
    super.terminateCapability = value;
  }
  get debugName() {
    return isolate$._unsupported();
  }
  static get current() {
    return isolate$._unsupported();
  }
  static get packageRoot() {
    return isolate$._unsupported();
  }
  static get packageConfig() {
    return isolate$._unsupported();
  }
  static resolvePackageUri(packageUri) {
    if (packageUri == null) dart.nullFailed(L131, 28, 45, "packageUri");
    return isolate$._unsupported();
  }
  static spawn(T, entryPoint, message, opts) {
    if (entryPoint == null) dart.nullFailed(L131, 31, 40, "entryPoint");
    let paused = opts && 'paused' in opts ? opts.paused : false;
    if (paused == null) dart.nullFailed(L131, 32, 17, "paused");
    let errorsAreFatal = opts && 'errorsAreFatal' in opts ? opts.errorsAreFatal : true;
    if (errorsAreFatal == null) dart.nullFailed(L131, 33, 16, "errorsAreFatal");
    let onExit = opts && 'onExit' in opts ? opts.onExit : null;
    let onError = opts && 'onError' in opts ? opts.onError : null;
    return isolate$._unsupported();
  }
  static spawnUri(uri, args, message, opts) {
    if (uri == null) dart.nullFailed(L131, 39, 39, "uri");
    if (args == null) dart.nullFailed(L131, 39, 57, "args");
    let paused = opts && 'paused' in opts ? opts.paused : false;
    if (paused == null) dart.nullFailed(L131, 40, 17, "paused");
    let onExit = opts && 'onExit' in opts ? opts.onExit : null;
    let onError = opts && 'onError' in opts ? opts.onError : null;
    let errorsAreFatal = opts && 'errorsAreFatal' in opts ? opts.errorsAreFatal : true;
    if (errorsAreFatal == null) dart.nullFailed(L131, 43, 16, "errorsAreFatal");
    let checked = opts && 'checked' in opts ? opts.checked : null;
    let environment = opts && 'environment' in opts ? opts.environment : null;
    let packageRoot = opts && 'packageRoot' in opts ? opts.packageRoot : null;
    let packageConfig = opts && 'packageConfig' in opts ? opts.packageConfig : null;
    let automaticPackageResolution = opts && 'automaticPackageResolution' in opts ? opts.automaticPackageResolution : false;
    if (automaticPackageResolution == null) dart.nullFailed(L131, 48, 16, "automaticPackageResolution");
    let debugName = opts && 'debugName' in opts ? opts.debugName : null;
    return isolate$._unsupported();
  }
  pause(resumeCapability = null) {
    resumeCapability == null ? resumeCapability = isolate$.Capability.new() : null;
    this[_pause](resumeCapability);
    return resumeCapability;
  }
  [_pause](resumeCapability) {
    if (resumeCapability == null) dart.nullFailed(L131, 53, 26, "resumeCapability");
    return isolate$._unsupported();
  }
  resume(resumeCapability) {
    if (resumeCapability == null) dart.nullFailed(L131, 56, 26, "resumeCapability");
    return isolate$._unsupported();
  }
  addOnExitListener(responsePort, opts) {
    if (responsePort == null) dart.nullFailed(L131, 59, 35, "responsePort");
    let response = opts && 'response' in opts ? opts.response : null;
    return isolate$._unsupported();
  }
  removeOnExitListener(responsePort) {
    if (responsePort == null) dart.nullFailed(L131, 63, 38, "responsePort");
    return isolate$._unsupported();
  }
  setErrorsFatal(errorsAreFatal) {
    if (errorsAreFatal == null) dart.nullFailed(L131, 66, 28, "errorsAreFatal");
    return isolate$._unsupported();
  }
  kill(opts) {
    let priority = opts && 'priority' in opts ? opts.priority : 1;
    if (priority == null) dart.nullFailed(L131, 69, 18, "priority");
    return isolate$._unsupported();
  }
  ping(responsePort, opts) {
    if (responsePort == null) dart.nullFailed(L131, 71, 22, "responsePort");
    let response = opts && 'response' in opts ? opts.response : null;
    let priority = opts && 'priority' in opts ? opts.priority : 0;
    if (priority == null) dart.nullFailed(L131, 72, 34, "priority");
    return isolate$._unsupported();
  }
  addErrorListener(port) {
    if (port == null) dart.nullFailed(L131, 76, 34, "port");
    return isolate$._unsupported();
  }
  removeErrorListener(port) {
    if (port == null) dart.nullFailed(L131, 79, 37, "port");
    return isolate$._unsupported();
  }
  get errors() {
    let controller = async.StreamController.broadcast({sync: true});
    let port = null;
    function handleError(message) {
      let listMessage = ListOfObjectN().as(message);
      let errorDescription = core.String.as(listMessage[$_get](0));
      let stackDescription = core.String.as(listMessage[$_get](1));
      let error = new isolate$.RemoteError.new(errorDescription, stackDescription);
      controller.addError(error, error.stackTrace);
    }
    dart.fn(handleError, ObjectNTovoid$());
    controller.onListen = dart.fn(() => {
      let receivePort = isolate$.RawReceivePort.new(handleError);
      port = receivePort;
      this.addErrorListener(receivePort.sendPort);
    }, VoidToNullN());
    controller.onCancel = dart.fn(() => {
      let listenPort = dart.nullCheck(port);
      port = null;
      this.removeErrorListener(listenPort.sendPort);
      listenPort.close();
    }, VoidToNullN());
    return controller.stream;
  }
};
(isolate$.Isolate.new = function(controlPort, opts) {
  if (controlPort == null) dart.nullFailed(L130, 156, 16, "controlPort");
  let pauseCapability = opts && 'pauseCapability' in opts ? opts.pauseCapability : null;
  let terminateCapability = opts && 'terminateCapability' in opts ? opts.terminateCapability : null;
  this[controlPort$] = controlPort;
  this[pauseCapability$] = pauseCapability;
  this[terminateCapability$] = terminateCapability;
  ;
}).prototype = isolate$.Isolate.prototype;
dart.addTypeTests(isolate$.Isolate);
dart.addTypeCaches(isolate$.Isolate);
dart.setMethodSignature(isolate$.Isolate, () => ({
  __proto__: dart.getMethods(isolate$.Isolate.__proto__),
  pause: dart.fnType(isolate$.Capability, [], [dart.nullable(isolate$.Capability)]),
  [_pause]: dart.fnType(dart.void, [isolate$.Capability]),
  resume: dart.fnType(dart.void, [isolate$.Capability]),
  addOnExitListener: dart.fnType(dart.void, [isolate$.SendPort], {response: dart.nullable(core.Object)}, {}),
  removeOnExitListener: dart.fnType(dart.void, [isolate$.SendPort]),
  setErrorsFatal: dart.fnType(dart.void, [core.bool]),
  kill: dart.fnType(dart.void, [], {priority: core.int}, {}),
  ping: dart.fnType(dart.void, [isolate$.SendPort], {priority: core.int, response: dart.nullable(core.Object)}, {}),
  addErrorListener: dart.fnType(dart.void, [isolate$.SendPort]),
  removeErrorListener: dart.fnType(dart.void, [isolate$.SendPort])
}));
dart.setGetterSignature(isolate$.Isolate, () => ({
  __proto__: dart.getGetters(isolate$.Isolate.__proto__),
  debugName: dart.nullable(core.String),
  errors: async.Stream
}));
dart.setLibraryUri(isolate$.Isolate, L129);
dart.setFieldSignature(isolate$.Isolate, () => ({
  __proto__: dart.getFields(isolate$.Isolate.__proto__),
  controlPort: dart.finalFieldType(isolate$.SendPort),
  pauseCapability: dart.finalFieldType(dart.nullable(isolate$.Capability)),
  terminateCapability: dart.finalFieldType(dart.nullable(isolate$.Capability))
}));
dart.defineLazy(isolate$.Isolate, {
  /*isolate$.Isolate.immediate*/get immediate() {
    return 0;
  },
  /*isolate$.Isolate.beforeNextEvent*/get beforeNextEvent() {
    return 1;
  }
}, false);
isolate$.SendPort = class SendPort extends core.Object {};
(isolate$.SendPort.new = function() {
  ;
}).prototype = isolate$.SendPort.prototype;
dart.addTypeTests(isolate$.SendPort);
dart.addTypeCaches(isolate$.SendPort);
isolate$.SendPort[dart.implements] = () => [isolate$.Capability];
dart.setLibraryUri(isolate$.SendPort, L129);
isolate$.ReceivePort = class ReceivePort extends core.Object {
  static fromRawReceivePort(rawPort) {
    if (rawPort == null) dart.nullFailed(L131, 89, 57, "rawPort");
    return isolate$._unsupported();
  }
};
(isolate$.ReceivePort[dart.mixinNew] = function() {
}).prototype = isolate$.ReceivePort.prototype;
isolate$.ReceivePort.prototype[dart.isStream] = true;
dart.addTypeTests(isolate$.ReceivePort);
dart.addTypeCaches(isolate$.ReceivePort);
isolate$.ReceivePort[dart.implements] = () => [async.Stream];
dart.setLibraryUri(isolate$.ReceivePort, L129);
isolate$.RawReceivePort = class RawReceivePort extends core.Object {
  static new(handler = null) {
    return isolate$._unsupported();
  }
};
(isolate$.RawReceivePort[dart.mixinNew] = function() {
}).prototype = isolate$.RawReceivePort.prototype;
dart.addTypeTests(isolate$.RawReceivePort);
dart.addTypeCaches(isolate$.RawReceivePort);
dart.setLibraryUri(isolate$.RawReceivePort, L129);
var _description = dart.privateName(isolate$, "_description");
var stackTrace$0 = dart.privateName(isolate$, "RemoteError.stackTrace");
isolate$.RemoteError = class RemoteError extends core.Object {
  get stackTrace() {
    return this[stackTrace$0];
  }
  set stackTrace(value) {
    super.stackTrace = value;
  }
  toString() {
    return this[_description];
  }
};
(isolate$.RemoteError.new = function(description, stackDescription) {
  if (description == null) dart.nullFailed(L130, 753, 22, "description");
  if (stackDescription == null) dart.nullFailed(L130, 753, 42, "stackDescription");
  this[_description] = description;
  this[stackTrace$0] = new core._StringStackTrace.new(stackDescription);
  ;
}).prototype = isolate$.RemoteError.prototype;
dart.addTypeTests(isolate$.RemoteError);
dart.addTypeCaches(isolate$.RemoteError);
isolate$.RemoteError[dart.implements] = () => [core.Error];
dart.setLibraryUri(isolate$.RemoteError, L129);
dart.setFieldSignature(isolate$.RemoteError, () => ({
  __proto__: dart.getFields(isolate$.RemoteError.__proto__),
  [_description]: dart.finalFieldType(core.String),
  stackTrace: dart.finalFieldType(core.StackTrace)
}));
dart.defineExtensionMethods(isolate$.RemoteError, ['toString']);
dart.defineExtensionAccessors(isolate$.RemoteError, ['stackTrace']);
isolate$.TransferableTypedData = class TransferableTypedData extends core.Object {
  static fromList(list) {
    if (list == null) dart.nullFailed(L131, 123, 58, "list");
    return isolate$._unsupported();
  }
};
(isolate$.TransferableTypedData[dart.mixinNew] = function() {
}).prototype = isolate$.TransferableTypedData.prototype;
dart.addTypeTests(isolate$.TransferableTypedData);
dart.addTypeCaches(isolate$.TransferableTypedData);
dart.setLibraryUri(isolate$.TransferableTypedData, L129);
isolate$.Capability = class Capability extends core.Object {
  static new() {
    return isolate$._unsupported();
  }
};
(isolate$.Capability[dart.mixinNew] = function() {
}).prototype = isolate$.Capability.prototype;
dart.addTypeTests(isolate$.Capability);
dart.addTypeCaches(isolate$.Capability);
dart.setLibraryUri(isolate$.Capability, L129);
isolate$._unsupported = function _unsupported() {
  dart.throw(new core.UnsupportedError.new("dart:isolate is not supported on dart4web"));
};
var _dartObj$ = dart.privateName(js, "_dartObj");
js._DartObject = class _DartObject extends core.Object {};
(js._DartObject.new = function(_dartObj) {
  if (_dartObj == null) dart.nullFailed(L132, 327, 20, "_dartObj");
  this[_dartObj$] = _dartObj;
  ;
}).prototype = js._DartObject.prototype;
dart.addTypeTests(js._DartObject);
dart.addTypeCaches(js._DartObject);
dart.setLibraryUri(js._DartObject, L133);
dart.setFieldSignature(js._DartObject, () => ({
  __proto__: dart.getFields(js._DartObject.__proto__),
  [_dartObj$]: dart.finalFieldType(core.Object)
}));
var _jsObject$ = dart.privateName(js, "_jsObject");
var C207;
js.JsObject = class JsObject extends core.Object {
  static _convertDataTree(data) {
    if (data == null) dart.nullFailed(L132, 55, 34, "data");
    let _convertedObjects = new _js_helper.IdentityMap.new();
    function _convert(o) {
      if (dart.test(_convertedObjects[$containsKey](o))) {
        return _convertedObjects[$_get](o);
      }
      if (core.Map.is(o)) {
        let convertedMap = {};
        _convertedObjects[$_set](o, convertedMap);
        for (let key of o[$keys]) {
          convertedMap[key] = _convert(o[$_get](key));
        }
        return convertedMap;
      } else if (core.Iterable.is(o)) {
        let convertedList = [];
        _convertedObjects[$_set](o, convertedList);
        convertedList[$addAll](o[$map](dart.dynamic, _convert));
        return convertedList;
      } else {
        return js._convertToJS(o);
      }
    }
    dart.fn(_convert, ObjectNTodynamic());
    return _convert(data);
  }
  static new(constructor, $arguments = null) {
    if (constructor == null) dart.nullFailed(L132, 30, 31, "constructor");
    let ctor = constructor[_jsObject$];
    if ($arguments == null) {
      return js._wrapToDart(new ctor());
    }
    let unwrapped = core.List.from($arguments[$map](dart.dynamic, C207 || CT.C207));
    return js._wrapToDart(new ctor(...unwrapped));
  }
  static fromBrowserObject(object) {
    if (object == null) dart.nullFailed(L132, 40, 45, "object");
    if (typeof object == 'number' || typeof object == 'string' || typeof object == 'boolean' || object == null) {
      dart.throw(new core.ArgumentError.new("object cannot be a num, string, bool, or null"));
    }
    return js._wrapToDart(dart.nullCheck(js._convertToJS(object)));
  }
  static jsify(object) {
    if (object == null) dart.nullFailed(L132, 48, 33, "object");
    if (!core.Map.is(object) && !core.Iterable.is(object)) {
      dart.throw(new core.ArgumentError.new("object must be a Map or Iterable"));
    }
    return js._wrapToDart(core.Object.as(js.JsObject._convertDataTree(object)));
  }
  _get(property) {
    if (property == null) dart.nullFailed(L132, 83, 30, "property");
    if (!(typeof property == 'string') && !(typeof property == 'number')) {
      dart.throw(new core.ArgumentError.new("property is not a String or num"));
    }
    return js._convertToDart(this[_jsObject$][property]);
  }
  _set(property, value$) {
    let value = value$;
    if (property == null) dart.nullFailed(L132, 91, 28, "property");
    if (!(typeof property == 'string') && !(typeof property == 'number')) {
      dart.throw(new core.ArgumentError.new("property is not a String or num"));
    }
    this[_jsObject$][property] = js._convertToJS(value);
    return value$;
  }
  get hashCode() {
    return 0;
  }
  _equals(other) {
    if (other == null) return false;
    return js.JsObject.is(other) && this[_jsObject$] === other[_jsObject$];
  }
  hasProperty(property) {
    if (property == null) dart.nullFailed(L132, 103, 27, "property");
    if (!(typeof property == 'string') && !(typeof property == 'number')) {
      dart.throw(new core.ArgumentError.new("property is not a String or num"));
    }
    return property in this[_jsObject$];
  }
  deleteProperty(property) {
    if (property == null) dart.nullFailed(L132, 111, 30, "property");
    if (!(typeof property == 'string') && !(typeof property == 'number')) {
      dart.throw(new core.ArgumentError.new("property is not a String or num"));
    }
    delete this[_jsObject$][property];
  }
  instanceof(type) {
    if (type == null) dart.nullFailed(L132, 119, 30, "type");
    return this[_jsObject$] instanceof js._convertToJS(type);
  }
  toString() {
    try {
      return String(this[_jsObject$]);
    } catch (e$) {
      let e = dart.getThrown(e$);
      if (core.Object.is(e)) {
        return super[$toString]();
      } else
        throw e$;
    }
  }
  callMethod(method, args = null) {
    if (method == null) dart.nullFailed(L132, 133, 29, "method");
    if (!(typeof method == 'string') && !(typeof method == 'number')) {
      dart.throw(new core.ArgumentError.new("method is not a String or num"));
    }
    if (args != null) args = core.List.from(args[$map](dart.dynamic, C207 || CT.C207));
    let fn = this[_jsObject$][method];
    if (typeof fn !== "function") {
      dart.throw(new core.NoSuchMethodError.new(this[_jsObject$], new _internal.Symbol.new(dart.str(method)), args, new (LinkedMapOfSymbol$dynamic()).new()));
    }
    return js._convertToDart(fn.apply(this[_jsObject$], args));
  }
};
(js.JsObject._fromJs = function(_jsObject) {
  if (_jsObject == null) dart.nullFailed(L132, 25, 25, "_jsObject");
  this[_jsObject$] = _jsObject;
  if (!(this[_jsObject$] != null)) dart.assertFailed(null, L132, 26, 12, "_jsObject != null");
}).prototype = js.JsObject.prototype;
dart.addTypeTests(js.JsObject);
dart.addTypeCaches(js.JsObject);
dart.setMethodSignature(js.JsObject, () => ({
  __proto__: dart.getMethods(js.JsObject.__proto__),
  _get: dart.fnType(dart.dynamic, [core.Object]),
  _set: dart.fnType(dart.void, [core.Object, dart.nullable(core.Object)]),
  hasProperty: dart.fnType(core.bool, [core.Object]),
  deleteProperty: dart.fnType(dart.void, [core.Object]),
  instanceof: dart.fnType(core.bool, [js.JsFunction]),
  callMethod: dart.fnType(dart.dynamic, [core.Object], [dart.nullable(core.List)])
}));
dart.setLibraryUri(js.JsObject, L133);
dart.setFieldSignature(js.JsObject, () => ({
  __proto__: dart.getFields(js.JsObject.__proto__),
  [_jsObject$]: dart.finalFieldType(core.Object)
}));
dart.defineExtensionMethods(js.JsObject, ['_equals', 'toString']);
dart.defineExtensionAccessors(js.JsObject, ['hashCode']);
js.JsFunction = class JsFunction extends js.JsObject {
  static withThis(f) {
    if (f == null) dart.nullFailed(L132, 149, 40, "f");
    return new js.JsFunction._fromJs(function() {
      let args = [js._convertToDart(this)];
      for (let arg of arguments) {
        args.push(js._convertToDart(arg));
      }
      return js._convertToJS(f(...args));
    });
  }
  apply(args, opts) {
    if (args == null) dart.nullFailed(L132, 168, 22, "args");
    let thisArg = opts && 'thisArg' in opts ? opts.thisArg : null;
    return js._convertToDart(this[_jsObject$].apply(js._convertToJS(thisArg), args == null ? null : core.List.from(args[$map](dart.dynamic, js._convertToJS))));
  }
};
(js.JsFunction._fromJs = function(jsObject) {
  if (jsObject == null) dart.nullFailed(L132, 165, 29, "jsObject");
  js.JsFunction.__proto__._fromJs.call(this, jsObject);
  ;
}).prototype = js.JsFunction.prototype;
dart.addTypeTests(js.JsFunction);
dart.addTypeCaches(js.JsFunction);
dart.setMethodSignature(js.JsFunction, () => ({
  __proto__: dart.getMethods(js.JsFunction.__proto__),
  apply: dart.fnType(dart.dynamic, [core.List], {thisArg: dart.dynamic}, {})
}));
dart.setLibraryUri(js.JsFunction, L133);
var _checkIndex = dart.privateName(js, "_checkIndex");
var _checkInsertIndex = dart.privateName(js, "_checkInsertIndex");
const _is_JsArray_default = Symbol('_is_JsArray_default');
js.JsArray$ = dart.generic(E => {
  var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
  const JsObject_ListMixin$36 = class JsObject_ListMixin extends js.JsObject {};
  (JsObject_ListMixin$36._fromJs = function(_jsObject) {
    JsObject_ListMixin$36.__proto__._fromJs.call(this, _jsObject);
  }).prototype = JsObject_ListMixin$36.prototype;
  dart.applyMixin(JsObject_ListMixin$36, collection.ListMixin$(E));
  class JsArray extends JsObject_ListMixin$36 {
    [_checkIndex](index) {
      if (index == null) dart.nullFailed(L132, 188, 19, "index");
      if (dart.notNull(index) < 0 || dart.notNull(index) >= dart.notNull(this.length)) {
        dart.throw(new core.RangeError.range(index, 0, this.length));
      }
    }
    [_checkInsertIndex](index) {
      if (index == null) dart.nullFailed(L132, 194, 25, "index");
      if (dart.notNull(index) < 0 || dart.notNull(index) >= dart.notNull(this.length) + 1) {
        dart.throw(new core.RangeError.range(index, 0, this.length));
      }
    }
    static _checkRange(start, end, length) {
      if (start == null) dart.nullFailed(L132, 200, 26, "start");
      if (end == null) dart.nullFailed(L132, 200, 37, "end");
      if (length == null) dart.nullFailed(L132, 200, 46, "length");
      if (dart.notNull(start) < 0 || dart.notNull(start) > dart.notNull(length)) {
        dart.throw(new core.RangeError.range(start, 0, length));
      }
      if (dart.notNull(end) < dart.notNull(start) || dart.notNull(end) > dart.notNull(length)) {
        dart.throw(new core.RangeError.range(end, start, length));
      }
    }
    static new() {
      return new (js.JsArray$(E))._fromJs([]);
    }
    static from(other) {
      let t202;
      if (other == null) dart.nullFailed(L132, 183, 36, "other");
      return new (js.JsArray$(E))._fromJs((t202 = [], (() => {
        t202[$addAll](other[$map](dart.dynamic, C207 || CT.C207));
        return t202;
      })()));
    }
    _get(index) {
      if (index == null) dart.nullFailed(L132, 210, 24, "index");
      if (core.int.is(index)) {
        this[_checkIndex](index);
      }
      return E.as(super._get(index));
    }
    _set(index, value$) {
      let value = value$;
      if (index == null) dart.nullFailed(L132, 218, 28, "index");
      if (core.int.is(index)) {
        this[_checkIndex](index);
      }
      super._set(index, value);
      return value$;
    }
    get length() {
      let len = this[_jsObject$].length;
      if (typeof len === "number" && len >>> 0 === len) {
        return len;
      }
      dart.throw(new core.StateError.new("Bad JsArray length"));
    }
    set length(length) {
      if (length == null) dart.nullFailed(L132, 238, 23, "length");
      super._set("length", length);
    }
    add(value) {
      E.as(value);
      this.callMethod("push", [value]);
    }
    addAll(iterable) {
      IterableOfE().as(iterable);
      if (iterable == null) dart.nullFailed(L132, 248, 27, "iterable");
      let list = iterable instanceof Array ? iterable : core.List.from(iterable);
      this.callMethod("push", list);
    }
    insert(index, element) {
      if (index == null) dart.nullFailed(L132, 256, 19, "index");
      E.as(element);
      this[_checkInsertIndex](index);
      this.callMethod("splice", [index, 0, element]);
    }
    removeAt(index) {
      if (index == null) dart.nullFailed(L132, 262, 18, "index");
      this[_checkIndex](index);
      return E.as(dart.dsend(this.callMethod("splice", [index, 1]), '_get', [0]));
    }
    removeLast() {
      if (this.length === 0) dart.throw(new core.RangeError.new(-1));
      return E.as(this.callMethod("pop"));
    }
    removeRange(start, end) {
      if (start == null) dart.nullFailed(L132, 274, 24, "start");
      if (end == null) dart.nullFailed(L132, 274, 35, "end");
      js.JsArray._checkRange(start, end, this.length);
      this.callMethod("splice", [start, dart.notNull(end) - dart.notNull(start)]);
    }
    setRange(start, end, iterable, skipCount = 0) {
      let t202;
      if (start == null) dart.nullFailed(L132, 280, 21, "start");
      if (end == null) dart.nullFailed(L132, 280, 32, "end");
      IterableOfE().as(iterable);
      if (iterable == null) dart.nullFailed(L132, 280, 49, "iterable");
      if (skipCount == null) dart.nullFailed(L132, 280, 64, "skipCount");
      js.JsArray._checkRange(start, end, this.length);
      let length = dart.notNull(end) - dart.notNull(start);
      if (length === 0) return;
      if (dart.notNull(skipCount) < 0) dart.throw(new core.ArgumentError.new(skipCount));
      let args = (t202 = JSArrayOfObjectN().of([start, length]), (() => {
        t202[$addAll](iterable[$skip](skipCount)[$take](length));
        return t202;
      })());
      this.callMethod("splice", args);
    }
    sort(compare = null) {
      this.callMethod("sort", compare == null ? [] : [compare]);
    }
  }
  (JsArray._fromJs = function(jsObject) {
    if (jsObject == null) dart.nullFailed(L132, 186, 26, "jsObject");
    JsArray.__proto__._fromJs.call(this, jsObject);
    ;
  }).prototype = JsArray.prototype;
  dart.addTypeTests(JsArray);
  JsArray.prototype[_is_JsArray_default] = true;
  dart.addTypeCaches(JsArray);
  dart.setMethodSignature(JsArray, () => ({
    __proto__: dart.getMethods(JsArray.__proto__),
    [_checkIndex]: dart.fnType(dart.dynamic, [core.int]),
    [_checkInsertIndex]: dart.fnType(dart.dynamic, [core.int]),
    _get: dart.fnType(E, [core.Object]),
    [$_get]: dart.fnType(E, [core.Object]),
    _set: dart.fnType(dart.void, [core.Object, dart.dynamic]),
    [$_set]: dart.fnType(dart.void, [core.Object, dart.dynamic])
  }));
  dart.setGetterSignature(JsArray, () => ({
    __proto__: dart.getGetters(JsArray.__proto__),
    length: core.int,
    [$length]: core.int
  }));
  dart.setSetterSignature(JsArray, () => ({
    __proto__: dart.getSetters(JsArray.__proto__),
    length: core.int,
    [$length]: core.int
  }));
  dart.setLibraryUri(JsArray, L133);
  dart.defineExtensionMethods(JsArray, [
    '_get',
    '_set',
    'add',
    'addAll',
    'insert',
    'removeAt',
    'removeLast',
    'removeRange',
    'setRange',
    'sort'
  ]);
  dart.defineExtensionAccessors(JsArray, ['length']);
  return JsArray;
});
js.JsArray = js.JsArray$();
dart.addTypeTests(js.JsArray, _is_JsArray_default);
var C208;
var C209;
js._isBrowserType = function _isBrowserType(o) {
  if (o == null) dart.nullFailed(L132, 301, 28, "o");
  return o instanceof Object && (o instanceof Blob || o instanceof Event || window.KeyRange && o instanceof KeyRange || window.IDBKeyRange && o instanceof IDBKeyRange || o instanceof ImageData || o instanceof Node || window.DataView && o instanceof DataView || window.Int8Array && o instanceof Int8Array.__proto__ || o instanceof Window);
};
js._convertToJS = function _convertToJS(o) {
  if (o == null || typeof o == 'string' || typeof o == 'number' || typeof o == 'boolean' || dart.test(js._isBrowserType(o))) {
    return o;
  } else if (core.DateTime.is(o)) {
    return _js_helper.Primitives.lazyAsJsDate(o);
  } else if (js.JsObject.is(o)) {
    return o[_jsObject$];
  } else if (core.Function.is(o)) {
    return js._putIfAbsent(js._jsProxies, o, C208 || CT.C208);
  } else {
    return js._putIfAbsent(js._jsProxies, o, dart.fn(o => {
      if (o == null) dart.nullFailed(L132, 342, 41, "o");
      return new js._DartObject.new(o);
    }, ObjectTo_DartObject()));
  }
};
js._wrapDartFunction = function _wrapDartFunction(f) {
  if (f == null) dart.nullFailed(L132, 346, 33, "f");
  let wrapper = function() {
    let args = Array.prototype.map.call(arguments, js._convertToDart);
    return js._convertToJS(f(...args));
  };
  js._dartProxies.set(wrapper, f);
  return wrapper;
};
js._convertToDart = function _convertToDart(o) {
  if (o == null || typeof o == 'string' || typeof o == 'number' || typeof o == 'boolean' || dart.test(js._isBrowserType(o))) {
    return o;
  } else if (o instanceof Date) {
    let ms = o.getTime();
    return new core.DateTime.fromMillisecondsSinceEpoch(ms);
  } else if (js._DartObject.is(o) && !core.identical(dart.getReifiedType(o), dart.jsobject)) {
    return o[_dartObj$];
  } else {
    return js._wrapToDart(o);
  }
};
js._wrapToDart = function _wrapToDart(o) {
  if (o == null) dart.nullFailed(L132, 377, 29, "o");
  return js._putIfAbsent(js._dartProxies, o, C209 || CT.C209);
};
js._wrapToDartHelper = function _wrapToDartHelper(o) {
  if (o == null) dart.nullFailed(L132, 380, 35, "o");
  if (typeof o == "function") {
    return new js.JsFunction._fromJs(o);
  }
  if (o instanceof Array) {
    return new js.JsArray._fromJs(o);
  }
  return new js.JsObject._fromJs(o);
};
js._putIfAbsent = function _putIfAbsent(weakMap, o, getValue) {
  if (weakMap == null) dart.nullFailed(L132, 394, 26, "weakMap");
  if (o == null) dart.nullFailed(L132, 394, 42, "o");
  if (getValue == null) dart.nullFailed(L132, 394, 47, "getValue");
  let value = weakMap.get(o);
  if (value == null) {
    value = getValue(o);
    weakMap.set(o, value);
  }
  return value;
};
js.allowInterop = function allowInterop(F, f) {
  if (f == null) dart.nullFailed(L132, 407, 38, "f");
  if (!dart.test(dart.isDartFunction(f))) return f;
  let ret = dart.nullable(F).as(js._interopExpando._get(f));
  if (ret == null) {
    ret = function(...args) {
      return dart.dcall(f, args);
    };
    js._interopExpando._set(f, ret);
  }
  return ret;
};
js.allowInteropCaptureThis = function allowInteropCaptureThis(f) {
  if (f == null) dart.nullFailed(L132, 426, 43, "f");
  if (!dart.test(dart.isDartFunction(f))) return f;
  let ret = js._interopCaptureThisExpando._get(f);
  if (ret == null) {
    ret = function(...arguments$) {
      let args = [this];
      args.push.apply(args, arguments$);
      return dart.dcall(f, args);
    };
    js._interopCaptureThisExpando._set(f, ret);
  }
  return ret;
};
dart.copyProperties(js, {
  get context() {
    return js._context;
  }
});
dart.defineLazy(js, {
  /*js._context*/get _context() {
    return js._wrapToDart(dart.global);
  },
  /*js._dartProxies*/get _dartProxies() {
    return new WeakMap();
  },
  /*js._jsProxies*/get _jsProxies() {
    return new WeakMap();
  },
  /*js._interopExpando*/get _interopExpando() {
    return new (ExpandoOfFunction()).new();
  },
  set _interopExpando(_) {},
  /*js._interopCaptureThisExpando*/get _interopCaptureThisExpando() {
    return new (ExpandoOfFunction()).new();
  },
  set _interopCaptureThisExpando(_) {}
}, false);
js_util.jsify = function jsify(object) {
  if (object == null) dart.nullFailed(L134, 32, 22, "object");
  if (!core.Map.is(object) && !core.Iterable.is(object)) {
    dart.throw(new core.ArgumentError.new("object must be a Map or Iterable"));
  }
  return js_util._convertDataTree(object);
};
js_util._convertDataTree = function _convertDataTree(data) {
  if (data == null) dart.nullFailed(L134, 39, 32, "data");
  let _convertedObjects = new _js_helper.IdentityMap.new();
  function _convert(o) {
    if (dart.test(_convertedObjects[$containsKey](o))) {
      return _convertedObjects[$_get](o);
    }
    if (core.Map.is(o)) {
      let convertedMap = {};
      _convertedObjects[$_set](o, convertedMap);
      for (let key of o[$keys]) {
        convertedMap[key] = _convert(o[$_get](key));
      }
      return convertedMap;
    } else if (core.Iterable.is(o)) {
      let convertedList = [];
      _convertedObjects[$_set](o, convertedList);
      convertedList[$addAll](o[$map](dart.dynamic, _convert));
      return convertedList;
    } else {
      return o;
    }
  }
  dart.fn(_convert, ObjectNToObjectN());
  return dart.nullCheck(_convert(data));
};
js_util.newObject = function newObject() {
  return {};
};
js_util.hasProperty = function hasProperty(o, name) {
  if (o == null) dart.nullFailed(L134, 68, 25, "o");
  if (name == null) dart.nullFailed(L134, 68, 35, "name");
  return name in o;
};
js_util.getProperty = function getProperty(o, name) {
  if (o == null) dart.nullFailed(L134, 70, 28, "o");
  if (name == null) dart.nullFailed(L134, 70, 38, "name");
  return o[name];
};
js_util.setProperty = function setProperty(o, name, value) {
  if (o == null) dart.nullFailed(L134, 73, 28, "o");
  if (name == null) dart.nullFailed(L134, 73, 38, "name");
  return o[name] = value;
};
js_util.callMethod = function callMethod$(o, method, args) {
  if (o == null) dart.nullFailed(L134, 76, 27, "o");
  if (method == null) dart.nullFailed(L134, 76, 37, "method");
  if (args == null) dart.nullFailed(L134, 76, 59, "args");
  return o[method].apply(o, args);
};
js_util.instanceof = function $instanceof(o, type) {
  if (type == null) dart.nullFailed(L134, 83, 35, "type");
  return o instanceof type;
};
js_util.callConstructor = function callConstructor(constr, $arguments) {
  let t202;
  if (constr == null) dart.nullFailed(L134, 86, 32, "constr");
  if ($arguments == null) dart.nullFailed(L134, 86, 54, "arguments");
  if ($arguments == null) {
    return new constr();
  }
  if ($arguments instanceof Array) {
    let argumentCount = $arguments.length;
    switch (argumentCount) {
      case 0:
      {
        return new constr();
      }
      case 1:
      {
        let arg0 = $arguments[0];
        return new constr(arg0);
      }
      case 2:
      {
        let arg0 = $arguments[0];
        let arg1 = $arguments[1];
        return new constr(arg0, arg1);
      }
      case 3:
      {
        let arg0 = $arguments[0];
        let arg1 = $arguments[1];
        let arg2 = $arguments[2];
        return new constr(arg0, arg1, arg2);
      }
      case 4:
      {
        let arg0 = $arguments[0];
        let arg1 = $arguments[1];
        let arg2 = $arguments[2];
        let arg3 = $arguments[3];
        return new constr(arg0, arg1, arg2, arg3);
      }
    }
  }
  let args = (t202 = [null], (() => {
    t202[$addAll]($arguments);
    return t202;
  })());
  let factoryFunction = constr.bind.apply(constr, args);
  String(factoryFunction);
  return new factoryFunction();
};
js_util.promiseToFuture = function promiseToFuture(T, jsPromise) {
  if (jsPromise == null) dart.nullFailed(L134, 155, 37, "jsPromise");
  let completer = async.Completer$(T).new();
  let success = _js_helper.convertDartClosureToJS(dynamicTovoid(), dart.fn(r => completer.complete(dart.nullable(async.FutureOr$(T)).as(r)), dynamicTovoid()), 1);
  let error = _js_helper.convertDartClosureToJS(dynamicTovoid(), dart.fn(e => completer.completeError(core.Object.as(e)), dynamicTovoid()), 1);
  jsPromise.then(success, error);
  return completer.future;
};
math._JSRandom = class _JSRandom extends core.Object {
  nextInt(max) {
    if (max == null) dart.nullFailed(L135, 85, 19, "max");
    if (dart.notNull(max) <= 0 || dart.notNull(max) > 4294967296.0) {
      dart.throw(new core.RangeError.new(dart.str("max must be in range 0 < max ≤ 2^32, was ") + dart.str(max)));
    }
    return Math.random() * max >>> 0;
  }
  nextDouble() {
    return Math.random();
  }
  nextBool() {
    return Math.random() < 0.5;
  }
};
(math._JSRandom.new = function() {
  ;
}).prototype = math._JSRandom.prototype;
dart.addTypeTests(math._JSRandom);
dart.addTypeCaches(math._JSRandom);
math._JSRandom[dart.implements] = () => [math.Random];
dart.setMethodSignature(math._JSRandom, () => ({
  __proto__: dart.getMethods(math._JSRandom.__proto__),
  nextInt: dart.fnType(core.int, [core.int]),
  nextDouble: dart.fnType(core.double, []),
  nextBool: dart.fnType(core.bool, [])
}));
dart.setLibraryUri(math._JSRandom, L136);
var _lo = dart.privateName(math, "_lo");
var _hi = dart.privateName(math, "_hi");
var _nextState = dart.privateName(math, "_nextState");
math._Random = class _Random extends core.Object {
  [_nextState]() {
    let tmpHi = 4294901760 * this[_lo];
    let tmpHiLo = (tmpHi & 4294967295.0) >>> 0;
    let tmpHiHi = tmpHi - tmpHiLo;
    let tmpLo = 55905 * this[_lo];
    let tmpLoLo = (tmpLo & 4294967295.0) >>> 0;
    let tmpLoHi = tmpLo - tmpLoLo;
    let newLo = tmpLoLo + tmpHiLo + this[_hi];
    this[_lo] = (newLo & 4294967295.0) >>> 0;
    let newLoHi = newLo - this[_lo];
    this[_hi] = (((tmpLoHi + tmpHiHi + newLoHi) / 4294967296.0)[$truncate]() & 4294967295.0) >>> 0;
    if (!(this[_lo] < 4294967296.0)) dart.assertFailed(null, L135, 221, 12, "_lo < _POW2_32");
    if (!(this[_hi] < 4294967296.0)) dart.assertFailed(null, L135, 222, 12, "_hi < _POW2_32");
  }
  nextInt(max) {
    if (max == null) dart.argumentError(max);
    if (max <= 0 || max > 4294967296.0) {
      dart.throw(new core.RangeError.new(dart.str("max must be in range 0 < max ≤ 2^32, was ") + dart.str(max)));
    }
    if ((max & max - 1) === 0) {
      this[_nextState]();
      return (this[_lo] & max - 1) >>> 0;
    }
    let rnd32 = null;
    let result = null;
    do {
      this[_nextState]();
      rnd32 = this[_lo];
      result = rnd32[$remainder](max)[$toInt]();
    } while (dart.notNull(rnd32) - dart.notNull(result) + max >= 4294967296.0);
    return result;
  }
  nextDouble() {
    this[_nextState]();
    let bits26 = (this[_lo] & (1 << 26) - 1) >>> 0;
    this[_nextState]();
    let bits27 = (this[_lo] & (1 << 27) - 1) >>> 0;
    return (bits26 * 134217728 + bits27) / 9007199254740992.0;
  }
  nextBool() {
    this[_nextState]();
    return (this[_lo] & 1) === 0;
  }
};
(math._Random.new = function(seed) {
  if (seed == null) dart.nullFailed(L135, 130, 15, "seed");
  this[_lo] = 0;
  this[_hi] = 0;
  let empty_seed = 0;
  if (dart.notNull(seed) < 0) {
    empty_seed = -1;
  }
  do {
    let low = (dart.notNull(seed) & 4294967295.0) >>> 0;
    seed = ((dart.notNull(seed) - low) / 4294967296.0)[$truncate]();
    let high = (dart.notNull(seed) & 4294967295.0) >>> 0;
    seed = ((dart.notNull(seed) - high) / 4294967296.0)[$truncate]();
    let tmplow = low << 21 >>> 0;
    let tmphigh = (high << 21 | low[$rightShift](11)) >>> 0;
    tmplow = ((~low & 4294967295.0) >>> 0) + tmplow;
    low = (tmplow & 4294967295.0) >>> 0;
    high = ((~high >>> 0) + tmphigh + ((tmplow - low) / 4294967296)[$truncate]() & 4294967295.0) >>> 0;
    tmphigh = high[$rightShift](24);
    tmplow = (low[$rightShift](24) | high << 8 >>> 0) >>> 0;
    low = (low ^ tmplow) >>> 0;
    high = (high ^ tmphigh) >>> 0;
    tmplow = low * 265;
    low = (tmplow & 4294967295.0) >>> 0;
    high = (high * 265 + ((tmplow - low) / 4294967296)[$truncate]() & 4294967295.0) >>> 0;
    tmphigh = high[$rightShift](14);
    tmplow = (low[$rightShift](14) | high << 18 >>> 0) >>> 0;
    low = (low ^ tmplow) >>> 0;
    high = (high ^ tmphigh) >>> 0;
    tmplow = low * 21;
    low = (tmplow & 4294967295.0) >>> 0;
    high = (high * 21 + ((tmplow - low) / 4294967296)[$truncate]() & 4294967295.0) >>> 0;
    tmphigh = high[$rightShift](28);
    tmplow = (low[$rightShift](28) | high << 4 >>> 0) >>> 0;
    low = (low ^ tmplow) >>> 0;
    high = (high ^ tmphigh) >>> 0;
    tmplow = low << 31 >>> 0;
    tmphigh = (high << 31 | low[$rightShift](1)) >>> 0;
    tmplow = tmplow + low;
    low = (tmplow & 4294967295.0) >>> 0;
    high = (high + tmphigh + ((tmplow - low) / 4294967296)[$truncate]() & 4294967295.0) >>> 0;
    tmplow = this[_lo] * 1037;
    this[_lo] = (tmplow & 4294967295.0) >>> 0;
    this[_hi] = (this[_hi] * 1037 + ((tmplow - this[_lo]) / 4294967296)[$truncate]() & 4294967295.0) >>> 0;
    this[_lo] = (this[_lo] ^ low) >>> 0;
    this[_hi] = (this[_hi] ^ high) >>> 0;
  } while (seed !== empty_seed);
  if (this[_hi] === 0 && this[_lo] === 0) {
    this[_lo] = 23063;
  }
  this[_nextState]();
  this[_nextState]();
  this[_nextState]();
  this[_nextState]();
}).prototype = math._Random.prototype;
dart.addTypeTests(math._Random);
dart.addTypeCaches(math._Random);
math._Random[dart.implements] = () => [math.Random];
dart.setMethodSignature(math._Random, () => ({
  __proto__: dart.getMethods(math._Random.__proto__),
  [_nextState]: dart.fnType(dart.void, []),
  nextInt: dart.fnType(core.int, [core.int]),
  nextDouble: dart.fnType(core.double, []),
  nextBool: dart.fnType(core.bool, [])
}));
dart.setLibraryUri(math._Random, L136);
dart.setFieldSignature(math._Random, () => ({
  __proto__: dart.getFields(math._Random.__proto__),
  [_lo]: dart.fieldType(core.int),
  [_hi]: dart.fieldType(core.int)
}));
dart.defineLazy(math._Random, {
  /*math._Random._POW2_53_D*/get _POW2_53_D() {
    return 9007199254740992.0;
  },
  /*math._Random._POW2_27_D*/get _POW2_27_D() {
    return 134217728;
  },
  /*math._Random._MASK32*/get _MASK32() {
    return 4294967295.0;
  }
}, false);
var _buffer$0 = dart.privateName(math, "_buffer");
var _getRandomBytes = dart.privateName(math, "_getRandomBytes");
math._JSSecureRandom = class _JSSecureRandom extends core.Object {
  [_getRandomBytes](start, length) {
    if (start == null) dart.nullFailed(L135, 279, 28, "start");
    if (length == null) dart.nullFailed(L135, 279, 39, "length");
    crypto.getRandomValues(this[_buffer$0][$buffer][$asUint8List](start, length));
  }
  nextBool() {
    this[_getRandomBytes](0, 1);
    return this[_buffer$0][$getUint8](0)[$isOdd];
  }
  nextDouble() {
    this[_getRandomBytes](1, 7);
    this[_buffer$0][$setUint8](0, 63);
    let highByte = this[_buffer$0][$getUint8](1);
    this[_buffer$0][$setUint8](1, (dart.notNull(highByte) | 240) >>> 0);
    let result = dart.notNull(this[_buffer$0][$getFloat64](0)) - 1.0;
    if ((dart.notNull(highByte) & 16) !== 0) {
      result = result + 1.1102230246251565e-16;
    }
    return result;
  }
  nextInt(max) {
    if (max == null) dart.argumentError(max);
    if (max <= 0 || max > 4294967296.0) {
      dart.throw(new core.RangeError.new(dart.str("max must be in range 0 < max ≤ 2^32, was ") + dart.str(max)));
    }
    let byteCount = 1;
    if (max > 255) {
      byteCount = byteCount + 1;
      if (max > 65535) {
        byteCount = byteCount + 1;
        if (max > 16777215) {
          byteCount = byteCount + 1;
        }
      }
    }
    this[_buffer$0][$setUint32](0, 0);
    let start = 4 - byteCount;
    let randomLimit = math.pow(256, byteCount)[$toInt]();
    while (true) {
      this[_getRandomBytes](start, byteCount);
      let random = this[_buffer$0][$getUint32](0);
      if ((max & max - 1) === 0) {
        return (dart.notNull(random) & max - 1) >>> 0;
      }
      let result = random[$remainder](max)[$toInt]();
      if (dart.notNull(random) - result + max < randomLimit) {
        return result;
      }
    }
  }
};
(math._JSSecureRandom.new = function() {
  this[_buffer$0] = _native_typed_data.NativeByteData.new(8);
  let crypto = self.crypto;
  if (crypto != null) {
    let getRandomValues = crypto.getRandomValues;
    if (getRandomValues != null) {
      return;
    }
  }
  dart.throw(new core.UnsupportedError.new("No source of cryptographically secure random numbers available."));
}).prototype = math._JSSecureRandom.prototype;
dart.addTypeTests(math._JSSecureRandom);
dart.addTypeCaches(math._JSSecureRandom);
math._JSSecureRandom[dart.implements] = () => [math.Random];
dart.setMethodSignature(math._JSSecureRandom, () => ({
  __proto__: dart.getMethods(math._JSSecureRandom.__proto__),
  [_getRandomBytes]: dart.fnType(dart.void, [core.int, core.int]),
  nextBool: dart.fnType(core.bool, []),
  nextDouble: dart.fnType(core.double, []),
  nextInt: dart.fnType(core.int, [core.int])
}));
dart.setLibraryUri(math._JSSecureRandom, L136);
dart.setFieldSignature(math._JSSecureRandom, () => ({
  __proto__: dart.getFields(math._JSSecureRandom.__proto__),
  [_buffer$0]: dart.finalFieldType(typed_data.ByteData)
}));
math._JenkinsSmiHash = class _JenkinsSmiHash extends core.Object {
  static combine(hash, value) {
    if (hash == null) dart.nullFailed(L137, 24, 26, "hash");
    if (value == null) dart.nullFailed(L137, 24, 36, "value");
    hash = 536870911 & dart.notNull(hash) + dart.notNull(value);
    hash = 536870911 & dart.notNull(hash) + ((524287 & dart.notNull(hash)) << 10);
    return (dart.notNull(hash) ^ hash[$rightShift](6)) >>> 0;
  }
  static finish(hash) {
    if (hash == null) dart.nullFailed(L137, 30, 25, "hash");
    hash = 536870911 & dart.notNull(hash) + ((67108863 & dart.notNull(hash)) << 3);
    hash = (dart.notNull(hash) ^ hash[$rightShift](11)) >>> 0;
    return 536870911 & dart.notNull(hash) + ((16383 & dart.notNull(hash)) << 15);
  }
  static hash2(a, b) {
    if (a == null) dart.nullFailed(L137, 36, 24, "a");
    if (b == null) dart.nullFailed(L137, 36, 31, "b");
    return math._JenkinsSmiHash.finish(math._JenkinsSmiHash.combine(math._JenkinsSmiHash.combine(0, a), b));
  }
  static hash4(a, b, c, d) {
    if (a == null) dart.nullFailed(L137, 38, 24, "a");
    if (b == null) dart.nullFailed(L137, 38, 31, "b");
    if (c == null) dart.nullFailed(L137, 38, 38, "c");
    if (d == null) dart.nullFailed(L137, 38, 45, "d");
    return math._JenkinsSmiHash.finish(math._JenkinsSmiHash.combine(math._JenkinsSmiHash.combine(math._JenkinsSmiHash.combine(math._JenkinsSmiHash.combine(0, a), b), c), d));
  }
};
(math._JenkinsSmiHash.new = function() {
  ;
}).prototype = math._JenkinsSmiHash.prototype;
dart.addTypeTests(math._JenkinsSmiHash);
dart.addTypeCaches(math._JenkinsSmiHash);
dart.setLibraryUri(math._JenkinsSmiHash, L136);
const _is_Point_default = Symbol('_is_Point_default');
var x$2 = dart.privateName(math, "Point.x");
var y$2 = dart.privateName(math, "Point.y");
math.Point$ = dart.generic(T => {
  var PointOfT = () => (PointOfT = dart.constFn(math.Point$(T)))();
  class Point extends core.Object {
    get x() {
      return this[x$2];
    }
    set x(value) {
      super.x = value;
    }
    get y() {
      return this[y$2];
    }
    set y(value) {
      super.y = value;
    }
    toString() {
      return dart.str("Point(") + dart.str(this.x) + dart.str(", ") + dart.str(this.y) + dart.str(")");
    }
    _equals(other) {
      if (other == null) return false;
      return PointOfnum().is(other) && this.x == other.x && this.y == other.y;
    }
    get hashCode() {
      return math._JenkinsSmiHash.hash2(dart.hashCode(this.x), dart.hashCode(this.y));
    }
    ['+'](other) {
      PointOfT().as(other);
      if (other == null) dart.nullFailed(L138, 31, 32, "other");
      return new (PointOfT()).new(T.as(dart.notNull(this.x) + dart.notNull(other.x)), T.as(dart.notNull(this.y) + dart.notNull(other.y)));
    }
    ['-'](other) {
      PointOfT().as(other);
      if (other == null) dart.nullFailed(L138, 38, 32, "other");
      return new (PointOfT()).new(T.as(dart.notNull(this.x) - dart.notNull(other.x)), T.as(dart.notNull(this.y) - dart.notNull(other.y)));
    }
    ['*'](factor) {
      if (factor == null) dart.nullFailed(L138, 49, 37, "factor");
      return new (PointOfT()).new(T.as(dart.notNull(this.x) * dart.notNull(factor)), T.as(dart.notNull(this.y) * dart.notNull(factor)));
    }
    get magnitude() {
      return math.sqrt(dart.notNull(this.x) * dart.notNull(this.x) + dart.notNull(this.y) * dart.notNull(this.y));
    }
    distanceTo(other) {
      PointOfT().as(other);
      if (other == null) dart.nullFailed(L138, 58, 30, "other");
      let dx = dart.notNull(this.x) - dart.notNull(other.x);
      let dy = dart.notNull(this.y) - dart.notNull(other.y);
      return math.sqrt(dx * dx + dy * dy);
    }
    squaredDistanceTo(other) {
      PointOfT().as(other);
      if (other == null) dart.nullFailed(L138, 68, 32, "other");
      let dx = dart.notNull(this.x) - dart.notNull(other.x);
      let dy = dart.notNull(this.y) - dart.notNull(other.y);
      return T.as(dx * dx + dy * dy);
    }
  }
  (Point.new = function(x, y) {
    if (x == null) dart.nullFailed(L138, 12, 17, "x");
    if (y == null) dart.nullFailed(L138, 12, 22, "y");
    this[x$2] = x;
    this[y$2] = y;
    ;
  }).prototype = Point.prototype;
  dart.addTypeTests(Point);
  Point.prototype[_is_Point_default] = true;
  dart.addTypeCaches(Point);
  dart.setMethodSignature(Point, () => ({
    __proto__: dart.getMethods(Point.__proto__),
    '+': dart.fnType(math.Point$(T), [dart.nullable(core.Object)]),
    '-': dart.fnType(math.Point$(T), [dart.nullable(core.Object)]),
    '*': dart.fnType(math.Point$(T), [core.num]),
    distanceTo: dart.fnType(core.double, [dart.nullable(core.Object)]),
    squaredDistanceTo: dart.fnType(T, [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(Point, () => ({
    __proto__: dart.getGetters(Point.__proto__),
    magnitude: core.double
  }));
  dart.setLibraryUri(Point, L136);
  dart.setFieldSignature(Point, () => ({
    __proto__: dart.getFields(Point.__proto__),
    x: dart.finalFieldType(T),
    y: dart.finalFieldType(T)
  }));
  dart.defineExtensionMethods(Point, ['toString', '_equals']);
  dart.defineExtensionAccessors(Point, ['hashCode']);
  return Point;
});
math.Point = math.Point$();
dart.addTypeTests(math.Point, _is_Point_default);
var C210;
math.Random = class Random extends core.Object {
  static new(seed = null) {
    return seed == null ? C210 || CT.C210 : new math._Random.new(seed);
  }
  static secure() {
    let t202;
    t202 = math.Random._secureRandom;
    return t202 == null ? math.Random._secureRandom = new math._JSSecureRandom.new() : t202;
  }
};
(math.Random[dart.mixinNew] = function() {
}).prototype = math.Random.prototype;
dart.addTypeTests(math.Random);
dart.addTypeCaches(math.Random);
dart.setLibraryUri(math.Random, L136);
dart.defineLazy(math.Random, {
  /*math.Random._secureRandom*/get _secureRandom() {
    return null;
  },
  set _secureRandom(_) {}
}, false);
const _is__RectangleBase_default = Symbol('_is__RectangleBase_default');
math._RectangleBase$ = dart.generic(T => {
  var RectangleOfT = () => (RectangleOfT = dart.constFn(math.Rectangle$(T)))();
  var PointOfT = () => (PointOfT = dart.constFn(math.Point$(T)))();
  class _RectangleBase extends core.Object {
    get right() {
      return T.as(dart.notNull(this[$left]) + dart.notNull(this[$width]));
    }
    get bottom() {
      return T.as(dart.notNull(this[$top]) + dart.notNull(this[$height]));
    }
    toString() {
      return dart.str("Rectangle (") + dart.str(this[$left]) + dart.str(", ") + dart.str(this[$top]) + dart.str(") ") + dart.str(this[$width]) + dart.str(" x ") + dart.str(this[$height]);
    }
    _equals(other) {
      if (other == null) return false;
      return RectangleOfnum().is(other) && this[$left] == other[$left] && this[$top] == other[$top] && this[$right] == other[$right] && this[$bottom] == other[$bottom];
    }
    get hashCode() {
      return math._JenkinsSmiHash.hash4(dart.hashCode(this[$left]), dart.hashCode(this[$top]), dart.hashCode(this[$right]), dart.hashCode(this[$bottom]));
    }
    intersection(other) {
      RectangleOfT().as(other);
      if (other == null) dart.nullFailed(L139, 61, 43, "other");
      let x0 = math.max(T, this[$left], other[$left]);
      let x1 = math.min(core.num, dart.notNull(this[$left]) + dart.notNull(this[$width]), dart.notNull(other[$left]) + dart.notNull(other[$width]));
      if (x0 <= x1) {
        let y0 = math.max(T, this[$top], other[$top]);
        let y1 = math.min(core.num, dart.notNull(this[$top]) + dart.notNull(this[$height]), dart.notNull(other[$top]) + dart.notNull(other[$height]));
        if (y0 <= y1) {
          return new (RectangleOfT()).new(x0, y0, T.as(x1 - x0), T.as(y1 - y0));
        }
      }
      return null;
    }
    intersects(other) {
      if (other == null) dart.nullFailed(L139, 77, 34, "other");
      return dart.notNull(this[$left]) <= dart.notNull(other[$left]) + dart.notNull(other[$width]) && dart.notNull(other[$left]) <= dart.notNull(this[$left]) + dart.notNull(this[$width]) && dart.notNull(this[$top]) <= dart.notNull(other[$top]) + dart.notNull(other[$height]) && dart.notNull(other[$top]) <= dart.notNull(this[$top]) + dart.notNull(this[$height]);
    }
    boundingBox(other) {
      RectangleOfT().as(other);
      if (other == null) dart.nullFailed(L139, 85, 41, "other");
      let right = math.max(core.num, dart.notNull(this[$left]) + dart.notNull(this[$width]), dart.notNull(other[$left]) + dart.notNull(other[$width]));
      let bottom = math.max(core.num, dart.notNull(this[$top]) + dart.notNull(this[$height]), dart.notNull(other[$top]) + dart.notNull(other[$height]));
      let left = math.min(T, this[$left], other[$left]);
      let top = math.min(T, this[$top], other[$top]);
      return new (RectangleOfT()).new(left, top, T.as(right - left), T.as(bottom - top));
    }
    containsRectangle(another) {
      if (another == null) dart.nullFailed(L139, 96, 41, "another");
      return dart.notNull(this[$left]) <= dart.notNull(another[$left]) && dart.notNull(this[$left]) + dart.notNull(this[$width]) >= dart.notNull(another[$left]) + dart.notNull(another[$width]) && dart.notNull(this[$top]) <= dart.notNull(another[$top]) && dart.notNull(this[$top]) + dart.notNull(this[$height]) >= dart.notNull(another[$top]) + dart.notNull(another[$height]);
    }
    containsPoint(another) {
      if (another == null) dart.nullFailed(L139, 104, 33, "another");
      return dart.notNull(another.x) >= dart.notNull(this[$left]) && dart.notNull(another.x) <= dart.notNull(this[$left]) + dart.notNull(this[$width]) && dart.notNull(another.y) >= dart.notNull(this[$top]) && dart.notNull(another.y) <= dart.notNull(this[$top]) + dart.notNull(this[$height]);
    }
    get topLeft() {
      return new (PointOfT()).new(this[$left], this[$top]);
    }
    get topRight() {
      return new (PointOfT()).new(T.as(dart.notNull(this[$left]) + dart.notNull(this[$width])), this[$top]);
    }
    get bottomRight() {
      return new (PointOfT()).new(T.as(dart.notNull(this[$left]) + dart.notNull(this[$width])), T.as(dart.notNull(this[$top]) + dart.notNull(this[$height])));
    }
    get bottomLeft() {
      return new (PointOfT()).new(this[$left], T.as(dart.notNull(this[$top]) + dart.notNull(this[$height])));
    }
  }
  (_RectangleBase.new = function() {
    ;
  }).prototype = _RectangleBase.prototype;
  dart.addTypeTests(_RectangleBase);
  _RectangleBase.prototype[_is__RectangleBase_default] = true;
  dart.addTypeCaches(_RectangleBase);
  dart.setMethodSignature(_RectangleBase, () => ({
    __proto__: dart.getMethods(_RectangleBase.__proto__),
    intersection: dart.fnType(dart.nullable(math.Rectangle$(T)), [dart.nullable(core.Object)]),
    [$intersection]: dart.fnType(dart.nullable(math.Rectangle$(T)), [dart.nullable(core.Object)]),
    intersects: dart.fnType(core.bool, [math.Rectangle$(core.num)]),
    [$intersects]: dart.fnType(core.bool, [math.Rectangle$(core.num)]),
    boundingBox: dart.fnType(math.Rectangle$(T), [dart.nullable(core.Object)]),
    [$boundingBox]: dart.fnType(math.Rectangle$(T), [dart.nullable(core.Object)]),
    containsRectangle: dart.fnType(core.bool, [math.Rectangle$(core.num)]),
    [$containsRectangle]: dart.fnType(core.bool, [math.Rectangle$(core.num)]),
    containsPoint: dart.fnType(core.bool, [math.Point$(core.num)]),
    [$containsPoint]: dart.fnType(core.bool, [math.Point$(core.num)])
  }));
  dart.setGetterSignature(_RectangleBase, () => ({
    __proto__: dart.getGetters(_RectangleBase.__proto__),
    right: T,
    [$right]: T,
    bottom: T,
    [$bottom]: T,
    topLeft: math.Point$(T),
    [$topLeft]: math.Point$(T),
    topRight: math.Point$(T),
    [$topRight]: math.Point$(T),
    bottomRight: math.Point$(T),
    [$bottomRight]: math.Point$(T),
    bottomLeft: math.Point$(T),
    [$bottomLeft]: math.Point$(T)
  }));
  dart.setLibraryUri(_RectangleBase, L136);
  dart.defineExtensionMethods(_RectangleBase, [
    'toString',
    '_equals',
    'intersection',
    'intersects',
    'boundingBox',
    'containsRectangle',
    'containsPoint'
  ]);
  dart.defineExtensionAccessors(_RectangleBase, [
    'right',
    'bottom',
    'hashCode',
    'topLeft',
    'topRight',
    'bottomRight',
    'bottomLeft'
  ]);
  return _RectangleBase;
});
math._RectangleBase = math._RectangleBase$();
dart.addTypeTests(math._RectangleBase, _is__RectangleBase_default);
const _is_Rectangle_default = Symbol('_is_Rectangle_default');
var left$ = dart.privateName(math, "Rectangle.left");
var top$ = dart.privateName(math, "Rectangle.top");
var width$ = dart.privateName(math, "Rectangle.width");
var height$ = dart.privateName(math, "Rectangle.height");
math.Rectangle$ = dart.generic(T => {
  class Rectangle extends math._RectangleBase$(T) {
    get left() {
      return this[left$];
    }
    set left(value) {
      super.left = value;
    }
    get top() {
      return this[top$];
    }
    set top(value) {
      super.top = value;
    }
    get width() {
      return this[width$];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$];
    }
    set height(value) {
      super.height = value;
    }
    static fromPoints(a, b) {
      if (a == null) dart.nullFailed(L139, 154, 41, "a");
      if (b == null) dart.nullFailed(L139, 154, 53, "b");
      let left = math.min(T, a.x, b.x);
      let width = T.as(math.max(T, a.x, b.x) - left);
      let top = math.min(T, a.y, b.y);
      let height = T.as(math.max(T, a.y, b.y) - top);
      return new (math.Rectangle$(T)).new(left, top, width, height);
    }
  }
  (Rectangle.new = function(left, top, width, height) {
    if (left == null) dart.nullFailed(L139, 138, 24, "left");
    if (top == null) dart.nullFailed(L139, 138, 35, "top");
    if (width == null) dart.nullFailed(L139, 138, 42, "width");
    if (height == null) dart.nullFailed(L139, 138, 51, "height");
    this[left$] = left;
    this[top$] = top;
    this[width$] = T.as(dart.notNull(width) < 0 ? -dart.notNull(width) * 0 : width);
    this[height$] = T.as(dart.notNull(height) < 0 ? -dart.notNull(height) * 0 : height);
    Rectangle.__proto__.new.call(this);
    ;
  }).prototype = Rectangle.prototype;
  dart.addTypeTests(Rectangle);
  Rectangle.prototype[_is_Rectangle_default] = true;
  dart.addTypeCaches(Rectangle);
  dart.setLibraryUri(Rectangle, L136);
  dart.setFieldSignature(Rectangle, () => ({
    __proto__: dart.getFields(Rectangle.__proto__),
    left: dart.finalFieldType(T),
    top: dart.finalFieldType(T),
    width: dart.finalFieldType(T),
    height: dart.finalFieldType(T)
  }));
  dart.defineExtensionAccessors(Rectangle, ['left', 'top', 'width', 'height']);
  return Rectangle;
});
math.Rectangle = math.Rectangle$();
dart.addTypeTests(math.Rectangle, _is_Rectangle_default);
var _width = dart.privateName(math, "_width");
var _height = dart.privateName(math, "_height");
const _is_MutableRectangle_default = Symbol('_is_MutableRectangle_default');
var left$0 = dart.privateName(math, "MutableRectangle.left");
var top$0 = dart.privateName(math, "MutableRectangle.top");
math.MutableRectangle$ = dart.generic(T => {
  class MutableRectangle extends math._RectangleBase$(T) {
    get left() {
      return this[left$0];
    }
    set left(value) {
      this[left$0] = T.as(value);
    }
    get top() {
      return this[top$0];
    }
    set top(value) {
      this[top$0] = T.as(value);
    }
    static fromPoints(a, b) {
      if (a == null) dart.nullFailed(L139, 205, 48, "a");
      if (b == null) dart.nullFailed(L139, 205, 60, "b");
      let left = math.min(T, a.x, b.x);
      let width = T.as(math.max(T, a.x, b.x) - left);
      let top = math.min(T, a.y, b.y);
      let height = T.as(math.max(T, a.y, b.y) - top);
      return new (math.MutableRectangle$(T)).new(left, top, width, height);
    }
    get width() {
      return this[_width];
    }
    set width(width) {
      T.as(width);
      if (width == null) dart.nullFailed(L139, 222, 15, "width");
      if (dart.notNull(width) < 0) width = math._clampToZero(T, width);
      this[_width] = width;
    }
    get height() {
      return this[_height];
    }
    set height(height) {
      T.as(height);
      if (height == null) dart.nullFailed(L139, 236, 16, "height");
      if (dart.notNull(height) < 0) height = math._clampToZero(T, height);
      this[_height] = height;
    }
  }
  (MutableRectangle.new = function(left, top, width, height) {
    if (left == null) dart.nullFailed(L139, 191, 25, "left");
    if (top == null) dart.nullFailed(L139, 191, 36, "top");
    if (width == null) dart.nullFailed(L139, 191, 43, "width");
    if (height == null) dart.nullFailed(L139, 191, 52, "height");
    this[left$0] = left;
    this[top$0] = top;
    this[_width] = dart.notNull(width) < 0 ? math._clampToZero(T, width) : width;
    this[_height] = dart.notNull(height) < 0 ? math._clampToZero(T, height) : height;
    MutableRectangle.__proto__.new.call(this);
    ;
  }).prototype = MutableRectangle.prototype;
  dart.addTypeTests(MutableRectangle);
  MutableRectangle.prototype[_is_MutableRectangle_default] = true;
  dart.addTypeCaches(MutableRectangle);
  MutableRectangle[dart.implements] = () => [math.Rectangle$(T)];
  dart.setGetterSignature(MutableRectangle, () => ({
    __proto__: dart.getGetters(MutableRectangle.__proto__),
    width: T,
    [$width]: T,
    height: T,
    [$height]: T
  }));
  dart.setSetterSignature(MutableRectangle, () => ({
    __proto__: dart.getSetters(MutableRectangle.__proto__),
    width: dart.nullable(core.Object),
    [$width]: dart.nullable(core.Object),
    height: dart.nullable(core.Object),
    [$height]: dart.nullable(core.Object)
  }));
  dart.setLibraryUri(MutableRectangle, L136);
  dart.setFieldSignature(MutableRectangle, () => ({
    __proto__: dart.getFields(MutableRectangle.__proto__),
    left: dart.fieldType(T),
    top: dart.fieldType(T),
    [_width]: dart.fieldType(T),
    [_height]: dart.fieldType(T)
  }));
  dart.defineExtensionAccessors(MutableRectangle, ['left', 'top', 'width', 'height']);
  return MutableRectangle;
});
math.MutableRectangle = math.MutableRectangle$();
dart.addTypeTests(math.MutableRectangle, _is_MutableRectangle_default);
math.min = function min(T, a, b) {
  if (a == null) dart.argumentError(a);
  if (b == null) dart.argumentError(b);
  return Math.min(a, b);
};
math.max = function max(T, a, b) {
  if (a == null) dart.argumentError(a);
  if (b == null) dart.argumentError(b);
  return Math.max(a, b);
};
math.atan2 = function atan2(a, b) {
  if (a == null) dart.argumentError(a);
  if (b == null) dart.argumentError(b);
  return Math.atan2(a, b);
};
math.pow = function pow(x, exponent) {
  if (x == null) dart.argumentError(x);
  if (exponent == null) dart.argumentError(exponent);
  return Math.pow(x, exponent);
};
math.sin = function sin(radians) {
  if (radians == null) dart.argumentError(radians);
  return Math.sin(radians);
};
math.cos = function cos(radians) {
  if (radians == null) dart.argumentError(radians);
  return Math.cos(radians);
};
math.tan = function tan(radians) {
  if (radians == null) dart.argumentError(radians);
  return Math.tan(radians);
};
math.acos = function acos(x) {
  if (x == null) dart.argumentError(x);
  return Math.acos(x);
};
math.asin = function asin(x) {
  if (x == null) dart.argumentError(x);
  return Math.asin(x);
};
math.atan = function atan(x) {
  if (x == null) dart.argumentError(x);
  return Math.atan(x);
};
math.sqrt = function sqrt(x) {
  if (x == null) dart.argumentError(x);
  return Math.sqrt(x);
};
math.exp = function exp(x) {
  if (x == null) dart.argumentError(x);
  return Math.exp(x);
};
math.log = function log$(x) {
  if (x == null) dart.argumentError(x);
  return Math.log(x);
};
math._clampToZero = function _clampToZero(T, value) {
  if (value == null) dart.nullFailed(L139, 245, 33, "value");
  if (!(dart.notNull(value) < 0)) dart.assertFailed(null, L139, 246, 10, "value < 0");
  return T.as(-dart.notNull(value) * 0);
};
dart.defineLazy(math, {
  /*math._POW2_32*/get _POW2_32() {
    return 4294967296.0;
  },
  /*math.e*/get e() {
    return 2.718281828459045;
  },
  /*math.ln10*/get ln10() {
    return 2.302585092994046;
  },
  /*math.ln2*/get ln2() {
    return 0.6931471805599453;
  },
  /*math.log2e*/get log2e() {
    return 1.4426950408889634;
  },
  /*math.log10e*/get log10e() {
    return 0.4342944819032518;
  },
  /*math.pi*/get pi() {
    return 3.141592653589793;
  },
  /*math.sqrt1_2*/get sqrt1_2() {
    return 0.7071067811865476;
  },
  /*math.sqrt2*/get sqrt2() {
    return 1.4142135623730951;
  }
}, false);
typed_data.ByteBuffer = class ByteBuffer extends core.Object {};
(typed_data.ByteBuffer.new = function() {
  ;
}).prototype = typed_data.ByteBuffer.prototype;
dart.addTypeTests(typed_data.ByteBuffer);
dart.addTypeCaches(typed_data.ByteBuffer);
dart.setLibraryUri(typed_data.ByteBuffer, L59);
typed_data.TypedData = class TypedData extends core.Object {};
(typed_data.TypedData.new = function() {
  ;
}).prototype = typed_data.TypedData.prototype;
dart.addTypeTests(typed_data.TypedData);
dart.addTypeCaches(typed_data.TypedData);
dart.setLibraryUri(typed_data.TypedData, L59);
typed_data._TypedIntList = class _TypedIntList extends typed_data.TypedData {};
(typed_data._TypedIntList.new = function() {
  ;
}).prototype = typed_data._TypedIntList.prototype;
dart.addTypeTests(typed_data._TypedIntList);
dart.addTypeCaches(typed_data._TypedIntList);
dart.setLibraryUri(typed_data._TypedIntList, L59);
typed_data._TypedFloatList = class _TypedFloatList extends typed_data.TypedData {};
(typed_data._TypedFloatList.new = function() {
  ;
}).prototype = typed_data._TypedFloatList.prototype;
dart.addTypeTests(typed_data._TypedFloatList);
dart.addTypeCaches(typed_data._TypedFloatList);
dart.setLibraryUri(typed_data._TypedFloatList, L59);
var _littleEndian = dart.privateName(typed_data, "_littleEndian");
var C211;
typed_data.Endian = class Endian extends core.Object {
  get [_littleEndian]() {
    return this[_littleEndian$];
  }
  set [_littleEndian](value) {
    super[_littleEndian] = value;
  }
};
(typed_data.Endian.__ = function(_littleEndian) {
  if (_littleEndian == null) dart.nullFailed(L140, 424, 23, "_littleEndian");
  this[_littleEndian$] = _littleEndian;
  ;
}).prototype = typed_data.Endian.prototype;
dart.addTypeTests(typed_data.Endian);
dart.addTypeCaches(typed_data.Endian);
const _littleEndian$ = Endian__littleEndian;
dart.setLibraryUri(typed_data.Endian, L59);
dart.setFieldSignature(typed_data.Endian, () => ({
  __proto__: dart.getFields(typed_data.Endian.__proto__),
  [_littleEndian]: dart.finalFieldType(core.bool)
}));
dart.defineLazy(typed_data.Endian, {
  /*typed_data.Endian.big*/get big() {
    return C34 || CT.C34;
  },
  /*typed_data.Endian.little*/get little() {
    return C211 || CT.C211;
  },
  /*typed_data.Endian.host*/get host() {
    return typed_data.ByteData.view(_native_typed_data.NativeUint16List.fromList(JSArrayOfint().of([1]))[$buffer])[$getInt8](0) === 1 ? typed_data.Endian.little : typed_data.Endian.big;
  }
}, false);
typed_data.ByteData = class ByteData extends core.Object {
  static view(buffer, offsetInBytes = 0, length = null) {
    if (buffer == null) dart.nullFailed(L140, 507, 36, "buffer");
    if (offsetInBytes == null) dart.nullFailed(L140, 508, 12, "offsetInBytes");
    return buffer[$asByteData](offsetInBytes, length);
  }
  static sublistView(data, start = 0, end = null) {
    if (data == null) dart.nullFailed(L140, 531, 42, "data");
    if (start == null) dart.nullFailed(L140, 531, 53, "start");
    let elementSize = data[$elementSizeInBytes];
    end = core.RangeError.checkValidRange(start, end, (dart.notNull(data[$lengthInBytes]) / dart.notNull(elementSize))[$truncate]());
    if (end == null) dart.throw("unreachable");
    return data[$buffer][$asByteData](dart.notNull(data[$offsetInBytes]) + dart.notNull(start) * dart.notNull(elementSize), (dart.notNull(end) - dart.notNull(start)) * dart.notNull(elementSize));
  }
};
(typed_data.ByteData[dart.mixinNew] = function() {
}).prototype = typed_data.ByteData.prototype;
dart.addTypeTests(typed_data.ByteData);
dart.addTypeCaches(typed_data.ByteData);
typed_data.ByteData[dart.implements] = () => [typed_data.TypedData];
dart.setLibraryUri(typed_data.ByteData, L59);
typed_data.Int8List = class Int8List extends core.Object {
  static view(buffer, offsetInBytes = 0, length = null) {
    if (buffer == null) dart.nullFailed(L140, 853, 36, "buffer");
    if (offsetInBytes == null) dart.nullFailed(L140, 854, 12, "offsetInBytes");
    return buffer[$asInt8List](offsetInBytes, length);
  }
  static sublistView(data, start = 0, end = null) {
    if (data == null) dart.nullFailed(L140, 877, 42, "data");
    if (start == null) dart.nullFailed(L140, 877, 53, "start");
    let elementSize = data[$elementSizeInBytes];
    end = core.RangeError.checkValidRange(start, end, (dart.notNull(data[$lengthInBytes]) / dart.notNull(elementSize))[$truncate]());
    if (end == null) dart.throw("unreachable");
    return data[$buffer][$asInt8List](dart.notNull(data[$offsetInBytes]) + dart.notNull(start) * dart.notNull(elementSize), (dart.notNull(end) - dart.notNull(start)) * dart.notNull(elementSize));
  }
  [Symbol.iterator]() {
    return new dart.JsIterator(this[$iterator]);
  }
};
(typed_data.Int8List[dart.mixinNew] = function() {
}).prototype = typed_data.Int8List.prototype;
typed_data.Int8List.prototype[dart.isList] = true;
dart.addTypeTests(typed_data.Int8List);
dart.addTypeCaches(typed_data.Int8List);
typed_data.Int8List[dart.implements] = () => [core.List$(core.int), typed_data._TypedIntList];
dart.setLibraryUri(typed_data.Int8List, L59);
dart.defineLazy(typed_data.Int8List, {
  /*typed_data.Int8List.bytesPerElement*/get bytesPerElement() {
    return 1;
  }
}, false);
typed_data.Uint8List = class Uint8List extends core.Object {
  static view(buffer, offsetInBytes = 0, length = null) {
    if (buffer == null) dart.nullFailed(L140, 976, 37, "buffer");
    if (offsetInBytes == null) dart.nullFailed(L140, 977, 12, "offsetInBytes");
    return buffer[$asUint8List](offsetInBytes, length);
  }
  static sublistView(data, start = 0, end = null) {
    if (data == null) dart.nullFailed(L140, 1000, 43, "data");
    if (start == null) dart.nullFailed(L140, 1000, 54, "start");
    let elementSize = data[$elementSizeInBytes];
    end = core.RangeError.checkValidRange(start, end, (dart.notNull(data[$lengthInBytes]) / dart.notNull(elementSize))[$truncate]());
    if (end == null) dart.throw("unreachable");
    return data[$buffer][$asUint8List](dart.notNull(data[$offsetInBytes]) + dart.notNull(start) * dart.notNull(elementSize), (dart.notNull(end) - dart.notNull(start)) * dart.notNull(elementSize));
  }
  [Symbol.iterator]() {
    return new dart.JsIterator(this[$iterator]);
  }
};
(typed_data.Uint8List[dart.mixinNew] = function() {
}).prototype = typed_data.Uint8List.prototype;
typed_data.Uint8List.prototype[dart.isList] = true;
dart.addTypeTests(typed_data.Uint8List);
dart.addTypeCaches(typed_data.Uint8List);
typed_data.Uint8List[dart.implements] = () => [core.List$(core.int), typed_data._TypedIntList];
dart.setLibraryUri(typed_data.Uint8List, L59);
dart.defineLazy(typed_data.Uint8List, {
  /*typed_data.Uint8List.bytesPerElement*/get bytesPerElement() {
    return 1;
  }
}, false);
typed_data.Uint8ClampedList = class Uint8ClampedList extends core.Object {
  static view(buffer, offsetInBytes = 0, length = null) {
    if (buffer == null) dart.nullFailed(L140, 1109, 44, "buffer");
    if (offsetInBytes == null) dart.nullFailed(L140, 1110, 12, "offsetInBytes");
    return buffer[$asUint8ClampedList](offsetInBytes, length);
  }
  static sublistView(data, start = 0, end = null) {
    if (data == null) dart.nullFailed(L140, 1133, 50, "data");
    if (start == null) dart.nullFailed(L140, 1134, 12, "start");
    let elementSize = data[$elementSizeInBytes];
    end = core.RangeError.checkValidRange(start, end, (dart.notNull(data[$lengthInBytes]) / dart.notNull(elementSize))[$truncate]());
    if (end == null) dart.throw("unreachable");
    return data[$buffer][$asUint8ClampedList](dart.notNull(data[$offsetInBytes]) + dart.notNull(start) * dart.notNull(elementSize), (dart.notNull(end) - dart.notNull(start)) * dart.notNull(elementSize));
  }
  [Symbol.iterator]() {
    return new dart.JsIterator(this[$iterator]);
  }
};
(typed_data.Uint8ClampedList[dart.mixinNew] = function() {
}).prototype = typed_data.Uint8ClampedList.prototype;
typed_data.Uint8ClampedList.prototype[dart.isList] = true;
dart.addTypeTests(typed_data.Uint8ClampedList);
dart.addTypeCaches(typed_data.Uint8ClampedList);
typed_data.Uint8ClampedList[dart.implements] = () => [core.List$(core.int), typed_data._TypedIntList];
dart.setLibraryUri(typed_data.Uint8ClampedList, L59);
dart.defineLazy(typed_data.Uint8ClampedList, {
  /*typed_data.Uint8ClampedList.bytesPerElement*/get bytesPerElement() {
    return 1;
  }
}, false);
typed_data.Int16List = class Int16List extends core.Object {
  static view(buffer, offsetInBytes = 0, length = null) {
    if (buffer == null) dart.nullFailed(L140, 1238, 37, "buffer");
    if (offsetInBytes == null) dart.nullFailed(L140, 1239, 12, "offsetInBytes");
    return buffer[$asInt16List](offsetInBytes, length);
  }
  static sublistView(data, start = 0, end = null) {
    if (data == null) dart.nullFailed(L140, 1265, 43, "data");
    if (start == null) dart.nullFailed(L140, 1265, 54, "start");
    let elementSize = data[$elementSizeInBytes];
    end = core.RangeError.checkValidRange(start, end, (dart.notNull(data[$lengthInBytes]) / dart.notNull(elementSize))[$truncate]());
    if (end == null) dart.throw("unreachable");
    let byteLength = (dart.notNull(end) - dart.notNull(start)) * dart.notNull(elementSize);
    if (byteLength[$modulo](2) !== 0) {
      dart.throw(new core.ArgumentError.new("The number of bytes to view must be a multiple of " + dart.str(2)));
    }
    return data[$buffer][$asInt16List](dart.notNull(data[$offsetInBytes]) + dart.notNull(start) * dart.notNull(elementSize), (byteLength / 2)[$truncate]());
  }
  [Symbol.iterator]() {
    return new dart.JsIterator(this[$iterator]);
  }
};
(typed_data.Int16List[dart.mixinNew] = function() {
}).prototype = typed_data.Int16List.prototype;
typed_data.Int16List.prototype[dart.isList] = true;
dart.addTypeTests(typed_data.Int16List);
dart.addTypeCaches(typed_data.Int16List);
typed_data.Int16List[dart.implements] = () => [core.List$(core.int), typed_data._TypedIntList];
dart.setLibraryUri(typed_data.Int16List, L59);
dart.defineLazy(typed_data.Int16List, {
  /*typed_data.Int16List.bytesPerElement*/get bytesPerElement() {
    return 2;
  }
}, false);
typed_data.Uint16List = class Uint16List extends core.Object {
  static view(buffer, offsetInBytes = 0, length = null) {
    if (buffer == null) dart.nullFailed(L140, 1375, 38, "buffer");
    if (offsetInBytes == null) dart.nullFailed(L140, 1376, 12, "offsetInBytes");
    return buffer[$asUint16List](offsetInBytes, length);
  }
  static sublistView(data, start = 0, end = null) {
    if (data == null) dart.nullFailed(L140, 1402, 44, "data");
    if (start == null) dart.nullFailed(L140, 1402, 55, "start");
    let elementSize = data[$elementSizeInBytes];
    end = core.RangeError.checkValidRange(start, end, (dart.notNull(data[$lengthInBytes]) / dart.notNull(elementSize))[$truncate]());
    if (end == null) dart.throw("unreachable");
    let byteLength = (dart.notNull(end) - dart.notNull(start)) * dart.notNull(elementSize);
    if (byteLength[$modulo](2) !== 0) {
      dart.throw(new core.ArgumentError.new("The number of bytes to view must be a multiple of " + dart.str(2)));
    }
    return data[$buffer][$asUint16List](dart.notNull(data[$offsetInBytes]) + dart.notNull(start) * dart.notNull(elementSize), (byteLength / 2)[$truncate]());
  }
  [Symbol.iterator]() {
    return new dart.JsIterator(this[$iterator]);
  }
};
(typed_data.Uint16List[dart.mixinNew] = function() {
}).prototype = typed_data.Uint16List.prototype;
typed_data.Uint16List.prototype[dart.isList] = true;
dart.addTypeTests(typed_data.Uint16List);
dart.addTypeCaches(typed_data.Uint16List);
typed_data.Uint16List[dart.implements] = () => [core.List$(core.int), typed_data._TypedIntList];
dart.setLibraryUri(typed_data.Uint16List, L59);
dart.defineLazy(typed_data.Uint16List, {
  /*typed_data.Uint16List.bytesPerElement*/get bytesPerElement() {
    return 2;
  }
}, false);
typed_data.Int32List = class Int32List extends core.Object {
  static view(buffer, offsetInBytes = 0, length = null) {
    if (buffer == null) dart.nullFailed(L140, 1511, 37, "buffer");
    if (offsetInBytes == null) dart.nullFailed(L140, 1512, 12, "offsetInBytes");
    return buffer[$asInt32List](offsetInBytes, length);
  }
  static sublistView(data, start = 0, end = null) {
    if (data == null) dart.nullFailed(L140, 1538, 43, "data");
    if (start == null) dart.nullFailed(L140, 1538, 54, "start");
    let elementSize = data[$elementSizeInBytes];
    end = core.RangeError.checkValidRange(start, end, (dart.notNull(data[$lengthInBytes]) / dart.notNull(elementSize))[$truncate]());
    if (end == null) dart.throw("unreachable");
    let byteLength = (dart.notNull(end) - dart.notNull(start)) * dart.notNull(elementSize);
    if (byteLength[$modulo](4) !== 0) {
      dart.throw(new core.ArgumentError.new("The number of bytes to view must be a multiple of " + dart.str(4)));
    }
    return data[$buffer][$asInt32List](dart.notNull(data[$offsetInBytes]) + dart.notNull(start) * dart.notNull(elementSize), (byteLength / 4)[$truncate]());
  }
  [Symbol.iterator]() {
    return new dart.JsIterator(this[$iterator]);
  }
};
(typed_data.Int32List[dart.mixinNew] = function() {
}).prototype = typed_data.Int32List.prototype;
typed_data.Int32List.prototype[dart.isList] = true;
dart.addTypeTests(typed_data.Int32List);
dart.addTypeCaches(typed_data.Int32List);
typed_data.Int32List[dart.implements] = () => [core.List$(core.int), typed_data._TypedIntList];
dart.setLibraryUri(typed_data.Int32List, L59);
dart.defineLazy(typed_data.Int32List, {
  /*typed_data.Int32List.bytesPerElement*/get bytesPerElement() {
    return 4;
  }
}, false);
typed_data.Uint32List = class Uint32List extends core.Object {
  static view(buffer, offsetInBytes = 0, length = null) {
    if (buffer == null) dart.nullFailed(L140, 1648, 38, "buffer");
    if (offsetInBytes == null) dart.nullFailed(L140, 1649, 12, "offsetInBytes");
    return buffer[$asUint32List](offsetInBytes, length);
  }
  static sublistView(data, start = 0, end = null) {
    if (data == null) dart.nullFailed(L140, 1675, 44, "data");
    if (start == null) dart.nullFailed(L140, 1675, 55, "start");
    let elementSize = data[$elementSizeInBytes];
    end = core.RangeError.checkValidRange(start, end, (dart.notNull(data[$lengthInBytes]) / dart.notNull(elementSize))[$truncate]());
    if (end == null) dart.throw("unreachable");
    let byteLength = (dart.notNull(end) - dart.notNull(start)) * dart.notNull(elementSize);
    if (byteLength[$modulo](4) !== 0) {
      dart.throw(new core.ArgumentError.new("The number of bytes to view must be a multiple of " + dart.str(4)));
    }
    return data[$buffer][$asUint32List](dart.notNull(data[$offsetInBytes]) + dart.notNull(start) * dart.notNull(elementSize), (byteLength / 4)[$truncate]());
  }
  [Symbol.iterator]() {
    return new dart.JsIterator(this[$iterator]);
  }
};
(typed_data.Uint32List[dart.mixinNew] = function() {
}).prototype = typed_data.Uint32List.prototype;
typed_data.Uint32List.prototype[dart.isList] = true;
dart.addTypeTests(typed_data.Uint32List);
dart.addTypeCaches(typed_data.Uint32List);
typed_data.Uint32List[dart.implements] = () => [core.List$(core.int), typed_data._TypedIntList];
dart.setLibraryUri(typed_data.Uint32List, L59);
dart.defineLazy(typed_data.Uint32List, {
  /*typed_data.Uint32List.bytesPerElement*/get bytesPerElement() {
    return 4;
  }
}, false);
typed_data.Int64List = class Int64List extends core.Object {
  static new(length) {
    if (length == null) dart.nullFailed(L141, 101, 25, "length");
    dart.throw(new core.UnsupportedError.new("Int64List not supported on the web."));
  }
  static fromList(elements) {
    if (elements == null) dart.nullFailed(L141, 106, 40, "elements");
    dart.throw(new core.UnsupportedError.new("Int64List not supported on the web."));
  }
  static view(buffer, offsetInBytes = 0, length = null) {
    if (buffer == null) dart.nullFailed(L140, 1784, 37, "buffer");
    if (offsetInBytes == null) dart.nullFailed(L140, 1785, 12, "offsetInBytes");
    return buffer[$asInt64List](offsetInBytes, length);
  }
  static sublistView(data, start = 0, end = null) {
    if (data == null) dart.nullFailed(L140, 1811, 43, "data");
    if (start == null) dart.nullFailed(L140, 1811, 54, "start");
    let elementSize = data[$elementSizeInBytes];
    end = core.RangeError.checkValidRange(start, end, (dart.notNull(data[$lengthInBytes]) / dart.notNull(elementSize))[$truncate]());
    if (end == null) dart.throw("unreachable");
    let byteLength = (dart.notNull(end) - dart.notNull(start)) * dart.notNull(elementSize);
    if (byteLength[$modulo](8) !== 0) {
      dart.throw(new core.ArgumentError.new("The number of bytes to view must be a multiple of " + dart.str(8)));
    }
    return data[$buffer][$asInt64List](dart.notNull(data[$offsetInBytes]) + dart.notNull(start) * dart.notNull(elementSize), (byteLength / 8)[$truncate]());
  }
  [Symbol.iterator]() {
    return new dart.JsIterator(this[$iterator]);
  }
};
(typed_data.Int64List[dart.mixinNew] = function() {
}).prototype = typed_data.Int64List.prototype;
typed_data.Int64List.prototype[dart.isList] = true;
dart.addTypeTests(typed_data.Int64List);
dart.addTypeCaches(typed_data.Int64List);
typed_data.Int64List[dart.implements] = () => [core.List$(core.int), typed_data._TypedIntList];
dart.setLibraryUri(typed_data.Int64List, L59);
dart.defineLazy(typed_data.Int64List, {
  /*typed_data.Int64List.bytesPerElement*/get bytesPerElement() {
    return 8;
  }
}, false);
typed_data.Uint64List = class Uint64List extends core.Object {
  static new(length) {
    if (length == null) dart.nullFailed(L141, 114, 26, "length");
    dart.throw(new core.UnsupportedError.new("Uint64List not supported on the web."));
  }
  static fromList(elements) {
    if (elements == null) dart.nullFailed(L141, 119, 41, "elements");
    dart.throw(new core.UnsupportedError.new("Uint64List not supported on the web."));
  }
  static view(buffer, offsetInBytes = 0, length = null) {
    if (buffer == null) dart.nullFailed(L140, 1921, 38, "buffer");
    if (offsetInBytes == null) dart.nullFailed(L140, 1922, 12, "offsetInBytes");
    return buffer[$asUint64List](offsetInBytes, length);
  }
  static sublistView(data, start = 0, end = null) {
    if (data == null) dart.nullFailed(L140, 1948, 44, "data");
    if (start == null) dart.nullFailed(L140, 1948, 55, "start");
    let elementSize = data[$elementSizeInBytes];
    end = core.RangeError.checkValidRange(start, end, (dart.notNull(data[$lengthInBytes]) / dart.notNull(elementSize))[$truncate]());
    if (end == null) dart.throw("unreachable");
    let byteLength = (dart.notNull(end) - dart.notNull(start)) * dart.notNull(elementSize);
    if (byteLength[$modulo](8) !== 0) {
      dart.throw(new core.ArgumentError.new("The number of bytes to view must be a multiple of " + dart.str(8)));
    }
    return data[$buffer][$asUint64List](dart.notNull(data[$offsetInBytes]) + dart.notNull(start) * dart.notNull(elementSize), (byteLength / 8)[$truncate]());
  }
  [Symbol.iterator]() {
    return new dart.JsIterator(this[$iterator]);
  }
};
(typed_data.Uint64List[dart.mixinNew] = function() {
}).prototype = typed_data.Uint64List.prototype;
typed_data.Uint64List.prototype[dart.isList] = true;
dart.addTypeTests(typed_data.Uint64List);
dart.addTypeCaches(typed_data.Uint64List);
typed_data.Uint64List[dart.implements] = () => [core.List$(core.int), typed_data._TypedIntList];
dart.setLibraryUri(typed_data.Uint64List, L59);
dart.defineLazy(typed_data.Uint64List, {
  /*typed_data.Uint64List.bytesPerElement*/get bytesPerElement() {
    return 8;
  }
}, false);
typed_data.Float32List = class Float32List extends core.Object {
  static view(buffer, offsetInBytes = 0, length = null) {
    if (buffer == null) dart.nullFailed(L140, 2058, 39, "buffer");
    if (offsetInBytes == null) dart.nullFailed(L140, 2059, 12, "offsetInBytes");
    return buffer[$asFloat32List](offsetInBytes, length);
  }
  static sublistView(data, start = 0, end = null) {
    if (data == null) dart.nullFailed(L140, 2085, 45, "data");
    if (start == null) dart.nullFailed(L140, 2085, 56, "start");
    let elementSize = data[$elementSizeInBytes];
    end = core.RangeError.checkValidRange(start, end, (dart.notNull(data[$lengthInBytes]) / dart.notNull(elementSize))[$truncate]());
    if (end == null) dart.throw("unreachable");
    let byteLength = (dart.notNull(end) - dart.notNull(start)) * dart.notNull(elementSize);
    if (byteLength[$modulo](4) !== 0) {
      dart.throw(new core.ArgumentError.new("The number of bytes to view must be a multiple of " + dart.str(4)));
    }
    return data[$buffer][$asFloat32List](dart.notNull(data[$offsetInBytes]) + dart.notNull(start) * dart.notNull(elementSize), (byteLength / 4)[$truncate]());
  }
  [Symbol.iterator]() {
    return new dart.JsIterator(this[$iterator]);
  }
};
(typed_data.Float32List[dart.mixinNew] = function() {
}).prototype = typed_data.Float32List.prototype;
typed_data.Float32List.prototype[dart.isList] = true;
dart.addTypeTests(typed_data.Float32List);
dart.addTypeCaches(typed_data.Float32List);
typed_data.Float32List[dart.implements] = () => [core.List$(core.double), typed_data._TypedFloatList];
dart.setLibraryUri(typed_data.Float32List, L59);
dart.defineLazy(typed_data.Float32List, {
  /*typed_data.Float32List.bytesPerElement*/get bytesPerElement() {
    return 4;
  }
}, false);
typed_data.Float64List = class Float64List extends core.Object {
  static view(buffer, offsetInBytes = 0, length = null) {
    if (buffer == null) dart.nullFailed(L140, 2188, 39, "buffer");
    if (offsetInBytes == null) dart.nullFailed(L140, 2189, 12, "offsetInBytes");
    return buffer[$asFloat64List](offsetInBytes, length);
  }
  static sublistView(data, start = 0, end = null) {
    if (data == null) dart.nullFailed(L140, 2215, 45, "data");
    if (start == null) dart.nullFailed(L140, 2215, 56, "start");
    let elementSize = data[$elementSizeInBytes];
    end = core.RangeError.checkValidRange(start, end, (dart.notNull(data[$lengthInBytes]) / dart.notNull(elementSize))[$truncate]());
    if (end == null) dart.throw("unreachable");
    let byteLength = (dart.notNull(end) - dart.notNull(start)) * dart.notNull(elementSize);
    if (byteLength[$modulo](8) !== 0) {
      dart.throw(new core.ArgumentError.new("The number of bytes to view must be a multiple of " + dart.str(8)));
    }
    return data[$buffer][$asFloat64List](dart.notNull(data[$offsetInBytes]) + dart.notNull(start) * dart.notNull(elementSize), (byteLength / 8)[$truncate]());
  }
  [Symbol.iterator]() {
    return new dart.JsIterator(this[$iterator]);
  }
};
(typed_data.Float64List[dart.mixinNew] = function() {
}).prototype = typed_data.Float64List.prototype;
typed_data.Float64List.prototype[dart.isList] = true;
dart.addTypeTests(typed_data.Float64List);
dart.addTypeCaches(typed_data.Float64List);
typed_data.Float64List[dart.implements] = () => [core.List$(core.double), typed_data._TypedFloatList];
dart.setLibraryUri(typed_data.Float64List, L59);
dart.defineLazy(typed_data.Float64List, {
  /*typed_data.Float64List.bytesPerElement*/get bytesPerElement() {
    return 8;
  }
}, false);
typed_data.Float32x4List = class Float32x4List extends core.Object {
  static view(buffer, offsetInBytes = 0, length = null) {
    if (buffer == null) dart.nullFailed(L140, 2317, 41, "buffer");
    if (offsetInBytes == null) dart.nullFailed(L140, 2318, 12, "offsetInBytes");
    return buffer[$asFloat32x4List](offsetInBytes, length);
  }
  static sublistView(data, start = 0, end = null) {
    if (data == null) dart.nullFailed(L140, 2344, 47, "data");
    if (start == null) dart.nullFailed(L140, 2344, 58, "start");
    let elementSize = data[$elementSizeInBytes];
    end = core.RangeError.checkValidRange(start, end, (dart.notNull(data[$lengthInBytes]) / dart.notNull(elementSize))[$truncate]());
    if (end == null) dart.throw("unreachable");
    let byteLength = (dart.notNull(end) - dart.notNull(start)) * dart.notNull(elementSize);
    if (byteLength[$modulo](16) !== 0) {
      dart.throw(new core.ArgumentError.new("The number of bytes to view must be a multiple of " + dart.str(16)));
    }
    return data[$buffer][$asFloat32x4List](dart.notNull(data[$offsetInBytes]) + dart.notNull(start) * dart.notNull(elementSize), (byteLength / 16)[$truncate]());
  }
  [Symbol.iterator]() {
    return new dart.JsIterator(this[$iterator]);
  }
};
(typed_data.Float32x4List[dart.mixinNew] = function() {
}).prototype = typed_data.Float32x4List.prototype;
typed_data.Float32x4List.prototype[dart.isList] = true;
dart.addTypeTests(typed_data.Float32x4List);
dart.addTypeCaches(typed_data.Float32x4List);
typed_data.Float32x4List[dart.implements] = () => [core.List$(typed_data.Float32x4), typed_data.TypedData];
dart.setLibraryUri(typed_data.Float32x4List, L59);
dart.defineLazy(typed_data.Float32x4List, {
  /*typed_data.Float32x4List.bytesPerElement*/get bytesPerElement() {
    return 16;
  }
}, false);
typed_data.Int32x4List = class Int32x4List extends core.Object {
  static view(buffer, offsetInBytes = 0, length = null) {
    if (buffer == null) dart.nullFailed(L140, 2454, 39, "buffer");
    if (offsetInBytes == null) dart.nullFailed(L140, 2455, 12, "offsetInBytes");
    return buffer[$asInt32x4List](offsetInBytes, length);
  }
  static sublistView(data, start = 0, end = null) {
    if (data == null) dart.nullFailed(L140, 2481, 45, "data");
    if (start == null) dart.nullFailed(L140, 2481, 56, "start");
    let elementSize = data[$elementSizeInBytes];
    end = core.RangeError.checkValidRange(start, end, (dart.notNull(data[$lengthInBytes]) / dart.notNull(elementSize))[$truncate]());
    if (end == null) dart.throw("unreachable");
    let byteLength = (dart.notNull(end) - dart.notNull(start)) * dart.notNull(elementSize);
    if (byteLength[$modulo](16) !== 0) {
      dart.throw(new core.ArgumentError.new("The number of bytes to view must be a multiple of " + dart.str(16)));
    }
    return data[$buffer][$asInt32x4List](dart.notNull(data[$offsetInBytes]) + dart.notNull(start) * dart.notNull(elementSize), (byteLength / 16)[$truncate]());
  }
  [Symbol.iterator]() {
    return new dart.JsIterator(this[$iterator]);
  }
};
(typed_data.Int32x4List[dart.mixinNew] = function() {
}).prototype = typed_data.Int32x4List.prototype;
typed_data.Int32x4List.prototype[dart.isList] = true;
dart.addTypeTests(typed_data.Int32x4List);
dart.addTypeCaches(typed_data.Int32x4List);
typed_data.Int32x4List[dart.implements] = () => [core.List$(typed_data.Int32x4), typed_data.TypedData];
dart.setLibraryUri(typed_data.Int32x4List, L59);
dart.defineLazy(typed_data.Int32x4List, {
  /*typed_data.Int32x4List.bytesPerElement*/get bytesPerElement() {
    return 16;
  }
}, false);
typed_data.Float64x2List = class Float64x2List extends core.Object {
  static view(buffer, offsetInBytes = 0, length = null) {
    if (buffer == null) dart.nullFailed(L140, 2599, 41, "buffer");
    if (offsetInBytes == null) dart.nullFailed(L140, 2600, 12, "offsetInBytes");
    return buffer[$asFloat64x2List](offsetInBytes, length);
  }
  static sublistView(data, start = 0, end = null) {
    if (data == null) dart.nullFailed(L140, 2626, 47, "data");
    if (start == null) dart.nullFailed(L140, 2626, 58, "start");
    let elementSize = data[$elementSizeInBytes];
    end = core.RangeError.checkValidRange(start, end, (dart.notNull(data[$lengthInBytes]) / dart.notNull(elementSize))[$truncate]());
    if (end == null) dart.throw("unreachable");
    let byteLength = (dart.notNull(end) - dart.notNull(start)) * dart.notNull(elementSize);
    if (byteLength[$modulo](16) !== 0) {
      dart.throw(new core.ArgumentError.new("The number of bytes to view must be a multiple of " + dart.str(16)));
    }
    return data[$buffer][$asFloat64x2List](dart.notNull(data[$offsetInBytes]) + dart.notNull(start) * dart.notNull(elementSize), (byteLength / 16)[$truncate]());
  }
  [Symbol.iterator]() {
    return new dart.JsIterator(this[$iterator]);
  }
};
(typed_data.Float64x2List[dart.mixinNew] = function() {
}).prototype = typed_data.Float64x2List.prototype;
typed_data.Float64x2List.prototype[dart.isList] = true;
dart.addTypeTests(typed_data.Float64x2List);
dart.addTypeCaches(typed_data.Float64x2List);
typed_data.Float64x2List[dart.implements] = () => [core.List$(typed_data.Float64x2), typed_data.TypedData];
dart.setLibraryUri(typed_data.Float64x2List, L59);
dart.defineLazy(typed_data.Float64x2List, {
  /*typed_data.Float64x2List.bytesPerElement*/get bytesPerElement() {
    return 16;
  }
}, false);
var _data$ = dart.privateName(typed_data, "_data");
typed_data.UnmodifiableByteBufferView = class UnmodifiableByteBufferView extends core.Object {
  get lengthInBytes() {
    return this[_data$][$lengthInBytes];
  }
  asUint8List(offsetInBytes = 0, length = null) {
    if (offsetInBytes == null) dart.nullFailed(L142, 17, 30, "offsetInBytes");
    return new typed_data.UnmodifiableUint8ListView.new(this[_data$][$asUint8List](offsetInBytes, length));
  }
  asInt8List(offsetInBytes = 0, length = null) {
    if (offsetInBytes == null) dart.nullFailed(L142, 20, 28, "offsetInBytes");
    return new typed_data.UnmodifiableInt8ListView.new(this[_data$][$asInt8List](offsetInBytes, length));
  }
  asUint8ClampedList(offsetInBytes = 0, length = null) {
    if (offsetInBytes == null) dart.nullFailed(L142, 23, 44, "offsetInBytes");
    return new typed_data.UnmodifiableUint8ClampedListView.new(this[_data$][$asUint8ClampedList](offsetInBytes, length));
  }
  asUint16List(offsetInBytes = 0, length = null) {
    if (offsetInBytes == null) dart.nullFailed(L142, 27, 32, "offsetInBytes");
    return new typed_data.UnmodifiableUint16ListView.new(this[_data$][$asUint16List](offsetInBytes, length));
  }
  asInt16List(offsetInBytes = 0, length = null) {
    if (offsetInBytes == null) dart.nullFailed(L142, 30, 30, "offsetInBytes");
    return new typed_data.UnmodifiableInt16ListView.new(this[_data$][$asInt16List](offsetInBytes, length));
  }
  asUint32List(offsetInBytes = 0, length = null) {
    if (offsetInBytes == null) dart.nullFailed(L142, 33, 32, "offsetInBytes");
    return new typed_data.UnmodifiableUint32ListView.new(this[_data$][$asUint32List](offsetInBytes, length));
  }
  asInt32List(offsetInBytes = 0, length = null) {
    if (offsetInBytes == null) dart.nullFailed(L142, 36, 30, "offsetInBytes");
    return new typed_data.UnmodifiableInt32ListView.new(this[_data$][$asInt32List](offsetInBytes, length));
  }
  asUint64List(offsetInBytes = 0, length = null) {
    if (offsetInBytes == null) dart.nullFailed(L142, 39, 32, "offsetInBytes");
    return new typed_data.UnmodifiableUint64ListView.new(this[_data$][$asUint64List](offsetInBytes, length));
  }
  asInt64List(offsetInBytes = 0, length = null) {
    if (offsetInBytes == null) dart.nullFailed(L142, 42, 30, "offsetInBytes");
    return new typed_data.UnmodifiableInt64ListView.new(this[_data$][$asInt64List](offsetInBytes, length));
  }
  asInt32x4List(offsetInBytes = 0, length = null) {
    if (offsetInBytes == null) dart.nullFailed(L142, 45, 34, "offsetInBytes");
    return new typed_data.UnmodifiableInt32x4ListView.new(this[_data$][$asInt32x4List](offsetInBytes, length));
  }
  asFloat32List(offsetInBytes = 0, length = null) {
    if (offsetInBytes == null) dart.nullFailed(L142, 49, 34, "offsetInBytes");
    return new typed_data.UnmodifiableFloat32ListView.new(this[_data$][$asFloat32List](offsetInBytes, length));
  }
  asFloat64List(offsetInBytes = 0, length = null) {
    if (offsetInBytes == null) dart.nullFailed(L142, 53, 34, "offsetInBytes");
    return new typed_data.UnmodifiableFloat64ListView.new(this[_data$][$asFloat64List](offsetInBytes, length));
  }
  asFloat32x4List(offsetInBytes = 0, length = null) {
    if (offsetInBytes == null) dart.nullFailed(L142, 57, 38, "offsetInBytes");
    return new typed_data.UnmodifiableFloat32x4ListView.new(this[_data$][$asFloat32x4List](offsetInBytes, length));
  }
  asFloat64x2List(offsetInBytes = 0, length = null) {
    if (offsetInBytes == null) dart.nullFailed(L142, 61, 38, "offsetInBytes");
    return new typed_data.UnmodifiableFloat64x2ListView.new(this[_data$][$asFloat64x2List](offsetInBytes, length));
  }
  asByteData(offsetInBytes = 0, length = null) {
    if (offsetInBytes == null) dart.nullFailed(L142, 65, 28, "offsetInBytes");
    return new typed_data.UnmodifiableByteDataView.new(this[_data$][$asByteData](offsetInBytes, length));
  }
};
(typed_data.UnmodifiableByteBufferView.new = function(data) {
  if (data == null) dart.nullFailed(L142, 13, 41, "data");
  this[_data$] = data;
  ;
}).prototype = typed_data.UnmodifiableByteBufferView.prototype;
dart.addTypeTests(typed_data.UnmodifiableByteBufferView);
dart.addTypeCaches(typed_data.UnmodifiableByteBufferView);
typed_data.UnmodifiableByteBufferView[dart.implements] = () => [typed_data.ByteBuffer];
dart.setMethodSignature(typed_data.UnmodifiableByteBufferView, () => ({
  __proto__: dart.getMethods(typed_data.UnmodifiableByteBufferView.__proto__),
  asUint8List: dart.fnType(typed_data.Uint8List, [], [core.int, dart.nullable(core.int)]),
  [$asUint8List]: dart.fnType(typed_data.Uint8List, [], [core.int, dart.nullable(core.int)]),
  asInt8List: dart.fnType(typed_data.Int8List, [], [core.int, dart.nullable(core.int)]),
  [$asInt8List]: dart.fnType(typed_data.Int8List, [], [core.int, dart.nullable(core.int)]),
  asUint8ClampedList: dart.fnType(typed_data.Uint8ClampedList, [], [core.int, dart.nullable(core.int)]),
  [$asUint8ClampedList]: dart.fnType(typed_data.Uint8ClampedList, [], [core.int, dart.nullable(core.int)]),
  asUint16List: dart.fnType(typed_data.Uint16List, [], [core.int, dart.nullable(core.int)]),
  [$asUint16List]: dart.fnType(typed_data.Uint16List, [], [core.int, dart.nullable(core.int)]),
  asInt16List: dart.fnType(typed_data.Int16List, [], [core.int, dart.nullable(core.int)]),
  [$asInt16List]: dart.fnType(typed_data.Int16List, [], [core.int, dart.nullable(core.int)]),
  asUint32List: dart.fnType(typed_data.Uint32List, [], [core.int, dart.nullable(core.int)]),
  [$asUint32List]: dart.fnType(typed_data.Uint32List, [], [core.int, dart.nullable(core.int)]),
  asInt32List: dart.fnType(typed_data.Int32List, [], [core.int, dart.nullable(core.int)]),
  [$asInt32List]: dart.fnType(typed_data.Int32List, [], [core.int, dart.nullable(core.int)]),
  asUint64List: dart.fnType(typed_data.Uint64List, [], [core.int, dart.nullable(core.int)]),
  [$asUint64List]: dart.fnType(typed_data.Uint64List, [], [core.int, dart.nullable(core.int)]),
  asInt64List: dart.fnType(typed_data.Int64List, [], [core.int, dart.nullable(core.int)]),
  [$asInt64List]: dart.fnType(typed_data.Int64List, [], [core.int, dart.nullable(core.int)]),
  asInt32x4List: dart.fnType(typed_data.Int32x4List, [], [core.int, dart.nullable(core.int)]),
  [$asInt32x4List]: dart.fnType(typed_data.Int32x4List, [], [core.int, dart.nullable(core.int)]),
  asFloat32List: dart.fnType(typed_data.Float32List, [], [core.int, dart.nullable(core.int)]),
  [$asFloat32List]: dart.fnType(typed_data.Float32List, [], [core.int, dart.nullable(core.int)]),
  asFloat64List: dart.fnType(typed_data.Float64List, [], [core.int, dart.nullable(core.int)]),
  [$asFloat64List]: dart.fnType(typed_data.Float64List, [], [core.int, dart.nullable(core.int)]),
  asFloat32x4List: dart.fnType(typed_data.Float32x4List, [], [core.int, dart.nullable(core.int)]),
  [$asFloat32x4List]: dart.fnType(typed_data.Float32x4List, [], [core.int, dart.nullable(core.int)]),
  asFloat64x2List: dart.fnType(typed_data.Float64x2List, [], [core.int, dart.nullable(core.int)]),
  [$asFloat64x2List]: dart.fnType(typed_data.Float64x2List, [], [core.int, dart.nullable(core.int)]),
  asByteData: dart.fnType(typed_data.ByteData, [], [core.int, dart.nullable(core.int)]),
  [$asByteData]: dart.fnType(typed_data.ByteData, [], [core.int, dart.nullable(core.int)])
}));
dart.setGetterSignature(typed_data.UnmodifiableByteBufferView, () => ({
  __proto__: dart.getGetters(typed_data.UnmodifiableByteBufferView.__proto__),
  lengthInBytes: core.int,
  [$lengthInBytes]: core.int
}));
dart.setLibraryUri(typed_data.UnmodifiableByteBufferView, L59);
dart.setFieldSignature(typed_data.UnmodifiableByteBufferView, () => ({
  __proto__: dart.getFields(typed_data.UnmodifiableByteBufferView.__proto__),
  [_data$]: dart.finalFieldType(typed_data.ByteBuffer)
}));
dart.defineExtensionMethods(typed_data.UnmodifiableByteBufferView, [
  'asUint8List',
  'asInt8List',
  'asUint8ClampedList',
  'asUint16List',
  'asInt16List',
  'asUint32List',
  'asInt32List',
  'asUint64List',
  'asInt64List',
  'asInt32x4List',
  'asFloat32List',
  'asFloat64List',
  'asFloat32x4List',
  'asFloat64x2List',
  'asByteData'
]);
dart.defineExtensionAccessors(typed_data.UnmodifiableByteBufferView, ['lengthInBytes']);
var _unsupported$ = dart.privateName(typed_data, "_unsupported");
typed_data.UnmodifiableByteDataView = class UnmodifiableByteDataView extends core.Object {
  getInt8(byteOffset) {
    if (byteOffset == null) dart.nullFailed(L142, 77, 19, "byteOffset");
    return this[_data$][$getInt8](byteOffset);
  }
  setInt8(byteOffset, value) {
    if (byteOffset == null) dart.nullFailed(L142, 79, 20, "byteOffset");
    if (value == null) dart.nullFailed(L142, 79, 36, "value");
    return this[_unsupported$]();
  }
  getUint8(byteOffset) {
    if (byteOffset == null) dart.nullFailed(L142, 81, 20, "byteOffset");
    return this[_data$][$getUint8](byteOffset);
  }
  setUint8(byteOffset, value) {
    if (byteOffset == null) dart.nullFailed(L142, 83, 21, "byteOffset");
    if (value == null) dart.nullFailed(L142, 83, 37, "value");
    return this[_unsupported$]();
  }
  getInt16(byteOffset, endian = C34 || CT.C34) {
    if (byteOffset == null) dart.nullFailed(L142, 85, 20, "byteOffset");
    if (endian == null) dart.nullFailed(L142, 85, 40, "endian");
    return this[_data$][$getInt16](byteOffset, endian);
  }
  setInt16(byteOffset, value, endian = C34 || CT.C34) {
    if (byteOffset == null) dart.nullFailed(L142, 88, 21, "byteOffset");
    if (value == null) dart.nullFailed(L142, 88, 37, "value");
    if (endian == null) dart.nullFailed(L142, 88, 52, "endian");
    return this[_unsupported$]();
  }
  getUint16(byteOffset, endian = C34 || CT.C34) {
    if (byteOffset == null) dart.nullFailed(L142, 91, 21, "byteOffset");
    if (endian == null) dart.nullFailed(L142, 91, 41, "endian");
    return this[_data$][$getUint16](byteOffset, endian);
  }
  setUint16(byteOffset, value, endian = C34 || CT.C34) {
    if (byteOffset == null) dart.nullFailed(L142, 94, 22, "byteOffset");
    if (value == null) dart.nullFailed(L142, 94, 38, "value");
    if (endian == null) dart.nullFailed(L142, 94, 53, "endian");
    return this[_unsupported$]();
  }
  getInt32(byteOffset, endian = C34 || CT.C34) {
    if (byteOffset == null) dart.nullFailed(L142, 97, 20, "byteOffset");
    if (endian == null) dart.nullFailed(L142, 97, 40, "endian");
    return this[_data$][$getInt32](byteOffset, endian);
  }
  setInt32(byteOffset, value, endian = C34 || CT.C34) {
    if (byteOffset == null) dart.nullFailed(L142, 100, 21, "byteOffset");
    if (value == null) dart.nullFailed(L142, 100, 37, "value");
    if (endian == null) dart.nullFailed(L142, 100, 52, "endian");
    return this[_unsupported$]();
  }
  getUint32(byteOffset, endian = C34 || CT.C34) {
    if (byteOffset == null) dart.nullFailed(L142, 103, 21, "byteOffset");
    if (endian == null) dart.nullFailed(L142, 103, 41, "endian");
    return this[_data$][$getUint32](byteOffset, endian);
  }
  setUint32(byteOffset, value, endian = C34 || CT.C34) {
    if (byteOffset == null) dart.nullFailed(L142, 106, 22, "byteOffset");
    if (value == null) dart.nullFailed(L142, 106, 38, "value");
    if (endian == null) dart.nullFailed(L142, 106, 53, "endian");
    return this[_unsupported$]();
  }
  getInt64(byteOffset, endian = C34 || CT.C34) {
    if (byteOffset == null) dart.nullFailed(L142, 109, 20, "byteOffset");
    if (endian == null) dart.nullFailed(L142, 109, 40, "endian");
    return this[_data$][$getInt64](byteOffset, endian);
  }
  setInt64(byteOffset, value, endian = C34 || CT.C34) {
    if (byteOffset == null) dart.nullFailed(L142, 112, 21, "byteOffset");
    if (value == null) dart.nullFailed(L142, 112, 37, "value");
    if (endian == null) dart.nullFailed(L142, 112, 52, "endian");
    return this[_unsupported$]();
  }
  getUint64(byteOffset, endian = C34 || CT.C34) {
    if (byteOffset == null) dart.nullFailed(L142, 115, 21, "byteOffset");
    if (endian == null) dart.nullFailed(L142, 115, 41, "endian");
    return this[_data$][$getUint64](byteOffset, endian);
  }
  setUint64(byteOffset, value, endian = C34 || CT.C34) {
    if (byteOffset == null) dart.nullFailed(L142, 118, 22, "byteOffset");
    if (value == null) dart.nullFailed(L142, 118, 38, "value");
    if (endian == null) dart.nullFailed(L142, 118, 53, "endian");
    return this[_unsupported$]();
  }
  getFloat32(byteOffset, endian = C34 || CT.C34) {
    if (byteOffset == null) dart.nullFailed(L142, 121, 25, "byteOffset");
    if (endian == null) dart.nullFailed(L142, 121, 45, "endian");
    return this[_data$][$getFloat32](byteOffset, endian);
  }
  setFloat32(byteOffset, value, endian = C34 || CT.C34) {
    if (byteOffset == null) dart.nullFailed(L142, 124, 23, "byteOffset");
    if (value == null) dart.nullFailed(L142, 124, 42, "value");
    if (endian == null) dart.nullFailed(L142, 124, 57, "endian");
    return this[_unsupported$]();
  }
  getFloat64(byteOffset, endian = C34 || CT.C34) {
    if (byteOffset == null) dart.nullFailed(L142, 127, 25, "byteOffset");
    if (endian == null) dart.nullFailed(L142, 127, 45, "endian");
    return this[_data$][$getFloat64](byteOffset, endian);
  }
  setFloat64(byteOffset, value, endian = C34 || CT.C34) {
    if (byteOffset == null) dart.nullFailed(L142, 130, 23, "byteOffset");
    if (value == null) dart.nullFailed(L142, 130, 42, "value");
    if (endian == null) dart.nullFailed(L142, 130, 57, "endian");
    return this[_unsupported$]();
  }
  get elementSizeInBytes() {
    return this[_data$][$elementSizeInBytes];
  }
  get offsetInBytes() {
    return this[_data$][$offsetInBytes];
  }
  get lengthInBytes() {
    return this[_data$][$lengthInBytes];
  }
  get buffer() {
    return new typed_data.UnmodifiableByteBufferView.new(this[_data$][$buffer]);
  }
  [_unsupported$]() {
    dart.throw(new core.UnsupportedError.new("An UnmodifiableByteDataView may not be modified"));
  }
};
(typed_data.UnmodifiableByteDataView.new = function(data) {
  if (data == null) dart.nullFailed(L142, 75, 37, "data");
  this[_data$] = data;
  ;
}).prototype = typed_data.UnmodifiableByteDataView.prototype;
dart.addTypeTests(typed_data.UnmodifiableByteDataView);
dart.addTypeCaches(typed_data.UnmodifiableByteDataView);
typed_data.UnmodifiableByteDataView[dart.implements] = () => [typed_data.ByteData];
dart.setMethodSignature(typed_data.UnmodifiableByteDataView, () => ({
  __proto__: dart.getMethods(typed_data.UnmodifiableByteDataView.__proto__),
  getInt8: dart.fnType(core.int, [core.int]),
  [$getInt8]: dart.fnType(core.int, [core.int]),
  setInt8: dart.fnType(dart.void, [core.int, core.int]),
  [$setInt8]: dart.fnType(dart.void, [core.int, core.int]),
  getUint8: dart.fnType(core.int, [core.int]),
  [$getUint8]: dart.fnType(core.int, [core.int]),
  setUint8: dart.fnType(dart.void, [core.int, core.int]),
  [$setUint8]: dart.fnType(dart.void, [core.int, core.int]),
  getInt16: dart.fnType(core.int, [core.int], [typed_data.Endian]),
  [$getInt16]: dart.fnType(core.int, [core.int], [typed_data.Endian]),
  setInt16: dart.fnType(dart.void, [core.int, core.int], [typed_data.Endian]),
  [$setInt16]: dart.fnType(dart.void, [core.int, core.int], [typed_data.Endian]),
  getUint16: dart.fnType(core.int, [core.int], [typed_data.Endian]),
  [$getUint16]: dart.fnType(core.int, [core.int], [typed_data.Endian]),
  setUint16: dart.fnType(dart.void, [core.int, core.int], [typed_data.Endian]),
  [$setUint16]: dart.fnType(dart.void, [core.int, core.int], [typed_data.Endian]),
  getInt32: dart.fnType(core.int, [core.int], [typed_data.Endian]),
  [$getInt32]: dart.fnType(core.int, [core.int], [typed_data.Endian]),
  setInt32: dart.fnType(dart.void, [core.int, core.int], [typed_data.Endian]),
  [$setInt32]: dart.fnType(dart.void, [core.int, core.int], [typed_data.Endian]),
  getUint32: dart.fnType(core.int, [core.int], [typed_data.Endian]),
  [$getUint32]: dart.fnType(core.int, [core.int], [typed_data.Endian]),
  setUint32: dart.fnType(dart.void, [core.int, core.int], [typed_data.Endian]),
  [$setUint32]: dart.fnType(dart.void, [core.int, core.int], [typed_data.Endian]),
  getInt64: dart.fnType(core.int, [core.int], [typed_data.Endian]),
  [$getInt64]: dart.fnType(core.int, [core.int], [typed_data.Endian]),
  setInt64: dart.fnType(dart.void, [core.int, core.int], [typed_data.Endian]),
  [$setInt64]: dart.fnType(dart.void, [core.int, core.int], [typed_data.Endian]),
  getUint64: dart.fnType(core.int, [core.int], [typed_data.Endian]),
  [$getUint64]: dart.fnType(core.int, [core.int], [typed_data.Endian]),
  setUint64: dart.fnType(dart.void, [core.int, core.int], [typed_data.Endian]),
  [$setUint64]: dart.fnType(dart.void, [core.int, core.int], [typed_data.Endian]),
  getFloat32: dart.fnType(core.double, [core.int], [typed_data.Endian]),
  [$getFloat32]: dart.fnType(core.double, [core.int], [typed_data.Endian]),
  setFloat32: dart.fnType(dart.void, [core.int, core.double], [typed_data.Endian]),
  [$setFloat32]: dart.fnType(dart.void, [core.int, core.double], [typed_data.Endian]),
  getFloat64: dart.fnType(core.double, [core.int], [typed_data.Endian]),
  [$getFloat64]: dart.fnType(core.double, [core.int], [typed_data.Endian]),
  setFloat64: dart.fnType(dart.void, [core.int, core.double], [typed_data.Endian]),
  [$setFloat64]: dart.fnType(dart.void, [core.int, core.double], [typed_data.Endian]),
  [_unsupported$]: dart.fnType(dart.void, [])
}));
dart.setGetterSignature(typed_data.UnmodifiableByteDataView, () => ({
  __proto__: dart.getGetters(typed_data.UnmodifiableByteDataView.__proto__),
  elementSizeInBytes: core.int,
  [$elementSizeInBytes]: core.int,
  offsetInBytes: core.int,
  [$offsetInBytes]: core.int,
  lengthInBytes: core.int,
  [$lengthInBytes]: core.int,
  buffer: typed_data.ByteBuffer,
  [$buffer]: typed_data.ByteBuffer
}));
dart.setLibraryUri(typed_data.UnmodifiableByteDataView, L59);
dart.setFieldSignature(typed_data.UnmodifiableByteDataView, () => ({
  __proto__: dart.getFields(typed_data.UnmodifiableByteDataView.__proto__),
  [_data$]: dart.finalFieldType(typed_data.ByteData)
}));
dart.defineExtensionMethods(typed_data.UnmodifiableByteDataView, [
  'getInt8',
  'setInt8',
  'getUint8',
  'setUint8',
  'getInt16',
  'setInt16',
  'getUint16',
  'setUint16',
  'getInt32',
  'setInt32',
  'getUint32',
  'setUint32',
  'getInt64',
  'setInt64',
  'getUint64',
  'setUint64',
  'getFloat32',
  'setFloat32',
  'getFloat64',
  'setFloat64'
]);
dart.defineExtensionAccessors(typed_data.UnmodifiableByteDataView, ['elementSizeInBytes', 'offsetInBytes', 'lengthInBytes', 'buffer']);
var _list$2 = dart.privateName(typed_data, "_list");
var _createList = dart.privateName(typed_data, "_createList");
const _is__UnmodifiableListMixin_default = Symbol('_is__UnmodifiableListMixin_default');
typed_data._UnmodifiableListMixin$ = dart.generic((N, L, TD) => {
  class _UnmodifiableListMixin extends core.Object {
    get [_data$]() {
      return TD.as(this[_list$2]);
    }
    get length() {
      return this[_list$2][$length];
    }
    _get(index) {
      if (index == null) dart.nullFailed(L142, 154, 21, "index");
      return this[_list$2][$_get](index);
    }
    get elementSizeInBytes() {
      return this[_data$][$elementSizeInBytes];
    }
    get offsetInBytes() {
      return this[_data$][$offsetInBytes];
    }
    get lengthInBytes() {
      return this[_data$][$lengthInBytes];
    }
    get buffer() {
      return new typed_data.UnmodifiableByteBufferView.new(this[_data$][$buffer]);
    }
    sublist(start, end = null) {
      if (start == null) dart.nullFailed(L142, 166, 17, "start");
      let endIndex = core.RangeError.checkValidRange(start, dart.nullCheck(end), this.length);
      let sublistLength = dart.notNull(endIndex) - dart.notNull(start);
      let result = this[_createList](sublistLength);
      result[$setRange](0, sublistLength, this[_list$2], start);
      return result;
    }
  }
  (_UnmodifiableListMixin.new = function() {
    ;
  }).prototype = _UnmodifiableListMixin.prototype;
  dart.addTypeTests(_UnmodifiableListMixin);
  _UnmodifiableListMixin.prototype[_is__UnmodifiableListMixin_default] = true;
  dart.addTypeCaches(_UnmodifiableListMixin);
  dart.setMethodSignature(_UnmodifiableListMixin, () => ({
    __proto__: dart.getMethods(_UnmodifiableListMixin.__proto__),
    _get: dart.fnType(N, [core.int]),
    sublist: dart.fnType(L, [core.int], [dart.nullable(core.int)])
  }));
  dart.setGetterSignature(_UnmodifiableListMixin, () => ({
    __proto__: dart.getGetters(_UnmodifiableListMixin.__proto__),
    [_data$]: TD,
    length: core.int,
    elementSizeInBytes: core.int,
    offsetInBytes: core.int,
    lengthInBytes: core.int,
    buffer: typed_data.ByteBuffer
  }));
  dart.setLibraryUri(_UnmodifiableListMixin, L59);
  return _UnmodifiableListMixin;
});
typed_data._UnmodifiableListMixin = typed_data._UnmodifiableListMixin$();
dart.addTypeTests(typed_data._UnmodifiableListMixin, _is__UnmodifiableListMixin_default);
var _list$3 = dart.privateName(typed_data, "UnmodifiableUint8ListView._list");
const UnmodifiableListBase__UnmodifiableListMixin$36 = class UnmodifiableListBase__UnmodifiableListMixin extends _internal.UnmodifiableListBase$(core.int) {};
(UnmodifiableListBase__UnmodifiableListMixin$36.new = function() {
}).prototype = UnmodifiableListBase__UnmodifiableListMixin$36.prototype;
dart.applyMixin(UnmodifiableListBase__UnmodifiableListMixin$36, typed_data._UnmodifiableListMixin$(core.int, typed_data.Uint8List, typed_data.Uint8List));
typed_data.UnmodifiableUint8ListView = class UnmodifiableUint8ListView extends UnmodifiableListBase__UnmodifiableListMixin$36 {
  get [_list$2]() {
    return this[_list$3];
  }
  set [_list$2](value) {
    super[_list$2] = value;
  }
  [_createList](length) {
    if (length == null) dart.nullFailed(L142, 185, 29, "length");
    return _native_typed_data.NativeUint8List.new(length);
  }
};
(typed_data.UnmodifiableUint8ListView.new = function(list) {
  if (list == null) dart.nullFailed(L142, 183, 39, "list");
  this[_list$3] = list;
  ;
}).prototype = typed_data.UnmodifiableUint8ListView.prototype;
dart.addTypeTests(typed_data.UnmodifiableUint8ListView);
dart.addTypeCaches(typed_data.UnmodifiableUint8ListView);
typed_data.UnmodifiableUint8ListView[dart.implements] = () => [typed_data.Uint8List];
dart.setMethodSignature(typed_data.UnmodifiableUint8ListView, () => ({
  __proto__: dart.getMethods(typed_data.UnmodifiableUint8ListView.__proto__),
  [_createList]: dart.fnType(typed_data.Uint8List, [core.int])
}));
dart.setLibraryUri(typed_data.UnmodifiableUint8ListView, L59);
dart.setFieldSignature(typed_data.UnmodifiableUint8ListView, () => ({
  __proto__: dart.getFields(typed_data.UnmodifiableUint8ListView.__proto__),
  [_list$2]: dart.finalFieldType(typed_data.Uint8List)
}));
dart.defineExtensionMethods(typed_data.UnmodifiableUint8ListView, ['_get', 'sublist']);
dart.defineExtensionAccessors(typed_data.UnmodifiableUint8ListView, [
  'length',
  'elementSizeInBytes',
  'offsetInBytes',
  'lengthInBytes',
  'buffer'
]);
var _list$4 = dart.privateName(typed_data, "UnmodifiableInt8ListView._list");
const UnmodifiableListBase__UnmodifiableListMixin$36$ = class UnmodifiableListBase__UnmodifiableListMixin extends _internal.UnmodifiableListBase$(core.int) {};
(UnmodifiableListBase__UnmodifiableListMixin$36$.new = function() {
}).prototype = UnmodifiableListBase__UnmodifiableListMixin$36$.prototype;
dart.applyMixin(UnmodifiableListBase__UnmodifiableListMixin$36$, typed_data._UnmodifiableListMixin$(core.int, typed_data.Int8List, typed_data.Int8List));
typed_data.UnmodifiableInt8ListView = class UnmodifiableInt8ListView extends UnmodifiableListBase__UnmodifiableListMixin$36$ {
  get [_list$2]() {
    return this[_list$4];
  }
  set [_list$2](value) {
    super[_list$2] = value;
  }
  [_createList](length) {
    if (length == null) dart.nullFailed(L142, 197, 28, "length");
    return _native_typed_data.NativeInt8List.new(length);
  }
};
(typed_data.UnmodifiableInt8ListView.new = function(list) {
  if (list == null) dart.nullFailed(L142, 195, 37, "list");
  this[_list$4] = list;
  ;
}).prototype = typed_data.UnmodifiableInt8ListView.prototype;
dart.addTypeTests(typed_data.UnmodifiableInt8ListView);
dart.addTypeCaches(typed_data.UnmodifiableInt8ListView);
typed_data.UnmodifiableInt8ListView[dart.implements] = () => [typed_data.Int8List];
dart.setMethodSignature(typed_data.UnmodifiableInt8ListView, () => ({
  __proto__: dart.getMethods(typed_data.UnmodifiableInt8ListView.__proto__),
  [_createList]: dart.fnType(typed_data.Int8List, [core.int])
}));
dart.setLibraryUri(typed_data.UnmodifiableInt8ListView, L59);
dart.setFieldSignature(typed_data.UnmodifiableInt8ListView, () => ({
  __proto__: dart.getFields(typed_data.UnmodifiableInt8ListView.__proto__),
  [_list$2]: dart.finalFieldType(typed_data.Int8List)
}));
dart.defineExtensionMethods(typed_data.UnmodifiableInt8ListView, ['_get', 'sublist']);
dart.defineExtensionAccessors(typed_data.UnmodifiableInt8ListView, [
  'length',
  'elementSizeInBytes',
  'offsetInBytes',
  'lengthInBytes',
  'buffer'
]);
var _list$5 = dart.privateName(typed_data, "UnmodifiableUint8ClampedListView._list");
const UnmodifiableListBase__UnmodifiableListMixin$36$0 = class UnmodifiableListBase__UnmodifiableListMixin extends _internal.UnmodifiableListBase$(core.int) {};
(UnmodifiableListBase__UnmodifiableListMixin$36$0.new = function() {
}).prototype = UnmodifiableListBase__UnmodifiableListMixin$36$0.prototype;
dart.applyMixin(UnmodifiableListBase__UnmodifiableListMixin$36$0, typed_data._UnmodifiableListMixin$(core.int, typed_data.Uint8ClampedList, typed_data.Uint8ClampedList));
typed_data.UnmodifiableUint8ClampedListView = class UnmodifiableUint8ClampedListView extends UnmodifiableListBase__UnmodifiableListMixin$36$0 {
  get [_list$2]() {
    return this[_list$5];
  }
  set [_list$2](value) {
    super[_list$2] = value;
  }
  [_createList](length) {
    if (length == null) dart.nullFailed(L142, 209, 36, "length");
    return _native_typed_data.NativeUint8ClampedList.new(length);
  }
};
(typed_data.UnmodifiableUint8ClampedListView.new = function(list) {
  if (list == null) dart.nullFailed(L142, 207, 53, "list");
  this[_list$5] = list;
  ;
}).prototype = typed_data.UnmodifiableUint8ClampedListView.prototype;
dart.addTypeTests(typed_data.UnmodifiableUint8ClampedListView);
dart.addTypeCaches(typed_data.UnmodifiableUint8ClampedListView);
typed_data.UnmodifiableUint8ClampedListView[dart.implements] = () => [typed_data.Uint8ClampedList];
dart.setMethodSignature(typed_data.UnmodifiableUint8ClampedListView, () => ({
  __proto__: dart.getMethods(typed_data.UnmodifiableUint8ClampedListView.__proto__),
  [_createList]: dart.fnType(typed_data.Uint8ClampedList, [core.int])
}));
dart.setLibraryUri(typed_data.UnmodifiableUint8ClampedListView, L59);
dart.setFieldSignature(typed_data.UnmodifiableUint8ClampedListView, () => ({
  __proto__: dart.getFields(typed_data.UnmodifiableUint8ClampedListView.__proto__),
  [_list$2]: dart.finalFieldType(typed_data.Uint8ClampedList)
}));
dart.defineExtensionMethods(typed_data.UnmodifiableUint8ClampedListView, ['_get', 'sublist']);
dart.defineExtensionAccessors(typed_data.UnmodifiableUint8ClampedListView, [
  'length',
  'elementSizeInBytes',
  'offsetInBytes',
  'lengthInBytes',
  'buffer'
]);
var _list$6 = dart.privateName(typed_data, "UnmodifiableUint16ListView._list");
const UnmodifiableListBase__UnmodifiableListMixin$36$1 = class UnmodifiableListBase__UnmodifiableListMixin extends _internal.UnmodifiableListBase$(core.int) {};
(UnmodifiableListBase__UnmodifiableListMixin$36$1.new = function() {
}).prototype = UnmodifiableListBase__UnmodifiableListMixin$36$1.prototype;
dart.applyMixin(UnmodifiableListBase__UnmodifiableListMixin$36$1, typed_data._UnmodifiableListMixin$(core.int, typed_data.Uint16List, typed_data.Uint16List));
typed_data.UnmodifiableUint16ListView = class UnmodifiableUint16ListView extends UnmodifiableListBase__UnmodifiableListMixin$36$1 {
  get [_list$2]() {
    return this[_list$6];
  }
  set [_list$2](value) {
    super[_list$2] = value;
  }
  [_createList](length) {
    if (length == null) dart.nullFailed(L142, 221, 30, "length");
    return _native_typed_data.NativeUint16List.new(length);
  }
};
(typed_data.UnmodifiableUint16ListView.new = function(list) {
  if (list == null) dart.nullFailed(L142, 219, 41, "list");
  this[_list$6] = list;
  ;
}).prototype = typed_data.UnmodifiableUint16ListView.prototype;
dart.addTypeTests(typed_data.UnmodifiableUint16ListView);
dart.addTypeCaches(typed_data.UnmodifiableUint16ListView);
typed_data.UnmodifiableUint16ListView[dart.implements] = () => [typed_data.Uint16List];
dart.setMethodSignature(typed_data.UnmodifiableUint16ListView, () => ({
  __proto__: dart.getMethods(typed_data.UnmodifiableUint16ListView.__proto__),
  [_createList]: dart.fnType(typed_data.Uint16List, [core.int])
}));
dart.setLibraryUri(typed_data.UnmodifiableUint16ListView, L59);
dart.setFieldSignature(typed_data.UnmodifiableUint16ListView, () => ({
  __proto__: dart.getFields(typed_data.UnmodifiableUint16ListView.__proto__),
  [_list$2]: dart.finalFieldType(typed_data.Uint16List)
}));
dart.defineExtensionMethods(typed_data.UnmodifiableUint16ListView, ['_get', 'sublist']);
dart.defineExtensionAccessors(typed_data.UnmodifiableUint16ListView, [
  'length',
  'elementSizeInBytes',
  'offsetInBytes',
  'lengthInBytes',
  'buffer'
]);
var _list$7 = dart.privateName(typed_data, "UnmodifiableInt16ListView._list");
const UnmodifiableListBase__UnmodifiableListMixin$36$2 = class UnmodifiableListBase__UnmodifiableListMixin extends _internal.UnmodifiableListBase$(core.int) {};
(UnmodifiableListBase__UnmodifiableListMixin$36$2.new = function() {
}).prototype = UnmodifiableListBase__UnmodifiableListMixin$36$2.prototype;
dart.applyMixin(UnmodifiableListBase__UnmodifiableListMixin$36$2, typed_data._UnmodifiableListMixin$(core.int, typed_data.Int16List, typed_data.Int16List));
typed_data.UnmodifiableInt16ListView = class UnmodifiableInt16ListView extends UnmodifiableListBase__UnmodifiableListMixin$36$2 {
  get [_list$2]() {
    return this[_list$7];
  }
  set [_list$2](value) {
    super[_list$2] = value;
  }
  [_createList](length) {
    if (length == null) dart.nullFailed(L142, 233, 29, "length");
    return _native_typed_data.NativeInt16List.new(length);
  }
};
(typed_data.UnmodifiableInt16ListView.new = function(list) {
  if (list == null) dart.nullFailed(L142, 231, 39, "list");
  this[_list$7] = list;
  ;
}).prototype = typed_data.UnmodifiableInt16ListView.prototype;
dart.addTypeTests(typed_data.UnmodifiableInt16ListView);
dart.addTypeCaches(typed_data.UnmodifiableInt16ListView);
typed_data.UnmodifiableInt16ListView[dart.implements] = () => [typed_data.Int16List];
dart.setMethodSignature(typed_data.UnmodifiableInt16ListView, () => ({
  __proto__: dart.getMethods(typed_data.UnmodifiableInt16ListView.__proto__),
  [_createList]: dart.fnType(typed_data.Int16List, [core.int])
}));
dart.setLibraryUri(typed_data.UnmodifiableInt16ListView, L59);
dart.setFieldSignature(typed_data.UnmodifiableInt16ListView, () => ({
  __proto__: dart.getFields(typed_data.UnmodifiableInt16ListView.__proto__),
  [_list$2]: dart.finalFieldType(typed_data.Int16List)
}));
dart.defineExtensionMethods(typed_data.UnmodifiableInt16ListView, ['_get', 'sublist']);
dart.defineExtensionAccessors(typed_data.UnmodifiableInt16ListView, [
  'length',
  'elementSizeInBytes',
  'offsetInBytes',
  'lengthInBytes',
  'buffer'
]);
var _list$8 = dart.privateName(typed_data, "UnmodifiableUint32ListView._list");
const UnmodifiableListBase__UnmodifiableListMixin$36$3 = class UnmodifiableListBase__UnmodifiableListMixin extends _internal.UnmodifiableListBase$(core.int) {};
(UnmodifiableListBase__UnmodifiableListMixin$36$3.new = function() {
}).prototype = UnmodifiableListBase__UnmodifiableListMixin$36$3.prototype;
dart.applyMixin(UnmodifiableListBase__UnmodifiableListMixin$36$3, typed_data._UnmodifiableListMixin$(core.int, typed_data.Uint32List, typed_data.Uint32List));
typed_data.UnmodifiableUint32ListView = class UnmodifiableUint32ListView extends UnmodifiableListBase__UnmodifiableListMixin$36$3 {
  get [_list$2]() {
    return this[_list$8];
  }
  set [_list$2](value) {
    super[_list$2] = value;
  }
  [_createList](length) {
    if (length == null) dart.nullFailed(L142, 245, 30, "length");
    return _native_typed_data.NativeUint32List.new(length);
  }
};
(typed_data.UnmodifiableUint32ListView.new = function(list) {
  if (list == null) dart.nullFailed(L142, 243, 41, "list");
  this[_list$8] = list;
  ;
}).prototype = typed_data.UnmodifiableUint32ListView.prototype;
dart.addTypeTests(typed_data.UnmodifiableUint32ListView);
dart.addTypeCaches(typed_data.UnmodifiableUint32ListView);
typed_data.UnmodifiableUint32ListView[dart.implements] = () => [typed_data.Uint32List];
dart.setMethodSignature(typed_data.UnmodifiableUint32ListView, () => ({
  __proto__: dart.getMethods(typed_data.UnmodifiableUint32ListView.__proto__),
  [_createList]: dart.fnType(typed_data.Uint32List, [core.int])
}));
dart.setLibraryUri(typed_data.UnmodifiableUint32ListView, L59);
dart.setFieldSignature(typed_data.UnmodifiableUint32ListView, () => ({
  __proto__: dart.getFields(typed_data.UnmodifiableUint32ListView.__proto__),
  [_list$2]: dart.finalFieldType(typed_data.Uint32List)
}));
dart.defineExtensionMethods(typed_data.UnmodifiableUint32ListView, ['_get', 'sublist']);
dart.defineExtensionAccessors(typed_data.UnmodifiableUint32ListView, [
  'length',
  'elementSizeInBytes',
  'offsetInBytes',
  'lengthInBytes',
  'buffer'
]);
var _list$9 = dart.privateName(typed_data, "UnmodifiableInt32ListView._list");
const UnmodifiableListBase__UnmodifiableListMixin$36$4 = class UnmodifiableListBase__UnmodifiableListMixin extends _internal.UnmodifiableListBase$(core.int) {};
(UnmodifiableListBase__UnmodifiableListMixin$36$4.new = function() {
}).prototype = UnmodifiableListBase__UnmodifiableListMixin$36$4.prototype;
dart.applyMixin(UnmodifiableListBase__UnmodifiableListMixin$36$4, typed_data._UnmodifiableListMixin$(core.int, typed_data.Int32List, typed_data.Int32List));
typed_data.UnmodifiableInt32ListView = class UnmodifiableInt32ListView extends UnmodifiableListBase__UnmodifiableListMixin$36$4 {
  get [_list$2]() {
    return this[_list$9];
  }
  set [_list$2](value) {
    super[_list$2] = value;
  }
  [_createList](length) {
    if (length == null) dart.nullFailed(L142, 257, 29, "length");
    return _native_typed_data.NativeInt32List.new(length);
  }
};
(typed_data.UnmodifiableInt32ListView.new = function(list) {
  if (list == null) dart.nullFailed(L142, 255, 39, "list");
  this[_list$9] = list;
  ;
}).prototype = typed_data.UnmodifiableInt32ListView.prototype;
dart.addTypeTests(typed_data.UnmodifiableInt32ListView);
dart.addTypeCaches(typed_data.UnmodifiableInt32ListView);
typed_data.UnmodifiableInt32ListView[dart.implements] = () => [typed_data.Int32List];
dart.setMethodSignature(typed_data.UnmodifiableInt32ListView, () => ({
  __proto__: dart.getMethods(typed_data.UnmodifiableInt32ListView.__proto__),
  [_createList]: dart.fnType(typed_data.Int32List, [core.int])
}));
dart.setLibraryUri(typed_data.UnmodifiableInt32ListView, L59);
dart.setFieldSignature(typed_data.UnmodifiableInt32ListView, () => ({
  __proto__: dart.getFields(typed_data.UnmodifiableInt32ListView.__proto__),
  [_list$2]: dart.finalFieldType(typed_data.Int32List)
}));
dart.defineExtensionMethods(typed_data.UnmodifiableInt32ListView, ['_get', 'sublist']);
dart.defineExtensionAccessors(typed_data.UnmodifiableInt32ListView, [
  'length',
  'elementSizeInBytes',
  'offsetInBytes',
  'lengthInBytes',
  'buffer'
]);
var _list$10 = dart.privateName(typed_data, "UnmodifiableUint64ListView._list");
const UnmodifiableListBase__UnmodifiableListMixin$36$5 = class UnmodifiableListBase__UnmodifiableListMixin extends _internal.UnmodifiableListBase$(core.int) {};
(UnmodifiableListBase__UnmodifiableListMixin$36$5.new = function() {
}).prototype = UnmodifiableListBase__UnmodifiableListMixin$36$5.prototype;
dart.applyMixin(UnmodifiableListBase__UnmodifiableListMixin$36$5, typed_data._UnmodifiableListMixin$(core.int, typed_data.Uint64List, typed_data.Uint64List));
typed_data.UnmodifiableUint64ListView = class UnmodifiableUint64ListView extends UnmodifiableListBase__UnmodifiableListMixin$36$5 {
  get [_list$2]() {
    return this[_list$10];
  }
  set [_list$2](value) {
    super[_list$2] = value;
  }
  [_createList](length) {
    if (length == null) dart.nullFailed(L142, 269, 30, "length");
    return typed_data.Uint64List.new(length);
  }
};
(typed_data.UnmodifiableUint64ListView.new = function(list) {
  if (list == null) dart.nullFailed(L142, 267, 41, "list");
  this[_list$10] = list;
  ;
}).prototype = typed_data.UnmodifiableUint64ListView.prototype;
dart.addTypeTests(typed_data.UnmodifiableUint64ListView);
dart.addTypeCaches(typed_data.UnmodifiableUint64ListView);
typed_data.UnmodifiableUint64ListView[dart.implements] = () => [typed_data.Uint64List];
dart.setMethodSignature(typed_data.UnmodifiableUint64ListView, () => ({
  __proto__: dart.getMethods(typed_data.UnmodifiableUint64ListView.__proto__),
  [_createList]: dart.fnType(typed_data.Uint64List, [core.int])
}));
dart.setLibraryUri(typed_data.UnmodifiableUint64ListView, L59);
dart.setFieldSignature(typed_data.UnmodifiableUint64ListView, () => ({
  __proto__: dart.getFields(typed_data.UnmodifiableUint64ListView.__proto__),
  [_list$2]: dart.finalFieldType(typed_data.Uint64List)
}));
dart.defineExtensionMethods(typed_data.UnmodifiableUint64ListView, ['_get', 'sublist']);
dart.defineExtensionAccessors(typed_data.UnmodifiableUint64ListView, [
  'length',
  'elementSizeInBytes',
  'offsetInBytes',
  'lengthInBytes',
  'buffer'
]);
var _list$11 = dart.privateName(typed_data, "UnmodifiableInt64ListView._list");
const UnmodifiableListBase__UnmodifiableListMixin$36$6 = class UnmodifiableListBase__UnmodifiableListMixin extends _internal.UnmodifiableListBase$(core.int) {};
(UnmodifiableListBase__UnmodifiableListMixin$36$6.new = function() {
}).prototype = UnmodifiableListBase__UnmodifiableListMixin$36$6.prototype;
dart.applyMixin(UnmodifiableListBase__UnmodifiableListMixin$36$6, typed_data._UnmodifiableListMixin$(core.int, typed_data.Int64List, typed_data.Int64List));
typed_data.UnmodifiableInt64ListView = class UnmodifiableInt64ListView extends UnmodifiableListBase__UnmodifiableListMixin$36$6 {
  get [_list$2]() {
    return this[_list$11];
  }
  set [_list$2](value) {
    super[_list$2] = value;
  }
  [_createList](length) {
    if (length == null) dart.nullFailed(L142, 281, 29, "length");
    return typed_data.Int64List.new(length);
  }
};
(typed_data.UnmodifiableInt64ListView.new = function(list) {
  if (list == null) dart.nullFailed(L142, 279, 39, "list");
  this[_list$11] = list;
  ;
}).prototype = typed_data.UnmodifiableInt64ListView.prototype;
dart.addTypeTests(typed_data.UnmodifiableInt64ListView);
dart.addTypeCaches(typed_data.UnmodifiableInt64ListView);
typed_data.UnmodifiableInt64ListView[dart.implements] = () => [typed_data.Int64List];
dart.setMethodSignature(typed_data.UnmodifiableInt64ListView, () => ({
  __proto__: dart.getMethods(typed_data.UnmodifiableInt64ListView.__proto__),
  [_createList]: dart.fnType(typed_data.Int64List, [core.int])
}));
dart.setLibraryUri(typed_data.UnmodifiableInt64ListView, L59);
dart.setFieldSignature(typed_data.UnmodifiableInt64ListView, () => ({
  __proto__: dart.getFields(typed_data.UnmodifiableInt64ListView.__proto__),
  [_list$2]: dart.finalFieldType(typed_data.Int64List)
}));
dart.defineExtensionMethods(typed_data.UnmodifiableInt64ListView, ['_get', 'sublist']);
dart.defineExtensionAccessors(typed_data.UnmodifiableInt64ListView, [
  'length',
  'elementSizeInBytes',
  'offsetInBytes',
  'lengthInBytes',
  'buffer'
]);
var _list$12 = dart.privateName(typed_data, "UnmodifiableInt32x4ListView._list");
const UnmodifiableListBase__UnmodifiableListMixin$36$7 = class UnmodifiableListBase__UnmodifiableListMixin extends _internal.UnmodifiableListBase$(typed_data.Int32x4) {};
(UnmodifiableListBase__UnmodifiableListMixin$36$7.new = function() {
}).prototype = UnmodifiableListBase__UnmodifiableListMixin$36$7.prototype;
dart.applyMixin(UnmodifiableListBase__UnmodifiableListMixin$36$7, typed_data._UnmodifiableListMixin$(typed_data.Int32x4, typed_data.Int32x4List, typed_data.Int32x4List));
typed_data.UnmodifiableInt32x4ListView = class UnmodifiableInt32x4ListView extends UnmodifiableListBase__UnmodifiableListMixin$36$7 {
  get [_list$2]() {
    return this[_list$12];
  }
  set [_list$2](value) {
    super[_list$2] = value;
  }
  [_createList](length) {
    if (length == null) dart.nullFailed(L142, 293, 31, "length");
    return new _native_typed_data.NativeInt32x4List.new(length);
  }
};
(typed_data.UnmodifiableInt32x4ListView.new = function(list) {
  if (list == null) dart.nullFailed(L142, 291, 43, "list");
  this[_list$12] = list;
  ;
}).prototype = typed_data.UnmodifiableInt32x4ListView.prototype;
dart.addTypeTests(typed_data.UnmodifiableInt32x4ListView);
dart.addTypeCaches(typed_data.UnmodifiableInt32x4ListView);
typed_data.UnmodifiableInt32x4ListView[dart.implements] = () => [typed_data.Int32x4List];
dart.setMethodSignature(typed_data.UnmodifiableInt32x4ListView, () => ({
  __proto__: dart.getMethods(typed_data.UnmodifiableInt32x4ListView.__proto__),
  [_createList]: dart.fnType(typed_data.Int32x4List, [core.int])
}));
dart.setLibraryUri(typed_data.UnmodifiableInt32x4ListView, L59);
dart.setFieldSignature(typed_data.UnmodifiableInt32x4ListView, () => ({
  __proto__: dart.getFields(typed_data.UnmodifiableInt32x4ListView.__proto__),
  [_list$2]: dart.finalFieldType(typed_data.Int32x4List)
}));
dart.defineExtensionMethods(typed_data.UnmodifiableInt32x4ListView, ['_get', 'sublist']);
dart.defineExtensionAccessors(typed_data.UnmodifiableInt32x4ListView, [
  'length',
  'elementSizeInBytes',
  'offsetInBytes',
  'lengthInBytes',
  'buffer'
]);
var _list$13 = dart.privateName(typed_data, "UnmodifiableFloat32x4ListView._list");
const UnmodifiableListBase__UnmodifiableListMixin$36$8 = class UnmodifiableListBase__UnmodifiableListMixin extends _internal.UnmodifiableListBase$(typed_data.Float32x4) {};
(UnmodifiableListBase__UnmodifiableListMixin$36$8.new = function() {
}).prototype = UnmodifiableListBase__UnmodifiableListMixin$36$8.prototype;
dart.applyMixin(UnmodifiableListBase__UnmodifiableListMixin$36$8, typed_data._UnmodifiableListMixin$(typed_data.Float32x4, typed_data.Float32x4List, typed_data.Float32x4List));
typed_data.UnmodifiableFloat32x4ListView = class UnmodifiableFloat32x4ListView extends UnmodifiableListBase__UnmodifiableListMixin$36$8 {
  get [_list$2]() {
    return this[_list$13];
  }
  set [_list$2](value) {
    super[_list$2] = value;
  }
  [_createList](length) {
    if (length == null) dart.nullFailed(L142, 305, 33, "length");
    return new _native_typed_data.NativeFloat32x4List.new(length);
  }
};
(typed_data.UnmodifiableFloat32x4ListView.new = function(list) {
  if (list == null) dart.nullFailed(L142, 303, 47, "list");
  this[_list$13] = list;
  ;
}).prototype = typed_data.UnmodifiableFloat32x4ListView.prototype;
dart.addTypeTests(typed_data.UnmodifiableFloat32x4ListView);
dart.addTypeCaches(typed_data.UnmodifiableFloat32x4ListView);
typed_data.UnmodifiableFloat32x4ListView[dart.implements] = () => [typed_data.Float32x4List];
dart.setMethodSignature(typed_data.UnmodifiableFloat32x4ListView, () => ({
  __proto__: dart.getMethods(typed_data.UnmodifiableFloat32x4ListView.__proto__),
  [_createList]: dart.fnType(typed_data.Float32x4List, [core.int])
}));
dart.setLibraryUri(typed_data.UnmodifiableFloat32x4ListView, L59);
dart.setFieldSignature(typed_data.UnmodifiableFloat32x4ListView, () => ({
  __proto__: dart.getFields(typed_data.UnmodifiableFloat32x4ListView.__proto__),
  [_list$2]: dart.finalFieldType(typed_data.Float32x4List)
}));
dart.defineExtensionMethods(typed_data.UnmodifiableFloat32x4ListView, ['_get', 'sublist']);
dart.defineExtensionAccessors(typed_data.UnmodifiableFloat32x4ListView, [
  'length',
  'elementSizeInBytes',
  'offsetInBytes',
  'lengthInBytes',
  'buffer'
]);
var _list$14 = dart.privateName(typed_data, "UnmodifiableFloat64x2ListView._list");
const UnmodifiableListBase__UnmodifiableListMixin$36$9 = class UnmodifiableListBase__UnmodifiableListMixin extends _internal.UnmodifiableListBase$(typed_data.Float64x2) {};
(UnmodifiableListBase__UnmodifiableListMixin$36$9.new = function() {
}).prototype = UnmodifiableListBase__UnmodifiableListMixin$36$9.prototype;
dart.applyMixin(UnmodifiableListBase__UnmodifiableListMixin$36$9, typed_data._UnmodifiableListMixin$(typed_data.Float64x2, typed_data.Float64x2List, typed_data.Float64x2List));
typed_data.UnmodifiableFloat64x2ListView = class UnmodifiableFloat64x2ListView extends UnmodifiableListBase__UnmodifiableListMixin$36$9 {
  get [_list$2]() {
    return this[_list$14];
  }
  set [_list$2](value) {
    super[_list$2] = value;
  }
  [_createList](length) {
    if (length == null) dart.nullFailed(L142, 317, 33, "length");
    return new _native_typed_data.NativeFloat64x2List.new(length);
  }
};
(typed_data.UnmodifiableFloat64x2ListView.new = function(list) {
  if (list == null) dart.nullFailed(L142, 315, 47, "list");
  this[_list$14] = list;
  ;
}).prototype = typed_data.UnmodifiableFloat64x2ListView.prototype;
dart.addTypeTests(typed_data.UnmodifiableFloat64x2ListView);
dart.addTypeCaches(typed_data.UnmodifiableFloat64x2ListView);
typed_data.UnmodifiableFloat64x2ListView[dart.implements] = () => [typed_data.Float64x2List];
dart.setMethodSignature(typed_data.UnmodifiableFloat64x2ListView, () => ({
  __proto__: dart.getMethods(typed_data.UnmodifiableFloat64x2ListView.__proto__),
  [_createList]: dart.fnType(typed_data.Float64x2List, [core.int])
}));
dart.setLibraryUri(typed_data.UnmodifiableFloat64x2ListView, L59);
dart.setFieldSignature(typed_data.UnmodifiableFloat64x2ListView, () => ({
  __proto__: dart.getFields(typed_data.UnmodifiableFloat64x2ListView.__proto__),
  [_list$2]: dart.finalFieldType(typed_data.Float64x2List)
}));
dart.defineExtensionMethods(typed_data.UnmodifiableFloat64x2ListView, ['_get', 'sublist']);
dart.defineExtensionAccessors(typed_data.UnmodifiableFloat64x2ListView, [
  'length',
  'elementSizeInBytes',
  'offsetInBytes',
  'lengthInBytes',
  'buffer'
]);
var _list$15 = dart.privateName(typed_data, "UnmodifiableFloat32ListView._list");
const UnmodifiableListBase__UnmodifiableListMixin$36$10 = class UnmodifiableListBase__UnmodifiableListMixin extends _internal.UnmodifiableListBase$(core.double) {};
(UnmodifiableListBase__UnmodifiableListMixin$36$10.new = function() {
}).prototype = UnmodifiableListBase__UnmodifiableListMixin$36$10.prototype;
dart.applyMixin(UnmodifiableListBase__UnmodifiableListMixin$36$10, typed_data._UnmodifiableListMixin$(core.double, typed_data.Float32List, typed_data.Float32List));
typed_data.UnmodifiableFloat32ListView = class UnmodifiableFloat32ListView extends UnmodifiableListBase__UnmodifiableListMixin$36$10 {
  get [_list$2]() {
    return this[_list$15];
  }
  set [_list$2](value) {
    super[_list$2] = value;
  }
  [_createList](length) {
    if (length == null) dart.nullFailed(L142, 329, 31, "length");
    return _native_typed_data.NativeFloat32List.new(length);
  }
};
(typed_data.UnmodifiableFloat32ListView.new = function(list) {
  if (list == null) dart.nullFailed(L142, 327, 43, "list");
  this[_list$15] = list;
  ;
}).prototype = typed_data.UnmodifiableFloat32ListView.prototype;
dart.addTypeTests(typed_data.UnmodifiableFloat32ListView);
dart.addTypeCaches(typed_data.UnmodifiableFloat32ListView);
typed_data.UnmodifiableFloat32ListView[dart.implements] = () => [typed_data.Float32List];
dart.setMethodSignature(typed_data.UnmodifiableFloat32ListView, () => ({
  __proto__: dart.getMethods(typed_data.UnmodifiableFloat32ListView.__proto__),
  [_createList]: dart.fnType(typed_data.Float32List, [core.int])
}));
dart.setLibraryUri(typed_data.UnmodifiableFloat32ListView, L59);
dart.setFieldSignature(typed_data.UnmodifiableFloat32ListView, () => ({
  __proto__: dart.getFields(typed_data.UnmodifiableFloat32ListView.__proto__),
  [_list$2]: dart.finalFieldType(typed_data.Float32List)
}));
dart.defineExtensionMethods(typed_data.UnmodifiableFloat32ListView, ['_get', 'sublist']);
dart.defineExtensionAccessors(typed_data.UnmodifiableFloat32ListView, [
  'length',
  'elementSizeInBytes',
  'offsetInBytes',
  'lengthInBytes',
  'buffer'
]);
var _list$16 = dart.privateName(typed_data, "UnmodifiableFloat64ListView._list");
const UnmodifiableListBase__UnmodifiableListMixin$36$11 = class UnmodifiableListBase__UnmodifiableListMixin extends _internal.UnmodifiableListBase$(core.double) {};
(UnmodifiableListBase__UnmodifiableListMixin$36$11.new = function() {
}).prototype = UnmodifiableListBase__UnmodifiableListMixin$36$11.prototype;
dart.applyMixin(UnmodifiableListBase__UnmodifiableListMixin$36$11, typed_data._UnmodifiableListMixin$(core.double, typed_data.Float64List, typed_data.Float64List));
typed_data.UnmodifiableFloat64ListView = class UnmodifiableFloat64ListView extends UnmodifiableListBase__UnmodifiableListMixin$36$11 {
  get [_list$2]() {
    return this[_list$16];
  }
  set [_list$2](value) {
    super[_list$2] = value;
  }
  [_createList](length) {
    if (length == null) dart.nullFailed(L142, 341, 31, "length");
    return _native_typed_data.NativeFloat64List.new(length);
  }
};
(typed_data.UnmodifiableFloat64ListView.new = function(list) {
  if (list == null) dart.nullFailed(L142, 339, 43, "list");
  this[_list$16] = list;
  ;
}).prototype = typed_data.UnmodifiableFloat64ListView.prototype;
dart.addTypeTests(typed_data.UnmodifiableFloat64ListView);
dart.addTypeCaches(typed_data.UnmodifiableFloat64ListView);
typed_data.UnmodifiableFloat64ListView[dart.implements] = () => [typed_data.Float64List];
dart.setMethodSignature(typed_data.UnmodifiableFloat64ListView, () => ({
  __proto__: dart.getMethods(typed_data.UnmodifiableFloat64ListView.__proto__),
  [_createList]: dart.fnType(typed_data.Float64List, [core.int])
}));
dart.setLibraryUri(typed_data.UnmodifiableFloat64ListView, L59);
dart.setFieldSignature(typed_data.UnmodifiableFloat64ListView, () => ({
  __proto__: dart.getFields(typed_data.UnmodifiableFloat64ListView.__proto__),
  [_list$2]: dart.finalFieldType(typed_data.Float64List)
}));
dart.defineExtensionMethods(typed_data.UnmodifiableFloat64ListView, ['_get', 'sublist']);
dart.defineExtensionAccessors(typed_data.UnmodifiableFloat64ListView, [
  'length',
  'elementSizeInBytes',
  'offsetInBytes',
  'lengthInBytes',
  'buffer'
]);




var _errorMsg$ = dart.privateName(core, "_errorMsg");
core._CompileTimeError = class _CompileTimeError extends core.Error {
  toString() {
    return this[_errorMsg$];
  }
};
(core._CompileTimeError.new = function(_errorMsg) {
  if (_errorMsg == null) dart.nullFailed(L7, 764, 26, "_errorMsg");
  this[_errorMsg$] = _errorMsg;
  core._CompileTimeError.__proto__.new.call(this);
  ;
}).prototype = core._CompileTimeError.prototype;
dart.addTypeTests(core._CompileTimeError);
dart.addTypeCaches(core._CompileTimeError);
dart.setLibraryUri(core._CompileTimeError, L8$);
dart.setFieldSignature(core._CompileTimeError, () => ({
  __proto__: dart.getFields(core._CompileTimeError.__proto__),
  [_errorMsg$]: dart.finalFieldType(core.String)
}));
dart.defineExtensionMethods(core._CompileTimeError, ['toString']);
var _name$6 = dart.privateName(core, "_name");
core._DuplicatedFieldInitializerError = class _DuplicatedFieldInitializerError extends core.Object {
  toString() {
    return dart.str("Error: field '") + dart.str(this[_name$6]) + dart.str("' is already initialized.");
  }
};
(core._DuplicatedFieldInitializerError.new = function(_name) {
  if (_name == null) dart.nullFailed(L7, 903, 41, "_name");
  this[_name$6] = _name;
  ;
}).prototype = core._DuplicatedFieldInitializerError.prototype;
dart.addTypeTests(core._DuplicatedFieldInitializerError);
dart.addTypeCaches(core._DuplicatedFieldInitializerError);
dart.setLibraryUri(core._DuplicatedFieldInitializerError, L8$);
dart.setFieldSignature(core._DuplicatedFieldInitializerError, () => ({
  __proto__: dart.getFields(core._DuplicatedFieldInitializerError.__proto__),
  [_name$6]: dart.finalFieldType(core.String)
}));
dart.defineExtensionMethods(core._DuplicatedFieldInitializerError, ['toString']);
var _used$ = dart.privateName(core, "_used");
var _digits$ = dart.privateName(core, "_digits");
var _isNegative = dart.privateName(core, "_isNegative");
var _isZero = dart.privateName(core, "_isZero");
var _dlShift = dart.privateName(core, "_dlShift");
var _drShift = dart.privateName(core, "_drShift");
var _absCompare = dart.privateName(core, "_absCompare");
var _absAddSetSign = dart.privateName(core, "_absAddSetSign");
var _absSubSetSign = dart.privateName(core, "_absSubSetSign");
var _absAndSetSign = dart.privateName(core, "_absAndSetSign");
var _absAndNotSetSign = dart.privateName(core, "_absAndNotSetSign");
var _absOrSetSign = dart.privateName(core, "_absOrSetSign");
var _absXorSetSign = dart.privateName(core, "_absXorSetSign");
var _divRem = dart.privateName(core, "_divRem");
var _div = dart.privateName(core, "_div");
var _rem = dart.privateName(core, "_rem");
var C417;
var _toRadixCodeUnit = dart.privateName(core, "_toRadixCodeUnit");
var _toHexString = dart.privateName(core, "_toHexString");
core._BigIntImpl = class _BigIntImpl extends core.Object {
  static parse(source, opts) {
    if (source == null) dart.nullFailed(L7, 1029, 35, "source");
    let radix = opts && 'radix' in opts ? opts.radix : null;
    let result = core._BigIntImpl._tryParse(source, {radix: radix});
    if (result == null) {
      dart.throw(new core.FormatException.new("Could not parse BigInt", source));
    }
    return result;
  }
  static _parseDecimal(source, isNegative) {
    if (source == null) dart.nullFailed(L7, 1040, 43, "source");
    if (isNegative == null) dart.nullFailed(L7, 1040, 56, "isNegative");
    let part = 0;
    let result = core._BigIntImpl.zero;
    let digitInPartCount = 4 - source.length[$remainder](4);
    if (digitInPartCount === 4) digitInPartCount = 0;
    for (let i = 0; i < source.length; i = i + 1) {
      part = part * 10 + source[$codeUnitAt](i) - 48;
      if ((digitInPartCount = digitInPartCount + 1) === 4) {
        result = result['*'](core._BigIntImpl._bigInt10000)['+'](core._BigIntImpl._fromInt(part));
        part = 0;
        digitInPartCount = 0;
      }
    }
    if (dart.test(isNegative)) return result._negate();
    return result;
  }
  static _codeUnitToRadixValue(codeUnit) {
    if (codeUnit == null) dart.nullFailed(L7, 1070, 40, "codeUnit");
    if (48 <= dart.notNull(codeUnit) && dart.notNull(codeUnit) <= 57) return dart.notNull(codeUnit) - 48;
    codeUnit = (dart.notNull(codeUnit) | 32) >>> 0;
    let result = dart.notNull(codeUnit) - 97 + 10;
    return result;
  }
  static _parseHex(source, startPos, isNegative) {
    let t230, t230$, t230$0, t230$1;
    if (source == null) dart.nullFailed(L7, 1090, 40, "source");
    if (startPos == null) dart.nullFailed(L7, 1090, 52, "startPos");
    if (isNegative == null) dart.nullFailed(L7, 1090, 67, "isNegative");
    let hexDigitsPerChunk = (16 / 4)[$truncate]();
    let sourceLength = source.length - dart.notNull(startPos);
    let chunkCount = (sourceLength / hexDigitsPerChunk)[$ceil]();
    let digits = _native_typed_data.NativeUint16List.new(chunkCount);
    let lastDigitLength = sourceLength - (chunkCount - 1) * hexDigitsPerChunk;
    let digitIndex = dart.notNull(digits[$length]) - 1;
    let i = startPos;
    let chunk = 0;
    for (let j = 0; j < lastDigitLength; j = j + 1) {
      let digitValue = core._BigIntImpl._codeUnitToRadixValue(source[$codeUnitAt]((t230 = i, i = dart.notNull(t230) + 1, t230)));
      if (dart.notNull(digitValue) >= 16) return null;
      chunk = chunk * 16 + dart.notNull(digitValue);
    }
    digits[$_set]((t230$ = digitIndex, digitIndex = t230$ - 1, t230$), chunk);
    while (dart.notNull(i) < source.length) {
      chunk = 0;
      for (let j = 0; j < hexDigitsPerChunk; j = j + 1) {
        let digitValue = core._BigIntImpl._codeUnitToRadixValue(source[$codeUnitAt]((t230$0 = i, i = dart.notNull(t230$0) + 1, t230$0)));
        if (dart.notNull(digitValue) >= 16) return null;
        chunk = chunk * 16 + dart.notNull(digitValue);
      }
      digits[$_set]((t230$1 = digitIndex, digitIndex = t230$1 - 1, t230$1), chunk);
    }
    if (digits[$length] === 1 && digits[$_get](0) === 0) return core._BigIntImpl.zero;
    return new core._BigIntImpl.__(isNegative, digits[$length], digits);
  }
  static _parseRadix(source, radix, isNegative) {
    if (source == null) dart.nullFailed(L7, 1124, 42, "source");
    if (radix == null) dart.nullFailed(L7, 1124, 54, "radix");
    if (isNegative == null) dart.nullFailed(L7, 1124, 66, "isNegative");
    let result = core._BigIntImpl.zero;
    let base = core._BigIntImpl._fromInt(radix);
    for (let i = 0; i < source.length; i = i + 1) {
      let digitValue = core._BigIntImpl._codeUnitToRadixValue(source[$codeUnitAt](i));
      if (dart.notNull(digitValue) >= dart.notNull(radix)) return null;
      result = result['*'](base)['+'](core._BigIntImpl._fromInt(digitValue));
    }
    if (dart.test(isNegative)) return result._negate();
    return result;
  }
  static _tryParse(source, opts) {
    let t230, t230$, t230$0;
    if (source == null) dart.nullFailed(L7, 1141, 40, "source");
    let radix = opts && 'radix' in opts ? opts.radix : null;
    if (source === "") return null;
    let match = core._BigIntImpl._parseRE.firstMatch(source);
    let signIndex = 1;
    let hexIndex = 3;
    let decimalIndex = 4;
    let nonDecimalHexIndex = 5;
    if (match == null) return null;
    let isNegative = match._get(signIndex) === "-";
    let decimalMatch = match._get(decimalIndex);
    let hexMatch = match._get(hexIndex);
    let nonDecimalMatch = match._get(nonDecimalHexIndex);
    if (radix == null) {
      if (decimalMatch != null) {
        return core._BigIntImpl._parseDecimal(decimalMatch, isNegative);
      }
      if (hexMatch != null) {
        return core._BigIntImpl._parseHex(hexMatch, 2, isNegative);
      }
      return null;
    }
    if (dart.notNull(radix) < 2 || dart.notNull(radix) > 36) {
      dart.throw(new core.RangeError.range(radix, 2, 36, "radix"));
    }
    if (radix === 10 && decimalMatch != null) {
      return core._BigIntImpl._parseDecimal(decimalMatch, isNegative);
    }
    if (radix === 16 && (decimalMatch != null || nonDecimalMatch != null)) {
      return core._BigIntImpl._parseHex((t230 = decimalMatch, t230 == null ? dart.nullCheck(nonDecimalMatch) : t230), 0, isNegative);
    }
    return core._BigIntImpl._parseRadix((t230$0 = (t230$ = decimalMatch, t230$ == null ? nonDecimalMatch : t230$), t230$0 == null ? dart.nullCheck(hexMatch) : t230$0), radix, isNegative);
  }
  static _normalize(used, digits) {
    if (used == null) dart.nullFailed(L7, 1188, 29, "used");
    if (digits == null) dart.nullFailed(L7, 1188, 46, "digits");
    while (dart.notNull(used) > 0 && digits[$_get](dart.notNull(used) - 1) === 0)
      used = dart.notNull(used) - 1;
    return used;
  }
  get [_isZero]() {
    return this[_used$] === 0;
  }
  static _cloneDigits(digits, from, to, length) {
    if (digits == null) dart.nullFailed(L7, 1209, 18, "digits");
    if (from == null) dart.nullFailed(L7, 1209, 30, "from");
    if (to == null) dart.nullFailed(L7, 1209, 40, "to");
    if (length == null) dart.nullFailed(L7, 1209, 48, "length");
    let resultDigits = _native_typed_data.NativeUint16List.new(length);
    let n = dart.notNull(to) - dart.notNull(from);
    for (let i = 0; i < n; i = i + 1) {
      resultDigits[$_set](i, digits[$_get](dart.notNull(from) + i));
    }
    return resultDigits;
  }
  static from(value) {
    if (value == null) dart.nullFailed(L7, 1219, 32, "value");
    if (value === 0) return core._BigIntImpl.zero;
    if (value === 1) return core._BigIntImpl.one;
    if (value === 2) return core._BigIntImpl.two;
    if (value[$abs]() < 4294967296) return core._BigIntImpl._fromInt(value[$toInt]());
    if (typeof value == 'number') return core._BigIntImpl._fromDouble(value);
    return core._BigIntImpl._fromInt(dart.asInt(value));
  }
  static _fromInt(value) {
    let t230;
    if (value == null) dart.nullFailed(L7, 1231, 36, "value");
    let isNegative = dart.notNull(value) < 0;
    if (!(16 === 16)) dart.assertFailed(null, L7, 1233, 12, "_digitBits == 16");
    if (isNegative) {
      if (value === -9223372036854776000.0) {
        let digits = _native_typed_data.NativeUint16List.new(4);
        digits[$_set](3, 32768);
        return new core._BigIntImpl.__(true, 4, digits);
      }
      value = -dart.notNull(value);
    }
    if (dart.notNull(value) < 65536) {
      let digits = _native_typed_data.NativeUint16List.new(1);
      digits[$_set](0, value);
      return new core._BigIntImpl.__(isNegative, 1, digits);
    }
    if (dart.notNull(value) <= 4294967295) {
      let digits = _native_typed_data.NativeUint16List.new(2);
      digits[$_set](0, (dart.notNull(value) & 65535) >>> 0);
      digits[$_set](1, value[$rightShift](16));
      return new core._BigIntImpl.__(isNegative, 2, digits);
    }
    let bits = value[$bitLength];
    let digits = _native_typed_data.NativeUint16List.new(((bits - 1) / 16)[$truncate]() + 1);
    let i = 0;
    while (value !== 0) {
      digits[$_set]((t230 = i, i = t230 + 1, t230), (dart.notNull(value) & 65535) >>> 0);
      value = (dart.notNull(value) / 65536)[$truncate]();
    }
    return new core._BigIntImpl.__(isNegative, digits[$length], digits);
  }
  static _fromDouble(value) {
    if (value == null) dart.nullFailed(L7, 1271, 42, "value");
    if (value[$isNaN] || value[$isInfinite]) {
      dart.throw(new core.ArgumentError.new(dart.str("Value must be finite: ") + dart.str(value)));
    }
    let isNegative = dart.notNull(value) < 0;
    if (isNegative) value = -dart.notNull(value);
    value = value[$floorToDouble]();
    if (value === 0) return core._BigIntImpl.zero;
    let bits = core._BigIntImpl._bitsForFromDouble;
    for (let i = 0; i < 8; i = i + 1) {
      bits[$_set](i, 0);
    }
    bits[$buffer][$asByteData]()[$setFloat64](0, value, typed_data.Endian.little);
    let biasedExponent = (dart.notNull(bits[$_get](7)) << 4 >>> 0) + bits[$_get](6)[$rightShift](4);
    let exponent = biasedExponent - 1075;
    if (!(16 === 16)) dart.assertFailed(null, L7, 1292, 12, "_digitBits == 16");
    let unshiftedDigits = _native_typed_data.NativeUint16List.new(4);
    unshiftedDigits[$_set](0, (dart.notNull(bits[$_get](1)) << 8 >>> 0) + dart.notNull(bits[$_get](0)));
    unshiftedDigits[$_set](1, (dart.notNull(bits[$_get](3)) << 8 >>> 0) + dart.notNull(bits[$_get](2)));
    unshiftedDigits[$_set](2, (dart.notNull(bits[$_get](5)) << 8 >>> 0) + dart.notNull(bits[$_get](4)));
    unshiftedDigits[$_set](3, 16 | dart.notNull(bits[$_get](6)) & 15);
    let unshiftedBig = new core._BigIntImpl._normalized(false, 4, unshiftedDigits);
    let absResult = unshiftedBig;
    if (exponent < 0) {
      absResult = unshiftedBig['>>'](-exponent);
    } else if (exponent > 0) {
      absResult = unshiftedBig['<<'](exponent);
    }
    if (isNegative) return absResult._negate();
    return absResult;
  }
  _negate() {
    if (this[_used$] === 0) return this;
    return new core._BigIntImpl.__(!dart.test(this[_isNegative]), this[_used$], this[_digits$]);
  }
  abs() {
    return dart.test(this[_isNegative]) ? this._negate() : this;
  }
  [_dlShift](n) {
    if (n == null) dart.nullFailed(L7, 1331, 28, "n");
    let used = this[_used$];
    if (used === 0) {
      return core._BigIntImpl.zero;
    }
    let resultUsed = dart.notNull(used) + dart.notNull(n);
    let digits = this[_digits$];
    let resultDigits = _native_typed_data.NativeUint16List.new(resultUsed);
    for (let i = dart.notNull(used) - 1; i >= 0; i = i - 1) {
      resultDigits[$_set](i + dart.notNull(n), digits[$_get](i));
    }
    return new core._BigIntImpl.__(this[_isNegative], resultUsed, resultDigits);
  }
  static _dlShiftDigits(xDigits, xUsed, n, resultDigits) {
    if (xDigits == null) dart.nullFailed(L7, 1351, 18, "xDigits");
    if (xUsed == null) dart.nullFailed(L7, 1351, 31, "xUsed");
    if (n == null) dart.nullFailed(L7, 1351, 42, "n");
    if (resultDigits == null) dart.nullFailed(L7, 1351, 56, "resultDigits");
    if (xUsed === 0) {
      return 0;
    }
    if (n === 0 && resultDigits == xDigits) {
      return xUsed;
    }
    let resultUsed = dart.notNull(xUsed) + dart.notNull(n);
    for (let i = dart.notNull(xUsed) - 1; i >= 0; i = i - 1) {
      resultDigits[$_set](i + dart.notNull(n), xDigits[$_get](i));
    }
    for (let i = dart.notNull(n) - 1; i >= 0; i = i - 1) {
      resultDigits[$_set](i, 0);
    }
    return resultUsed;
  }
  [_drShift](n) {
    if (n == null) dart.nullFailed(L7, 1369, 28, "n");
    let used = this[_used$];
    if (used === 0) {
      return core._BigIntImpl.zero;
    }
    let resultUsed = dart.notNull(used) - dart.notNull(n);
    if (resultUsed <= 0) {
      return dart.test(this[_isNegative]) ? core._BigIntImpl._minusOne : core._BigIntImpl.zero;
    }
    let digits = this[_digits$];
    let resultDigits = _native_typed_data.NativeUint16List.new(resultUsed);
    for (let i = n; dart.notNull(i) < dart.notNull(used); i = dart.notNull(i) + 1) {
      resultDigits[$_set](dart.notNull(i) - dart.notNull(n), digits[$_get](i));
    }
    let result = new core._BigIntImpl.__(this[_isNegative], resultUsed, resultDigits);
    if (dart.test(this[_isNegative])) {
      for (let i = 0; i < dart.notNull(n); i = i + 1) {
        if (digits[$_get](i) !== 0) {
          return result['-'](core._BigIntImpl.one);
        }
      }
    }
    return result;
  }
  static _lsh(xDigits, xUsed, n, resultDigits) {
    if (xDigits == null) dart.nullFailed(L7, 1402, 18, "xDigits");
    if (xUsed == null) dart.nullFailed(L7, 1402, 31, "xUsed");
    if (n == null) dart.nullFailed(L7, 1402, 42, "n");
    if (resultDigits == null) dart.nullFailed(L7, 1402, 56, "resultDigits");
    if (!(dart.notNull(xUsed) > 0)) dart.assertFailed(null, L7, 1403, 12, "xUsed > 0");
    let digitShift = (dart.notNull(n) / 16)[$truncate]();
    let bitShift = n[$modulo](16);
    let carryBitShift = 16 - bitShift;
    let bitMask = (1)[$leftShift](carryBitShift) - 1;
    let carry = 0;
    for (let i = dart.notNull(xUsed) - 1; i >= 0; i = i - 1) {
      let digit = xDigits[$_get](i);
      resultDigits[$_set](i + digitShift + 1, (digit[$rightShift](carryBitShift) | carry) >>> 0);
      carry = ((dart.notNull(digit) & bitMask) >>> 0)[$leftShift](bitShift);
    }
    resultDigits[$_set](digitShift, carry);
  }
  ['<<'](shiftAmount) {
    if (shiftAmount == null) dart.nullFailed(L7, 1429, 31, "shiftAmount");
    if (dart.notNull(shiftAmount) < 0) {
      dart.throw(new core.ArgumentError.new(dart.str("shift-amount must be posititve ") + dart.str(shiftAmount)));
    }
    if (dart.test(this[_isZero])) return this;
    let digitShift = (dart.notNull(shiftAmount) / 16)[$truncate]();
    let bitShift = shiftAmount[$modulo](16);
    if (bitShift === 0) {
      return this[_dlShift](digitShift);
    }
    let resultUsed = dart.notNull(this[_used$]) + digitShift + 1;
    let resultDigits = _native_typed_data.NativeUint16List.new(resultUsed);
    core._BigIntImpl._lsh(this[_digits$], this[_used$], shiftAmount, resultDigits);
    return new core._BigIntImpl.__(this[_isNegative], resultUsed, resultDigits);
  }
  static _lShiftDigits(xDigits, xUsed, n, resultDigits) {
    if (xDigits == null) dart.nullFailed(L7, 1448, 18, "xDigits");
    if (xUsed == null) dart.nullFailed(L7, 1448, 31, "xUsed");
    if (n == null) dart.nullFailed(L7, 1448, 42, "n");
    if (resultDigits == null) dart.nullFailed(L7, 1448, 56, "resultDigits");
    let digitsShift = (dart.notNull(n) / 16)[$truncate]();
    let bitShift = n[$modulo](16);
    if (bitShift === 0) {
      return core._BigIntImpl._dlShiftDigits(xDigits, xUsed, digitsShift, resultDigits);
    }
    let resultUsed = dart.notNull(xUsed) + digitsShift + 1;
    core._BigIntImpl._lsh(xDigits, xUsed, n, resultDigits);
    let i = digitsShift;
    while ((i = i - 1) >= 0) {
      resultDigits[$_set](i, 0);
    }
    if (resultDigits[$_get](resultUsed - 1) === 0) {
      resultUsed = resultUsed - 1;
    }
    return resultUsed;
  }
  static _rsh(xDigits, xUsed, n, resultDigits) {
    if (xDigits == null) dart.nullFailed(L7, 1468, 18, "xDigits");
    if (xUsed == null) dart.nullFailed(L7, 1468, 31, "xUsed");
    if (n == null) dart.nullFailed(L7, 1468, 42, "n");
    if (resultDigits == null) dart.nullFailed(L7, 1468, 56, "resultDigits");
    if (!(dart.notNull(xUsed) > 0)) dart.assertFailed(null, L7, 1469, 12, "xUsed > 0");
    let digitsShift = (dart.notNull(n) / 16)[$truncate]();
    let bitShift = n[$modulo](16);
    let carryBitShift = 16 - bitShift;
    let bitMask = (1)[$leftShift](bitShift) - 1;
    let carry = xDigits[$_get](digitsShift)[$rightShift](bitShift);
    let last = dart.notNull(xUsed) - digitsShift - 1;
    for (let i = 0; i < last; i = i + 1) {
      let digit = xDigits[$_get](i + digitsShift + 1);
      resultDigits[$_set](i, (((dart.notNull(digit) & bitMask) >>> 0)[$leftShift](carryBitShift) | carry) >>> 0);
      carry = digit[$rightShift](bitShift);
    }
    resultDigits[$_set](last, carry);
  }
  ['>>'](shiftAmount) {
    if (shiftAmount == null) dart.nullFailed(L7, 1493, 31, "shiftAmount");
    if (dart.notNull(shiftAmount) < 0) {
      dart.throw(new core.ArgumentError.new(dart.str("shift-amount must be posititve ") + dart.str(shiftAmount)));
    }
    if (dart.test(this[_isZero])) return this;
    let digitShift = (dart.notNull(shiftAmount) / 16)[$truncate]();
    let bitShift = shiftAmount[$modulo](16);
    if (bitShift === 0) {
      return this[_drShift](digitShift);
    }
    let used = this[_used$];
    let resultUsed = dart.notNull(used) - digitShift;
    if (resultUsed <= 0) {
      return dart.test(this[_isNegative]) ? core._BigIntImpl._minusOne : core._BigIntImpl.zero;
    }
    let digits = this[_digits$];
    let resultDigits = _native_typed_data.NativeUint16List.new(resultUsed);
    core._BigIntImpl._rsh(digits, used, shiftAmount, resultDigits);
    let result = new core._BigIntImpl.__(this[_isNegative], resultUsed, resultDigits);
    if (dart.test(this[_isNegative])) {
      if ((dart.notNull(digits[$_get](digitShift)) & (1)[$leftShift](bitShift) - 1) !== 0) {
        return result['-'](core._BigIntImpl.one);
      }
      for (let i = 0; i < digitShift; i = i + 1) {
        if (digits[$_get](i) !== 0) {
          return result['-'](core._BigIntImpl.one);
        }
      }
    }
    return result;
  }
  [_absCompare](other) {
    if (other == null) dart.nullFailed(L7, 1530, 31, "other");
    return core._BigIntImpl._compareDigits(this[_digits$], this[_used$], other[_digits$], other[_used$]);
  }
  compareTo(other) {
    core._BigIntImpl.as(other);
    if (other == null) dart.nullFailed(L7, 1540, 39, "other");
    if (dart.equals(this[_isNegative], other[_isNegative])) {
      let result = this[_absCompare](other);
      return dart.test(this[_isNegative]) ? 0 - dart.notNull(result) : result;
    }
    return dart.test(this[_isNegative]) ? -1 : 1;
  }
  static _compareDigits(digits, used, otherDigits, otherUsed) {
    if (digits == null) dart.nullFailed(L7, 1554, 18, "digits");
    if (used == null) dart.nullFailed(L7, 1554, 30, "used");
    if (otherDigits == null) dart.nullFailed(L7, 1554, 47, "otherDigits");
    if (otherUsed == null) dart.nullFailed(L7, 1554, 64, "otherUsed");
    let result = dart.notNull(used) - dart.notNull(otherUsed);
    if (result === 0) {
      for (let i = dart.notNull(used) - 1; i >= 0; i = i - 1) {
        result = dart.notNull(digits[$_get](i)) - dart.notNull(otherDigits[$_get](i));
        if (result !== 0) return result;
      }
    }
    return result;
  }
  static _absAdd(digits, used, otherDigits, otherUsed, resultDigits) {
    if (digits == null) dart.nullFailed(L7, 1567, 34, "digits");
    if (used == null) dart.nullFailed(L7, 1567, 46, "used");
    if (otherDigits == null) dart.nullFailed(L7, 1567, 63, "otherDigits");
    if (otherUsed == null) dart.nullFailed(L7, 1568, 11, "otherUsed");
    if (resultDigits == null) dart.nullFailed(L7, 1568, 33, "resultDigits");
    if (!(dart.notNull(used) >= dart.notNull(otherUsed) && dart.notNull(otherUsed) > 0)) dart.assertFailed(null, L7, 1569, 12, "used >= otherUsed && otherUsed > 0");
    let carry = 0;
    for (let i = 0; i < dart.notNull(otherUsed); i = i + 1) {
      carry = carry + (dart.notNull(digits[$_get](i)) + dart.notNull(otherDigits[$_get](i)));
      resultDigits[$_set](i, (carry & 65535) >>> 0);
      carry = carry[$rightShift](16);
    }
    for (let i = otherUsed; dart.notNull(i) < dart.notNull(used); i = dart.notNull(i) + 1) {
      carry = carry + dart.notNull(digits[$_get](i));
      resultDigits[$_set](i, (carry & 65535) >>> 0);
      carry = carry[$rightShift](16);
    }
    resultDigits[$_set](used, carry);
  }
  static _absSub(digits, used, otherDigits, otherUsed, resultDigits) {
    if (digits == null) dart.nullFailed(L7, 1586, 34, "digits");
    if (used == null) dart.nullFailed(L7, 1586, 46, "used");
    if (otherDigits == null) dart.nullFailed(L7, 1586, 63, "otherDigits");
    if (otherUsed == null) dart.nullFailed(L7, 1587, 11, "otherUsed");
    if (resultDigits == null) dart.nullFailed(L7, 1587, 33, "resultDigits");
    if (!(dart.notNull(used) >= dart.notNull(otherUsed) && dart.notNull(otherUsed) > 0)) dart.assertFailed(null, L7, 1588, 12, "used >= otherUsed && otherUsed > 0");
    let carry = 0;
    for (let i = 0; i < dart.notNull(otherUsed); i = i + 1) {
      carry = carry + (dart.notNull(digits[$_get](i)) - dart.notNull(otherDigits[$_get](i)));
      resultDigits[$_set](i, (carry & 65535) >>> 0);
      carry = 0 - (carry[$rightShift](16) & 1);
    }
    for (let i = otherUsed; dart.notNull(i) < dart.notNull(used); i = dart.notNull(i) + 1) {
      carry = carry + dart.notNull(digits[$_get](i));
      resultDigits[$_set](i, (carry & 65535) >>> 0);
      carry = 0 - (carry[$rightShift](16) & 1);
    }
  }
  [_absAddSetSign](other, isNegative) {
    if (other == null) dart.nullFailed(L7, 1608, 42, "other");
    if (isNegative == null) dart.nullFailed(L7, 1608, 54, "isNegative");
    let used = this[_used$];
    let otherUsed = other[_used$];
    if (dart.notNull(used) < dart.notNull(otherUsed)) {
      return other[_absAddSetSign](this, isNegative);
    }
    if (used === 0) {
      if (!!dart.test(isNegative)) dart.assertFailed(null, L7, 1615, 14, "!isNegative");
      return core._BigIntImpl.zero;
    }
    if (otherUsed === 0) {
      return dart.equals(this[_isNegative], isNegative) ? this : this._negate();
    }
    let resultUsed = dart.notNull(used) + 1;
    let resultDigits = _native_typed_data.NativeUint16List.new(resultUsed);
    core._BigIntImpl._absAdd(this[_digits$], used, other[_digits$], otherUsed, resultDigits);
    return new core._BigIntImpl.__(isNegative, resultUsed, resultDigits);
  }
  [_absSubSetSign](other, isNegative) {
    if (other == null) dart.nullFailed(L7, 1630, 42, "other");
    if (isNegative == null) dart.nullFailed(L7, 1630, 54, "isNegative");
    if (!(dart.notNull(this[_absCompare](other)) >= 0)) dart.assertFailed(null, L7, 1631, 12, "_absCompare(other) >= 0");
    let used = this[_used$];
    if (used === 0) {
      if (!!dart.test(isNegative)) dart.assertFailed(null, L7, 1634, 14, "!isNegative");
      return core._BigIntImpl.zero;
    }
    let otherUsed = other[_used$];
    if (otherUsed === 0) {
      return dart.equals(this[_isNegative], isNegative) ? this : this._negate();
    }
    let resultDigits = _native_typed_data.NativeUint16List.new(used);
    core._BigIntImpl._absSub(this[_digits$], used, other[_digits$], otherUsed, resultDigits);
    return new core._BigIntImpl.__(isNegative, used, resultDigits);
  }
  [_absAndSetSign](other, isNegative) {
    if (other == null) dart.nullFailed(L7, 1647, 42, "other");
    if (isNegative == null) dart.nullFailed(L7, 1647, 54, "isNegative");
    let resultUsed = core._min(this[_used$], other[_used$]);
    let digits = this[_digits$];
    let otherDigits = other[_digits$];
    let resultDigits = _native_typed_data.NativeUint16List.new(resultUsed);
    for (let i = 0; i < dart.notNull(resultUsed); i = i + 1) {
      resultDigits[$_set](i, (dart.notNull(digits[$_get](i)) & dart.notNull(otherDigits[$_get](i))) >>> 0);
    }
    return new core._BigIntImpl.__(isNegative, resultUsed, resultDigits);
  }
  [_absAndNotSetSign](other, isNegative) {
    if (other == null) dart.nullFailed(L7, 1659, 45, "other");
    if (isNegative == null) dart.nullFailed(L7, 1659, 57, "isNegative");
    let resultUsed = this[_used$];
    let digits = this[_digits$];
    let otherDigits = other[_digits$];
    let resultDigits = _native_typed_data.NativeUint16List.new(resultUsed);
    let m = core._min(resultUsed, other[_used$]);
    for (let i = 0; i < dart.notNull(m); i = i + 1) {
      resultDigits[$_set](i, (dart.notNull(digits[$_get](i)) & ~dart.notNull(otherDigits[$_get](i)) >>> 0) >>> 0);
    }
    for (let i = m; dart.notNull(i) < dart.notNull(resultUsed); i = dart.notNull(i) + 1) {
      resultDigits[$_set](i, digits[$_get](i));
    }
    return new core._BigIntImpl.__(isNegative, resultUsed, resultDigits);
  }
  [_absOrSetSign](other, isNegative) {
    if (other == null) dart.nullFailed(L7, 1675, 41, "other");
    if (isNegative == null) dart.nullFailed(L7, 1675, 53, "isNegative");
    let used = this[_used$];
    let otherUsed = other[_used$];
    let resultUsed = core._max(used, otherUsed);
    let digits = this[_digits$];
    let otherDigits = other[_digits$];
    let resultDigits = _native_typed_data.NativeUint16List.new(resultUsed);
    let l = null;
    let m = null;
    if (dart.notNull(used) < dart.notNull(otherUsed)) {
      l = other;
      m = used;
    } else {
      l = this;
      m = otherUsed;
    }
    for (let i = 0; i < dart.notNull(m); i = i + 1) {
      resultDigits[$_set](i, (dart.notNull(digits[$_get](i)) | dart.notNull(otherDigits[$_get](i))) >>> 0);
    }
    let lDigits = l[_digits$];
    for (let i = m; dart.notNull(i) < dart.notNull(resultUsed); i = dart.notNull(i) + 1) {
      resultDigits[$_set](i, lDigits[$_get](i));
    }
    return new core._BigIntImpl.__(isNegative, resultUsed, resultDigits);
  }
  [_absXorSetSign](other, isNegative) {
    if (other == null) dart.nullFailed(L7, 1702, 42, "other");
    if (isNegative == null) dart.nullFailed(L7, 1702, 54, "isNegative");
    let used = this[_used$];
    let otherUsed = other[_used$];
    let resultUsed = core._max(used, otherUsed);
    let digits = this[_digits$];
    let otherDigits = other[_digits$];
    let resultDigits = _native_typed_data.NativeUint16List.new(resultUsed);
    let l = null;
    let m = null;
    if (dart.notNull(used) < dart.notNull(otherUsed)) {
      l = other;
      m = used;
    } else {
      l = this;
      m = otherUsed;
    }
    for (let i = 0; i < dart.notNull(m); i = i + 1) {
      resultDigits[$_set](i, (dart.notNull(digits[$_get](i)) ^ dart.notNull(otherDigits[$_get](i))) >>> 0);
    }
    let lDigits = l[_digits$];
    for (let i = m; dart.notNull(i) < dart.notNull(resultUsed); i = dart.notNull(i) + 1) {
      resultDigits[$_set](i, lDigits[$_get](i));
    }
    return new core._BigIntImpl.__(isNegative, resultUsed, resultDigits);
  }
  ['&'](other) {
    core._BigIntImpl.as(other);
    if (other == null) dart.nullFailed(L7, 1738, 48, "other");
    if (dart.test(this[_isZero]) || dart.test(other[_isZero])) return core._BigIntImpl.zero;
    if (dart.equals(this[_isNegative], other[_isNegative])) {
      if (dart.test(this[_isNegative])) {
        let this1 = this[_absSubSetSign](core._BigIntImpl.one, true);
        let other1 = other[_absSubSetSign](core._BigIntImpl.one, true);
        return this1[_absOrSetSign](other1, true)[_absAddSetSign](core._BigIntImpl.one, true);
      }
      return this[_absAndSetSign](other, false);
    }
    let p = null;
    let n = null;
    if (dart.test(this[_isNegative])) {
      p = other;
      n = this;
    } else {
      p = this;
      n = other;
    }
    let n1 = n[_absSubSetSign](core._BigIntImpl.one, false);
    return p[_absAndNotSetSign](n1, false);
  }
  ['|'](other) {
    core._BigIntImpl.as(other);
    if (other == null) dart.nullFailed(L7, 1777, 48, "other");
    if (dart.test(this[_isZero])) return other;
    if (dart.test(other[_isZero])) return this;
    if (dart.equals(this[_isNegative], other[_isNegative])) {
      if (dart.test(this[_isNegative])) {
        let this1 = this[_absSubSetSign](core._BigIntImpl.one, true);
        let other1 = other[_absSubSetSign](core._BigIntImpl.one, true);
        return this1[_absAndSetSign](other1, true)[_absAddSetSign](core._BigIntImpl.one, true);
      }
      return this[_absOrSetSign](other, false);
    }
    let p = null;
    let n = null;
    if (dart.test(this[_isNegative])) {
      p = other;
      n = this;
    } else {
      p = this;
      n = other;
    }
    let n1 = n[_absSubSetSign](core._BigIntImpl.one, true);
    return n1[_absAndNotSetSign](p, true)[_absAddSetSign](core._BigIntImpl.one, true);
  }
  ['^'](other) {
    core._BigIntImpl.as(other);
    if (other == null) dart.nullFailed(L7, 1818, 48, "other");
    if (dart.test(this[_isZero])) return other;
    if (dart.test(other[_isZero])) return this;
    if (dart.equals(this[_isNegative], other[_isNegative])) {
      if (dart.test(this[_isNegative])) {
        let this1 = this[_absSubSetSign](core._BigIntImpl.one, true);
        let other1 = other[_absSubSetSign](core._BigIntImpl.one, true);
        return this1[_absXorSetSign](other1, false);
      }
      return this[_absXorSetSign](other, false);
    }
    let p = null;
    let n = null;
    if (dart.test(this[_isNegative])) {
      p = other;
      n = this;
    } else {
      p = this;
      n = other;
    }
    let n1 = n[_absSubSetSign](core._BigIntImpl.one, true);
    return p[_absXorSetSign](n1, true)[_absAddSetSign](core._BigIntImpl.one, true);
  }
  ['~']() {
    if (dart.test(this[_isZero])) return core._BigIntImpl._minusOne;
    if (dart.test(this[_isNegative])) {
      return this[_absSubSetSign](core._BigIntImpl.one, false);
    }
    return this[_absAddSetSign](core._BigIntImpl.one, true);
  }
  ['+'](other) {
    core._BigIntImpl.as(other);
    if (other == null) dart.nullFailed(L7, 1866, 48, "other");
    if (dart.test(this[_isZero])) return other;
    if (dart.test(other[_isZero])) return this;
    let isNegative = this[_isNegative];
    if (dart.equals(isNegative, other[_isNegative])) {
      return this[_absAddSetSign](other, isNegative);
    }
    if (dart.notNull(this[_absCompare](other)) >= 0) {
      return this[_absSubSetSign](other, isNegative);
    }
    return other[_absSubSetSign](this, !dart.test(isNegative));
  }
  ['-'](other) {
    core._BigIntImpl.as(other);
    if (other == null) dart.nullFailed(L7, 1884, 48, "other");
    if (dart.test(this[_isZero])) return other._negate();
    if (dart.test(other[_isZero])) return this;
    let isNegative = this[_isNegative];
    if (!dart.equals(isNegative, other[_isNegative])) {
      return this[_absAddSetSign](other, isNegative);
    }
    if (dart.notNull(this[_absCompare](other)) >= 0) {
      return this[_absSubSetSign](other, isNegative);
    }
    return other[_absSubSetSign](this, !dart.test(isNegative));
  }
  static _mulAdd(x, multiplicandDigits, i, accumulatorDigits, j, n) {
    let t230, t230$, t230$0;
    if (x == null) dart.nullFailed(L7, 1913, 27, "x");
    if (multiplicandDigits == null) dart.nullFailed(L7, 1913, 41, "multiplicandDigits");
    if (i == null) dart.nullFailed(L7, 1913, 65, "i");
    if (accumulatorDigits == null) dart.nullFailed(L7, 1914, 18, "accumulatorDigits");
    if (j == null) dart.nullFailed(L7, 1914, 41, "j");
    if (n == null) dart.nullFailed(L7, 1914, 48, "n");
    if (x === 0) {
      return;
    }
    let c = 0;
    while ((n = dart.notNull(n) - 1) >= 0) {
      let product = dart.notNull(x) * dart.notNull(multiplicandDigits[$_get]((t230 = i, i = dart.notNull(t230) + 1, t230)));
      let combined = product + dart.notNull(accumulatorDigits[$_get](j)) + c;
      accumulatorDigits[$_set]((t230$ = j, j = dart.notNull(t230$) + 1, t230$), (combined & 65535) >>> 0);
      c = (combined / 65536)[$truncate]();
    }
    while (c !== 0) {
      let l = dart.notNull(accumulatorDigits[$_get](j)) + c;
      accumulatorDigits[$_set]((t230$0 = j, j = dart.notNull(t230$0) + 1, t230$0), (l & 65535) >>> 0);
      c = (l / 65536)[$truncate]();
    }
  }
  ['*'](other) {
    core._BigIntImpl.as(other);
    if (other == null) dart.nullFailed(L7, 1936, 48, "other");
    let used = this[_used$];
    let otherUsed = other[_used$];
    if (used === 0 || otherUsed === 0) {
      return core._BigIntImpl.zero;
    }
    let resultUsed = dart.notNull(used) + dart.notNull(otherUsed);
    let digits = this[_digits$];
    let otherDigits = other[_digits$];
    let resultDigits = _native_typed_data.NativeUint16List.new(resultUsed);
    let i = 0;
    while (i < dart.notNull(otherUsed)) {
      core._BigIntImpl._mulAdd(otherDigits[$_get](i), digits, 0, resultDigits, i, used);
      i = i + 1;
    }
    return new core._BigIntImpl.__(!dart.equals(this[_isNegative], other[_isNegative]), resultUsed, resultDigits);
  }
  static _mulDigits(xDigits, xUsed, otherDigits, otherUsed, resultDigits) {
    if (xDigits == null) dart.nullFailed(L7, 1957, 36, "xDigits");
    if (xUsed == null) dart.nullFailed(L7, 1957, 49, "xUsed");
    if (otherDigits == null) dart.nullFailed(L7, 1957, 67, "otherDigits");
    if (otherUsed == null) dart.nullFailed(L7, 1958, 11, "otherUsed");
    if (resultDigits == null) dart.nullFailed(L7, 1958, 33, "resultDigits");
    let resultUsed = dart.notNull(xUsed) + dart.notNull(otherUsed);
    let i = resultUsed;
    if (!(dart.notNull(resultDigits[$length]) >= i)) dart.assertFailed(null, L7, 1961, 12, "resultDigits.length >= i");
    while ((i = i - 1) >= 0) {
      resultDigits[$_set](i, 0);
    }
    i = 0;
    while (i < dart.notNull(otherUsed)) {
      core._BigIntImpl._mulAdd(otherDigits[$_get](i), xDigits, 0, resultDigits, i, xUsed);
      i = i + 1;
    }
    return resultUsed;
  }
  static _estimateQuotientDigit(topDigitDivisor, digits, i) {
    if (topDigitDivisor == null) dart.nullFailed(L7, 1975, 11, "topDigitDivisor");
    if (digits == null) dart.nullFailed(L7, 1975, 39, "digits");
    if (i == null) dart.nullFailed(L7, 1975, 51, "i");
    if (digits[$_get](i) == topDigitDivisor) return 65535;
    let quotientDigit = (((digits[$_get](i)[$leftShift](16) | dart.notNull(digits[$_get](dart.notNull(i) - 1))) >>> 0) / dart.notNull(topDigitDivisor))[$truncate]();
    if (quotientDigit > 65535) return 65535;
    return quotientDigit;
  }
  [_div](other) {
    if (other == null) dart.nullFailed(L7, 1984, 32, "other");
    if (!(dart.notNull(other[_used$]) > 0)) dart.assertFailed(null, L7, 1985, 12, "other._used > 0");
    if (dart.notNull(this[_used$]) < dart.notNull(other[_used$])) {
      return core._BigIntImpl.zero;
    }
    this[_divRem](other);
    let lastQuo_used = dart.nullCheck(core._BigIntImpl._lastQuoRemUsed) - dart.nullCheck(core._BigIntImpl._lastRemUsed);
    let quo_digits = core._BigIntImpl._cloneDigits(dart.nullCheck(core._BigIntImpl._lastQuoRemDigits), dart.nullCheck(core._BigIntImpl._lastRemUsed), dart.nullCheck(core._BigIntImpl._lastQuoRemUsed), lastQuo_used);
    let quo = new core._BigIntImpl.__(false, lastQuo_used, quo_digits);
    if (!dart.equals(this[_isNegative], other[_isNegative]) && dart.notNull(quo[_used$]) > 0) {
      quo = quo._negate();
    }
    return quo;
  }
  [_rem](other) {
    if (other == null) dart.nullFailed(L7, 2003, 32, "other");
    if (!(dart.notNull(other[_used$]) > 0)) dart.assertFailed(null, L7, 2004, 12, "other._used > 0");
    if (dart.notNull(this[_used$]) < dart.notNull(other[_used$])) {
      return this;
    }
    this[_divRem](other);
    let remDigits = core._BigIntImpl._cloneDigits(dart.nullCheck(core._BigIntImpl._lastQuoRemDigits), 0, dart.nullCheck(core._BigIntImpl._lastRemUsed), dart.nullCheck(core._BigIntImpl._lastRemUsed));
    let rem = new core._BigIntImpl.__(false, dart.nullCheck(core._BigIntImpl._lastRemUsed), remDigits);
    if (dart.nullCheck(core._BigIntImpl._lastRem_nsh) > 0) {
      rem = rem['>>'](dart.nullCheck(core._BigIntImpl._lastRem_nsh));
    }
    if (dart.test(this[_isNegative]) && dart.notNull(rem[_used$]) > 0) {
      rem = rem._negate();
    }
    return rem;
  }
  [_divRem](other) {
    let t230, t230$;
    if (other == null) dart.nullFailed(L7, 2031, 28, "other");
    if (this[_used$] == core._BigIntImpl._lastDividendUsed && other[_used$] == core._BigIntImpl._lastDivisorUsed && this[_digits$] == core._BigIntImpl._lastDividendDigits && other[_digits$] == core._BigIntImpl._lastDivisorDigits) {
      return;
    }
    if (!(dart.notNull(this[_used$]) >= dart.notNull(other[_used$]))) dart.assertFailed(null, L7, 2039, 12, "_used >= other._used");
    let nsh = 16 - other[_digits$][$_get](dart.notNull(other[_used$]) - 1)[$bitLength];
    let resultDigits = null;
    let resultUsed = null;
    let yDigits = null;
    let yUsed = null;
    if (nsh > 0) {
      yDigits = _native_typed_data.NativeUint16List.new(dart.notNull(other[_used$]) + 5);
      yUsed = core._BigIntImpl._lShiftDigits(other[_digits$], other[_used$], nsh, yDigits);
      resultDigits = _native_typed_data.NativeUint16List.new(dart.notNull(this[_used$]) + 5);
      resultUsed = core._BigIntImpl._lShiftDigits(this[_digits$], this[_used$], nsh, resultDigits);
    } else {
      yDigits = other[_digits$];
      yUsed = other[_used$];
      resultDigits = core._BigIntImpl._cloneDigits(this[_digits$], 0, this[_used$], dart.notNull(this[_used$]) + 2);
      resultUsed = this[_used$];
    }
    let topDigitDivisor = yDigits[$_get](dart.notNull(yUsed) - 1);
    let i = resultUsed;
    let j = dart.notNull(i) - dart.notNull(yUsed);
    let tmpDigits = _native_typed_data.NativeUint16List.new(i);
    let tmpUsed = core._BigIntImpl._dlShiftDigits(yDigits, yUsed, j, tmpDigits);
    if (dart.notNull(core._BigIntImpl._compareDigits(resultDigits, resultUsed, tmpDigits, tmpUsed)) >= 0) {
      if (!(i == resultUsed)) dart.assertFailed(null, L7, 2072, 14, "i == resultUsed");
      resultDigits[$_set]((t230 = resultUsed, resultUsed = dart.notNull(t230) + 1, t230), 1);
      core._BigIntImpl._absSub(resultDigits, resultUsed, tmpDigits, tmpUsed, resultDigits);
    } else {
      resultDigits[$_set]((t230$ = resultUsed, resultUsed = dart.notNull(t230$) + 1, t230$), 0);
    }
    let nyDigits = _native_typed_data.NativeUint16List.new(dart.notNull(yUsed) + 2);
    nyDigits[$_set](yUsed, 1);
    core._BigIntImpl._absSub(nyDigits, dart.notNull(yUsed) + 1, yDigits, yUsed, nyDigits);
    i = dart.notNull(i) - 1;
    while (j > 0) {
      let estimatedQuotientDigit = core._BigIntImpl._estimateQuotientDigit(topDigitDivisor, resultDigits, i);
      j = j - 1;
      core._BigIntImpl._mulAdd(estimatedQuotientDigit, nyDigits, 0, resultDigits, j, yUsed);
      if (dart.notNull(resultDigits[$_get](i)) < dart.notNull(estimatedQuotientDigit)) {
        let tmpUsed = core._BigIntImpl._dlShiftDigits(nyDigits, yUsed, j, tmpDigits);
        core._BigIntImpl._absSub(resultDigits, resultUsed, tmpDigits, tmpUsed, resultDigits);
        while (dart.notNull(resultDigits[$_get](i)) < (estimatedQuotientDigit = dart.notNull(estimatedQuotientDigit) - 1)) {
          core._BigIntImpl._absSub(resultDigits, resultUsed, tmpDigits, tmpUsed, resultDigits);
        }
      }
      i = dart.notNull(i) - 1;
    }
    core._BigIntImpl._lastDividendDigits = this[_digits$];
    core._BigIntImpl._lastDividendUsed = this[_used$];
    core._BigIntImpl._lastDivisorDigits = other[_digits$];
    core._BigIntImpl._lastDivisorUsed = other[_used$];
    core._BigIntImpl._lastQuoRemDigits = resultDigits;
    core._BigIntImpl._lastQuoRemUsed = resultUsed;
    core._BigIntImpl._lastRemUsed = yUsed;
    core._BigIntImpl._lastRem_nsh = nsh;
  }
  get hashCode() {
    function combine(hash, value) {
      if (hash == null) dart.nullFailed(L7, 2124, 21, "hash");
      if (value == null) dart.nullFailed(L7, 2124, 31, "value");
      hash = 536870911 & dart.notNull(hash) + dart.notNull(value);
      hash = 536870911 & dart.notNull(hash) + ((524287 & dart.notNull(hash)) << 10);
      return (dart.notNull(hash) ^ hash[$rightShift](6)) >>> 0;
    }
    dart.fn(combine, intAndintToint());
    function finish(hash) {
      if (hash == null) dart.nullFailed(L7, 2130, 20, "hash");
      hash = 536870911 & dart.notNull(hash) + ((67108863 & dart.notNull(hash)) << 3);
      hash = (dart.notNull(hash) ^ hash[$rightShift](11)) >>> 0;
      return 536870911 & dart.notNull(hash) + ((16383 & dart.notNull(hash)) << 15);
    }
    dart.fn(finish, intToint());
    if (dart.test(this[_isZero])) return 6707;
    let hash = dart.test(this[_isNegative]) ? 83585 : 429689;
    for (let i = 0; i < dart.notNull(this[_used$]); i = i + 1) {
      hash = combine(hash, this[_digits$][$_get](i));
    }
    return finish(hash);
  }
  _equals(other) {
    if (other == null) return false;
    return core._BigIntImpl.is(other) && this.compareTo(other) === 0;
  }
  get bitLength() {
    if (this[_used$] === 0) return 0;
    if (dart.test(this[_isNegative])) return this['~']().bitLength;
    return 16 * (dart.notNull(this[_used$]) - 1) + this[_digits$][$_get](dart.notNull(this[_used$]) - 1)[$bitLength];
  }
  ['~/'](other) {
    core._BigIntImpl.as(other);
    if (other == null) dart.nullFailed(L7, 2203, 49, "other");
    if (other[_used$] === 0) {
      dart.throw(C417 || CT.C417);
    }
    return this[_div](other);
  }
  remainder(other) {
    core._BigIntImpl.as(other);
    if (other == null) dart.nullFailed(L7, 2217, 47, "other");
    if (other[_used$] === 0) {
      dart.throw(C417 || CT.C417);
    }
    return this[_rem](other);
  }
  ['/'](other) {
    if (other == null) dart.nullFailed(L7, 2225, 28, "other");
    return dart.notNull(this.toDouble()) / dart.notNull(other.toDouble());
  }
  ['<'](other) {
    core._BigIntImpl.as(other);
    if (other == null) dart.nullFailed(L7, 2228, 41, "other");
    return dart.notNull(this.compareTo(other)) < 0;
  }
  ['<='](other) {
    core._BigIntImpl.as(other);
    if (other == null) dart.nullFailed(L7, 2231, 42, "other");
    return dart.notNull(this.compareTo(other)) <= 0;
  }
  ['>'](other) {
    core._BigIntImpl.as(other);
    if (other == null) dart.nullFailed(L7, 2234, 41, "other");
    return dart.notNull(this.compareTo(other)) > 0;
  }
  ['>='](other) {
    core._BigIntImpl.as(other);
    if (other == null) dart.nullFailed(L7, 2237, 42, "other");
    return dart.notNull(this.compareTo(other)) >= 0;
  }
  ['%'](other) {
    core._BigIntImpl.as(other);
    if (other == null) dart.nullFailed(L7, 2250, 48, "other");
    if (other[_used$] === 0) {
      dart.throw(C417 || CT.C417);
    }
    let result = this[_rem](other);
    if (dart.test(result[_isNegative])) {
      if (dart.test(other[_isNegative])) {
        result = result['-'](other);
      } else {
        result = result['+'](other);
      }
    }
    return result;
  }
  get sign() {
    if (this[_used$] === 0) return 0;
    return dart.test(this[_isNegative]) ? -1 : 1;
  }
  get isEven() {
    return this[_used$] === 0 || (dart.notNull(this[_digits$][$_get](0)) & 1) === 0;
  }
  get isOdd() {
    return !dart.test(this.isEven);
  }
  get isNegative() {
    return this[_isNegative];
  }
  pow(exponent) {
    if (exponent == null) dart.nullFailed(L7, 2285, 23, "exponent");
    if (dart.notNull(exponent) < 0) {
      dart.throw(new core.ArgumentError.new(dart.str("Exponent must not be negative: ") + dart.str(exponent)));
    }
    if (exponent === 0) return core._BigIntImpl.one;
    let result = core._BigIntImpl.one;
    let base = this;
    while (exponent !== 0) {
      if ((dart.notNull(exponent) & 1) === 1) {
        result = result['*'](base);
      }
      exponent = exponent[$rightShift](1);
      if (exponent !== 0) {
        base = base['*'](base);
      }
    }
    return result;
  }
  modPow(exponent, modulus) {
    core._BigIntImpl.as(exponent);
    if (exponent == null) dart.nullFailed(L7, 2314, 29, "exponent");
    core._BigIntImpl.as(modulus);
    if (modulus == null) dart.nullFailed(L7, 2314, 61, "modulus");
    if (dart.test(exponent[_isNegative])) {
      dart.throw(new core.ArgumentError.new(dart.str("exponent must be positive: ") + dart.str(exponent)));
    }
    if (dart.test(modulus['<='](core._BigIntImpl.zero))) {
      dart.throw(new core.ArgumentError.new(dart.str("modulus must be strictly positive: ") + dart.str(modulus)));
    }
    if (dart.test(exponent[_isZero])) return core._BigIntImpl.one;
    let modulusUsed = modulus[_used$];
    let modulusUsed2p4 = 2 * dart.notNull(modulusUsed) + 4;
    let exponentBitlen = exponent.bitLength;
    if (dart.notNull(exponentBitlen) <= 0) return core._BigIntImpl.one;
    let z = new core._BigIntClassic.new(modulus);
    let resultDigits = _native_typed_data.NativeUint16List.new(modulusUsed2p4);
    let result2Digits = _native_typed_data.NativeUint16List.new(modulusUsed2p4);
    let gDigits = _native_typed_data.NativeUint16List.new(modulusUsed);
    let gUsed = z.convert(this, gDigits);
    for (let j = dart.notNull(gUsed) - 1; j >= 0; j = j - 1) {
      resultDigits[$_set](j, gDigits[$_get](j));
    }
    let resultUsed = gUsed;
    let result2Used = null;
    for (let i = dart.notNull(exponentBitlen) - 2; i >= 0; i = i - 1) {
      result2Used = z.sqr(resultDigits, resultUsed, result2Digits);
      if (!dart.test(exponent['&'](core._BigIntImpl.one['<<'](i))[_isZero])) {
        resultUsed = z.mul(result2Digits, result2Used, gDigits, gUsed, resultDigits);
      } else {
        let tmpDigits = resultDigits;
        let tmpUsed = resultUsed;
        resultDigits = result2Digits;
        resultUsed = result2Used;
        result2Digits = tmpDigits;
        result2Used = tmpUsed;
      }
    }
    return z.revert(resultDigits, resultUsed);
  }
  static _binaryGcd(x, y, inv) {
    if (x == null) dart.nullFailed(L7, 2360, 45, "x");
    if (y == null) dart.nullFailed(L7, 2360, 60, "y");
    if (inv == null) dart.nullFailed(L7, 2360, 68, "inv");
    let xDigits = x[_digits$];
    let yDigits = y[_digits$];
    let xUsed = x[_used$];
    let yUsed = y[_used$];
    let maxUsed = dart.notNull(xUsed) > dart.notNull(yUsed) ? xUsed : yUsed;
    let unshiftedMaxUsed = maxUsed;
    xDigits = core._BigIntImpl._cloneDigits(xDigits, 0, xUsed, maxUsed);
    yDigits = core._BigIntImpl._cloneDigits(yDigits, 0, yUsed, maxUsed);
    let shiftAmount = 0;
    if (dart.test(inv)) {
      if (yUsed === 1 && yDigits[$_get](0) === 1) return core._BigIntImpl.one;
      if (yUsed === 0 || yDigits[$_get](0)[$isEven] && xDigits[$_get](0)[$isEven]) {
        dart.throw(core.Exception.new("Not coprime"));
      }
    } else {
      if (dart.test(x[_isZero])) {
        dart.throw(new core.ArgumentError.value(0, "this", "must not be zero"));
      }
      if (dart.test(y[_isZero])) {
        dart.throw(new core.ArgumentError.value(0, "other", "must not be zero"));
      }
      if (xUsed === 1 && xDigits[$_get](0) === 1 || yUsed === 1 && yDigits[$_get](0) === 1) return core._BigIntImpl.one;
      while ((dart.notNull(xDigits[$_get](0)) & 1) === 0 && (dart.notNull(yDigits[$_get](0)) & 1) === 0) {
        core._BigIntImpl._rsh(xDigits, xUsed, 1, xDigits);
        core._BigIntImpl._rsh(yDigits, yUsed, 1, yDigits);
        shiftAmount = shiftAmount + 1;
      }
      if (shiftAmount >= 16) {
        let digitShiftAmount = (shiftAmount / 16)[$truncate]();
        xUsed = dart.notNull(xUsed) - digitShiftAmount;
        yUsed = dart.notNull(yUsed) - digitShiftAmount;
        maxUsed = dart.notNull(maxUsed) - digitShiftAmount;
      }
      if ((dart.notNull(yDigits[$_get](0)) & 1) === 1) {
        let tmpDigits = xDigits;
        let tmpUsed = xUsed;
        xDigits = yDigits;
        xUsed = yUsed;
        yDigits = tmpDigits;
        yUsed = tmpUsed;
      }
    }
    let uDigits = core._BigIntImpl._cloneDigits(xDigits, 0, xUsed, unshiftedMaxUsed);
    let vDigits = core._BigIntImpl._cloneDigits(yDigits, 0, yUsed, dart.notNull(unshiftedMaxUsed) + 2);
    let ac = (dart.notNull(xDigits[$_get](0)) & 1) === 0;
    let abcdUsed = dart.notNull(maxUsed) + 1;
    let abcdLen = abcdUsed + 2;
    let aDigits = core._dummyList;
    let aIsNegative = false;
    let cDigits = core._dummyList;
    let cIsNegative = false;
    if (ac) {
      aDigits = _native_typed_data.NativeUint16List.new(abcdLen);
      aDigits[$_set](0, 1);
      cDigits = _native_typed_data.NativeUint16List.new(abcdLen);
    }
    let bDigits = _native_typed_data.NativeUint16List.new(abcdLen);
    let bIsNegative = false;
    let dDigits = _native_typed_data.NativeUint16List.new(abcdLen);
    let dIsNegative = false;
    dDigits[$_set](0, 1);
    while (true) {
      while ((dart.notNull(uDigits[$_get](0)) & 1) === 0) {
        core._BigIntImpl._rsh(uDigits, maxUsed, 1, uDigits);
        if (ac) {
          if ((dart.notNull(aDigits[$_get](0)) & 1) === 1 || (dart.notNull(bDigits[$_get](0)) & 1) === 1) {
            if (aIsNegative) {
              if (aDigits[$_get](maxUsed) !== 0 || dart.notNull(core._BigIntImpl._compareDigits(aDigits, maxUsed, yDigits, maxUsed)) > 0) {
                core._BigIntImpl._absSub(aDigits, abcdUsed, yDigits, maxUsed, aDigits);
              } else {
                core._BigIntImpl._absSub(yDigits, maxUsed, aDigits, maxUsed, aDigits);
                aIsNegative = false;
              }
            } else {
              core._BigIntImpl._absAdd(aDigits, abcdUsed, yDigits, maxUsed, aDigits);
            }
            if (bIsNegative) {
              core._BigIntImpl._absAdd(bDigits, abcdUsed, xDigits, maxUsed, bDigits);
            } else if (bDigits[$_get](maxUsed) !== 0 || dart.notNull(core._BigIntImpl._compareDigits(bDigits, maxUsed, xDigits, maxUsed)) > 0) {
              core._BigIntImpl._absSub(bDigits, abcdUsed, xDigits, maxUsed, bDigits);
            } else {
              core._BigIntImpl._absSub(xDigits, maxUsed, bDigits, maxUsed, bDigits);
              bIsNegative = true;
            }
          }
          core._BigIntImpl._rsh(aDigits, abcdUsed, 1, aDigits);
        } else if ((dart.notNull(bDigits[$_get](0)) & 1) === 1) {
          if (bIsNegative) {
            core._BigIntImpl._absAdd(bDigits, abcdUsed, xDigits, maxUsed, bDigits);
          } else if (bDigits[$_get](maxUsed) !== 0 || dart.notNull(core._BigIntImpl._compareDigits(bDigits, maxUsed, xDigits, maxUsed)) > 0) {
            core._BigIntImpl._absSub(bDigits, abcdUsed, xDigits, maxUsed, bDigits);
          } else {
            core._BigIntImpl._absSub(xDigits, maxUsed, bDigits, maxUsed, bDigits);
            bIsNegative = true;
          }
        }
        core._BigIntImpl._rsh(bDigits, abcdUsed, 1, bDigits);
      }
      while ((dart.notNull(vDigits[$_get](0)) & 1) === 0) {
        core._BigIntImpl._rsh(vDigits, maxUsed, 1, vDigits);
        if (ac) {
          if ((dart.notNull(cDigits[$_get](0)) & 1) === 1 || (dart.notNull(dDigits[$_get](0)) & 1) === 1) {
            if (cIsNegative) {
              if (cDigits[$_get](maxUsed) !== 0 || dart.notNull(core._BigIntImpl._compareDigits(cDigits, maxUsed, yDigits, maxUsed)) > 0) {
                core._BigIntImpl._absSub(cDigits, abcdUsed, yDigits, maxUsed, cDigits);
              } else {
                core._BigIntImpl._absSub(yDigits, maxUsed, cDigits, maxUsed, cDigits);
                cIsNegative = false;
              }
            } else {
              core._BigIntImpl._absAdd(cDigits, abcdUsed, yDigits, maxUsed, cDigits);
            }
            if (dIsNegative) {
              core._BigIntImpl._absAdd(dDigits, abcdUsed, xDigits, maxUsed, dDigits);
            } else if (dDigits[$_get](maxUsed) !== 0 || dart.notNull(core._BigIntImpl._compareDigits(dDigits, maxUsed, xDigits, maxUsed)) > 0) {
              core._BigIntImpl._absSub(dDigits, abcdUsed, xDigits, maxUsed, dDigits);
            } else {
              core._BigIntImpl._absSub(xDigits, maxUsed, dDigits, maxUsed, dDigits);
              dIsNegative = true;
            }
          }
          core._BigIntImpl._rsh(cDigits, abcdUsed, 1, cDigits);
        } else if ((dart.notNull(dDigits[$_get](0)) & 1) === 1) {
          if (dIsNegative) {
            core._BigIntImpl._absAdd(dDigits, abcdUsed, xDigits, maxUsed, dDigits);
          } else if (dDigits[$_get](maxUsed) !== 0 || dart.notNull(core._BigIntImpl._compareDigits(dDigits, maxUsed, xDigits, maxUsed)) > 0) {
            core._BigIntImpl._absSub(dDigits, abcdUsed, xDigits, maxUsed, dDigits);
          } else {
            core._BigIntImpl._absSub(xDigits, maxUsed, dDigits, maxUsed, dDigits);
            dIsNegative = true;
          }
        }
        core._BigIntImpl._rsh(dDigits, abcdUsed, 1, dDigits);
      }
      if (dart.notNull(core._BigIntImpl._compareDigits(uDigits, maxUsed, vDigits, maxUsed)) >= 0) {
        core._BigIntImpl._absSub(uDigits, maxUsed, vDigits, maxUsed, uDigits);
        if (ac) {
          if (aIsNegative[$_equals](cIsNegative)) {
            let a_cmp_c = core._BigIntImpl._compareDigits(aDigits, abcdUsed, cDigits, abcdUsed);
            if (dart.notNull(a_cmp_c) > 0) {
              core._BigIntImpl._absSub(aDigits, abcdUsed, cDigits, abcdUsed, aDigits);
            } else {
              core._BigIntImpl._absSub(cDigits, abcdUsed, aDigits, abcdUsed, aDigits);
              aIsNegative = !aIsNegative && a_cmp_c !== 0;
            }
          } else {
            core._BigIntImpl._absAdd(aDigits, abcdUsed, cDigits, abcdUsed, aDigits);
          }
        }
        if (bIsNegative[$_equals](dIsNegative)) {
          let b_cmp_d = core._BigIntImpl._compareDigits(bDigits, abcdUsed, dDigits, abcdUsed);
          if (dart.notNull(b_cmp_d) > 0) {
            core._BigIntImpl._absSub(bDigits, abcdUsed, dDigits, abcdUsed, bDigits);
          } else {
            core._BigIntImpl._absSub(dDigits, abcdUsed, bDigits, abcdUsed, bDigits);
            bIsNegative = !bIsNegative && b_cmp_d !== 0;
          }
        } else {
          core._BigIntImpl._absAdd(bDigits, abcdUsed, dDigits, abcdUsed, bDigits);
        }
      } else {
        core._BigIntImpl._absSub(vDigits, maxUsed, uDigits, maxUsed, vDigits);
        if (ac) {
          if (cIsNegative[$_equals](aIsNegative)) {
            let c_cmp_a = core._BigIntImpl._compareDigits(cDigits, abcdUsed, aDigits, abcdUsed);
            if (dart.notNull(c_cmp_a) > 0) {
              core._BigIntImpl._absSub(cDigits, abcdUsed, aDigits, abcdUsed, cDigits);
            } else {
              core._BigIntImpl._absSub(aDigits, abcdUsed, cDigits, abcdUsed, cDigits);
              cIsNegative = !cIsNegative && c_cmp_a !== 0;
            }
          } else {
            core._BigIntImpl._absAdd(cDigits, abcdUsed, aDigits, abcdUsed, cDigits);
          }
        }
        if (dIsNegative[$_equals](bIsNegative)) {
          let d_cmp_b = core._BigIntImpl._compareDigits(dDigits, abcdUsed, bDigits, abcdUsed);
          if (dart.notNull(d_cmp_b) > 0) {
            core._BigIntImpl._absSub(dDigits, abcdUsed, bDigits, abcdUsed, dDigits);
          } else {
            core._BigIntImpl._absSub(bDigits, abcdUsed, dDigits, abcdUsed, dDigits);
            dIsNegative = !dIsNegative && d_cmp_b !== 0;
          }
        } else {
          core._BigIntImpl._absAdd(dDigits, abcdUsed, bDigits, abcdUsed, dDigits);
        }
      }
      let i = maxUsed;
      while (dart.notNull(i) > 0 && uDigits[$_get](dart.notNull(i) - 1) === 0)
        i = dart.notNull(i) - 1;
      if (i === 0) break;
    }
    if (!dart.test(inv)) {
      if (shiftAmount > 0) {
        maxUsed = core._BigIntImpl._lShiftDigits(vDigits, maxUsed, shiftAmount, vDigits);
      }
      return new core._BigIntImpl.__(false, maxUsed, vDigits);
    }
    let i = dart.notNull(maxUsed) - 1;
    while (i > 0 && vDigits[$_get](i) === 0)
      i = i - 1;
    if (i !== 0 || vDigits[$_get](0) !== 1) {
      dart.throw(core.Exception.new("Not coprime"));
    }
    if (dIsNegative) {
      while (dDigits[$_get](maxUsed) !== 0 || dart.notNull(core._BigIntImpl._compareDigits(dDigits, maxUsed, xDigits, maxUsed)) > 0) {
        core._BigIntImpl._absSub(dDigits, abcdUsed, xDigits, maxUsed, dDigits);
      }
      core._BigIntImpl._absSub(xDigits, maxUsed, dDigits, maxUsed, dDigits);
      dIsNegative = false;
    } else {
      while (dDigits[$_get](maxUsed) !== 0 || dart.notNull(core._BigIntImpl._compareDigits(dDigits, maxUsed, xDigits, maxUsed)) >= 0) {
        core._BigIntImpl._absSub(dDigits, abcdUsed, xDigits, maxUsed, dDigits);
      }
    }
    return new core._BigIntImpl.__(false, maxUsed, dDigits);
  }
  modInverse(modulus) {
    core._BigIntImpl.as(modulus);
    if (modulus == null) dart.nullFailed(L7, 2618, 48, "modulus");
    if (dart.test(modulus['<='](core._BigIntImpl.zero))) {
      dart.throw(new core.ArgumentError.new(dart.str("Modulus must be strictly positive: ") + dart.str(modulus)));
    }
    if (dart.equals(modulus, core._BigIntImpl.one)) return core._BigIntImpl.zero;
    let tmp = this;
    if (dart.test(tmp[_isNegative]) || dart.notNull(tmp[_absCompare](modulus)) >= 0) {
      tmp = tmp['%'](modulus);
    }
    return core._BigIntImpl._binaryGcd(modulus, tmp, true);
  }
  gcd(other) {
    core._BigIntImpl.as(other);
    if (other == null) dart.nullFailed(L7, 2643, 41, "other");
    if (dart.test(this[_isZero])) return other.abs();
    if (dart.test(other[_isZero])) return this.abs();
    return core._BigIntImpl._binaryGcd(this, other, false);
  }
  toUnsigned(width) {
    if (width == null) dart.nullFailed(L7, 2675, 30, "width");
    return this['&'](core._BigIntImpl.one['<<'](width)['-'](core._BigIntImpl.one));
  }
  toSigned(width) {
    if (width == null) dart.nullFailed(L7, 2713, 28, "width");
    let signMask = core._BigIntImpl.one['<<'](dart.notNull(width) - 1);
    return this['&'](signMask['-'](core._BigIntImpl.one))['-'](this['&'](signMask));
  }
  get isValidInt() {
    if (dart.notNull(this[_used$]) <= 3) return true;
    let asInt = this.toInt();
    if (!asInt[$toDouble]()[$isFinite]) return false;
    return this._equals(core._BigIntImpl._fromInt(asInt));
  }
  toInt() {
    let result = 0;
    for (let i = dart.notNull(this[_used$]) - 1; i >= 0; i = i - 1) {
      result = result * 65536 + dart.notNull(this[_digits$][$_get](i));
    }
    return dart.test(this[_isNegative]) ? -result : result;
  }
  toDouble() {
    let t231, t230, t231$, t230$;
    if (dart.test(this[_isZero])) return 0.0;
    let resultBits = _native_typed_data.NativeUint8List.new(8);
    let length = 16 * (dart.notNull(this[_used$]) - 1) + this[_digits$][$_get](dart.notNull(this[_used$]) - 1)[$bitLength];
    if (length > 971 + 53) {
      return dart.test(this[_isNegative]) ? -1 / 0 : 1 / 0;
    }
    if (dart.test(this[_isNegative])) resultBits[$_set](7, 128);
    let biasedExponent = length - 53 + 1075;
    resultBits[$_set](6, (biasedExponent & 15) << 4);
    t230 = resultBits;
    t231 = 7;
    t230[$_set](t231, (dart.notNull(t230[$_get](t231)) | biasedExponent[$rightShift](4)) >>> 0);
    let cachedBits = 0;
    let cachedBitsLength = 0;
    let digitIndex = dart.notNull(this[_used$]) - 1;
    const readBits = n => {
      if (n == null) dart.nullFailed(L7, 2776, 22, "n");
      while (cachedBitsLength < dart.notNull(n)) {
        let nextDigit = null;
        let nextDigitLength = 16;
        if (digitIndex < 0) {
          nextDigit = 0;
          digitIndex = digitIndex - 1;
        } else {
          nextDigit = this[_digits$][$_get](digitIndex);
          if (digitIndex === dart.notNull(this[_used$]) - 1) nextDigitLength = nextDigit[$bitLength];
          digitIndex = digitIndex - 1;
        }
        cachedBits = cachedBits[$leftShift](nextDigitLength) + dart.notNull(nextDigit);
        cachedBitsLength = cachedBitsLength + nextDigitLength;
      }
      let result = cachedBits[$rightShift](cachedBitsLength - dart.notNull(n));
      cachedBits = cachedBits - result[$leftShift](cachedBitsLength - dart.notNull(n));
      cachedBitsLength = cachedBitsLength - dart.notNull(n);
      return result;
    };
    dart.fn(readBits, intToint());
    let leadingBits = dart.notNull(readBits(5)) & 15;
    t230$ = resultBits;
    t231$ = 6;
    t230$[$_set](t231$, (dart.notNull(t230$[$_get](t231$)) | leadingBits) >>> 0);
    for (let i = 5; i >= 0; i = i - 1) {
      resultBits[$_set](i, readBits(8));
    }
    function roundUp() {
      let carry = 1;
      for (let i = 0; i < 8; i = i + 1) {
        if (carry === 0) break;
        let sum = dart.notNull(resultBits[$_get](i)) + carry;
        resultBits[$_set](i, sum & 255);
        carry = sum[$rightShift](8);
      }
    }
    dart.fn(roundUp, VoidTovoid());
    if (readBits(1) === 1) {
      if (resultBits[$_get](0)[$isOdd]) {
        roundUp();
      } else {
        if (cachedBits !== 0) {
          roundUp();
        } else {
          for (let i = digitIndex; i >= 0; i = i - 1) {
            if (this[_digits$][$_get](i) !== 0) {
              roundUp();
              break;
            }
          }
        }
      }
    }
    return resultBits[$buffer][$asByteData]()[$getFloat64](0, typed_data.Endian.little);
  }
  toString() {
    if (this[_used$] === 0) return "0";
    if (this[_used$] === 1) {
      if (dart.test(this[_isNegative])) return (-dart.notNull(this[_digits$][$_get](0)))[$toString]();
      return dart.toString(this[_digits$][$_get](0));
    }
    let decimalDigitChunks = JSArrayOfString().of([]);
    let rest = dart.test(this.isNegative) ? this._negate() : this;
    while (dart.notNull(rest[_used$]) > 1) {
      let digits4 = dart.toString(rest.remainder(core._BigIntImpl._bigInt10000));
      decimalDigitChunks[$add](digits4);
      if (digits4.length === 1) decimalDigitChunks[$add]("000");
      if (digits4.length === 2) decimalDigitChunks[$add]("00");
      if (digits4.length === 3) decimalDigitChunks[$add]("0");
      rest = rest['~/'](core._BigIntImpl._bigInt10000);
    }
    decimalDigitChunks[$add](dart.toString(rest[_digits$][$_get](0)));
    if (dart.test(this[_isNegative])) decimalDigitChunks[$add]("-");
    return decimalDigitChunks[$reversed][$join]();
  }
  [_toRadixCodeUnit](digit) {
    if (digit == null) dart.nullFailed(L7, 2876, 28, "digit");
    if (dart.notNull(digit) < 10) return 48 + dart.notNull(digit);
    return 97 + dart.notNull(digit) - 10;
  }
  toRadixString(radix) {
    if (radix == null) dart.nullFailed(L7, 2891, 28, "radix");
    if (dart.notNull(radix) > 36) dart.throw(new core.RangeError.range(radix, 2, 36));
    if (this[_used$] === 0) return "0";
    if (this[_used$] === 1) {
      let digitString = this[_digits$][$_get](0)[$toRadixString](radix);
      if (dart.test(this[_isNegative])) return "-" + digitString;
      return digitString;
    }
    if (radix === 16) return this[_toHexString]();
    let base = core._BigIntImpl._fromInt(radix);
    let reversedDigitCodeUnits = JSArrayOfint().of([]);
    let rest = this.abs();
    while (!dart.test(rest[_isZero])) {
      let digit = rest.remainder(base).toInt();
      rest = rest['~/'](base);
      reversedDigitCodeUnits[$add](this[_toRadixCodeUnit](digit));
    }
    let digitString = core.String.fromCharCodes(reversedDigitCodeUnits[$reversed]);
    if (dart.test(this[_isNegative])) return "-" + dart.notNull(digitString);
    return digitString;
  }
  [_toHexString]() {
    let chars = JSArrayOfint().of([]);
    for (let i = 0; i < dart.notNull(this[_used$]) - 1; i = i + 1) {
      let chunk = this[_digits$][$_get](i);
      for (let j = 0; j < (16 / 4)[$truncate](); j = j + 1) {
        chars[$add](this[_toRadixCodeUnit](dart.notNull(chunk) & 15));
        chunk = chunk[$rightShift](4);
      }
    }
    let msbChunk = this[_digits$][$_get](dart.notNull(this[_used$]) - 1);
    while (msbChunk !== 0) {
      chars[$add](this[_toRadixCodeUnit](dart.notNull(msbChunk) & 15));
      msbChunk = msbChunk[$rightShift](4);
    }
    if (dart.test(this[_isNegative])) {
      chars[$add](45);
    }
    return core.String.fromCharCodes(chars[$reversed]);
  }
};
(core._BigIntImpl.__ = function(isNegative, used, digits) {
  if (isNegative == null) dart.nullFailed(L7, 1196, 22, "isNegative");
  if (used == null) dart.nullFailed(L7, 1196, 38, "used");
  if (digits == null) dart.nullFailed(L7, 1196, 55, "digits");
  core._BigIntImpl._normalized.call(this, isNegative, core._BigIntImpl._normalize(used, digits), digits);
}).prototype = core._BigIntImpl.prototype;
(core._BigIntImpl._normalized = function(isNegative, _used, _digits) {
  if (isNegative == null) dart.nullFailed(L7, 1199, 32, "isNegative");
  if (_used == null) dart.nullFailed(L7, 1199, 49, "_used");
  if (_digits == null) dart.nullFailed(L7, 1199, 61, "_digits");
  this[_used$] = _used;
  this[_digits$] = _digits;
  this[_isNegative] = _used === 0 ? false : isNegative;
  ;
}).prototype = core._BigIntImpl.prototype;
dart.addTypeTests(core._BigIntImpl);
dart.addTypeCaches(core._BigIntImpl);
core._BigIntImpl[dart.implements] = () => [core.BigInt];
dart.setMethodSignature(core._BigIntImpl, () => ({
  __proto__: dart.getMethods(core._BigIntImpl.__proto__),
  _negate: dart.fnType(core._BigIntImpl, []),
  abs: dart.fnType(core._BigIntImpl, []),
  [_dlShift]: dart.fnType(core._BigIntImpl, [core.int]),
  [_drShift]: dart.fnType(core._BigIntImpl, [core.int]),
  '<<': dart.fnType(core._BigIntImpl, [core.int]),
  '>>': dart.fnType(core._BigIntImpl, [core.int]),
  [_absCompare]: dart.fnType(core.int, [core._BigIntImpl]),
  compareTo: dart.fnType(core.int, [dart.nullable(core.Object)]),
  [$compareTo]: dart.fnType(core.int, [dart.nullable(core.Object)]),
  [_absAddSetSign]: dart.fnType(core._BigIntImpl, [core._BigIntImpl, core.bool]),
  [_absSubSetSign]: dart.fnType(core._BigIntImpl, [core._BigIntImpl, core.bool]),
  [_absAndSetSign]: dart.fnType(core._BigIntImpl, [core._BigIntImpl, core.bool]),
  [_absAndNotSetSign]: dart.fnType(core._BigIntImpl, [core._BigIntImpl, core.bool]),
  [_absOrSetSign]: dart.fnType(core._BigIntImpl, [core._BigIntImpl, core.bool]),
  [_absXorSetSign]: dart.fnType(core._BigIntImpl, [core._BigIntImpl, core.bool]),
  '&': dart.fnType(core._BigIntImpl, [dart.nullable(core.Object)]),
  '|': dart.fnType(core._BigIntImpl, [dart.nullable(core.Object)]),
  '^': dart.fnType(core._BigIntImpl, [dart.nullable(core.Object)]),
  '~': dart.fnType(core._BigIntImpl, []),
  '+': dart.fnType(core._BigIntImpl, [dart.nullable(core.Object)]),
  '-': dart.fnType(core._BigIntImpl, [dart.nullable(core.Object)]),
  '*': dart.fnType(core._BigIntImpl, [dart.nullable(core.Object)]),
  [_div]: dart.fnType(core._BigIntImpl, [core._BigIntImpl]),
  [_rem]: dart.fnType(core._BigIntImpl, [core._BigIntImpl]),
  [_divRem]: dart.fnType(dart.void, [core._BigIntImpl]),
  '~/': dart.fnType(core._BigIntImpl, [dart.nullable(core.Object)]),
  remainder: dart.fnType(core._BigIntImpl, [dart.nullable(core.Object)]),
  '/': dart.fnType(core.double, [core.BigInt]),
  '<': dart.fnType(core.bool, [dart.nullable(core.Object)]),
  '<=': dart.fnType(core.bool, [dart.nullable(core.Object)]),
  '>': dart.fnType(core.bool, [dart.nullable(core.Object)]),
  '>=': dart.fnType(core.bool, [dart.nullable(core.Object)]),
  '%': dart.fnType(core._BigIntImpl, [dart.nullable(core.Object)]),
  pow: dart.fnType(core._BigIntImpl, [core.int]),
  modPow: dart.fnType(core._BigIntImpl, [dart.nullable(core.Object), dart.nullable(core.Object)]),
  modInverse: dart.fnType(core._BigIntImpl, [dart.nullable(core.Object)]),
  gcd: dart.fnType(core._BigIntImpl, [dart.nullable(core.Object)]),
  toUnsigned: dart.fnType(core._BigIntImpl, [core.int]),
  toSigned: dart.fnType(core._BigIntImpl, [core.int]),
  toInt: dart.fnType(core.int, []),
  toDouble: dart.fnType(core.double, []),
  [_toRadixCodeUnit]: dart.fnType(core.int, [core.int]),
  toRadixString: dart.fnType(core.String, [core.int]),
  [_toHexString]: dart.fnType(core.String, [])
}));
dart.setGetterSignature(core._BigIntImpl, () => ({
  __proto__: dart.getGetters(core._BigIntImpl.__proto__),
  [_isZero]: core.bool,
  bitLength: core.int,
  sign: core.int,
  isEven: core.bool,
  isOdd: core.bool,
  isNegative: core.bool,
  isValidInt: core.bool
}));
dart.setLibraryUri(core._BigIntImpl, L8$);
dart.setFieldSignature(core._BigIntImpl, () => ({
  __proto__: dart.getFields(core._BigIntImpl.__proto__),
  [_isNegative]: dart.finalFieldType(core.bool),
  [_digits$]: dart.finalFieldType(typed_data.Uint16List),
  [_used$]: dart.finalFieldType(core.int)
}));
dart.defineExtensionMethods(core._BigIntImpl, ['compareTo', '_equals', 'toString']);
dart.defineExtensionAccessors(core._BigIntImpl, ['hashCode']);
dart.defineLazy(core._BigIntImpl, {
  /*core._BigIntImpl._digitBits*/get _digitBits() {
    return 16;
  },
  /*core._BigIntImpl._digitBase*/get _digitBase() {
    return 65536;
  },
  /*core._BigIntImpl._digitMask*/get _digitMask() {
    return 65535;
  },
  /*core._BigIntImpl.zero*/get zero() {
    return core._BigIntImpl._fromInt(0);
  },
  /*core._BigIntImpl.one*/get one() {
    return core._BigIntImpl._fromInt(1);
  },
  /*core._BigIntImpl.two*/get two() {
    return core._BigIntImpl._fromInt(2);
  },
  /*core._BigIntImpl._minusOne*/get _minusOne() {
    return core._BigIntImpl.one._negate();
  },
  /*core._BigIntImpl._bigInt10000*/get _bigInt10000() {
    return core._BigIntImpl._fromInt(10000);
  },
  /*core._BigIntImpl._lastDividendDigits*/get _lastDividendDigits() {
    return null;
  },
  set _lastDividendDigits(_) {},
  /*core._BigIntImpl._lastDividendUsed*/get _lastDividendUsed() {
    return null;
  },
  set _lastDividendUsed(_) {},
  /*core._BigIntImpl._lastDivisorDigits*/get _lastDivisorDigits() {
    return null;
  },
  set _lastDivisorDigits(_) {},
  /*core._BigIntImpl._lastDivisorUsed*/get _lastDivisorUsed() {
    return null;
  },
  set _lastDivisorUsed(_) {},
  /*core._BigIntImpl._lastQuoRemDigits*/get _lastQuoRemDigits() {
    return null;
  },
  set _lastQuoRemDigits(_) {},
  /*core._BigIntImpl._lastQuoRemUsed*/get _lastQuoRemUsed() {
    return null;
  },
  set _lastQuoRemUsed(_) {},
  /*core._BigIntImpl._lastRemUsed*/get _lastRemUsed() {
    return null;
  },
  set _lastRemUsed(_) {},
  /*core._BigIntImpl._lastRem_nsh*/get _lastRem_nsh() {
    return null;
  },
  set _lastRem_nsh(_) {},
  /*core._BigIntImpl._parseRE*/get _parseRE() {
    return core.RegExp.new("^\\s*([+-]?)((0x[a-f0-9]+)|(\\d+)|([a-z0-9]+))\\s*$", {caseSensitive: false});
  },
  set _parseRE(_) {},
  /*core._BigIntImpl._bitsForFromDouble*/get _bitsForFromDouble() {
    return _native_typed_data.NativeUint8List.new(8);
  },
  /*core._BigIntImpl._simpleValidIntDigits*/get _simpleValidIntDigits() {
    return 3;
  }
}, false);
core._BigIntReduction = class _BigIntReduction extends core.Object {};
(core._BigIntReduction.new = function() {
  ;
}).prototype = core._BigIntReduction.prototype;
dart.addTypeTests(core._BigIntReduction);
dart.addTypeCaches(core._BigIntReduction);
dart.setLibraryUri(core._BigIntReduction, L8$);
var _modulus$ = dart.privateName(core, "_modulus");
var _normalizedModulus = dart.privateName(core, "_normalizedModulus");
var _reduce = dart.privateName(core, "_reduce");
core._BigIntClassic = class _BigIntClassic extends core.Object {
  convert(x, resultDigits) {
    if (x == null) dart.nullFailed(L7, 2961, 27, "x");
    if (resultDigits == null) dart.nullFailed(L7, 2961, 41, "resultDigits");
    let digits = null;
    let used = null;
    if (dart.test(x[_isNegative]) || dart.notNull(x[_absCompare](this[_modulus$])) >= 0) {
      let remainder = x[_rem](this[_modulus$]);
      if (dart.test(x[_isNegative]) && dart.notNull(remainder[_used$]) > 0) {
        if (!dart.test(remainder[_isNegative])) dart.assertFailed(null, L7, 2967, 16, "remainder._isNegative");
        remainder = remainder['+'](this[_modulus$]);
      }
      if (!!dart.test(remainder[_isNegative])) dart.assertFailed(null, L7, 2970, 14, "!remainder._isNegative");
      used = remainder[_used$];
      digits = remainder[_digits$];
    } else {
      used = x[_used$];
      digits = x[_digits$];
    }
    let i = used;
    while ((i = dart.notNull(i) - 1) >= 0) {
      resultDigits[$_set](i, digits[$_get](i));
    }
    return used;
  }
  revert(xDigits, xUsed) {
    if (xDigits == null) dart.nullFailed(L7, 2984, 33, "xDigits");
    if (xUsed == null) dart.nullFailed(L7, 2984, 46, "xUsed");
    return new core._BigIntImpl.__(false, xUsed, xDigits);
  }
  [_reduce](xDigits, xUsed) {
    if (xDigits == null) dart.nullFailed(L7, 2988, 26, "xDigits");
    if (xUsed == null) dart.nullFailed(L7, 2988, 39, "xUsed");
    if (dart.notNull(xUsed) < dart.notNull(this[_modulus$][_used$])) {
      return xUsed;
    }
    let reverted = this.revert(xDigits, xUsed);
    let rem = reverted[_rem](this[_normalizedModulus]);
    return this.convert(rem, xDigits);
  }
  sqr(xDigits, xUsed, resultDigits) {
    if (xDigits == null) dart.nullFailed(L7, 2997, 22, "xDigits");
    if (xUsed == null) dart.nullFailed(L7, 2997, 35, "xUsed");
    if (resultDigits == null) dart.nullFailed(L7, 2997, 53, "resultDigits");
    let b = new core._BigIntImpl.__(false, xUsed, xDigits);
    let b2 = b['*'](b);
    for (let i = 0; i < dart.notNull(b2[_used$]); i = i + 1) {
      resultDigits[$_set](i, b2[_digits$][$_get](i));
    }
    for (let i = b2[_used$]; dart.notNull(i) < 2 * dart.notNull(xUsed); i = dart.notNull(i) + 1) {
      resultDigits[$_set](i, 0);
    }
    return this[_reduce](resultDigits, 2 * dart.notNull(xUsed));
  }
  mul(xDigits, xUsed, yDigits, yUsed, resultDigits) {
    if (xDigits == null) dart.nullFailed(L7, 3009, 22, "xDigits");
    if (xUsed == null) dart.nullFailed(L7, 3009, 35, "xUsed");
    if (yDigits == null) dart.nullFailed(L7, 3009, 53, "yDigits");
    if (yUsed == null) dart.nullFailed(L7, 3009, 66, "yUsed");
    if (resultDigits == null) dart.nullFailed(L7, 3010, 18, "resultDigits");
    let resultUsed = core._BigIntImpl._mulDigits(xDigits, xUsed, yDigits, yUsed, resultDigits);
    return this[_reduce](resultDigits, resultUsed);
  }
};
(core._BigIntClassic.new = function(_modulus) {
  if (_modulus == null) dart.nullFailed(L7, 2956, 23, "_modulus");
  this[_modulus$] = _modulus;
  this[_normalizedModulus] = _modulus['<<'](16 - _modulus[_digits$][$_get](dart.notNull(_modulus[_used$]) - 1)[$bitLength]);
  ;
}).prototype = core._BigIntClassic.prototype;
dart.addTypeTests(core._BigIntClassic);
dart.addTypeCaches(core._BigIntClassic);
core._BigIntClassic[dart.implements] = () => [core._BigIntReduction];
dart.setMethodSignature(core._BigIntClassic, () => ({
  __proto__: dart.getMethods(core._BigIntClassic.__proto__),
  convert: dart.fnType(core.int, [core._BigIntImpl, typed_data.Uint16List]),
  revert: dart.fnType(core._BigIntImpl, [typed_data.Uint16List, core.int]),
  [_reduce]: dart.fnType(core.int, [typed_data.Uint16List, core.int]),
  sqr: dart.fnType(core.int, [typed_data.Uint16List, core.int, typed_data.Uint16List]),
  mul: dart.fnType(core.int, [typed_data.Uint16List, core.int, typed_data.Uint16List, core.int, typed_data.Uint16List])
}));
dart.setLibraryUri(core._BigIntClassic, L8$);
dart.setFieldSignature(core._BigIntClassic, () => ({
  __proto__: dart.getFields(core._BigIntClassic.__proto__),
  [_modulus$]: dart.finalFieldType(core._BigIntImpl),
  [_normalizedModulus]: dart.finalFieldType(core._BigIntImpl)
}));
var message$11 = dart.privateName(core, "Deprecated.message");
core.Deprecated = class Deprecated extends core.Object {
  get message() {
    return this[message$11];
  }
  set message(value) {
    super.message = value;
  }
  get expires() {
    return this.message;
  }
  toString() {
    return dart.str("Deprecated feature: ") + dart.str(this.message);
  }
};
(core.Deprecated.new = function(message) {
  if (message == null) dart.nullFailed(L163, 72, 25, "message");
  this[message$11] = message;
  ;
}).prototype = core.Deprecated.prototype;
dart.addTypeTests(core.Deprecated);
dart.addTypeCaches(core.Deprecated);
dart.setGetterSignature(core.Deprecated, () => ({
  __proto__: dart.getGetters(core.Deprecated.__proto__),
  expires: core.String
}));
dart.setLibraryUri(core.Deprecated, L8$);
dart.setFieldSignature(core.Deprecated, () => ({
  __proto__: dart.getFields(core.Deprecated.__proto__),
  message: dart.finalFieldType(core.String)
}));
dart.defineExtensionMethods(core.Deprecated, ['toString']);
core._Override = class _Override extends core.Object {};
(core._Override.new = function() {
  ;
}).prototype = core._Override.prototype;
dart.addTypeTests(core._Override);
dart.addTypeCaches(core._Override);
dart.setLibraryUri(core._Override, L8$);
core.Provisional = class Provisional extends core.Object {
  get message() {
    return null;
  }
};
(core.Provisional.new = function(opts) {
  let message = opts && 'message' in opts ? opts.message : null;
  ;
}).prototype = core.Provisional.prototype;
dart.addTypeTests(core.Provisional);
dart.addTypeCaches(core.Provisional);
dart.setGetterSignature(core.Provisional, () => ({
  __proto__: dart.getGetters(core.Provisional.__proto__),
  message: dart.nullable(core.String)
}));
dart.setLibraryUri(core.Provisional, L8$);
core._Proxy = class _Proxy extends core.Object {};
(core._Proxy.new = function() {
  ;
}).prototype = core._Proxy.prototype;
dart.addTypeTests(core._Proxy);
dart.addTypeCaches(core._Proxy);
dart.setLibraryUri(core._Proxy, L8$);
var name$12 = dart.privateName(core, "pragma.name");
var options$ = dart.privateName(core, "pragma.options");
core.pragma = class pragma extends core.Object {
  get name() {
    return this[name$12];
  }
  set name(value) {
    super.name = value;
  }
  get options() {
    return this[options$];
  }
  set options(value) {
    super.options = value;
  }
};
(core.pragma.__ = function(name, options = null) {
  if (name == null) dart.nullFailed(L163, 239, 23, "name");
  this[name$12] = name;
  this[options$] = options;
  ;
}).prototype = core.pragma.prototype;
dart.addTypeTests(core.pragma);
dart.addTypeCaches(core.pragma);
dart.setLibraryUri(core.pragma, L8$);
dart.setFieldSignature(core.pragma, () => ({
  __proto__: dart.getFields(core.pragma.__proto__),
  name: dart.finalFieldType(core.String),
  options: dart.finalFieldType(dart.nullable(core.Object))
}));
core.BigInt = class BigInt extends core.Object {
  static get zero() {
    return core._BigIntImpl.zero;
  }
  static get one() {
    return core._BigIntImpl.one;
  }
  static get two() {
    return core._BigIntImpl.two;
  }
  static parse(source, opts) {
    if (source == null) dart.nullFailed(L7, 262, 30, "source");
    let radix = opts && 'radix' in opts ? opts.radix : null;
    return core._BigIntImpl.parse(source, {radix: radix});
  }
  static tryParse(source, opts) {
    if (source == null) dart.nullFailed(L7, 266, 34, "source");
    let radix = opts && 'radix' in opts ? opts.radix : null;
    return core._BigIntImpl._tryParse(source, {radix: radix});
  }
};
(core.BigInt[dart.mixinNew] = function() {
}).prototype = core.BigInt.prototype;
dart.addTypeTests(core.BigInt);
dart.addTypeCaches(core.BigInt);
core.BigInt[dart.implements] = () => [core.Comparable$(core.BigInt)];
dart.setLibraryUri(core.BigInt, L8$);
core.bool = class bool extends core.Object {
  static is(o) {
    return o === true || o === false;
  }
  static as(o) {
    if (o === true || o === false) return o;
    return dart.as(o, core.bool);
  }
  static fromEnvironment(name, opts) {
    if (name == null) dart.nullFailed(L7, 645, 39, "name");
    let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : false;
    if (defaultValue == null) dart.nullFailed(L7, 645, 51, "defaultValue");
    dart.throw(new core.UnsupportedError.new("bool.fromEnvironment can only be used as a const constructor"));
  }
  static hasEnvironment(name) {
    if (name == null) dart.nullFailed(L7, 652, 38, "name");
    dart.throw(new core.UnsupportedError.new("bool.hasEnvironment can only be used as a const constructor"));
  }
  get [$hashCode]() {
    return super[$hashCode];
  }
  [$bitAnd](other) {
    if (other == null) dart.nullFailed(L164, 87, 24, "other");
    return dart.test(other) && this;
  }
  [$bitOr](other) {
    if (other == null) dart.nullFailed(L164, 93, 24, "other");
    return dart.test(other) || this;
  }
  [$bitXor](other) {
    if (other == null) dart.nullFailed(L164, 99, 24, "other");
    return (!dart.test(other))[$_equals](this);
  }
  [$toString]() {
    return this ? "true" : "false";
  }
};
(core.bool[dart.mixinNew] = function() {
}).prototype = core.bool.prototype;
dart.addTypeCaches(core.bool);
dart.setMethodSignature(core.bool, () => ({
  __proto__: dart.getMethods(core.bool.__proto__),
  [$bitAnd]: dart.fnType(core.bool, [core.bool]),
  [$bitOr]: dart.fnType(core.bool, [core.bool]),
  [$bitXor]: dart.fnType(core.bool, [core.bool])
}));
dart.setLibraryUri(core.bool, L8$);
const _is_Comparable_default = Symbol('_is_Comparable_default');
core.Comparable$ = dart.generic(T => {
  class Comparable extends core.Object {
    static compare(a, b) {
      if (a == null) dart.nullFailed(L165, 93, 33, "a");
      if (b == null) dart.nullFailed(L165, 93, 47, "b");
      return a[$compareTo](b);
    }
  }
  (Comparable.new = function() {
    ;
  }).prototype = Comparable.prototype;
  dart.addTypeTests(Comparable);
  Comparable.prototype[_is_Comparable_default] = true;
  dart.addTypeCaches(Comparable);
  dart.setLibraryUri(Comparable, L8$);
  return Comparable;
});
core.Comparable = core.Comparable$();
dart.addTypeTests(core.Comparable, _is_Comparable_default);
var _value$6 = dart.privateName(core, "_value");
var isUtc$ = dart.privateName(core, "DateTime.isUtc");
core.DateTime = class DateTime extends core.Object {
  get isUtc() {
    return this[isUtc$];
  }
  set isUtc(value) {
    super.isUtc = value;
  }
  static _microsecondInRoundedMilliseconds(microsecond) {
    if (microsecond == null) dart.nullFailed(L7, 341, 52, "microsecond");
    return (dart.notNull(microsecond) / 1000)[$round]();
  }
  static parse(formattedString) {
    if (formattedString == null) dart.nullFailed(L166, 279, 32, "formattedString");
    let re = core.DateTime._parseFormat;
    let match = re.firstMatch(formattedString);
    if (match != null) {
      function parseIntOrZero(matched) {
        if (matched == null) return 0;
        return core.int.parse(matched);
      }
      dart.fn(parseIntOrZero, StringNToint());
      function parseMilliAndMicroseconds(matched) {
        if (matched == null) return 0;
        let length = matched.length;
        if (!(length >= 1)) dart.assertFailed(null, L166, 294, 16, "length >= 1");
        let result = 0;
        for (let i = 0; i < 6; i = i + 1) {
          result = result * 10;
          if (i < matched.length) {
            result = result + ((matched[$codeUnitAt](i) ^ 48) >>> 0);
          }
        }
        return result;
      }
      dart.fn(parseMilliAndMicroseconds, StringNToint());
      let years = core.int.parse(dart.nullCheck(match._get(1)));
      let month = core.int.parse(dart.nullCheck(match._get(2)));
      let day = core.int.parse(dart.nullCheck(match._get(3)));
      let hour = parseIntOrZero(match._get(4));
      let minute = parseIntOrZero(match._get(5));
      let second = parseIntOrZero(match._get(6));
      let milliAndMicroseconds = parseMilliAndMicroseconds(match._get(7));
      let millisecond = (dart.notNull(milliAndMicroseconds) / 1000)[$truncate]();
      let microsecond = milliAndMicroseconds[$remainder](1000);
      let isUtc = false;
      if (match._get(8) != null) {
        isUtc = true;
        let tzSign = match._get(9);
        if (tzSign != null) {
          let sign = tzSign === "-" ? -1 : 1;
          let hourDifference = core.int.parse(dart.nullCheck(match._get(10)));
          let minuteDifference = parseIntOrZero(match._get(11));
          minuteDifference = dart.notNull(minuteDifference) + 60 * dart.notNull(hourDifference);
          minute = dart.notNull(minute) - sign * dart.notNull(minuteDifference);
        }
      }
      let value = core.DateTime._brokenDownDateToValue(years, month, day, hour, minute, second, millisecond, microsecond, isUtc);
      if (value == null) {
        dart.throw(new core.FormatException.new("Time out of range", formattedString));
      }
      return new core.DateTime._withValue(value, {isUtc: isUtc});
    } else {
      dart.throw(new core.FormatException.new("Invalid date format", formattedString));
    }
  }
  static tryParse(formattedString) {
    if (formattedString == null) dart.nullFailed(L166, 347, 36, "formattedString");
    try {
      return core.DateTime.parse(formattedString);
    } catch (e) {
      let ex = dart.getThrown(e);
      if (core.FormatException.is(ex)) {
        return null;
      } else
        throw e;
    }
  }
  _equals(other) {
    if (other == null) return false;
    return core.DateTime.is(other) && this[_value$6] == other.millisecondsSinceEpoch && dart.equals(this.isUtc, other.isUtc);
  }
  isBefore(other) {
    if (other == null) dart.nullFailed(L7, 426, 26, "other");
    return dart.notNull(this[_value$6]) < dart.notNull(other.millisecondsSinceEpoch);
  }
  isAfter(other) {
    if (other == null) dart.nullFailed(L7, 429, 25, "other");
    return dart.notNull(this[_value$6]) > dart.notNull(other.millisecondsSinceEpoch);
  }
  isAtSameMomentAs(other) {
    if (other == null) dart.nullFailed(L7, 432, 34, "other");
    return this[_value$6] == other.millisecondsSinceEpoch;
  }
  compareTo(other) {
    if (other == null) dart.nullFailed(L7, 436, 26, "other");
    return this[_value$6][$compareTo](other.millisecondsSinceEpoch);
  }
  get hashCode() {
    return (dart.notNull(this[_value$6]) ^ this[_value$6][$rightShift](30)) & 1073741823;
  }
  toLocal() {
    if (dart.test(this.isUtc)) {
      return new core.DateTime._withValue(this[_value$6], {isUtc: false});
    }
    return this;
  }
  toUtc() {
    if (dart.test(this.isUtc)) return this;
    return new core.DateTime._withValue(this[_value$6], {isUtc: true});
  }
  static _fourDigits(n) {
    if (n == null) dart.nullFailed(L166, 529, 33, "n");
    let absN = n[$abs]();
    let sign = dart.notNull(n) < 0 ? "-" : "";
    if (absN >= 1000) return dart.str(n);
    if (absN >= 100) return dart.str(sign) + dart.str("0") + dart.str(absN);
    if (absN >= 10) return dart.str(sign) + dart.str("00") + dart.str(absN);
    return dart.str(sign) + dart.str("000") + dart.str(absN);
  }
  static _sixDigits(n) {
    if (n == null) dart.nullFailed(L166, 538, 32, "n");
    if (!(dart.notNull(n) < -9999 || dart.notNull(n) > 9999)) dart.assertFailed(null, L166, 539, 12, "n < -9999 || n > 9999");
    let absN = n[$abs]();
    let sign = dart.notNull(n) < 0 ? "-" : "+";
    if (absN >= 100000) return dart.str(sign) + dart.str(absN);
    return dart.str(sign) + dart.str("0") + dart.str(absN);
  }
  static _threeDigits(n) {
    if (n == null) dart.nullFailed(L166, 546, 34, "n");
    if (dart.notNull(n) >= 100) return dart.str(n);
    if (dart.notNull(n) >= 10) return dart.str("0") + dart.str(n);
    return dart.str("00") + dart.str(n);
  }
  static _twoDigits(n) {
    if (n == null) dart.nullFailed(L166, 552, 32, "n");
    if (dart.notNull(n) >= 10) return dart.str(n);
    return dart.str("0") + dart.str(n);
  }
  toString() {
    let y = core.DateTime._fourDigits(this.year);
    let m = core.DateTime._twoDigits(this.month);
    let d = core.DateTime._twoDigits(this.day);
    let h = core.DateTime._twoDigits(this.hour);
    let min = core.DateTime._twoDigits(this.minute);
    let sec = core.DateTime._twoDigits(this.second);
    let ms = core.DateTime._threeDigits(this.millisecond);
    let us = this.microsecond === 0 ? "" : core.DateTime._threeDigits(this.microsecond);
    if (dart.test(this.isUtc)) {
      return dart.str(y) + dart.str("-") + dart.str(m) + dart.str("-") + dart.str(d) + dart.str(" ") + dart.str(h) + dart.str(":") + dart.str(min) + dart.str(":") + dart.str(sec) + dart.str(".") + dart.str(ms) + dart.str(us) + dart.str("Z");
    } else {
      return dart.str(y) + dart.str("-") + dart.str(m) + dart.str("-") + dart.str(d) + dart.str(" ") + dart.str(h) + dart.str(":") + dart.str(min) + dart.str(":") + dart.str(sec) + dart.str(".") + dart.str(ms) + dart.str(us);
    }
  }
  toIso8601String() {
    let y = dart.notNull(this.year) >= -9999 && dart.notNull(this.year) <= 9999 ? core.DateTime._fourDigits(this.year) : core.DateTime._sixDigits(this.year);
    let m = core.DateTime._twoDigits(this.month);
    let d = core.DateTime._twoDigits(this.day);
    let h = core.DateTime._twoDigits(this.hour);
    let min = core.DateTime._twoDigits(this.minute);
    let sec = core.DateTime._twoDigits(this.second);
    let ms = core.DateTime._threeDigits(this.millisecond);
    let us = this.microsecond === 0 ? "" : core.DateTime._threeDigits(this.microsecond);
    if (dart.test(this.isUtc)) {
      return dart.str(y) + dart.str("-") + dart.str(m) + dart.str("-") + dart.str(d) + dart.str("T") + dart.str(h) + dart.str(":") + dart.str(min) + dart.str(":") + dart.str(sec) + dart.str(".") + dart.str(ms) + dart.str(us) + dart.str("Z");
    } else {
      return dart.str(y) + dart.str("-") + dart.str(m) + dart.str("-") + dart.str(d) + dart.str("T") + dart.str(h) + dart.str(":") + dart.str(min) + dart.str(":") + dart.str(sec) + dart.str(".") + dart.str(ms) + dart.str(us);
    }
  }
  add(duration) {
    if (duration == null) dart.nullFailed(L7, 372, 25, "duration");
    return new core.DateTime._withValue(dart.notNull(this[_value$6]) + dart.notNull(duration.inMilliseconds), {isUtc: this.isUtc});
  }
  subtract(duration) {
    if (duration == null) dart.nullFailed(L7, 377, 30, "duration");
    return new core.DateTime._withValue(dart.notNull(this[_value$6]) - dart.notNull(duration.inMilliseconds), {isUtc: this.isUtc});
  }
  difference(other) {
    if (other == null) dart.nullFailed(L7, 382, 32, "other");
    return new core.Duration.new({milliseconds: dart.notNull(this[_value$6]) - dart.notNull(other[_value$6])});
  }
  static _brokenDownDateToValue(year, month, day, hour, minute, second, millisecond, microsecond, isUtc) {
    if (year == null) dart.nullFailed(L7, 346, 42, "year");
    if (month == null) dart.nullFailed(L7, 346, 52, "month");
    if (day == null) dart.nullFailed(L7, 346, 63, "day");
    if (hour == null) dart.nullFailed(L7, 346, 72, "hour");
    if (minute == null) dart.nullFailed(L7, 347, 11, "minute");
    if (second == null) dart.nullFailed(L7, 347, 23, "second");
    if (millisecond == null) dart.nullFailed(L7, 347, 35, "millisecond");
    if (microsecond == null) dart.nullFailed(L7, 347, 52, "microsecond");
    if (isUtc == null) dart.nullFailed(L7, 347, 70, "isUtc");
    return _js_helper.Primitives.valueFromDecomposedDate(year, month, day, hour, minute, second, dart.notNull(millisecond) + dart.notNull(core.DateTime._microsecondInRoundedMilliseconds(microsecond)), isUtc);
  }
  get millisecondsSinceEpoch() {
    return this[_value$6];
  }
  get microsecondsSinceEpoch() {
    return dart.notNull(this[_value$6]) * 1000;
  }
  get timeZoneName() {
    if (dart.test(this.isUtc)) return "UTC";
    return _js_helper.Primitives.getTimeZoneName(this);
  }
  get timeZoneOffset() {
    if (dart.test(this.isUtc)) return core.Duration.zero;
    return new core.Duration.new({minutes: _js_helper.Primitives.getTimeZoneOffsetInMinutes(this)});
  }
  get year() {
    return _js_helper.Primitives.getYear(this);
  }
  get month() {
    return _js_helper.Primitives.getMonth(this);
  }
  get day() {
    return _js_helper.Primitives.getDay(this);
  }
  get hour() {
    return _js_helper.Primitives.getHours(this);
  }
  get minute() {
    return _js_helper.Primitives.getMinutes(this);
  }
  get second() {
    return _js_helper.Primitives.getSeconds(this);
  }
  get millisecond() {
    return _js_helper.Primitives.getMilliseconds(this);
  }
  get microsecond() {
    return 0;
  }
  get weekday() {
    return _js_helper.Primitives.getWeekday(this);
  }
};
(core.DateTime.new = function(year, month = 1, day = 1, hour = 0, minute = 0, second = 0, millisecond = 0, microsecond = 0) {
  if (year == null) dart.nullFailed(L166, 180, 16, "year");
  if (month == null) dart.nullFailed(L166, 181, 12, "month");
  if (day == null) dart.nullFailed(L166, 182, 11, "day");
  if (hour == null) dart.nullFailed(L166, 183, 11, "hour");
  if (minute == null) dart.nullFailed(L166, 184, 11, "minute");
  if (second == null) dart.nullFailed(L166, 185, 11, "second");
  if (millisecond == null) dart.nullFailed(L166, 186, 11, "millisecond");
  if (microsecond == null) dart.nullFailed(L166, 187, 11, "microsecond");
  core.DateTime._internal.call(this, year, month, day, hour, minute, second, millisecond, microsecond, false);
}).prototype = core.DateTime.prototype;
(core.DateTime.utc = function(year, month = 1, day = 1, hour = 0, minute = 0, second = 0, millisecond = 0, microsecond = 0) {
  if (year == null) dart.nullFailed(L166, 202, 20, "year");
  if (month == null) dart.nullFailed(L166, 203, 12, "month");
  if (day == null) dart.nullFailed(L166, 204, 11, "day");
  if (hour == null) dart.nullFailed(L166, 205, 11, "hour");
  if (minute == null) dart.nullFailed(L166, 206, 11, "minute");
  if (second == null) dart.nullFailed(L166, 207, 11, "second");
  if (millisecond == null) dart.nullFailed(L166, 208, 11, "millisecond");
  if (microsecond == null) dart.nullFailed(L166, 209, 11, "microsecond");
  core.DateTime._internal.call(this, year, month, day, hour, minute, second, millisecond, microsecond, true);
}).prototype = core.DateTime.prototype;
(core.DateTime.now = function() {
  core.DateTime._now.call(this);
}).prototype = core.DateTime.prototype;
(core.DateTime.fromMillisecondsSinceEpoch = function(millisecondsSinceEpoch, opts) {
  if (millisecondsSinceEpoch == null) dart.nullFailed(L7, 308, 43, "millisecondsSinceEpoch");
  let isUtc = opts && 'isUtc' in opts ? opts.isUtc : false;
  if (isUtc == null) dart.nullFailed(L7, 309, 13, "isUtc");
  core.DateTime._withValue.call(this, millisecondsSinceEpoch, {isUtc: isUtc});
}).prototype = core.DateTime.prototype;
(core.DateTime.fromMicrosecondsSinceEpoch = function(microsecondsSinceEpoch, opts) {
  if (microsecondsSinceEpoch == null) dart.nullFailed(L7, 313, 43, "microsecondsSinceEpoch");
  let isUtc = opts && 'isUtc' in opts ? opts.isUtc : false;
  if (isUtc == null) dart.nullFailed(L7, 314, 13, "isUtc");
  core.DateTime._withValue.call(this, core.DateTime._microsecondInRoundedMilliseconds(microsecondsSinceEpoch), {isUtc: isUtc});
}).prototype = core.DateTime.prototype;
(core.DateTime._withValue = function(_value, opts) {
  if (_value == null) dart.nullFailed(L166, 389, 28, "_value");
  let isUtc = opts && 'isUtc' in opts ? opts.isUtc : null;
  if (isUtc == null) dart.nullFailed(L166, 389, 51, "isUtc");
  this[_value$6] = _value;
  this[isUtc$] = isUtc;
  if (this.millisecondsSinceEpoch[$abs]() > 8640000000000000.0 || this.millisecondsSinceEpoch[$abs]() === 8640000000000000.0 && this.microsecond !== 0) {
    dart.throw(new core.ArgumentError.new(dart.str("DateTime is outside valid range: ") + dart.str(this.millisecondsSinceEpoch)));
  }
  core.ArgumentError.checkNotNull(core.bool, this.isUtc, "isUtc");
}).prototype = core.DateTime.prototype;
(core.DateTime._internal = function(year, month, day, hour, minute, second, millisecond, microsecond, isUtc) {
  if (year == null) dart.nullFailed(L7, 320, 26, "year");
  if (month == null) dart.nullFailed(L7, 320, 36, "month");
  if (day == null) dart.nullFailed(L7, 320, 47, "day");
  if (hour == null) dart.nullFailed(L7, 320, 56, "hour");
  if (minute == null) dart.nullFailed(L7, 320, 66, "minute");
  if (second == null) dart.nullFailed(L7, 321, 11, "second");
  if (millisecond == null) dart.nullFailed(L7, 321, 23, "millisecond");
  if (microsecond == null) dart.nullFailed(L7, 321, 40, "microsecond");
  if (isUtc == null) dart.nullFailed(L7, 321, 58, "isUtc");
  this[isUtc$] = isUtc;
  this[_value$6] = core.int.as(_js_helper.checkInt(_js_helper.Primitives.valueFromDecomposedDate(year, month, day, hour, minute, second, dart.notNull(millisecond) + dart.notNull(core.DateTime._microsecondInRoundedMilliseconds(microsecond)), isUtc)));
  ;
}).prototype = core.DateTime.prototype;
(core.DateTime._now = function() {
  this[isUtc$] = false;
  this[_value$6] = _js_helper.Primitives.dateNow();
  ;
}).prototype = core.DateTime.prototype;
dart.addTypeTests(core.DateTime);
dart.addTypeCaches(core.DateTime);
core.DateTime[dart.implements] = () => [core.Comparable$(core.DateTime)];
dart.setMethodSignature(core.DateTime, () => ({
  __proto__: dart.getMethods(core.DateTime.__proto__),
  isBefore: dart.fnType(core.bool, [core.DateTime]),
  isAfter: dart.fnType(core.bool, [core.DateTime]),
  isAtSameMomentAs: dart.fnType(core.bool, [core.DateTime]),
  compareTo: dart.fnType(core.int, [core.DateTime]),
  [$compareTo]: dart.fnType(core.int, [core.DateTime]),
  toLocal: dart.fnType(core.DateTime, []),
  toUtc: dart.fnType(core.DateTime, []),
  toIso8601String: dart.fnType(core.String, []),
  add: dart.fnType(core.DateTime, [core.Duration]),
  subtract: dart.fnType(core.DateTime, [core.Duration]),
  difference: dart.fnType(core.Duration, [core.DateTime])
}));
dart.setGetterSignature(core.DateTime, () => ({
  __proto__: dart.getGetters(core.DateTime.__proto__),
  millisecondsSinceEpoch: core.int,
  microsecondsSinceEpoch: core.int,
  timeZoneName: core.String,
  timeZoneOffset: core.Duration,
  year: core.int,
  month: core.int,
  day: core.int,
  hour: core.int,
  minute: core.int,
  second: core.int,
  millisecond: core.int,
  microsecond: core.int,
  weekday: core.int
}));
dart.setLibraryUri(core.DateTime, L8$);
dart.setFieldSignature(core.DateTime, () => ({
  __proto__: dart.getFields(core.DateTime.__proto__),
  [_value$6]: dart.finalFieldType(core.int),
  isUtc: dart.finalFieldType(core.bool)
}));
dart.defineExtensionMethods(core.DateTime, ['_equals', 'compareTo', 'toString']);
dart.defineExtensionAccessors(core.DateTime, ['hashCode']);
dart.defineLazy(core.DateTime, {
  /*core.DateTime.monday*/get monday() {
    return 1;
  },
  /*core.DateTime.tuesday*/get tuesday() {
    return 2;
  },
  /*core.DateTime.wednesday*/get wednesday() {
    return 3;
  },
  /*core.DateTime.thursday*/get thursday() {
    return 4;
  },
  /*core.DateTime.friday*/get friday() {
    return 5;
  },
  /*core.DateTime.saturday*/get saturday() {
    return 6;
  },
  /*core.DateTime.sunday*/get sunday() {
    return 7;
  },
  /*core.DateTime.daysPerWeek*/get daysPerWeek() {
    return 7;
  },
  /*core.DateTime.january*/get january() {
    return 1;
  },
  /*core.DateTime.february*/get february() {
    return 2;
  },
  /*core.DateTime.march*/get march() {
    return 3;
  },
  /*core.DateTime.april*/get april() {
    return 4;
  },
  /*core.DateTime.may*/get may() {
    return 5;
  },
  /*core.DateTime.june*/get june() {
    return 6;
  },
  /*core.DateTime.july*/get july() {
    return 7;
  },
  /*core.DateTime.august*/get august() {
    return 8;
  },
  /*core.DateTime.september*/get september() {
    return 9;
  },
  /*core.DateTime.october*/get october() {
    return 10;
  },
  /*core.DateTime.november*/get november() {
    return 11;
  },
  /*core.DateTime.december*/get december() {
    return 12;
  },
  /*core.DateTime.monthsPerYear*/get monthsPerYear() {
    return 12;
  },
  /*core.DateTime._maxMillisecondsSinceEpoch*/get _maxMillisecondsSinceEpoch() {
    return 8640000000000000.0;
  },
  /*core.DateTime._parseFormat*/get _parseFormat() {
    return core.RegExp.new(dart.str("^([+-]?\\d{4,6})-?(\\d\\d)-?(\\d\\d)") + dart.str("(?:[ T](\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:[.,](\\d+))?)?)?") + dart.str("( ?[zZ]| ?([-+])(\\d\\d)(?::?(\\d\\d))?)?)?$"));
  }
}, false);
var _duration = dart.privateName(core, "_duration");
var _duration$ = dart.privateName(core, "Duration._duration");
var C418;
core.Duration = class Duration extends core.Object {
  get [_duration]() {
    return this[_duration$];
  }
  set [_duration](value) {
    super[_duration] = value;
  }
  ['+'](other) {
    if (other == null) dart.nullFailed(L167, 115, 32, "other");
    return new core.Duration._microseconds(dart.notNull(this[_duration]) + dart.notNull(other[_duration]));
  }
  ['-'](other) {
    if (other == null) dart.nullFailed(L167, 123, 32, "other");
    return new core.Duration._microseconds(dart.notNull(this[_duration]) - dart.notNull(other[_duration]));
  }
  ['*'](factor) {
    if (factor == null) dart.nullFailed(L167, 134, 27, "factor");
    return new core.Duration._microseconds((dart.notNull(this[_duration]) * dart.notNull(factor))[$round]());
  }
  ['~/'](quotient) {
    if (quotient == null) dart.nullFailed(L167, 144, 28, "quotient");
    if (quotient === 0) dart.throw(new core.IntegerDivisionByZeroException.new());
    return new core.Duration._microseconds((dart.notNull(this[_duration]) / dart.notNull(quotient))[$truncate]());
  }
  ['<'](other) {
    if (other == null) dart.nullFailed(L167, 155, 28, "other");
    return dart.notNull(this[_duration]) < dart.notNull(other[_duration]);
  }
  ['>'](other) {
    if (other == null) dart.nullFailed(L167, 161, 28, "other");
    return dart.notNull(this[_duration]) > dart.notNull(other[_duration]);
  }
  ['<='](other) {
    if (other == null) dart.nullFailed(L167, 167, 29, "other");
    return dart.notNull(this[_duration]) <= dart.notNull(other[_duration]);
  }
  ['>='](other) {
    if (other == null) dart.nullFailed(L167, 173, 29, "other");
    return dart.notNull(this[_duration]) >= dart.notNull(other[_duration]);
  }
  get inDays() {
    return (dart.notNull(this[_duration]) / 86400000000.0)[$truncate]();
  }
  get inHours() {
    return (dart.notNull(this[_duration]) / 3600000000.0)[$truncate]();
  }
  get inMinutes() {
    return (dart.notNull(this[_duration]) / 60000000)[$truncate]();
  }
  get inSeconds() {
    return (dart.notNull(this[_duration]) / 1000000)[$truncate]();
  }
  get inMilliseconds() {
    return (dart.notNull(this[_duration]) / 1000)[$truncate]();
  }
  get inMicroseconds() {
    return this[_duration];
  }
  _equals(other) {
    if (other == null) return false;
    return core.Duration.is(other) && this[_duration] == other.inMicroseconds;
  }
  get hashCode() {
    return dart.hashCode(this[_duration]);
  }
  compareTo(other) {
    core.Duration.as(other);
    if (other == null) dart.nullFailed(L167, 232, 26, "other");
    return this[_duration][$compareTo](other[_duration]);
  }
  toString() {
    function sixDigits(n) {
      if (n == null) dart.nullFailed(L167, 247, 26, "n");
      if (dart.notNull(n) >= 100000) return dart.str(n);
      if (dart.notNull(n) >= 10000) return dart.str("0") + dart.str(n);
      if (dart.notNull(n) >= 1000) return dart.str("00") + dart.str(n);
      if (dart.notNull(n) >= 100) return dart.str("000") + dart.str(n);
      if (dart.notNull(n) >= 10) return dart.str("0000") + dart.str(n);
      return dart.str("00000") + dart.str(n);
    }
    dart.fn(sixDigits, intToString());
    function twoDigits(n) {
      if (n == null) dart.nullFailed(L167, 256, 26, "n");
      if (dart.notNull(n) >= 10) return dart.str(n);
      return dart.str("0") + dart.str(n);
    }
    dart.fn(twoDigits, intToString());
    if (dart.notNull(this.inMicroseconds) < 0) {
      return dart.str("-") + dart.str(this._negate());
    }
    let twoDigitMinutes = twoDigits(this.inMinutes[$remainder](60));
    let twoDigitSeconds = twoDigits(this.inSeconds[$remainder](60));
    let sixDigitUs = sixDigits(this.inMicroseconds[$remainder](1000000));
    return dart.str(this.inHours) + dart.str(":") + dart.str(twoDigitMinutes) + dart.str(":") + dart.str(twoDigitSeconds) + dart.str(".") + dart.str(sixDigitUs);
  }
  get isNegative() {
    return dart.notNull(this[_duration]) < 0;
  }
  abs() {
    return new core.Duration._microseconds(this[_duration][$abs]());
  }
  _negate() {
    return new core.Duration._microseconds(0 - dart.notNull(this[_duration]));
  }
};
(core.Duration.new = function(opts) {
  let days = opts && 'days' in opts ? opts.days : 0;
  if (days == null) dart.nullFailed(L167, 94, 12, "days");
  let hours = opts && 'hours' in opts ? opts.hours : 0;
  if (hours == null) dart.nullFailed(L167, 95, 11, "hours");
  let minutes = opts && 'minutes' in opts ? opts.minutes : 0;
  if (minutes == null) dart.nullFailed(L167, 96, 11, "minutes");
  let seconds = opts && 'seconds' in opts ? opts.seconds : 0;
  if (seconds == null) dart.nullFailed(L167, 97, 11, "seconds");
  let milliseconds = opts && 'milliseconds' in opts ? opts.milliseconds : 0;
  if (milliseconds == null) dart.nullFailed(L167, 98, 11, "milliseconds");
  let microseconds = opts && 'microseconds' in opts ? opts.microseconds : 0;
  if (microseconds == null) dart.nullFailed(L167, 99, 11, "microseconds");
  core.Duration._microseconds.call(this, 86400000000.0 * dart.notNull(days) + 3600000000.0 * dart.notNull(hours) + 60000000 * dart.notNull(minutes) + 1000000 * dart.notNull(seconds) + 1000 * dart.notNull(milliseconds) + dart.notNull(microseconds));
}).prototype = core.Duration.prototype;
(core.Duration._microseconds = function(_duration) {
  if (_duration == null) dart.nullFailed(L167, 109, 37, "_duration");
  this[_duration$] = _duration;
  ;
}).prototype = core.Duration.prototype;
dart.addTypeTests(core.Duration);
dart.addTypeCaches(core.Duration);
core.Duration[dart.implements] = () => [core.Comparable$(core.Duration)];
dart.setMethodSignature(core.Duration, () => ({
  __proto__: dart.getMethods(core.Duration.__proto__),
  '+': dart.fnType(core.Duration, [core.Duration]),
  '-': dart.fnType(core.Duration, [core.Duration]),
  '*': dart.fnType(core.Duration, [core.num]),
  '~/': dart.fnType(core.Duration, [core.int]),
  '<': dart.fnType(core.bool, [core.Duration]),
  '>': dart.fnType(core.bool, [core.Duration]),
  '<=': dart.fnType(core.bool, [core.Duration]),
  '>=': dart.fnType(core.bool, [core.Duration]),
  compareTo: dart.fnType(core.int, [dart.nullable(core.Object)]),
  [$compareTo]: dart.fnType(core.int, [dart.nullable(core.Object)]),
  abs: dart.fnType(core.Duration, []),
  _negate: dart.fnType(core.Duration, [])
}));
dart.setGetterSignature(core.Duration, () => ({
  __proto__: dart.getGetters(core.Duration.__proto__),
  inDays: core.int,
  inHours: core.int,
  inMinutes: core.int,
  inSeconds: core.int,
  inMilliseconds: core.int,
  inMicroseconds: core.int,
  isNegative: core.bool
}));
dart.setLibraryUri(core.Duration, L8$);
dart.setFieldSignature(core.Duration, () => ({
  __proto__: dart.getFields(core.Duration.__proto__),
  [_duration]: dart.finalFieldType(core.int)
}));
dart.defineExtensionMethods(core.Duration, ['_equals', 'compareTo', 'toString']);
dart.defineExtensionAccessors(core.Duration, ['hashCode']);
dart.defineLazy(core.Duration, {
  /*core.Duration.microsecondsPerMillisecond*/get microsecondsPerMillisecond() {
    return 1000;
  },
  /*core.Duration.millisecondsPerSecond*/get millisecondsPerSecond() {
    return 1000;
  },
  /*core.Duration.secondsPerMinute*/get secondsPerMinute() {
    return 60;
  },
  /*core.Duration.minutesPerHour*/get minutesPerHour() {
    return 60;
  },
  /*core.Duration.hoursPerDay*/get hoursPerDay() {
    return 24;
  },
  /*core.Duration.microsecondsPerSecond*/get microsecondsPerSecond() {
    return 1000000;
  },
  /*core.Duration.microsecondsPerMinute*/get microsecondsPerMinute() {
    return 60000000;
  },
  /*core.Duration.microsecondsPerHour*/get microsecondsPerHour() {
    return 3600000000.0;
  },
  /*core.Duration.microsecondsPerDay*/get microsecondsPerDay() {
    return 86400000000.0;
  },
  /*core.Duration.millisecondsPerMinute*/get millisecondsPerMinute() {
    return 60000;
  },
  /*core.Duration.millisecondsPerHour*/get millisecondsPerHour() {
    return 3600000;
  },
  /*core.Duration.millisecondsPerDay*/get millisecondsPerDay() {
    return 86400000;
  },
  /*core.Duration.secondsPerHour*/get secondsPerHour() {
    return 3600;
  },
  /*core.Duration.secondsPerDay*/get secondsPerDay() {
    return 86400;
  },
  /*core.Duration.minutesPerDay*/get minutesPerDay() {
    return 1440;
  },
  /*core.Duration.zero*/get zero() {
    return C418 || CT.C418;
  }
}, false);
core.TypeError = class TypeError extends core.Error {};
(core.TypeError.new = function() {
  core.TypeError.__proto__.new.call(this);
  ;
}).prototype = core.TypeError.prototype;
dart.addTypeTests(core.TypeError);
dart.addTypeCaches(core.TypeError);
dart.setLibraryUri(core.TypeError, L8$);
core.CastError = class CastError extends core.Error {};
(core.CastError.new = function() {
  core.CastError.__proto__.new.call(this);
  ;
}).prototype = core.CastError.prototype;
dart.addTypeTests(core.CastError);
dart.addTypeCaches(core.CastError);
dart.setLibraryUri(core.CastError, L8$);
core.NullThrownError = class NullThrownError extends core.Error {
  toString() {
    return "Throw of null.";
  }
};
(core.NullThrownError.new = function() {
  core.NullThrownError.__proto__.new.call(this);
  ;
}).prototype = core.NullThrownError.prototype;
dart.addTypeTests(core.NullThrownError);
dart.addTypeCaches(core.NullThrownError);
dart.setLibraryUri(core.NullThrownError, L8$);
dart.defineExtensionMethods(core.NullThrownError, ['toString']);
var invalidValue = dart.privateName(core, "ArgumentError.invalidValue");
var name$13 = dart.privateName(core, "ArgumentError.name");
var message$12 = dart.privateName(core, "ArgumentError.message");
core.ArgumentError = class ArgumentError extends core.Error {
  get invalidValue() {
    return this[invalidValue];
  }
  set invalidValue(value) {
    super.invalidValue = value;
  }
  get name() {
    return this[name$13];
  }
  set name(value) {
    super.name = value;
  }
  get message() {
    return this[message$12];
  }
  set message(value) {
    super.message = value;
  }
  static checkNotNull(T, argument, name = null) {
    if (argument == null) dart.throw(new core.ArgumentError.notNull(name));
    return argument;
  }
  get [_errorName$]() {
    return dart.str("Invalid argument") + dart.str(!dart.test(this[_hasValue$]) ? "(s)" : "");
  }
  get [_errorExplanation$]() {
    return "";
  }
  toString() {
    let name = this[$name];
    let nameString = name == null ? "" : dart.str(" (") + dart.str(name) + dart.str(")");
    let message = this[$message];
    let messageString = message == null ? "" : dart.str(": ") + dart.str(message);
    let prefix = dart.str(this[_errorName$]) + dart.str(nameString) + dart.str(messageString);
    if (!dart.test(this[_hasValue$])) return prefix;
    let explanation = this[_errorExplanation$];
    let errorValue = core.Error.safeToString(this[$invalidValue]);
    return dart.str(prefix) + dart.str(explanation) + dart.str(": ") + dart.str(errorValue);
  }
};
(core.ArgumentError.new = function(message = null) {
  this[message$12] = message;
  this[invalidValue] = null;
  this[_hasValue$] = false;
  this[name$13] = null;
  core.ArgumentError.__proto__.new.call(this);
  ;
}).prototype = core.ArgumentError.prototype;
(core.ArgumentError.value = function(value, name = null, message = null) {
  this[name$13] = name;
  this[message$12] = message;
  this[invalidValue] = value;
  this[_hasValue$] = true;
  core.ArgumentError.__proto__.new.call(this);
  ;
}).prototype = core.ArgumentError.prototype;
(core.ArgumentError.notNull = function(name = null) {
  this[name$13] = name;
  this[_hasValue$] = false;
  this[message$12] = "Must not be null";
  this[invalidValue] = null;
  core.ArgumentError.__proto__.new.call(this);
  ;
}).prototype = core.ArgumentError.prototype;
dart.addTypeTests(core.ArgumentError);
dart.addTypeCaches(core.ArgumentError);
dart.setGetterSignature(core.ArgumentError, () => ({
  __proto__: dart.getGetters(core.ArgumentError.__proto__),
  [_errorName$]: core.String,
  [_errorExplanation$]: core.String
}));
dart.setLibraryUri(core.ArgumentError, L8$);
dart.setFieldSignature(core.ArgumentError, () => ({
  __proto__: dart.getFields(core.ArgumentError.__proto__),
  [_hasValue$]: dart.finalFieldType(core.bool),
  invalidValue: dart.finalFieldType(dart.dynamic),
  name: dart.finalFieldType(dart.nullable(core.String)),
  message: dart.finalFieldType(dart.dynamic)
}));
dart.defineExtensionMethods(core.ArgumentError, ['toString']);
dart.defineExtensionAccessors(core.ArgumentError, ['invalidValue', 'name', 'message']);
var start = dart.privateName(core, "RangeError.start");
var end = dart.privateName(core, "RangeError.end");
core.RangeError = class RangeError extends core.ArgumentError {
  get start() {
    return this[start];
  }
  set start(value) {
    super.start = value;
  }
  get end() {
    return this[end];
  }
  set end(value) {
    super.end = value;
  }
  static checkValueInInterval(value, minValue, maxValue, name = null, message = null) {
    if (value == null) dart.nullFailed(L168, 294, 39, "value");
    if (minValue == null) dart.nullFailed(L168, 294, 50, "minValue");
    if (maxValue == null) dart.nullFailed(L168, 294, 64, "maxValue");
    if (dart.notNull(value) < dart.notNull(minValue) || dart.notNull(value) > dart.notNull(maxValue)) {
      dart.throw(new core.RangeError.range(value, minValue, maxValue, name, message));
    }
    return value;
  }
  static checkValidIndex(index, indexable, name = null, length = null, message = null) {
    if (index == null) dart.nullFailed(L168, 319, 34, "index");
    length == null ? length = core.int.as(dart.dload(indexable, 'length')) : null;
    if (0 > dart.notNull(index) || dart.notNull(index) >= dart.notNull(length)) {
      name == null ? name = "index" : null;
      dart.throw(new core.IndexError.new(index, indexable, name, message, length));
    }
    return index;
  }
  static checkValidRange(start, end, length, startName = null, endName = null, message = null) {
    if (start == null) dart.nullFailed(L168, 346, 34, "start");
    if (length == null) dart.nullFailed(L168, 346, 55, "length");
    if (0 > dart.notNull(start) || dart.notNull(start) > dart.notNull(length)) {
      startName == null ? startName = "start" : null;
      dart.throw(new core.RangeError.range(start, 0, length, startName, message));
    }
    if (end != null) {
      if (dart.notNull(start) > dart.notNull(end) || dart.notNull(end) > dart.notNull(length)) {
        endName == null ? endName = "end" : null;
        dart.throw(new core.RangeError.range(end, start, length, endName, message));
      }
      return end;
    }
    return length;
  }
  static checkNotNegative(value, name = null, message = null) {
    if (value == null) dart.nullFailed(L168, 375, 35, "value");
    if (dart.notNull(value) < 0) dart.throw(new core.RangeError.range(value, 0, null, name, message));
    return value;
  }
  get [_errorName$]() {
    return "RangeError";
  }
  get [_errorExplanation$]() {
    if (!dart.test(this[_hasValue$])) dart.assertFailed(null, L168, 382, 12, "_hasValue");
    let explanation = "";
    let start = this.start;
    let end = this.end;
    if (start == null) {
      if (end != null) {
        explanation = dart.str(": Not less than or equal to ") + dart.str(end);
      }
    } else if (end == null) {
      explanation = dart.str(": Not greater than or equal to ") + dart.str(start);
    } else if (dart.notNull(end) > dart.notNull(start)) {
      explanation = dart.str(": Not in inclusive range ") + dart.str(start) + dart.str("..") + dart.str(end);
    } else if (dart.notNull(end) < dart.notNull(start)) {
      explanation = ": Valid value range is empty";
    } else {
      explanation = dart.str(": Only valid value is ") + dart.str(start);
    }
    return explanation;
  }
};
(core.RangeError.new = function(message) {
  this[start] = null;
  this[end] = null;
  core.RangeError.__proto__.new.call(this, message);
  ;
}).prototype = core.RangeError.prototype;
(core.RangeError.value = function(value, name = null, message = null) {
  let t232;
  if (value == null) dart.nullFailed(L168, 243, 24, "value");
  this[start] = null;
  this[end] = null;
  core.RangeError.__proto__.value.call(this, value, name, (t232 = message, t232 == null ? "Value not in range" : t232));
  ;
}).prototype = core.RangeError.prototype;
(core.RangeError.range = function(invalidValue, minValue, maxValue, name = null, message = null) {
  let t232;
  if (invalidValue == null) dart.nullFailed(L168, 263, 24, "invalidValue");
  this[start] = minValue;
  this[end] = maxValue;
  core.RangeError.__proto__.value.call(this, invalidValue, name, (t232 = message, t232 == null ? "Invalid value" : t232));
  ;
}).prototype = core.RangeError.prototype;
dart.addTypeTests(core.RangeError);
dart.addTypeCaches(core.RangeError);
dart.setLibraryUri(core.RangeError, L8$);
dart.setFieldSignature(core.RangeError, () => ({
  __proto__: dart.getFields(core.RangeError.__proto__),
  start: dart.finalFieldType(dart.nullable(core.num)),
  end: dart.finalFieldType(dart.nullable(core.num))
}));
var indexable$ = dart.privateName(core, "IndexError.indexable");
var length$ = dart.privateName(core, "IndexError.length");
core.IndexError = class IndexError extends core.ArgumentError {
  get indexable() {
    return this[indexable$];
  }
  set indexable(value) {
    super.indexable = value;
  }
  get length() {
    return this[length$];
  }
  set length(value) {
    super.length = value;
  }
  get start() {
    return 0;
  }
  get end() {
    return dart.notNull(this.length) - 1;
  }
  get [_errorName$]() {
    return "RangeError";
  }
  get [_errorExplanation$]() {
    if (!dart.test(this[_hasValue$])) dart.assertFailed(null, L168, 439, 12, "_hasValue");
    let invalidValue = core.int.as(this[$invalidValue]);
    if (dart.notNull(invalidValue) < 0) {
      return ": index must not be negative";
    }
    if (this.length === 0) {
      return ": no indices are valid";
    }
    return dart.str(": index should be less than ") + dart.str(this.length);
  }
};
(core.IndexError.new = function(invalidValue, indexable, name = null, message = null, length = null) {
  let t232, t232$;
  if (invalidValue == null) dart.nullFailed(L168, 427, 18, "invalidValue");
  this[indexable$] = indexable;
  this[length$] = core.int.as((t232 = length, t232 == null ? dart.dload(indexable, 'length') : t232));
  core.IndexError.__proto__.value.call(this, invalidValue, name, (t232$ = message, t232$ == null ? "Index out of range" : t232$));
  ;
}).prototype = core.IndexError.prototype;
dart.addTypeTests(core.IndexError);
dart.addTypeCaches(core.IndexError);
core.IndexError[dart.implements] = () => [core.RangeError];
dart.setGetterSignature(core.IndexError, () => ({
  __proto__: dart.getGetters(core.IndexError.__proto__),
  start: core.int,
  end: core.int
}));
dart.setLibraryUri(core.IndexError, L8$);
dart.setFieldSignature(core.IndexError, () => ({
  __proto__: dart.getFields(core.IndexError.__proto__),
  indexable: dart.finalFieldType(dart.dynamic),
  length: dart.finalFieldType(core.int)
}));
var _className = dart.privateName(core, "_className");
core.AbstractClassInstantiationError = class AbstractClassInstantiationError extends core.Error {
  toString() {
    return dart.str("Cannot instantiate abstract class: '") + dart.str(this[_className]) + dart.str("'");
  }
};
(core.AbstractClassInstantiationError.new = function(className) {
  if (className == null) dart.nullFailed(L168, 472, 42, "className");
  this[_className] = className;
  core.AbstractClassInstantiationError.__proto__.new.call(this);
  ;
}).prototype = core.AbstractClassInstantiationError.prototype;
dart.addTypeTests(core.AbstractClassInstantiationError);
dart.addTypeCaches(core.AbstractClassInstantiationError);
dart.setLibraryUri(core.AbstractClassInstantiationError, L8$);
dart.setFieldSignature(core.AbstractClassInstantiationError, () => ({
  __proto__: dart.getFields(core.AbstractClassInstantiationError.__proto__),
  [_className]: dart.finalFieldType(core.String)
}));
dart.defineExtensionMethods(core.AbstractClassInstantiationError, ['toString']);
core.NoSuchMethodError = class NoSuchMethodError extends core.Error {
  toString() {
    let sb = new core.StringBuffer.new("");
    let comma = "";
    let $arguments = this[_arguments$];
    if ($arguments != null) {
      for (let argument of $arguments) {
        sb.write(comma);
        sb.write(core.Error.safeToString(argument));
        comma = ", ";
      }
    }
    let namedArguments = this[_namedArguments$];
    if (namedArguments != null) {
      namedArguments[$forEach](dart.fn((key, value) => {
        if (key == null) dart.nullFailed(L7, 807, 38, "key");
        sb.write(comma);
        sb.write(core._symbolToString(key));
        sb.write(": ");
        sb.write(core.Error.safeToString(value));
        comma = ", ";
      }, SymbolAnddynamicToNullN()));
    }
    let memberName = core._symbolToString(this[_memberName$]);
    let receiverText = core.Error.safeToString(this[_receiver$]);
    let actualParameters = dart.str(sb);
    let invocation = this[_invocation$];
    let failureMessage = dart.InvocationImpl.is(invocation) ? invocation.failureMessage : "method not found";
    return dart.str("NoSuchMethodError: '") + dart.str(memberName) + dart.str("'\n") + dart.str(failureMessage) + dart.str("\n") + dart.str("Receiver: ") + dart.str(receiverText) + dart.str("\n") + dart.str("Arguments: [") + dart.str(actualParameters) + dart.str("]");
  }
};
(core.NoSuchMethodError.withInvocation = function(receiver, invocation) {
  if (invocation == null) dart.nullFailed(L7, 786, 65, "invocation");
  this[_receiver$] = receiver;
  this[_memberName$] = invocation.memberName;
  this[_arguments$] = invocation.positionalArguments;
  this[_namedArguments$] = invocation.namedArguments;
  this[_invocation$] = invocation;
  core.NoSuchMethodError.__proto__.new.call(this);
  ;
}).prototype = core.NoSuchMethodError.prototype;
(core.NoSuchMethodError.new = function(receiver, memberName, positionalArguments, namedArguments) {
  if (memberName == null) dart.nullFailed(L7, 777, 46, "memberName");
  this[_receiver$] = receiver;
  this[_memberName$] = memberName;
  this[_arguments$] = positionalArguments;
  this[_namedArguments$] = namedArguments;
  this[_invocation$] = null;
  core.NoSuchMethodError.__proto__.new.call(this);
  ;
}).prototype = core.NoSuchMethodError.prototype;
dart.addTypeTests(core.NoSuchMethodError);
dart.addTypeCaches(core.NoSuchMethodError);
dart.setLibraryUri(core.NoSuchMethodError, L8$);
dart.setFieldSignature(core.NoSuchMethodError, () => ({
  __proto__: dart.getFields(core.NoSuchMethodError.__proto__),
  [_receiver$]: dart.finalFieldType(dart.nullable(core.Object)),
  [_memberName$]: dart.finalFieldType(core.Symbol),
  [_arguments$]: dart.finalFieldType(dart.nullable(core.List)),
  [_namedArguments$]: dart.finalFieldType(dart.nullable(core.Map$(core.Symbol, dart.dynamic))),
  [_invocation$]: dart.finalFieldType(dart.nullable(core.Invocation))
}));
dart.defineExtensionMethods(core.NoSuchMethodError, ['toString']);
var message$13 = dart.privateName(core, "UnsupportedError.message");
core.UnsupportedError = class UnsupportedError extends core.Error {
  get message() {
    return this[message$13];
  }
  set message(value) {
    super.message = value;
  }
  toString() {
    return dart.str("Unsupported operation: ") + dart.str(this.message);
  }
};
(core.UnsupportedError.new = function(message) {
  if (message == null) dart.nullFailed(L168, 534, 32, "message");
  this[message$13] = message;
  core.UnsupportedError.__proto__.new.call(this);
  ;
}).prototype = core.UnsupportedError.prototype;
dart.addTypeTests(core.UnsupportedError);
dart.addTypeCaches(core.UnsupportedError);
dart.setLibraryUri(core.UnsupportedError, L8$);
dart.setFieldSignature(core.UnsupportedError, () => ({
  __proto__: dart.getFields(core.UnsupportedError.__proto__),
  message: dart.finalFieldType(dart.nullable(core.String))
}));
dart.defineExtensionMethods(core.UnsupportedError, ['toString']);
var message$14 = dart.privateName(core, "UnimplementedError.message");
core.UnimplementedError = class UnimplementedError extends core.Error {
  get message() {
    return this[message$14];
  }
  set message(value) {
    super.message = value;
  }
  toString() {
    let message = this.message;
    return message != null ? dart.str("UnimplementedError: ") + dart.str(message) : "UnimplementedError";
  }
};
(core.UnimplementedError.new = function(message = null) {
  this[message$14] = message;
  core.UnimplementedError.__proto__.new.call(this);
  ;
}).prototype = core.UnimplementedError.prototype;
dart.addTypeTests(core.UnimplementedError);
dart.addTypeCaches(core.UnimplementedError);
core.UnimplementedError[dart.implements] = () => [core.UnsupportedError];
dart.setLibraryUri(core.UnimplementedError, L8$);
dart.setFieldSignature(core.UnimplementedError, () => ({
  __proto__: dart.getFields(core.UnimplementedError.__proto__),
  message: dart.finalFieldType(dart.nullable(core.String))
}));
dart.defineExtensionMethods(core.UnimplementedError, ['toString']);
var message$15 = dart.privateName(core, "StateError.message");
core.StateError = class StateError extends core.Error {
  get message() {
    return this[message$15];
  }
  set message(value) {
    super.message = value;
  }
  toString() {
    return dart.str("Bad state: ") + dart.str(this.message);
  }
};
(core.StateError.new = function(message) {
  if (message == null) dart.nullFailed(L168, 567, 19, "message");
  this[message$15] = message;
  core.StateError.__proto__.new.call(this);
  ;
}).prototype = core.StateError.prototype;
dart.addTypeTests(core.StateError);
dart.addTypeCaches(core.StateError);
dart.setLibraryUri(core.StateError, L8$);
dart.setFieldSignature(core.StateError, () => ({
  __proto__: dart.getFields(core.StateError.__proto__),
  message: dart.finalFieldType(core.String)
}));
dart.defineExtensionMethods(core.StateError, ['toString']);
var modifiedObject$ = dart.privateName(core, "ConcurrentModificationError.modifiedObject");
core.ConcurrentModificationError = class ConcurrentModificationError extends core.Error {
  get modifiedObject() {
    return this[modifiedObject$];
  }
  set modifiedObject(value) {
    super.modifiedObject = value;
  }
  toString() {
    if (this.modifiedObject == null) {
      return "Concurrent modification during iteration.";
    }
    return dart.str("Concurrent modification during iteration: ") + dart.str(core.Error.safeToString(this.modifiedObject)) + dart.str(".");
  }
};
(core.ConcurrentModificationError.new = function(modifiedObject = null) {
  this[modifiedObject$] = modifiedObject;
  core.ConcurrentModificationError.__proto__.new.call(this);
  ;
}).prototype = core.ConcurrentModificationError.prototype;
dart.addTypeTests(core.ConcurrentModificationError);
dart.addTypeCaches(core.ConcurrentModificationError);
dart.setLibraryUri(core.ConcurrentModificationError, L8$);
dart.setFieldSignature(core.ConcurrentModificationError, () => ({
  __proto__: dart.getFields(core.ConcurrentModificationError.__proto__),
  modifiedObject: dart.finalFieldType(dart.nullable(core.Object))
}));
dart.defineExtensionMethods(core.ConcurrentModificationError, ['toString']);
core.OutOfMemoryError = class OutOfMemoryError extends core.Object {
  toString() {
    return "Out of Memory";
  }
  get stackTrace() {
    return null;
  }
};
(core.OutOfMemoryError.new = function() {
  ;
}).prototype = core.OutOfMemoryError.prototype;
dart.addTypeTests(core.OutOfMemoryError);
dart.addTypeCaches(core.OutOfMemoryError);
core.OutOfMemoryError[dart.implements] = () => [core.Error];
dart.setGetterSignature(core.OutOfMemoryError, () => ({
  __proto__: dart.getGetters(core.OutOfMemoryError.__proto__),
  stackTrace: dart.nullable(core.StackTrace),
  [$stackTrace]: dart.nullable(core.StackTrace)
}));
dart.setLibraryUri(core.OutOfMemoryError, L8$);
dart.defineExtensionMethods(core.OutOfMemoryError, ['toString']);
dart.defineExtensionAccessors(core.OutOfMemoryError, ['stackTrace']);
core.StackOverflowError = class StackOverflowError extends core.Object {
  toString() {
    return "Stack Overflow";
  }
  get stackTrace() {
    return null;
  }
};
(core.StackOverflowError.new = function() {
  ;
}).prototype = core.StackOverflowError.prototype;
dart.addTypeTests(core.StackOverflowError);
dart.addTypeCaches(core.StackOverflowError);
core.StackOverflowError[dart.implements] = () => [core.Error];
dart.setGetterSignature(core.StackOverflowError, () => ({
  __proto__: dart.getGetters(core.StackOverflowError.__proto__),
  stackTrace: dart.nullable(core.StackTrace),
  [$stackTrace]: dart.nullable(core.StackTrace)
}));
dart.setLibraryUri(core.StackOverflowError, L8$);
dart.defineExtensionMethods(core.StackOverflowError, ['toString']);
dart.defineExtensionAccessors(core.StackOverflowError, ['stackTrace']);
var variableName$ = dart.privateName(core, "CyclicInitializationError.variableName");
core.CyclicInitializationError = class CyclicInitializationError extends core.Error {
  get variableName() {
    return this[variableName$];
  }
  set variableName(value) {
    super.variableName = value;
  }
  toString() {
    let variableName = this.variableName;
    return variableName == null ? "Reading static variable during its initialization" : dart.str("Reading static variable '") + dart.str(variableName) + dart.str("' during its initialization");
  }
};
(core.CyclicInitializationError.new = function(variableName = null) {
  this[variableName$] = variableName;
  core.CyclicInitializationError.__proto__.new.call(this);
  ;
}).prototype = core.CyclicInitializationError.prototype;
dart.addTypeTests(core.CyclicInitializationError);
dart.addTypeCaches(core.CyclicInitializationError);
dart.setLibraryUri(core.CyclicInitializationError, L8$);
dart.setFieldSignature(core.CyclicInitializationError, () => ({
  __proto__: dart.getFields(core.CyclicInitializationError.__proto__),
  variableName: dart.finalFieldType(dart.nullable(core.String))
}));
dart.defineExtensionMethods(core.CyclicInitializationError, ['toString']);
core.LateInitializationError = class LateInitializationError extends core.Error {
  static __() {
    return dart.throw(new core.UnsupportedError.new(""));
  }
};
dart.addTypeTests(core.LateInitializationError);
dart.addTypeCaches(core.LateInitializationError);
dart.setLibraryUri(core.LateInitializationError, L8$);
core.Exception = class Exception extends core.Object {
  static new(message = null) {
    return new core._Exception.new(message);
  }
};
(core.Exception[dart.mixinNew] = function() {
}).prototype = core.Exception.prototype;
dart.addTypeTests(core.Exception);
dart.addTypeCaches(core.Exception);
dart.setLibraryUri(core.Exception, L8$);
core._Exception = class _Exception extends core.Object {
  toString() {
    let message = this.message;
    if (message == null) return "Exception";
    return dart.str("Exception: ") + dart.str(message);
  }
};
(core._Exception.new = function(message = null) {
  this.message = message;
  ;
}).prototype = core._Exception.prototype;
dart.addTypeTests(core._Exception);
dart.addTypeCaches(core._Exception);
core._Exception[dart.implements] = () => [core.Exception];
dart.setLibraryUri(core._Exception, L8$);
dart.setFieldSignature(core._Exception, () => ({
  __proto__: dart.getFields(core._Exception.__proto__),
  message: dart.finalFieldType(dart.dynamic)
}));
dart.defineExtensionMethods(core._Exception, ['toString']);
var message$16 = dart.privateName(core, "FormatException.message");
var source$ = dart.privateName(core, "FormatException.source");
var offset$ = dart.privateName(core, "FormatException.offset");
core.FormatException = class FormatException extends core.Object {
  get message() {
    return this[message$16];
  }
  set message(value) {
    super.message = value;
  }
  get source() {
    return this[source$];
  }
  set source(value) {
    super.source = value;
  }
  get offset() {
    return this[offset$];
  }
  set offset(value) {
    super.offset = value;
  }
  toString() {
    let report = "FormatException";
    let message = this.message;
    if (message != null && "" !== message) {
      report = dart.str(report) + dart.str(": ") + dart.str(message);
    }
    let offset = this.offset;
    let source = this.source;
    if (typeof source == 'string') {
      if (offset != null && (dart.notNull(offset) < 0 || dart.notNull(offset) > source.length)) {
        offset = null;
      }
      if (offset == null) {
        if (source.length > 78) {
          source = source[$substring](0, 75) + "...";
        }
        return dart.str(report) + dart.str("\n") + dart.str(source);
      }
      let lineNum = 1;
      let lineStart = 0;
      let previousCharWasCR = false;
      for (let i = 0; i < dart.notNull(offset); i = i + 1) {
        let char = source[$codeUnitAt](i);
        if (char === 10) {
          if (lineStart !== i || !previousCharWasCR) {
            lineNum = lineNum + 1;
          }
          lineStart = i + 1;
          previousCharWasCR = false;
        } else if (char === 13) {
          lineNum = lineNum + 1;
          lineStart = i + 1;
          previousCharWasCR = true;
        }
      }
      if (lineNum > 1) {
        report = report + (dart.str(" (at line ") + dart.str(lineNum) + dart.str(", character ") + dart.str(dart.notNull(offset) - lineStart + 1) + dart.str(")\n"));
      } else {
        report = report + (dart.str(" (at character ") + dart.str(dart.notNull(offset) + 1) + dart.str(")\n"));
      }
      let lineEnd = source.length;
      for (let i = offset; dart.notNull(i) < source.length; i = dart.notNull(i) + 1) {
        let char = source[$codeUnitAt](i);
        if (char === 10 || char === 13) {
          lineEnd = i;
          break;
        }
      }
      let length = dart.notNull(lineEnd) - lineStart;
      let start = lineStart;
      let end = lineEnd;
      let prefix = "";
      let postfix = "";
      if (length > 78) {
        let index = dart.notNull(offset) - lineStart;
        if (index < 75) {
          end = start + 75;
          postfix = "...";
        } else if (dart.notNull(end) - dart.notNull(offset) < 75) {
          start = dart.notNull(end) - 75;
          prefix = "...";
        } else {
          start = dart.notNull(offset) - 36;
          end = dart.notNull(offset) + 36;
          prefix = postfix = "...";
        }
      }
      let slice = source[$substring](start, end);
      let markOffset = dart.notNull(offset) - start + prefix.length;
      return dart.str(report) + dart.str(prefix) + dart.str(slice) + dart.str(postfix) + dart.str("\n") + dart.str(" "[$times](markOffset)) + dart.str("^\n");
    } else {
      if (offset != null) {
        report = report + (dart.str(" (at offset ") + dart.str(offset) + dart.str(")"));
      }
      return report;
    }
  }
};
(core.FormatException.new = function(message = "", source = null, offset = null) {
  if (message == null) dart.nullFailed(L169, 80, 31, "message");
  this[message$16] = message;
  this[source$] = source;
  this[offset$] = offset;
  ;
}).prototype = core.FormatException.prototype;
dart.addTypeTests(core.FormatException);
dart.addTypeCaches(core.FormatException);
core.FormatException[dart.implements] = () => [core.Exception];
dart.setLibraryUri(core.FormatException, L8$);
dart.setFieldSignature(core.FormatException, () => ({
  __proto__: dart.getFields(core.FormatException.__proto__),
  message: dart.finalFieldType(core.String),
  source: dart.finalFieldType(dart.dynamic),
  offset: dart.finalFieldType(dart.nullable(core.int))
}));
dart.defineExtensionMethods(core.FormatException, ['toString']);
core.IntegerDivisionByZeroException = class IntegerDivisionByZeroException extends core.Object {
  toString() {
    return "IntegerDivisionByZeroException";
  }
};
(core.IntegerDivisionByZeroException.new = function() {
  ;
}).prototype = core.IntegerDivisionByZeroException.prototype;
dart.addTypeTests(core.IntegerDivisionByZeroException);
dart.addTypeCaches(core.IntegerDivisionByZeroException);
core.IntegerDivisionByZeroException[dart.implements] = () => [core.Exception];
dart.setLibraryUri(core.IntegerDivisionByZeroException, L8$);
dart.defineExtensionMethods(core.IntegerDivisionByZeroException, ['toString']);
var _getKey$ = dart.privateName(core, "_getKey");
const _is_Expando_default = Symbol('_is_Expando_default');
var name$14 = dart.privateName(core, "Expando.name");
core.Expando$ = dart.generic(T => {
  var TN = () => (TN = dart.constFn(dart.nullable(T)))();
  class Expando extends core.Object {
    get name() {
      return this[name$14];
    }
    set name(value) {
      super.name = value;
    }
    [_getKey$]() {
      let t232;
      let key = StringN().as(_js_helper.Primitives.getProperty(this, "expando$key"));
      if (key == null) {
        key = dart.str("expando$key$") + dart.str((t232 = core.Expando._keyCount, core.Expando._keyCount = dart.notNull(t232) + 1, t232));
        _js_helper.Primitives.setProperty(this, "expando$key", key);
      }
      return key;
    }
    toString() {
      return dart.str("Expando:") + dart.str(dart.toString(this.name));
    }
    _get(object) {
      if (object == null) dart.nullFailed(L7, 139, 25, "object");
      let values = _js_helper.Primitives.getProperty(object, "expando$values");
      return values == null ? null : TN().as(_js_helper.Primitives.getProperty(values, this[_getKey$]()));
    }
    _set(object, value$) {
      let value = value$;
      if (object == null) dart.nullFailed(L7, 147, 28, "object");
      TN().as(value);
      let values = _js_helper.Primitives.getProperty(object, "expando$values");
      if (values == null) {
        values = new core.Object.new();
        _js_helper.Primitives.setProperty(object, "expando$values", values);
      }
      _js_helper.Primitives.setProperty(values, this[_getKey$](), value);
      return value$;
    }
  }
  (Expando.new = function(name = null) {
    this[name$14] = name;
    ;
  }).prototype = Expando.prototype;
  dart.addTypeTests(Expando);
  Expando.prototype[_is_Expando_default] = true;
  dart.addTypeCaches(Expando);
  dart.setMethodSignature(Expando, () => ({
    __proto__: dart.getMethods(Expando.__proto__),
    [_getKey$]: dart.fnType(core.String, []),
    _get: dart.fnType(dart.nullable(T), [core.Object]),
    _set: dart.fnType(dart.void, [core.Object, dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(Expando, L8$);
  dart.setFieldSignature(Expando, () => ({
    __proto__: dart.getFields(Expando.__proto__),
    name: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(Expando, ['toString']);
  return Expando;
});
core.Expando = core.Expando$();
dart.defineLazy(core.Expando, {
  /*core.Expando._KEY_PROPERTY_NAME*/get _KEY_PROPERTY_NAME() {
    return "expando$key";
  },
  /*core.Expando._EXPANDO_PROPERTY_NAME*/get _EXPANDO_PROPERTY_NAME() {
    return "expando$values";
  },
  /*core.Expando._keyCount*/get _keyCount() {
    return 0;
  },
  set _keyCount(_) {}
}, false);
dart.addTypeTests(core.Expando, _is_Expando_default);
core.Function = class Function extends core.Object {
  static _toMangledNames(namedArguments) {
    if (namedArguments == null) dart.nullFailed(L7, 111, 28, "namedArguments");
    let result = new (IdentityMapOfString$dynamic()).new();
    namedArguments[$forEach](dart.fn((symbol, value) => {
      if (symbol == null) dart.nullFailed(L7, 113, 29, "symbol");
      result[$_set](core._symbolToString(symbol), value);
    }, SymbolAnddynamicToNullN()));
    return result;
  }
  static is(o) {
    return typeof o == "function";
  }
  static as(o) {
    if (typeof o == "function") return o;
    return dart.as(o, core.Function);
  }
  static apply($function, positionalArguments, namedArguments = null) {
    if ($function == null) dart.nullFailed(L7, 96, 25, "function");
    positionalArguments == null ? positionalArguments = [] : null;
    if (namedArguments != null && dart.test(namedArguments[$isNotEmpty])) {
      let map = {};
      namedArguments[$forEach](dart.fn((symbol, arg) => {
        if (symbol == null) dart.nullFailed(L7, 102, 31, "symbol");
        map[core._symbolToString(symbol)] = arg;
      }, SymbolAnddynamicToNullN()));
      return dart.dcall($function, positionalArguments, map);
    }
    return dart.dcall($function, positionalArguments);
  }
};
(core.Function.new = function() {
  ;
}).prototype = core.Function.prototype;
dart.addTypeCaches(core.Function);
dart.setLibraryUri(core.Function, L8$);
var _positional = dart.privateName(core, "_positional");
var C419;
var _named = dart.privateName(core, "_named");
var C420;
core._Invocation = class _Invocation extends core.Object {
  get positionalArguments() {
    let t232;
    t232 = this[_positional];
    return t232 == null ? C419 || CT.C419 : t232;
  }
  get namedArguments() {
    let t232;
    t232 = this[_named];
    return t232 == null ? C420 || CT.C420 : t232;
  }
  get isMethod() {
    return this[_named] != null;
  }
  get isGetter() {
    return this[_positional] == null;
  }
  get isSetter() {
    return this[_positional] != null && this[_named] == null;
  }
  get isAccessor() {
    return this[_named] == null;
  }
  static _ensureNonNullTypes(types) {
    if (types == null) return C0 || CT.C0;
    let typeArguments = ListOfType().unmodifiable(types);
    for (let i = 0; i < dart.notNull(typeArguments[$length]); i = i + 1) {
      if (typeArguments[$_get](i) == null) {
        dart.throw(new core.ArgumentError.value(types, "types", dart.str("Type arguments must be non-null, was null at index ") + dart.str(i) + dart.str(".")));
      }
    }
    return typeArguments;
  }
};
(core._Invocation.method = function(memberName, types, positional, named) {
  if (memberName == null) dart.nullFailed(L10, 119, 27, "memberName");
  this.memberName = memberName;
  this.typeArguments = core._Invocation._ensureNonNullTypes(types);
  this[_positional] = positional == null ? C419 || CT.C419 : ListOfObjectN().unmodifiable(positional);
  this[_named] = named == null || dart.test(named[$isEmpty]) ? C420 || CT.C420 : MapOfSymbol$ObjectN().unmodifiable(named);
  ;
}).prototype = core._Invocation.prototype;
(core._Invocation.getter = function(memberName) {
  if (memberName == null) dart.nullFailed(L10, 129, 27, "memberName");
  this.memberName = memberName;
  this.typeArguments = C0 || CT.C0;
  this[_positional] = null;
  this[_named] = null;
  ;
}).prototype = core._Invocation.prototype;
(core._Invocation.setter = function(memberName, argument) {
  if (memberName == null) dart.nullFailed(L10, 134, 27, "memberName");
  this.memberName = memberName;
  this.typeArguments = C0 || CT.C0;
  this[_positional] = ListOfObjectN().unmodifiable([argument]);
  this[_named] = null;
  ;
}).prototype = core._Invocation.prototype;
dart.addTypeTests(core._Invocation);
dart.addTypeCaches(core._Invocation);
core._Invocation[dart.implements] = () => [core.Invocation];
dart.setGetterSignature(core._Invocation, () => ({
  __proto__: dart.getGetters(core._Invocation.__proto__),
  positionalArguments: core.List,
  namedArguments: core.Map$(core.Symbol, dart.dynamic),
  isMethod: core.bool,
  isGetter: core.bool,
  isSetter: core.bool,
  isAccessor: core.bool
}));
dart.setLibraryUri(core._Invocation, L8$);
dart.setFieldSignature(core._Invocation, () => ({
  __proto__: dart.getFields(core._Invocation.__proto__),
  memberName: dart.finalFieldType(core.Symbol),
  typeArguments: dart.finalFieldType(core.List$(core.Type)),
  [_positional]: dart.finalFieldType(dart.nullable(core.List$(dart.nullable(core.Object)))),
  [_named]: dart.finalFieldType(dart.nullable(core.Map$(core.Symbol, dart.nullable(core.Object))))
}));
var _generator = dart.privateName(core, "_generator");
var C421;
const _is__GeneratorIterable_default = Symbol('_is__GeneratorIterable_default');
var length$0 = dart.privateName(core, "_GeneratorIterable.length");
core._GeneratorIterable$ = dart.generic(E => {
  var intToE = () => (intToE = dart.constFn(dart.fnType(E, [core.int])))();
  class _GeneratorIterable extends _internal.ListIterable$(E) {
    get length() {
      return this[length$0];
    }
    set length(value) {
      super.length = value;
    }
    elementAt(index) {
      let t232;
      if (index == null) dart.nullFailed(L34, 690, 19, "index");
      core.RangeError.checkValidIndex(index, this);
      t232 = index;
      return this[_generator](t232);
    }
    static _id(n) {
      if (n == null) dart.nullFailed(L34, 696, 22, "n");
      return n;
    }
  }
  (_GeneratorIterable.new = function(length, generator) {
    let t232;
    if (length == null) dart.nullFailed(L34, 685, 27, "length");
    this[length$0] = length;
    this[_generator] = (t232 = generator, t232 == null ? intToE().as(C421 || CT.C421) : t232);
    _GeneratorIterable.__proto__.new.call(this);
    ;
  }).prototype = _GeneratorIterable.prototype;
  dart.addTypeTests(_GeneratorIterable);
  _GeneratorIterable.prototype[_is__GeneratorIterable_default] = true;
  dart.addTypeCaches(_GeneratorIterable);
  dart.setLibraryUri(_GeneratorIterable, L8$);
  dart.setFieldSignature(_GeneratorIterable, () => ({
    __proto__: dart.getFields(_GeneratorIterable.__proto__),
    length: dart.finalFieldType(core.int),
    [_generator]: dart.finalFieldType(dart.fnType(E, [core.int]))
  }));
  dart.defineExtensionMethods(_GeneratorIterable, ['elementAt']);
  dart.defineExtensionAccessors(_GeneratorIterable, ['length']);
  return _GeneratorIterable;
});
core._GeneratorIterable = core._GeneratorIterable$();
dart.addTypeTests(core._GeneratorIterable, _is__GeneratorIterable_default);
const _is_BidirectionalIterator_default = Symbol('_is_BidirectionalIterator_default');
core.BidirectionalIterator$ = dart.generic(E => {
  class BidirectionalIterator extends core.Object {}
  (BidirectionalIterator.new = function() {
    ;
  }).prototype = BidirectionalIterator.prototype;
  dart.addTypeTests(BidirectionalIterator);
  BidirectionalIterator.prototype[_is_BidirectionalIterator_default] = true;
  dart.addTypeCaches(BidirectionalIterator);
  BidirectionalIterator[dart.implements] = () => [core.Iterator$(E)];
  dart.setLibraryUri(BidirectionalIterator, L8$);
  return BidirectionalIterator;
});
core.BidirectionalIterator = core.BidirectionalIterator$();
dart.addTypeTests(core.BidirectionalIterator, _is_BidirectionalIterator_default);
const _is_MapEntry_default = Symbol('_is_MapEntry_default');
var key$0 = dart.privateName(core, "MapEntry.key");
var value$4 = dart.privateName(core, "MapEntry.value");
core.MapEntry$ = dart.generic((K, V) => {
  class MapEntry extends core.Object {
    get key() {
      return this[key$0];
    }
    set key(value) {
      super.key = value;
    }
    get value() {
      return this[value$4];
    }
    set value(value) {
      super.value = value;
    }
    toString() {
      return dart.str("MapEntry(") + dart.str(dart.toString(this.key)) + dart.str(": ") + dart.str(dart.toString(this.value)) + dart.str(")");
    }
  }
  (MapEntry.__ = function(key, value) {
    this[key$0] = key;
    this[value$4] = value;
    ;
  }).prototype = MapEntry.prototype;
  dart.addTypeTests(MapEntry);
  MapEntry.prototype[_is_MapEntry_default] = true;
  dart.addTypeCaches(MapEntry);
  dart.setLibraryUri(MapEntry, L8$);
  dart.setFieldSignature(MapEntry, () => ({
    __proto__: dart.getFields(MapEntry.__proto__),
    key: dart.finalFieldType(K),
    value: dart.finalFieldType(V)
  }));
  dart.defineExtensionMethods(MapEntry, ['toString']);
  return MapEntry;
});
core.MapEntry = core.MapEntry$();
dart.addTypeTests(core.MapEntry, _is_MapEntry_default);
core.Null = class Null extends core.Object {
  static is(o) {
    return o == null;
  }
  static as(o) {
    if (o == null) return o;
    return dart.as(o, core.Null);
  }
  get hashCode() {
    return super[$hashCode];
  }
  toString() {
    return "null";
  }
};
(core.Null[dart.mixinNew] = function() {
}).prototype = core.Null.prototype;
dart.addTypeCaches(core.Null);
dart.setLibraryUri(core.Null, L8$);
dart.defineExtensionMethods(core.Null, ['toString']);
dart.defineExtensionAccessors(core.Null, ['hashCode']);
core.Pattern = class Pattern extends core.Object {};
(core.Pattern.new = function() {
  ;
}).prototype = core.Pattern.prototype;
dart.addTypeTests(core.Pattern);
dart.addTypeCaches(core.Pattern);
dart.setLibraryUri(core.Pattern, L8$);
core.RegExp = class RegExp extends core.Object {
  static new(source, opts) {
    if (source == null) dart.nullFailed(L7, 676, 25, "source");
    let multiLine = opts && 'multiLine' in opts ? opts.multiLine : false;
    if (multiLine == null) dart.nullFailed(L7, 677, 17, "multiLine");
    let caseSensitive = opts && 'caseSensitive' in opts ? opts.caseSensitive : true;
    if (caseSensitive == null) dart.nullFailed(L7, 678, 16, "caseSensitive");
    let unicode = opts && 'unicode' in opts ? opts.unicode : false;
    if (unicode == null) dart.nullFailed(L7, 679, 16, "unicode");
    let dotAll = opts && 'dotAll' in opts ? opts.dotAll : false;
    if (dotAll == null) dart.nullFailed(L7, 680, 16, "dotAll");
    return new _js_helper.JSSyntaxRegExp.new(source, {multiLine: multiLine, caseSensitive: caseSensitive, unicode: unicode, dotAll: dotAll});
  }
  static escape(text) {
    if (text == null) dart.nullFailed(L7, 688, 31, "text");
    return _js_helper.quoteStringForRegExp(text);
  }
};
(core.RegExp[dart.mixinNew] = function() {
}).prototype = core.RegExp.prototype;
dart.addTypeTests(core.RegExp);
dart.addTypeCaches(core.RegExp);
core.RegExp[dart.implements] = () => [core.Pattern];
dart.setLibraryUri(core.RegExp, L8$);
const _is_Set_default = Symbol('_is_Set_default');
core.Set$ = dart.generic(E => {
  class Set extends _internal.EfficientLengthIterable$(E) {
    static castFrom(S, T, source, opts) {
      if (source == null) dart.nullFailed(L170, 113, 39, "source");
      let newSet = opts && 'newSet' in opts ? opts.newSet : null;
      return new (_internal.CastSet$(S, T)).new(source, newSet);
    }
  }
  dart.addTypeTests(Set);
  Set.prototype[_is_Set_default] = true;
  dart.addTypeCaches(Set);
  dart.setLibraryUri(Set, L8$);
  return Set;
});
core.Set = core.Set$();
dart.addTypeTests(core.Set, _is_Set_default);
const _is_Sink_default = Symbol('_is_Sink_default');
core.Sink$ = dart.generic(T => {
  class Sink extends core.Object {}
  (Sink.new = function() {
    ;
  }).prototype = Sink.prototype;
  dart.addTypeTests(Sink);
  Sink.prototype[_is_Sink_default] = true;
  dart.addTypeCaches(Sink);
  dart.setLibraryUri(Sink, L8$);
  return Sink;
});
core.Sink = core.Sink$();
dart.addTypeTests(core.Sink, _is_Sink_default);
var _StringStackTrace__stackTrace = dart.privateName(core, "_StringStackTrace._stackTrace");
var C422;
core.StackTrace = class StackTrace extends core.Object {
  static get current() {
    return dart.stackTrace(Error());
  }
};
(core.StackTrace.new = function() {
  ;
}).prototype = core.StackTrace.prototype;
dart.addTypeTests(core.StackTrace);
dart.addTypeCaches(core.StackTrace);
dart.setLibraryUri(core.StackTrace, L8$);
dart.defineLazy(core.StackTrace, {
  /*core.StackTrace.empty*/get empty() {
    return C422 || CT.C422;
  }
}, false);
var _stackTrace = dart.privateName(core, "_stackTrace");
core._StringStackTrace = class _StringStackTrace extends core.Object {
  get [_stackTrace]() {
    return this[_stackTrace$];
  }
  set [_stackTrace](value) {
    super[_stackTrace] = value;
  }
  toString() {
    return this[_stackTrace];
  }
};
(core._StringStackTrace.new = function(_stackTrace) {
  if (_stackTrace == null) dart.nullFailed(L171, 65, 32, "_stackTrace");
  this[_stackTrace$] = _stackTrace;
  ;
}).prototype = core._StringStackTrace.prototype;
dart.addTypeTests(core._StringStackTrace);
dart.addTypeCaches(core._StringStackTrace);
const _stackTrace$ = _StringStackTrace__stackTrace;
core._StringStackTrace[dart.implements] = () => [core.StackTrace];
dart.setLibraryUri(core._StringStackTrace, L8$);
dart.setFieldSignature(core._StringStackTrace, () => ({
  __proto__: dart.getFields(core._StringStackTrace.__proto__),
  [_stackTrace]: dart.finalFieldType(core.String)
}));
dart.defineExtensionMethods(core._StringStackTrace, ['toString']);
var _start$3 = dart.privateName(core, "_start");
var _stop = dart.privateName(core, "_stop");
core.Stopwatch = class Stopwatch extends core.Object {
  get frequency() {
    return core.Stopwatch._frequency;
  }
  start() {
    let stop = this[_stop];
    if (stop != null) {
      this[_start$3] = dart.notNull(this[_start$3]) + (dart.notNull(core.Stopwatch._now()) - dart.notNull(stop));
      this[_stop] = null;
    }
  }
  stop() {
    this[_stop] == null ? this[_stop] = core.Stopwatch._now() : null;
  }
  reset() {
    let t232;
    this[_start$3] = (t232 = this[_stop], t232 == null ? core.Stopwatch._now() : t232);
  }
  get elapsedTicks() {
    let t232;
    return dart.notNull((t232 = this[_stop], t232 == null ? core.Stopwatch._now() : t232)) - dart.notNull(this[_start$3]);
  }
  get elapsed() {
    return new core.Duration.new({microseconds: this.elapsedMicroseconds});
  }
  get elapsedMicroseconds() {
    let ticks = this.elapsedTicks;
    if (core.Stopwatch._frequency === 1000000) return ticks;
    if (!(core.Stopwatch._frequency === 1000)) dart.assertFailed(null, L7, 456, 12, "_frequency == 1000");
    return dart.notNull(ticks) * 1000;
  }
  get elapsedMilliseconds() {
    let ticks = this.elapsedTicks;
    if (core.Stopwatch._frequency === 1000) return ticks;
    if (!(core.Stopwatch._frequency === 1000000)) dart.assertFailed(null, L7, 464, 12, "_frequency == 1000000");
    return (dart.notNull(ticks) / 1000)[$truncate]();
  }
  get isRunning() {
    return this[_stop] == null;
  }
  static _initTicker() {
    _js_helper.Primitives.initTicker();
    return _js_helper.Primitives.timerFrequency;
  }
  static _now() {
    return _js_helper.Primitives.timerTicks();
  }
};
(core.Stopwatch.new = function() {
  this[_start$3] = 0;
  this[_stop] = 0;
  core.Stopwatch._frequency;
}).prototype = core.Stopwatch.prototype;
dart.addTypeTests(core.Stopwatch);
dart.addTypeCaches(core.Stopwatch);
dart.setMethodSignature(core.Stopwatch, () => ({
  __proto__: dart.getMethods(core.Stopwatch.__proto__),
  start: dart.fnType(dart.void, []),
  stop: dart.fnType(dart.void, []),
  reset: dart.fnType(dart.void, [])
}));
dart.setGetterSignature(core.Stopwatch, () => ({
  __proto__: dart.getGetters(core.Stopwatch.__proto__),
  frequency: core.int,
  elapsedTicks: core.int,
  elapsed: core.Duration,
  elapsedMicroseconds: core.int,
  elapsedMilliseconds: core.int,
  isRunning: core.bool
}));
dart.setLibraryUri(core.Stopwatch, L8$);
dart.setFieldSignature(core.Stopwatch, () => ({
  __proto__: dart.getFields(core.Stopwatch.__proto__),
  [_start$3]: dart.fieldType(core.int),
  [_stop]: dart.fieldType(dart.nullable(core.int))
}));
dart.defineLazy(core.Stopwatch, {
  /*core.Stopwatch._frequency*/get _frequency() {
    return core.Stopwatch._initTicker();
  }
}, false);
var string$ = dart.privateName(core, "Runes.string");
core.Runes = class Runes extends core.Iterable$(core.int) {
  get string() {
    return this[string$];
  }
  set string(value) {
    super.string = value;
  }
  get iterator() {
    return new core.RuneIterator.new(this.string);
  }
  get last() {
    if (this.string.length === 0) {
      dart.throw(new core.StateError.new("No elements."));
    }
    let length = this.string.length;
    let code = this.string[$codeUnitAt](length - 1);
    if (dart.test(core._isTrailSurrogate(code)) && this.string.length > 1) {
      let previousCode = this.string[$codeUnitAt](length - 2);
      if (dart.test(core._isLeadSurrogate(previousCode))) {
        return core._combineSurrogatePair(previousCode, code);
      }
    }
    return code;
  }
};
(core.Runes.new = function(string) {
  if (string == null) dart.nullFailed(L172, 644, 14, "string");
  this[string$] = string;
  core.Runes.__proto__.new.call(this);
  ;
}).prototype = core.Runes.prototype;
dart.addTypeTests(core.Runes);
dart.addTypeCaches(core.Runes);
dart.setGetterSignature(core.Runes, () => ({
  __proto__: dart.getGetters(core.Runes.__proto__),
  iterator: core.RuneIterator,
  [$iterator]: core.RuneIterator
}));
dart.setLibraryUri(core.Runes, L8$);
dart.setFieldSignature(core.Runes, () => ({
  __proto__: dart.getFields(core.Runes.__proto__),
  string: dart.finalFieldType(core.String)
}));
dart.defineExtensionAccessors(core.Runes, ['iterator', 'last']);
var _currentCodePoint = dart.privateName(core, "_currentCodePoint");
var _position$1 = dart.privateName(core, "_position");
var _nextPosition = dart.privateName(core, "_nextPosition");
var _checkSplitSurrogate = dart.privateName(core, "_checkSplitSurrogate");
var string$0 = dart.privateName(core, "RuneIterator.string");
core.RuneIterator = class RuneIterator extends core.Object {
  get string() {
    return this[string$0];
  }
  set string(value) {
    super.string = value;
  }
  [_checkSplitSurrogate](index) {
    if (index == null) dart.nullFailed(L172, 718, 33, "index");
    if (dart.notNull(index) > 0 && dart.notNull(index) < this.string.length && dart.test(core._isLeadSurrogate(this.string[$codeUnitAt](dart.notNull(index) - 1))) && dart.test(core._isTrailSurrogate(this.string[$codeUnitAt](index)))) {
      dart.throw(new core.ArgumentError.new(dart.str("Index inside surrogate pair: ") + dart.str(index)));
    }
  }
  get rawIndex() {
    return this[_position$1] != this[_nextPosition] ? this[_position$1] : -1;
  }
  set rawIndex(rawIndex) {
    if (rawIndex == null) dart.nullFailed(L172, 744, 25, "rawIndex");
    core.RangeError.checkValidIndex(rawIndex, this.string, "rawIndex");
    this.reset(rawIndex);
    this.moveNext();
  }
  reset(rawIndex = 0) {
    if (rawIndex == null) dart.nullFailed(L172, 761, 19, "rawIndex");
    core.RangeError.checkValueInInterval(rawIndex, 0, this.string.length, "rawIndex");
    this[_checkSplitSurrogate](rawIndex);
    this[_position$1] = this[_nextPosition] = rawIndex;
    this[_currentCodePoint] = -1;
  }
  get current() {
    return this[_currentCodePoint];
  }
  get currentSize() {
    return dart.notNull(this[_nextPosition]) - dart.notNull(this[_position$1]);
  }
  get currentAsString() {
    if (this[_position$1] == this[_nextPosition]) return "";
    if (dart.notNull(this[_position$1]) + 1 === this[_nextPosition]) return this.string[$_get](this[_position$1]);
    return this.string[$substring](this[_position$1], this[_nextPosition]);
  }
  moveNext() {
    this[_position$1] = this[_nextPosition];
    if (this[_position$1] === this.string.length) {
      this[_currentCodePoint] = -1;
      return false;
    }
    let codeUnit = this.string[$codeUnitAt](this[_position$1]);
    let nextPosition = dart.notNull(this[_position$1]) + 1;
    if (dart.test(core._isLeadSurrogate(codeUnit)) && nextPosition < this.string.length) {
      let nextCodeUnit = this.string[$codeUnitAt](nextPosition);
      if (dart.test(core._isTrailSurrogate(nextCodeUnit))) {
        this[_nextPosition] = nextPosition + 1;
        this[_currentCodePoint] = core._combineSurrogatePair(codeUnit, nextCodeUnit);
        return true;
      }
    }
    this[_nextPosition] = nextPosition;
    this[_currentCodePoint] = codeUnit;
    return true;
  }
  movePrevious() {
    this[_nextPosition] = this[_position$1];
    if (this[_position$1] === 0) {
      this[_currentCodePoint] = -1;
      return false;
    }
    let position = dart.notNull(this[_position$1]) - 1;
    let codeUnit = this.string[$codeUnitAt](position);
    if (dart.test(core._isTrailSurrogate(codeUnit)) && position > 0) {
      let prevCodeUnit = this.string[$codeUnitAt](position - 1);
      if (dart.test(core._isLeadSurrogate(prevCodeUnit))) {
        this[_position$1] = position - 1;
        this[_currentCodePoint] = core._combineSurrogatePair(prevCodeUnit, codeUnit);
        return true;
      }
    }
    this[_position$1] = position;
    this[_currentCodePoint] = codeUnit;
    return true;
  }
};
(core.RuneIterator.new = function(string) {
  if (string == null) dart.nullFailed(L172, 694, 23, "string");
  this[_currentCodePoint] = -1;
  this[string$0] = string;
  this[_position$1] = 0;
  this[_nextPosition] = 0;
  ;
}).prototype = core.RuneIterator.prototype;
(core.RuneIterator.at = function(string, index) {
  if (string == null) dart.nullFailed(L172, 709, 26, "string");
  if (index == null) dart.nullFailed(L172, 709, 38, "index");
  this[_currentCodePoint] = -1;
  this[string$0] = string;
  this[_position$1] = index;
  this[_nextPosition] = index;
  core.RangeError.checkValueInInterval(index, 0, string.length);
  this[_checkSplitSurrogate](index);
}).prototype = core.RuneIterator.prototype;
dart.addTypeTests(core.RuneIterator);
dart.addTypeCaches(core.RuneIterator);
core.RuneIterator[dart.implements] = () => [core.BidirectionalIterator$(core.int)];
dart.setMethodSignature(core.RuneIterator, () => ({
  __proto__: dart.getMethods(core.RuneIterator.__proto__),
  [_checkSplitSurrogate]: dart.fnType(dart.void, [core.int]),
  reset: dart.fnType(dart.void, [], [core.int]),
  moveNext: dart.fnType(core.bool, []),
  movePrevious: dart.fnType(core.bool, [])
}));
dart.setGetterSignature(core.RuneIterator, () => ({
  __proto__: dart.getGetters(core.RuneIterator.__proto__),
  rawIndex: core.int,
  current: core.int,
  currentSize: core.int,
  currentAsString: core.String
}));
dart.setSetterSignature(core.RuneIterator, () => ({
  __proto__: dart.getSetters(core.RuneIterator.__proto__),
  rawIndex: core.int
}));
dart.setLibraryUri(core.RuneIterator, L8$);
dart.setFieldSignature(core.RuneIterator, () => ({
  __proto__: dart.getFields(core.RuneIterator.__proto__),
  string: dart.finalFieldType(core.String),
  [_position$1]: dart.fieldType(core.int),
  [_nextPosition]: dart.fieldType(core.int),
  [_currentCodePoint]: dart.fieldType(core.int)
}));
var C423;
var C424;
core.Symbol = class Symbol extends core.Object {};
(core.Symbol[dart.mixinNew] = function() {
}).prototype = core.Symbol.prototype;
dart.addTypeTests(core.Symbol);
dart.addTypeCaches(core.Symbol);
dart.setLibraryUri(core.Symbol, L8$);
dart.defineLazy(core.Symbol, {
  /*core.Symbol.unaryMinus*/get unaryMinus() {
    return C423 || CT.C423;
  },
  /*core.Symbol.empty*/get empty() {
    return C424 || CT.C424;
  }
}, false);
core.Uri = class Uri extends core.Object {
  static get base() {
    let uri = _js_helper.Primitives.currentUri();
    if (uri != null) return core.Uri.parse(uri);
    dart.throw(new core.UnsupportedError.new("'Uri.base' is not supported"));
  }
  static dataFromString(content, opts) {
    if (content == null) dart.nullFailed(L173, 299, 37, "content");
    let mimeType = opts && 'mimeType' in opts ? opts.mimeType : null;
    let encoding = opts && 'encoding' in opts ? opts.encoding : null;
    let parameters = opts && 'parameters' in opts ? opts.parameters : null;
    let base64 = opts && 'base64' in opts ? opts.base64 : false;
    if (base64 == null) dart.nullFailed(L173, 303, 12, "base64");
    let data = core.UriData.fromString(content, {mimeType: mimeType, encoding: encoding, parameters: parameters, base64: base64});
    return data.uri;
  }
  static dataFromBytes(bytes, opts) {
    if (bytes == null) dart.nullFailed(L173, 328, 39, "bytes");
    let mimeType = opts && 'mimeType' in opts ? opts.mimeType : "application/octet-stream";
    if (mimeType == null) dart.nullFailed(L173, 329, 15, "mimeType");
    let parameters = opts && 'parameters' in opts ? opts.parameters : null;
    let percentEncoded = opts && 'percentEncoded' in opts ? opts.percentEncoded : false;
    if (percentEncoded == null) dart.nullFailed(L173, 331, 12, "percentEncoded");
    let data = core.UriData.fromBytes(bytes, {mimeType: mimeType, parameters: parameters, percentEncoded: percentEncoded});
    return data.uri;
  }
  get hasScheme() {
    return this.scheme[$isNotEmpty];
  }
  static parse(uri, start = 0, end = null) {
    let t232;
    if (uri == null) dart.nullFailed(L173, 735, 27, "uri");
    if (start == null) dart.nullFailed(L173, 735, 37, "start");
    end == null ? end = uri.length : null;
    if (dart.notNull(end) >= dart.notNull(start) + 5) {
      let dataDelta = core._startsWithData(uri, start);
      if (dataDelta === 0) {
        if (dart.notNull(start) > 0 || dart.notNull(end) < uri.length) uri = uri[$substring](start, end);
        return core.UriData._parse(uri, 5, null).uri;
      } else if (dataDelta === 32) {
        return core.UriData._parse(uri[$substring](dart.notNull(start) + 5, end), 0, null).uri;
      }
    }
    let indices = ListOfint().filled(8, 0, {growable: false});
    t232 = indices;
    (() => {
      t232[$_set](0, 0);
      t232[$_set](1, dart.notNull(start) - 1);
      t232[$_set](2, dart.notNull(start) - 1);
      t232[$_set](7, dart.notNull(start) - 1);
      t232[$_set](3, start);
      t232[$_set](4, start);
      t232[$_set](5, end);
      t232[$_set](6, end);
      return t232;
    })();
    let state = core._scan(uri, start, end, 0, indices);
    if (dart.notNull(state) >= 14) {
      indices[$_set](7, end);
    }
    let schemeEnd = indices[$_get](1);
    if (dart.notNull(schemeEnd) >= dart.notNull(start)) {
      state = core._scan(uri, start, schemeEnd, 20, indices);
      if (state === 20) {
        indices[$_set](7, schemeEnd);
      }
    }
    let hostStart = dart.notNull(indices[$_get](2)) + 1;
    let portStart = indices[$_get](3);
    let pathStart = indices[$_get](4);
    let queryStart = indices[$_get](5);
    let fragmentStart = indices[$_get](6);
    let scheme = null;
    if (dart.notNull(fragmentStart) < dart.notNull(queryStart)) queryStart = fragmentStart;
    if (dart.notNull(pathStart) < hostStart) {
      pathStart = queryStart;
    } else if (dart.notNull(pathStart) <= dart.notNull(schemeEnd)) {
      pathStart = dart.notNull(schemeEnd) + 1;
    }
    if (dart.notNull(portStart) < hostStart) portStart = pathStart;
    if (!(hostStart === start || dart.notNull(schemeEnd) <= hostStart)) dart.assertFailed(null, L173, 874, 12, "hostStart == start || schemeEnd <= hostStart");
    if (!(hostStart <= dart.notNull(portStart))) dart.assertFailed(null, L173, 875, 12, "hostStart <= portStart");
    if (!(dart.notNull(schemeEnd) <= dart.notNull(pathStart))) dart.assertFailed(null, L173, 876, 12, "schemeEnd <= pathStart");
    if (!(dart.notNull(portStart) <= dart.notNull(pathStart))) dart.assertFailed(null, L173, 877, 12, "portStart <= pathStart");
    if (!(dart.notNull(pathStart) <= dart.notNull(queryStart))) dart.assertFailed(null, L173, 878, 12, "pathStart <= queryStart");
    if (!(dart.notNull(queryStart) <= dart.notNull(fragmentStart))) dart.assertFailed(null, L173, 879, 12, "queryStart <= fragmentStart");
    let isSimple = dart.notNull(indices[$_get](7)) < dart.notNull(start);
    if (isSimple) {
      if (hostStart > dart.notNull(schemeEnd) + 3) {
        isSimple = false;
      } else if (dart.notNull(portStart) > dart.notNull(start) && dart.notNull(portStart) + 1 === pathStart) {
        isSimple = false;
      } else if (dart.notNull(queryStart) < dart.notNull(end) && queryStart === dart.notNull(pathStart) + 2 && uri[$startsWith]("..", pathStart) || dart.notNull(queryStart) > dart.notNull(pathStart) + 2 && uri[$startsWith]("/..", dart.notNull(queryStart) - 3)) {
        isSimple = false;
      } else {
        if (schemeEnd === dart.notNull(start) + 4) {
          if (uri[$startsWith]("file", start)) {
            scheme = "file";
            if (hostStart <= dart.notNull(start)) {
              let schemeAuth = "file://";
              let delta = 2;
              if (!uri[$startsWith]("/", pathStart)) {
                schemeAuth = "file:///";
                delta = 3;
              }
              uri = schemeAuth + uri[$substring](pathStart, end);
              schemeEnd = dart.notNull(schemeEnd) - dart.notNull(start);
              hostStart = 7;
              portStart = 7;
              pathStart = 7;
              queryStart = dart.notNull(queryStart) + (delta - dart.notNull(start));
              fragmentStart = dart.notNull(fragmentStart) + (delta - dart.notNull(start));
              start = 0;
              end = uri.length;
            } else if (pathStart == queryStart) {
              if (start === 0 && end === uri.length) {
                uri = uri[$replaceRange](pathStart, queryStart, "/");
                queryStart = dart.notNull(queryStart) + 1;
                fragmentStart = dart.notNull(fragmentStart) + 1;
                end = dart.notNull(end) + 1;
              } else {
                uri = dart.str(uri[$substring](start, pathStart)) + dart.str("/") + dart.str(uri[$substring](queryStart, end));
                schemeEnd = dart.notNull(schemeEnd) - dart.notNull(start);
                hostStart = hostStart - dart.notNull(start);
                portStart = dart.notNull(portStart) - dart.notNull(start);
                pathStart = dart.notNull(pathStart) - dart.notNull(start);
                queryStart = dart.notNull(queryStart) + (1 - dart.notNull(start));
                fragmentStart = dart.notNull(fragmentStart) + (1 - dart.notNull(start));
                start = 0;
                end = uri.length;
              }
            }
          } else if (uri[$startsWith]("http", start)) {
            scheme = "http";
            if (dart.notNull(portStart) > dart.notNull(start) && dart.notNull(portStart) + 3 === pathStart && uri[$startsWith]("80", dart.notNull(portStart) + 1)) {
              if (start === 0 && end === uri.length) {
                uri = uri[$replaceRange](portStart, pathStart, "");
                pathStart = dart.notNull(pathStart) - 3;
                queryStart = dart.notNull(queryStart) - 3;
                fragmentStart = dart.notNull(fragmentStart) - 3;
                end = dart.notNull(end) - 3;
              } else {
                uri = uri[$substring](start, portStart) + uri[$substring](pathStart, end);
                schemeEnd = dart.notNull(schemeEnd) - dart.notNull(start);
                hostStart = hostStart - dart.notNull(start);
                portStart = dart.notNull(portStart) - dart.notNull(start);
                pathStart = dart.notNull(pathStart) - (3 + dart.notNull(start));
                queryStart = dart.notNull(queryStart) - (3 + dart.notNull(start));
                fragmentStart = dart.notNull(fragmentStart) - (3 + dart.notNull(start));
                start = 0;
                end = uri.length;
              }
            }
          }
        } else if (schemeEnd === dart.notNull(start) + 5 && uri[$startsWith]("https", start)) {
          scheme = "https";
          if (dart.notNull(portStart) > dart.notNull(start) && dart.notNull(portStart) + 4 === pathStart && uri[$startsWith]("443", dart.notNull(portStart) + 1)) {
            if (start === 0 && end === uri.length) {
              uri = uri[$replaceRange](portStart, pathStart, "");
              pathStart = dart.notNull(pathStart) - 4;
              queryStart = dart.notNull(queryStart) - 4;
              fragmentStart = dart.notNull(fragmentStart) - 4;
              end = dart.notNull(end) - 3;
            } else {
              uri = uri[$substring](start, portStart) + uri[$substring](pathStart, end);
              schemeEnd = dart.notNull(schemeEnd) - dart.notNull(start);
              hostStart = hostStart - dart.notNull(start);
              portStart = dart.notNull(portStart) - dart.notNull(start);
              pathStart = dart.notNull(pathStart) - (4 + dart.notNull(start));
              queryStart = dart.notNull(queryStart) - (4 + dart.notNull(start));
              fragmentStart = dart.notNull(fragmentStart) - (4 + dart.notNull(start));
              start = 0;
              end = uri.length;
            }
          }
        }
      }
    }
    if (isSimple) {
      if (dart.notNull(start) > 0 || dart.notNull(end) < uri.length) {
        uri = uri[$substring](start, end);
        schemeEnd = dart.notNull(schemeEnd) - dart.notNull(start);
        hostStart = hostStart - dart.notNull(start);
        portStart = dart.notNull(portStart) - dart.notNull(start);
        pathStart = dart.notNull(pathStart) - dart.notNull(start);
        queryStart = dart.notNull(queryStart) - dart.notNull(start);
        fragmentStart = dart.notNull(fragmentStart) - dart.notNull(start);
      }
      return new core._SimpleUri.new(uri, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme);
    }
    return core._Uri.notSimple(uri, start, end, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme);
  }
  static tryParse(uri, start = 0, end = null) {
    if (uri == null) dart.nullFailed(L173, 1035, 31, "uri");
    if (start == null) dart.nullFailed(L173, 1035, 41, "start");
    try {
      return core.Uri.parse(uri, start, end);
    } catch (e) {
      let ex = dart.getThrown(e);
      if (core.FormatException.is(ex)) {
        return null;
      } else
        throw e;
    }
  }
  static encodeComponent(component) {
    if (component == null) dart.nullFailed(L173, 1064, 40, "component");
    return core._Uri._uriEncode(core._Uri._unreserved2396Table, component, convert.utf8, false);
  }
  static encodeQueryComponent(component, opts) {
    if (component == null) dart.nullFailed(L173, 1101, 45, "component");
    let encoding = opts && 'encoding' in opts ? opts.encoding : C107 || CT.C107;
    if (encoding == null) dart.nullFailed(L173, 1102, 17, "encoding");
    return core._Uri._uriEncode(core._Uri._unreservedTable, component, encoding, true);
  }
  static decodeComponent(encodedComponent) {
    if (encodedComponent == null) dart.nullFailed(L173, 1119, 40, "encodedComponent");
    return core._Uri._uriDecode(encodedComponent, 0, encodedComponent.length, convert.utf8, false);
  }
  static decodeQueryComponent(encodedComponent, opts) {
    if (encodedComponent == null) dart.nullFailed(L173, 1132, 45, "encodedComponent");
    let encoding = opts && 'encoding' in opts ? opts.encoding : C107 || CT.C107;
    if (encoding == null) dart.nullFailed(L173, 1133, 17, "encoding");
    return core._Uri._uriDecode(encodedComponent, 0, encodedComponent.length, encoding, true);
  }
  static encodeFull(uri) {
    if (uri == null) dart.nullFailed(L173, 1147, 35, "uri");
    return core._Uri._uriEncode(core._Uri._encodeFullTable, uri, convert.utf8, false);
  }
  static decodeFull(uri) {
    if (uri == null) dart.nullFailed(L173, 1159, 35, "uri");
    return core._Uri._uriDecode(uri, 0, uri.length, convert.utf8, false);
  }
  static splitQueryString(query, opts) {
    if (query == null) dart.nullFailed(L173, 1176, 54, "query");
    let encoding = opts && 'encoding' in opts ? opts.encoding : C107 || CT.C107;
    if (encoding == null) dart.nullFailed(L173, 1177, 17, "encoding");
    return query[$split]("&")[$fold](MapOfString$String(), new (IdentityMapOfString$String()).new(), dart.fn((map, element) => {
      if (map == null) dart.nullFailed(L173, 1178, 39, "map");
      if (element == null) dart.nullFailed(L173, 1178, 44, "element");
      let index = element[$indexOf]("=");
      if (index === -1) {
        if (element !== "") {
          map[$_set](core.Uri.decodeQueryComponent(element, {encoding: encoding}), "");
        }
      } else if (index !== 0) {
        let key = element[$substring](0, index);
        let value = element[$substring](index + 1);
        map[$_set](core.Uri.decodeQueryComponent(key, {encoding: encoding}), core.Uri.decodeQueryComponent(value, {encoding: encoding}));
      }
      return map;
    }, MapOfString$StringAndStringToMapOfString$String()));
  }
  static parseIPv4Address(host) {
    if (host == null) dart.nullFailed(L173, 1201, 44, "host");
    return core.Uri._parseIPv4Address(host, 0, host.length);
  }
  static _parseIPv4Address(host, start, end) {
    let t234;
    if (host == null) dart.nullFailed(L173, 1205, 45, "host");
    if (start == null) dart.nullFailed(L173, 1205, 55, "start");
    if (end == null) dart.nullFailed(L173, 1205, 66, "end");
    function error(msg, position) {
      if (msg == null) dart.nullFailed(L173, 1206, 23, "msg");
      if (position == null) dart.nullFailed(L173, 1206, 32, "position");
      dart.throw(new core.FormatException.new(dart.str("Illegal IPv4 address, ") + dart.str(msg), host, position));
    }
    dart.fn(error, StringAndintTovoid());
    let result = _native_typed_data.NativeUint8List.new(4);
    let partIndex = 0;
    let partStart = start;
    for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
      let char = host[$codeUnitAt](i);
      if (char !== 46) {
        if ((char ^ 48) >>> 0 > 9) {
          error("invalid character", i);
        }
      } else {
        if (partIndex === 3) {
          error("IPv4 address should contain exactly 4 parts", i);
        }
        let part = core.int.parse(host[$substring](partStart, i));
        if (dart.notNull(part) > 255) {
          error("each part must be in the range 0..255", partStart);
        }
        result[$_set]((t234 = partIndex, partIndex = t234 + 1, t234), part);
        partStart = dart.notNull(i) + 1;
      }
    }
    if (partIndex !== 3) {
      error("IPv4 address should contain exactly 4 parts", end);
    }
    let part = core.int.parse(host[$substring](partStart, end));
    if (dart.notNull(part) > 255) {
      error("each part must be in the range 0..255", partStart);
    }
    result[$_set](partIndex, part);
    return result;
  }
  static parseIPv6Address(host, start = 0, end = null) {
    if (host == null) dart.nullFailed(L173, 1263, 44, "host");
    if (start == null) dart.nullFailed(L173, 1263, 55, "start");
    end == null ? end = host.length : null;
    function error(msg, position = null) {
      if (msg == null) dart.nullFailed(L173, 1273, 23, "msg");
      dart.throw(new core.FormatException.new(dart.str("Illegal IPv6 address, ") + dart.str(msg), host, intN().as(position)));
    }
    dart.fn(error, StringAnddynamicTovoid$());
    function parseHex(start, end) {
      if (start == null) dart.nullFailed(L173, 1278, 22, "start");
      if (end == null) dart.nullFailed(L173, 1278, 33, "end");
      if (dart.notNull(end) - dart.notNull(start) > 4) {
        error("an IPv6 part can only contain a maximum of 4 hex digits", start);
      }
      let value = core.int.parse(host[$substring](start, end), {radix: 16});
      if (dart.notNull(value) < 0 || dart.notNull(value) > 65535) {
        error("each part must be in the range of `0x0..0xFFFF`", start);
      }
      return value;
    }
    dart.fn(parseHex, intAndintToint());
    if (host.length < 2) error("address is too short");
    let parts = JSArrayOfint().of([]);
    let wildcardSeen = false;
    let seenDot = false;
    let partStart = start;
    for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
      let char = host[$codeUnitAt](i);
      if (char === 58) {
        if (i == start) {
          i = dart.notNull(i) + 1;
          if (host[$codeUnitAt](i) !== 58) {
            error("invalid start colon.", i);
          }
          partStart = i;
        }
        if (i == partStart) {
          if (wildcardSeen) {
            error("only one wildcard `::` is allowed", i);
          }
          wildcardSeen = true;
          parts[$add](-1);
        } else {
          parts[$add](parseHex(partStart, i));
        }
        partStart = dart.notNull(i) + 1;
      } else if (char === 46) {
        seenDot = true;
      }
    }
    if (parts[$length] === 0) error("too few parts");
    let atEnd = partStart == end;
    let isLastWildcard = parts[$last] === -1;
    if (atEnd && !isLastWildcard) {
      error("expected a part after last `:`", end);
    }
    if (!atEnd) {
      if (!seenDot) {
        parts[$add](parseHex(partStart, end));
      } else {
        let last = core.Uri._parseIPv4Address(host, partStart, end);
        parts[$add]((dart.notNull(last[$_get](0)) << 8 | dart.notNull(last[$_get](1))) >>> 0);
        parts[$add]((dart.notNull(last[$_get](2)) << 8 | dart.notNull(last[$_get](3))) >>> 0);
      }
    }
    if (wildcardSeen) {
      if (dart.notNull(parts[$length]) > 7) {
        error("an address with a wildcard must have less than 7 parts");
      }
    } else if (parts[$length] !== 8) {
      error("an address without a wildcard must contain exactly 8 parts");
    }
    let bytes = _native_typed_data.NativeUint8List.new(16);
    for (let i = 0, index = 0; i < dart.notNull(parts[$length]); i = i + 1) {
      let value = parts[$_get](i);
      if (value === -1) {
        let wildCardLength = 9 - dart.notNull(parts[$length]);
        for (let j = 0; j < wildCardLength; j = j + 1) {
          bytes[$_set](index, 0);
          bytes[$_set](index + 1, 0);
          index = index + 2;
        }
      } else {
        bytes[$_set](index, value[$rightShift](8));
        bytes[$_set](index + 1, dart.notNull(value) & 255);
        index = index + 2;
      }
    }
    return bytes;
  }
};
(core.Uri[dart.mixinNew] = function() {
}).prototype = core.Uri.prototype;
dart.addTypeTests(core.Uri);
dart.addTypeCaches(core.Uri);
dart.setGetterSignature(core.Uri, () => ({
  __proto__: dart.getGetters(core.Uri.__proto__),
  hasScheme: core.bool
}));
dart.setLibraryUri(core.Uri, L8$);
var ___Uri__text = dart.privateName(core, "_#_Uri#_text");
var ___Uri_pathSegments = dart.privateName(core, "_#_Uri#pathSegments");
var ___Uri_hashCode = dart.privateName(core, "_#_Uri#hashCode");
var ___Uri_queryParameters = dart.privateName(core, "_#_Uri#queryParameters");
var ___Uri_queryParametersAll = dart.privateName(core, "_#_Uri#queryParametersAll");
var _userInfo$ = dart.privateName(core, "_userInfo");
var _host$ = dart.privateName(core, "_host");
var _port$ = dart.privateName(core, "_port");
var _query$ = dart.privateName(core, "_query");
var _fragment$ = dart.privateName(core, "_fragment");
var _initializeText = dart.privateName(core, "_initializeText");
var _text$ = dart.privateName(core, "_text");
var _writeAuthority = dart.privateName(core, "_writeAuthority");
var C425;
var C426;
var C427;
var _mergePaths = dart.privateName(core, "_mergePaths");
var _toFilePath = dart.privateName(core, "_toFilePath");
var C428;
var C429;
var C430;
var C431;
var C432;
var C433;
var C434;
var C435;
var C436;
var C437;
var C438;
core._Uri = class _Uri extends core.Object {
  get [_text$]() {
    let t235, t234;
    t234 = this[___Uri__text];
    return t234 == null ? (t235 = this[_initializeText](), this[___Uri__text] == null ? this[___Uri__text] = t235 : dart.throw(new _internal.LateInitializationErrorImpl.new("Field '_text' has been assigned during initialization."))) : t234;
  }
  get pathSegments() {
    let t235, t234;
    t234 = this[___Uri_pathSegments];
    return t234 == null ? (t235 = core._Uri._computePathSegments(this.path), this[___Uri_pathSegments] == null ? this[___Uri_pathSegments] = t235 : dart.throw(new _internal.LateInitializationErrorImpl.new("Field 'pathSegments' has been assigned during initialization."))) : t234;
  }
  get hashCode() {
    let t235, t234;
    t234 = this[___Uri_hashCode];
    return t234 == null ? (t235 = dart.hashCode(this[_text$]), this[___Uri_hashCode] == null ? this[___Uri_hashCode] = t235 : dart.throw(new _internal.LateInitializationErrorImpl.new("Field 'hashCode' has been assigned during initialization."))) : t234;
  }
  get queryParameters() {
    let t235, t234;
    t234 = this[___Uri_queryParameters];
    return t234 == null ? (t235 = new (UnmodifiableMapViewOfString$String()).new(core.Uri.splitQueryString(this.query)), this[___Uri_queryParameters] == null ? this[___Uri_queryParameters] = t235 : dart.throw(new _internal.LateInitializationErrorImpl.new("Field 'queryParameters' has been assigned during initialization."))) : t234;
  }
  get queryParametersAll() {
    let t235, t234;
    t234 = this[___Uri_queryParametersAll];
    return t234 == null ? (t235 = core._Uri._computeQueryParametersAll(this.query), this[___Uri_queryParametersAll] == null ? this[___Uri_queryParametersAll] = t235 : dart.throw(new _internal.LateInitializationErrorImpl.new("Field 'queryParametersAll' has been assigned during initialization."))) : t234;
  }
  static notSimple(uri, start, end, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme) {
    let t234;
    if (uri == null) dart.nullFailed(L173, 1446, 14, "uri");
    if (start == null) dart.nullFailed(L173, 1447, 11, "start");
    if (end == null) dart.nullFailed(L173, 1448, 11, "end");
    if (schemeEnd == null) dart.nullFailed(L173, 1449, 11, "schemeEnd");
    if (hostStart == null) dart.nullFailed(L173, 1450, 11, "hostStart");
    if (portStart == null) dart.nullFailed(L173, 1451, 11, "portStart");
    if (pathStart == null) dart.nullFailed(L173, 1452, 11, "pathStart");
    if (queryStart == null) dart.nullFailed(L173, 1453, 11, "queryStart");
    if (fragmentStart == null) dart.nullFailed(L173, 1454, 11, "fragmentStart");
    if (scheme == null) {
      scheme = "";
      if (dart.notNull(schemeEnd) > dart.notNull(start)) {
        scheme = core._Uri._makeScheme(uri, start, schemeEnd);
      } else if (schemeEnd == start) {
        core._Uri._fail(uri, start, "Invalid empty scheme");
      }
    }
    let userInfo = "";
    let host = null;
    let port = null;
    if (dart.notNull(hostStart) > dart.notNull(start)) {
      let userInfoStart = dart.notNull(schemeEnd) + 3;
      if (userInfoStart < dart.notNull(hostStart)) {
        userInfo = core._Uri._makeUserInfo(uri, userInfoStart, dart.notNull(hostStart) - 1);
      }
      host = core._Uri._makeHost(uri, hostStart, portStart, false);
      if (dart.notNull(portStart) + 1 < dart.notNull(pathStart)) {
        let portNumber = (t234 = core.int.tryParse(uri[$substring](dart.notNull(portStart) + 1, pathStart)), t234 == null ? dart.throw(new core.FormatException.new("Invalid port", uri, dart.notNull(portStart) + 1)) : t234);
        port = core._Uri._makePort(portNumber, scheme);
      }
    }
    let path = core._Uri._makePath(uri, pathStart, queryStart, null, scheme, host != null);
    let query = null;
    if (dart.notNull(queryStart) < dart.notNull(fragmentStart)) {
      query = core._Uri._makeQuery(uri, dart.notNull(queryStart) + 1, fragmentStart, null);
    }
    let fragment = null;
    if (dart.notNull(fragmentStart) < dart.notNull(end)) {
      fragment = core._Uri._makeFragment(uri, dart.notNull(fragmentStart) + 1, end);
    }
    return new core._Uri._internal(scheme, userInfo, host, port, path, query, fragment);
  }
  static new(opts) {
    let scheme = opts && 'scheme' in opts ? opts.scheme : null;
    let userInfo = opts && 'userInfo' in opts ? opts.userInfo : null;
    let host = opts && 'host' in opts ? opts.host : null;
    let port = opts && 'port' in opts ? opts.port : null;
    let path = opts && 'path' in opts ? opts.path : null;
    let pathSegments = opts && 'pathSegments' in opts ? opts.pathSegments : null;
    let query = opts && 'query' in opts ? opts.query : null;
    let queryParameters = opts && 'queryParameters' in opts ? opts.queryParameters : null;
    let fragment = opts && 'fragment' in opts ? opts.fragment : null;
    if (scheme == null) {
      scheme = "";
    } else {
      scheme = core._Uri._makeScheme(scheme, 0, scheme.length);
    }
    userInfo = core._Uri._makeUserInfo(userInfo, 0, core._stringOrNullLength(userInfo));
    if (userInfo == null) {
      dart.throw("unreachable");
    }
    host = core._Uri._makeHost(host, 0, core._stringOrNullLength(host), false);
    if (query === "") query = null;
    query = core._Uri._makeQuery(query, 0, core._stringOrNullLength(query), queryParameters);
    fragment = core._Uri._makeFragment(fragment, 0, core._stringOrNullLength(fragment));
    port = core._Uri._makePort(port, scheme);
    let isFile = scheme === "file";
    if (host == null && (userInfo[$isNotEmpty] || port != null || isFile)) {
      host = "";
    }
    let hasAuthority = host != null;
    path = core._Uri._makePath(path, 0, core._stringOrNullLength(path), pathSegments, scheme, hasAuthority);
    if (path == null) {
      dart.throw("unreachable");
    }
    if (scheme[$isEmpty] && host == null && !path[$startsWith]("/")) {
      let allowScheme = scheme[$isNotEmpty] || host != null;
      path = core._Uri._normalizeRelativePath(path, allowScheme);
    } else {
      path = core._Uri._removeDotSegments(path);
    }
    if (host == null && path[$startsWith]("//")) {
      host = "";
    }
    return new core._Uri._internal(scheme, userInfo, host, port, path, query, fragment);
  }
  static http(authority, unencodedPath, queryParameters = null) {
    if (authority == null) dart.nullFailed(L173, 1544, 28, "authority");
    if (unencodedPath == null) dart.nullFailed(L173, 1544, 46, "unencodedPath");
    return core._Uri._makeHttpUri("http", authority, unencodedPath, queryParameters);
  }
  static https(authority, unencodedPath, queryParameters = null) {
    if (authority == null) dart.nullFailed(L173, 1550, 29, "authority");
    if (unencodedPath == null) dart.nullFailed(L173, 1550, 47, "unencodedPath");
    return core._Uri._makeHttpUri("https", authority, unencodedPath, queryParameters);
  }
  get authority() {
    if (!dart.test(this.hasAuthority)) return "";
    let sb = new core.StringBuffer.new();
    this[_writeAuthority](sb);
    return sb.toString();
  }
  get userInfo() {
    return this[_userInfo$];
  }
  get host() {
    let host = this[_host$];
    if (host == null) return "";
    if (host[$startsWith]("[")) {
      return host[$substring](1, host.length - 1);
    }
    return host;
  }
  get port() {
    let t234;
    t234 = this[_port$];
    return t234 == null ? core._Uri._defaultPort(this.scheme) : t234;
  }
  static _defaultPort(scheme) {
    if (scheme == null) dart.nullFailed(L173, 1578, 34, "scheme");
    if (scheme === "http") return 80;
    if (scheme === "https") return 443;
    return 0;
  }
  get query() {
    let t234;
    t234 = this[_query$];
    return t234 == null ? "" : t234;
  }
  get fragment() {
    let t234;
    t234 = this[_fragment$];
    return t234 == null ? "" : t234;
  }
  isScheme(scheme) {
    if (scheme == null) dart.nullFailed(L173, 1588, 24, "scheme");
    let thisScheme = this.scheme;
    if (scheme == null) return thisScheme[$isEmpty];
    if (scheme.length !== thisScheme.length) return false;
    return core._Uri._compareScheme(scheme, thisScheme);
  }
  static _compareScheme(scheme, uri) {
    if (scheme == null) dart.nullFailed(L173, 1607, 37, "scheme");
    if (uri == null) dart.nullFailed(L173, 1607, 52, "uri");
    for (let i = 0; i < scheme.length; i = i + 1) {
      let schemeChar = scheme[$codeUnitAt](i);
      let uriChar = uri[$codeUnitAt](i);
      let delta = (schemeChar ^ uriChar) >>> 0;
      if (delta !== 0) {
        if (delta === 32) {
          let lowerChar = (uriChar | delta) >>> 0;
          if (97 <= lowerChar && lowerChar <= 122) {
            continue;
          }
        }
        return false;
      }
    }
    return true;
  }
  static _fail(uri, index, message) {
    if (uri == null) dart.nullFailed(L173, 1627, 29, "uri");
    if (index == null) dart.nullFailed(L173, 1627, 38, "index");
    if (message == null) dart.nullFailed(L173, 1627, 52, "message");
    dart.throw(new core.FormatException.new(message, uri, index));
  }
  static _makeHttpUri(scheme, authority, unencodedPath, queryParameters) {
    if (scheme == null) dart.nullFailed(L173, 1631, 35, "scheme");
    if (unencodedPath == null) dart.nullFailed(L173, 1632, 14, "unencodedPath");
    let userInfo = "";
    let host = null;
    let port = null;
    if (authority != null && authority[$isNotEmpty]) {
      let hostStart = 0;
      for (let i = 0; i < authority.length; i = i + 1) {
        if (authority[$codeUnitAt](i) === 64) {
          userInfo = authority[$substring](0, i);
          hostStart = i + 1;
          break;
        }
      }
      let hostEnd = hostStart;
      if (hostStart < authority.length && authority[$codeUnitAt](hostStart) === 91) {
        let escapeForZoneID = -1;
        for (; hostEnd < authority.length; hostEnd = hostEnd + 1) {
          let char = authority[$codeUnitAt](hostEnd);
          if (char === 37 && escapeForZoneID < 0) {
            escapeForZoneID = hostEnd;
            if (authority[$startsWith]("25", hostEnd + 1)) {
              hostEnd = hostEnd + 2;
            }
          } else if (char === 93) {
            break;
          }
        }
        if (hostEnd === authority.length) {
          dart.throw(new core.FormatException.new("Invalid IPv6 host entry.", authority, hostStart));
        }
        core.Uri.parseIPv6Address(authority, hostStart + 1, escapeForZoneID < 0 ? hostEnd : escapeForZoneID);
        hostEnd = hostEnd + 1;
        if (hostEnd !== authority.length && authority[$codeUnitAt](hostEnd) !== 58) {
          dart.throw(new core.FormatException.new("Invalid end of authority", authority, hostEnd));
        }
      }
      for (; hostEnd < authority.length; hostEnd = hostEnd + 1) {
        if (authority[$codeUnitAt](hostEnd) === 58) {
          let portString = authority[$substring](hostEnd + 1);
          if (portString[$isNotEmpty]) port = core.int.parse(portString);
          break;
        }
      }
      host = authority[$substring](hostStart, hostEnd);
    }
    return core._Uri.new({scheme: scheme, userInfo: userInfo, host: host, port: port, pathSegments: unencodedPath[$split]("/"), queryParameters: queryParameters});
  }
  static file(path, opts) {
    let t234;
    if (path == null) dart.nullFailed(L173, 1697, 28, "path");
    let windows = opts && 'windows' in opts ? opts.windows : null;
    return core._Uri.as(dart.test((t234 = windows, t234 == null ? core._Uri._isWindows : t234)) ? core._Uri._makeWindowsFileUrl(path, false) : core._Uri._makeFileUri(path, false));
  }
  static directory(path, opts) {
    let t234;
    if (path == null) dart.nullFailed(L173, 1704, 33, "path");
    let windows = opts && 'windows' in opts ? opts.windows : null;
    return core._Uri.as(dart.test((t234 = windows, t234 == null ? core._Uri._isWindows : t234)) ? core._Uri._makeWindowsFileUrl(path, true) : core._Uri._makeFileUri(path, true));
  }
  static get _isWindows() {
    return core._Uri._isWindowsCached;
  }
  static _checkNonWindowsPathReservedCharacters(segments, argumentError) {
    if (segments == null) dart.nullFailed(L173, 1714, 20, "segments");
    if (argumentError == null) dart.nullFailed(L173, 1714, 35, "argumentError");
    for (let segment of segments) {
      if (segment[$contains]("/")) {
        if (dart.test(argumentError)) {
          dart.throw(new core.ArgumentError.new(dart.str("Illegal path character ") + dart.str(segment)));
        } else {
          dart.throw(new core.UnsupportedError.new(dart.str("Illegal path character ") + dart.str(segment)));
        }
      }
    }
  }
  static _checkWindowsPathReservedCharacters(segments, argumentError, firstSegment = 0) {
    if (segments == null) dart.nullFailed(L173, 1727, 20, "segments");
    if (argumentError == null) dart.nullFailed(L173, 1727, 35, "argumentError");
    if (firstSegment == null) dart.nullFailed(L173, 1728, 12, "firstSegment");
    for (let segment of segments[$skip](firstSegment)) {
      if (segment[$contains](core.RegExp.new("[\"*/:<>?\\\\|]"))) {
        if (dart.test(argumentError)) {
          dart.throw(new core.ArgumentError.new("Illegal character in path"));
        } else {
          dart.throw(new core.UnsupportedError.new(dart.str("Illegal character in path: ") + dart.str(segment)));
        }
      }
    }
  }
  static _checkWindowsDriveLetter(charCode, argumentError) {
    if (charCode == null) dart.nullFailed(L173, 1740, 44, "charCode");
    if (argumentError == null) dart.nullFailed(L173, 1740, 59, "argumentError");
    if (65 <= dart.notNull(charCode) && dart.notNull(charCode) <= 90 || 97 <= dart.notNull(charCode) && dart.notNull(charCode) <= 122) {
      return;
    }
    if (dart.test(argumentError)) {
      dart.throw(new core.ArgumentError.new("Illegal drive letter " + dart.notNull(core.String.fromCharCode(charCode))));
    } else {
      dart.throw(new core.UnsupportedError.new("Illegal drive letter " + dart.notNull(core.String.fromCharCode(charCode))));
    }
  }
  static _makeFileUri(path, slashTerminated) {
    if (path == null) dart.nullFailed(L173, 1754, 34, "path");
    if (slashTerminated == null) dart.nullFailed(L173, 1754, 45, "slashTerminated");
    let segments = path[$split]("/");
    if (dart.test(slashTerminated) && dart.test(segments[$isNotEmpty]) && segments[$last][$isNotEmpty]) {
      segments[$add]("");
    }
    if (path[$startsWith]("/")) {
      return core._Uri.new({scheme: "file", pathSegments: segments});
    } else {
      return core._Uri.new({pathSegments: segments});
    }
  }
  static _makeWindowsFileUrl(path, slashTerminated) {
    if (path == null) dart.nullFailed(L173, 1769, 37, "path");
    if (slashTerminated == null) dart.nullFailed(L173, 1769, 48, "slashTerminated");
    if (path[$startsWith]("\\\\?\\")) {
      if (path[$startsWith]("UNC\\", 4)) {
        path = path[$replaceRange](0, 7, "\\");
      } else {
        path = path[$substring](4);
        if (path.length < 3 || path[$codeUnitAt](1) !== 58 || path[$codeUnitAt](2) !== 92) {
          dart.throw(new core.ArgumentError.new("Windows paths with \\\\?\\ prefix must be absolute"));
        }
      }
    } else {
      path = path[$replaceAll]("/", "\\");
    }
    if (path.length > 1 && path[$codeUnitAt](1) === 58) {
      core._Uri._checkWindowsDriveLetter(path[$codeUnitAt](0), true);
      if (path.length === 2 || path[$codeUnitAt](2) !== 92) {
        dart.throw(new core.ArgumentError.new("Windows paths with drive letter must be absolute"));
      }
      let pathSegments = path[$split]("\\");
      if (dart.test(slashTerminated) && pathSegments[$last][$isNotEmpty]) {
        pathSegments[$add]("");
      }
      core._Uri._checkWindowsPathReservedCharacters(pathSegments, true, 1);
      return core._Uri.new({scheme: "file", pathSegments: pathSegments});
    }
    if (path[$startsWith]("\\")) {
      if (path[$startsWith]("\\", 1)) {
        let pathStart = path[$indexOf]("\\", 2);
        let hostPart = pathStart < 0 ? path[$substring](2) : path[$substring](2, pathStart);
        let pathPart = pathStart < 0 ? "" : path[$substring](pathStart + 1);
        let pathSegments = pathPart[$split]("\\");
        core._Uri._checkWindowsPathReservedCharacters(pathSegments, true);
        if (dart.test(slashTerminated) && pathSegments[$last][$isNotEmpty]) {
          pathSegments[$add]("");
        }
        return core._Uri.new({scheme: "file", host: hostPart, pathSegments: pathSegments});
      } else {
        let pathSegments = path[$split]("\\");
        if (dart.test(slashTerminated) && pathSegments[$last][$isNotEmpty]) {
          pathSegments[$add]("");
        }
        core._Uri._checkWindowsPathReservedCharacters(pathSegments, true);
        return core._Uri.new({scheme: "file", pathSegments: pathSegments});
      }
    } else {
      let pathSegments = path[$split]("\\");
      core._Uri._checkWindowsPathReservedCharacters(pathSegments, true);
      if (dart.test(slashTerminated) && dart.test(pathSegments[$isNotEmpty]) && pathSegments[$last][$isNotEmpty]) {
        pathSegments[$add]("");
      }
      return core._Uri.new({pathSegments: pathSegments});
    }
  }
  replace(opts) {
    let scheme = opts && 'scheme' in opts ? opts.scheme : null;
    let userInfo = opts && 'userInfo' in opts ? opts.userInfo : null;
    let host = opts && 'host' in opts ? opts.host : null;
    let port = opts && 'port' in opts ? opts.port : null;
    let path = opts && 'path' in opts ? opts.path : null;
    let pathSegments = opts && 'pathSegments' in opts ? opts.pathSegments : null;
    let query = opts && 'query' in opts ? opts.query : null;
    let queryParameters = opts && 'queryParameters' in opts ? opts.queryParameters : null;
    let fragment = opts && 'fragment' in opts ? opts.fragment : null;
    let schemeChanged = false;
    if (scheme != null) {
      scheme = core._Uri._makeScheme(scheme, 0, scheme.length);
      schemeChanged = scheme != this.scheme;
    } else {
      scheme = this.scheme;
    }
    let isFile = scheme === "file";
    if (userInfo != null) {
      userInfo = core._Uri._makeUserInfo(userInfo, 0, userInfo.length);
    } else {
      userInfo = this[_userInfo$];
    }
    if (port != null) {
      port = core._Uri._makePort(port, scheme);
    } else {
      port = this[_port$];
      if (schemeChanged) {
        port = core._Uri._makePort(port, scheme);
      }
    }
    if (host != null) {
      host = core._Uri._makeHost(host, 0, host.length, false);
    } else if (dart.test(this.hasAuthority)) {
      host = this[_host$];
    } else if (userInfo[$isNotEmpty] || port != null || isFile) {
      host = "";
    }
    let hasAuthority = host != null;
    if (path != null || pathSegments != null) {
      path = core._Uri._makePath(path, 0, core._stringOrNullLength(path), pathSegments, scheme, hasAuthority);
    } else {
      let currentPath = this.path;
      if ((isFile || hasAuthority && !currentPath[$isEmpty]) && !currentPath[$startsWith]("/")) {
        currentPath = "/" + dart.notNull(currentPath);
      }
      path = currentPath;
    }
    if (query != null || queryParameters != null) {
      query = core._Uri._makeQuery(query, 0, core._stringOrNullLength(query), queryParameters);
    } else {
      query = this[_query$];
    }
    if (fragment != null) {
      fragment = core._Uri._makeFragment(fragment, 0, fragment.length);
    } else {
      fragment = this[_fragment$];
    }
    return new core._Uri._internal(scheme, userInfo, host, port, path, query, fragment);
  }
  removeFragment() {
    if (!dart.test(this.hasFragment)) return this;
    return new core._Uri._internal(this.scheme, this[_userInfo$], this[_host$], this[_port$], this.path, this[_query$], null);
  }
  static _computePathSegments(pathToSplit) {
    if (pathToSplit == null) dart.nullFailed(L173, 1913, 51, "pathToSplit");
    if (pathToSplit[$isNotEmpty] && pathToSplit[$codeUnitAt](0) === 47) {
      pathToSplit = pathToSplit[$substring](1);
    }
    return pathToSplit[$isEmpty] ? C402 || CT.C402 : ListOfString().unmodifiable(pathToSplit[$split]("/")[$map](dart.dynamic, C425 || CT.C425));
  }
  static _computeQueryParametersAll(query) {
    if (query == null || query[$isEmpty]) return C426 || CT.C426;
    let queryParameterLists = core._Uri._splitQueryStringAll(query);
    queryParameterLists[$updateAll](C427 || CT.C427);
    return MapOfString$ListOfString().unmodifiable(queryParameterLists);
  }
  normalizePath() {
    let path = core._Uri._normalizePath(this.path, this.scheme, this.hasAuthority);
    if (path == this.path) return this;
    return this.replace({path: path});
  }
  static _makePort(port, scheme) {
    if (scheme == null) dart.nullFailed(L173, 1936, 43, "scheme");
    if (port != null && port == core._Uri._defaultPort(scheme)) return null;
    return port;
  }
  static _makeHost(host, start, end, strictIPv6) {
    if (start == null) dart.nullFailed(L173, 1953, 46, "start");
    if (end == null) dart.nullFailed(L173, 1953, 57, "end");
    if (strictIPv6 == null) dart.nullFailed(L173, 1953, 67, "strictIPv6");
    if (host == null) return null;
    if (start == end) return "";
    if (host[$codeUnitAt](start) === 91) {
      if (host[$codeUnitAt](dart.notNull(end) - 1) !== 93) {
        core._Uri._fail(host, start, "Missing end `]` to match `[` in host");
      }
      let zoneID = "";
      let index = core._Uri._checkZoneID(host, dart.notNull(start) + 1, dart.notNull(end) - 1);
      if (dart.notNull(index) < dart.notNull(end) - 1) {
        let zoneIDstart = host[$startsWith]("25", dart.notNull(index) + 1) ? dart.notNull(index) + 3 : dart.notNull(index) + 1;
        zoneID = core._Uri._normalizeZoneID(host, zoneIDstart, dart.notNull(end) - 1, "%25");
      }
      core.Uri.parseIPv6Address(host, dart.notNull(start) + 1, index);
      return host[$substring](start, index)[$toLowerCase]() + dart.notNull(zoneID) + "]";
    }
    if (!dart.test(strictIPv6)) {
      for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
        if (host[$codeUnitAt](i) === 58) {
          let zoneID = "";
          let index = core._Uri._checkZoneID(host, start, end);
          if (dart.notNull(index) < dart.notNull(end)) {
            let zoneIDstart = host[$startsWith]("25", dart.notNull(index) + 1) ? dart.notNull(index) + 3 : dart.notNull(index) + 1;
            zoneID = core._Uri._normalizeZoneID(host, zoneIDstart, end, "%25");
          }
          core.Uri.parseIPv6Address(host, start, index);
          return dart.str("[") + dart.str(host[$substring](start, index)) + dart.notNull(zoneID) + "]";
        }
      }
    }
    return core._Uri._normalizeRegName(host, start, end);
  }
  static _checkZoneID(host, start, end) {
    if (host == null) dart.nullFailed(L173, 1994, 34, "host");
    if (start == null) dart.nullFailed(L173, 1994, 44, "start");
    if (end == null) dart.nullFailed(L173, 1994, 55, "end");
    let index = host[$indexOf]("%", start);
    index = dart.notNull(index) >= dart.notNull(start) && dart.notNull(index) < dart.notNull(end) ? index : end;
    return index;
  }
  static _isZoneIDChar(char) {
    if (char == null) dart.nullFailed(L173, 2000, 33, "char");
    return dart.notNull(char) < 127 && (dart.notNull(core._Uri._zoneIDTable[$_get](char[$rightShift](4))) & 1 << (dart.notNull(char) & 15)) !== 0;
  }
  static _normalizeZoneID(host, start, end, prefix = "") {
    let t234, t234$;
    if (host == null) dart.nullFailed(L173, 2012, 41, "host");
    if (start == null) dart.nullFailed(L173, 2012, 51, "start");
    if (end == null) dart.nullFailed(L173, 2012, 62, "end");
    if (prefix == null) dart.nullFailed(L173, 2013, 15, "prefix");
    let buffer = null;
    if (prefix !== "") {
      buffer = new core.StringBuffer.new(prefix);
    }
    let sectionStart = start;
    let index = start;
    let isNormalized = true;
    while (dart.notNull(index) < dart.notNull(end)) {
      let char = host[$codeUnitAt](index);
      if (char === 37) {
        let replacement = core._Uri._normalizeEscape(host, index, true);
        if (replacement == null && isNormalized) {
          index = dart.notNull(index) + 3;
          continue;
        }
        buffer == null ? buffer = new core.StringBuffer.new() : null;
        let slice = host[$substring](sectionStart, index);
        buffer.write(slice);
        let sourceLength = 3;
        if (replacement == null) {
          replacement = host[$substring](index, dart.notNull(index) + 3);
        } else if (replacement === "%") {
          core._Uri._fail(host, index, "ZoneID should not contain % anymore");
        }
        buffer.write(replacement);
        index = dart.notNull(index) + sourceLength;
        sectionStart = index;
        isNormalized = true;
      } else if (dart.test(core._Uri._isZoneIDChar(char))) {
        if (isNormalized && 65 <= char && 90 >= char) {
          buffer == null ? buffer = new core.StringBuffer.new() : null;
          if (dart.notNull(sectionStart) < dart.notNull(index)) {
            buffer.write(host[$substring](sectionStart, index));
            sectionStart = index;
          }
          isNormalized = false;
        }
        index = dart.notNull(index) + 1;
      } else {
        let sourceLength = 1;
        if ((char & 64512) === 55296 && dart.notNull(index) + 1 < dart.notNull(end)) {
          let tail = host[$codeUnitAt](dart.notNull(index) + 1);
          if ((tail & 64512) === 56320) {
            char = 65536 | (char & 1023) << 10 | tail & 1023;
            sourceLength = 2;
          }
        }
        let slice = host[$substring](sectionStart, index);
        t234$ = (t234 = buffer, t234 == null ? buffer = new core.StringBuffer.new() : t234);
        (() => {
          t234$.write(slice);
          t234$.write(core._Uri._escapeChar(char));
          return t234$;
        })();
        index = dart.notNull(index) + sourceLength;
        sectionStart = index;
      }
    }
    if (buffer == null) return host[$substring](start, end);
    if (dart.notNull(sectionStart) < dart.notNull(end)) {
      let slice = host[$substring](sectionStart, end);
      buffer.write(slice);
    }
    return dart.toString(buffer);
  }
  static _isRegNameChar(char) {
    if (char == null) dart.nullFailed(L173, 2078, 34, "char");
    return dart.notNull(char) < 127 && (dart.notNull(core._Uri._regNameTable[$_get](char[$rightShift](4))) & 1 << (dart.notNull(char) & 15)) !== 0;
  }
  static _normalizeRegName(host, start, end) {
    let t234, t234$;
    if (host == null) dart.nullFailed(L173, 2089, 42, "host");
    if (start == null) dart.nullFailed(L173, 2089, 52, "start");
    if (end == null) dart.nullFailed(L173, 2089, 63, "end");
    let buffer = null;
    let sectionStart = start;
    let index = start;
    let isNormalized = true;
    while (dart.notNull(index) < dart.notNull(end)) {
      let char = host[$codeUnitAt](index);
      if (char === 37) {
        let replacement = core._Uri._normalizeEscape(host, index, true);
        if (replacement == null && isNormalized) {
          index = dart.notNull(index) + 3;
          continue;
        }
        buffer == null ? buffer = new core.StringBuffer.new() : null;
        let slice = host[$substring](sectionStart, index);
        if (!isNormalized) slice = slice[$toLowerCase]();
        buffer.write(slice);
        let sourceLength = 3;
        if (replacement == null) {
          replacement = host[$substring](index, dart.notNull(index) + 3);
        } else if (replacement === "%") {
          replacement = "%25";
          sourceLength = 1;
        }
        buffer.write(replacement);
        index = dart.notNull(index) + sourceLength;
        sectionStart = index;
        isNormalized = true;
      } else if (dart.test(core._Uri._isRegNameChar(char))) {
        if (isNormalized && 65 <= char && 90 >= char) {
          buffer == null ? buffer = new core.StringBuffer.new() : null;
          if (dart.notNull(sectionStart) < dart.notNull(index)) {
            buffer.write(host[$substring](sectionStart, index));
            sectionStart = index;
          }
          isNormalized = false;
        }
        index = dart.notNull(index) + 1;
      } else if (dart.test(core._Uri._isGeneralDelimiter(char))) {
        core._Uri._fail(host, index, "Invalid character");
      } else {
        let sourceLength = 1;
        if ((char & 64512) === 55296 && dart.notNull(index) + 1 < dart.notNull(end)) {
          let tail = host[$codeUnitAt](dart.notNull(index) + 1);
          if ((tail & 64512) === 56320) {
            char = 65536 | (char & 1023) << 10 | tail & 1023;
            sourceLength = 2;
          }
        }
        let slice = host[$substring](sectionStart, index);
        if (!isNormalized) slice = slice[$toLowerCase]();
        t234$ = (t234 = buffer, t234 == null ? buffer = new core.StringBuffer.new() : t234);
        (() => {
          t234$.write(slice);
          t234$.write(core._Uri._escapeChar(char));
          return t234$;
        })();
        index = dart.notNull(index) + sourceLength;
        sectionStart = index;
      }
    }
    if (buffer == null) return host[$substring](start, end);
    if (dart.notNull(sectionStart) < dart.notNull(end)) {
      let slice = host[$substring](sectionStart, end);
      if (!isNormalized) slice = slice[$toLowerCase]();
      buffer.write(slice);
    }
    return dart.toString(buffer);
  }
  static _makeScheme(scheme, start, end) {
    if (scheme == null) dart.nullFailed(L173, 2163, 36, "scheme");
    if (start == null) dart.nullFailed(L173, 2163, 48, "start");
    if (end == null) dart.nullFailed(L173, 2163, 59, "end");
    if (start == end) return "";
    let firstCodeUnit = scheme[$codeUnitAt](start);
    if (!dart.test(core._Uri._isAlphabeticCharacter(firstCodeUnit))) {
      core._Uri._fail(scheme, start, "Scheme not starting with alphabetic character");
    }
    let containsUpperCase = false;
    for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
      let codeUnit = scheme[$codeUnitAt](i);
      if (!dart.test(core._Uri._isSchemeCharacter(codeUnit))) {
        core._Uri._fail(scheme, i, "Illegal scheme character");
      }
      if (65 <= codeUnit && codeUnit <= 90) {
        containsUpperCase = true;
      }
    }
    scheme = scheme[$substring](start, end);
    if (containsUpperCase) scheme = scheme[$toLowerCase]();
    return core._Uri._canonicalizeScheme(scheme);
  }
  static _canonicalizeScheme(scheme) {
    if (scheme == null) dart.nullFailed(L173, 2187, 44, "scheme");
    if (scheme === "http") return "http";
    if (scheme === "file") return "file";
    if (scheme === "https") return "https";
    if (scheme === "package") return "package";
    return scheme;
  }
  static _makeUserInfo(userInfo, start, end) {
    if (start == null) dart.nullFailed(L173, 2195, 53, "start");
    if (end == null) dart.nullFailed(L173, 2195, 64, "end");
    if (userInfo == null) return "";
    return core._Uri._normalizeOrSubstring(userInfo, start, end, core._Uri._userinfoTable);
  }
  static _makePath(path, start, end, pathSegments, scheme, hasAuthority) {
    if (start == null) dart.nullFailed(L173, 2200, 45, "start");
    if (end == null) dart.nullFailed(L173, 2200, 56, "end");
    if (scheme == null) dart.nullFailed(L173, 2201, 46, "scheme");
    if (hasAuthority == null) dart.nullFailed(L173, 2201, 59, "hasAuthority");
    let isFile = scheme === "file";
    let ensureLeadingSlash = isFile || dart.test(hasAuthority);
    let result = null;
    if (path == null) {
      if (pathSegments == null) return isFile ? "/" : "";
      result = pathSegments[$map](core.String, dart.fn(s => {
        if (s == null) dart.nullFailed(L173, 2208, 17, "s");
        return core._Uri._uriEncode(core._Uri._pathCharTable, s, convert.utf8, false);
      }, StringToString()))[$join]("/");
    } else if (pathSegments != null) {
      dart.throw(new core.ArgumentError.new("Both path and pathSegments specified"));
    } else {
      result = core._Uri._normalizeOrSubstring(path, start, end, core._Uri._pathCharOrSlashTable, {escapeDelimiters: true});
    }
    if (result[$isEmpty]) {
      if (isFile) return "/";
    } else if (ensureLeadingSlash && !result[$startsWith]("/")) {
      result = "/" + dart.notNull(result);
    }
    result = core._Uri._normalizePath(result, scheme, hasAuthority);
    return result;
  }
  static _normalizePath(path, scheme, hasAuthority) {
    if (path == null) dart.nullFailed(L173, 2230, 39, "path");
    if (scheme == null) dart.nullFailed(L173, 2230, 52, "scheme");
    if (hasAuthority == null) dart.nullFailed(L173, 2230, 65, "hasAuthority");
    if (scheme[$isEmpty] && !dart.test(hasAuthority) && !path[$startsWith]("/")) {
      return core._Uri._normalizeRelativePath(path, scheme[$isNotEmpty] || dart.test(hasAuthority));
    }
    return core._Uri._removeDotSegments(path);
  }
  static _makeQuery(query, start, end, queryParameters) {
    if (start == null) dart.nullFailed(L173, 2237, 48, "start");
    if (end == null) dart.nullFailed(L173, 2237, 59, "end");
    if (query != null) {
      if (queryParameters != null) {
        dart.throw(new core.ArgumentError.new("Both query and queryParameters specified"));
      }
      return core._Uri._normalizeOrSubstring(query, start, end, core._Uri._queryCharTable, {escapeDelimiters: true});
    }
    if (queryParameters == null) return null;
    let result = new core.StringBuffer.new();
    let separator = "";
    function writeParameter(key, value) {
      if (key == null) dart.nullFailed(L173, 2251, 32, "key");
      result.write(separator);
      separator = "&";
      result.write(core.Uri.encodeQueryComponent(key));
      if (value != null && value[$isNotEmpty]) {
        result.write("=");
        result.write(core.Uri.encodeQueryComponent(value));
      }
    }
    dart.fn(writeParameter, StringAndStringNTovoid());
    queryParameters[$forEach](dart.fn((key, value) => {
      if (key == null) dart.nullFailed(L173, 2261, 30, "key");
      if (value == null || typeof value == 'string') {
        writeParameter(key, StringN().as(value));
      } else {
        let values = core.Iterable.as(value);
        for (let t234 of values) {
          let value = core.String.as(t234);
          writeParameter(key, value);
        }
      }
    }, StringAnddynamicToNullN()));
    return result.toString();
  }
  static _makeFragment(fragment, start, end) {
    if (start == null) dart.nullFailed(L173, 2274, 54, "start");
    if (end == null) dart.nullFailed(L173, 2274, 65, "end");
    if (fragment == null) return null;
    return core._Uri._normalizeOrSubstring(fragment, start, end, core._Uri._queryCharTable, {escapeDelimiters: true});
  }
  static _normalizeEscape(source, index, lowerCase) {
    if (source == null) dart.nullFailed(L173, 2293, 42, "source");
    if (index == null) dart.nullFailed(L173, 2293, 54, "index");
    if (lowerCase == null) dart.nullFailed(L173, 2293, 66, "lowerCase");
    if (!(source[$codeUnitAt](index) === 37)) dart.assertFailed(null, L173, 2294, 12, "source.codeUnitAt(index) == _PERCENT");
    if (dart.notNull(index) + 2 >= source.length) {
      return "%";
    }
    let firstDigit = source[$codeUnitAt](dart.notNull(index) + 1);
    let secondDigit = source[$codeUnitAt](dart.notNull(index) + 2);
    let firstDigitValue = _internal.hexDigitValue(firstDigit);
    let secondDigitValue = _internal.hexDigitValue(secondDigit);
    if (dart.notNull(firstDigitValue) < 0 || dart.notNull(secondDigitValue) < 0) {
      return "%";
    }
    let value = dart.notNull(firstDigitValue) * 16 + dart.notNull(secondDigitValue);
    if (dart.test(core._Uri._isUnreservedChar(value))) {
      if (dart.test(lowerCase) && 65 <= value && 90 >= value) {
        value = (value | 32) >>> 0;
      }
      return core.String.fromCharCode(value);
    }
    if (firstDigit >= 97 || secondDigit >= 97) {
      return source[$substring](index, dart.notNull(index) + 3)[$toUpperCase]();
    }
    return null;
  }
  static _escapeChar(char) {
    if (char == null) dart.nullFailed(L173, 2321, 33, "char");
    if (!(dart.notNull(char) <= 1114111)) dart.assertFailed(null, L173, 2322, 12, "char <= 0x10ffff");
    let codeUnits = null;
    if (dart.notNull(char) < 128) {
      codeUnits = _native_typed_data.NativeUint8List.new(3);
      codeUnits[$_set](0, 37);
      codeUnits[$_set](1, "0123456789ABCDEF"[$codeUnitAt](char[$rightShift](4)));
      codeUnits[$_set](2, "0123456789ABCDEF"[$codeUnitAt](dart.notNull(char) & 15));
    } else {
      let flag = 192;
      let encodedBytes = 2;
      if (dart.notNull(char) > 2047) {
        flag = 224;
        encodedBytes = 3;
        if (dart.notNull(char) > 65535) {
          encodedBytes = 4;
          flag = 240;
        }
      }
      codeUnits = _native_typed_data.NativeUint8List.new(3 * encodedBytes);
      let index = 0;
      while ((encodedBytes = encodedBytes - 1) >= 0) {
        let byte = (char[$rightShift](6 * encodedBytes) & 63 | flag) >>> 0;
        codeUnits[$_set](index, 37);
        codeUnits[$_set](index + 1, "0123456789ABCDEF"[$codeUnitAt](byte[$rightShift](4)));
        codeUnits[$_set](index + 2, "0123456789ABCDEF"[$codeUnitAt](byte & 15));
        index = index + 3;
        flag = 128;
      }
    }
    return core.String.fromCharCodes(codeUnits);
  }
  static _normalizeOrSubstring(component, start, end, charTable, opts) {
    let t235;
    if (component == null) dart.nullFailed(L173, 2363, 14, "component");
    if (start == null) dart.nullFailed(L173, 2363, 29, "start");
    if (end == null) dart.nullFailed(L173, 2363, 40, "end");
    if (charTable == null) dart.nullFailed(L173, 2363, 55, "charTable");
    let escapeDelimiters = opts && 'escapeDelimiters' in opts ? opts.escapeDelimiters : false;
    if (escapeDelimiters == null) dart.nullFailed(L173, 2364, 13, "escapeDelimiters");
    t235 = core._Uri._normalize(component, start, end, charTable, {escapeDelimiters: escapeDelimiters});
    return t235 == null ? component[$substring](start, end) : t235;
  }
  static _normalize(component, start, end, charTable, opts) {
    let t235, t235$;
    if (component == null) dart.nullFailed(L173, 2382, 14, "component");
    if (start == null) dart.nullFailed(L173, 2382, 29, "start");
    if (end == null) dart.nullFailed(L173, 2382, 40, "end");
    if (charTable == null) dart.nullFailed(L173, 2382, 55, "charTable");
    let escapeDelimiters = opts && 'escapeDelimiters' in opts ? opts.escapeDelimiters : false;
    if (escapeDelimiters == null) dart.nullFailed(L173, 2383, 13, "escapeDelimiters");
    let buffer = null;
    let sectionStart = start;
    let index = start;
    while (dart.notNull(index) < dart.notNull(end)) {
      let char = component[$codeUnitAt](index);
      if (char < 127 && (dart.notNull(charTable[$_get](char[$rightShift](4))) & 1 << (char & 15)) !== 0) {
        index = dart.notNull(index) + 1;
      } else {
        let replacement = null;
        let sourceLength = null;
        if (char === 37) {
          replacement = core._Uri._normalizeEscape(component, index, false);
          if (replacement == null) {
            index = dart.notNull(index) + 3;
            continue;
          }
          if ("%" === replacement) {
            replacement = "%25";
            sourceLength = 1;
          } else {
            sourceLength = 3;
          }
        } else if (!dart.test(escapeDelimiters) && dart.test(core._Uri._isGeneralDelimiter(char))) {
          core._Uri._fail(component, index, "Invalid character");
          dart.throw("unreachable");
        } else {
          sourceLength = 1;
          if ((char & 64512) === 55296) {
            if (dart.notNull(index) + 1 < dart.notNull(end)) {
              let tail = component[$codeUnitAt](dart.notNull(index) + 1);
              if ((tail & 64512) === 56320) {
                sourceLength = 2;
                char = 65536 | (char & 1023) << 10 | tail & 1023;
              }
            }
          }
          replacement = core._Uri._escapeChar(char);
        }
        t235$ = (t235 = buffer, t235 == null ? buffer = new core.StringBuffer.new() : t235);
        (() => {
          t235$.write(component[$substring](sectionStart, index));
          t235$.write(replacement);
          return t235$;
        })();
        index = dart.notNull(index) + dart.notNull(sourceLength);
        sectionStart = index;
      }
    }
    if (buffer == null) {
      return null;
    }
    if (dart.notNull(sectionStart) < dart.notNull(end)) {
      buffer.write(component[$substring](sectionStart, end));
    }
    return dart.toString(buffer);
  }
  static _isSchemeCharacter(ch) {
    if (ch == null) dart.nullFailed(L173, 2443, 38, "ch");
    return dart.notNull(ch) < 128 && (dart.notNull(core._Uri._schemeTable[$_get](ch[$rightShift](4))) & 1 << (dart.notNull(ch) & 15)) !== 0;
  }
  static _isGeneralDelimiter(ch) {
    if (ch == null) dart.nullFailed(L173, 2447, 39, "ch");
    return dart.notNull(ch) <= 93 && (dart.notNull(core._Uri._genDelimitersTable[$_get](ch[$rightShift](4))) & 1 << (dart.notNull(ch) & 15)) !== 0;
  }
  get isAbsolute() {
    return this.scheme !== "" && this.fragment === "";
  }
  [_mergePaths](base, reference) {
    if (base == null) dart.nullFailed(L173, 2457, 29, "base");
    if (reference == null) dart.nullFailed(L173, 2457, 42, "reference");
    let backCount = 0;
    let refStart = 0;
    while (reference[$startsWith]("../", refStart)) {
      refStart = refStart + 3;
      backCount = backCount + 1;
    }
    let baseEnd = base[$lastIndexOf]("/");
    while (baseEnd > 0 && backCount > 0) {
      let newEnd = base[$lastIndexOf]("/", baseEnd - 1);
      if (newEnd < 0) {
        break;
      }
      let delta = baseEnd - newEnd;
      if ((delta === 2 || delta === 3) && base[$codeUnitAt](newEnd + 1) === 46 && (delta === 2 || base[$codeUnitAt](newEnd + 2) === 46)) {
        break;
      }
      baseEnd = newEnd;
      backCount = backCount - 1;
    }
    return base[$replaceRange](baseEnd + 1, null, reference[$substring](refStart - 3 * backCount));
  }
  static _mayContainDotSegments(path) {
    if (path == null) dart.nullFailed(L173, 2495, 45, "path");
    if (path[$startsWith](".")) return true;
    let index = path[$indexOf]("/.");
    return index !== -1;
  }
  static _removeDotSegments(path) {
    if (path == null) dart.nullFailed(L173, 2506, 43, "path");
    if (!dart.test(core._Uri._mayContainDotSegments(path))) return path;
    if (!path[$isNotEmpty]) dart.assertFailed(null, L173, 2508, 12, "path.isNotEmpty");
    let output = JSArrayOfString().of([]);
    let appendSlash = false;
    for (let segment of path[$split]("/")) {
      appendSlash = false;
      if (segment === "..") {
        if (dart.test(output[$isNotEmpty])) {
          output[$removeLast]();
          if (dart.test(output[$isEmpty])) {
            output[$add]("");
          }
        }
        appendSlash = true;
      } else if ("." === segment) {
        appendSlash = true;
      } else {
        output[$add](segment);
      }
    }
    if (appendSlash) output[$add]("");
    return output[$join]("/");
  }
  static _normalizeRelativePath(path, allowScheme) {
    if (path == null) dart.nullFailed(L173, 2542, 47, "path");
    if (allowScheme == null) dart.nullFailed(L173, 2542, 58, "allowScheme");
    if (!!path[$startsWith]("/")) dart.assertFailed(null, L173, 2543, 12, "!path.startsWith('/')");
    if (!dart.test(core._Uri._mayContainDotSegments(path))) {
      if (!dart.test(allowScheme)) path = core._Uri._escapeScheme(path);
      return path;
    }
    if (!path[$isNotEmpty]) dart.assertFailed(null, L173, 2548, 12, "path.isNotEmpty");
    let output = JSArrayOfString().of([]);
    let appendSlash = false;
    for (let segment of path[$split]("/")) {
      appendSlash = false;
      if (".." === segment) {
        if (!dart.test(output[$isEmpty]) && output[$last] !== "..") {
          output[$removeLast]();
          appendSlash = true;
        } else {
          output[$add]("..");
        }
      } else if ("." === segment) {
        appendSlash = true;
      } else {
        output[$add](segment);
      }
    }
    if (dart.test(output[$isEmpty]) || output[$length] === 1 && output[$_get](0)[$isEmpty]) {
      return "./";
    }
    if (appendSlash || output[$last] === "..") output[$add]("");
    if (!dart.test(allowScheme)) output[$_set](0, core._Uri._escapeScheme(output[$_get](0)));
    return output[$join]("/");
  }
  static _escapeScheme(path) {
    if (path == null) dart.nullFailed(L173, 2575, 38, "path");
    if (path.length >= 2 && dart.test(core._Uri._isAlphabeticCharacter(path[$codeUnitAt](0)))) {
      for (let i = 1; i < path.length; i = i + 1) {
        let char = path[$codeUnitAt](i);
        if (char === 58) {
          return dart.str(path[$substring](0, i)) + dart.str("%3A") + dart.str(path[$substring](i + 1));
        }
        if (char > 127 || (dart.notNull(core._Uri._schemeTable[$_get](char[$rightShift](4))) & 1 << (char & 15)) === 0) {
          break;
        }
      }
    }
    return path;
  }
  resolve(reference) {
    if (reference == null) dart.nullFailed(L173, 2591, 22, "reference");
    return this.resolveUri(core.Uri.parse(reference));
  }
  resolveUri(reference) {
    if (reference == null) dart.nullFailed(L173, 2595, 22, "reference");
    let targetScheme = null;
    let targetUserInfo = "";
    let targetHost = null;
    let targetPort = null;
    let targetPath = null;
    let targetQuery = null;
    if (reference.scheme[$isNotEmpty]) {
      targetScheme = reference.scheme;
      if (dart.test(reference.hasAuthority)) {
        targetUserInfo = reference.userInfo;
        targetHost = reference.host;
        targetPort = dart.test(reference.hasPort) ? reference.port : null;
      }
      targetPath = core._Uri._removeDotSegments(reference.path);
      if (dart.test(reference.hasQuery)) {
        targetQuery = reference.query;
      }
    } else {
      targetScheme = this.scheme;
      if (dart.test(reference.hasAuthority)) {
        targetUserInfo = reference.userInfo;
        targetHost = reference.host;
        targetPort = core._Uri._makePort(dart.test(reference.hasPort) ? reference.port : null, targetScheme);
        targetPath = core._Uri._removeDotSegments(reference.path);
        if (dart.test(reference.hasQuery)) targetQuery = reference.query;
      } else {
        targetUserInfo = this[_userInfo$];
        targetHost = this[_host$];
        targetPort = this[_port$];
        if (reference.path === "") {
          targetPath = this.path;
          if (dart.test(reference.hasQuery)) {
            targetQuery = reference.query;
          } else {
            targetQuery = this[_query$];
          }
        } else {
          if (dart.test(reference.hasAbsolutePath)) {
            targetPath = core._Uri._removeDotSegments(reference.path);
          } else {
            if (dart.test(this.hasEmptyPath)) {
              if (!dart.test(this.hasAuthority)) {
                if (!dart.test(this.hasScheme)) {
                  targetPath = reference.path;
                } else {
                  targetPath = core._Uri._removeDotSegments(reference.path);
                }
              } else {
                targetPath = core._Uri._removeDotSegments("/" + dart.notNull(reference.path));
              }
            } else {
              let mergedPath = this[_mergePaths](this.path, reference.path);
              if (dart.test(this.hasScheme) || dart.test(this.hasAuthority) || dart.test(this.hasAbsolutePath)) {
                targetPath = core._Uri._removeDotSegments(mergedPath);
              } else {
                targetPath = core._Uri._normalizeRelativePath(mergedPath, dart.test(this.hasScheme) || dart.test(this.hasAuthority));
              }
            }
          }
          if (dart.test(reference.hasQuery)) targetQuery = reference.query;
        }
      }
    }
    let fragment = dart.test(reference.hasFragment) ? reference.fragment : null;
    return new core._Uri._internal(targetScheme, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, fragment);
  }
  get hasScheme() {
    return this.scheme[$isNotEmpty];
  }
  get hasAuthority() {
    return this[_host$] != null;
  }
  get hasPort() {
    return this[_port$] != null;
  }
  get hasQuery() {
    return this[_query$] != null;
  }
  get hasFragment() {
    return this[_fragment$] != null;
  }
  get hasEmptyPath() {
    return this.path[$isEmpty];
  }
  get hasAbsolutePath() {
    return this.path[$startsWith]("/");
  }
  get origin() {
    if (this.scheme === "") {
      dart.throw(new core.StateError.new(dart.str("Cannot use origin without a scheme: ") + dart.str(this)));
    }
    if (this.scheme !== "http" && this.scheme !== "https") {
      dart.throw(new core.StateError.new(dart.str("Origin is only applicable schemes http and https: ") + dart.str(this)));
    }
    let host = this[_host$];
    if (host == null || host === "") {
      dart.throw(new core.StateError.new(dart.str("A ") + dart.str(this.scheme) + dart.str(": URI should have a non-empty host name: ") + dart.str(this)));
    }
    let port = this[_port$];
    if (port == null) return dart.str(this.scheme) + dart.str("://") + dart.str(host);
    return dart.str(this.scheme) + dart.str("://") + dart.str(host) + dart.str(":") + dart.str(port);
  }
  toFilePath(opts) {
    let t235;
    let windows = opts && 'windows' in opts ? opts.windows : null;
    if (this.scheme !== "" && this.scheme !== "file") {
      dart.throw(new core.UnsupportedError.new(dart.str("Cannot extract a file path from a ") + dart.str(this.scheme) + dart.str(" URI")));
    }
    if (this.query !== "") {
      dart.throw(new core.UnsupportedError.new("Cannot extract a file path from a URI with a query component"));
    }
    if (this.fragment !== "") {
      dart.throw(new core.UnsupportedError.new("Cannot extract a file path from a URI with a fragment component"));
    }
    return dart.test((t235 = windows, t235 == null ? core._Uri._isWindows : t235)) ? core._Uri._toWindowsFilePath(this) : this[_toFilePath]();
  }
  [_toFilePath]() {
    if (dart.test(this.hasAuthority) && this.host !== "") {
      dart.throw(new core.UnsupportedError.new(dart.str("Cannot extract a non-Windows file path from a file URI ") + dart.str("with an authority")));
    }
    let pathSegments = this.pathSegments;
    core._Uri._checkNonWindowsPathReservedCharacters(pathSegments, false);
    let result = new core.StringBuffer.new();
    if (dart.test(this.hasAbsolutePath)) result.write("/");
    result.writeAll(pathSegments, "/");
    return result.toString();
  }
  static _toWindowsFilePath(uri) {
    if (uri == null) dart.nullFailed(L173, 2738, 40, "uri");
    let hasDriveLetter = false;
    let segments = uri.pathSegments;
    if (dart.notNull(segments[$length]) > 0 && segments[$_get](0).length === 2 && segments[$_get](0)[$codeUnitAt](1) === 58) {
      core._Uri._checkWindowsDriveLetter(segments[$_get](0)[$codeUnitAt](0), false);
      core._Uri._checkWindowsPathReservedCharacters(segments, false, 1);
      hasDriveLetter = true;
    } else {
      core._Uri._checkWindowsPathReservedCharacters(segments, false, 0);
    }
    let result = new core.StringBuffer.new();
    if (dart.test(uri.hasAbsolutePath) && !hasDriveLetter) result.write("\\");
    if (dart.test(uri.hasAuthority)) {
      let host = uri.host;
      if (host[$isNotEmpty]) {
        result.write("\\");
        result.write(host);
        result.write("\\");
      }
    }
    result.writeAll(segments, "\\");
    if (hasDriveLetter && segments[$length] === 1) result.write("\\");
    return result.toString();
  }
  [_writeAuthority](ss) {
    if (ss == null) dart.nullFailed(L173, 2765, 35, "ss");
    if (this[_userInfo$][$isNotEmpty]) {
      ss.write(this[_userInfo$]);
      ss.write("@");
    }
    if (this[_host$] != null) ss.write(this[_host$]);
    if (this[_port$] != null) {
      ss.write(":");
      ss.write(this[_port$]);
    }
  }
  get data() {
    return this.scheme === "data" ? core.UriData.fromUri(this) : null;
  }
  toString() {
    return this[_text$];
  }
  [_initializeText]() {
    let t235, t235$, t235$0;
    let sb = new core.StringBuffer.new();
    if (this.scheme[$isNotEmpty]) {
      t235 = sb;
      (() => {
        t235.write(this.scheme);
        t235.write(":");
        return t235;
      })();
    }
    if (dart.test(this.hasAuthority) || this.scheme === "file") {
      sb.write("//");
      this[_writeAuthority](sb);
    }
    sb.write(this.path);
    if (this[_query$] != null) {
      t235$ = sb;
      (() => {
        t235$.write("?");
        t235$.write(this[_query$]);
        return t235$;
      })();
    }
    if (this[_fragment$] != null) {
      t235$0 = sb;
      (() => {
        t235$0.write("#");
        t235$0.write(this[_fragment$]);
        return t235$0;
      })();
    }
    return sb.toString();
  }
  _equals(other) {
    if (other == null) return false;
    if (this === other) return true;
    return core.Uri.is(other) && this.scheme == other.scheme && dart.equals(this.hasAuthority, other.hasAuthority) && this.userInfo == other.userInfo && this.host == other.host && this.port == other.port && this.path == other.path && dart.equals(this.hasQuery, other.hasQuery) && this.query == other.query && dart.equals(this.hasFragment, other.hasFragment) && this.fragment == other.fragment;
  }
  static _createList() {
    return JSArrayOfString().of([]);
  }
  static _splitQueryStringAll(query, opts) {
    if (query == null) dart.nullFailed(L173, 2821, 64, "query");
    let encoding = opts && 'encoding' in opts ? opts.encoding : C107 || CT.C107;
    if (encoding == null) dart.nullFailed(L173, 2822, 17, "encoding");
    let result = new (IdentityMapOfString$ListOfString()).new();
    let i = 0;
    let start = 0;
    let equalsIndex = -1;
    function parsePair(start, equalsIndex, end) {
      if (start == null) dart.nullFailed(L173, 2828, 24, "start");
      if (equalsIndex == null) dart.nullFailed(L173, 2828, 35, "equalsIndex");
      if (end == null) dart.nullFailed(L173, 2828, 52, "end");
      let key = null;
      let value = null;
      if (start == end) return;
      if (dart.notNull(equalsIndex) < 0) {
        key = core._Uri._uriDecode(query, start, end, encoding, true);
        value = "";
      } else {
        key = core._Uri._uriDecode(query, start, equalsIndex, encoding, true);
        value = core._Uri._uriDecode(query, dart.notNull(equalsIndex) + 1, end, encoding, true);
      }
      result[$putIfAbsent](key, C428 || CT.C428)[$add](value);
    }
    dart.fn(parsePair, intAndintAndintTovoid());
    while (i < query.length) {
      let char = query[$codeUnitAt](i);
      if (char === 61) {
        if (equalsIndex < 0) equalsIndex = i;
      } else if (char === 38) {
        parsePair(start, equalsIndex, i);
        start = i + 1;
        equalsIndex = -1;
      }
      i = i + 1;
    }
    parsePair(start, equalsIndex, i);
    return result;
  }
  static _uriEncode(canonicalTable, text, encoding, spaceToPlus) {
    if (canonicalTable == null) dart.nullFailed(L7, 861, 38, "canonicalTable");
    if (text == null) dart.nullFailed(L7, 861, 61, "text");
    if (encoding == null) dart.nullFailed(L7, 862, 16, "encoding");
    if (spaceToPlus == null) dart.nullFailed(L7, 862, 31, "spaceToPlus");
    if (encoding == convert.utf8 && dart.test(core._Uri._needsNoEncoding.hasMatch(text))) {
      return text;
    }
    let result = new core.StringBuffer.new("");
    let bytes = encoding.encode(text);
    for (let i = 0; i < dart.notNull(bytes[$length]); i = i + 1) {
      let byte = bytes[$_get](i);
      if (dart.notNull(byte) < 128 && (dart.notNull(canonicalTable[$_get](byte[$rightShift](4))) & 1 << (dart.notNull(byte) & 15)) !== 0) {
        result.writeCharCode(byte);
      } else if (dart.test(spaceToPlus) && byte === 32) {
        result.write("+");
      } else {
        result.write("%");
        result.write("0123456789ABCDEF"[$_get](dart.notNull(byte) >> 4 & 15));
        result.write("0123456789ABCDEF"[$_get](dart.notNull(byte) & 15));
      }
    }
    return result.toString();
  }
  static _hexCharPairToByte(s, pos) {
    if (s == null) dart.nullFailed(L173, 2864, 40, "s");
    if (pos == null) dart.nullFailed(L173, 2864, 47, "pos");
    let byte = 0;
    for (let i = 0; i < 2; i = i + 1) {
      let charCode = s[$codeUnitAt](dart.notNull(pos) + i);
      if (48 <= charCode && charCode <= 57) {
        byte = byte * 16 + charCode - 48;
      } else {
        charCode = (charCode | 32) >>> 0;
        if (97 <= charCode && charCode <= 102) {
          byte = byte * 16 + charCode - 87;
        } else {
          dart.throw(new core.ArgumentError.new("Invalid URL encoding"));
        }
      }
    }
    return byte;
  }
  static _uriDecode(text, start, end, encoding, plusToSpace) {
    if (text == null) dart.nullFailed(L173, 2896, 14, "text");
    if (start == null) dart.nullFailed(L173, 2896, 24, "start");
    if (end == null) dart.nullFailed(L173, 2896, 35, "end");
    if (encoding == null) dart.nullFailed(L173, 2896, 49, "encoding");
    if (plusToSpace == null) dart.nullFailed(L173, 2896, 64, "plusToSpace");
    if (!(0 <= dart.notNull(start))) dart.assertFailed(null, L173, 2897, 12, "0 <= start");
    if (!(dart.notNull(start) <= dart.notNull(end))) dart.assertFailed(null, L173, 2898, 12, "start <= end");
    if (!(dart.notNull(end) <= text.length)) dart.assertFailed(null, L173, 2899, 12, "end <= text.length");
    let simple = true;
    for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
      let codeUnit = text[$codeUnitAt](i);
      if (codeUnit > 127 || codeUnit === 37 || dart.test(plusToSpace) && codeUnit === 43) {
        simple = false;
        break;
      }
    }
    let bytes = null;
    if (simple) {
      if (dart.equals(convert.utf8, encoding) || dart.equals(convert.latin1, encoding) || dart.equals(convert.ascii, encoding)) {
        return text[$substring](start, end);
      } else {
        bytes = text[$substring](start, end)[$codeUnits];
      }
    } else {
      bytes = JSArrayOfint().of([]);
      for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
        let codeUnit = text[$codeUnitAt](i);
        if (codeUnit > 127) {
          dart.throw(new core.ArgumentError.new("Illegal percent encoding in URI"));
        }
        if (codeUnit === 37) {
          if (dart.notNull(i) + 3 > text.length) {
            dart.throw(new core.ArgumentError.new("Truncated URI"));
          }
          bytes[$add](core._Uri._hexCharPairToByte(text, dart.notNull(i) + 1));
          i = dart.notNull(i) + 2;
        } else if (dart.test(plusToSpace) && codeUnit === 43) {
          bytes[$add](32);
        } else {
          bytes[$add](codeUnit);
        }
      }
    }
    return encoding.decode(bytes);
  }
  static _isAlphabeticCharacter(codeUnit) {
    if (codeUnit == null) dart.nullFailed(L173, 2941, 42, "codeUnit");
    let lowerCase = (dart.notNull(codeUnit) | 32) >>> 0;
    return 97 <= lowerCase && lowerCase <= 122;
  }
  static _isUnreservedChar(char) {
    if (char == null) dart.nullFailed(L173, 2946, 37, "char");
    return dart.notNull(char) < 127 && (dart.notNull(core._Uri._unreservedTable[$_get](char[$rightShift](4))) & 1 << (dart.notNull(char) & 15)) !== 0;
  }
};
(core._Uri._internal = function(scheme, _userInfo, _host, _port, path, _query, _fragment) {
  if (scheme == null) dart.nullFailed(L173, 1437, 23, "scheme");
  if (_userInfo == null) dart.nullFailed(L173, 1437, 36, "_userInfo");
  if (path == null) dart.nullFailed(L173, 1437, 76, "path");
  this[___Uri__text] = null;
  this[___Uri_pathSegments] = null;
  this[___Uri_hashCode] = null;
  this[___Uri_queryParameters] = null;
  this[___Uri_queryParametersAll] = null;
  this.scheme = scheme;
  this[_userInfo$] = _userInfo;
  this[_host$] = _host;
  this[_port$] = _port;
  this.path = path;
  this[_query$] = _query;
  this[_fragment$] = _fragment;
  ;
}).prototype = core._Uri.prototype;
dart.addTypeTests(core._Uri);
dart.addTypeCaches(core._Uri);
core._Uri[dart.implements] = () => [core.Uri];
dart.setMethodSignature(core._Uri, () => ({
  __proto__: dart.getMethods(core._Uri.__proto__),
  isScheme: dart.fnType(core.bool, [core.String]),
  replace: dart.fnType(core.Uri, [], {fragment: dart.nullable(core.String), host: dart.nullable(core.String), path: dart.nullable(core.String), pathSegments: dart.nullable(core.Iterable$(core.String)), port: dart.nullable(core.int), query: dart.nullable(core.String), queryParameters: dart.nullable(core.Map$(core.String, dart.dynamic)), scheme: dart.nullable(core.String), userInfo: dart.nullable(core.String)}, {}),
  removeFragment: dart.fnType(core.Uri, []),
  normalizePath: dart.fnType(core.Uri, []),
  [_mergePaths]: dart.fnType(core.String, [core.String, core.String]),
  resolve: dart.fnType(core.Uri, [core.String]),
  resolveUri: dart.fnType(core.Uri, [core.Uri]),
  toFilePath: dart.fnType(core.String, [], {windows: dart.nullable(core.bool)}, {}),
  [_toFilePath]: dart.fnType(core.String, []),
  [_writeAuthority]: dart.fnType(dart.void, [core.StringSink]),
  [_initializeText]: dart.fnType(core.String, [])
}));
dart.setGetterSignature(core._Uri, () => ({
  __proto__: dart.getGetters(core._Uri.__proto__),
  [_text$]: core.String,
  pathSegments: core.List$(core.String),
  queryParameters: core.Map$(core.String, core.String),
  queryParametersAll: core.Map$(core.String, core.List$(core.String)),
  authority: core.String,
  userInfo: core.String,
  host: core.String,
  port: core.int,
  query: core.String,
  fragment: core.String,
  isAbsolute: core.bool,
  hasScheme: core.bool,
  hasAuthority: core.bool,
  hasPort: core.bool,
  hasQuery: core.bool,
  hasFragment: core.bool,
  hasEmptyPath: core.bool,
  hasAbsolutePath: core.bool,
  origin: core.String,
  data: dart.nullable(core.UriData)
}));
dart.setLibraryUri(core._Uri, L8$);
dart.setFieldSignature(core._Uri, () => ({
  __proto__: dart.getFields(core._Uri.__proto__),
  scheme: dart.finalFieldType(core.String),
  [_userInfo$]: dart.finalFieldType(core.String),
  [_host$]: dart.finalFieldType(dart.nullable(core.String)),
  [_port$]: dart.fieldType(dart.nullable(core.int)),
  path: dart.finalFieldType(core.String),
  [_query$]: dart.finalFieldType(dart.nullable(core.String)),
  [_fragment$]: dart.finalFieldType(dart.nullable(core.String)),
  [___Uri__text]: dart.fieldType(dart.nullable(core.String)),
  [___Uri_pathSegments]: dart.fieldType(dart.nullable(core.List$(core.String))),
  [___Uri_hashCode]: dart.fieldType(dart.nullable(core.int)),
  [___Uri_queryParameters]: dart.fieldType(dart.nullable(core.Map$(core.String, core.String))),
  [___Uri_queryParametersAll]: dart.fieldType(dart.nullable(core.Map$(core.String, core.List$(core.String))))
}));
dart.defineExtensionMethods(core._Uri, ['toString', '_equals']);
dart.defineExtensionAccessors(core._Uri, ['hashCode']);
dart.defineLazy(core._Uri, {
  /*core._Uri._isWindowsCached*/get _isWindowsCached() {
    return typeof process != "undefined" && Object.prototype.toString.call(process) == "[object process]" && process.platform == "win32";
  },
  /*core._Uri._needsNoEncoding*/get _needsNoEncoding() {
    return core.RegExp.new("^[\\-\\.0-9A-Z_a-z~]*$");
  },
  /*core._Uri._unreservedTable*/get _unreservedTable() {
    return C429 || CT.C429;
  },
  /*core._Uri._unreserved2396Table*/get _unreserved2396Table() {
    return C430 || CT.C430;
  },
  /*core._Uri._encodeFullTable*/get _encodeFullTable() {
    return C431 || CT.C431;
  },
  /*core._Uri._schemeTable*/get _schemeTable() {
    return C432 || CT.C432;
  },
  /*core._Uri._genDelimitersTable*/get _genDelimitersTable() {
    return C433 || CT.C433;
  },
  /*core._Uri._userinfoTable*/get _userinfoTable() {
    return C434 || CT.C434;
  },
  /*core._Uri._regNameTable*/get _regNameTable() {
    return C435 || CT.C435;
  },
  /*core._Uri._pathCharTable*/get _pathCharTable() {
    return C436 || CT.C436;
  },
  /*core._Uri._pathCharOrSlashTable*/get _pathCharOrSlashTable() {
    return C437 || CT.C437;
  },
  /*core._Uri._queryCharTable*/get _queryCharTable() {
    return C438 || CT.C438;
  },
  /*core._Uri._zoneIDTable*/get _zoneIDTable() {
    return C429 || CT.C429;
  }
}, false);
var _separatorIndices$ = dart.privateName(core, "_separatorIndices");
var _uriCache$ = dart.privateName(core, "_uriCache");
var _computeUri = dart.privateName(core, "_computeUri");
var C439;
core.UriData = class UriData extends core.Object {
  static fromString(content, opts) {
    let t235;
    if (content == null) dart.nullFailed(L173, 3252, 37, "content");
    let mimeType = opts && 'mimeType' in opts ? opts.mimeType : null;
    let encoding = opts && 'encoding' in opts ? opts.encoding : null;
    let parameters = opts && 'parameters' in opts ? opts.parameters : null;
    let base64 = opts && 'base64' in opts ? opts.base64 : false;
    if (base64 == null) dart.nullFailed(L173, 3256, 12, "base64");
    let buffer = new core.StringBuffer.new();
    let indices = JSArrayOfint().of([-1]);
    let charsetName = (t235 = parameters, t235 == null ? null : t235[$_get]("charset"));
    let encodingName = null;
    if (encoding == null) {
      if (charsetName != null) {
        encoding = convert.Encoding.getByName(charsetName);
      }
    } else if (charsetName == null) {
      encodingName = encoding.name;
    }
    encoding == null ? encoding = convert.ascii : null;
    core.UriData._writeUri(mimeType, encodingName, parameters, buffer, indices);
    indices[$add](buffer.length);
    if (dart.test(base64)) {
      buffer.write(";base64,");
      indices[$add](dart.notNull(buffer.length) - 1);
      buffer.write(encoding.fuse(core.String, core.UriData._base64).encode(content));
    } else {
      buffer.write(",");
      core.UriData._uriEncodeBytes(core.UriData._uricTable, encoding.encode(content), buffer);
    }
    return new core.UriData.__(buffer.toString(), indices, null);
  }
  static fromBytes(bytes, opts) {
    if (bytes == null) dart.nullFailed(L173, 3289, 39, "bytes");
    let mimeType = opts && 'mimeType' in opts ? opts.mimeType : "application/octet-stream";
    if (mimeType == null) dart.nullFailed(L173, 3290, 15, "mimeType");
    let parameters = opts && 'parameters' in opts ? opts.parameters : null;
    let percentEncoded = opts && 'percentEncoded' in opts ? opts.percentEncoded : false;
    if (percentEncoded == null) dart.nullFailed(L173, 3292, 12, "percentEncoded");
    let buffer = new core.StringBuffer.new();
    let indices = JSArrayOfint().of([-1]);
    core.UriData._writeUri(mimeType, null, parameters, buffer, indices);
    indices[$add](buffer.length);
    if (dart.test(percentEncoded)) {
      buffer.write(",");
      core.UriData._uriEncodeBytes(core.UriData._uricTable, bytes, buffer);
    } else {
      buffer.write(";base64,");
      indices[$add](dart.notNull(buffer.length) - 1);
      core.UriData._base64.encoder.startChunkedConversion(new (_StringSinkConversionSinkOfStringSink()).new(buffer)).addSlice(bytes, 0, bytes[$length], true);
    }
    return new core.UriData.__(buffer.toString(), indices, null);
  }
  static fromUri(uri) {
    if (uri == null) dart.nullFailed(L173, 3318, 31, "uri");
    if (uri.scheme !== "data") {
      dart.throw(new core.ArgumentError.value(uri, "uri", "Scheme must be 'data'"));
    }
    if (dart.test(uri.hasAuthority)) {
      dart.throw(new core.ArgumentError.value(uri, "uri", "Data uri must not have authority"));
    }
    if (dart.test(uri.hasFragment)) {
      dart.throw(new core.ArgumentError.value(uri, "uri", "Data uri must not have a fragment part"));
    }
    if (!dart.test(uri.hasQuery)) {
      return core.UriData._parse(uri.path, 0, uri);
    }
    return core.UriData._parse(dart.toString(uri), 5, uri);
  }
  static _writeUri(mimeType, charsetName, parameters, buffer, indices) {
    let t235, t235$;
    if (buffer == null) dart.nullFailed(L173, 3348, 20, "buffer");
    if (mimeType == null || mimeType === "text/plain") {
      mimeType = "";
    }
    if (mimeType[$isEmpty] || mimeType === "application/octet-stream") {
      buffer.write(mimeType);
    } else {
      let slashIndex = core.UriData._validateMimeType(mimeType);
      if (dart.notNull(slashIndex) < 0) {
        dart.throw(new core.ArgumentError.value(mimeType, "mimeType", "Invalid MIME type"));
      }
      buffer.write(core._Uri._uriEncode(core.UriData._tokenCharTable, mimeType[$substring](0, slashIndex), convert.utf8, false));
      buffer.write("/");
      buffer.write(core._Uri._uriEncode(core.UriData._tokenCharTable, mimeType[$substring](dart.notNull(slashIndex) + 1), convert.utf8, false));
    }
    if (charsetName != null) {
      if (indices != null) {
        t235 = indices;
        (() => {
          t235[$add](buffer.length);
          t235[$add](dart.notNull(buffer.length) + 8);
          return t235;
        })();
      }
      buffer.write(";charset=");
      buffer.write(core._Uri._uriEncode(core.UriData._tokenCharTable, charsetName, convert.utf8, false));
    }
    t235$ = parameters;
    t235$ == null ? null : t235$[$forEach](dart.fn((key, value) => {
      let t236, t236$;
      if (key == null) dart.nullFailed(L173, 3373, 26, "key");
      if (value == null) dart.nullFailed(L173, 3373, 31, "value");
      if (key[$isEmpty]) {
        dart.throw(new core.ArgumentError.value("", "Parameter names must not be empty"));
      }
      if (value[$isEmpty]) {
        dart.throw(new core.ArgumentError.value("", "Parameter values must not be empty", dart.str("parameters[\"") + dart.str(key) + dart.str("\"]")));
      }
      t236 = indices;
      t236 == null ? null : t236[$add](buffer.length);
      buffer.write(";");
      buffer.write(core._Uri._uriEncode(core.UriData._tokenCharTable, key, convert.utf8, false));
      t236$ = indices;
      t236$ == null ? null : t236$[$add](buffer.length);
      buffer.write("=");
      buffer.write(core._Uri._uriEncode(core.UriData._tokenCharTable, value, convert.utf8, false));
    }, StringAndStringToNullN()));
  }
  static _validateMimeType(mimeType) {
    if (mimeType == null) dart.nullFailed(L173, 3400, 39, "mimeType");
    let slashIndex = -1;
    for (let i = 0; i < mimeType.length; i = i + 1) {
      let char = mimeType[$codeUnitAt](i);
      if (char !== 47) continue;
      if (slashIndex < 0) {
        slashIndex = i;
        continue;
      }
      return -1;
    }
    return slashIndex;
  }
  static parse(uri) {
    if (uri == null) dart.nullFailed(L173, 3442, 31, "uri");
    if (uri.length >= 5) {
      let dataDelta = core._startsWithData(uri, 0);
      if (dataDelta === 0) {
        return core.UriData._parse(uri, 5, null);
      }
      if (dataDelta === 32) {
        return core.UriData._parse(uri[$substring](5), 0, null);
      }
    }
    dart.throw(new core.FormatException.new("Does not start with 'data:'", uri, 0));
  }
  get uri() {
    let t235;
    t235 = this[_uriCache$];
    return t235 == null ? this[_uriCache$] = this[_computeUri]() : t235;
  }
  [_computeUri]() {
    let path = this[_text$];
    let query = null;
    let colonIndex = this[_separatorIndices$][$_get](0);
    let queryIndex = this[_text$][$indexOf]("?", dart.notNull(colonIndex) + 1);
    let end = this[_text$].length;
    if (queryIndex >= 0) {
      query = core._Uri._normalizeOrSubstring(this[_text$], queryIndex + 1, end, core._Uri._queryCharTable);
      end = queryIndex;
    }
    path = core._Uri._normalizeOrSubstring(this[_text$], dart.notNull(colonIndex) + 1, end, core._Uri._pathCharOrSlashTable);
    return new core._DataUri.new(this, path, query);
  }
  get mimeType() {
    let start = dart.notNull(this[_separatorIndices$][$_get](0)) + 1;
    let end = this[_separatorIndices$][$_get](1);
    if (start === end) return "text/plain";
    return core._Uri._uriDecode(this[_text$], start, end, convert.utf8, false);
  }
  get charset() {
    let parameterStart = 1;
    let parameterEnd = dart.notNull(this[_separatorIndices$][$length]) - 1;
    if (dart.test(this.isBase64)) {
      parameterEnd = parameterEnd - 1;
    }
    for (let i = parameterStart; i < parameterEnd; i = i + 2) {
      let keyStart = dart.notNull(this[_separatorIndices$][$_get](i)) + 1;
      let keyEnd = this[_separatorIndices$][$_get](i + 1);
      if (keyEnd === keyStart + 7 && this[_text$][$startsWith]("charset", keyStart)) {
        return core._Uri._uriDecode(this[_text$], dart.notNull(keyEnd) + 1, this[_separatorIndices$][$_get](i + 2), convert.utf8, false);
      }
    }
    return "US-ASCII";
  }
  get isBase64() {
    return this[_separatorIndices$][$length][$isOdd];
  }
  get contentText() {
    return this[_text$][$substring](dart.notNull(this[_separatorIndices$][$last]) + 1);
  }
  contentAsBytes() {
    let t235, t235$;
    let text = this[_text$];
    let start = dart.notNull(this[_separatorIndices$][$last]) + 1;
    if (dart.test(this.isBase64)) {
      return convert.base64.decoder.convert(text, start);
    }
    let length = text.length - start;
    for (let i = start; i < text.length; i = i + 1) {
      let codeUnit = text[$codeUnitAt](i);
      if (codeUnit === 37) {
        i = i + 2;
        length = length - 2;
      }
    }
    let result = _native_typed_data.NativeUint8List.new(length);
    if (length === text.length) {
      result[$setRange](0, length, text[$codeUnits], start);
      return result;
    }
    let index = 0;
    for (let i = start; i < text.length; i = i + 1) {
      let codeUnit = text[$codeUnitAt](i);
      if (codeUnit !== 37) {
        result[$_set]((t235 = index, index = t235 + 1, t235), codeUnit);
      } else {
        if (i + 2 < text.length) {
          let byte = _internal.parseHexByte(text, i + 1);
          if (dart.notNull(byte) >= 0) {
            result[$_set]((t235$ = index, index = t235$ + 1, t235$), byte);
            i = i + 2;
            continue;
          }
        }
        dart.throw(new core.FormatException.new("Invalid percent escape", text, i));
      }
    }
    if (!(index === result[$length])) dart.assertFailed(null, L173, 3602, 12, "index == result.length");
    return result;
  }
  contentAsString(opts) {
    let encoding = opts && 'encoding' in opts ? opts.encoding : null;
    if (encoding == null) {
      let charset = this.charset;
      encoding = convert.Encoding.getByName(charset);
      if (encoding == null) {
        dart.throw(new core.UnsupportedError.new(dart.str("Unknown charset: ") + dart.str(charset)));
      }
    }
    let text = this[_text$];
    let start = dart.notNull(this[_separatorIndices$][$last]) + 1;
    if (dart.test(this.isBase64)) {
      let converter = convert.base64.decoder.fuse(core.String, encoding.decoder);
      return converter.convert(text[$substring](start));
    }
    return core._Uri._uriDecode(text, start, text.length, encoding, false);
  }
  get parameters() {
    let result = new (IdentityMapOfString$String()).new();
    for (let i = 3; i < dart.notNull(this[_separatorIndices$][$length]); i = i + 2) {
      let start = dart.notNull(this[_separatorIndices$][$_get](i - 2)) + 1;
      let equals = this[_separatorIndices$][$_get](i - 1);
      let end = this[_separatorIndices$][$_get](i);
      let key = core._Uri._uriDecode(this[_text$], start, equals, convert.utf8, false);
      let value = core._Uri._uriDecode(this[_text$], dart.notNull(equals) + 1, end, convert.utf8, false);
      result[$_set](key, value);
    }
    return result;
  }
  static _parse(text, start, sourceUri) {
    if (text == null) dart.nullFailed(L173, 3664, 32, "text");
    if (start == null) dart.nullFailed(L173, 3664, 42, "start");
    if (!(start === 0 || start === 5)) dart.assertFailed(null, L173, 3665, 12, "start == 0 || start == 5");
    if (!(start === 5)[$_equals](text[$startsWith]("data:"))) dart.assertFailed(null, L173, 3666, 12, "(start == 5) == text.startsWith(\"data:\")");
    let indices = JSArrayOfint().of([dart.notNull(start) - 1]);
    let slashIndex = -1;
    let char = null;
    let i = start;
    for (; dart.notNull(i) < text.length; i = dart.notNull(i) + 1) {
      char = text[$codeUnitAt](i);
      if (dart.equals(char, 44) || dart.equals(char, 59)) break;
      if (dart.equals(char, 47)) {
        if (dart.notNull(slashIndex) < 0) {
          slashIndex = i;
          continue;
        }
        dart.throw(new core.FormatException.new("Invalid MIME type", text, i));
      }
    }
    if (dart.notNull(slashIndex) < 0 && dart.notNull(i) > dart.notNull(start)) {
      dart.throw(new core.FormatException.new("Invalid MIME type", text, i));
    }
    while (!dart.equals(char, 44)) {
      indices[$add](i);
      i = dart.notNull(i) + 1;
      let equalsIndex = -1;
      for (; dart.notNull(i) < text.length; i = dart.notNull(i) + 1) {
        char = text[$codeUnitAt](i);
        if (dart.equals(char, 61)) {
          if (dart.notNull(equalsIndex) < 0) equalsIndex = i;
        } else if (dart.equals(char, 59) || dart.equals(char, 44)) {
          break;
        }
      }
      if (dart.notNull(equalsIndex) >= 0) {
        indices[$add](equalsIndex);
      } else {
        let lastSeparator = indices[$last];
        if (!dart.equals(char, 44) || i !== dart.notNull(lastSeparator) + 7 || !text[$startsWith]("base64", dart.notNull(lastSeparator) + 1)) {
          dart.throw(new core.FormatException.new("Expecting '='", text, i));
        }
        break;
      }
    }
    indices[$add](i);
    let isBase64 = indices[$length][$isOdd];
    if (isBase64) {
      text = convert.base64.normalize(text, dart.notNull(i) + 1, text.length);
    } else {
      let data = core._Uri._normalize(text, dart.notNull(i) + 1, text.length, core.UriData._uricTable, {escapeDelimiters: true});
      if (data != null) {
        text = text[$replaceRange](dart.notNull(i) + 1, text.length, data);
      }
    }
    return new core.UriData.__(text, indices, sourceUri);
  }
  static _uriEncodeBytes(canonicalTable, bytes, buffer) {
    if (canonicalTable == null) dart.nullFailed(L173, 3742, 17, "canonicalTable");
    if (bytes == null) dart.nullFailed(L173, 3742, 43, "bytes");
    if (buffer == null) dart.nullFailed(L173, 3742, 61, "buffer");
    let byteOr = 0;
    for (let i = 0; i < dart.notNull(bytes[$length]); i = i + 1) {
      let byte = bytes[$_get](i);
      byteOr = (byteOr | dart.notNull(byte)) >>> 0;
      if (dart.notNull(byte) < 128 && (dart.notNull(canonicalTable[$_get](byte[$rightShift](4))) & 1 << (dart.notNull(byte) & 15)) !== 0) {
        buffer.writeCharCode(byte);
      } else {
        buffer.writeCharCode(37);
        buffer.writeCharCode("0123456789ABCDEF"[$codeUnitAt](byte[$rightShift](4)));
        buffer.writeCharCode("0123456789ABCDEF"[$codeUnitAt](dart.notNull(byte) & 15));
      }
    }
    if ((byteOr & ~255 >>> 0) !== 0) {
      for (let i = 0; i < dart.notNull(bytes[$length]); i = i + 1) {
        let byte = bytes[$_get](i);
        if (dart.notNull(byte) < 0 || dart.notNull(byte) > 255) {
          dart.throw(new core.ArgumentError.value(byte, "non-byte value"));
        }
      }
    }
  }
  toString() {
    return this[_separatorIndices$][$_get](0) === -1 ? dart.str("data:") + dart.str(this[_text$]) : this[_text$];
  }
};
(core.UriData.__ = function(_text, _separatorIndices, _uriCache) {
  if (_text == null) dart.nullFailed(L173, 3241, 18, "_text");
  if (_separatorIndices == null) dart.nullFailed(L173, 3241, 30, "_separatorIndices");
  this[_text$] = _text;
  this[_separatorIndices$] = _separatorIndices;
  this[_uriCache$] = _uriCache;
  ;
}).prototype = core.UriData.prototype;
dart.addTypeTests(core.UriData);
dart.addTypeCaches(core.UriData);
dart.setMethodSignature(core.UriData, () => ({
  __proto__: dart.getMethods(core.UriData.__proto__),
  [_computeUri]: dart.fnType(core.Uri, []),
  contentAsBytes: dart.fnType(typed_data.Uint8List, []),
  contentAsString: dart.fnType(core.String, [], {encoding: dart.nullable(convert.Encoding)}, {})
}));
dart.setGetterSignature(core.UriData, () => ({
  __proto__: dart.getGetters(core.UriData.__proto__),
  uri: core.Uri,
  mimeType: core.String,
  charset: core.String,
  isBase64: core.bool,
  contentText: core.String,
  parameters: core.Map$(core.String, core.String)
}));
dart.setLibraryUri(core.UriData, L8$);
dart.setFieldSignature(core.UriData, () => ({
  __proto__: dart.getFields(core.UriData.__proto__),
  [_text$]: dart.finalFieldType(core.String),
  [_separatorIndices$]: dart.finalFieldType(core.List$(core.int)),
  [_uriCache$]: dart.fieldType(dart.nullable(core.Uri))
}));
dart.defineExtensionMethods(core.UriData, ['toString']);
dart.defineLazy(core.UriData, {
  /*core.UriData._noScheme*/get _noScheme() {
    return -1;
  },
  /*core.UriData._base64*/get _base64() {
    return C102 || CT.C102;
  },
  /*core.UriData._tokenCharTable*/get _tokenCharTable() {
    return C439 || CT.C439;
  },
  /*core.UriData._uricTable*/get _uricTable() {
    return C438 || CT.C438;
  }
}, false);
var _hashCodeCache = dart.privateName(core, "_hashCodeCache");
var _uri$ = dart.privateName(core, "_uri");
var _schemeEnd$ = dart.privateName(core, "_schemeEnd");
var _hostStart$ = dart.privateName(core, "_hostStart");
var _portStart$ = dart.privateName(core, "_portStart");
var _pathStart$ = dart.privateName(core, "_pathStart");
var _queryStart$ = dart.privateName(core, "_queryStart");
var _fragmentStart$ = dart.privateName(core, "_fragmentStart");
var _schemeCache$ = dart.privateName(core, "_schemeCache");
var _isFile = dart.privateName(core, "_isFile");
var _isHttp = dart.privateName(core, "_isHttp");
var _isHttps = dart.privateName(core, "_isHttps");
var _isPackage = dart.privateName(core, "_isPackage");
var _isScheme = dart.privateName(core, "_isScheme");
var _computeScheme = dart.privateName(core, "_computeScheme");
var C440;
var _isPort = dart.privateName(core, "_isPort");
var _simpleMerge = dart.privateName(core, "_simpleMerge");
var _toNonSimple = dart.privateName(core, "_toNonSimple");
core._SimpleUri = class _SimpleUri extends core.Object {
  get hasScheme() {
    return dart.notNull(this[_schemeEnd$]) > 0;
  }
  get hasAuthority() {
    return dart.notNull(this[_hostStart$]) > 0;
  }
  get hasUserInfo() {
    return dart.notNull(this[_hostStart$]) > dart.notNull(this[_schemeEnd$]) + 4;
  }
  get hasPort() {
    return dart.notNull(this[_hostStart$]) > 0 && dart.notNull(this[_portStart$]) + 1 < dart.notNull(this[_pathStart$]);
  }
  get hasQuery() {
    return dart.notNull(this[_queryStart$]) < dart.notNull(this[_fragmentStart$]);
  }
  get hasFragment() {
    return dart.notNull(this[_fragmentStart$]) < this[_uri$].length;
  }
  get [_isFile]() {
    return this[_schemeEnd$] === 4 && this[_uri$][$startsWith]("file");
  }
  get [_isHttp]() {
    return this[_schemeEnd$] === 4 && this[_uri$][$startsWith]("http");
  }
  get [_isHttps]() {
    return this[_schemeEnd$] === 5 && this[_uri$][$startsWith]("https");
  }
  get [_isPackage]() {
    return this[_schemeEnd$] === 7 && this[_uri$][$startsWith]("package");
  }
  [_isScheme](scheme) {
    if (scheme == null) dart.nullFailed(L173, 4235, 25, "scheme");
    return this[_schemeEnd$] === scheme.length && this[_uri$][$startsWith](scheme);
  }
  get hasAbsolutePath() {
    return this[_uri$][$startsWith]("/", this[_pathStart$]);
  }
  get hasEmptyPath() {
    return this[_pathStart$] == this[_queryStart$];
  }
  get isAbsolute() {
    return dart.test(this.hasScheme) && !dart.test(this.hasFragment);
  }
  isScheme(scheme) {
    if (scheme == null) dart.nullFailed(L173, 4243, 24, "scheme");
    if (scheme == null || scheme[$isEmpty]) return dart.notNull(this[_schemeEnd$]) < 0;
    if (scheme.length !== this[_schemeEnd$]) return false;
    return core._Uri._compareScheme(scheme, this[_uri$]);
  }
  get scheme() {
    let t235;
    t235 = this[_schemeCache$];
    return t235 == null ? this[_schemeCache$] = this[_computeScheme]() : t235;
  }
  [_computeScheme]() {
    if (dart.notNull(this[_schemeEnd$]) <= 0) return "";
    if (dart.test(this[_isHttp])) return "http";
    if (dart.test(this[_isHttps])) return "https";
    if (dart.test(this[_isFile])) return "file";
    if (dart.test(this[_isPackage])) return "package";
    return this[_uri$][$substring](0, this[_schemeEnd$]);
  }
  get authority() {
    return dart.notNull(this[_hostStart$]) > 0 ? this[_uri$][$substring](dart.notNull(this[_schemeEnd$]) + 3, this[_pathStart$]) : "";
  }
  get userInfo() {
    return dart.notNull(this[_hostStart$]) > dart.notNull(this[_schemeEnd$]) + 3 ? this[_uri$][$substring](dart.notNull(this[_schemeEnd$]) + 3, dart.notNull(this[_hostStart$]) - 1) : "";
  }
  get host() {
    return dart.notNull(this[_hostStart$]) > 0 ? this[_uri$][$substring](this[_hostStart$], this[_portStart$]) : "";
  }
  get port() {
    if (dart.test(this.hasPort)) return core.int.parse(this[_uri$][$substring](dart.notNull(this[_portStart$]) + 1, this[_pathStart$]));
    if (dart.test(this[_isHttp])) return 80;
    if (dart.test(this[_isHttps])) return 443;
    return 0;
  }
  get path() {
    return this[_uri$][$substring](this[_pathStart$], this[_queryStart$]);
  }
  get query() {
    return dart.notNull(this[_queryStart$]) < dart.notNull(this[_fragmentStart$]) ? this[_uri$][$substring](dart.notNull(this[_queryStart$]) + 1, this[_fragmentStart$]) : "";
  }
  get fragment() {
    return dart.notNull(this[_fragmentStart$]) < this[_uri$].length ? this[_uri$][$substring](dart.notNull(this[_fragmentStart$]) + 1) : "";
  }
  get origin() {
    let isHttp = this[_isHttp];
    if (dart.notNull(this[_schemeEnd$]) < 0) {
      dart.throw(new core.StateError.new(dart.str("Cannot use origin without a scheme: ") + dart.str(this)));
    }
    if (!dart.test(isHttp) && !dart.test(this[_isHttps])) {
      dart.throw(new core.StateError.new(dart.str("Origin is only applicable to schemes http and https: ") + dart.str(this)));
    }
    if (this[_hostStart$] == this[_portStart$]) {
      dart.throw(new core.StateError.new(dart.str("A ") + dart.str(this.scheme) + dart.str(": URI should have a non-empty host name: ") + dart.str(this)));
    }
    if (this[_hostStart$] === dart.notNull(this[_schemeEnd$]) + 3) {
      return this[_uri$][$substring](0, this[_pathStart$]);
    }
    return this[_uri$][$substring](0, dart.notNull(this[_schemeEnd$]) + 3) + this[_uri$][$substring](this[_hostStart$], this[_pathStart$]);
  }
  get pathSegments() {
    let start = this[_pathStart$];
    let end = this[_queryStart$];
    if (this[_uri$][$startsWith]("/", start)) start = dart.notNull(start) + 1;
    if (start == end) return C402 || CT.C402;
    let parts = JSArrayOfString().of([]);
    for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
      let char = this[_uri$][$codeUnitAt](i);
      if (char === 47) {
        parts[$add](this[_uri$][$substring](start, i));
        start = dart.notNull(i) + 1;
      }
    }
    parts[$add](this[_uri$][$substring](start, end));
    return ListOfString().unmodifiable(parts);
  }
  get queryParameters() {
    if (!dart.test(this.hasQuery)) return C440 || CT.C440;
    return new (UnmodifiableMapViewOfString$String()).new(core.Uri.splitQueryString(this.query));
  }
  get queryParametersAll() {
    if (!dart.test(this.hasQuery)) return C426 || CT.C426;
    let queryParameterLists = core._Uri._splitQueryStringAll(this.query);
    queryParameterLists[$updateAll](C427 || CT.C427);
    return MapOfString$ListOfString().unmodifiable(queryParameterLists);
  }
  [_isPort](port) {
    if (port == null) dart.nullFailed(L173, 4335, 23, "port");
    let portDigitStart = dart.notNull(this[_portStart$]) + 1;
    return portDigitStart + port.length === this[_pathStart$] && this[_uri$][$startsWith](port, portDigitStart);
  }
  normalizePath() {
    return this;
  }
  removeFragment() {
    if (!dart.test(this.hasFragment)) return this;
    return new core._SimpleUri.new(this[_uri$][$substring](0, this[_fragmentStart$]), this[_schemeEnd$], this[_hostStart$], this[_portStart$], this[_pathStart$], this[_queryStart$], this[_fragmentStart$], this[_schemeCache$]);
  }
  replace(opts) {
    let scheme = opts && 'scheme' in opts ? opts.scheme : null;
    let userInfo = opts && 'userInfo' in opts ? opts.userInfo : null;
    let host = opts && 'host' in opts ? opts.host : null;
    let port = opts && 'port' in opts ? opts.port : null;
    let path = opts && 'path' in opts ? opts.path : null;
    let pathSegments = opts && 'pathSegments' in opts ? opts.pathSegments : null;
    let query = opts && 'query' in opts ? opts.query : null;
    let queryParameters = opts && 'queryParameters' in opts ? opts.queryParameters : null;
    let fragment = opts && 'fragment' in opts ? opts.fragment : null;
    let schemeChanged = false;
    if (scheme != null) {
      scheme = core._Uri._makeScheme(scheme, 0, scheme.length);
      schemeChanged = !dart.test(this[_isScheme](scheme));
    } else {
      scheme = this.scheme;
    }
    let isFile = scheme === "file";
    if (userInfo != null) {
      userInfo = core._Uri._makeUserInfo(userInfo, 0, userInfo.length);
    } else if (dart.notNull(this[_hostStart$]) > 0) {
      userInfo = this[_uri$][$substring](dart.notNull(this[_schemeEnd$]) + 3, this[_hostStart$]);
    } else {
      userInfo = "";
    }
    if (port != null) {
      port = core._Uri._makePort(port, scheme);
    } else {
      port = dart.test(this.hasPort) ? this.port : null;
      if (schemeChanged) {
        port = core._Uri._makePort(port, scheme);
      }
    }
    if (host != null) {
      host = core._Uri._makeHost(host, 0, host.length, false);
    } else if (dart.notNull(this[_hostStart$]) > 0) {
      host = this[_uri$][$substring](this[_hostStart$], this[_portStart$]);
    } else if (userInfo[$isNotEmpty] || port != null || isFile) {
      host = "";
    }
    let hasAuthority = host != null;
    if (path != null || pathSegments != null) {
      path = core._Uri._makePath(path, 0, core._stringOrNullLength(path), pathSegments, scheme, hasAuthority);
    } else {
      path = this[_uri$][$substring](this[_pathStart$], this[_queryStart$]);
      if ((isFile || hasAuthority && !path[$isEmpty]) && !path[$startsWith]("/")) {
        path = "/" + dart.notNull(path);
      }
    }
    if (query != null || queryParameters != null) {
      query = core._Uri._makeQuery(query, 0, core._stringOrNullLength(query), queryParameters);
    } else if (dart.notNull(this[_queryStart$]) < dart.notNull(this[_fragmentStart$])) {
      query = this[_uri$][$substring](dart.notNull(this[_queryStart$]) + 1, this[_fragmentStart$]);
    }
    if (fragment != null) {
      fragment = core._Uri._makeFragment(fragment, 0, fragment.length);
    } else if (dart.notNull(this[_fragmentStart$]) < this[_uri$].length) {
      fragment = this[_uri$][$substring](dart.notNull(this[_fragmentStart$]) + 1);
    }
    return new core._Uri._internal(scheme, userInfo, host, port, path, query, fragment);
  }
  resolve(reference) {
    if (reference == null) dart.nullFailed(L173, 4419, 22, "reference");
    return this.resolveUri(core.Uri.parse(reference));
  }
  resolveUri(reference) {
    if (reference == null) dart.nullFailed(L173, 4423, 22, "reference");
    if (core._SimpleUri.is(reference)) {
      return this[_simpleMerge](this, reference);
    }
    return this[_toNonSimple]().resolveUri(reference);
  }
  [_simpleMerge](base, ref) {
    if (base == null) dart.nullFailed(L173, 4435, 31, "base");
    if (ref == null) dart.nullFailed(L173, 4435, 48, "ref");
    if (dart.test(ref.hasScheme)) return ref;
    if (dart.test(ref.hasAuthority)) {
      if (!dart.test(base.hasScheme)) return ref;
      let isSimple = true;
      if (dart.test(base[_isFile])) {
        isSimple = !dart.test(ref.hasEmptyPath);
      } else if (dart.test(base[_isHttp])) {
        isSimple = !dart.test(ref[_isPort]("80"));
      } else if (dart.test(base[_isHttps])) {
        isSimple = !dart.test(ref[_isPort]("443"));
      }
      if (isSimple) {
        let delta = dart.notNull(base[_schemeEnd$]) + 1;
        let newUri = base[_uri$][$substring](0, dart.notNull(base[_schemeEnd$]) + 1) + ref[_uri$][$substring](dart.notNull(ref[_schemeEnd$]) + 1);
        return new core._SimpleUri.new(newUri, base[_schemeEnd$], dart.notNull(ref[_hostStart$]) + delta, dart.notNull(ref[_portStart$]) + delta, dart.notNull(ref[_pathStart$]) + delta, dart.notNull(ref[_queryStart$]) + delta, dart.notNull(ref[_fragmentStart$]) + delta, base[_schemeCache$]);
      } else {
        return this[_toNonSimple]().resolveUri(ref);
      }
    }
    if (dart.test(ref.hasEmptyPath)) {
      if (dart.test(ref.hasQuery)) {
        let delta = dart.notNull(base[_queryStart$]) - dart.notNull(ref[_queryStart$]);
        let newUri = base[_uri$][$substring](0, base[_queryStart$]) + ref[_uri$][$substring](ref[_queryStart$]);
        return new core._SimpleUri.new(newUri, base[_schemeEnd$], base[_hostStart$], base[_portStart$], base[_pathStart$], dart.notNull(ref[_queryStart$]) + delta, dart.notNull(ref[_fragmentStart$]) + delta, base[_schemeCache$]);
      }
      if (dart.test(ref.hasFragment)) {
        let delta = dart.notNull(base[_fragmentStart$]) - dart.notNull(ref[_fragmentStart$]);
        let newUri = base[_uri$][$substring](0, base[_fragmentStart$]) + ref[_uri$][$substring](ref[_fragmentStart$]);
        return new core._SimpleUri.new(newUri, base[_schemeEnd$], base[_hostStart$], base[_portStart$], base[_pathStart$], base[_queryStart$], dart.notNull(ref[_fragmentStart$]) + delta, base[_schemeCache$]);
      }
      return base.removeFragment();
    }
    if (dart.test(ref.hasAbsolutePath)) {
      let delta = dart.notNull(base[_pathStart$]) - dart.notNull(ref[_pathStart$]);
      let newUri = base[_uri$][$substring](0, base[_pathStart$]) + ref[_uri$][$substring](ref[_pathStart$]);
      return new core._SimpleUri.new(newUri, base[_schemeEnd$], base[_hostStart$], base[_portStart$], base[_pathStart$], dart.notNull(ref[_queryStart$]) + delta, dart.notNull(ref[_fragmentStart$]) + delta, base[_schemeCache$]);
    }
    if (dart.test(base.hasEmptyPath) && dart.test(base.hasAuthority)) {
      let refStart = ref[_pathStart$];
      while (ref[_uri$][$startsWith]("../", refStart)) {
        refStart = dart.notNull(refStart) + 3;
      }
      let delta = dart.notNull(base[_pathStart$]) - dart.notNull(refStart) + 1;
      let newUri = dart.str(base[_uri$][$substring](0, base[_pathStart$])) + dart.str("/") + dart.str(ref[_uri$][$substring](refStart));
      return new core._SimpleUri.new(newUri, base[_schemeEnd$], base[_hostStart$], base[_portStart$], base[_pathStart$], dart.notNull(ref[_queryStart$]) + delta, dart.notNull(ref[_fragmentStart$]) + delta, base[_schemeCache$]);
    }
    let baseUri = base[_uri$];
    let refUri = ref[_uri$];
    let baseStart = base[_pathStart$];
    let baseEnd = base[_queryStart$];
    while (baseUri[$startsWith]("../", baseStart))
      baseStart = dart.notNull(baseStart) + 3;
    let refStart = ref[_pathStart$];
    let refEnd = ref[_queryStart$];
    let backCount = 0;
    while (dart.notNull(refStart) + 3 <= dart.notNull(refEnd) && refUri[$startsWith]("../", refStart)) {
      refStart = dart.notNull(refStart) + 3;
      backCount = backCount + 1;
    }
    let insert = "";
    while (dart.notNull(baseEnd) > dart.notNull(baseStart)) {
      baseEnd = dart.notNull(baseEnd) - 1;
      let char = baseUri[$codeUnitAt](baseEnd);
      if (char === 47) {
        insert = "/";
        if (backCount === 0) break;
        backCount = backCount - 1;
      }
    }
    if (baseEnd == baseStart && !dart.test(base.hasScheme) && !dart.test(base.hasAbsolutePath)) {
      insert = "";
      refStart = dart.notNull(refStart) - backCount * 3;
    }
    let delta = dart.notNull(baseEnd) - dart.notNull(refStart) + insert.length;
    let newUri = dart.str(base[_uri$][$substring](0, baseEnd)) + dart.str(insert) + dart.str(ref[_uri$][$substring](refStart));
    return new core._SimpleUri.new(newUri, base[_schemeEnd$], base[_hostStart$], base[_portStart$], base[_pathStart$], dart.notNull(ref[_queryStart$]) + delta, dart.notNull(ref[_fragmentStart$]) + delta, base[_schemeCache$]);
  }
  toFilePath(opts) {
    let t235;
    let windows = opts && 'windows' in opts ? opts.windows : null;
    if (dart.notNull(this[_schemeEnd$]) >= 0 && !dart.test(this[_isFile])) {
      dart.throw(new core.UnsupportedError.new(dart.str("Cannot extract a file path from a ") + dart.str(this.scheme) + dart.str(" URI")));
    }
    if (dart.notNull(this[_queryStart$]) < this[_uri$].length) {
      if (dart.notNull(this[_queryStart$]) < dart.notNull(this[_fragmentStart$])) {
        dart.throw(new core.UnsupportedError.new("Cannot extract a file path from a URI with a query component"));
      }
      dart.throw(new core.UnsupportedError.new("Cannot extract a file path from a URI with a fragment component"));
    }
    return dart.test((t235 = windows, t235 == null ? core._Uri._isWindows : t235)) ? core._Uri._toWindowsFilePath(this) : this[_toFilePath]();
  }
  [_toFilePath]() {
    if (dart.notNull(this[_hostStart$]) < dart.notNull(this[_portStart$])) {
      dart.throw(new core.UnsupportedError.new(dart.str("Cannot extract a non-Windows file path from a file URI ") + dart.str("with an authority")));
    }
    return this.path;
  }
  get data() {
    if (!(this.scheme !== "data")) dart.assertFailed(null, L173, 4638, 12, "scheme != \"data\"");
    return null;
  }
  get hashCode() {
    let t235;
    t235 = this[_hashCodeCache];
    return t235 == null ? this[_hashCodeCache] = dart.hashCode(this[_uri$]) : t235;
  }
  _equals(other) {
    if (other == null) return false;
    if (this === other) return true;
    return core.Uri.is(other) && this[_uri$] == dart.toString(other);
  }
  [_toNonSimple]() {
    return new core._Uri._internal(this.scheme, this.userInfo, dart.test(this.hasAuthority) ? this.host : null, dart.test(this.hasPort) ? this.port : null, this.path, dart.test(this.hasQuery) ? this.query : null, dart.test(this.hasFragment) ? this.fragment : null);
  }
  toString() {
    return this[_uri$];
  }
};
(core._SimpleUri.new = function(_uri, _schemeEnd, _hostStart, _portStart, _pathStart, _queryStart, _fragmentStart, _schemeCache) {
  if (_uri == null) dart.nullFailed(L173, 4213, 12, "_uri");
  if (_schemeEnd == null) dart.nullFailed(L173, 4214, 12, "_schemeEnd");
  if (_hostStart == null) dart.nullFailed(L173, 4215, 12, "_hostStart");
  if (_portStart == null) dart.nullFailed(L173, 4216, 12, "_portStart");
  if (_pathStart == null) dart.nullFailed(L173, 4217, 12, "_pathStart");
  if (_queryStart == null) dart.nullFailed(L173, 4218, 12, "_queryStart");
  if (_fragmentStart == null) dart.nullFailed(L173, 4219, 12, "_fragmentStart");
  this[_hashCodeCache] = null;
  this[_uri$] = _uri;
  this[_schemeEnd$] = _schemeEnd;
  this[_hostStart$] = _hostStart;
  this[_portStart$] = _portStart;
  this[_pathStart$] = _pathStart;
  this[_queryStart$] = _queryStart;
  this[_fragmentStart$] = _fragmentStart;
  this[_schemeCache$] = _schemeCache;
  ;
}).prototype = core._SimpleUri.prototype;
dart.addTypeTests(core._SimpleUri);
dart.addTypeCaches(core._SimpleUri);
core._SimpleUri[dart.implements] = () => [core.Uri];
dart.setMethodSignature(core._SimpleUri, () => ({
  __proto__: dart.getMethods(core._SimpleUri.__proto__),
  [_isScheme]: dart.fnType(core.bool, [core.String]),
  isScheme: dart.fnType(core.bool, [core.String]),
  [_computeScheme]: dart.fnType(core.String, []),
  [_isPort]: dart.fnType(core.bool, [core.String]),
  normalizePath: dart.fnType(core.Uri, []),
  removeFragment: dart.fnType(core.Uri, []),
  replace: dart.fnType(core.Uri, [], {fragment: dart.nullable(core.String), host: dart.nullable(core.String), path: dart.nullable(core.String), pathSegments: dart.nullable(core.Iterable$(core.String)), port: dart.nullable(core.int), query: dart.nullable(core.String), queryParameters: dart.nullable(core.Map$(core.String, dart.dynamic)), scheme: dart.nullable(core.String), userInfo: dart.nullable(core.String)}, {}),
  resolve: dart.fnType(core.Uri, [core.String]),
  resolveUri: dart.fnType(core.Uri, [core.Uri]),
  [_simpleMerge]: dart.fnType(core.Uri, [core._SimpleUri, core._SimpleUri]),
  toFilePath: dart.fnType(core.String, [], {windows: dart.nullable(core.bool)}, {}),
  [_toFilePath]: dart.fnType(core.String, []),
  [_toNonSimple]: dart.fnType(core.Uri, [])
}));
dart.setGetterSignature(core._SimpleUri, () => ({
  __proto__: dart.getGetters(core._SimpleUri.__proto__),
  hasScheme: core.bool,
  hasAuthority: core.bool,
  hasUserInfo: core.bool,
  hasPort: core.bool,
  hasQuery: core.bool,
  hasFragment: core.bool,
  [_isFile]: core.bool,
  [_isHttp]: core.bool,
  [_isHttps]: core.bool,
  [_isPackage]: core.bool,
  hasAbsolutePath: core.bool,
  hasEmptyPath: core.bool,
  isAbsolute: core.bool,
  scheme: core.String,
  authority: core.String,
  userInfo: core.String,
  host: core.String,
  port: core.int,
  path: core.String,
  query: core.String,
  fragment: core.String,
  origin: core.String,
  pathSegments: core.List$(core.String),
  queryParameters: core.Map$(core.String, core.String),
  queryParametersAll: core.Map$(core.String, core.List$(core.String)),
  data: dart.nullable(core.UriData)
}));
dart.setLibraryUri(core._SimpleUri, L8$);
dart.setFieldSignature(core._SimpleUri, () => ({
  __proto__: dart.getFields(core._SimpleUri.__proto__),
  [_uri$]: dart.finalFieldType(core.String),
  [_schemeEnd$]: dart.finalFieldType(core.int),
  [_hostStart$]: dart.finalFieldType(core.int),
  [_portStart$]: dart.finalFieldType(core.int),
  [_pathStart$]: dart.finalFieldType(core.int),
  [_queryStart$]: dart.finalFieldType(core.int),
  [_fragmentStart$]: dart.finalFieldType(core.int),
  [_schemeCache$]: dart.fieldType(dart.nullable(core.String)),
  [_hashCodeCache]: dart.fieldType(dart.nullable(core.int))
}));
dart.defineExtensionMethods(core._SimpleUri, ['_equals', 'toString']);
dart.defineExtensionAccessors(core._SimpleUri, ['hashCode']);
var _data$0 = dart.privateName(core, "_data");
core._DataUri = class _DataUri extends core._Uri {
  get data() {
    return this[_data$0];
  }
};
(core._DataUri.new = function(_data, path, query) {
  if (_data == null) dart.nullFailed(L173, 4667, 17, "_data");
  if (path == null) dart.nullFailed(L173, 4667, 31, "path");
  this[_data$0] = _data;
  core._DataUri.__proto__._internal.call(this, "data", "", null, null, path, query, null);
  ;
}).prototype = core._DataUri.prototype;
dart.addTypeTests(core._DataUri);
dart.addTypeCaches(core._DataUri);
dart.setLibraryUri(core._DataUri, L8$);
dart.setFieldSignature(core._DataUri, () => ({
  __proto__: dart.getFields(core._DataUri.__proto__),
  [_data$0]: dart.finalFieldType(core.UriData)
}));
core._symbolToString = function _symbolToString(symbol) {
  if (symbol == null) dart.nullFailed(L7, 29, 31, "symbol");
  return _js_helper.PrivateSymbol.is(symbol) ? _js_helper.PrivateSymbol.getName(symbol) : _internal.Symbol.getName(_internal.Symbol.as(symbol));
};
core._max = function _max(a, b) {
  if (a == null) dart.nullFailed(L7, 918, 14, "a");
  if (b == null) dart.nullFailed(L7, 918, 21, "b");
  return dart.notNull(a) > dart.notNull(b) ? a : b;
};
core._min = function _min(a, b) {
  if (a == null) dart.nullFailed(L7, 919, 14, "a");
  if (b == null) dart.nullFailed(L7, 919, 21, "b");
  return dart.notNull(a) < dart.notNull(b) ? a : b;
};
core.identical = function identical(a, b) {
  return a == null ? b == null : a === b;
};
core.identityHashCode = function identityHashCode(object) {
  if (object == null) return 0;
  let hash = object[dart.identityHashCode_];
  if (hash == null) {
    hash = Math.random() * 0x3fffffff | 0;
    object[dart.identityHashCode_] = hash;
  }
  return hash;
};
core.print = function print$0(object) {
  let line = dart.toString(object);
  let toZone = _internal.printToZone;
  if (toZone == null) {
    _internal.printToConsole(line);
  } else {
    toZone(line);
  }
};
core._isLeadSurrogate = function _isLeadSurrogate$(code) {
  if (code == null) dart.nullFailed(L172, 665, 27, "code");
  return (dart.notNull(code) & 64512) === 55296;
};
core._isTrailSurrogate = function _isTrailSurrogate(code) {
  if (code == null) dart.nullFailed(L172, 668, 28, "code");
  return (dart.notNull(code) & 64512) === 56320;
};
core._combineSurrogatePair = function _combineSurrogatePair$(start, end) {
  if (start == null) dart.nullFailed(L172, 671, 31, "start");
  if (end == null) dart.nullFailed(L172, 671, 42, "end");
  return 65536 + ((dart.notNull(start) & 1023) << 10) + (dart.notNull(end) & 1023);
};
core._createTables = function _createTables() {
  let unreserved = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~";
  let pchar = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=";
  let tables = ListOfUint8List().generate(22, dart.fn(_ => {
    if (_ == null) dart.nullFailed(L173, 3989, 54, "_");
    return _native_typed_data.NativeUint8List.new(96);
  }, intToUint8List()));
  function build(state, defaultTransition) {
    let t235;
    t235 = tables[$_get](core.int.as(state));
    return (() => {
      t235[$fillRange](0, 96, intN().as(defaultTransition));
      return t235;
    })();
  }
  dart.fn(build, dynamicAnddynamicToUint8List());
  function setChars(target, chars, transition) {
    if (target == null) dart.nullFailed(L173, 4000, 27, "target");
    if (chars == null) dart.nullFailed(L173, 4000, 42, "chars");
    if (transition == null) dart.nullFailed(L173, 4000, 53, "transition");
    for (let i = 0; i < chars.length; i = i + 1) {
      let char = chars[$codeUnitAt](i);
      target[$_set]((char ^ 96) >>> 0, transition);
    }
  }
  dart.fn(setChars, Uint8ListAndStringAndintTovoid());
  function setRange(target, range, transition) {
    if (target == null) dart.nullFailed(L173, 4013, 27, "target");
    if (range == null) dart.nullFailed(L173, 4013, 42, "range");
    if (transition == null) dart.nullFailed(L173, 4013, 53, "transition");
    for (let i = range[$codeUnitAt](0), n = range[$codeUnitAt](1); i <= n; i = i + 1) {
      target[$_set]((i ^ 96) >>> 0, transition);
    }
  }
  dart.fn(setRange, Uint8ListAndStringAndintTovoid());
  let b = null;
  b = build(0, (1 | 224) >>> 0);
  setChars(b, pchar, 1);
  setChars(b, ".", 14);
  setChars(b, ":", (2 | 32) >>> 0);
  setChars(b, "/", 3);
  setChars(b, "?", (12 | 160) >>> 0);
  setChars(b, "#", (13 | 192) >>> 0);
  b = build(14, (1 | 224) >>> 0);
  setChars(b, pchar, 1);
  setChars(b, ".", 15);
  setChars(b, ":", (2 | 32) >>> 0);
  setChars(b, "/", (10 | 224) >>> 0);
  setChars(b, "?", (12 | 160) >>> 0);
  setChars(b, "#", (13 | 192) >>> 0);
  b = build(15, (1 | 224) >>> 0);
  setChars(b, pchar, 1);
  setChars(b, "%", (1 | 224) >>> 0);
  setChars(b, ":", (2 | 32) >>> 0);
  setChars(b, "/", 9);
  setChars(b, "?", (12 | 160) >>> 0);
  setChars(b, "#", (13 | 192) >>> 0);
  b = build(1, (1 | 224) >>> 0);
  setChars(b, pchar, 1);
  setChars(b, ":", (2 | 32) >>> 0);
  setChars(b, "/", 10);
  setChars(b, "?", (12 | 160) >>> 0);
  setChars(b, "#", (13 | 192) >>> 0);
  b = build(2, (11 | 224) >>> 0);
  setChars(b, pchar, (11 | 128) >>> 0);
  setChars(b, "/", (3 | 128) >>> 0);
  setChars(b, ".", (18 | 128) >>> 0);
  setChars(b, "?", (12 | 160) >>> 0);
  setChars(b, "#", (13 | 192) >>> 0);
  b = build(3, (11 | 224) >>> 0);
  setChars(b, pchar, 11);
  setChars(b, "/", (4 | 64) >>> 0);
  setChars(b, ".", 18);
  setChars(b, "?", (12 | 160) >>> 0);
  setChars(b, "#", (13 | 192) >>> 0);
  b = build(4, (5 | 224) >>> 0);
  setChars(b, pchar, 5);
  setRange(b, "AZ", (5 | 224) >>> 0);
  setChars(b, ":", (6 | 96) >>> 0);
  setChars(b, "@", (4 | 64) >>> 0);
  setChars(b, "[", (8 | 224) >>> 0);
  setChars(b, "/", (10 | 128) >>> 0);
  setChars(b, "?", (12 | 160) >>> 0);
  setChars(b, "#", (13 | 192) >>> 0);
  b = build(5, (5 | 224) >>> 0);
  setChars(b, pchar, 5);
  setRange(b, "AZ", (5 | 224) >>> 0);
  setChars(b, ":", (6 | 96) >>> 0);
  setChars(b, "@", (4 | 64) >>> 0);
  setChars(b, "/", (10 | 128) >>> 0);
  setChars(b, "?", (12 | 160) >>> 0);
  setChars(b, "#", (13 | 192) >>> 0);
  b = build(6, (7 | 224) >>> 0);
  setRange(b, "19", 7);
  setChars(b, "@", (4 | 64) >>> 0);
  setChars(b, "/", (10 | 128) >>> 0);
  setChars(b, "?", (12 | 160) >>> 0);
  setChars(b, "#", (13 | 192) >>> 0);
  b = build(7, (7 | 224) >>> 0);
  setRange(b, "09", 7);
  setChars(b, "@", (4 | 64) >>> 0);
  setChars(b, "/", (10 | 128) >>> 0);
  setChars(b, "?", (12 | 160) >>> 0);
  setChars(b, "#", (13 | 192) >>> 0);
  b = build(8, 8);
  setChars(b, "]", 5);
  b = build(9, (11 | 224) >>> 0);
  setChars(b, pchar, 11);
  setChars(b, ".", 16);
  setChars(b, "/", (10 | 224) >>> 0);
  setChars(b, "?", (12 | 160) >>> 0);
  setChars(b, "#", (13 | 192) >>> 0);
  b = build(16, (11 | 224) >>> 0);
  setChars(b, pchar, 11);
  setChars(b, ".", 17);
  setChars(b, "/", (10 | 224) >>> 0);
  setChars(b, "?", (12 | 160) >>> 0);
  setChars(b, "#", (13 | 192) >>> 0);
  b = build(17, (11 | 224) >>> 0);
  setChars(b, pchar, 11);
  setChars(b, "/", 9);
  setChars(b, "?", (12 | 160) >>> 0);
  setChars(b, "#", (13 | 192) >>> 0);
  b = build(10, (11 | 224) >>> 0);
  setChars(b, pchar, 11);
  setChars(b, ".", 18);
  setChars(b, "/", (10 | 224) >>> 0);
  setChars(b, "?", (12 | 160) >>> 0);
  setChars(b, "#", (13 | 192) >>> 0);
  b = build(18, (11 | 224) >>> 0);
  setChars(b, pchar, 11);
  setChars(b, ".", 19);
  setChars(b, "/", (10 | 224) >>> 0);
  setChars(b, "?", (12 | 160) >>> 0);
  setChars(b, "#", (13 | 192) >>> 0);
  b = build(19, (11 | 224) >>> 0);
  setChars(b, pchar, 11);
  setChars(b, "/", (10 | 224) >>> 0);
  setChars(b, "?", (12 | 160) >>> 0);
  setChars(b, "#", (13 | 192) >>> 0);
  b = build(11, (11 | 224) >>> 0);
  setChars(b, pchar, 11);
  setChars(b, "/", 10);
  setChars(b, "?", (12 | 160) >>> 0);
  setChars(b, "#", (13 | 192) >>> 0);
  b = build(12, (12 | 224) >>> 0);
  setChars(b, pchar, 12);
  setChars(b, "?", 12);
  setChars(b, "#", (13 | 192) >>> 0);
  b = build(13, (13 | 224) >>> 0);
  setChars(b, pchar, 13);
  setChars(b, "?", 13);
  b = build(20, (21 | 224) >>> 0);
  setRange(b, "az", 21);
  b = build(21, (21 | 224) >>> 0);
  setRange(b, "az", 21);
  setRange(b, "09", 21);
  setChars(b, "+-.", 21);
  return tables;
};
core._scan = function _scan(uri, start, end, state, indices) {
  if (uri == null) dart.nullFailed(L173, 4181, 18, "uri");
  if (start == null) dart.nullFailed(L173, 4181, 27, "start");
  if (end == null) dart.nullFailed(L173, 4181, 38, "end");
  if (state == null) dart.nullFailed(L173, 4181, 47, "state");
  if (indices == null) dart.nullFailed(L173, 4181, 64, "indices");
  let tables = core._scannerTables;
  if (!(dart.notNull(end) <= uri.length)) dart.assertFailed(null, L173, 4183, 10, "end <= uri.length");
  for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
    let table = tables[$_get](state);
    let char = (uri[$codeUnitAt](i) ^ 96) >>> 0;
    if (char > 95) char = 31;
    let transition = table[$_get](char);
    state = dart.notNull(transition) & 31;
    indices[$_set](transition[$rightShift](5), i);
  }
  return state;
};
core._startsWithData = function _startsWithData(text, start) {
  if (text == null) dart.nullFailed(L173, 4681, 28, "text");
  if (start == null) dart.nullFailed(L173, 4681, 38, "start");
  let delta = ((text[$codeUnitAt](dart.notNull(start) + 4) ^ 58) >>> 0) * 3;
  delta = (delta | (text[$codeUnitAt](start) ^ 100) >>> 0) >>> 0;
  delta = (delta | (text[$codeUnitAt](dart.notNull(start) + 1) ^ 97) >>> 0) >>> 0;
  delta = (delta | (text[$codeUnitAt](dart.notNull(start) + 2) ^ 116) >>> 0) >>> 0;
  delta = (delta | (text[$codeUnitAt](dart.notNull(start) + 3) ^ 97) >>> 0) >>> 0;
  return delta;
};
core._stringOrNullLength = function _stringOrNullLength(s) {
  return s == null ? 0 : s.length;
};
core._toUnmodifiableStringList = function _toUnmodifiableStringList(key, list) {
  if (key == null) dart.nullFailed(L173, 4694, 47, "key");
  if (list == null) dart.nullFailed(L173, 4694, 65, "list");
  return ListOfString().unmodifiable(list);
};
var C441;
var C442;
var C443;
dart.defineLazy(core, {
  /*core._dummyList*/get _dummyList() {
    return _native_typed_data.NativeUint16List.new(0);
  },
  /*core.deprecated*/get deprecated() {
    return C441 || CT.C441;
  },
  /*core.override*/get override() {
    return C442 || CT.C442;
  },
  /*core.provisional*/get provisional() {
    return null;
  },
  /*core.proxy*/get proxy() {
    return C443 || CT.C443;
  },
  /*core._SPACE*/get _SPACE() {
    return 32;
  },
  /*core._PERCENT*/get _PERCENT() {
    return 37;
  },
  /*core._AMPERSAND*/get _AMPERSAND() {
    return 38;
  },
  /*core._PLUS*/get _PLUS() {
    return 43;
  },
  /*core._DOT*/get _DOT() {
    return 46;
  },
  /*core._SLASH*/get _SLASH() {
    return 47;
  },
  /*core._COLON*/get _COLON() {
    return 58;
  },
  /*core._EQUALS*/get _EQUALS() {
    return 61;
  },
  /*core._UPPER_CASE_A*/get _UPPER_CASE_A() {
    return 65;
  },
  /*core._UPPER_CASE_Z*/get _UPPER_CASE_Z() {
    return 90;
  },
  /*core._LEFT_BRACKET*/get _LEFT_BRACKET() {
    return 91;
  },
  /*core._BACKSLASH*/get _BACKSLASH() {
    return 92;
  },
  /*core._RIGHT_BRACKET*/get _RIGHT_BRACKET() {
    return 93;
  },
  /*core._LOWER_CASE_A*/get _LOWER_CASE_A() {
    return 97;
  },
  /*core._LOWER_CASE_F*/get _LOWER_CASE_F() {
    return 102;
  },
  /*core._LOWER_CASE_Z*/get _LOWER_CASE_Z() {
    return 122;
  },
  /*core._hexDigits*/get _hexDigits() {
    return "0123456789ABCDEF";
  },
  /*core._schemeEndIndex*/get _schemeEndIndex() {
    return 1;
  },
  /*core._hostStartIndex*/get _hostStartIndex() {
    return 2;
  },
  /*core._portStartIndex*/get _portStartIndex() {
    return 3;
  },
  /*core._pathStartIndex*/get _pathStartIndex() {
    return 4;
  },
  /*core._queryStartIndex*/get _queryStartIndex() {
    return 5;
  },
  /*core._fragmentStartIndex*/get _fragmentStartIndex() {
    return 6;
  },
  /*core._notSimpleIndex*/get _notSimpleIndex() {
    return 7;
  },
  /*core._uriStart*/get _uriStart() {
    return 0;
  },
  /*core._nonSimpleEndStates*/get _nonSimpleEndStates() {
    return 14;
  },
  /*core._schemeStart*/get _schemeStart() {
    return 20;
  },
  /*core._scannerTables*/get _scannerTables() {
    return core._createTables();
  }
}, false);

















dart.trackLibraries("dart_sdk", {
  "dart:_runtime": dart,
  "dart:_debugger": _debugger,
  "dart:_foreign_helper": _foreign_helper,
  "dart:_interceptors": _interceptors,
  "dart:_internal": _internal,
  "dart:_isolate_helper": _isolate_helper,
  "dart:_js_helper": _js_helper,
  "dart:_js_primitives": _js_primitives,
  "dart:_metadata": _metadata,
  "dart:_native_typed_data": _native_typed_data,
  "dart:async": async,
  "dart:collection": collection,
  "dart:convert": convert,
  "dart:developer": developer,
  "dart:io": io,
  "dart:isolate": isolate$,
  "dart:js": js,
  "dart:js_util": js_util,
  "dart:math": math,
  "dart:typed_data": typed_data,
  "dart:core": core,
}, {
  "dart:_runtime": ["utils.dart", "classes.dart", "rtti.dart", "types.dart", "errors.dart", "operations.dart"],
  "dart:_debugger": ["profile.dart"],
  "dart:_interceptors": ["js_array.dart", "js_number.dart", "js_string.dart"],
  "dart:_internal": ["async_cast.dart", "bytes_builder.dart", "cast.dart", "errors.dart", "iterable.dart", "list.dart", "linked_list.dart", "print.dart", "sort.dart", "symbol.dart"],
  "dart:_js_helper": ["annotations.dart", "linked_hash_map.dart", "identity_hash_map.dart", "custom_hash_map.dart", "native_helper.dart", "regexp_helper.dart", "string_helper.dart", "js_rti.dart"],
  "dart:async": ["async_error.dart", "broadcast_stream_controller.dart", "deferred_load.dart", "future.dart", "future_impl.dart", "schedule_microtask.dart", "stream.dart", "stream_controller.dart", "stream_impl.dart", "stream_pipe.dart", "stream_transformers.dart", "timer.dart", "zone.dart"],
  "dart:collection": ["collections.dart", "hash_map.dart", "hash_set.dart", "iterable.dart", "iterator.dart", "linked_hash_map.dart", "linked_hash_set.dart", "linked_list.dart", "list.dart", "maps.dart", "queue.dart", "set.dart", "splay_tree.dart"],
  "dart:convert": ["ascii.dart", "base64.dart", "byte_conversion.dart", "chunked_conversion.dart", "codec.dart", "converter.dart", "encoding.dart", "html_escape.dart", "json.dart", "latin1.dart", "line_splitter.dart", "string_conversion.dart", "utf.dart"],
  "dart:developer": ["extension.dart", "profiler.dart", "service.dart", "timeline.dart"],
  "dart:io": ["common.dart", "data_transformer.dart", "directory.dart", "directory_impl.dart", "embedder_config.dart", "eventhandler.dart", "file.dart", "file_impl.dart", "file_system_entity.dart", "io_resource_info.dart", "io_sink.dart", "io_service.dart", "link.dart", "namespace_impl.dart", "network_policy.dart", "network_profiling.dart", "overrides.dart", "platform.dart", "platform_impl.dart", "process.dart", "secure_server_socket.dart", "secure_socket.dart", "security_context.dart", "service_object.dart", "socket.dart", "stdio.dart", "string_transformer.dart", "sync_socket.dart"],
  "dart:isolate": ["capability.dart"],
  "dart:math": ["jenkins_smi_hash.dart", "point.dart", "random.dart", "rectangle.dart"],
  "dart:typed_data": ["unmodifiable_typed_data.dart"],
    "dart:core": ["annotations.dart", "bigint.dart", "bool.dart", "comparable.dart", "date_time.dart", "double.dart", "duration.dart", "errors.dart", "exceptions.dart", "expando.dart", "function.dart", "identical.dart", "int.dart", "invocation.dart", "iterable.dart", "iterator.dart", "list.dart", "map.dart", "null.dart", "num.dart", "object.dart", "pattern.dart", "print.dart", "regexp.dart", "set.dart", "sink.dart", "stacktrace.dart", "stopwatch.dart", "string.dart", "string_buffer.dart", "string_sink.dart", "symbol.dart", "type.dart", "uri.dart"],
 }, null);
// Exports:
exports.dart = dart;
exports._debugger = _debugger;
exports._foreign_helper = _foreign_helper;
exports._interceptors = _interceptors;
exports._internal = _internal;
exports._isolate_helper = _isolate_helper;
exports._js_helper = _js_helper;
exports._js_primitives = _js_primitives;
exports._metadata = _metadata;
exports._native_typed_data = _native_typed_data;
exports.async = async;
exports.collection = collection;
exports.convert = convert;
exports.developer = developer;
exports.io = io;
exports.isolate = isolate$;
exports.js = js;
exports.js_util = js_util;
exports.math = math;
exports.typed_data = typed_data;
exports.core = core;
exports.dartx = dartx;
